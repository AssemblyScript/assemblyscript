{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","anyref","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","Anyref","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocArray","Feature","featureToString","Target","Typeinfo","TypeinfoFlags","x","DiagnosticCategory","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","code","message","range","relatedRange","arg0","arg1","arg2","replace","DiagnosticMessage","createInfo","createWarning","createError","withRange","withRelatedRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","showContext","diagnostics","emitDiagnostic","info","infoRelated","warning","warningRelated","error","errorRelated","DiagnosticEmitter","Token","Range","NodeKind","kind","LITERAL","NULL","TRUE","FALSE","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","createTypeName","typeName","TypeName","identifier","next","createSimpleTypeName","Node","createIdentifierExpression","createNamedType","typeArguments","isNullable","type","NamedTypeNode","createFunctionType","parameters","returnType","explicitThisType","FunctionTypeNode","createOmittedType","createTypeParameter","extendsType","defaultType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","DecoratorKind","fromNode","createComment","node","CommentNode","commentKind","isQuoted","expr","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","declaration","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","values","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","flags","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","createExportDefaultStatement","ExportDefaultStatement","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","localName","exportedName","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","createImportStatementWithWildcard","createImportDeclaration","foreignName","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","arrowKind","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","hasGenericComponent","typeParameterNodes","NAMEDTYPE","typeArgumentNodes","k","FUNCTIONTYPE","parameterNodes","TypeNode","TYPENAME","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","NONE","is","flag","isAny","set","nameNode","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","LAZY","OPERATOR","SEALED","UNMANAGED","UNSAFE","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","BINARY","numTypeArguments","numArguments","CLASS","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","STRING","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","SOURCE","parent","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","LIBRARY","LIBRARY_ENTRY","Source","DeclarationStatement","INDEXSIGNATUREDECLARATION","VariableLikeDeclarationStatement","BLOCK","BREAK","CLASSDECLARATION","CONTINUE","DO","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","EXPORTDEFAULT","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","ArrowKind","FUNCTIONDECLARATION","clone","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","endsWith","decorator","OperatorKind","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","pathLiteral","fromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","fromBinaryToken","token","PLUS_EQUALS","MINUS_EQUALS","ASTERISK","ASTERISK_EQUALS","SLASH","SLASH_EQUALS","PERCENT","PERCENT_EQUALS","ASTERISK_ASTERISK","ASTERISK_ASTERISK_EQUALS","AMPERSAND","AMPERSAND_EQUALS","BAR","BAR_EQUALS","CARET","CARET_EQUALS","LESSTHAN_LESSTHAN","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","GREATERTHAN","GREATERTHAN_EQUALS","LESSTHAN","LESSTHAN_EQUALS","fromUnaryPrefixToken","EXCLAMATION","TILDE","PLUS_PLUS","MINUS_MINUS","fromUnaryPostfixToken","ElementKind","DecoratorFlags","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","wrapperClasses","managedClasses","uniqueSignatures","nextClassId","nextSignatureId","nativeDummySignature","nativeSource","nativeFile","File","internalName","resolver","Resolver","getSource","writeRuntimeHeader","buffer","offset","classInstance","payloadSize","writeI32","id","makeNativeVariableDeclaration","makeNativeTypeDeclaration","makeNativeFunctionDeclaration","makeNativeNamespaceDeclaration","makeNativeFunction","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","GENERIC","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","lookupForeign","Module_0_has_no_exported_member_1","asImportedNamespace","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerWrapperClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","Class_0_is_sealed_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","globalAliases","firstChar","parseInt","Error","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","USER_ENTRY","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","MODULE_EXPORT","instanceMembers","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FIELD","setType","className","classReference","classElement","wrappedType","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","merged","tryMerge","Duplicate_identifier_0","requireGlobal","lookupExport","fileQueuedExports","checkDecorators","acceptedFlags","fromKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Not_implemented","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeProperty","initializeMethod","STATIC","INTERFACE_PROTOTYPE","READONLY","ABSTRACT","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","_0_is_not_a_valid_operator","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","QueuedExportStar","Export_declaration_conflicts_with_exported_declaration_of_0","QueuedExport","initializeImport","QueuedImport","validDecorators","AMBIENT","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","Program","program","shadowType","FILE","current","unset","originalDeclaration","actual","isBound","Element","declaredElements","typedElements","RESOLVED","TypedElement","startFunction","Signature","isImport","lookup","includes","memberName","TYPEDEFINITION","mangleInternalName","NAMESPACE","ENUM","ConstantValueKind","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","VariableLikeElement","ENUMVALUE","isImmutable","Parameter","index","LOCAL","Local","instances","boundPrototypes","toBound","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","__s","FUNCTION_TARGET","toSignatureString","FunctionTarget","FIELD_PROTOTYPE","memoryOffset","Field","firstDeclaration","getterInstance","setterInstance","Property","INDEXSIGNATURE","getGetterInstance","isUnchecked","lookupOverload","getSetterInstance","IndexSignature","AcyclicState","_isInterface","constructorPrototype","extends","basePtototype","base","INTERFACE","currentMemoryOffset","constructorInstance","indexSignature","_id","_acyclic","rttiFlags","asClass","inheritedTypeArguments","baseName","baseType","isBuiltinArray","lengthField","isAssignableTo","target","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","writeField","baseOffset","writeI8","writeI16","writeF32","writeF64","getTypeArgumentsTo","extendedPrototype","getArrayValueType","abvInstance","acyclic","hasCycle","cyclesTo","other","except","Class","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","isInstance","asGlobal","Interface","NativeType","ExpressionId","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeAnyref","_BinaryenTypeExnref","_BinaryenTypeUnreachable","_BinaryenTypeAuto","FeatureFlags","_BinaryenFeatureMVP","_BinaryenFeatureAtomics","_BinaryenFeatureMutableGlobals","_BinaryenFeatureNontrappingFPToInt","_BinaryenFeatureSIMD128","_BinaryenFeatureBulkMemory","_BinaryenFeatureSignExt","_BinaryenFeatureExceptionHandling","_BinaryenFeatureTailCall","_BinaryenFeatureReferenceTypes","_BinaryenFeatureAll","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenLocalGetId","_BinaryenLocalSetId","_BinaryenGlobalGetId","_BinaryenGlobalSetId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicNotifyId","_BinaryenAtomicFenceId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDTernaryId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","_BinaryenTryId","_BinaryenThrowId","_BinaryenRethrowId","_BinaryenBrOnExnId","_BinaryenPushId","_BinaryenPopId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenTruncSatSFloat32ToInt32","_BinaryenTruncSatUFloat32ToInt32","_BinaryenTruncSatSFloat64ToInt32","_BinaryenTruncSatUFloat64ToInt32","_BinaryenTruncSatSFloat32ToInt64","_BinaryenTruncSatUFloat32ToInt64","_BinaryenTruncSatSFloat64ToInt64","_BinaryenTruncSatUFloat64ToInt64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","_BinaryenWidenLowSVecI8x16ToVecI16x8","_BinaryenWidenLowUVecI8x16ToVecI16x8","_BinaryenWidenHighSVecI8x16ToVecI16x8","_BinaryenWidenHighUVecI8x16ToVecI16x8","_BinaryenWidenLowSVecI16x8ToVecI32x4","_BinaryenWidenLowUVecI16x8ToVecI32x4","_BinaryenWidenHighSVecI16x8ToVecI32x4","_BinaryenWidenHighUVecI16x8ToVecI32x4","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","_BinaryenNarrowSVecI16x8ToVecI8x16","_BinaryenNarrowUVecI16x8ToVecI8x16","_BinaryenNarrowSVecI32x4ToVecI16x8","_BinaryenNarrowUVecI32x4ToVecI16x8","HostOp","_BinaryenMemorySize","_BinaryenMemoryGrow","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","SIMDTernaryOp","_BinaryenBitselectVec128","_BinaryenQFMAVecF32x4","_BinaryenQFMSVecF32x4","_BinaryenQFMAVecF64x2","_BinaryenQFMSVecF64x2","segment","MemorySegment","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","Module","_BinaryenModuleCreate","lit","memory","allocate","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","store","_BinaryenLiteralVec128","unary","op","_BinaryenUnary","binary","_BinaryenBinary","host","operands","allocPtrArray","_BinaryenHost","local_get","_BinaryenLocalGet","local_tee","_BinaryenLocalTee","global_get","_BinaryenGlobalGet","load","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","atomic_load","_BinaryenAtomicLoad","atomic_store","_BinaryenAtomicStore","atomic_rmw","_BinaryenAtomicRMW","atomic_cmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","atomic_wait","timeout","expectedType","_BinaryenAtomicWait","atomic_notify","notifyCount","_BinaryenAtomicNotify","atomic_fence","_BinaryenAtomicFence","local_set","_BinaryenLocalSet","global_set","_BinaryenGlobalSet","block","children","_BinaryenBlock","br","_BinaryenBreak","drop","_BinaryenDrop","loop","_BinaryenLoop","if","_BinaryenIf","nop","_BinaryenNop","return","_BinaryenReturn","select","_BinaryenSelect","switch","defaultName","numNames","strs","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","return_call","call_indirect","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","return_call_indirect","unreachable","_BinaryenUnreachable","memory_copy","size","_BinaryenMemoryCopy","memory_fill","_BinaryenMemoryFill","try","catchBody","_BinaryenTry","throw","eventName","_BinaryenThrow","rethrow","exnref","_BinaryenRethrow","br_on_exn","cStr1","cStr2","_BinaryenBrOnExn","_BinaryenPush","pop","_BinaryenPop","simd_extract","vec","idx","_BinaryenSIMDExtract","simd_replace","_BinaryenSIMDReplace","simd_shuffle","vec1","vec2","mask","_BinaryenSIMDShuffle","simd_ternary","a","b","_BinaryenSIMDTernary","simd_shift","shift","_BinaryenSIMDShift","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addEvent","attribute","_BinaryenAddEvent","addFunction","varTypes","_BinaryenAddFunction","getFunction","_BinaryenGetFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","addEventExport","_BinaryenAddEventExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","addEventImport","eventType","_BinaryenAddEventImport","setMemory","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","getFeatures","_BinaryenModuleGetFeatures","setFeatures","featureFlags","_BinaryenModuleSetFeatures","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","_BinaryenExpressionGetId","Return","_BinaryenReturnGetValue","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperand","_BinaryenHostGetOp","_BinaryenHostGetNumOperands","_BinaryenHostGetOperand","_BinaryenHostGetNameOperand","_BinaryenFunctionGetName","_BinaryenFunctionGetNumParams","_BinaryenFunctionGetParam","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Break","Block","numChildren","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","AtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Try","_BinaryenTryGetBody","_BinaryenTryGetCatchBody","Throw","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperand","Rethrow","_BinaryenRethrowGetExnref","BrOnExn","_BinaryenBrOnExnGetExnref","Push","_BinaryenPushGetValue","Pop","Select","Drop","Host","Nop","TypeKind","TypeFlags","v128_zero","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","auto","clz","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isStrictlyAssignableTo","commonDenominator","signednessIsImportant","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","types","numTypes","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","signatureTypes","compare","equals","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPE","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","DOT_DOT_DOT","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","Tokenizer","g","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveType","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveTypeArguments","typeNode","Cannot_find_name_0","parameterNode","REST","parameterTypeNode","isTypeOmitted","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","Type_0_has_no_call_signatures","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","inferGenericType","exprNode","ctxFlow","typeParameterNames","resolveExpression","SWALLOW","propagateInferredGenericTypes","actualFunction","currentType","getTypeOfElement","ensureResolvedLazyGlobal","isTypedElement","getElementOfType","lookupExpression","ctxType","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupIdentifierExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","Expression_cannot_be_represented_by_a_type","initializerNode","targetNode","propertyName","indexedGet","resolvedType","targetExpression","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","NONNULL","Type_0_is_illegal_in_this_context","The_0_operator_cannot_be_applied_to_type_1","operatorTokenToString","i64_sub","i64_zero","intType","leftType","rightType","commonType","Operator_0_cannot_be_applied_to_types_1_and_2","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","fltType","BuiltinSymbols","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","thenType","elseType","This_expression_is_not_constructable","actualParent","typesToString","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","functionTypeNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","atEnd","fieldInstance","isPowerOf2","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","Type_0_is_not_assignable_to_type_1","LocalFlags","FlowFlags","ANY_CATEGORICAL","ANY_CONDITIONAL","FieldFlags","scopedLocals","fieldFlags","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","createInline","fork","branch","slice","getTempLocal","temps","unsetLocalFlag","getAutoreleaseLocal","SCOPED","setLocalFlag","RETAINED","freeTempLocal","getAndFreeTempLocal","getScopedLocal","addScopedLocal","scopedLocal","addScopedAlias","existingLocal","scopedAlias","freeScopedLocals","scope","isLocalFlag","defaultIfInlined","isAnyLocalFlag","pushBreakLabel","stack","popBreakLabel","inherit","inheritConditional","CONDITIONALLY_RETAINED","READFROM","CONDITIONALLY_READFROM","WRITTENTO","CONDITIONALLY_WRITTENTO","inheritMutual","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","max","isNonnull","isLocalTee","getLocalSetIndex","getLocalGetIndex","inheritNonnullIfTrue","getLocalSetValue","getIfFalse","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getIfCondition","getIfTrue","getUnaryOp","EqzI32","EqzI64","inheritNonnullIfFalse","getUnaryValue","getBinaryOp","EqI32","getBinaryLeft","getBinaryRight","EqI64","NeI32","NeI64","getCallTarget","getCallOperand","canOverflow","WRAPPED","canConversionOverflow","getGlobalGetName","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","getConstValueF32","getConstValueF64","MIN_VALUE","fromType","isLoadSigned","getLoadBytes","getBlockName","getBlockChildCount","last","getBlockChild","getSelectThen","getSelectElse","instanceName","levels","findUsedLocalsVisit","used","traverse","importMemory","sharedMemory","importTable","explicitStart","features","noUnsafe","feature","Options","Constraints","RuntimeFeatures","mangleImportName_moduleName","mangleImportName_elementName","currentInlineFunctions","currentEnum","memorySegments","stringSegments","functionTable","argcVar","argcSet","runtimeFeatures","skippedAutoreleases","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","compile","Compiler","startFunctionInstance","startFunctionBody","currentFlow","currentBody","heap_base","rtti_base","files","compileFile","compileExports","startIsEmpty","started","unshift","funcRef","ensureFunctionType","typesToNativeTypes","compileVisitGlobals","compileVisitMembers","compileRTTI","i64_align","isSharedMemory","i64_shr_u","ensureModuleExports","ensureModuleExport","prefix","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","ensureModuleFieldGetter","ensureModuleFieldSetter","isUnmanaged","subPrefix","loadExpr","isManaged","makeRetain","nativeType","nativeSizeType","valueExpr","makeRetainRelease","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","initAutoreleaseSkipped","compileExpression","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","Feature_0_is_not_enabled","initializeInStart","Mutable_value_cannot_be_inlined","findDecorator","decoratorNodes","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","makeGlobalAssignment","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","MAIN","indexBefore","performAutoreleases","nonNull","temp","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","previousType","An_implementation_cannot_be_declared_in_ambient_contexts","flatten","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureStaticString","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","ensureStaticArrayBuffer","elementType","byteLength","bufferInstance","buf","writeI64","ensureStaticArrayHeader","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","alwaysFalse","terminates","continues","breaks","fallsThrough","alwaysTrue","incrExpr","loopLabel","bodyStatement","needsLabel","ifTrueStmts","ifTrueFlow","ifFalseFlow","ifFalseStmts","valueExpression","constraints","ANY_RETAINED","numCases","context","tempLocal","tempLocalIndex","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","count","newArgs","compileAbort","numDeclarations","initializers","isConst","_const_declarations_must_be_initialized","CONSTANT","compileInlineConstant","contextualType","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","convertExpression","ensureSmallIntegerWrap","explicit","Object_is_possibly_null","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","inheritedConstraints","PREFIX","exceptVoid","Expression_is_never_null","tempIndex","leftExpr","rightExpr","compound","compileBinaryOverload","AllTrueI8x16","EqI8x16","AnyTrueI8x16","NeI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","ShlI64","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","moveAutorelease","rightStmts","makeRelease","retainLeftInThen","makeAssignment","compileUnaryOverload","thisExpression","checkUnsafe","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","indexedSet","Index_signature_in_type_0_only_permits_reading","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr","elementExpr","tempLocalTarget","tempLocalElement","makeSkippedRelease","nativeFieldType","nativeThisType","tempThis","tempValue","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","argumentNodes","argumentExpression","inferredType","Type_argument_expected","compileCallIndirect","checkCallSignature","hasThis","The_this_types_of_each_signature_are_incompatible","minimum","Expected_at_least_0_arguments_but_got_1","Operation_is_unsafe","argumentExpressions","thisArg","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","usedLocals","paramExpr","paramType","argumentLocal","findUsedLocals","baseInstance","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","oldExpr","newExpr","temp1","temp2","undoAutorelease","fromInnerFlow","toOuterFlow","clearFlags","lengthBefore","skipAutorelease","theOperands","numOperands","isCallImport","allOptionalsAreConstant","nodeIsConstantValue","makeCallIndirect","numExpressions","exprs","contextualSignature","numPresentParameters","thisTypeNode","maybeCompileEnclosingSource","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitlyNegate","compileArrayLiteral","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","arrayType","tempDataStart","nativeElementType","bufferAddress","arraySegment","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","compileInstantiate","baseCtor","allocExpr","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","IfThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","setValue","NegF32","NegF64","makeIsFalseish","compileTypeof","typeString","ExtendI8ToI32","ExtendI16ToI32","thisLocalIndex","fieldPrototype","makeInstanceOfClass","idTemp","idExpr","conditions","single","Auto","compileCall","compiler","isAsm","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","isConstant","isVoid","lengthof","sizeof","checkTypeRequired","Operation_0_cannot_be_applied_to_type_1","typeArgumentsRange","alignof","ctz","checkArgsOptional","Type_0_has_no_property_1","nameof","checkTypeOptional","ClzI64","CtzI64","popcnt","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","tempLocal1","tempLocalIndex2","tempLocalIndex1","AbsF32","AbsF64","MaxF32","MaxF64","tempLocal0","min","MinF32","MinF64","CeilF32","CeilF64","floor","FloorF32","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","outType","immOffset","evaluateImmediateOffset","immAlign","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","checkFeatureEnabled","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","opName","Add","Sub","And","Or","Xor","Xchg","memory_size","MemorySize","memory_grow","MemoryGrow","Type_0_cannot_be_changed_to_type_1","alreadyUnchecked","call_direct","arg0Type","Type_0_is_not_a_function_index_or_function_reference","operandExprs","nativeParamTypes","operandType","Expression_must_be_a_compile_time_constant","instantiate","User_defined_0","off","v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","v128_extract_lane","maxIdx","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","v128_replace_lane","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","v128_mul","MulI8x16","MulI16x8","MulI32x4","MulF32x4","MulF64x2","v128_div","DivF32x4","DivF64x2","v128_add_saturate","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","v128_sub_saturate","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","v128_min","MinF32x4","MinF64x2","v128_max","MaxF32x4","MaxF64x2","v128_eq","EqI16x8","EqI32x4","EqF32x4","EqF64x2","v128_ne","NeI16x8","NeI32x4","NeF32x4","NeF64x2","v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtF32x4","LtF64x2","v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeF32x4","LeF64x2","v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtF32x4","GtF64x2","v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeF32x4","GeF64x2","v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","v128_abs","AbsF32x4","AbsF64x2","v128_sqrt","SqrtF32x4","SqrtF64x2","v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","ConvertI64x2ToF64x2","ConvertU64x2ToF64x2","v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","TruncSatF64x2ToI64x2","TruncSatF64x2ToU64x2","v128_widen_low","WidenLowI8x16ToI16x8","WidenLowU8x16ToU16x8","WidenLowI16x8ToI32x4","WidenLowU16x8ToU32x4","v128_widen_high","WidenHighI8x16ToI16x8","WidenHighU8x16ToU16x8","WidenHighI16x8ToI32x4","WidenHighU16x8ToU32x4","v128_shl","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","v128_and","AndV128","v128_or","OrV128","v128_xor","XorV128","v128_not","NotV128","v128_bitselect","Bitselect","v128_any_true","AnyTrueI16x8","AnyTrueI32x4","AnyTrueI64x2","v128_all_true","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","v128_qfma","QFMAF32x4","QFMAF64x2","v128_qfms","QFMSF32x4","QFMSF64x2","idof","visit_globals","visit_members","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_widen_low_i8x16_s","i16x8_widen_low_i8x16_u","i16x8_widen_high_i8x16_s","i16x8_widen_high_i8x16_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_widen_low_i16x8_s","i32x4_widen_low_i16x8_u","i32x4_widen_high_i16x8_s","i32x4_widen_high_i16x8_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_sat_f64x2_s","i64x2_trunc_sat_f64x2_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f32x4_qfma","f32x4_qfms","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_i64x2_s","f64x2_convert_i64x2_u","f64x2_qfma","f64x2_qfms","v8x16_shuffle","tryDeferASM","messageArg","filenameArg","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","memory_allocate","memory_free","memory_reset","runtime_instanceof","runtime_flags","runtime_allocate","runtime_reallocate","runtime_register","runtime_discard","runtime_makeArray","capabilities","nativeSizeSize","ftype","blocks","outer","lastId","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","fieldOffset","abvPrototype","isAcyclic","functionId","decompile","decompiler","Decompiler","decompileFunction","getFunctionName","getFunctionBody","getFunctionParamCount","nativeTypeToType","getFunctionParamType","getFunctionResultType","decompileExpression","nested","getLoopName","getLoopBody","getBreakCondition","getBreakName","getLoadOffset","getLoadPtr","getStoreOffset","getStorePtr","getStoreValue","i64_to_string","getSelectCondition","getDropValue","getReturnValue","getHostOp","getHostOperand","includePrivate","seen","walk","visitFile","visitElement","visitAlias","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","indentLevel","build","IDLBuilder","indent","typeToString","visitInterface","ExportsWalker","unknown","TSDBuilder","numMembers","isInterface","backlog","seenlog","donelog","dependees","tryParseSignatureIsSignature","parseParametersThis","parseFile","isEntry","indexOf","USER","currentSource","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","getDependee","dependent","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","firstParamNameNoType","firstParamKind","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","isIllegalVariableIdentifier","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","parseFunctionExpressionCommon","bodyExpression","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","nodeIsCallable","nodeIsGenericCallable","skipBlock","depth","Parser","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","clz32","round","y","sign","isTrueish","apply","fromCodePoint","replaceAll","search","replacment","res","split","Number","sincos_sin","sincos_cos","sincos","sin","cos","signbit","Boolean","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","unmanaged","formatDiagnostic","formatDiagnosticMessage","parser","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","optimizeLevel","shrinkLevel","cls","map","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","cloned","v","overrides","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","valueI64"],"mappings":"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AMqmB,IACX,KAAKrmB,EAAM0rD,KACX,KAAK1rD,EAAM2V,KAAM,OAAO,EACxB,QAAS,OAAO,IA1UpB,SAAY3V,GAKV,2BACA,eACA,qBACA,qBACA,qBACA,mBACA,qBACA,qBACA,qBACA,2BACA,kCACA,4BACA,0BACA,0BACA,wBACA,gBACA,oBACA,oBACA,wBACA,0BACA,sBACA,0BACA,kBACA,oBACA,4BACA,kBACA,gBACA,gCACA,wBACA,gBACA,gCACA,8BACA,gBACA,sBACA,kBACA,wBACA,8BACA,kBACA,oBACA,gBACA,0BACA,0BACA,8BACA,wBACA,4BACA,wBACA,kBACA,wBACA,sBACA,wBACA,oBACA,sBACA,oBACA,kBACA,oBACA,wBACA,kBACA,oBACA,sBACA,oBACA,sBAIA,8BACA,gCACA,8BACA,gCACA,kCACA,oCACA,kBACA,kCACA,8BACA,sBACA,4BACA,kCACA,0CACA,gDACA,sCACA,gDACA,oDACA,8DACA,gDACA,oBACA,sBACA,8CACA,4BACA,sBACA,0BACA,8BACA,kCACA,8CACA,0DACA,kFACA,8BACA,kBACA,sBACA,kCACA,sBACA,kDACA,0BACA,4BACA,sBACA,yBACA,mCACA,qCACA,2CACA,6DACA,qCACA,yCACA,6DACA,yEACA,iGACA,6CACA,iCACA,qCACA,iBAIA,iCACA,uCACA,yCACA,qCAIA,2BACA,+BArIF,CAAYA,EAAA,EAAAA,QAAA,EAAAA,MAAK,KAwIjB,SAAYiqD,GACV,yBACA,uBACA,uBAHF,CAAYA,EAAA,EAAAA,qBAAA,EAAAA,mBAAkB,KAM9B,qBAwKA,0BAwBA,uCAA4C32D,GAE1C,OADAwJ,OAAOxJ,EAAKuL,QACJvL,EAAK2L,WAAW,IACtB,KAAK,IAAY,MAAe,UAAR3L,EACxB,KAAK,IAAY,MAAe,OAARA,EACxB,KAAK,IAAY,MAAe,cAARA,EACxB,KAAK,IAAY,MAAe,QAARA,EACxB,KAAK,IAAY,MAAe,QAARA,EAE1B,OAAO,GAGT,iCAAsCklB,GACpC,OAAQA,GACN,KAAKxY,EAAM0qD,OAAQ,MAAO,S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,2EACA,yEACA,2EACA,yIACA,uGACA,6EACA,6DACA,6FACA,uEACA,mDACA,+EACA,mGACA,uHACA,6FACA,2JACA,uFACA,iGACA,qHACA,qGACA,+DACA,iEACA,iGACA,oEACA,oDACA,oCACA,8FACA,kEACA,8CACA,gHACA,oHACA,8HACA,0GACA,8GACA,4EACA,oFACA,oGACA,0GACA,oHACA,wFACA,gFACA,kIACA,kIACA,4FACA,oHACA,oFACA,wKACA,sLACA,kIACA,oDACA,wCACA,oJACA,gDACA,kGACA,wGACA,0CACA,kEACA,0DACA,gDACA,gEACA,sIACA,4IACA,0DACA,4DACA,wEACA,sDACA,4FACA,4FACA,oHACA,wDACA,sDACA,8HACA,oKACA,sFACA,wEACA,sKACA,sJACA,8IACA,wFACA,0IACA,0DACA,kDACA,gFACA,gGACA,wDACA,kFACA,sFACA,0GACA,8GACA,wMACA,oFACA,0NACA,sFACA,0IACA,gMACA,0LACA,wGACA,oIACA,kIACA,wGACA,wFACA,4KACA,sHACA,gFACA,gLACA,0MACA,kQACA,8DACA,kGACA,gKACA,oIACA,4DACA,oJACA,oJACA,0GACA,0EACA,4FACA,oFACA,0QACA,kLACA,sLACA,gHACA,sFACA,8IACA,sDACA,wEACA,8CACA,4FACA,gIACA,iLACA,+MA1IF,CAAY,EAAAA,iBAAA,EAAAA,eAAc,KA8I1B,kCAAuCG,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,mBACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,gCACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,mDACjB,KAAK,IAAK,MAAO,uCACjB,KAAK,IAAK,MAAO,kCACjB,KAAK,IAAK,MAAO,mCACjB,KAAK,IAAK,MAAO,kEACjB,KAAK,IAAK,MAAO,iDACjB,KAAK,IAAK,MAAO,oCACjB,KAAK,IAAK,MAAO,8BACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,I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,QACAl8F,QAAQqN,KAGZ6vF,QACEwJ,EACA9I,QACEtqD,QACE4oD,QACAl8F,QAAQqN,Q,8EC9BpB,SAAkBu5F,GAEhB,mBACA,4BACA,wCACA,wCACA,kDACA,6BAEA,sBACA,6CACA,0BACA,0BACA,4BACA,4BACA,4CACA,0CACA,wCACA,oCACA,8CACA,gCACA,gCACA,0CACA,kDACA,+CACA,gDACA,wBAEA,cAEA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAEA,cACA,cACA,cACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eAEA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cAEA,8BACA,4BACA,gBACA,8BACA,4BACA,mBACA,sBACA,iCACA,oCACA,gCACA,sBACA,sBACA,wBACA,kBACA,kCACA,wBACA,kCACA,kCACA,oBACA,4BACA,sBACA,+BACA,kCACA,8BACA,0BACA,oBACA,4BACA,8BACA,kCACA,sBACA,uBAEA,6BACA,4BACA,yCACA,iBACA,kCAnIF,CAAkB,EAAAA,WAAA,EAAAA,SAAQ,KAuI1B,uBAA4BrxH,GAC1B,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,KACL,KAAK,KACH,OAAO,EAET,QACE,OAAO,IAMb,wBAA6BA,GAC3B,OAAQA,GACN,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,IACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,MACL,KAAK,MACH,OAAO,EAET,QACE,OAAOA,GAAK,MAAmBA,GAAK,OAM1C,0BAA+BA,GAC7B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,wBAA6BA,GAC3B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,6BAAkCA,GAChC,OAAOA,GAAK,IAAcA,GAAK,KACxBA,GAAK,IAAcA,GAAK,IACnB,IAALA,GACK,IAALA,GACAA,EAAI,SAmLqBkK,EAnLYlK,GAoL9B,GAAKkK,EAAO,QACnBonH,EAAmBpnH,EAAaqnH,IAFzC,IAAkCrnH,GA/KlC,8BAAmClK,GACjC,OAAOA,GAAK,IAAcA,GAAK,KAIjC,4BAAiCA,GAC/B,OAAOA,GAAK,IAAcA,GAAK,KACxBA,GAAK,IAAcA,GAAK,IACxBA,GAAK,IAAeA,GAAK,IACpB,IAALA,GACK,IAALA,GACAA,EAAI,SAyKoBkK,EAzKYlK,GA0K7B,GAAKkK,EAAO,QACnBonH,EAAmBpnH,EAAasnH,IAFzC,IAAiCtnH,GArKjC,IAAMqnH,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is the main function. */\n  MAIN = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common compiler symbols. */\nexport namespace CommonSymbols {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const anyref = \"anyref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Anyref = \"Anyref\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const FixedArray = \"FixedArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  // runtime\n  export const abort = \"abort\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(range.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(range.line.toString(10));\n      sb.push(\",\");\n      sb.push(range.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  CommonSymbols,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.ASSERTION: // if kind=NONNULL\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PARENTHESIZED:\n    case NodeKind.PROPERTYACCESS:\n    case NodeKind.SUPER: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    var type = new NamedTypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    var type = new FunctionTypeNode();\n    type.range = range;\n    type.parameters = parameters;\n    type.returnType = returnType;\n    type.explicitThisType = explicitThisType;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return Node.createNamedType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = DecoratorKind.fromNode(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name; // TODO: extract from range\n    expr.symbol = name; // TODO: Symbol.for(name)\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(normalizedPath);\n    } else {\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    var stmt = new ExportDefaultStatement();\n    stmt.declaration = declaration;\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    stmt.arrowKind = arrowKind;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: TypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    var self = <TypeNode>this; // TS otherwise complains\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      if (!(<NamedTypeNode>self).name.next) {\n        let typeArgumentNodes = (<NamedTypeNode>self).typeArguments;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = (<NamedTypeNode>self).name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let parameterNodes = (<FunctionTypeNode>self).parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if ((<FunctionTypeNode>self).returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = (<FunctionTypeNode>self).explicitThisType;\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  kind = NodeKind.NAMEDTYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: TypeNode[] | null;\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  kind = NodeKind.FUNCTIONTYPE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: TypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: TypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    // @global, @inline, @operator, @sealed, @unmanaged\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.s: {\n          if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (\n      nameNode.kind == NodeKind.PROPERTYACCESS &&\n      (<PropertyAccessExpression>nameNode).expression.kind == NodeKind.IDENTIFIER\n    ) {\n      let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>nameNode).expression).text;\n      assert(nameStr.length);\n      let propStr = (<PropertyAccessExpression>nameNode).property.text;\n      assert(propStr.length);\n      // @operator.binary, @operator.prefix, @operator.postfix\n      if (nameStr == \"operator\") {\n        switch (propStr.charCodeAt(0)) {\n          case CharCode.b: {\n            if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n            break;\n          }\n          case CharCode.p: {\n            switch (propStr) {\n              case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n              case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n            }\n            break;\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Symbol. */\n  symbol: string; // TODO: symbol\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: TypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n  symbol = CommonSymbols.constructor;\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: TypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n  symbol = CommonSymbols.null_;\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  symbol = CommonSymbols.super_;\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n  symbol = CommonSymbols.this_;\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n  symbol = CommonSymbols.true_;\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n  symbol = CommonSymbols.false_;\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path with file extension. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: NamedTypeNode;\n  /** Value type. */\n  valueType: TypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: TypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  kind = NodeKind.EXPORTDEFAULT;\n\n  /** Declaration being exported as default. */\n  declaration: DeclarationStatement;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: FunctionTypeNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: TypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next || name.identifier.text.length);\n  }\n  return false;\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonSymbols,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  ExportDefaultStatement,\n  Token,\n  ParameterNode\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Fixed array prototype reference. */\n  fixedArrayPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if not explicitly disabled. */\n  abortInstance: Function | null;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ref: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ref: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ref: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ref: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ref: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ref: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY_ENTRY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(classInstance.id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    assert(elementsByDeclaration.has(declaration));\n    return elementsByDeclaration.get(declaration)!;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\n    this.registerNativeType(CommonSymbols.void_, Type.void);\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\n      CommonSymbols.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.indexof, new TypeDefinition(\n      CommonSymbols.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.valueof, new TypeDefinition(\n      CommonSymbols.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.returnof, new TypeDefinition(\n      CommonSymbols.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerNativeType(CommonSymbols.anyref, Type.anyref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonSymbols.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonSymbols.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n\n    // register feature hints\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            queuedImport.localIdentifier.text,\n            element,\n            true // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = queuedImport.localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile\n            ),\n            true // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonSymbols.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonSymbols.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonSymbols.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonSymbols.I8);\n    this.registerWrapperClass(Type.i16, CommonSymbols.I16);\n    this.registerWrapperClass(Type.i32, CommonSymbols.I32);\n    this.registerWrapperClass(Type.i64, CommonSymbols.I64);\n    this.registerWrapperClass(options.isizeType, CommonSymbols.Isize);\n    this.registerWrapperClass(Type.u8, CommonSymbols.U8);\n    this.registerWrapperClass(Type.u16, CommonSymbols.U16);\n    this.registerWrapperClass(Type.u32, CommonSymbols.U32);\n    this.registerWrapperClass(Type.u64, CommonSymbols.U64);\n    this.registerWrapperClass(options.usizeType, CommonSymbols.Usize);\n    this.registerWrapperClass(Type.bool, CommonSymbols.Bool);\n    this.registerWrapperClass(Type.f32, CommonSymbols.F32);\n    this.registerWrapperClass(Type.f64, CommonSymbols.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonSymbols.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerWrapperClass(Type.anyref, CommonSymbols.Anyref);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let firstChar = name.charCodeAt(0);\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n            this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n          } else {\n            let elementsByName = this.elementsByName;\n            let element = elementsByName.get(name);\n            if (element) {\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n              elementsByName.set(alias, element);\n            }\n            else throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonSymbols.Array, ElementKind.CLASS_PROTOTYPE);\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.FixedArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonSymbols.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonSymbols.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.lookupFunction(CommonSymbols.abort); // can be disabled\n    this.allocInstance = this.requireFunction(CommonSymbols.alloc);\n    this.reallocInstance = this.requireFunction(CommonSymbols.realloc);\n    this.freeInstance = this.requireFunction(CommonSymbols.free);\n    this.retainInstance = this.requireFunction(CommonSymbols.retain);\n    this.releaseInstance = this.requireFunction(CommonSymbols.release);\n    this.collectInstance = this.requireFunction(CommonSymbols.collect);\n    this.typeinfoInstance = this.requireFunction(CommonSymbols.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonSymbols.instanceof_);\n    this.visitInstance = this.requireFunction(CommonSymbols.visit);\n    this.allocArrayInstance = this.requireFunction(CommonSymbols.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (exports !== null && file.source.sourceKind == SourceKind.USER_ENTRY) {\n        for (let element of exports.values()) this.markModuleExport(element);\n      }\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a non-generic global function is present and returns it. */\n  private requireFunction(name: string): Function {\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.classReference && !wrapperClasses.has(type));\n    var element = this.lookupGlobal(className);\n    if (!element) return;\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n    if (!classElement) return;\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let actual = elementsByName.get(name)!;\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (actual !== element) {\n        let merged = tryMerge(elementsByName.get(name)!, element);\n        if (!merged) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, name\n          );\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name);\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning(\n            DiagnosticCode.Not_implemented,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators,\n          (declaration.is(CommonFlags.READONLY)\n            ? DecoratorFlags.INLINE\n            : DecoratorFlags.NONE\n          ) | DecoratorFlags.LAZY | DecoratorFlags.UNSAFE\n        ),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, DecoratorFlags.UNSAFE)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else if (exports.has(\"default\")) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, \"default\"\n        );\n        return;\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, true);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): Namespace | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let actual = members.get(name)!;\n      if (actual.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(actual, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element): Namespace {\n    var ns = new Namespace(\n      name,\n      parent,\n      this.program.makeNativeNamespaceDeclaration(name)\n    );\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.type = Type.u32.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonSymbols.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonSymbols.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name);\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program,\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      __s = \"sig:\" + signature.toSignatureString(),\n      __s,\n      program,\n      program.nativeFile\n    );\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = Type.u32.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An resolved index signature. */\nexport class IndexSignature extends VariableLikeElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(ElementKind.INDEXSIGNATURE, parent.internalName + \"[]\", parent);\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    do if (current === basePtototype) return true;\n    while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let merged = tryMerge(instanceMembers.get(name)!, element);\n      if (!merged) {\n        this.program.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          element.identifierNode.range, element.identifierNode.text\n        );\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY &&\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    /** Base class, if derived. */\n    base: Class | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n    this.base = base;\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var field = this.lookupInSelf(name);\n    if (field && field.kind == ElementKind.FIELD) {\n      let offset = baseOffset + (<Field>field).memoryOffset;\n      switch ((<Field>field).type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\n    while (current = current.base);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    switch (current.prototype) {\n      case program.i8ArrayPrototype: return Type.i8;\n      case program.i16ArrayPrototype: return Type.i16;\n      case program.i32ArrayPrototype: return Type.i32;\n      case program.i64ArrayPrototype: return Type.i64;\n      case program.u8ArrayPrototype:\n      case program.u8ClampedArrayPrototype: return Type.u8;\n      case program.u16ArrayPrototype: return Type.u16;\n      case program.u32ArrayPrototype: return Type.u32;\n      case program.u64ArrayPrototype: return Type.u64;\n      case program.f32ArrayPrototype: return Type.f32;\n      case program.f64ArrayPrototype: return Type.f64;\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\n      default: assert(false);\n    }\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var members = this.members;\n    if (members) {\n      for (let member of members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let type = (<Field>member).type;\n          if (type.is(TypeFlags.REFERENCE)) {\n            if ((current = type.classReference) !== null && (\n              current === other ||\n              current.cyclesTo(other, except)\n            )) return true;\n          }\n        }\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      base,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  assert(!newer.members);\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./common\";\nimport { Type } from \"./types\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type EventRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32  = _BinaryenTypeInt32(),\n  I64  = _BinaryenTypeInt64(),\n  F32  = _BinaryenTypeFloat32(),\n  F64  = _BinaryenTypeFloat64(),\n  V128 = _BinaryenTypeVec128(),\n  Anyref = _BinaryenTypeAnyref(),\n  Exnref = _BinaryenTypeExnref(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum FeatureFlags {\n  MVP = _BinaryenFeatureMVP(),\n  Atomics = _BinaryenFeatureAtomics(),\n  MutableGloabls = _BinaryenFeatureMutableGlobals(),\n  NontrappingFPToInt = _BinaryenFeatureNontrappingFPToInt(),\n  SIMD128 = _BinaryenFeatureSIMD128(),\n  BulkMemory = _BinaryenFeatureBulkMemory(),\n  SignExt = _BinaryenFeatureSignExt(),\n  ExceptionHandling = _BinaryenFeatureExceptionHandling(),\n  TailCall = _BinaryenFeatureTailCall(),\n  ReferenceTypes = _BinaryenFeatureReferenceTypes(),\n  All = _BinaryenFeatureAll()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  LocalGet = _BinaryenLocalGetId(),\n  LocalSet = _BinaryenLocalSetId(),\n  GlobalGet = _BinaryenGlobalGetId(),\n  GlobalSet = _BinaryenGlobalSetId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicNotify = _BinaryenAtomicNotifyId(),\n  AtomicFence = _BinaryenAtomicFenceId(),\n  SIMDExtract = _BinaryenSIMDExtractId(),\n  SIMDReplace = _BinaryenSIMDReplaceId(),\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\n  SIMDTernary = _BinaryenSIMDTernaryId(),\n  SIMDShift = _BinaryenSIMDShiftId(),\n  MemoryInit = _BinaryenMemoryInitId(),\n  DataDrop = _BinaryenDataDropId(),\n  MemoryCopy = _BinaryenMemoryCopyId(),\n  MemoryFill = _BinaryenMemoryFillId(),\n  Try = _BinaryenTryId(),\n  Throw = _BinaryenThrowId(),\n  Rethrow = _BinaryenRethrowId(),\n  BrOnExn = _BinaryenBrOnExnId(),\n  Push = _BinaryenPushId(),\n  Pop = _BinaryenPopId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  TruncF32ToI32Sat = _BinaryenTruncSatSFloat32ToInt32(),\n  TruncF32ToU32Sat = _BinaryenTruncSatUFloat32ToInt32(),\n  TruncF64ToI32Sat = _BinaryenTruncSatSFloat64ToInt32(),\n  TruncF64ToU32Sat = _BinaryenTruncSatUFloat64ToInt32(),\n  TruncF32ToI64Sat = _BinaryenTruncSatSFloat32ToInt64(),\n  TruncF32ToU64Sat = _BinaryenTruncSatUFloat32ToInt64(),\n  TruncF64ToI64Sat = _BinaryenTruncSatSFloat64ToInt64(),\n  TruncF64ToU64Sat = _BinaryenTruncSatUFloat64ToInt64(),\n\n  // see: https://github.com/WebAssembly/simd\n  SplatI8x16 = _BinaryenSplatVecI8x16(),\n  SplatI16x8 = _BinaryenSplatVecI16x8(),\n  SplatI32x4 = _BinaryenSplatVecI32x4(),\n  SplatI64x2 = _BinaryenSplatVecI64x2(),\n  SplatF32x4 = _BinaryenSplatVecF32x4(),\n  SplatF64x2 = _BinaryenSplatVecF64x2(),\n  NotV128 = _BinaryenNotVec128(),\n  NegI8x16 = _BinaryenNegVecI8x16(),\n  AnyTrueI8x16 = _BinaryenAnyTrueVecI8x16(),\n  AllTrueI8x16 = _BinaryenAllTrueVecI8x16(),\n  NegI16x8 = _BinaryenNegVecI16x8(),\n  AnyTrueI16x8 = _BinaryenAnyTrueVecI16x8(),\n  AllTrueI16x8 = _BinaryenAllTrueVecI16x8(),\n  NegI32x4 = _BinaryenNegVecI32x4(),\n  AnyTrueI32x4 = _BinaryenAnyTrueVecI32x4(),\n  AllTrueI32x4 = _BinaryenAllTrueVecI32x4(),\n  NegI64x2 = _BinaryenNegVecI64x2(),\n  AnyTrueI64x2 = _BinaryenAnyTrueVecI64x2(),\n  AllTrueI64x2 = _BinaryenAllTrueVecI64x2(),\n  AbsF32x4 = _BinaryenAbsVecF32x4(),\n  NegF32x4 = _BinaryenNegVecF32x4(),\n  SqrtF32x4 = _BinaryenSqrtVecF32x4(),\n  AbsF64x2 = _BinaryenAbsVecF64x2(),\n  NegF64x2 = _BinaryenNegVecF64x2(),\n  SqrtF64x2 = _BinaryenSqrtVecF64x2(),\n  TruncSatF32x4ToI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\n  TruncSatF32x4ToU32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\n  TruncSatF64x2ToI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\n  TruncSatF64x2ToU64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\n  ConvertI32x4ToF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\n  ConvertU32x4ToF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\n  ConvertI64x2ToF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\n  ConvertU64x2ToF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2(),\n  WidenLowI8x16ToI16x8 = _BinaryenWidenLowSVecI8x16ToVecI16x8(),\n  WidenLowU8x16ToU16x8 = _BinaryenWidenLowUVecI8x16ToVecI16x8(),\n  WidenHighI8x16ToI16x8 = _BinaryenWidenHighSVecI8x16ToVecI16x8(),\n  WidenHighU8x16ToU16x8 = _BinaryenWidenHighUVecI8x16ToVecI16x8(),\n  WidenLowI16x8ToI32x4 = _BinaryenWidenLowSVecI16x8ToVecI32x4(),\n  WidenLowU16x8ToU32x4 = _BinaryenWidenLowUVecI16x8ToVecI32x4(),\n  WidenHighI16x8ToI32x4 = _BinaryenWidenHighSVecI16x8ToVecI32x4(),\n  WidenHighU16x8ToU32x4 = _BinaryenWidenHighUVecI16x8ToVecI32x4()\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64(),\n\n  // see: https://github.com/WebAssembly/simd\n  EqI8x16 = _BinaryenEqVecI8x16(),\n  NeI8x16 = _BinaryenNeVecI8x16(),\n  LtI8x16 = _BinaryenLtSVecI8x16(),\n  LtU8x16 = _BinaryenLtUVecI8x16(),\n  LeI8x16 = _BinaryenLeSVecI8x16(),\n  LeU8x16 = _BinaryenLeUVecI8x16(),\n  GtI8x16 = _BinaryenGtSVecI8x16(),\n  GtU8x16 = _BinaryenGtUVecI8x16(),\n  GeI8x16 = _BinaryenGeSVecI8x16(),\n  GeU8x16 = _BinaryenGeUVecI8x16(),\n  EqI16x8 = _BinaryenEqVecI16x8(),\n  NeI16x8 = _BinaryenNeVecI16x8(),\n  LtI16x8 = _BinaryenLtSVecI16x8(),\n  LtU16x8 = _BinaryenLtUVecI16x8(),\n  LeI16x8 = _BinaryenLeSVecI16x8(),\n  LeU16x8 = _BinaryenLeUVecI16x8(),\n  GtI16x8 = _BinaryenGtSVecI16x8(),\n  GtU16x8 = _BinaryenGtUVecI16x8(),\n  GeI16x8 = _BinaryenGeSVecI16x8(),\n  GeU16x8 = _BinaryenGeUVecI16x8(),\n  EqI32x4 = _BinaryenEqVecI32x4(),\n  NeI32x4 = _BinaryenNeVecI32x4(),\n  LtI32x4 = _BinaryenLtSVecI32x4(),\n  LtU32x4 = _BinaryenLtUVecI32x4(),\n  LeI32x4 = _BinaryenLeSVecI32x4(),\n  LeU32x4 = _BinaryenLeUVecI32x4(),\n  GtI32x4 = _BinaryenGtSVecI32x4(),\n  GtU32x4 = _BinaryenGtUVecI32x4(),\n  GeI32x4 = _BinaryenGeSVecI32x4(),\n  GeU32x4 = _BinaryenGeUVecI32x4(),\n  EqF32x4 = _BinaryenEqVecF32x4(),\n  NeF32x4 = _BinaryenNeVecF32x4(),\n  LtF32x4 = _BinaryenLtVecF32x4(),\n  LeF32x4 = _BinaryenLeVecF32x4(),\n  GtF32x4 = _BinaryenGtVecF32x4(),\n  GeF32x4 = _BinaryenGeVecF32x4(),\n  EqF64x2 = _BinaryenEqVecF64x2(),\n  NeF64x2 = _BinaryenNeVecF64x2(),\n  LtF64x2 = _BinaryenLtVecF64x2(),\n  LeF64x2 = _BinaryenLeVecF64x2(),\n  GtF64x2 = _BinaryenGtVecF64x2(),\n  GeF64x2 = _BinaryenGeVecF64x2(),\n  AndV128 = _BinaryenAndVec128(),\n  OrV128 = _BinaryenOrVec128(),\n  XorV128 = _BinaryenXorVec128(),\n  AddI8x16 = _BinaryenAddVecI8x16(),\n  AddSatI8x16 = _BinaryenAddSatSVecI8x16(),\n  AddSatU8x16 = _BinaryenAddSatUVecI8x16(),\n  SubI8x16 = _BinaryenSubVecI8x16(),\n  SubSatI8x16 = _BinaryenSubSatSVecI8x16(),\n  SubSatU8x16 = _BinaryenSubSatUVecI8x16(),\n  MulI8x16 = _BinaryenMulVecI8x16(),\n  AddI16x8 = _BinaryenAddVecI16x8(),\n  AddSatI16x8 = _BinaryenAddSatSVecI16x8(),\n  AddSatU16x8 = _BinaryenAddSatUVecI16x8(),\n  SubI16x8 = _BinaryenSubVecI16x8(),\n  SubSatI16x8 = _BinaryenSubSatSVecI16x8(),\n  SubSatU16x8 = _BinaryenSubSatUVecI16x8(),\n  MulI16x8 = _BinaryenMulVecI16x8(),\n  AddI32x4 = _BinaryenAddVecI32x4(),\n  SubI32x4 = _BinaryenSubVecI32x4(),\n  MulI32x4 = _BinaryenMulVecI32x4(),\n  AddI64x2 = _BinaryenAddVecI64x2(),\n  SubI64x2 = _BinaryenSubVecI64x2(),\n  AddF32x4 = _BinaryenAddVecF32x4(),\n  SubF32x4 = _BinaryenSubVecF32x4(),\n  MulF32x4 = _BinaryenMulVecF32x4(),\n  DivF32x4 = _BinaryenDivVecF32x4(),\n  MinF32x4 = _BinaryenMinVecF32x4(),\n  MaxF32x4 = _BinaryenMaxVecF32x4(),\n  AddF64x2 = _BinaryenAddVecF64x2(),\n  SubF64x2 = _BinaryenSubVecF64x2(),\n  MulF64x2 = _BinaryenMulVecF64x2(),\n  DivF64x2 = _BinaryenDivVecF64x2(),\n  MinF64x2 = _BinaryenMinVecF64x2(),\n  MaxF64x2 = _BinaryenMaxVecF64x2(),\n  NarrowI16x8ToI8x16 = _BinaryenNarrowSVecI16x8ToVecI8x16(),\n  NarrowU16x8ToU8x16 = _BinaryenNarrowUVecI16x8ToVecI8x16(),\n  NarrowI32x4ToI16x8 = _BinaryenNarrowSVecI32x4ToVecI16x8(),\n  NarrowU32x4ToU16x8 = _BinaryenNarrowUVecI32x4ToVecI16x8()\n}\n\nexport enum HostOp {\n  MemorySize = _BinaryenMemorySize(),\n  MemoryGrow = _BinaryenMemoryGrow(),\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneI8x16 = _BinaryenExtractLaneSVecI8x16(),\n  ExtractLaneU8x16 = _BinaryenExtractLaneUVecI8x16(),\n  ExtractLaneI16x8 = _BinaryenExtractLaneSVecI16x8(),\n  ExtractLaneU16x8 = _BinaryenExtractLaneUVecI16x8(),\n  ExtractLaneI32x4 = _BinaryenExtractLaneVecI32x4(),\n  ExtractLaneI64x2 = _BinaryenExtractLaneVecI64x2(),\n  ExtractLaneF32x4 = _BinaryenExtractLaneVecF32x4(),\n  ExtractLaneF64x2 = _BinaryenExtractLaneVecF64x2(),\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneI8x16 = _BinaryenReplaceLaneVecI8x16(),\n  ReplaceLaneI16x8 = _BinaryenReplaceLaneVecI16x8(),\n  ReplaceLaneI32x4 = _BinaryenReplaceLaneVecI32x4(),\n  ReplaceLaneI64x2 = _BinaryenReplaceLaneVecI64x2(),\n  ReplaceLaneF32x4 = _BinaryenReplaceLaneVecF32x4(),\n  ReplaceLaneF64x2 = _BinaryenReplaceLaneVecF64x2()\n}\n\nexport enum SIMDShiftOp {\n  ShlI8x16 = _BinaryenShlVecI8x16(),\n  ShrI8x16 = _BinaryenShrSVecI8x16(),\n  ShrU8x16 = _BinaryenShrUVecI8x16(),\n  ShlI16x8 = _BinaryenShlVecI16x8(),\n  ShrI16x8 = _BinaryenShrSVecI16x8(),\n  ShrU16x8 = _BinaryenShrUVecI16x8(),\n  ShlI32x4 = _BinaryenShlVecI32x4(),\n  ShrI32x4 = _BinaryenShrSVecI32x4(),\n  ShrU32x4 = _BinaryenShrUVecI32x4(),\n  ShlI64x2 = _BinaryenShlVecI64x2(),\n  ShrI64x2 = _BinaryenShrSVecI64x2(),\n  ShrU64x2 = _BinaryenShrUVecI64x2()\n}\n\nexport enum SIMDTernaryOp {\n  Bitselect = _BinaryenBitselectVec128(),\n  QFMAF32x4 = _BinaryenQFMAVecF32x4(),\n  QFMSF32x4 = _BinaryenQFMSVecF32x4(),\n  QFMAF64x2 = _BinaryenQFMAVecF64x2(),\n  QFMSF64x2 = _BinaryenQFMSVecF64x2()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunctionType(this.ref, cStr);\n  }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\n    _BinaryenLiteralVec128(out, out);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalTee(this.ref, index, value);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  atomic_fence(): ExpressionRef {\n    return _BinaryenAtomicFence(this.ref);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return isReturn\n        ? _BinaryenReturnCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType)\n        : _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(typeName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return isReturn\n        ? _BinaryenReturnCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr)\n        : _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  return_call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string,\n  ): ExpressionRef {\n    return this.call_indirect(index, operands, typeName, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // exception handling\n\n  try(\n    body: ExpressionRef,\n    catchBody: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTry(this.ref, body, catchBody);\n  }\n\n  throw(\n    eventName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(eventName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  rethrow(\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenRethrow(this.ref, exnref);\n  }\n\n  br_on_exn(\n    name: string,\n    eventName: string,\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    var cStr1 = this.allocStringCached(name);\n    var cStr2 = this.allocStringCached(eventName);\n    return _BinaryenBrOnExn(this.ref, cStr1, cStr2, exnref);\n  }\n\n  // push / pop (multi value?)\n\n  push(\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenPush(this.ref, value);\n  }\n\n  pop(\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenPop(this.ref, type);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    try {\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  simd_ternary(\n    op: BinaryenSIMDOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  addEvent(\n    name: string,\n    attribute: u32,\n    type: FunctionRef\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddEvent(this.ref, cStr, attribute, type);\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addEventExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddEventExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    _BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addEventImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    attribute: u32,\n    eventType: FunctionTypeRef\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddEventImport(this.ref, cStr1, cStr2, cStr3, attribute, eventType);\n  }\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Array<i8>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocI32Array(offs);\n    var cArr4 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    } finally {\n      memory.free(cArr4);\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n    }\n  }\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[]\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  getFeatures(): BinaryenFeatureFlags {\n    return _BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: BinaryenFeatureFlags): void {\n    _BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([\n        this.allocStringCached(\"vacuum\"),\n        this.allocStringCached(\"precompute\")\n      ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 2);\n    expr = _BinaryenFunctionGetBody(func);\n    if (_BinaryenExpressionGetId(expr) == ExpressionId.Return) {\n      expr = _BinaryenReturnGetValue(expr);\n    }\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(_BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\n    this.cachedStrings = new Map();\n    memory.free(this.lit);\n    memory.free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.i32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.i64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.f32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.f64(_BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return _BinaryenLocalGet(this.ref,\n          _BinaryenLocalGetGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = _BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGlobalGet(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return _BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return _BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   // TODO: there's more\n//   switch (_BinaryenExpressionGetId(expr)) {\n//     case ExpressionId.LocalGet:\n//     case ExpressionId.GlobalGet:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (_BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(_BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(_BinaryenIfGetCondition(expr), data);\n      visit(_BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = _BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(_BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = _BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(_BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i = 0, n = _BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i = 0, n = _BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(_BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(_BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(_BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(_BinaryenStoreGetPtr(expr), data);\n      visit(_BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(_BinaryenAtomicRMWGetPtr(expr), data);\n      visit(_BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(_BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(_BinaryenAtomicWaitGetPtr(expr), data);\n      visit(_BinaryenAtomicWaitGetExpected(expr), data);\n      visit(_BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(_BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(_BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(_BinaryenSIMDReplaceGetVec(expr), data);\n      visit(_BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(_BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(_BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      visit(_BinaryenSIMDTernaryGetA(expr), data);\n      visit(_BinaryenSIMDTernaryGetB(expr), data);\n      visit(_BinaryenSIMDTernaryGetC(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(_BinaryenSIMDShiftGetVec(expr), data);\n      visit(_BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(_BinaryenMemoryInitGetDest(expr), data);\n      visit(_BinaryenMemoryInitGetOffset(expr), data);\n      visit(_BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(_BinaryenMemoryCopyGetDest(expr), data);\n      visit(_BinaryenMemoryCopyGetSource(expr), data);\n      visit(_BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(_BinaryenMemoryFillGetDest(expr), data);\n      visit(_BinaryenMemoryFillGetValue(expr), data);\n      visit(_BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Try: {\n      visit(_BinaryenTryGetBody(expr), data);\n      visit(_BinaryenTryGetCatchBody(expr), data);\n      break;\n    }\n    case ExpressionId.Throw: {\n      for (let i = 0, n = _BinaryenThrowGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenThrowGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      visit(_BinaryenRethrowGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.BrOnExn: {\n      visit(_BinaryenBrOnExnGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.Push: {\n      visit(_BinaryenPushGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(_BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(_BinaryenBinaryGetLeft(expr), data);\n      visit(_BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(_BinaryenSelectGetIfTrue(expr), data);\n      visit(_BinaryenSelectGetIfFalse(expr), data);\n      visit(_BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(_BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(_BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i = 0, n = _BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** A host reference. */\n  ANYREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.kind == TypeKind.ANYREF && target.kind == TypeKind.ANYREF) {\n            return true;\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      // TODO: Reflect.apply(value, \"toString\", []) ?\n      assert(this.kind == TypeKind.ANYREF);\n      return \"anyref\";\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.ANYREF: return \"anyref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.ANYREF: return NativeType.Anyref;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.ANYREF:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.ANYREF:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n          case TypeKind.ANYREF:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      // same naming scheme as Binaryen\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"j\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"j\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"d\";\n      case TypeKind.V128: return \"V\";\n      case TypeKind.ANYREF: return \"a\";\n      case TypeKind.VOID: return \"v\";\n      default: assert(false);\n    }\n    return \"i\";\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** A host reference. */\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** The unique program id that represents this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    program.uniqueSignatures.push(this);\n    this.id = program.nextSignatureId++;\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    return this.equals(target);\n  }\n\n  /** Tests to see if a signature equals another signature. */\n  equals(value: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = value.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != value.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = value.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = value.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    sb.push(returnType.toSignatureString());\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    return \"FUNCSIG$\" + sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics || new Array();\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos + 1 < end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.x:\n        case CharCode.X:\n        case CharCode.b:\n        case CharCode.B:\n        case CharCode.o:\n        case CharCode.O: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) return false;\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.x:\n        case CharCode.X: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b:\n        case CharCode.B: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o:\n        case CharCode.O: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.e || c == CharCode.E) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 65536) >>> 10) + 0xD800,\n        ((value32 - 65536) & 1023) + 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  FunctionTarget,\n  IndexSignature,\n  isTypedElement\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonSymbols\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinSymbols\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = ctxTypes.get(simpleName)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                node.range, type.toString()\n              );\n            }\n          }\n          return type.asNullable();\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          makeMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                nameNode.range, nameNode.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        switch (nameNode.identifier.symbol) {\n          case CommonSymbols.native: return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.indexof: return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.valueof: return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.returnof: return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n        }\n      }\n\n      // Resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = makeMap(ctxTypes), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) return overload.signature.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.signatureReference;\n    if (!signatureReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    return signatureReference.returnType;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<NamedTypeNode[]>typeArgumentNodes)[0].range,\n              (<NamedTypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<NamedTypeNode[]>typeArgumentNodes)[i],\n            ctxElement,\n            ctxTypes,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            ctxTypes,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Infers the generic type(s) of an argument expression and updates `ctxTypes`. */\n  inferGenericType(\n    /** The generic type being inferred. */\n    typeNode: TypeNode,\n    /** The respective argument expression. */\n    exprNode: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    var type = this.resolveExpression(exprNode, ctxFlow, Type.auto, ReportMode.SWALLOW);\n    if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, ctxTypes, typeParameterNames);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let typeArgumentNodes = (<NamedTypeNode>node).typeArguments;\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName((<NamedTypeNode>node).name, ctxFlow.actualFunction);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = (<NamedTypeNode>node).name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = ctxTypes.get(name)!;\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n            ctxTypes.set(name, type);\n          }\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let parameterNodes = (<FunctionTypeNode>node).parameters;\n      if (parameterNodes !== null && parameterNodes.length) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          let parameterTypes = signatureReference.parameterTypes;\n          let thisType = signatureReference.thisType;\n          if (parameterTypes.length == parameterNodes.length && !thisType == !(<FunctionTypeNode>node).explicitThisType) {\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n            }\n            this.propagateInferredGenericTypes((<FunctionTypeNode>node).returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n            if (thisType) this.propagateInferredGenericTypes((<FunctionTypeNode>node).explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      assert(type != Type.void);\n      let classReference = type.classReference;\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    if (kind == ElementKind.FUNCTION_TARGET) return (<FunctionTarget>element).type;\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    if (type.is(TypeFlags.REFERENCE)) {\n      let classReference = type.classReference;\n      if (classReference) return classReference;\n      let signatureReference = assert(type.signatureReference);\n      return signatureReference.asFunctionTarget(this.program);\n    } else if (type != Type.void) {\n      let wrapperClasses = this.program.wrapperClasses;\n      assert(wrapperClasses.has(type));\n      return wrapperClasses.get(type);\n    }\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.classReference;\n        return ctxType.is(TypeFlags.REFERENCE) && classReference !== null\n          ? classReference.type.asNullable()\n          : this.program.options.usizeType; // TODO: anyref context?\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, makeMap(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var type: Type | null;\n    var typeNode = global.typeNode;\n    if (typeNode) {\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\n    } else {\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\n    }\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let elementExpression = assert(this.currentElementExpression);\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(returnType)) {\n            classReference = wrapperClasses.get(returnType)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, returnType.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetNode;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    if (targetType.is(TypeFlags.REFERENCE)) {\n      let classReference = targetType.classReference;\n      if (classReference) {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (!ctxType.is(TypeFlags.REFERENCE)) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (node.assertionKind == AssertionKind.NONNULL) {\n      return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n    }\n    var type = this.resolveType(\n      assert(node.toType), // must be set if not NONNULL\n      ctxFlow.actualFunction,\n      ctxFlow.contextualTypeArguments,\n      reportMode\n    );\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    this.currentThisExpression = null;\n    this.currentElementExpression = null;\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    if (node.assertionKind == AssertionKind.NONNULL) {\n      let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n      return type ? type.nonNullableType : null;\n    }\n    return this.resolveType(\n      assert(node.toType), // must be set if not NONNULL\n      ctxFlow.actualFunction,\n      ctxFlow.contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n            if (overload) return overload.signature.returnType;\n            let wrappedType = classReference.wrappedType;\n            if (wrappedType) type = wrappedType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // pow: result is f32 if LHS is f32, otherwise f64, preferring overloads\n\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return leftType == Type.f32 ? Type.f32 : Type.f64;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.is(TypeFlags.INTEGER) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.is(TypeFlags.INTEGER) || commonType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\n      let thisLocal = ctxFlow.lookupLocal(CommonSymbols.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\n      let superLocal = ctxFlow.lookupLocal(CommonSymbols.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        let intType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(intType));\n        return wrapperClasses.get(intType);\n      }\n      case LiteralKind.FLOAT: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(fltType));\n        return wrapperClasses.get(fltType);\n      }\n      case LiteralKind.STRING: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        return this.program.stringInstance;\n      }\n      // TODO\n      // case LiteralKind.ARRAY:\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        // `unchecked(expr: *): *` is special\n        if (\n          (<FunctionPrototype>target).internalName == BuiltinSymbols.unchecked &&\n          node.arguments.length > 0\n        ) {\n          return this.resolveExpression(node.arguments[0], ctxFlow, ctxType, reportMode);\n        }\n        // otherwise resolve normally\n        let instance = this.resolveFunctionInclTypeArguments(\n          <FunctionPrototype>target,\n          node.typeArguments,\n          ctxFlow.actualFunction,\n          makeMap(ctxFlow.contextualTypeArguments), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        return (<FunctionTarget>target).signature.returnType;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var wrapperClasses = this.program.wrapperClasses;\n    assert(wrapperClasses.has(Type.bool));\n    return wrapperClasses.get(Type.bool);\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonSymbols.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonSymbols.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    var baseClass: Class | null = null;\n    if (basePrototype) {\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      baseClass = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!baseClass) return null;\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\n    instance.contextualTypeArguments = ctxTypes;\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      let baseMembers = baseClass.members;\n      if (baseMembers) {\n        let instanceMembers = instance.members;\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve instance members\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            let instanceMembers = instance.members;\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\n            else if (instanceMembers.has(member.name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                (<FieldPrototype>member).identifierNode.range,\n                member.name\n              );\n              break;\n            }\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (baseClass) {\n                let baseMembers = baseClass.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          instance.contextualTypeArguments,\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (kind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(kind)) {\n        overloads.set(kind, operatorInstance);\n        if (kind == OperatorKind.INDEXED_GET || kind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (kind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow returns. */\n  RETURNS = 1 << 0,\n  /** This flow returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow throws. */\n  THROWS = 1 << 3,\n  /** This flow breaks. */\n  BREAKS = 1 << 4,\n  /** This flow continues. */\n  CONTINUES = 1 << 5,\n  /** This flow allocates. Constructors only. */\n  ALLOCATES = 1 << 6,\n  /** This flow calls super. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8,\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally terminates in a child flow. */\n  CONDITIONALLY_TERMINATES = 1 << 11,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 12,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 13,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 14,\n\n  // special\n\n  /** This is an inlining flow. */\n  INLINE_CONTEXT = 1 << 15,\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 16,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is read from. */\n  READFROM = 1 << 3,\n  /** Local is written to. */\n  WRITTENTO = 1 << 4,\n  /** Local is retained. */\n  RETAINED = 1 << 5,\n\n  /** Local is conditionally read from. */\n  CONDITIONALLY_READFROM = 1 << 6,\n  /** Local is conditionally written to. */\n  CONDITIONALLY_WRITTENTO = 1 << 7,\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 8,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = CONSTANT\n                  | WRAPPED\n                  | NONNULL\n                  | READFROM\n                  | WRITTENTO\n                  | RETAINED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = RETAINED\n                  | CONDITIONALLY_READFROM\n                  | CONDITIONALLY_WRITTENTO\n                  | CONDITIONALLY_RETAINED,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED\n}\nexport namespace LocalFlags {\n  export function join(left: LocalFlags, right: LocalFlags): LocalFlags {\n    return ((left & LocalFlags.ANY_CATEGORICAL) & (right & LocalFlags.ANY_CATEGORICAL))\n         |  (left & LocalFlags.ANY_CONDITIONAL) | (right & LocalFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** Flags indicating the current state of a field. */\nexport enum FieldFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Field is initialized. Relevant in constructors. */\n  INITIALIZED = 1 << 0,\n  /** Field is conditionally initialized. Relevant in constructors. */\n  CONDITIONALLY_INITIALIZED = 1 << 1,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = INITIALIZED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = CONDITIONALLY_INITIALIZED\n}\nexport namespace FieldFlags {\n  export function join(left: FieldFlags, right: FieldFlags): FieldFlags {\n    return ((left & FieldFlags.ANY_CATEGORICAL) & (right & FieldFlags.ANY_CATEGORICAL))\n         |  (left & FieldFlags.ANY_CONDITIONAL) | (right & FieldFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Field flags. Relevant in constructors. */\n  fieldFlags: Map<string,FieldFlags> | null = null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.parentFunction = this.parentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps && temps.length) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps && temps.length) {\n        local = temps.pop();\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    this.freeTempLocal(local);\n    return local;\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name);\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          this.parentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range\n          );\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name);\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.localFlags = other.localFlags; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    this.set(other.flags & FlowFlags.ANY_CONDITIONAL);\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n    var localFlags = other.localFlags;\n    for (let i = 0, k = localFlags.length; i < k; ++i) {\n      let flags = localFlags[i];\n      this.setLocalFlag(i, flags & LocalFlags.ANY_CONDITIONAL);\n      if (flags & LocalFlags.RETAINED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETAINED);\n      if (flags & LocalFlags.READFROM) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_READFROM);\n      if (flags & LocalFlags.WRITTENTO) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_WRITTENTO);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.set(left.flags & right.flags & FlowFlags.ANY_CATEGORICAL);\n\n    // conditional flags set in any arm\n    this.set(left.flags & FlowFlags.ANY_CONDITIONAL);\n    this.set(right.flags & FlowFlags.ANY_CONDITIONAL);\n\n    // categorical flags in either arm as conditional\n    this.inheritConditional(left);\n    this.inheritConditional(right);\n\n    // categorical local flags set in both arms / conditional local flags set in at least one arm\n    var leftLocalFlags = left.localFlags;\n    var numLeftLocalFlags = leftLocalFlags.length;\n    var rightLocalFlags = right.localFlags;\n    var numRightLocalFlags = rightLocalFlags.length;\n    var combinedFlags = new Array<LocalFlags>(max<i32>(numLeftLocalFlags, numRightLocalFlags));\n    for (let i = 0; i < numLeftLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        unchecked(leftLocalFlags[i]),\n        i < numRightLocalFlags\n          ? unchecked(rightLocalFlags[i])\n          : 0\n      );\n    }\n    for (let i = numLeftLocalFlags; i < numRightLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        0,\n        unchecked(rightLocalFlags[i])\n      );\n    }\n    this.localFlags = combinedFlags;\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(expr: ExpressionRef): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        this.inheritNonnullIfTrue(getLocalSetValue(expr)); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr));\n            this.inheritNonnullIfTrue(getIfTrue(expr));\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr)); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        switch (name) {\n          case program.retainInstance.internalName: {\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0));\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(expr: ExpressionRef): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr)); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          if (\n            (getExpressionType(ifTrue) == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (getExpressionType(ifTrue) == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr));\n            this.inheritNonnullIfFalse(getIfFalse(expr));\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = instancesByName.get(instanceName)!;\n          assert(instance.kind == ElementKind.FUNCTION);\n          let returnType = (<Function>instance).signature.returnType;\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"]\";\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  BuiltinSymbols,\n  compileCall as compileBuiltinCall,\n  compileAbort,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  FeatureFlags,\n  needsExplicitUnreachable,\n  getLocalSetValue\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  CommonSymbols,\n  INDEX_SUFFIX,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  NamedTypeNode,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  nodeIsConstantValue,\n  findDecorator,\n  isTypeOmitted,\n  ExportDefaultStatement,\n  SourceKind\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n    var featureFlags: BinaryenFeatureFlags = 0;\n    if (this.options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (this.options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\n    if (this.options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (this.options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (this.options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (this.options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (this.options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (this.options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (this.options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    this.module.setFeatures(featureFlags);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = \"start\";\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add a mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinSymbols.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinSymbols.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinSymbols.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.block(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, \"__start\");\n    }\n\n    // compile runtime features\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n    module.removeGlobal(BuiltinSymbols.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinSymbols.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\",\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.block(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n    return module;\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        this.ensureModuleFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\n        if (!element.is(CommonFlags.READONLY)) {\n          this.ensureModuleFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // make the class name itself represent its runtime id\n        if (!(<Class>element).type.isUnmanaged) {\n          let module = this.module;\n          let internalName = (<Class>element).internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.INDEXSIGNATURE: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  /** Makes a function to get the value of a field of an exported class. */\n  private ensureModuleFieldGetter(name: string, field: Field): void {\n    var type = field.type;\n    var module = this.module;\n    var usizeType = this.options.usizeType;\n    var loadExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, usizeType.toNativeType()),\n      type.toNativeType(), field.memoryOffset\n    );\n    // a user-defined getter would return a retained value, so:\n    if (type.isManaged) loadExpr = this.makeRetain(loadExpr);\n    module.addFunction(\n      name,\n      this.ensureFunctionType(null, type, usizeType),\n      null,\n      loadExpr\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  /** Makes a function to set the value of a field of an exported class. */\n  private ensureModuleFieldSetter(name: string, field: Field): void {\n    var type = field.type;\n    var module = this.module;\n    var nativeType = type.toNativeType();\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var valueExpr = module.local_get(1, nativeType);\n    if (type.isManaged) {\n      valueExpr = this.makeRetainRelease(\n        module.load(type.byteSize, false, // oldRef\n          module.local_get(0, nativeSizeType),\n          nativeType, field.memoryOffset\n        ),\n        valueExpr // newRef\n      );\n    }\n    module.addFunction(\n      name,\n      this.ensureFunctionType([ type ], Type.void, usizeType),\n      null,\n      module.store(\n        type.byteSize,\n        module.local_get(0, nativeSizeType),\n        valueExpr,\n        nativeType,\n        field.memoryOffset\n      )\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE:\n      case ElementKind.INDEXSIGNATURE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) this.compileMembers(element);\n  }\n\n  /** Compiles an element's members. */\n  compileMembers(element: Element): void {\n    var members = element.members;\n    if (members) for (let element of members.values()) this.compileElement(element);\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) {\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\n        varTypes,\n        startFunctionBody.length > 1\n          ? module.block(null, startFunctionBody)\n          : startFunctionBody[0]\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var initAutoreleaseSkipped: bool = false;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinSymbols.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinSymbols.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType,\n          !isDeclaredConstant\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Feature_0_is_not_enabled,\n          global.declaration.range, \"mutable-globals\"\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      initExpr = type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, type.toNativeZero(module));\n      if (type.isManaged && !initAutoreleaseSkipped) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          initExpr = module.binary(BinaryOp.AddI32,\n            module.global_get(previousValue.internalName, NativeType.I32),\n            module.i32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(val, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n          }\n          val.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): Function | null {\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return null;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n      if (!flow.is(FlowFlags.TERMINATES)) { // TODO: detect if returning an autorelease local?\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getAndFreeTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.if(\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.local_get(thisLocal.index, nativeSizeType)\n              ),\n              module.local_set(thisLocal.index,\n                this.makeRetain(\n                  this.makeAllocation(<Class>classInstance)\n                ),\n              )\n            )\n          );\n          this.makeFieldInitialization(<Class>classInstance, stmts);\n        }\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n\n    var previousType = this.currentType; // remember to retain it if compiling a function lazily\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          decorator.range, \"external\"\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.drop(\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n      }\n\n      this.compileFunctionBody(instance, stmts);\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        flatten(module, stmts, instance.signature.returnType.toNativeType())\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n      funcRef = module.getFunction(instance.internalName);\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                (<FunctionPrototype>element).identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getter = (<PropertyPrototype>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                getter.identifierNode\n              );\n            }\n            let setter = (<PropertyPrototype>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                setter.identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD_PROTOTYPE: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterInstance;\n            if (getter) this.compileFunction(getter);\n            let setter = (<Property>element).setterInstance;\n            if (setter) this.compileFunction(setter);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Not_implemented,\n      declaration.range\n    );\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = segments.get(stringValue)!; // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  ensureStaticArrayBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\n    var pos = runtimeHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    assert(pos == buf.length);\n\n    return this.addMemorySegment(buf);\n  }\n\n  ensureStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.currentMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    if (statement.kind == NodeKind.EXPORTDEFAULT) {\n      statement = (<ExportDefaultStatement>statement).declaration;\n    }\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        assert(element.kind == ElementKind.ENUM);\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let memberStatements = (<NamespaceDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          assert(element.kind == ElementKind.GLOBAL);\n          if (\n            !element.is(CommonFlags.AMBIENT) && // delay imports\n            !element.hasDecorator(DecoratorFlags.LAZY)\n          ) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).internalPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).internalPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).internalPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  compileStatement(\n    statement: Statement,\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(\n    statements: Statement[],\n    isBody: bool = false,\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow); // TODO: only if not terminated?\n    this.currentFlow = outerFlow;\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        statement.label.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* clearFlags */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileDoStatement(\n    statement: DoStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(\n        this.compileStatement(statement.statement)\n      );\n    }\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType\n      )\n    );\n    var alwaysFalse = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) alwaysFalse = true;\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n\n    // (block $break            ;; (1) skip if no breaks\n    //  (loop $continue         ;; (2) skip if skipping (4) + no continues\n    //   (...)                  ;; (3)\n    //   (br_if cond $continue) ;; (4) skip if (3) does not fall through or always false\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough && !alwaysFalse) { // (4)\n      stmts.push(module.br(continueLabel, condExpr));\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough && !alwaysFalse || continues) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (breaks) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    if (!terminates) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  compileForStatement(\n    statement: ForStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    // Set up and use the inner flow\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    // Compile the initializer\n    var initializer = statement.initializer;\n    var initExpr: ExpressionRef = 0;\n    if (initializer) initExpr = this.compileStatement(initializer);\n\n    // Compile the condition\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(<Expression>statement.condition, Type.bool),\n          this.currentType\n        )\n      );\n      // Simplify if the condition is constant\n      if (getExpressionId(condExpr) == ExpressionId.Const) {\n        assert(getExpressionType(condExpr) == NativeType.I32);\n        if (getConstValueI32(condExpr) == /* false */ 0) {\n          let stmts = new Array<ExpressionRef>();\n          if (initExpr) stmts.push(initExpr);\n          this.performAutoreleases(innerFlow, stmts);\n          innerFlow.freeScopedLocals();\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return flatten(module, stmts, NativeType.None);\n        }\n        alwaysTrue = true;\n      }\n    } else { // Omitted condition is always true\n      condExpr = module.i32(1);\n      alwaysTrue = true;\n    }\n    innerFlow.inheritNonnullIfTrue(condExpr);\n\n    // Compile incrementor\n    var incrementor = statement.incrementor;\n    var incrExpr: ExpressionRef = 0;\n    if (incrementor) incrExpr = this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP);\n\n    // Compile body (break: drop out, continue: fall through to incrementor, + loop)\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label; innerFlow.breakLabel = breakLabel;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    var loopLabel = \"loop|\" + label;\n    var bodyStatement = statement.statement;\n    var stmts = new Array<ExpressionRef>();\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>bodyStatement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(bodyStatement));\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n\n    // (block $break          ;; (1) skip label (needed anyway) if skipping (4) + no breaks\n    //  (initializer)         ;; (2) [may be empty]\n    //  (loop $loop           ;; (3) skip if (6) does not fall through + no continues\n    //   (br_if !cond $break) ;; (4) skip if always true\n    //   (block $continue     ;; (5) skip if no continues or nothing else than continue\n    //    (...)               ;; (6)\n    //   )\n    //   (incrementor)        ;; (7) skip if skipping (3) [may be empty]\n    //   (br $loop)           ;; (8) skip if skipping (3)\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n    var needsLabel = !alwaysTrue || breaks;\n\n    var loop = new Array<ExpressionRef>();\n    if (!alwaysTrue) { // (4)\n      loop.push(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    if (continues) { // (5)\n      if (stmts.length > 1 || getExpressionId(stmts[0]) != ExpressionId.Break) { // otherwise lonely continue\n        loop.push(module.block(continueLabel, stmts));\n      }\n    } else {\n      for (let i = 0, k = stmts.length; i < k; ++i) loop.push(stmts[i]);\n    }\n    var expr: ExpressionRef;\n    if (fallsThrough || continues) { // (3)\n      if (incrExpr) loop.push(incrExpr); // (7)\n      this.performAutoreleases(innerFlow, loop);\n      loop.push(module.br(loopLabel)); // (8)\n      if (initExpr) { // (2)\n        expr = module.block(needsLabel ? breakLabel : null, [\n          initExpr,\n          module.loop(loopLabel, module.block(null, loop))\n        ]);\n      } else {\n        expr = module.block(needsLabel ? breakLabel : null, [\n          module.loop(loopLabel, flatten(module, loop, NativeType.None))\n        ]);\n      }\n    } else {\n      if (initExpr) loop.unshift(initExpr); // (2)\n      this.performAutoreleases(innerFlow, loop);\n      expr = module.block(needsLabel ? breakLabel : null, loop);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n    var outerFlow = this.currentFlow;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileStatement(ifTrue)\n        : ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.nop();\n    }\n\n    // Each arm initiates a branch\n    var ifTrueStmts = new Array<ExpressionRef>();\n    var ifTrueFlow = outerFlow.fork();\n    this.currentFlow = ifTrueFlow;\n    ifTrueFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, ifTrueStmts);\n    } else {\n      ifTrueStmts.push(this.compileStatement(ifTrue));\n    }\n    if (!ifTrueFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifTrueFlow, ifTrueStmts);\n    ifTrueFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    if (ifFalse) {\n      let ifFalseFlow = outerFlow.fork();\n      this.currentFlow = ifFalseFlow;\n      ifFalseFlow.inheritNonnullIfFalse(condExpr);\n      let ifFalseStmts = new Array<ExpressionRef>();\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, ifFalseStmts);\n      } else {\n        ifFalseStmts.push(this.compileStatement(ifFalse));\n      }\n      if (!ifFalseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifFalseFlow, ifFalseStmts);\n      ifFalseFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None),\n        flatten(module, ifFalseStmts, NativeType.None)\n      );\n    } else {\n      outerFlow.inheritConditional(ifTrueFlow);\n      if (ifTrueFlow.is(FlowFlags.TERMINATES)) outerFlow.inheritNonnullIfFalse(condExpr);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None)\n      );\n    }\n    // TODO: Detect neglected condition\n    // if (!foo) {\n    //   foo = [notNull]\n    // }\n    // foo // is possibly null\n  }\n\n  compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n      expr = this.compileExpression(valueExpression, returnType, constraints | Constraints.WILL_RETAIN);\n\n      // when returning a local, and it is already retained, skip the final set\n      // of retaining it as the return value and releasing it as a variable\n      if (!this.skippedAutoreleases.has(expr)) {\n        if (returnType.isManaged) {\n          if (getExpressionId(expr) == ExpressionId.LocalGet) {\n            if (flow.isAnyLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED)) {\n              flow.unsetLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED);\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n        }\n      }\n\n      // remember return states\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    // Make sure that the return value is retained for the caller\n    if (returnType.isManaged && !this.skippedAutoreleases.has(expr)) expr = this.makeRetain(expr);\n\n    if (returnType != Type.void && stmts.length) {\n      let temp = flow.getAndFreeTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n    }\n    flow.freeScopedLocals();\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.block(null, stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.block(null, stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.block(null, stmts);\n  }\n\n  compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    this.finishAutoreleases(flow, stmts);\n\n    // TODO: requires exception-handling spec.\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(compileAbort(this, message, statement));\n\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (declaration.initializer) {\n        initExpr = this.compileExpression(declaration.initializer, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, declaration.name.text\n            );\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          if (flow.lookupLocal(name)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                type.toNativeZero(module)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : flatten(module, initializers, NativeType.None);\n  }\n\n  compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  compileWhileStatement(\n    statement: WhileStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // Compile condition\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Simplify if the condition is constant\n    var alwaysTrue = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) return module.nop(); // simplify\n      alwaysTrue = true;\n    }\n\n    // Compile body\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    innerFlow.inheritNonnullIfTrue(condExpr);\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(statement.statement));\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n\n    // (block $break          ;; (1) skip if skipping (3) + no breaks\n    //  (loop $continue       ;; (2) skip if skipping (5) + no continues\n    //   (br_if !cond $break) ;; (3) skip if always true\n    //   (...)                ;; (4)\n    //   (br $continue)       ;; (5) skip if (4) does not fall through\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough) { // (5)\n      this.performAutoreleases(innerFlow, stmts);\n      stmts.push(module.br(continueLabel));\n    }\n    if (!alwaysTrue) { // (3)\n      stmts.unshift(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough || innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (!alwaysTrue || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType) {\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, constraints)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    if (this.currentFlow.isNonnull(expr, fromType)) fromType = fromType.nonNullableType;\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        if (fromType.nonNullableType == toType) {\n          this.error(\n            DiagnosticCode.Object_is_possibly_null,\n            reportNode.range\n          ); // recoverable\n        } else {\n          this.error(\n            DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n            reportNode.range, fromType.toString(), toType.toString()\n          ); // recoverable\n        }\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          let module = this.module;\n          let flow = this.currentFlow;\n          let tempIndex = flow.getAndFreeTempLocal(type).index;\n          if (!flow.canOverflow(expr, type)) flow.setLocalFlag(tempIndex, LocalFlags.WRAPPED);\n          flow.setLocalFlag(tempIndex, LocalFlags.NONNULL);\n          expr = module.if(\n            module.local_tee(tempIndex, expr),\n            module.local_get(tempIndex, type.toNativeType()),\n            module.unreachable()\n          );\n        }\n        this.currentType = this.currentType.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueI8x16,\n              module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueI8x16,\n              module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: !ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"*\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"**\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        let targetType = leftType;\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n          if (compound && targetType != this.currentType) {\n            // this yields a proper error if target is i32 for example\n            expr = this.convertExpression(expr, this.currentType, targetType, false, false, expression);\n          }\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"/\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"%\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"<<\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"&\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"|\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"^\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInElse = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInElse = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            rightExpr,\n            retainLeftInElse\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType())\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, this.currentType),\n              rightExpr,\n              expr\n            );\n\n          // if not possible, tee left to a temp\n          } else {\n            let tempLocal = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              rightExpr,\n              module.local_get(tempLocal.index, leftType.toNativeType())\n            );\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInThen = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInThen = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n            // TODO: usually, false'ish means left is null, but this might not hold\n            // once implicit conversion with strings is performed and left is \"\", so:\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            retainLeftInThen\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType()),\n            rightExpr\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              expr,\n              rightExpr\n            );\n\n          // if not possible, tee left to a temp. local\n          } else {\n            let tempLocal = flow.getAndFreeTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              module.local_get(tempLocal.index, leftType.toNativeType()),\n              rightExpr\n            );\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target) || Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      left,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterPrototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, (<Class>parent).internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, (<Class>parent).internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    return this.makeAssignment(\n      target,\n      this.compileExpression(valueExpression, targetType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN),\n      expression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? (<Local>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(<Local>target, valueExpr, tee);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? (<Global>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, (<Field>target).internalName\n          );\n          return module.unreachable();\n        }\n        return this.makeFieldAssignment(<Field>target,\n          valueExpr,\n          // FIXME: explicit type (currently fails due to missing null checking)\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.unreachable();\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.unreachable();\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let tempLocal = flow.getAndFreeTempLocal(returnType);\n        let tempLocalIndex = tempLocal.index;\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.local_tee(tempLocalIndex, thisExpr),\n            valueExpr\n          ], valueExpression),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.local_get(tempLocalIndex, nativeReturnType)\n          ], valueExpression)\n        ], nativeReturnType);\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, parent.internalName\n          );\n          return module.unreachable();\n        }\n        let indexedSet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, parent.internalName\n          );\n          this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        let targetType = (<Class>parent).type;\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\n        if (tee) {\n          let tempLocalTarget = flow.getTempLocal(targetType);\n          let tempLocalElement = flow.getAndFreeTempLocal(this.currentType);\n          let returnType = indexedGet.signature.returnType;\n          flow.freeTempLocal(tempLocalTarget);\n          return module.block(null, [\n            this.makeCallDirect(indexedSet, [\n              module.local_tee(tempLocalTarget.index, thisExpr),\n              module.local_tee(tempLocalElement.index, elementExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(indexedGet, [\n              module.local_get(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n              module.local_get(tempLocalElement.index, tempLocalElement.type.toNativeType())\n            ], valueExpression)\n          ], returnType.toNativeType());\n        } else {\n          return this.makeCallDirect(indexedSet, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** The local to assign to. */\n    local: Local,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var type = local.type;\n    assert(type != Type.void);\n    var flow = this.currentFlow;\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.WRITTENTO);\n\n    if (type.isManaged) {\n      let module = this.module;\n      let nativeType = type.toNativeType();\n\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        if (this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeSkippedRelease(\n            module.local_get(localIndex, nativeType), // oldRef\n            valueExpr // newRef\n          );\n          if (tee) { // TEE(local = __skippedRelease(local, value))\n            this.currentType = type;\n            return module.local_tee(localIndex, valueExpr);\n          } else { // local = __skippedRelease(local, value)\n            this.currentType = Type.void;\n            return module.local_set(localIndex, valueExpr);\n          }\n        } else {\n          valueExpr = this.makeRetainRelease(\n            module.local_get(localIndex, nativeType), // oldRef\n            valueExpr // newRef\n          );\n          if (tee) { // TEE(local = __retainRelease(local, value))\n            this.currentType = type;\n            return module.local_tee(localIndex, valueExpr);\n          } else { // local = __retainRelease(local, value)\n            this.currentType = Type.void;\n            return module.local_set(localIndex, valueExpr);\n          }\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // TEE(local = __retain(value, local))\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // local = __retain(value, local)\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // TEE(local = value)\n        this.currentType = type;\n        return this.module.local_tee(localIndex, valueExpr);\n      } else { // local = value\n        this.currentType = Type.void;\n        return this.module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global to assign to. */\n    global: Global,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      if (this.skippedAutoreleases.has(valueExpr)) {\n        if (tee) { // (global = __skippedRelease(global, value)), global\n          this.currentType = type;\n          return module.block(null, [\n            module.global_set(global.internalName,\n              this.makeSkippedRelease(\n                module.global_get(global.internalName, nativeType), // oldRef\n                valueExpr // newRef\n              )\n            ),\n            module.global_get(global.internalName, nativeType)\n          ], nativeType);\n        } else { // global = __skippedRelease(global, value)\n          this.currentType = Type.void;\n          return module.global_set(global.internalName,\n            this.makeSkippedRelease(\n              module.global_get(global.internalName, nativeType), // oldRef\n              valueExpr // newRef\n            )\n          );\n        }\n      } else {\n        if (tee) { // (global = __retainRelease(global, value)), global\n          this.currentType = type;\n          return module.block(null, [\n            module.global_set(global.internalName,\n              this.makeRetainRelease(\n                module.global_get(global.internalName, nativeType), // oldRef\n                valueExpr // newRef\n              )\n            ),\n            module.global_get(global.internalName, nativeType)\n          ], nativeType);\n        } else { // global = __retainRelease(global, value)\n          this.currentType = Type.void;\n          return module.global_set(global.internalName,\n            this.makeRetainRelease(\n              module.global_get(global.internalName, nativeType), // oldRef\n              valueExpr // newRef\n            )\n          );\n        }\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType);\n      if (this.skippedAutoreleases.has(valueExpr)) {\n        if (tee) { // ((t1 = this).field = __skippedRelease(t1.field, t2 = value)), t2\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n          flow.freeTempLocal(tempThis);\n          this.currentType = fieldType;\n          return module.block(null, [\n            module.store(fieldType.byteSize,\n              module.local_tee(tempThis.index, thisExpr),\n              this.makeSkippedRelease(\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                  module.local_get(tempThis.index, nativeThisType),\n                  nativeFieldType, field.memoryOffset\n                ),\n                module.local_tee(tempValue.index, valueExpr), // newRef\n              ),\n              nativeFieldType, field.memoryOffset\n            ),\n            module.local_get(tempValue.index, nativeFieldType)\n          ], nativeFieldType);\n        } else { // (t1 = this).field = __skippedRelease(t1.field, value)\n          flow.freeTempLocal(tempThis);\n          this.currentType = Type.void;\n          return module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeSkippedRelease(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              valueExpr, // newRef\n            ),\n            nativeFieldType, field.memoryOffset\n          );\n        }\n      } else {\n        if (tee) { // ((t1 = this).field = __retainRelease(t1.field, t2 = value)), t2\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n          flow.freeTempLocal(tempThis);\n          this.currentType = fieldType;\n          return module.block(null, [\n            module.store(fieldType.byteSize,\n              module.local_tee(tempThis.index, thisExpr),\n              this.makeRetainRelease(\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                  module.local_get(tempThis.index, nativeThisType),\n                  nativeFieldType, field.memoryOffset\n                ),\n                module.local_tee(tempValue.index, valueExpr) // newRef\n              ),\n              nativeFieldType, field.memoryOffset\n            ),\n            module.local_get(tempValue.index, nativeFieldType)\n          ], nativeFieldType);\n        } else { // (t1 = this).field = __retainRelease(t1.field, value)\n          flow.freeTempLocal(tempThis);\n          this.currentType = Type.void;\n          return module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeRetainRelease(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              valueExpr // newRef\n            ),\n            nativeFieldType, field.memoryOffset\n          );\n        }\n      }\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let tempValue = flow.getAndFreeTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        this.currentType = fieldType;\n        return module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(tempValue.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let theCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.arguments,\n        expression,\n        module.if(\n          module.local_get(thisLocal.index, nativeSizeType),\n          module.local_get(thisLocal.index, nativeSizeType),\n          this.makeRetain(\n            this.makeAllocation(<Class>classInstance)\n          )\n        ),\n        Constraints.WILL_RETAIN\n      );\n      assert(this.skippedAutoreleases.has(theCall)); // guaranteed\n      let stmts: ExpressionRef[] = [\n        module.local_set(thisLocal.index, theCall)\n      ];\n      this.makeFieldInitialization(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.block(null, stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.unreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            flow.actualFunction.parent, // relative to caller\n            makeMap<string,Type>(flow.contextualTypeArguments),\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let contextualTypeArguments = makeMap<string,Type>(flow.contextualTypeArguments);\n\n          // fill up contextual types with auto for each generic component\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\n          let numTypeParameters = typeParameterNodes.length;\n          let typeParameterNames = new Set<string>();\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let name = typeParameterNodes[i].name.text;\n            contextualTypeArguments.set(name, Type.auto);\n            typeParameterNames.add(name);\n          }\n\n          let parameterNodes = prototype.functionTypeNode.parameters;\n          let numParameters = parameterNodes.length;\n          let argumentNodes = expression.arguments;\n          let numArguments = argumentNodes.length;\n\n          // infer types with generic components while updating contextual types\n          for (let i = 0; i < numParameters; ++i) {\n            let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameters.toString(10), numArguments.toString(10)\n              );\n              return module.unreachable();\n            }\n            let typeNode = parameterNodes[i].type;\n            if (typeNode.hasGenericComponent(typeParameterNodes)) {\n              this.resolver.inferGenericType(typeNode, argumentExpression, flow, contextualTypeArguments, typeParameterNames);\n            }\n          }\n\n          // apply concrete types to the generic function signature\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let name = typeParameterNodes[i].name.text;\n            if (contextualTypeArguments.has(name)) {\n              let inferredType = contextualTypeArguments.get(name)!;\n              if (inferredType != Type.auto) {\n                resolvedTypeArguments[i] = inferredType;\n                continue;\n              }\n            }\n            // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n            // invalid because the type is effectively unknown inside the function body\n            this.error(\n              DiagnosticCode.Type_argument_expected,\n              expression.expression.range.atEnd\n            );\n            return this.module.unreachable();\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            makeMap<string,Type>(flow.contextualTypeArguments)\n          );\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(prototype, null);\n        }\n        if (!instance) return this.module.unreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n          indexArg = module.load(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.unreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    return compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      this.error(\n        DiagnosticCode.Operation_is_unsafe,\n        reportNode.range\n      );\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, usedLocals);\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        body.push(\n          module.local_set(argumentLocal.index,\n            this.makeRetain(initExpr)\n          )\n        );\n      } else {\n        body.push(\n          module.local_set(argumentLocal.index, initExpr)\n        );\n      }\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var thisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(this.program, originalParameterTypes, returnType, thisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    var flow = trampoline.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinSymbols.argc, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinSymbols.argc, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        returnType,\n        thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.block(null, stmts, returnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        BuiltinSymbols.argc,\n        NativeType.I32,\n        true,\n        module.i32(0)\n      );\n    }\n    return BuiltinSymbols.argc;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(BuiltinSymbols.setargc,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.global_set(this.ensureArgcVar(),\n          module.local_get(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(BuiltinSymbols.setargc, \"__setargc\");\n    }\n    return BuiltinSymbols.setargc;\n  }\n\n  // <reference-counting>\n\n  /** Makes retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a retainRelease call, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeRetainRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\n    // if ((t1=newExpr) != (t2=oldExpr)) {\n    //   __retain(t1);\n    //   __release(t2);\n    // }, t1\n    var module = this.module;\n    var flow = this.currentFlow;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = this.options.nativeSizeType;\n    var temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n    var temp2 = flow.getAndFreeTempLocal(usizeType);\n    flow.freeTempLocal(temp1);\n    return module.block(null, [\n      module.if(\n        module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n          module.local_tee(temp1.index, newExpr),\n          module.local_tee(temp2.index, oldExpr)\n        ),\n        module.block(null, [\n          module.drop(\n            this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n          ),\n          this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n        ])\n      ),\n      module.local_get(temp1.index, nativeSizeType)\n    ], nativeSizeType);\n  }\n\n  /** Makes a skippedRelease call, ignoring the new expression's value and releasing the old expression's value, in this order. */\n  makeSkippedRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\n    // TODO: this helper can be eliminated altogether if the current logic holds\n    // (t1=newExpr), __release(oldExpr), t1\n    var module = this.module;\n    var flow = this.currentFlow;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = this.options.nativeSizeType;\n    var temp = flow.getAndFreeTempLocal(usizeType, findUsedLocals(oldExpr));\n    return module.block(null, [\n      module.local_set(temp.index, newExpr),\n      this.makeRelease(oldExpr),\n      module.local_get(temp.index, nativeSizeType)\n    ], nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes an automatic release call at the end of the current flow. */\n  makeAutorelease(expr: ExpressionRef, flow: Flow = this.currentFlow): ExpressionRef {\n    // FIXME: loses track of nonNull state?\n    return this.module.local_tee(flow.getAutoreleaseLocal(this.options.usizeType).index, expr);\n  }\n\n  /** Attempts to undo a final autorelease, returning the index of the previously retaining variable or -1 if not possible. */\n  undoAutorelease(expr: ExpressionRef, flow: Flow): i32 {\n    // NOTE: Can't remove the local.tee completely because it's already compiled\n    // and a child of something else. Preventing the final release however should\n    // make it optimize away.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: { // local.tee(__retain(expr))\n        if (isLocalTee(expr)) {\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            // Assumes that the expression actually belongs to the flow and that\n            // top-level autoreleases are never undone. While that's true, it's\n            // not necessary to check presence in scopedLocals.\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.tee(__retain(expr)) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.undoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Attemps to move a final autorelease from one flow to a parent.\n   * It is crucial that from flow hasn't processed autoreleases yet because otherwise the final\n   * retain would have been written already.\n   */\n  moveAutorelease(expr: ExpressionRef, fromInnerFlow: Flow, toOuterFlow: Flow): ExpressionRef {\n    // NOTE: While this avoids an unnecessary set of retain and release, it cannot\n    // eliminate the now unnecessary temporary local.tee because it is already part of\n    // another expression in the tree. But optimizing should collapse locals again.\n    var index = this.undoAutorelease(expr, fromInnerFlow);\n    return ~index\n      ? this.makeAutorelease(expr, toOuterFlow) // undone, can skip the retain\n      : this.makeAutorelease(this.makeRetain(expr), toOuterFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(flow: Flow, stmts: ExpressionRef[], clearFlags: bool = true): void {\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      for (let local of scopedLocals.values()) {\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (clearFlags) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the value. */\n  performAutoreleasesWithValue(\n    flow: Flow,\n    valueExpr: ExpressionRef,\n    valueType: Type,\n    stmts: ExpressionRef[] | null = null,\n    clearFlags: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, clearFlags);\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getAndFreeTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      let module = this.module;\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      return module.block(null, stmts, nativeType);\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return this.module.block(null, stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued top-level autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(flow: Flow, stmts: ExpressionRef[]): void {\n    var module = this.module;\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      // traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead.\n      let parent: Flow | null;\n      while (parent = flow.parent) flow = parent;\n      this.performAutoreleases(flow, stmts, false);\n    } else {\n      for (let local of flow.parentFunction.localsByIndex) {\n        let localIndex = local.index;\n        if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n          stmts.push(\n            this.makeRelease(\n              module.local_get(localIndex, local.type.toNativeType())\n            )\n          );\n        }\n      }\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr: ExpressionRef;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          let theOperands = assert(operands);\n          assert(theOperands.length);\n          expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n        } else {\n          expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n        }\n        if (this.currentType.isManaged) {\n          if (!skipAutorelease) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (nodeIsConstantValue(initializer.kind)) {\n            operands.push(this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i]);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(parameterTypes[i].toNativeZero(module));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          return module.block(null, [\n            module.global_set(this.ensureArgcVar(), module.i32(numArguments)),\n            expr\n          ], this.currentType.toNativeType());\n        }\n      }\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    var expr = module.call_indirect(indexArg, operands, signature.toSignatureString());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return module.block(null, [\n      module.global_set(this.ensureArgcVar(), // might be calling a trampoline\n        module.i32(numArguments)\n      ),\n      expr\n    ], this.currentType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.block(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      if (targetType.is(TypeFlags.REFERENCE)) {\n        let classReference = targetType.classReference;\n        if (classReference) {\n          let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\n          if (indexedGet) {\n            let thisArg = this.compileExpression(targetExpression, classReference.type,\n              Constraints.CONV_IMPLICIT\n            );\n            return this.compileCallDirect(indexedGet, [\n              expression.elementExpression\n            ], expression, thisArg, constraints);\n          }\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.compileFunctionUsingTypeArguments(\n        prototype,\n        [],\n        contextualTypeArguments\n      );\n      if (!instance) return this.module.unreachable();\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        let classReference = contextualType.classReference;\n        if (contextualType.is(TypeFlags.REFERENCE) && classReference !== null) {\n          this.currentType = classReference.type.asNullable();\n        } else {\n          this.currentType = options.usizeType; // TODO: anyref context yields <usize>0\n        }\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.if(\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.local_get(thisLocal.index, nativeSizeType)\n                  ),\n                  module.local_set(thisLocal.index,\n                    this.makeRetain(\n                      this.makeAllocation(<Class>classInstance)\n                    )\n                  )\n                )\n              ];\n              this.makeFieldInitialization(<Class>classInstance, stmts);\n              stmts.push(\n                module.local_get(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.block(null, stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      this.currentEnum || actualFunction\n    );\n    if (!target) return module.unreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, constraints);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          type = type.nonNullableType;\n        }\n        this.currentType = type;\n        return this.module.local_get(localIndex, type.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.unreachable();\n        }\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = type;\n        return this.module.global_get((<Global>target).internalName, type.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return this.module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\n    var expr = this.compileExpression(expression.expression, this.options.usizeType);\n    var actualType = this.currentType;\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\n    this.currentType = Type.bool;\n    if (!expectedType) return module.unreachable();\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(actualType == expectedType ? 1 : 0)\n      ], NativeType.I32);\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(0)\n      ], NativeType.I32);\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          actualType.toNativeZero(module)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          return module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(tempLocal.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(tempLocal.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.block(null, [\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\n          module.i32(1)\n        ], NativeType.I32);\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          return module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(tempLocal.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(tempLocal.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        let classType = contextualType.classReference;\n        if (classType) {\n          if (classType.prototype == this.program.arrayPrototype) {\n            return this.compileArrayLiteral(\n              assert(classType.typeArguments)[0],\n              (<ArrayLiteralExpression>expression).elementExpressions,\n              constraints,\n              expression\n            );\n          }\n        }\n        this.error(\n          DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n          expression.range, \"T\"\n        );\n        return module.unreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    constraints: Constraints,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var program = this.program;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n    var arrayType = arrayInstance.type;\n    var flow = this.currentFlow;\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(arrayType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? module.precomputeExpression(\n            this.compileExpression(<Expression>expression, elementType,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        : elementType.toNativeZero(module);\n      if (getExpressionId(expr) == ExpressionId.Const) {\n        assert(getExpressionType(expr) == nativeElementType);\n      } else {\n        isStatic = false;\n      }\n      values[i] = expr;\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.ensureStaticArrayBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.ensureStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // makeArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], reportNode);\n        this.currentType = arrayType;\n        return this.makeAutorelease(this.makeRetain(expr));\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(0)\n            : module.i32(0)\n        ], reportNode),\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStart.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStart).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        valueExpr = this.makeRetain(valueExpr);\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    return module.block(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getAutoreleaseLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\n        type.byteSize,\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, Constraints.CONV_IMPLICIT),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.local_set(\n      tempLocal.index,\n      this.makeRetain(\n        this.makeAllocation(classReference)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\n\n    this.currentType = classReference.type;\n    return module.block(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.lookupExpression( // reports\n      expression.expression,\n      flow\n    );\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.expression.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        null\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(this.program, null, classInstance.type, classInstance.type),\n        null\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    var allocExpr = this.makeAllocation(classInstance);\n    if (classInstance.type.isManaged) allocExpr = this.makeRetain(allocExpr);\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0, allocExpr)\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n        )\n      );\n    }\n    this.makeFieldInitialization(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.options.usizeType.toNativeZero(this.module),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) return module.unreachable(); // reports\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(<EnumValue>target, ctxType, constraints);\n        }\n        assert((<EnumValue>target).type == Type.i32);\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\n        this.currentType = (<Field>target).type;\n        return module.load(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], expression, 0);\n        }\n        return module.unreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        if (prototype.is(CommonFlags.STATIC)) {\n          let instance = this.compileFunctionUsingTypeArguments(\n            prototype,\n            [],\n            makeMap<string,Type>(),\n            expression,\n          );\n          if (instance == null) {\n            return module.unreachable();\n          } else {\n            this.currentType = instance.type;\n            return module.i32(this.ensureFunctionTableEntry(instance));\n          }\n        }\n\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          expression.range, prototype.name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return module.unreachable();\n  }\n\n  compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(expression.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking left type\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileExpression(ifThen, ctxType)\n        : this.compileExpression(ifElse, ctxType);\n    }\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var IfThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = ctxType;\n      return this.module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (IfThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!IfThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        IfThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!IfThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      // if (!(constraints & Constraints.WILL_RETAIN)) {\n        ifThenExpr = this.moveAutorelease(ifThenExpr, ifThenFlow, outerFlow);\n        ifElseExpr = this.moveAutorelease(ifElseExpr, ifElseFlow, outerFlow);\n      // }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(IfThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (IfThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (isInstance) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) {\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            expr = this.compileExpression(operand, Type.auto); // might have side-effects\n            break;\n          }\n          case NodeKind.IDENTIFIER: break; // ignore error\n          default: expr = this.compileExpression(operand, Type.auto); // trigger error\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, false, operand);\n            if (type.is(TypeFlags.REFERENCE)) {\n              let signatureReference = type.signatureReference;\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.classReference;\n                if (classReference) {\n                  if (classReference.prototype === stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"anyref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER)) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.nativeSizeType)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.unary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.unary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return module.unary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.EqF32, expr, module.f32(0));\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.EqF64, expr, module.f64(0));\n      }\n      // case TypeKind.ANYREF: {\n      //   TODO: ref.is_null\n      // }\n      default: {\n        assert(false);\n        return module.i32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.NeF32, expr, module.f32(0));\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.NeF64, expr, module.f64(0));\n      }\n      // case TypeKind.ANYREF: {\n      //   TODO: !ref.is_null\n      // }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.currentMemoryOffset)\n        : module.i32(classInstance.currentMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields. */\n  makeFieldInitialization(\n    classInstance: Class,\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return [];\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let fieldPrototype = field.prototype;\n      let initializerNode = fieldPrototype.initializerNode;\n      let parameterIndex = fieldPrototype.parameterIndex;\n      let initExpr: ExpressionRef;\n      if (initializerNode) { // use initializer\n        initExpr = this.compileExpression(initializerNode, fieldType, // reports\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr);\n        }\n      } else if (parameterIndex >= 0) { // initialized via parameter (here: a local)\n        initExpr = module.local_get(\n          isInline\n            ? assert(flow.lookupLocal(field.name)).index\n            : 1 + parameterIndex, // this is local 0\n          nativeFieldType\n        );\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr);\n      } else { // initialize with zero\n        initExpr = fieldType.toNativeZero(module);\n      }\n      stmts.push(\n        module.store(fieldType.byteSize,\n          module.local_get(thisLocalIndex, nativeSizeType),\n          initExpr,\n          nativeFieldType,\n          field.memoryOffset\n        )\n      );\n    }\n    return stmts;\n  }\n\n  makeInstanceOfClass(\n    expr: ExpressionRef,\n    classInstance: Class\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var idTemp = flow.getTempLocal(Type.i32);\n    var idExpr = module.load(4, false,\n      module.binary(BinaryOp.SubI32,\n        expr,\n        module.i32(this.program.runtimeHeaderSize)\n      ),\n      NativeType.I32\n    );\n    var label = \"instanceof_\" + classInstance.name + \"|\" + flow.pushBreakLabel();\n    var conditions: ExpressionRef[] = [];\n    conditions.push(\n      module.drop( // br_if returns the value too\n        module.br(label,\n          module.binary(BinaryOp.EqI32, // classId == class.id\n            module.local_tee(idTemp.index, idExpr),\n            module.i32(classInstance.id)\n          ),\n          module.i32(1) // ? true\n        )\n      )\n    );\n    // TODO: insert conditions for all possible subclasses (i.e. cat is also animal)\n    // TODO: simplify if there are none\n    conditions.push(\n      module.i32(0) // : false\n    );\n    flow.freeTempLocal(idTemp);\n    flow.popBreakLabel();\n    return module.block(label, conditions, NativeType.I32);\n  }\n\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Flattens a series of expressions to a nop, a single statement or a block depending on statement count. */\nexport function flatten(module: Module, stmts: ExpressionRef[], type: NativeType): ExpressionRef {\n  var length = stmts.length;\n  if (length == 0) return module.nop(); // usually filtered out again\n  if (length == 1) {\n    let single = stmts[0];\n    if (getExpressionType(single) == type) return single;\n    if (getExpressionId(single) == ExpressionId.Block) {\n      let count = getBlockChildCount(single);\n      let children = new Array<ExpressionRef>(count);\n      for (let i = 0; i < count; ++i) children[i] = getBlockChild(single, i);\n      return module.block(getBlockName(single), children, type);\n    }\n  }\n  return module.block(null, stmts,\n    type == NativeType.Auto\n      ? getExpressionType(stmts[length - 1])\n      : type\n  );\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  Constraints,\n  RuntimeFeatures,\n  flatten\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Symbols of various compiler built-ins. */\nexport namespace BuiltinSymbols {\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const call_direct = \"~lib/builtins/call_direct\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n  export const void_ = \"~lib/builtins/void\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_widen_low = \"~lib/builtins/v128.widen_low\";\n  export const v128_widen_high = \"~lib/builtins/v128.widen_high\";\n  export const v128_qfma = \"~lib/builtins/v128.qfma\";\n  export const v128_qfms = \"~lib/builtins/v128.qfms\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_widen_low_i8x16_s = \"~lib/builtins/i16x8.widen_low_i8x16_s\";\n  export const i16x8_widen_low_i8x16_u = \"~lib/builtins/i16x8.widen_low_i8x16_u\";\n  export const i16x8_widen_high_i8x16_s = \"~lib/builtins/i16x8.widen_high_i8x16_s\";\n  export const i16x8_widen_high_i8x16_u = \"~lib/builtins/i16x8.widen_high_i8x16_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_widen_low_i16x8_s = \"~lib/builtins/i32x4.widen_low_i16x8_s\";\n  export const i32x4_widen_low_i16x8_u = \"~lib/builtins/i32x4.widen_low_i16x8_u\";\n  export const i32x4_widen_high_i16x8_s = \"~lib/builtins/i32x4.widen_high_i16x8_s\";\n  export const i32x4_widen_high_i16x8_u = \"~lib/builtins/i32x4.widen_high_i16x8_u\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_sat_f64x2_s = \"~lib/builtins/i64x2.trunc_sat_f64x2_s\";\n  export const i64x2_trunc_sat_f64x2_u = \"~lib/builtins/i64x2.trunc_sat_f64x2_u\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n  export const f32x4_qfma = \"~lib/builtins/f32x4.qfma\";\n  export const f32x4_qfms = \"~lib/builtins/f32x4.qfms\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_i64x2_s = \"~lib/builtins/f64x2.convert_i64x2_s\";\n  export const f64x2_convert_i64x2_u = \"~lib/builtins/f64x2.convert_i64x2_u\";\n  export const f64x2_qfma = \"~lib/builtins/f64x2.qfma\";\n  export const f64x2_qfms = \"~lib/builtins/f64x2.qfms\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_allocate = \"~lib/memory/memory.allocate\";\n  export const memory_free = \"~lib/memory/memory.free\";\n  export const memory_reset = \"~lib/memory/memory.reset\";\n\n  // std/runtime.ts\n  export const runtime_instanceof = \"~lib/runtime/runtime.instanceof\";\n  export const runtime_flags = \"~lib/runtime/runtime.flags\";\n  export const runtime_allocate = \"~lib/util/runtime/allocate\";\n  export const runtime_reallocate = \"~lib/util/runtime/reallocate\";\n  export const runtime_register = \"~lib/util/runtime/register\";\n  export const runtime_discard = \"~lib/util/runtime/discard\";\n  export const runtime_makeArray = \"~lib/util/runtime/makeArray\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // compiler generated\n  export const started = \"~lib/started\";\n  export const argc = \"~lib/argc\";\n  export const setargc = \"~lib/setargc\";\n  export const capabilities = \"~lib/capabilities\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  /* Compiler reference. */\n  compiler: Compiler,\n  /** Respective function prototype. */\n  prototype: FunctionPrototype,\n  /** Pre-resolved type arguments. */\n  typeArguments: Type[] | null,\n  /** Operand expressions. */\n  operands: Expression[],\n  /** Contextual type. */\n  contextualType: Type,\n  /** Respective call expression. */\n  reportNode: CallExpression,\n  /** Indicates that contextual type is ASM type. */\n  isAsm: bool = false\n): ExpressionRef {\n  var module = compiler.module;\n\n  switch (prototype.internalName) {\n\n    // === Static type evaluation =================================================================\n\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type == Type.bool\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          let stringInstance = compiler.program.stringInstance;\n          if (stringInstance && classReference.isAssignableTo(stringInstance)) return module.i32(1);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          return module.i32(classReference.prototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          return module.i32(classReference.isArrayLike ? 1 : 0);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.signatureReference ? 1 : 0);\n    }\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n    }\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let element = compiler.resolver.lookupExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.auto,\n        ReportMode.SWALLOW\n      );\n      return module.i32(element ? 1 : 0);\n    }\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let expr = compiler.compileExpression(operands[0], Type.auto);\n      compiler.currentType = Type.bool;\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinSymbols.isManaged: { // isManaged<T!>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.isManaged ? 1 : 0);\n    }\n    case BuiltinSymbols.isVoid: { // isVoid<T!>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n    }\n    case BuiltinSymbols.lengthof: { // lengthof<T!>() -> i32\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.i32;\n      if (!type) return module.unreachable();\n      let signatureReference = type.signatureReference;\n      if (!signatureReference) {\n        compiler.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          reportNode.range, type.toString()\n        );\n        return module.unreachable();\n      }\n      return module.i32(signatureReference.parameterTypes.length);\n    }\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let byteSize = type.byteSize;\n      if (!byteSize) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n        );\n        return module.unreachable();\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(byteSize);\n        }\n        return module.i64(byteSize, 0);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(byteSize, 0);\n        }\n        return module.i32(byteSize);\n      }\n    }\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let byteSize = type.byteSize;\n      if (!isPowerOf2(byteSize)) { // implies == 0\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"alignof\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let alignLog2 = ctz<i32>(byteSize);\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(alignLog2);\n        }\n        return module.i64(alignLog2, 0);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(alignLog2, 0);\n        }\n        return module.i32(alignLog2);\n      }\n    }\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let classType = type.classReference;\n      if (!(type.is(TypeFlags.REFERENCE) && classType !== null)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n        );\n        if (compiler.options.isWasm64) {\n          if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n            compiler.currentType = Type.u32;\n          }\n        } else {\n          if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n            compiler.currentType = Type.u64;\n          }\n        }\n        return module.unreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.unreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.unreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(offset);\n        }\n        return module.i64(offset);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(offset);\n        }\n        return module.i32(offset);\n      }\n    }\n    case BuiltinSymbols.nameof: {\n      let resultType = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      if (!resultType) {\n        compiler.currentType = compiler.program.stringInstance.type;\n        return module.unreachable();\n      }\n      let value: string;\n      if (resultType.is(TypeFlags.REFERENCE)) {\n        let classReference = resultType.classReference;\n        if (classReference) {\n          value = classReference.name;\n        } else {\n          let signatureReference = resultType.signatureReference;\n          if (signatureReference) {\n            value = \"Function\";\n          } else {\n            value = \"Anyref\";\n          }\n        }\n      } else {\n        switch (resultType.kind) {\n          case TypeKind.BOOL: { value = \"bool\"; break; }\n          case TypeKind.I8: { value = \"i8\"; break; }\n          case TypeKind.U8: { value = \"u8\"; break; }\n          case TypeKind.I16: { value = \"i16\"; break; }\n          case TypeKind.U16: { value = \"u16\"; break; }\n          case TypeKind.I32: { value = \"i32\"; break; }\n          case TypeKind.U32: { value = \"u32\"; break; }\n          case TypeKind.F32: { value = \"f32\"; break; }\n          case TypeKind.I64: { value = \"i64\"; break; }\n          case TypeKind.U64: { value = \"u64\"; break; }\n          case TypeKind.F64: { value = \"f64\"; break; }\n          case TypeKind.ISIZE: { value = \"isize\"; break; }\n          case TypeKind.USIZE: { value = \"usize\"; break; }\n          case TypeKind.V128: { value = \"v128\"; break; }\n          case TypeKind.ANYREF: { value = \"anyref\"; break; }\n          default: assert(false);\n          case TypeKind.VOID: { value = \"void\"; break; }\n        }\n      }\n      return compiler.ensureStaticString(value);\n    }\n\n    // === Math ===================================================================================\n\n    case BuiltinSymbols.clz: { // clz<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.ClzI64\n                : UnaryOp.ClzI32,\n              arg0\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"clz\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.ctz: { // ctz<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.CtzI64\n                : UnaryOp.CtzI32,\n              arg0\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"ctz\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.popcnt: { // popcnt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (compiler.currentType.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.PopcntI64\n                : UnaryOp.PopcntI32,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            return compiler.ensureSmallIntegerWrap(\n              module.binary(BinaryOp.RotlI32, arg0, arg1),\n              type\n            );\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.RotlI64\n                : BinaryOp.RotlI32,\n              arg0, arg1\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"rotl\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            return compiler.ensureSmallIntegerWrap(\n              module.binary(BinaryOp.RotrI32, arg0, arg1),\n              type\n            );\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.RotrI64\n                : BinaryOp.RotrI32,\n              arg0, arg1\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"rotr\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            let flow = compiler.currentFlow;\n\n            // possibly overflows, e.g. abs<i8>(-128) == 128\n            let tempLocal1 = flow.getTempLocal(Type.i32);\n            let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32).index;\n            let tempLocalIndex1 = tempLocal1.index;\n            flow.freeTempLocal(tempLocal1);\n\n            // (x + (x >> 31)) ^ (x >> 31)\n            return module.binary(BinaryOp.XorI32,\n              module.binary(BinaryOp.AddI32,\n                module.local_tee(\n                  tempLocalIndex2,\n                  module.binary(BinaryOp.ShrI32,\n                    module.local_tee(tempLocalIndex1, arg0),\n                    module.i32(31)\n                  )\n                ),\n                module.local_get(tempLocalIndex1, NativeType.I32)\n              ),\n              module.local_get(tempLocalIndex2, NativeType.I32)\n            );\n          }\n          case TypeKind.ISIZE: {\n            let options = compiler.options;\n            let flow = compiler.currentFlow;\n            let isWasm64 = options.isWasm64;\n\n            let tempLocal1 = flow.getTempLocal(options.usizeType);\n            let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType).index;\n            let tempLocalIndex1 = tempLocal1.index;\n            flow.freeTempLocal(tempLocal1);\n\n            return module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n              module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n                module.local_tee(\n                  tempLocalIndex2,\n                  module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                    module.local_tee(tempLocalIndex1, arg0),\n                    isWasm64 ? module.i64(63) : module.i32(31)\n                  )\n                ),\n                module.local_get(tempLocalIndex1, options.nativeSizeType)\n              ),\n              module.local_get(tempLocalIndex2, options.nativeSizeType)\n            );\n          }\n          case TypeKind.I64: {\n            let flow = compiler.currentFlow;\n\n            let tempLocal1 = flow.getTempLocal(Type.i64);\n            let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64).index;\n            let tempLocalIndex1 = tempLocal1.index;\n            flow.freeTempLocal(tempLocal1);\n\n            // (x + (x >> 63)) ^ (x >> 63)\n            return module.binary(BinaryOp.XorI64,\n              module.binary(BinaryOp.AddI64,\n                module.local_tee(\n                  tempLocalIndex2,\n                  module.binary(BinaryOp.ShrI64,\n                    module.local_tee(tempLocalIndex1, arg0),\n                    module.i64(63)\n                  )\n                ),\n                module.local_get(tempLocalIndex1, NativeType.I64)\n              ),\n              module.local_get(tempLocalIndex2, NativeType.I64)\n            );\n          }\n          case TypeKind.USIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.BOOL: return arg0;\n          case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"abs\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n        let op: BinaryOp = -1;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n          case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n          case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n          case TypeKind.ISIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.GtI64\n              : BinaryOp.GtI32;\n            break;\n          }\n          case TypeKind.USIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.GtU64\n              : BinaryOp.GtU32;\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n        }\n        if (op != -1) {\n          let flow = compiler.currentFlow;\n          let nativeType = type.toNativeType();\n          let tempLocal0 = flow.getTempLocal(type);\n          flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\n          let tempLocal1 = flow.getAndFreeTempLocal(type);\n          flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\n          flow.freeTempLocal(tempLocal0);\n          return module.select(\n            module.local_tee(tempLocal0.index, arg0),\n            module.local_tee(tempLocal1.index, arg1),\n            module.binary(op,\n              module.local_get(tempLocal0.index, nativeType),\n              module.local_get(tempLocal1.index, nativeType)\n            )\n          );\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"max\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n        let op: BinaryOp = -1;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n          case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n          case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n          case TypeKind.ISIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.LtI64\n              : BinaryOp.LtI32;\n            break;\n          }\n          case TypeKind.USIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.LtU64\n              : BinaryOp.LtU32;\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n        }\n        if (op != -1) {\n          let flow = compiler.currentFlow;\n          let nativeType = type.toNativeType();\n          let tempLocal0 = flow.getTempLocal(type);\n          flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\n          let tempLocal1 = flow.getAndFreeTempLocal(type);\n          flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\n          flow.freeTempLocal(tempLocal0);\n          return module.select(\n            module.local_tee(tempLocal0.index, arg0),\n            module.local_tee(tempLocal1.index, arg1),\n            module.binary(op,\n              module.local_get(tempLocal0.index, nativeType),\n              module.local_get(tempLocal1.index, nativeType)\n            )\n          );\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"min\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.ceil: { // ceil<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered rounded\n          case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"ceil\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.floor: { // floor<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered rounded\n          case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"floor\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          // TODO: does an integer version make sense?\n          case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"copysign\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0;\n          case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"nearest\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n            compiler.currentType = type;\n            return module.unary(UnaryOp.ReinterpretF32, arg0);\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n            compiler.currentType = type;\n            return module.unary(UnaryOp.ReinterpretF64, arg0);\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let arg0 = compiler.compileExpression(operands[0],\n              compiler.options.isWasm64\n                ? Type.f64\n                : Type.f32,\n              Constraints.CONV_IMPLICIT\n            );\n            compiler.currentType = type;\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.ReinterpretF64\n                : UnaryOp.ReinterpretF32,\n              arg0\n            );\n          }\n          case TypeKind.F32: {\n            let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n            compiler.currentType = Type.f32;\n            return module.unary(UnaryOp.ReinterpretI32, arg0);\n          }\n          case TypeKind.F64: {\n            let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n            compiler.currentType = Type.f64;\n            return module.unary(UnaryOp.ReinterpretI64, arg0);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // TODO: integer versions (that return f64 or convert)?\n          case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered truncated\n          case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"trunc\", type.toString()\n      );\n      return module.unreachable();\n    }\n\n    // === Memory access ==========================================================================\n\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        contextualType != Type.auto &&\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = outType;\n      return module.load(\n        type.byteSize,\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        outType.toNativeType(),\n        immOffset,\n        immAlign\n      );\n    }\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (operands.length == 4) {\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[3].range, \"Alignment\"\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.void;\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n    }\n\n    // === Atomics ================================================================================\n\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n        );\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      compiler.currentType = outType;\n      return module.atomic_load(\n        type.byteSize,\n        arg0,\n        outType.toNativeType(),\n        immOffset\n      );\n    }\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n        );\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n    }\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\n    case BuiltinSymbols.atomic_sub:\n    case BuiltinSymbols.atomic_and:\n    case BuiltinSymbols.atomic_or:\n    case BuiltinSymbols.atomic_xor:\n    case BuiltinSymbols.atomic_xchg: {\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        let opName: string;\n        switch (prototype.internalName) {\n          default: assert(false);\n          case BuiltinSymbols.atomic_add: { opName = \"atomic.add\"; break; }\n          case BuiltinSymbols.atomic_sub: { opName = \"atomic.sub\"; break; }\n          case BuiltinSymbols.atomic_and: { opName = \"atomic.and\"; break; }\n          case BuiltinSymbols.atomic_or: { opName = \"atomic.or\"; break; }\n          case BuiltinSymbols.atomic_xor: { opName = \"atomic.xor\"; break; }\n          case BuiltinSymbols.atomic_xchg: { opName = \"atomic.xchg\"; break; }\n        }\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, opName, type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      let op: AtomicRMWOp;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = inType;\n      return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType());\n    }\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      let arg2 = compiler.compileExpression(operands[2],\n        inType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(arg2,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[2]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      compiler.currentType = inType;\n      return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType());\n    }\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.i32;\n      switch (type.kind) {\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32) -> i32\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.i32;\n      return module.atomic_notify(arg0, arg1);\n    }\n    case BuiltinSymbols.atomic_fence: { // fence() -> void\n      compiler.currentType = Type.void;\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.atomic_fence();\n    }\n\n    // === Control flow ===========================================================================\n\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"select\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.makeIsTrueish(\n        compiler.compileExpression(operands[2], Type.bool),\n        compiler.currentType // ^\n      );\n      compiler.currentType = type;\n      return module.select(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      checkArgsRequired(operands, 0, reportNode, compiler);\n      return module.unreachable();\n    }\n\n    // === Memory =================================================================================\n\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemorySize);\n    }\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemoryGrow, null, [\n        compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n      ]);\n    }\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_copy(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_fill(arg0, arg1, arg2);\n    }\n\n    // === Helpers ================================================================================\n\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let toType = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], toType);\n      let fromType = compiler.currentType;\n      compiler.currentType = toType;\n      if (fromType.size != toType.size) {\n        compiler.error(\n          DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n          reportNode.range, fromType.toString(), toType.toString()\n        );\n        return module.unreachable();\n      }\n      return arg0;\n    }\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) {\n        if (typeArguments) {\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\n          compiler.currentType = typeArguments[0].nonNullableType;\n        }\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // if the assertion can be proven statically, omit it\n      if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n        switch (getExpressionType(arg0)) {\n          case NativeType.I32: {\n            if (getConstValueI32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.I64: {\n            if (getConstValueI64Low(arg0) != 0 || getConstValueI64High(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F32: {\n            if (getConstValueF32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F64: {\n            if (getConstValueF64(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n        }\n      }\n\n      // return ifTrueish if assertions are disabled\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) { // simplify if dropped anyway\n          compiler.currentType = Type.void;\n          return module.nop();\n        }\n        return arg0;\n      }\n\n      // otherwise call abort if the assertion is false-ish\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n      compiler.currentType = type.nonNullableType;\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        compiler.currentType = Type.void;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n          case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n        }\n      } else {\n        compiler.currentType = type.nonNullableType;\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFlow;\n            let tempLocal = flow.getAndFreeTempLocal(type);\n            flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED); // arg0 is wrapped\n            return module.if(\n              module.local_tee(tempLocal.index, arg0),\n              module.local_get(tempLocal.index, NativeType.I32),\n              abort\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64);\n            return module.if(\n              module.unary(UnaryOp.EqzI64,\n                module.local_tee(tempLocal.index, arg0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.I64)\n            );\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType);\n            return module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.local_tee(tempLocal.index, arg0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, compiler.options.nativeSizeType)\n            );\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32);\n            return module.if(\n              module.binary(BinaryOp.EqF32,\n                module.local_tee(tempLocal.index, arg0),\n                module.f32(0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.F32)\n            );\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64);\n            return module.if(\n              module.binary(BinaryOp.EqF64,\n                module.local_tee(tempLocal.index, arg0),\n                module.f64(0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.F64)\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.typeArgumentsRange\n      );\n      return abort;\n    }\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let flow = compiler.currentFlow;\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      // eliminate unnecessary tees by preferring contextualType(=void)\n      let expr = compiler.compileExpression(operands[0], contextualType);\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return expr;\n    }\n    case BuiltinSymbols.call_direct:\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\n      ) return module.unreachable();\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\n      let arg0 = compiler.compileExpression(operands[0], Type.u32);\n      let arg0Type = compiler.currentType;\n      if (!(\n        arg0Type == Type.u32 ||                                      // either plain index\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\n      )) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_a_function_index_or_function_reference,\n          operands[0].range, arg0Type.toString()\n        );\n        return module.unreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let nativeReturnType = returnType.toNativeType();\n      let parameterTypes = new Array<Type>(numOperands);\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.i32);\n        let operandType = compiler.currentType;\n        parameterTypes[i] = operandType;\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      if (prototype.internalName == BuiltinSymbols.call_direct) {\n        // if the index expression is precomputable to a constant value, emit a direct call\n        if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n          assert(getExpressionType(arg0) == NativeType.I32);\n          let index = getConstValueI32(arg0);\n          let functionTable = compiler.functionTable;\n          if (index >= 0 && index < functionTable.length) {\n            return module.call(functionTable[index], operandExprs, nativeReturnType);\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[0].range\n        );\n        return module.unreachable();\n      }\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.call_indirect(arg0, operandExprs, typeName);\n    }\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\n      ) return module.unreachable();\n      let typeArgument = typeArguments![0];\n      let classInstance = typeArgument.classReference;\n      if (!(typeArgument.is(TypeFlags.REFERENCE) && classInstance !== null)) {\n        compiler.error(\n          DiagnosticCode.This_expression_is_not_constructable,\n          reportNode.expression.range\n        );\n        return module.unreachable();\n      }\n      compiler.currentType = classInstance.type;\n      return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, reportNode);\n    }\n\n    // === User-defined diagnostics ===============================================================\n\n    case BuiltinSymbols.ERROR: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.WARNING: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n    case BuiltinSymbols.INFO: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n\n    // === Portable type conversions ==============================================================\n\n    case BuiltinSymbols.i8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.isize: {\n      let isizeType = compiler.options.isizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = isizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], isizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.usize: {\n      let usizeType = compiler.options.usizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], usizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.bool: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_EXPLICIT);\n    }\n\n    // === SIMD ===================================================================================\n\n    case BuiltinSymbols.v128: // alias for now\n    case BuiltinSymbols.i8x16: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 16, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 16; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI8(getConstValueI32(expr), bytes, i);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i16x8: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 8, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 8; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI16(getConstValueI32(expr), bytes, i << 1);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i32x4: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI32(getConstValueI32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i64x2: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I64);\n          let off = i << 3;\n          writeI32(getConstValueI64Low(expr), bytes, off);\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f32x4: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F32);\n          writeF32(getConstValueF32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f64x2: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F64);\n          writeF64(getConstValueF64(expr), bytes, i << 3);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.SplatI64x2\n                : UnaryOp.SplatI32x4,\n              arg0\n            );\n          }\n          case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      compiler.currentType = type;\n      let idx = 0;\n      if (getExpressionId(arg1) == ExpressionId.Const) {\n        assert(getExpressionType(arg1) == NativeType.I32);\n        idx = getConstValueI32(arg1);\n      } else {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n      }\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          idx = 0;\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, idx);\n          case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, idx);\n          case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, idx);\n          case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, idx);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, idx);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, idx);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_extract(\n              compiler.options.isWasm64\n                ? SIMDExtractOp.ExtractLaneI64x2\n                : SIMDExtractOp.ExtractLaneI32x4,\n              arg0, idx\n            );\n          }\n          case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, idx);\n          case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, idx);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      let idx = 0;\n      if (getExpressionId(arg1) == ExpressionId.Const) {\n        assert(getExpressionType(arg1) == NativeType.I32);\n        idx = getConstValueI32(arg1);\n      } else {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n      }\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          idx = 0;\n        }\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, idx, arg2);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, idx, arg2);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, idx, arg2);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, idx, arg2);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_replace(\n              compiler.options.isWasm64\n                ? SIMDReplaceOp.ReplaceLaneI64x2\n                : SIMDReplaceOp.ReplaceLaneI32x4,\n              arg0, idx, arg2\n            );\n          }\n          case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, idx, arg2);\n          case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, idx, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let laneWidth = type.byteSize;\n        let laneCount = 16 / laneWidth;\n        assert(isInteger(laneCount) && isPowerOf2(laneCount));\n        if (\n          checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\n        ) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n        let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            let mask = new Uint8Array(16);\n            let maxIdx = (laneCount << 1) - 1;\n            for (let i = 0; i < laneCount; ++i) {\n              let operand = operands[2 + i];\n              let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n              if (getExpressionId(argN) != ExpressionId.Const) {\n                compiler.error(\n                  DiagnosticCode.Expression_must_be_a_compile_time_constant,\n                  operand.range\n                );\n                compiler.currentType = Type.v128;\n                return module.unreachable();\n              }\n              assert(getExpressionType(argN) == NativeType.I32);\n              let idx = getConstValueI32(argN);\n              if (idx < 0 || idx > maxIdx) {\n                compiler.error(\n                  DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n                  operand.range, \"Lane index\", \"0\", maxIdx.toString()\n                );\n                compiler.currentType = Type.v128;\n                return module.unreachable();\n              }\n              switch (laneWidth) {\n                case 1: {\n                  writeI8(idx, mask, i);\n                  break;\n                }\n                case 2: {\n                  let off8 = i << 1;\n                  let idx8 = idx << 1;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  break;\n                }\n                case 4: {\n                  let off8 = i << 2;\n                  let idx8 = idx << 2;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  writeI8(idx8 + 2, mask, off8 + 2);\n                  writeI8(idx8 + 3, mask, off8 + 3);\n                  break;\n                }\n                case 8: {\n                  let off8 = i << 3;\n                  let idx8 = idx << 3;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  writeI8(idx8 + 2, mask, off8 + 2);\n                  writeI8(idx8 + 3, mask, off8 + 3);\n                  writeI8(idx8 + 4, mask, off8 + 4);\n                  writeI8(idx8 + 5, mask, off8 + 5);\n                  writeI8(idx8 + 6, mask, off8 + 6);\n                  writeI8(idx8 + 7, mask, off8 + 7);\n                  break;\n                }\n                default: assert(false);\n              }\n            }\n            compiler.currentType = Type.v128;\n            return module.simd_shuffle(arg0, arg1, mask);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n      );\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_add: { // add<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.AddI64x2\n                : BinaryOp.AddI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sub: { // sub<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64x2\n                : BinaryOp.SubI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_mul: { // mul<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.MulI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_div: { // div<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_add_saturate: { // add_saturate<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.add_saturate\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sub_saturate: { // sub_saturate<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sub_saturate\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_min: { // min<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_max: { // max<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_eq: { // eq<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n            case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n            case TypeKind.I16:\n            case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n            case TypeKind.I32:\n            case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n              }\n              break;\n            }\n            case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n            case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_ne: { // ne<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n            case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n            case TypeKind.I16:\n            case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n            case TypeKind.I32:\n            case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n              }\n              break;\n            }\n            case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n            case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_lt: { // lt<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_le: { // le<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_gt: { // gt<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_ge: { // ge<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_narrow: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_neg: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.NegI64x2\n                : UnaryOp.NegI32x4,\n              arg0\n            );\n          }\n          case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_abs: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sqrt: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_convert: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n          case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n          case TypeKind.I64: return module.unary(UnaryOp.ConvertI64x2ToF64x2, arg0);\n          case TypeKind.U64: return module.unary(UnaryOp.ConvertU64x2ToF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_trunc_sat: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n          case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n          case TypeKind.I64: return module.unary(UnaryOp.TruncSatF64x2ToI64x2, arg0);\n          case TypeKind.U64: return module.unary(UnaryOp.TruncSatF64x2ToU64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_widen_low: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.unary(UnaryOp.WidenLowI8x16ToI16x8, arg0);\n          case TypeKind.U8: return module.unary(UnaryOp.WidenLowU8x16ToU16x8, arg0);\n          case TypeKind.I16: return module.unary(UnaryOp.WidenLowI16x8ToI32x4, arg0);\n          case TypeKind.U16: return module.unary(UnaryOp.WidenLowU16x8ToU32x4, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.widen_low\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_widen_high: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.unary(UnaryOp.WidenHighI8x16ToI16x8, arg0);\n          case TypeKind.U8: return module.unary(UnaryOp.WidenHighU8x16ToU16x8, arg0);\n          case TypeKind.I16: return module.unary(UnaryOp.WidenHighI16x8ToI32x4, arg0);\n          case TypeKind.U16: return module.unary(UnaryOp.WidenHighU16x8ToU32x4, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.widen_high\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shl: { // shl<T!>(a: v128, b: i32) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShlI64x2\n                : SIMDShiftOp.ShlI32x4,\n              arg0, arg1\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shr: { // shr<T!>(a: v128, b: i32) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n          case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n          case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n          case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n          case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n          case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n          case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n          case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n          case TypeKind.ISIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShrI64x2\n                : SIMDShiftOp.ShrI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.USIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShrU64x2\n                : SIMDShiftOp.ShrU32x4,\n              arg0, arg1\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_and: { // and(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.AndV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_or: { // or(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.OrV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_xor: { // xor(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.XorV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_not: { // not(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.unary(UnaryOp.NotV128, arg0);\n    }\n    // case BuiltinSymbols.v128_andnot: { // andnot(a: v128, b: v128) -> v128\n    //   if (\n    //     checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n    //     checkTypeAbsent(typeArguments, reportNode, prototype) |\n    //     checkArgsRequired(operands, 2, reportNode, compiler)\n    //   ) {\n    //     compiler.currentType = Type.v128;\n    //     return module.unreachable();\n    //   }\n    //   let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n    //   let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n    //   return module.binary(BinaryOp.AndnotV128, arg0);\n    // }\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.simd_ternary(SIMDTernaryOp.Bitselect, arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.v128_any_true: { // any_true<T!>(a: v128) -> bool\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.AnyTrueI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.AnyTrueI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.AnyTrueI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.AnyTrueI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.AnyTrueI64x2\n                : UnaryOp.AnyTrueI32x4,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.any_true\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_all_true: { // all_true<T!>(a: v128) -> bool\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.AllTrueI64x2\n                : UnaryOp.AllTrueI32x4,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_qfma: { // qfma(a: v128, b: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMAF32x4, arg0, arg1, arg2);\n          case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMAF64x2, arg0, arg1, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.qfma\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_qfms: { // qfms(a: v128, b: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMSF32x4, arg0, arg1, arg2);\n          case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMSF64x2, arg0, arg1, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.qfms\", type.toString()\n      );\n      return module.unreachable();\n    }\n\n    // === Internal runtime =======================================================================\n\n    case BuiltinSymbols.idof: {\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.u32;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          return module.i32(signatureReference.id);\n        }\n        let classReference = type.classReference;\n        if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n          return module.i32(classReference.id);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"idof\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.visit_globals: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_globals, [ arg0 ], NativeType.None);\n    }\n    case BuiltinSymbols.visit_members: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_members, [ arg0, arg1 ], NativeType.None);\n    }\n  }\n\n  // try to defer inline asm to a concrete built-in\n  {\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\n    if (expr) {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      return expr;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Not_implemented,\n    reportNode.expression.range\n  );\n  return module.unreachable();\n}\n\n/** Tries to defer an inline-assembler-like call to a built-in function. */\nfunction tryDeferASM(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\n\n    case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\n    case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\n    case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_narrow_i16x8_s: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_narrow_i16x8_u: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.u16, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\n    case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\n    case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_narrow_i32x4_s: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_narrow_i32x4_u: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_low_i8x16_s: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_low_i8x16_u: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_high_i8x16_s: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_high_i8x16_u: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.u8, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_trunc_sat_f32x4_s: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_trunc_sat_f32x4_u: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_low_i16x8_s: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_low_i16x8_u: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_high_i16x8_s: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_high_i16x8_u: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.u16, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64x2_trunc_sat_f64x2_s: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_trunc_sat_f64x2_u: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.u64, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_convert_i32x4_s: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_convert_i32x4_u: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_qfma: return deferASM(BuiltinSymbols.v128_qfma, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_qfms: return deferASM(BuiltinSymbols.v128_qfms, compiler, Type.f32, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_convert_i64x2_s: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_convert_i64x2_u: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_qfma: return deferASM(BuiltinSymbols.v128_qfma, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_qfms: return deferASM(BuiltinSymbols.v128_qfms, compiler, Type.f64, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(\n    compiler,\n    <FunctionPrototype>prototype,\n    [ typeArgument ],\n    operands,\n    contextualType,\n    reportNode,\n    /* isAsm */ true\n  );\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringInstance = compiler.program.stringInstance;\n  if (!stringInstance) return module.unreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.unreachable();\n\n  var messageArg: ExpressionRef;\n  if (message !== null) {\n    // The message argument works much like an arm of an IF that does not become executed if the\n    // assertion succeeds respectively is only being computed if the program actually crashes.\n    // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n    // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n    messageArg = compiler.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n  } else {\n    messageArg = stringInstance.type.toNativeZero(module);\n  }\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.block(null, [\n    module.call(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.i32(reportNode.range.line),\n        module.i32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.unreachable()\n  ]);\n}\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var typeRef = compiler.ensureFunctionType([ Type.u32 ], Type.void); // cookie\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  compiler.compileFunction(visitInstance);\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classType = globalType.classReference;\n    if (\n      globalType.is(TypeFlags.REFERENCE) &&\n      classType !== null &&\n      !classType.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinSymbols.visit_globals, typeRef, [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var ftype = compiler.ensureFunctionType([ usizeType, Type.i32 ], Type.void); // ref, cookie\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(instance.type.isManaged);\n    assert(id == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          visitSig.thisType == instance.type\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        for (let member of members.values()) {\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      flatten(module, code, NativeType.None)\n    );\n    relooper.addBranchForSwitch(outer, block, [ id ]);\n    blocks.push(block);\n  }\n  for (let [id, instance] of managedClasses) {\n    let base = instance.base;\n    if (base) {\n      relooper.addBranch(blocks[id], blocks[base.id]);\n    }\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinSymbols.visit_members, ftype, [ nativeSizeType ], relooper.renderAndDispose(outer, 2));\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(id == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: CallExpression\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(\n  feature: Feature,\n  reportNode: Node,\n  compiler: Compiler\n): i32 {\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  prototype: FunctionPrototype\n): i32 {\n  if (typeArguments) {\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(\n  operands: Expression[],\n  expected: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  if (operands.length != expected) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(\n  operands: Expression[],\n  expectedMinimum: i32,\n  expectedMaximum: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getLocalGetIndex,\n  getLocalSetIndex,\n  getLocalSetValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.LocalGet: {\n        this.push(\"$\");\n        this.push(getLocalGetIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.LocalSet: {\n        this.push(\"$\");\n        this.push(getLocalSetIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getLocalSetValue(expr));\n        return;\n      }\n      case ExpressionId.GlobalGet:\n      case ExpressionId.GlobalSet: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.MemorySize: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.MemoryGrow: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicNotify:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.V128: return \"v128\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\n import {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n } from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var members = file.exports;\n    if (members) {\n      for (let [name, member] of members) this.visitElement(name, member);\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (seen.has(element)) {\n      this.visitAlias(name, element, <string>seen.get(element));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(name, getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(name, setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n  private unknown: Set<string> = new Set();\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(name, element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"export class \");\n    }\n    sb.push(name);\n    // var base = element.base;\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n    //   sb.push(\" extends \");\n    //   sb.push(base.name); // TODO: fqn\n    // }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\": typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source;\n  /** Dependency map **/\n  dependees: Map<string, Source> = new Map();\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file. */\n    text: string,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with .ts endings\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER\n    );\n    var program = this.program;\n    program.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Obtains the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var source = this.dependees.get(dependent);\n    if (source) return source.internalPath;\n    return null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n      let current = first;\n      let parameters: NamedTypeNode[] | null = null;\n      let nullable = false;\n\n      // Identifier ('.' Identifier)+\n      while (tn.skip(Token.DOT)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n          current.next = next;\n          current = next;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range(tn.pos)\n          );\n          return null;\n        }\n      }\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [<NamedTypeNode>parameter];\n          else parameters.push(<NamedTypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(first, parameters || [], nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = new ParameterNode();\n              param.parameterKind = kind;\n              param.name = name;\n              param.type = Node.createOmittedType(tn.range().atEnd);\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = new ParameterNode();\n          param.parameterKind = firstParamKind;\n          param.name = firstParamNameNoType;\n          param.type = Node.createOmittedType(firstParamNameNoType.range.atEnd);\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createFunctionType(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      if (!typeParameters) typeParameters = [ typeParameter ];\n      else typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!(typeParameters && typeParameters.length)) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>t;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>t;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [<NamedTypeNode>type];\n          else implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = [<DecoratorNode>decorator];\n        else decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators && decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.dependees.set(internalPath, this.currentSource);\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, this.currentSource);\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented,\n          tn.range()\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, this.currentSource);\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.This_expression_is_not_constructable,\n            operand.range\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return identifier;\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments: TypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\n\n    var startPos = expr.range.start;\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (tn.skipIdentifier()) {\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            } else {\n              next = this.parseExpression(tn,\n                isRightAssociative(token)\n                  ? nextPrecedence\n                  : nextPrecedence + 1\n              );\n              if (!next) return null;\n            }\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            next = this.parseExpression(tn,\n              isRightAssociative(token)\n                ? nextPrecedence\n                : nextPrecedence + 1\n            );\n            if (!next) return null;\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression\n  ): Expression {\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: TypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) break;\n        expr = Node.createCallExpression( // is again callable\n          expr,\n          typeArguments,\n          args,\n          tn.range(expr.range.start, tn.pos)\n        );\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\n// console.log(globalScope[\"JSMath\"].signbit, globalScope[\"JSMath\"].signcos);\n// process.exit();\n\n// globalScope[\"JSMath\"].signbit =\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    },\n    writable: true\n  },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    },\n    writable: true\n  }\n});\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\n      HEAP.fill(value, dest, dest + size);\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    },\n    reset: globalScope[\"__memory_reset\"] || function reset() {\n      HEAP = new Uint8Array(0);\n      HEAP_OFFSET = 0;\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[(ptr | 0) + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[(ptr | 0) + (offset | 0)];\n};\n\nglobalScope[\"unmanaged\"] = function() {};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8 // see: https://github.com/WebAssembly/reference-types\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n  }\n  assert(false);\n  return \"\";\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { Decompiler } from \"./decompiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Parser } from \"./parser\";\nimport { Program } from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(\n  /** Source text of the file. */\n  text: string,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false,\n  /** Parser reference. */\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(parser: Parser, file: string): string | null {\n  return parser.getDependee(file);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Builds a JSON file of a program's runtime type information. */\nexport function buildRTTI(program: Program): string {\n  var sb = new Array<string>();\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \\\"\");\n    sb.push(cls.internalName);\n    sb.push(\"\\\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    let base = cls.base;\n    sb.push(\"    \");\n    sb.push(base ? base.id.toString() : \"0\");\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \");\n    sb.push(cls.rttiFlags.toString());\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ]\\n}\\n\");\n  return sb.join(\"\");\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util/index\";\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let cloned = new Array<V>(original.length);\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n"],"sourceRoot":""}