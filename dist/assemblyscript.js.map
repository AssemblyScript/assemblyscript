{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__15__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","FILESPACE_PREFIX","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","Array","emitDiagnostic","info","warning","error","__export","common_1","tokenizer_1","Token","Range","NodeKind","nodeIsConstantValue","kind","LITERAL","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","CALL","ELEMENTACCESS","PROPERTYACCESS","nodeIsGenericCallable","Node","parent","flags","NONE","is","flag","isAny","set","createType","typeArguments","isNullable","type","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","extendsType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createSignature","parameters","returnType","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","decoratorNameToKind","createComment","node","CommentNode","commentKind","expr","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","k","setParentIfNotNull","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","declaration","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","values","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","identifier","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","_super","__extends","_this","apply","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","DecoratorKind","SIGNATURE","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","OPERATOR","SEALED","UNMANAGED","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","ASSERTION","BINARY","CLASS","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","OBJECT","PARENTHESIZED","REGEXP","TERNARY","STRING","SUPER","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","isLastStatement","BLOCK","FUNCTIONDECLARATION","METHODDECLARATION","SourceKind","Statement","Source","SOURCE","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","VARIABLE","NAMESPACEDECLARATION","EXPORT","isTopLevelExport","CLASSDECLARATION","STATIC","needsExplicitExport","member","VariableLikeDeclarationStatement","BREAK","CONTINUE","DO","EMPTY","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VOID","WHILE","asGlobal","endsWith","findDecorator","decorator","OperatorKind","diagnostics_1","types_1","ast_1","module_1","resolver_1","QueuedImport","QueuedExport","TypeAlias","operatorKindFromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","noTypesYet","Map","Program","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayPrototype","stringInstance","mainFunction","abortInstance","memoryAllocateInstance","hasGC","gcAllocateInstance","gcLinkInstance","gcMarkInstance","gcHeaderSize","resolver","Resolver","sources","getSource","lookupSourceByPath","normalizedPathWithoutExtension","tmp","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","setConstantInteger","i64_new","isWasm64","noTreeShaking","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","hasFeature","queuedImports","queuedExports","queuedExtends","queuedImplements","filespace","Filespace","internalName","currentFilespace","j","initializeClass","initializeEnum","initializeExports","initializeFunction","initializeImports","initializeInterface","initializeNamespace","initializeTypeAlias","initializeVariables","queuedImport","tryLocateImport","localName","splice","externalNameAlt","Module_0_has_no_exported_member_1","queuedExports_1","__values","queuedExports_1_1","next","done","_c","__read","exportName","queuedExport","currentExport","isReExport","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_d","Error","has","instance","resolveClass","Duplicate_identifier_0","programLevelInternalName","FUNCTION_PROTOTYPE","startFunction","GENERIC","AMBIENT","MAIN","resolveFunction","parameterTypes","signatureReference","byteSize","globalName","Global","withConstantIntegerValue","setConstantFloat","withConstantFloatValue","queuedNamedExports","checkDecorators","acceptedFlags","presentFlags","decoratorKindToFlag","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","checkGlobal","parentNode","hasDecorator","namespace","fileLevelInternalName","simpleName","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","existingExport","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeAccessor","initializeMethod","classPrototype","isInterface","INTERFACE_PROTOTYPE","staticField","READONLY","ABSTRACT","instanceMembers","instanceField","FieldPrototype","decoratorFlags","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","numArgs","firstArg","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","initializeEnumValue","enm","EnumValue","initializeExport","externalIdentifier","prefix","FILESPACE","referencedName","referencedElement","seen","Set","add","initializeImport","indexPart","InterfacePrototype","parentNamespace","Namespace","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","existingExport_1","global_1","CONST","Element","program","NAMESPACE","ENUM","ENUMVALUE","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","Parameter","Local","index","LOCAL","scopedGlobal","instances","classTypeArguments","Function","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","localIndex","INSTANCE","local","thisType","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","_b","inheritedName","inheritedType","parameterType","parameterName","getParameterName","flow","Flow","addLocal","getTempLocal","wrapped","temps","toNativeType","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","FunctionTarget","FUNCTION_TARGET","toSignatureString","asFunction","FIELD_PROTOTYPE","Field","FIELD","memoryOffset","Class","base","currentMemoryOffset","constructorInstance","gcHookIndex","asClass","inheritedTypeArguments_2","inheritedTypeArguments_2_1","baseType","isAssignableTo","target","current","lookupOverload","unchecked","uncheckedOverload","overload","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","wrappedLocals","wrappedLocalsExt","unset","fork","branch","slice","free","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","getScopedLocal","isLocalWrapped","map","ext","i64_ne","i64_and","i64_shl","i64_one","i64_zero","off","i64_or","i64_not","inherit","other","inheritConditional","inheritMutual","leftExt","rightExt","thisExt","minLength","min","canOverflow","getExpressionId","ExpressionId","GetLocal","getGetLocalIndex","canConversionOverflow","SetLocal","isTeeLocal","getSetLocalValue","GetGlobal","Binary","getBinaryOp","BinaryOp","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","getBinaryLeft","Const","getConstValueI32","getBinaryRight","AndI32","computeSmallIntegerMask","ShlI32","shift","size","ShrI32","ShrU32","DivU32","RemI32","RemU32","Unary","getUnaryOp","UnaryOp","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","getExpressionType","getConstValueI64Low","getConstValueF32","getConstValueF64","MIN_VALUE","MAX_VALUE","Load","fromType","getLoadBytes","isLoadSigned","Block","getBlockName","getBlockChildCount","last","getBlockChild","If","getIfTrue","getIfFalse","Select","getSelectThen","getSelectElse","Call","getCallTarget","Unreachable","fromSize","toSize","compiler_1","NativeType","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","cachedTemporaryName","hasTemporaryFunction","cachedPrecomputeName","cachedPrecomputeNames","_BinaryenModuleCreate","cachedByValue","memory","allocate","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","children","_BinaryenBlock","createBreak","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenGetLocalGetIndex","_BinaryenGetGlobalGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","getConstValueI64High","getSetLocalIndex","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","_BinaryenSetLocalIsTee","getUnaryValue","getLoadOffset","getLoadPtr","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","ptrs","str","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","needsExplicitUnreachable","Return","Break","numChildren","g","eval","e","window","program_1","TypeKind","TypeFlags","cachedNullableType","ceil","classReference","nonNullableType","isize64","isize32","usize64","usize32","isManaged","computeSmallIntegerShift","targetType","classType","asNullable","signednessIsRelevant","currentClass","targetClass","targetFunction","commonCompatible","signednessIsImportant","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","Signature","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DECLARE","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","skipIdentifierName","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","sepEnd","i64_add","i64_mul","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","ReportMode","currentThisExpression","currentElementExpression","resolveType","reportMode","REPORT","resolveSignature","typeNode","Type_0_is_not_generic","resolveClassInclTypeArguments","typeArgumentNodes","numTypeArguments","paramType","instanceKey","placeholderType","parameterTypeNodes","parameterTypeNode","REST","returnTypeNode","resolveTypeArguments","alternativeReportNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","atEnd","context","resolvePropertyAccess","propertyAccess","contextualFunction","targetExpression","resolveExpression","propertyName","Property_0_does_not_exist_on_type_1","indexedGet","Index_signature_is_missing_in_type_0","resolveElementAccess","elementAccess","explicitLocal","_this_cannot_be_referenced_in_current_location","_super_can_only_be_referenced_in_a_derived_class","resolveFunctionInclTypeArguments","functionTarget","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","isInstance","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","classInstance","signatureParameters","signatureParameterCount","parameterDeclaration","resolveFunctionPartially","partialKey","partialPrototype","reportNode","resolvedTypeArguments","_e","expectedTypeArguments","actualTypeArguments","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","_f","_g","inheritedMember","constructorPartial","_h","_j","fieldDeclaration","fieldType","baseField","Type_expected","fieldInstance","instanceProperty","partialGetterPrototype","partialSetterPrototype","_k","_l","_m","overloadPrototype","operatorInstance","operatorPartial","typeParameterNodes","builtins_1","Options","WASM32","importMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentOuterFunction","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","needsIterateRoots","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","compileSource","funcRef","ensureFunctionType","i64_align","numPages","i64_shr_u","functionTableExported","moduleExport","makeModuleExport","compileIterateRoots","subPrefix","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","setter","nativeType","nativeSizeType","getterName","setterName","fullName","ctor","compileSourceByPath","File_0_not_found","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","initExpr","resolvedType","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileExpression","Compiling_constant_with_non_constant_initializer_as_mutable","compileEnum","previousValue","previousValueIsMut","initInStart","valueDeclaration","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","compileFunctionUsingTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","stmts","compileStatements","unshift","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","compileInterfaceDeclaration","compileNamespace","compileClassUsingTypeArguments","compileClass","staticMembers","ctorInstance","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","numStatements","Nop","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","terminated","block","repeatLabel","alwaysTrue","condPre","incrExpr","bodyStatement","bodyExpr","usesContinue","breakBlock","repeatBlock","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","numCases","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","compileInlineConstant","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","valueWithCorrectType","tee","thisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","includes","compileCallInlineUnchecked","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","previousFlow","thisLocal","paramExpr","argumentLocal","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","Optional_parameter_must_have_an_initializer","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","retainConstantType","scopedThis","superType","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","stringValue","stringSegment","stringOffset","needsGCHeader","stringLength","stringSize","stringBuffer","stringType","ensureStaticArray","elementType","byteLength","usizeTypeSize","arrayHeaderSize","arrayTotalSize","bufferTotalSize","clz","needsGC","writeI64","writeI32","writeI8","writeI16","writeF32","writeF64","arrayInstance","address","isConst","nativeElementType","isStatic","arrayType","nativeArrayType","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","compileAllocate","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","currentClassInstance","makeAllocate","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","nativeOne","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","field","nativeFieldType","parentElement","binaryen","emitText","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","UnreachableError","captureStackTrace","stack","AssertionError","ASC_TARGET","defineProperties","writable","Math","fround","MIN_POSITIVE_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","EPSILON","clz32","abs","floor","trunc","round","sqrt","x","y","sign","isTrueish","radix","parseInt","undefined","fromCodePoint","Number","isInteger","isArray","HEAP","HEAP_OFFSET","oldHeap","copy","dest","src","copyWithin","F64","Float64Array","F32","Float32Array","I32","Int32Array","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","mod","i64_rem_u","and","or","i64_xor","xor","shl","i64_shr","shr","shru","not","i64_eq","eq","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","gte","lte","minSafeF64","maxSafeF64","toNumber","i64_to_string","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","pow","fromString","RangeError","indexOf","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","compiler","evaluateConstantType","SWALLOW","expr_1","ClzI64","CtzI64","PopcntI64","RotlI32","RotlI64","RotrI32","RotrI64","AbsF32","AbsF64","tempLocal0","tempLocal1","MaxF32","MaxF64","MinF32","MinF64","CeilF32","CeilF64","FloorF32","FloorF64","CopysignF32","CopysignF64","NearestF32","NearestF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","SqrtF32","SqrtF64","TruncF32","TruncF64","evaluateConstantOffset","alignLog2","fieldName","Type_0_has_no_property_1","CurrentMemory","GrowMemory","abort","operandExprs","signatureParts","nativeParamTypes","operandType","User_defined_0","expr_2","deferASM","deferASMCall","typeArgument","valueType","messageArg","filenameArg","ensureGCHook","existingIndex","gcPrototype","gcInstance","VIRTUAL","nativeSizeSize","baseInstance","allocateInstance","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","isUnicodeIdentifierStart","unicodeIdentifierPart","isUnicodeIdentifierPart","mid","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","indent","readI32","readI64","readI8","readI16","readF32","readF64","valueI64","decompiler_1","definitions_1","formatDiagnostic","parser_1","parseFile","parser","Parser","nextFile","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","decompiler","Decompiler","decompile","buildIDL","IDLBuilder","build","buildTSD","TSDBuilder","functionId","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Switch","CallImport","CallIndirect","SetGlobal","Store","Drop","Host","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","indentLevel","typeToString","members_1","members_1_1","visitInterface","numMembers","members_2","members_2_1","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","typeParameter","parseTypeParameter","Type_parameter_list_cannot_be_empty","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","QUOTED","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","skipBlock","depth","Precedence"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,EAAAG,QAAA,aACA,mBAAAC,eAAAC,IACAD,QAAA,YAAAJ,GACA,iBAAAC,QACAA,QAAA,eAAAD,EAAAG,QAAA,aAEAJ,EAAA,eAAAC,EAAAD,EAAA,UARA,CASC,oBAAAO,UAAAC,KAAA,SAAAC,GACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAV,QAGA,IAAAC,EAAAO,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAZ,YAUA,OANAa,EAAAH,GAAAI,KAAAb,EAAAD,QAAAC,IAAAD,QAAAS,GAGAR,EAAAW,GAAA,EAGAX,EAAAD,QA0DA,OArDAS,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAjB,EAAAkB,EAAAC,GACAV,EAAAW,EAAApB,EAAAkB,IACAG,OAAAC,eAAAtB,EAAAkB,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAzB,GACA,oBAAA0B,eAAAC,aACAN,OAAAC,eAAAtB,EAAA0B,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAtB,EAAA,cAAiD4B,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAnC,GACA,IAAAkB,EAAAlB,KAAA8B,WACA,WAA2B,OAAA9B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAQ,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,oFC5EA,SAAYC,GAEVA,IAAA,eAKAA,IAAA,mBAEAA,IAAA,mBAEAA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,cAEAA,IAAA,oBAEAA,IAAA,wBAEAA,IAAA,yBAEAA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,4BAEAA,IAAA,gBAEAA,IAAA,gBAKAA,IAAA,wBAEAA,IAAA,yBAEAA,IAAA,yCAEAA,IAAA,2BAEAA,IAAA,kCAEAA,IAAA,sBAEAA,IAAA,sCAEAA,IAAA,uCAKAA,IAAA,6BAEAA,IAAA,2BAEAA,IAAA,yBAEAA,IAAA,kCAEAA,IAAA,4BAEAA,IAAA,sBAIAA,IAAA,2BArEF,CAAY3C,EAAA2C,cAAA3C,EAAA2C,iBAyEC3C,EAAA4C,eAAiB,IAEjB5C,EAAA6C,aAAe,KAEf7C,EAAA8C,cAAgB,OAEhB9C,EAAA+C,cAAgB,OAEhB/C,EAAAgD,mBAAqB,IAErBhD,EAAAiD,iBAAmB,IAEnBjD,EAAAkD,gBAAkB,IAElBlD,EAAAmD,cAAgB,OAEhBnD,EAAAoD,eAAiBpD,EAAAmD,cAAgBnD,EAAA4C,eAEjC5C,EAAAqD,iBAAmB,uFCvFhC,IAeYC,EAfZC,EAAA9C,EAAA,IAKA+C,EAAA/C,EAAA,GAIAgD,EAAAhD,EAAA,IAgBA,SAAgBiD,EAA2BC,GACzC,OAAQA,GACN,KAAKL,EAAmBM,KAAM,MAAO,OACrC,KAAKN,EAAmBO,QAAS,MAAO,UACxC,KAAKP,EAAmBQ,MAAO,MAAO,QACtC,QAEE,OADAC,QAAO,GACA,IAeb,SAAgBC,EAA0BL,GACxC,OAAQA,GACN,KAAKL,EAAmBM,KAAM,OAAO5D,EAAAiE,WACrC,KAAKX,EAAmBO,QAAS,OAAO7D,EAAAkE,aACxC,KAAKZ,EAAmBQ,MAAO,OAAO9D,EAAAmE,UACtC,QAEE,OADAJ,QAAO,GACA,IA5CX/D,EAAAoE,eAAAX,EAAAW,eACApE,EAAAqE,uBAAAZ,EAAAY,uBAIF,SAAYf,GAEVA,IAAA,eAEAA,IAAA,qBAEAA,IAAA,iBANF,CAAYA,EAAAtD,EAAAsD,qBAAAtD,EAAAsD,wBAUZtD,EAAA0D,6BAaa1D,EAAAiE,WAAqB,QAErBjE,EAAAkE,aAAuB,QAEvBlE,EAAAmE,UAAoB,QAEpBnE,EAAAsE,YAAsB,OAGnCtE,EAAAgE,4BAaA,IAAAO,EAAA,WAYE,SAAAA,EAAoBC,EAAWb,EAA8Bc,GAH7DnE,KAAAoE,MAAsB,KAIpBpE,KAAKkE,KAAOA,EACZlE,KAAKqD,SAAWA,EAChBrD,KAAKmE,QAAUA,EA4EnB,OAxESF,EAAAtC,OAAP,SACEuC,EACAb,EACAgB,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEA,IAAIJ,EAAUlB,EAAAc,uBAAuBG,GAIrC,OAHY,MAARG,IAAcF,EAAUA,EAAQK,QAAQ,MAAOH,IACvC,MAARC,IAAcH,EAAUA,EAAQK,QAAQ,MAAOF,IACvC,MAARC,IAAcJ,EAAUA,EAAQK,QAAQ,MAAOD,IAC5C,IAAIN,EAAkBC,EAAMb,EAAUc,IAIxCF,EAAAQ,WAAP,SACEP,EACAG,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEOL,EAAkBtC,OAAOuC,EAAMlB,EAAmBM,KAAMe,EAAMC,IAIhEL,EAAAS,cAAP,SACER,EACAG,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEOL,EAAkBtC,OAAOuC,EAAMlB,EAAmBO,QAASc,EAAMC,IAInEL,EAAAU,YAAP,SACET,EACAG,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEOL,EAAkBtC,OAAOuC,EAAMlB,EAAmBQ,MAAOa,EAAMC,IAIxEL,EAAAhC,UAAA2C,UAAA,SAAUR,GAER,OADApE,KAAKoE,MAAQA,EACNpE,MAITiE,EAAAhC,UAAA4C,SAAA,WACE,OAAI7E,KAAKoE,MAELhB,EAA2BpD,KAAKqD,UAChC,IACArD,KAAKkE,KAAKW,SAAS,IACnB,MACA7E,KAAKmE,QACL,QACAnE,KAAKoE,MAAMU,OAAOC,eAClB,IACA/E,KAAKoE,MAAMY,KAAKH,SAAS,IACzB,IACA7E,KAAKoE,MAAMa,OAAOJ,SAAS,IAI7BzB,EAA2BpD,KAAKqD,UAChC,IACArD,KAAKkE,KAAKW,SAAS,IACnB,KACA7E,KAAKmE,SAGXF,EA3FA,GAqIA,SAAgBiB,EAAwBd,EAAce,QAAA,IAAAA,OAAA,GAKpD,IAJA,IAAIC,EAAOhB,EAAMU,OAAOM,KACpBC,EAAMD,EAAKE,OACXC,EAAQnB,EAAMmB,MACdC,EAAMpB,EAAMoB,IACTD,EAAQ,IAAMrC,EAAAuC,YAAYL,EAAKM,WAAWH,EAAQ,KAAKA,IAC9D,KAAOC,EAAMH,IAAQnC,EAAAuC,YAAYL,EAAKM,WAAWF,KAAOA,IAMxD,IALA,IAAIG,GACF,MACAP,EAAKQ,UAAUL,EAAOC,GACtB,OAEKD,EAAQnB,EAAMmB,OACnBI,EAAGE,KAAK,KACRN,IAGF,GADIJ,GAAWQ,EAAGE,KAAKnG,EAAAmE,WACnBO,EAAMmB,OAASnB,EAAMoB,IACvBG,EAAGE,KAAK,UAER,KAAON,IAAUnB,EAAMoB,KAAKG,EAAGE,KAAK,KAGtC,OADIV,GAAWQ,EAAGE,KAAKnG,EAAAsE,aAChB2B,EAAGG,KAAK,IA5JJpG,EAAAuE,oBA8FbvE,EAAAqG,wBAAA,SACE5B,EACAgB,EACAa,QADA,IAAAb,OAAA,QACA,IAAAa,OAAA,GAIA,IAAIL,KAUJ,GATIR,GAAWQ,EAAGE,KAAKnC,EAA0BS,EAAQd,WACzDsC,EAAGE,KAAKzC,EAA2Be,EAAQd,WACvC8B,GAAWQ,EAAGE,KAAKnG,EAAAsE,aACvB2B,EAAGE,KAAK1B,EAAQD,KAAO,IAAO,MAAQ,OACtCyB,EAAGE,KAAK1B,EAAQD,KAAKW,SAAS,KAC9Bc,EAAGE,KAAK,MACRF,EAAGE,KAAK1B,EAAQA,SAGZA,EAAQC,MAAO,CAGjB,IAAIA,EAAQD,EAAQC,MAChB4B,IACFL,EAAGE,KAAK,MACRF,EAAGE,KAAKX,EAAwBf,EAAQC,MAAOe,KAGjDQ,EAAGE,KAAK,MACRF,EAAGE,KAAK,QACRF,EAAGE,KAAKzB,EAAMU,OAAOC,gBACrBY,EAAGE,KAAK,KACRF,EAAGE,KAAKzB,EAAMY,KAAKH,SAAS,KAC5Bc,EAAGE,KAAK,KACRF,EAAGE,KAAKzB,EAAMa,OAAOJ,SAAS,KAC9Bc,EAAGE,KAAK,KAEV,OAAOF,EAAGG,KAAK,KAIjBpG,EAAAwF,0BA2BA,IAAAe,EAAA,WAME,SAAAA,EAAsBC,QAAA,IAAAA,MAAA,MACpBlG,KAAKkG,YAAcA,GAAiD,IAAIC,MAkD5E,OA9CEF,EAAAhE,UAAAmE,eAAA,SACElC,EACAb,EACAe,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEA,IAAIJ,EAAUF,EAAkBtC,OAAOuC,EAAMb,EAAUgB,EAAMC,EAAMC,GAAMK,UAAUR,GACnFpE,KAAKkG,YAAYL,KAAK1B,IAMxB8B,EAAAhE,UAAAoE,KAAA,SACEnC,EACAE,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAvE,KAAKoG,eAAelC,EAAMlB,EAAmBM,KAAMc,EAAOC,EAAMC,EAAMC,IAIxE0B,EAAAhE,UAAAqE,QAAA,SACEpC,EACAE,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAvE,KAAKoG,eAAelC,EAAMlB,EAAmBO,QAASa,EAAOC,EAAMC,EAAMC,IAI3E0B,EAAAhE,UAAAsE,MAAA,SACErC,EACAE,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAvE,KAAKoG,eAAelC,EAAMlB,EAAmBQ,MAAOY,EAAOC,EAAMC,EAAMC,IAE3E0B,EAzDA,GAAsBvG,EAAAuG,iKChOtBO,EAAArG,EAAA,KACAqG,EAAArG,EAAA,KACAqG,EAAArG,EAAA,KACAqG,EAAArG,EAAA,ybCJA,IAAAsG,EAAAtG,EAAA,GAQAuG,EAAAvG,EAAA,GAYST,EAAAiH,MAXPD,EAAAC,MAWcjH,EAAAkH,MATdF,EAAAE,MAGF,IASYC,EATZ3D,EAAA/C,EAAA,IASA,SAAY0G,GAEVA,IAAA,mBAGAA,IAAA,eACAA,IAAA,iCACAA,IAAA,yBACAA,IAAA,yBAGAA,IAAA,2BACAA,IAAA,yBACAA,IAAA,mBACAA,IAAA,eACAA,IAAA,iBACAA,IAAA,kBACAA,IAAA,kCACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,4BACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,kCACAA,IAAA,oCACAA,IAAA,sBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,8BACAA,IAAA,gCACAA,IAAA,8BAGAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,cACAA,IAAA,YACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,wBACAA,IAAA,gBACAA,IAAA,kBAGAA,IAAA,wCACAA,IAAA,sCACAA,IAAA,gDACAA,IAAA,wCACAA,IAAA,8CACAA,IAAA,0CACAA,IAAA,gDACAA,IAAA,0CACAA,IAAA,gDACAA,IAAA,sCACAA,IAAA,8CAGAA,IAAA,0BACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,sBAvEF,CAAYA,EAAAnH,EAAAmH,WAAAnH,EAAAmH,cA2EZnH,EAAAoH,oBAAA,SAAoCC,GAClC,OAAQA,GACN,KAAKF,EAASG,QACd,KAAKH,EAASI,KACd,KAAKJ,EAASK,KACd,KAAKL,EAASM,MAAO,OAAO,EAE9B,OAAO,GAITzH,EAAA0H,eAAA,SAA+BL,GAC7B,OAAQA,GACN,KAAKF,EAASQ,WACd,KAAKR,EAASS,KACd,KAAKT,EAASU,cACd,KAAKV,EAASW,eAAgB,OAAO,EAEvC,OAAO,GAIT9H,EAAA+H,sBAAA,SAAsCV,GACpC,OAAQA,GACN,KAAKF,EAASQ,WACd,KAAKR,EAASW,eAAgB,OAAO,EAEvC,OAAO,GAIT,IAAAE,EAAA,oBAAAA,IAOE1H,KAAA2H,OAAsB,KAEtB3H,KAAA4H,MAAqBnB,EAAApE,YAAYwF,KAm4BnC,OAh4BEH,EAAAzF,UAAA6F,GAAA,SAAGC,GAA2B,OAAQ/H,KAAK4H,MAAQG,IAASA,GAE5DL,EAAAzF,UAAA+F,MAAA,SAAMD,GAA2B,OAA8B,IAAtB/H,KAAK4H,MAAQG,IAEtDL,EAAAzF,UAAAgG,IAAA,SAAIF,GAA2B/H,KAAK4H,OAASG,GAItCL,EAAAQ,WAAP,SACEtH,EACAuH,EACAC,EACAhE,GAEA,IAAIiE,EAAO,IAAIC,EAKf,OAJAD,EAAKjE,MAAQA,EACbiE,EAAKzH,KAAOA,EAAMA,EAAK+G,OAASU,EAChCA,EAAKF,cAAgBA,EAAmBA,GAAeI,GAAUJ,EAAeE,GAChFA,EAAKD,WAAaA,EACXC,GAGFX,EAAAc,kBAAP,SACEpE,GAEA,OAAOsD,EAAKQ,WACVR,EAAKe,2BAA2B,GAAIrE,GACpC,MACA,EACAA,IAIGsD,EAAAgB,oBAAP,SACE9H,EACA+H,EACAvE,GAEA,IAAIwE,EAAO,IAAIC,EAIf,OAHAD,EAAKxE,MAAQA,EACbwE,EAAKhI,KAAOA,EAAMA,EAAK+G,OAASiB,EAChCA,EAAKD,YAAcA,EAAiBA,IAAaA,EAAYhB,OAASiB,GAC/DA,GAGFlB,EAAAoB,gBAAP,SACElI,EACAyH,EACAU,EACAhC,EACA3C,GAEA,IAAIwE,EAAO,IAAII,EAMf,OALAJ,EAAKxE,MAAQA,EACbwE,EAAKhI,KAAOA,EAAMA,EAAK+G,OAASiB,EAChCA,EAAKP,KAAOA,EAAUA,IAAMA,EAAKV,OAASiB,GAC1CA,EAAKG,YAAcA,EAAiBA,IAAaA,EAAYpB,OAASiB,GACtEA,EAAKK,cAAgBlC,EACd6B,GAGFlB,EAAAwB,gBAAP,SACEC,EACAC,EACAC,EACAjB,EACAhE,GAEA,IAAIkF,EAAM,IAAIC,EAMd,OALAD,EAAIlF,MAAQA,EACZkF,EAAIH,WAAaA,EAAYZ,GAAUY,EAAYG,GACnDA,EAAIF,WAAaA,EAAYA,EAAWzB,OAAS2B,EACjDA,EAAID,iBAAmBA,EAAsBA,IAAkBA,EAAiB1B,OAAS2B,GACzFA,EAAIlB,WAAaA,EACVkB,GAKF5B,EAAA8B,gBAAP,SACE5I,EACA6I,EACArF,GAEA,IAAIsF,EAAO,IAAIC,EAKf,OAJAD,EAAKtF,MAAQA,EACbsF,EAAK9I,KAAOA,EAAMA,EAAK+G,OAAS+B,EAChCA,EAAKE,UAAYH,EAAUA,GAAMlB,GAAUkB,EAAMC,GACjDA,EAAKG,cAAgBC,EAAoBlJ,GAClC8I,GAGFhC,EAAAqC,cAAP,SACE3E,EACA2B,EACA3C,GAEA,IAAI4F,EAAO,IAAIC,EAIf,OAHAD,EAAK5F,MAAQA,EACb4F,EAAKE,YAAcnD,EACnBiD,EAAK5E,KAAOA,EACL4E,GAKFtC,EAAAe,2BAAP,SACE7H,EACAwD,GAEA,IAAI+F,EAAO,IAAIC,EAGf,OAFAD,EAAK/F,MAAQA,EACb+F,EAAK/E,KAAOxE,EACLuJ,GAGFzC,EAAA2C,gCAAP,SACEjG,GAEA,IAAI+F,EAAO,IAAIC,EAGf,OAFAD,EAAK/F,MAAQA,EACb+F,EAAK/E,KAAO,GACL+E,GAGFzC,EAAA4C,6BAAP,SACEC,EACAnG,GAEA,IAAI+F,EAAO,IAAIK,EAGf,OAFAL,EAAK/F,MAAQA,EACb+F,EAAKM,mBAAqBF,EAsrD9B,SAA4BG,EAAwB/C,GAClD,IAAK,IAAItH,EAAI,EAAGsK,EAAID,EAAMpF,OAAQjF,EAAIsK,IAAKtK,EAAG,CAC5C,IAAI2J,EAAOU,EAAMrK,GACb2J,IAAMA,EAAKrC,OAASA,IAzrDYiD,CAAmBL,EAAUJ,GAC1DA,GAGFzC,EAAAmD,0BAAP,SACEC,EACAC,EACAC,EACA5G,GAEA,IAAI+F,EAAO,IAAIc,EAKf,OAJAd,EAAK/F,MAAQA,EACb+F,EAAKW,cAAgBA,EACrBX,EAAKY,WAAaA,EAAYA,EAAWpD,OAASwC,EAClDA,EAAKa,OAASA,EAAQA,EAAOrD,OAASwC,EAC/BA,GAGFzC,EAAAwD,uBAAP,SACEC,EACAC,EACAC,EACAjH,GAEA,IAAI+F,EAAO,IAAImB,EAKf,OAJAnB,EAAK/F,MAAQA,EACb+F,EAAKgB,SAAWA,EAChBhB,EAAKiB,KAAOA,EAAMA,EAAKzD,OAASwC,EAChCA,EAAKkB,MAAQA,EAAOA,EAAM1D,OAASwC,EAC5BA,GAGFzC,EAAA6D,qBAAP,SACER,EACAS,EACA/B,EACArF,GAEA,IAAI+F,EAAO,IAAIsB,EAKf,OAJAtB,EAAK/F,MAAQA,EACb+F,EAAKY,WAAaA,EAAYA,EAAWpD,OAASwC,EAClDA,EAAKhC,cAAgBqD,EAAcA,GAAUjD,GAAUiD,EAAUrB,GACjEA,EAAKP,UAAYH,EAAMlB,GAAUkB,EAAMU,GAChCA,GAGFzC,EAAAgE,sBAAP,SACEC,GAEA,IAAIxB,EAAO,IAAIyB,EAGf,OAFAzB,EAAK/F,MAAQuH,EAAYvH,MACzB+F,EAAKwB,YAAcA,EACZxB,GAGFzC,EAAAmE,sBAAP,SACEC,EACA1H,GAEA,IAAI+F,EAAO,IAAI4B,EAGf,OAFA5B,EAAK/F,MAAQA,EACb+F,EAAK2B,YAAcA,EAAavD,GAAUuD,EAAa3B,GAChDA,GAGFzC,EAAAsE,4BAAP,SACE5H,GAEA,IAAI+F,EAAO,IAAI8B,EAEf,OADA9B,EAAK/F,MAAQA,EACN+F,GAGFzC,EAAAwE,8BAAP,SACEnB,EACAoB,EACA/H,GAEA,IAAI+F,EAAO,IAAIiC,EAIf,OAHAjC,EAAK/F,MAAQA,EACb+F,EAAKY,WAAaA,EAAYA,EAAWpD,OAASwC,EAClDA,EAAKkC,kBAAoBF,EAASA,EAAQxE,OAASwC,EAC5CA,GAGFzC,EAAA4E,sBAAP,SACElI,GAEA,IAAI+F,EAAO,IAAIoC,EAEf,OADApC,EAAK/F,MAAQA,EACN+F,GAGFzC,EAAA8E,6BAAP,SACElL,EACA8C,GAEA,IAAI+F,EAAO,IAAIsC,EAGf,OAFAtC,EAAK/F,MAAQA,EACb+F,EAAK7I,MAAQA,EACN6I,GAGFzC,EAAAgF,yBAAP,SACEf,GAEA,IAAIxB,EAAO,IAAIwC,EAIf,OAHAxC,EAAKvC,MAAQ+D,EAAY/D,MAAQnB,EAAApE,YAAYuK,MAC7CzC,EAAK/F,MAAQuH,EAAYvH,MACzB+F,EAAKwB,YAAcA,EACZxB,GAGFzC,EAAAmF,2BAAP,SACE9B,EACA+B,EACA1I,GAEA,IAAI+F,EAAO,IAAI4C,EAIf,OAHA5C,EAAK/F,MAAQA,EACb+F,EAAKY,WAAaA,EAAYA,EAAWpD,OAASwC,EAClDA,EAAK2C,OAASA,EAAQA,EAAOnF,OAASwC,EAC/BA,GAGFzC,EAAAsF,+BAAP,SACE1L,EACA8C,GAEA,IAAI+F,EAAO,IAAI8C,EAGf,OAFA9C,EAAK/F,MAAQA,EACb+F,EAAK7I,MAAQA,EACN6I,GAGFzC,EAAAwF,oBAAP,SACEnC,EACAS,EACA/B,EACArF,GAEA,IAAI+F,EAAO,IAAIgD,EAKf,OAJAhD,EAAK/F,MAAQA,EACb+F,EAAKY,WAAaA,EAAYA,EAAWpD,OAASwC,EAClDA,EAAKhC,cAAgBqD,EAAcA,GAAUjD,GAAUiD,EAAUrB,GACjEA,EAAKP,UAAYH,EAAMlB,GAAUkB,EAAMU,GAChCA,GAGFzC,EAAA0F,qBAAP,SACEhJ,GAEA,IAAI+F,EAAO,IAAIkD,EAEf,OADAlD,EAAK/F,MAAQA,EACN+F,GAGFzC,EAAA4F,8BAAP,SACEC,EACAC,EACApJ,GAEA,IAAI+F,EAAO,IAAIsD,EAIf,OAHAtD,EAAK/F,MAAQA,EACb+F,EAAKoD,MAAQA,EACbpD,EAAKqD,OAASA,EACPrD,GAGFzC,EAAAgG,8BAAP,SACE3C,EACA3G,GAEA,IAAI+F,EAAO,IAAIwD,EAGf,OAFAxD,EAAK/F,MAAQA,EACb+F,EAAKY,WAAaA,EAAYA,EAAWpD,OAASwC,EAC3CA,GAGFzC,EAAAkG,+BAAP,SACE7C,EACA/I,EACAoC,GAEA,IAAI+F,EAAO,IAAI0D,EAIf,OAHA1D,EAAK/F,MAAQA,EACb+F,EAAKY,WAAaA,EAAYA,EAAWpD,OAASwC,EAClDA,EAAKnI,SAAWA,EAAUA,EAAS2F,OAASwC,EACrCA,GAGFzC,EAAAoG,8BAAP,SACEC,EACAnG,EACAxD,GAEA,IAAI+F,EAAO,IAAI6D,EAIf,OAHA7D,EAAK/F,MAAQA,EACb+F,EAAK4D,QAAUA,EACf5D,EAAK8D,aAAerG,EACbuC,GAGFzC,EAAAwG,wBAAP,SACEC,EACAC,EACAC,EACAjK,GAEA,IAAI+F,EAAO,IAAImE,EAKf,OAJAnE,EAAK/F,MAAQA,EACb+F,EAAKgE,UAAYA,EAAWA,EAAUxG,OAASwC,EAC/CA,EAAKiE,OAASA,EAAQA,EAAOzG,OAASwC,EACtCA,EAAKkE,OAASA,EAAQA,EAAO1G,OAASwC,EAC/BA,GAGFzC,EAAA6G,8BAAP,SACEjN,EACA8C,GAEA,IAAI+F,EAAO,IAAIqE,EAGf,OAFArE,EAAK/F,MAAQA,EACb+F,EAAK7I,MAAQA,EACN6I,GAGFzC,EAAA+G,sBAAP,SACErK,GAEA,IAAI+F,EAAO,IAAIuE,EAEf,OADAvE,EAAK/F,MAAQA,EACN+F,GAGFzC,EAAAiH,qBAAP,SACEvK,GAEA,IAAI+F,EAAO,IAAIyE,EAEf,OADAzE,EAAK/F,MAAQA,EACN+F,GAGFzC,EAAAmH,qBAAP,SACEzK,GAEA,IAAI+F,EAAO,IAAI2E,EAEf,OADA3E,EAAK/F,MAAQA,EACN+F,GAGFzC,EAAAqH,6BAAP,SACE5D,EACA6D,EACA5K,GAEA,IAAI+F,EAAO,IAAI8E,EAIf,OAHA9E,EAAK/F,MAAQA,EACb+F,EAAKgB,SAAWA,EAChBhB,EAAK6E,QAAUA,EAASA,EAAQrH,OAASwC,EAClCA,GAGFzC,EAAAwH,4BAAP,SACE/D,EACA6D,EACA5K,GAEA,IAAI+F,EAAO,IAAIgF,EAIf,OAHAhF,EAAK/F,MAAQA,EACb+F,EAAKgB,SAAWA,EAChBhB,EAAK6E,QAAUA,EAASA,EAAQrH,OAASwC,EAClCA,GAKFzC,EAAA0H,qBAAP,SACEC,EACAjL,GAEA,IAAIsF,EAAO,IAAI4F,GAGf,OAFA5F,EAAKtF,MAAQA,EACbsF,EAAK2F,WAAaA,EAAY9G,GAAU8G,EAAY3F,GAC7CA,GAGFhC,EAAA6H,qBAAP,SACEC,EACApL,GAEA,IAAIsF,EAAO,IAAI+F,GAGf,OAFA/F,EAAKtF,MAAQA,EACbsF,EAAK8F,MAAQA,EAAWA,IAAOA,EAAM7H,OAAS+B,GACvCA,GAGFhC,EAAAgI,uBAAP,SACEC,EACAC,EACAjH,EACAkH,EACAC,EACAC,EACAnI,EACAxD,GAEA,IAAIsF,EAAO,IAAIsG,GASf,OARAtG,EAAKtF,MAAQA,EACbsF,EAAK9B,MAAQA,EACb8B,EAAK9I,KAAO+O,EAAYA,EAAWhI,OAAS+B,EAC5CA,EAAKkG,eAAiBA,EAAgBrH,GAAUqH,EAAgBlG,GAChEA,EAAKf,YAAcA,EAAiBA,IAAaA,EAAYhB,OAAS+B,GACtEA,EAAKmG,gBAAkBA,EAAqBA,GAAiBtH,GAAUsH,EAAiBnG,GACxFA,EAAKoG,QAAUA,EAASvH,GAAUuH,EAASpG,GAC3CA,EAAKqG,WAAaA,EAAgBA,GAAYxH,GAAUwH,EAAYrG,GAC7DA,GAGFhC,EAAAuI,wBAAP,SACET,EACApL,GAEA,IAAIsF,EAAO,IAAIwG,GAGf,OAFAxG,EAAKtF,MAAQA,EACbsF,EAAK8F,MAAQA,EAAWA,IAAOA,EAAM7H,OAAS+B,GACvCA,GAGFhC,EAAAyI,kBAAP,SACEC,EACAjC,EACA/J,GAEA,IAAIsF,EAAO,IAAI2G,GAIf,OAHA3G,EAAKtF,MAAQA,EACbsF,EAAK0G,UAAYA,EAAWA,EAAUzI,OAAS+B,EAC/CA,EAAKyE,UAAYA,EAAWA,EAAUxG,OAAS+B,EACxCA,GAGFhC,EAAA4I,qBAAP,SACElM,GAEA,IAAIsF,EAAO,IAAI6G,GAEf,OADA7G,EAAKtF,MAAQA,EACNsF,GAGFhC,EAAA8I,sBAAP,SACE5P,EACAkP,EACAC,EACAnI,EACAxD,GAEA,IAAIsF,EAAO,IAAI+G,GAMf,OALA/G,EAAKtF,MAAQA,EACbsF,EAAK9B,MAAQA,EACb8B,EAAK9I,KAAOA,EAAMA,EAAK+G,OAAS+B,EAChCA,EAAK8D,OAASsC,EAASvH,GAAUuH,EAASpG,GAC1CA,EAAKqG,WAAaA,EAAgBA,GAAYxH,GAAUwH,EAAYrG,GAC7DA,GAGFhC,EAAAgJ,2BAAP,SACE9P,EACAU,EACAsG,EACAxD,GAEA,IAAIsF,EAAO,IAAIiH,GAKf,OAJAjH,EAAKtF,MAAQA,EACbsF,EAAK9B,MAAQA,EACb8B,EAAK9I,KAAOA,EAAMA,EAAK+G,OAAS+B,EAChCA,EAAKpI,MAAQA,EAAWA,IAAOA,EAAMqG,OAAS+B,GACvCA,GAGFhC,EAAAkJ,sBAAP,SACEd,EACAe,EACAjJ,EACAxD,GAEA,IAAIsF,EAAO,IAAIoH,GAKf,GAJApH,EAAKtF,MAAQA,EACbsF,EAAK9B,MAAQA,EACb8B,EAAKoG,QAAUA,EAAaA,GAASvH,GAAUuH,EAASpG,GACxDA,EAAKmH,KAAOA,EACRA,EAAM,CACR,IAAI9L,EAAiB7B,EAAA6N,cAAcF,EAAKvP,OACpCuP,EAAKvP,MAAM0P,WAAW,KACxBtH,EAAK3E,eAAiB7B,EAAA+N,YACpBlM,EACAX,EAAMU,OAAOC,gBAGf2E,EAAK3E,eAAiBA,EAExB2E,EAAKwH,aAAeC,GAAmBzH,EAAK3E,qBAE5C2E,EAAK3E,eAAiB,KACtB2E,EAAKwH,aAAe,KAEtB,OAAOxH,GAGFhC,EAAA0J,4BAAP,SACExQ,EACAyQ,EACAjN,GAEA,IAAIsF,EAAO,IAAI4H,GAIf,OAHA5H,EAAKtF,MAAQA,EACbsF,EAAK9I,KAAOA,EAAMA,EAAK+G,OAAS+B,EAChCA,EAAK2H,aAAeA,EAAcA,EAAa1J,OAAS+B,EACjDA,GAGFhC,EAAA6J,mBAAP,SACE3Q,EACAyQ,EACAjN,GAEA,IAAIwE,EAAO,IAAI4I,GASf,OARA5I,EAAKxE,MAAQA,EACbwE,EAAKhI,KAAOA,EAAMA,EAAK+G,OAASiB,EAC3ByI,EAGHA,EAAa1J,OAASiB,EAFtByI,EAAezQ,EAIjBgI,EAAKyI,aAAeA,EACbzI,GAGFlB,EAAA+J,0BAAP,SACE1G,GAEA,IAAIrB,EAAO,IAAIgI,GAGf,OAFAhI,EAAKtF,MAAQ2G,EAAW3G,MACxBsF,EAAKqB,WAAaA,EAAYA,EAAWpD,OAAS+B,EAC3CA,GAGFhC,EAAAiK,kBAAP,SACExD,EACAyD,EACAC,EACAzN,GAEA,IAAIsF,EAAO,IAAIoI,GAKf,OAJApI,EAAKtF,MAAQA,EACbsF,EAAKyE,UAAYA,EAAWA,EAAUxG,OAAS+B,EAC/CA,EAAKkI,OAASA,EAAQA,EAAOjK,OAAS+B,EACtCA,EAAKmI,QAAUA,EAAaA,IAASA,EAAQlK,OAAS+B,GAC/CA,GAGFhC,EAAAqK,sBAAP,SACEC,EACAnB,EACAzM,GAEA,IAAIsF,EAAO,IAAIuI,GACfvI,EAAKtF,MAAQA,EACbsF,EAAKwI,aAAeF,EAAWA,GAAOzJ,GAAUyJ,EAAOtI,GACvDA,EAAKyI,cAAgB,KACrBzI,EAAKmH,KAAOA,EACZ,IAAI9L,EAAiB7B,EAAA6N,cAAcF,EAAKvP,OAaxC,OAZIuP,EAAKvP,MAAM0P,WAAW,KACxBtH,EAAK3E,eAAiB7B,EAAA+N,YACpBlM,EACAX,EAAMU,OAAOC,iBAGVA,EAAeiM,WAAWvK,EAAA3D,kBAC7BiC,EAAiB0B,EAAA3D,eAAiBiC,GAEpC2E,EAAK3E,eAAiBA,GAExB2E,EAAKwH,aAAeC,GAAmBzH,EAAK3E,gBACrC2E,GAGFhC,EAAA0K,kCAAP,SACEzC,EACAkB,EACAzM,GAEA,IAAIsF,EAAO,IAAIuI,GAUf,OATAvI,EAAKtF,MAAQA,EACbsF,EAAKwI,aAAe,KACpBxI,EAAKyI,cAAgBxC,EACrBjG,EAAKmH,KAAOA,EACZnH,EAAK3E,eAAiB7B,EAAA+N,YACpB/N,EAAA6N,cAAcF,EAAKvP,OACnB8C,EAAMU,OAAOC,gBAEf2E,EAAKwH,aAAeC,GAAmBzH,EAAK3E,gBACrC2E,GAGFhC,EAAA2K,wBAAP,SACEhB,EACAzQ,EACAwD,GAEA,IAAIwE,EAAO,IAAI0J,GASf,OARA1J,EAAKxE,MAAQA,EACbwE,EAAKyI,aAAeA,EAAcA,EAAa1J,OAASiB,EACnDhI,EAGHA,EAAK+G,OAASiB,EAFdhI,EAAOyQ,EAITzI,EAAKhI,KAAOA,EACLgI,GAGFlB,EAAA6K,2BAAP,SACE3R,EACAgP,EACAjH,EACAmH,EACAC,EACAnI,EACAxD,GAEA,IAAIsF,EAAO,IAAI8I,GAQf,OAPA9I,EAAKtF,MAAQA,EACbsF,EAAK9B,MAAQA,EACb8B,EAAK9I,KAAOA,EAAMA,EAAK+G,OAAS+B,EAChCA,EAAKkG,eAAiBA,EAAoBA,GAAgBrH,GAAUqH,EAAgBlG,GACpFA,EAAKf,YAAcA,EAAiBA,IAAaA,EAAYhB,OAAS+B,GACtEA,EAAKoG,QAAUA,EAASvH,GAAUuH,EAASpG,GAC3CA,EAAKqG,WAAaA,EAAgBA,GAAYxH,GAAUwH,EAAYrG,GAC7DA,GAGFhC,EAAA+K,uBAAP,SACE7R,EACAyH,EACAU,EACAgH,EACAnI,EACAxD,GAEA,IAAIsF,EAAO,IAAIgJ,GAOf,OANAhJ,EAAKtF,MAAQA,EACbsF,EAAK9B,MAAQA,EACb8B,EAAK9I,KAAOA,EAAMA,EAAK+G,OAAS+B,EAChCA,EAAKrB,KAAOA,EAAUA,IAAMA,EAAKV,OAAS+B,GAC1CA,EAAKX,YAAcA,EAAiBA,IAAaA,EAAYpB,OAAS+B,GACtEA,EAAKqG,WAAaA,EAAgBA,GAAYxH,GAAUwH,EAAYrG,GAC7DA,GAGFhC,EAAAiL,mBAAP,SACE5J,EACAoF,EACAyE,EACAxC,EACAhM,GAEA,IAAIsF,EAAO,IAAImJ,GAMf,OALAnJ,EAAKtF,MAAQA,EACbsF,EAAKX,YAAcA,EAAiBA,IAAaA,EAAYpB,OAAS+B,GACtEA,EAAKyE,UAAYA,EAAeA,IAAWA,EAAUxG,OAAS+B,GAC9DA,EAAKkJ,YAAcA,EAAiBA,IAAaA,EAAYjL,OAAS+B,GACtEA,EAAK0G,UAAYA,EAAWA,EAAUzI,OAAS+B,EACxCA,GAGFhC,EAAAoL,0BAAP,SACElS,EACAgP,EACAmD,EACAC,EACAjD,EACAnI,EACAxD,GAEA,IAAIsF,EAAO,IAAIuJ,GAQf,OAPAvJ,EAAKtF,MAAQA,EACbsF,EAAK9B,MAAQA,EACb8B,EAAK9I,KAAOA,EAAMA,EAAK+G,OAAS+B,EAChCA,EAAKkG,eAAiBA,EAAoBA,GAAgBrH,GAAUqH,EAAgBlG,GACpFA,EAAKqJ,UAAYA,EAAWA,EAAUpL,OAAS+B,EAC/CA,EAAKsJ,KAAOA,EAAUA,IAAMA,EAAKrL,OAAS+B,GAC1CA,EAAKqG,WAAaA,EAAgBA,GAAYxH,GAAUwH,EAAYrG,GAC7DA,GAGFhC,EAAAwL,wBAAP,SACEtS,EACAgP,EACAmD,EACAC,EACAjD,EACAnI,EACAxD,GAEA,IAAIsF,EAAO,IAAIyJ,GAQf,OAPAzJ,EAAKtF,MAAQA,EACbsF,EAAK9B,MAAQA,EACb8B,EAAK9I,KAAOA,EAAMA,EAAK+G,OAAS+B,EAChCA,EAAKkG,eAAiBA,EAAoBA,GAAgBrH,GAAUqH,EAAgBlG,GACpFA,EAAKqJ,UAAYA,EAAWA,EAAUpL,OAAS+B,EAC/CA,EAAKsJ,KAAOA,EAAUA,IAAMA,EAAKrL,OAAS+B,GAC1CA,EAAKqG,WAAaA,EAAgBA,GAAYxH,GAAUwH,EAAYrG,GAC7DA,GAGFhC,EAAA0L,2BAAP,SACExS,EACAkP,EACAC,EACAnI,EACAxD,GAEA,IAAIsF,EAAO,IAAI2J,GAMf,OALA3J,EAAKtF,MAAQA,EACbsF,EAAK9B,MAAQA,EACb8B,EAAK9I,KAAOA,EAAMA,EAAK+G,OAAS+B,EAChCA,EAAKoG,QAAUA,EAASvH,GAAUuH,EAASpG,GAC3CA,EAAKqG,WAAaA,EAAgBA,GAAYxH,GAAUwH,EAAYrG,GAC7DA,GAGFhC,EAAA4L,sBAAP,SACEhS,EACA8C,GAEA,IAAIsF,EAAO,IAAI6J,GAGf,OAFA7J,EAAKtF,MAAQA,EACbsF,EAAKpI,MAAQA,EAAWA,IAAOA,EAAMqG,OAAS+B,GACvCA,GAGFhC,EAAA8L,sBAAP,SACErF,EACAsF,EACArP,GAEA,IAAIsF,EAAO,IAAIgK,GAIf,OAHAhK,EAAKtF,MAAQA,EACbsF,EAAKyE,UAAYA,EAAWA,EAAUxG,OAAS+B,EAC/CA,EAAK+J,MAAQA,EAAOlL,GAAUkL,EAAO/J,GAC9BA,GAGFhC,EAAAiM,iBAAP,SACEnE,EACAH,EACAjL,GAEA,IAAIwE,EAAO,IAAIgL,GAIf,OAHAhL,EAAKxE,MAAQA,EACbwE,EAAK4G,MAAQA,EAAWA,IAAOA,EAAM7H,OAASiB,GAC9CA,EAAKyG,WAAaA,EAAY9G,GAAU8G,EAAYzG,GAC7CA,GAGFlB,EAAAmM,qBAAP,SACEvS,EACA8C,GAEA,IAAIsF,EAAO,IAAIoK,GAGf,OAFApK,EAAKtF,MAAQA,EACbsF,EAAKpI,MAAQA,EAAOA,EAAMqG,OAAS+B,EAC5BA,GAGFhC,EAAAqM,mBAAP,SACE1E,EACA2E,EACAC,EACAC,EACA9P,GAEA,IAAIsF,EAAO,IAAIyK,GASf,OARAzK,EAAKtF,MAAQA,EACbsF,EAAK2F,WAAaA,EAAY9G,GAAU8G,EAAY3F,GACpDA,EAAKsK,cAAgBA,EACjBA,IAAeA,EAAcrM,OAAS+B,GAC1CA,EAAKuK,gBAAkBA,EACnBA,GAAiB1L,GAAU0L,EAAiBvK,GAChDA,EAAKwK,kBAAoBA,EACrBA,GAAmB3L,GAAU2L,EAAmBxK,GAC7CA,GAGFhC,EAAA0M,sBAAP,SACExT,EACAgP,EACAyE,EACAtE,EACAnI,EACAxD,GAEA,IAAIsF,EAAO,IAAI4K,GAOf,OANA5K,EAAKtF,MAAQA,EACbsF,EAAK9B,MAAQA,EACb8B,EAAK9I,KAAOA,EAAMA,EAAK+G,OAAS+B,EAChCA,EAAKkG,eAAiBA,EAAoBA,GAAgBrH,GAAUqH,EAAgBlG,GACpFA,EAAKrB,KAAOgM,EAAOA,EAAM1M,OAAS+B,EAClCA,EAAKqG,WAAaA,EAAgBA,GAAYxH,GAAUwH,EAAYrG,GAC7DA,GAGFhC,EAAA6M,wBAAP,SACErC,EACAnC,EACAnI,EACAxD,GAEA,IAAIsF,EAAO,IAAI8K,GAKf,OAJA9K,EAAKtF,MAAQA,EACbsF,EAAK9B,MAAQA,EACb8B,EAAKwI,aAAeA,EAAc3J,GAAU2J,EAAcxI,GAC1DA,EAAKqG,WAAaA,EAAgBA,GAAYxH,GAAUwH,EAAYrG,GAC7DA,GAGFhC,EAAA+M,0BAAP,SACE7T,EACAyH,EACAU,EACAgH,EACAnI,EACAxD,GAEA,IAAIwE,EAAO,IAAI8L,GAOf,OANA9L,EAAKxE,MAAQA,EACbwE,EAAKhB,MAAQA,EACbgB,EAAKhI,KAAOA,EAAMA,EAAK+G,OAASiB,EAChCA,EAAKP,KAAOA,EAAUA,IAAMA,EAAKV,OAASiB,GAC1CA,EAAKG,YAAcA,EAAiBA,IAAaA,EAAYpB,OAASiB,GACtEA,EAAKmH,WAAaA,EACXnH,GAGFlB,EAAAiN,oBAAP,SACE5J,EACA3G,GAEA,IAAIsF,EAAO,IAAIkL,GAGf,OAFAlL,EAAKtF,MAAQA,EACbsF,EAAKqB,WAAaA,EACXrB,GAGFhC,EAAAmN,qBAAP,SACE1G,EACAiC,EACAhM,GAEA,IAAIsF,EAAO,IAAIoL,GAIf,OAHApL,EAAKtF,MAAQA,EACbsF,EAAKyE,UAAYA,EAAWA,EAAUxG,OAAS+B,EAC/CA,EAAK0G,UAAYA,EAAWA,EAAUzI,OAAS+B,EACxCA,GAEXhC,EA54BA,GAAsBhI,EAAAgI,OAg5BtB,IAAAqN,EAAA,SAAAC,GAAA,SAAAD,mDAKA,OAL6CE,EAAAF,EAAAC,GAK7CD,EALA,CAA6CrN,GAAvBhI,EAAAqV,iBAQtB,IAAAzM,EAAA,SAAA0M,GAAA,SAAA1M,IAAA,IAAA4M,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASuO,OAMlB,OAP8BH,EAAA3M,EAAA0M,GAO9B1M,EAPA,CAA8ByM,GAAjBrV,EAAA4I,WAUb,IAAAO,EAAA,SAAAmM,GAAA,SAAAnM,IAAA,IAAAqM,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASwO,gBAMlB,OAPuCJ,EAAApM,EAAAmM,GAOvCnM,EAPA,CAAuCnB,GAA1BhI,EAAAmJ,oBAUb,SAAYyM,GAEVA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,eANF,CAAY5V,EAAA4V,gBAAA5V,EAAA4V,mBAUZ,IAAAtM,EAAA,SAAAgM,GAAA,SAAAhM,IAAA,IAAAkM,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAAS0O,UAWhBL,EAAAM,yBAAoD,OACtD,OAbmCP,EAAAjM,EAAAgM,GAanChM,EAbA,CAAmCtB,GAAtBhI,EAAAsJ,gBAgBb,IAcYyM,EAdZlM,EAAA,SAAAyL,GAAA,SAAAzL,IAAA,IAAA2L,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAAS6O,YAQlB,OATmCT,EAAA1L,EAAAyL,GASnCzL,EATA,CAAmCwL,GA6BnC,SAAgBjL,EAAoBlJ,GAElC,GAAIA,EAAKmG,MAAQF,EAASQ,WAAY,CACpC,IAAIsO,EAAiC/U,EAAMwE,KAE3C,OADA3B,OAAOkS,EAAQrQ,QACPqQ,EAAQjQ,WAAW,IACzB,QACE,GAAe,WAAXiQ,EAAsB,OAAOF,EAAcG,QAC/C,MAEF,SACE,GAAe,YAAXD,EAAuB,OAAOF,EAAcI,SAChD,MAEF,SACE,GAAe,UAAXF,EAAqB,OAAOF,EAAcK,OAC9C,MAEF,SACE,GAAe,UAAXH,EAAqB,OAAOF,EAAcM,OAC9C,MAEF,SACE,GAAe,YAAXJ,EAAuB,OAAOF,EAAcO,SAChD,MAEF,SACE,GAAe,UAAXL,EAAqB,OAAOF,EAAcQ,OAC9C,MAEF,SACE,GAAe,aAAXN,EAAwB,OAAOF,EAAcS,gBAIhD,GACLtV,EAAKmG,MAAQF,EAASW,gBACK5G,EAAMmK,WAAWhE,MAAQF,EAASQ,WAC7D,CACIsO,EAA4D/U,EAAMmK,WAAY3F,KAClF3B,OAAOkS,EAAQrQ,QACf,IAAI6Q,EAAqCvV,EAAMoB,SAASoD,KAGxD,GAFA3B,OAAO0S,EAAQ7Q,QAEA,YAAXqQ,EACF,OAAQQ,EAAQzQ,WAAW,IACzB,QACE,GAAe,UAAXyQ,EAAqB,OAAOV,EAAcW,gBAC9C,MAEF,SACE,OAAQD,GACN,IAAK,SAAU,OAAOV,EAAcY,gBACpC,IAAK,UAAW,OAAOZ,EAAca,mBAO/C,OAAOb,EAAcc,OAzFV7W,EAAA6J,gBAcb,SAAYkM,GACVA,IAAA,mBACAA,IAAA,mBACAA,IAAA,uBACAA,IAAA,qCACAA,IAAA,qCACAA,IAAA,uCACAA,IAAA,yBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,uBACAA,IAAA,sBAXF,CAAYA,EAAA/V,EAAA+V,gBAAA/V,EAAA+V,mBAeZ/V,EAAAoK,sBAgEA,IAAAH,EAAA,SAAAqL,GAAA,SAAArL,IAAA,IAAAuL,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAAS2P,YAQlB,OATmCvB,EAAAtL,EAAAqL,GASnCrL,EATA,CAAmCjC,GAAtBhI,EAAAiK,gBAYb,SAAY8M,GAEVA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,iBANF,CAAY/W,EAAA+W,cAAA/W,EAAA+W,iBAUZ,IAAAxM,EAAA,SAAA+K,GAAA,SAAA/K,IAAA,IAAAiL,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAAS6P,UAMlB,OAPiCzB,EAAAhL,EAAA+K,GAOjC/K,EAPA,CAAiCvC,GAApBhI,EAAAuK,cAYb,IAAA0M,EAAA,SAAA3B,GAAA,SAAA2B,mDAAgD,OAAP1B,EAAA0B,EAAA3B,GAAO2B,EAAhD,CAAyCjP,GAAnBhI,EAAAiX,aAGtB,IAQYC,EARZxM,EAAA,SAAA4K,GAAA,SAAA5K,IAAA,IAAA8K,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASQ,aAIlB,OAL0C4N,EAAA7K,EAAA4K,GAK1C5K,EALA,CAA0CuM,GAA7BjX,EAAA0K,uBAQb,SAAYwM,GACVA,IAAA,iBACAA,IAAA,qBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,mBANF,CAAYA,EAAAlX,EAAAkX,cAAAlX,EAAAkX,iBAUZ,IAAAC,EAAA,SAAA7B,GAAA,SAAA6B,IAAA,IAAA3B,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASG,UAIlB,OALgDiO,EAAA4B,EAAA7B,GAKhD6B,EALA,CAAgDF,GAA1BjX,EAAAmX,oBAQtB,IAAArM,EAAA,SAAAwK,GAAA,SAAAxK,IAAA,IAAA0K,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAA4B,YAAcF,EAAYG,QAI5B,OAL4C9B,EAAAzK,EAAAwK,GAK5CxK,EALA,CAA4CqM,GAA/BnX,EAAA8K,yBAQb,SAAYwM,GACVA,IAAA,mBACAA,IAAA,WAFF,CAAYtX,EAAAsX,gBAAAtX,EAAAsX,mBAMZ,IAAA/L,EAAA,SAAA+J,GAAA,SAAA/J,IAAA,IAAAiK,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASoQ,YAQlB,OATyChC,EAAAhK,EAAA+J,GASzC/J,EATA,CAAyC0L,GAA5BjX,EAAAuL,sBAYb,IAAAK,EAAA,SAAA0J,GAAA,SAAA1J,IAAA,IAAA4J,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASqQ,SAQlB,OATsCjC,EAAA3J,EAAA0J,GAStC1J,EATA,CAAsCqL,GAAzBjX,EAAA4L,mBAYb,IAAAG,EAAA,SAAAuJ,GAAA,SAAAvJ,IAAA,IAAAyJ,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASS,OAQlB,OAToC2N,EAAAxJ,EAAAuJ,GASpCvJ,EATA,CAAoCkL,GAAvBjX,EAAA+L,iBAYb,IAAAG,EAAA,SAAAoJ,GAAA,SAAApJ,IAAA,IAAAsJ,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASsQ,QAIlB,OALqClC,EAAArJ,EAAAoJ,GAKrCpJ,EALA,CAAqC+K,GAAxBjX,EAAAkM,kBAQb,IAAAG,EAAA,SAAAiJ,GAAA,SAAAjJ,IAAA,IAAAmJ,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASuQ,QAIlB,OALqCnC,EAAAlJ,EAAAiJ,GAKrCjJ,EALA,CAAqC4K,GAAxBjX,EAAAqM,kBAQb,IAAAE,EAAA,SAAA+I,GAAA,SAAA/I,IAAA,IAAAiJ,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASwQ,YAChBnC,EAAA9P,KAAO,gBACT,OAH2C6P,EAAAhJ,EAAA+I,GAG3C/I,EAHA,CAA2C7B,GAA9B1K,EAAAuM,wBAMb,IAAAG,EAAA,SAAA4I,GAAA,SAAA5I,IAAA,IAAA8I,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASU,gBAMlB,OAP6C0N,EAAA7I,EAAA4I,GAO7C5I,EAPA,CAA6CuK,GAAhCjX,EAAA0M,0BAUb,IAAAK,EAAA,SAAAuI,GAAA,SAAAvI,IAAA,IAAAyI,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAA4B,YAAcF,EAAYU,QAI5B,OAL4CrC,EAAAxI,EAAAuI,GAK5CvI,EALA,CAA4CoK,GAA/BnX,EAAA+M,yBAQb,IAAAE,EAAA,SAAAqI,GAAA,SAAArI,IAAA,IAAAuI,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAAS0Q,WAIlB,OALwCtC,EAAAtI,EAAAqI,GAKxCrI,EALA,CAAwCgK,GAA3BjX,EAAAiN,qBAQb,IAAAI,EAAA,SAAAiI,GAAA,SAAAjI,IAAA,IAAAmI,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAAS2Q,aAMlB,OAP0CvC,EAAAlI,EAAAiI,GAO1CjI,EAPA,CAA0C4J,GAA7BjX,EAAAqN,uBAUb,IAAAE,EAAA,SAAA+H,GAAA,SAAA/H,IAAA,IAAAiI,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAA4B,YAAcF,EAAYa,UAI5B,OAL8CxC,EAAAhI,EAAA+H,GAK9C/H,EALA,CAA8C4J,GAAjCnX,EAAAuN,2BAQb,IAAAE,EAAA,SAAA6H,GAAA,SAAA7H,IAAA,IAAA+H,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAAS6Q,MAClB,OAFmCzC,EAAA9H,EAAA6H,GAEnC7H,EAFA,CAAmC1B,GAAtB/L,EAAAyN,gBAKb,IAAAE,EAAA,SAAA2H,GAAA,SAAA3H,IAAA,IAAA6H,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASI,KAChBiO,EAAA9P,KAAO,SACT,OAHoC6P,EAAA5H,EAAA2H,GAGpC3H,EAHA,CAAoCjD,GAAvB1K,EAAA2N,iBAMb,IAAAI,EAAA,SAAAuH,GAAA,SAAAvH,IAAA,IAAAyH,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAA4B,YAAcF,EAAYe,SAM5B,OAP6C1C,EAAAxH,EAAAuH,GAO7CvH,EAPA,CAA6CoJ,GAAhCnX,EAAA+N,0BAUb,IAAAE,EAAA,SAAAqH,GAAA,SAAArH,IAAA,IAAAuH,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAAS+Q,gBAIlB,OAL6C3C,EAAAtH,EAAAqH,GAK7CrH,EALA,CAA6CgJ,GAAhCjX,EAAAiO,0BAQb,IAAAE,EAAA,SAAAmH,GAAA,SAAAnH,IAAA,IAAAqH,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASW,iBAMlB,OAP8CyN,EAAApH,EAAAmH,GAO9CnH,EAPA,CAA8C8I,GAAjCjX,EAAAmO,2BAUb,IAAAG,EAAA,SAAAgH,GAAA,SAAAhH,IAAA,IAAAkH,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAA4B,YAAcF,EAAYiB,SAM5B,OAP6C5C,EAAAjH,EAAAgH,GAO7ChH,EAPA,CAA6C6I,GAAhCnX,EAAAsO,0BAUb,IAAAM,EAAA,SAAA0G,GAAA,SAAA1G,IAAA,IAAA4G,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASiR,UAQlB,OATuC7C,EAAA3G,EAAA0G,GASvC1G,EATA,CAAuCqI,GAA1BjX,EAAA4O,oBAYb,IAAAE,EAAA,SAAAwG,GAAA,SAAAxG,IAAA,IAAA0G,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAA4B,YAAcF,EAAYmB,SAI5B,OAL6C9C,EAAAzG,EAAAwG,GAK7CxG,EALA,CAA6CqI,GAAhCnX,EAAA8O,0BAQb,IAAAE,EAAA,SAAAsG,GAAA,SAAAtG,IAAA,IAAAwG,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASmR,MAChB9C,EAAA9P,KAAO,UACT,OAHqC6P,EAAAvG,EAAAsG,GAGrCtG,EAHA,CAAqCtE,GAAxB1K,EAAAgP,kBAMb,IAAAE,EAAA,SAAAoG,GAAA,SAAApG,IAAA,IAAAsG,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASoR,KAChB/C,EAAA9P,KAAO,SACT,OAHoC6P,EAAArG,EAAAoG,GAGpCpG,EAHA,CAAoCxE,GAAvB1K,EAAAkP,iBAMb,IAAAE,EAAA,SAAAkG,GAAA,SAAAlG,IAAA,IAAAoG,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASK,KAChBgO,EAAA9P,KAAO,SACT,OAHoC6P,EAAAnG,EAAAkG,GAGpClG,EAHA,CAAoC1E,GAAvB1K,EAAAoP,iBAMb,IAAAvC,EAAA,SAAAyI,GAAA,SAAAzI,IAAA,IAAA2I,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASM,MAChB+N,EAAA9P,KAAO,UACT,OAHqC6P,EAAA1I,EAAAyI,GAGrCzI,EAHA,CAAqCnC,GAAxB1K,EAAA6M,kBAMb,IAAA2L,EAAA,SAAAlD,GAAA,SAAAkD,mDAMA,OAN8CjD,EAAAiD,EAAAlD,GAM9CkD,EANA,CAA8CvB,GAAxBjX,EAAAwY,kBAStB,IAAAjJ,EAAA,SAAA+F,GAAA,SAAA/F,IAAA,IAAAiG,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASsR,eAClB,OAF4ClD,EAAAhG,EAAA+F,GAE5C/F,EAFA,CAA4CiJ,GAA/BxY,EAAAuP,yBAKb,IAAAE,EAAA,SAAA6F,GAAA,SAAA7F,IAAA,IAAA+F,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASuR,cAClB,OAF2CnD,EAAA9F,EAAA6F,GAE3C7F,EAFA,CAA2C+I,GAA9BxY,EAAAyP,wBAMbzP,EAAA2Y,gBAAA,SAAgCjI,GAC9B,IAAIzI,EAASlE,OAAO2M,EAAUzI,QAC9B,GAAIA,EAAOZ,MAAQF,EAASyR,MAAO,CACjC,IAAIjJ,EAA8B1H,EAAQ0H,WAC1C,GAAIA,EAAWA,EAAW/J,OAAS,KAAO8K,EACxC,OAAQ3M,OAAOkE,EAAOA,QAAQZ,MAC5B,KAAKF,EAAS0R,oBACd,KAAK1R,EAAS2R,kBAAmB,OAAO,GAI9C,OAAO,GAIT,IAGYC,EAHZC,EAAA,SAAA1D,GAAA,SAAA0D,mDAA+C,OAAPzD,EAAAyD,EAAA1D,GAAO0D,EAA/C,CAAwChR,GAAlBhI,EAAAgZ,YAGtB,SAAYD,GAEVA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,qBANF,CAAYA,EAAA/Y,EAAA+Y,aAAA/Y,EAAA+Y,gBAUZ,IAAAE,EAAA,SAAA3D,GAwBE,SAAA2D,EAAY5T,EAAwBK,EAAc2B,GAAlD,IAAAmO,EACEF,EAAAxU,KAAAR,OAAOA,KAxBTkV,EAAAnO,KAAOF,EAAS+R,OAChB1D,EAAAvN,OAAS,KAeTuN,EAAA2D,UAA8B,KAE9B3D,EAAA4D,gBAAuB,EAEvB5D,EAAA6D,YAAkC,KAKhC7D,EAAK8D,WAAajS,EAClBmO,EAAKnQ,eAAiBA,EACtB,IAAImM,EAAeC,GAAmB+D,EAAKnQ,gBAC3CmQ,EAAKhE,aAAeA,EACpB,IAAI+H,EAAM/H,EAAagI,YAAYzS,EAAAnE,uBACnC4S,EAAKiE,WAAaF,GAAO,EAAI/H,EAAatL,UAAUqT,EAAM,GAAK/H,EAC/DgE,EAAK7F,WAAa,IAAIlJ,MACtB+O,EAAK9Q,MAAQ,IAAIsC,EAAAE,MAAMsO,EAAM,EAAG9P,EAAKE,QACrC4P,EAAK9P,KAAOA,IAOhB,OAzC4B6P,EAAA0D,EAAA3D,GAsC1BjU,OAAAC,eAAI2X,EAAA1W,UAAA,eAAJ,WAAsB,OAAOjC,KAAKgZ,YAAcP,EAAWW,uCAE3DrY,OAAAC,eAAI2X,EAAA1W,UAAA,iBAAJ,WAAwB,OAAOjC,KAAKgZ,YAAcP,EAAWY,yCAC/DV,EAzCA,CAA4BjR,GAAfhI,EAAAiZ,SA4Cb,IAAAW,EAAA,SAAAtE,GAAA,SAAAsE,IAAA,IAAApE,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YAKEkV,EAAAnF,WAAqC,KAE3BmF,EAAAqE,+BAAgD,KAChDrE,EAAAsE,4BAA6C,OAwDzD,OAhEmDvE,EAAAqE,EAAAtE,GAWjDjU,OAAAC,eAAIsY,EAAArX,UAAA,gCAAJ,WAIE,OAHKjC,KAAKuZ,iCACRvZ,KAAKuZ,+BAAiCE,GAAmBzZ,MAAM,IAE1DA,KAAKuZ,gEAIdxY,OAAAC,eAAIsY,EAAArX,UAAA,6BAAJ,WAIE,OAHKjC,KAAKwZ,8BACRxZ,KAAKwZ,4BAA8BC,GAAmBzZ,MAAM,IAEvDA,KAAKwZ,6DAIdzY,OAAAC,eAAIsY,EAAArX,UAAA,kBAAJ,WACE,IAAI0F,EAAS3H,KAAK2H,OAClB,QAAKA,MAGDA,EAAOZ,MAAQF,EAAS6S,YAAc/R,EAASA,EAAOA,UAGnDA,EAAOZ,MAAQF,EAAS+R,yCAIjC7X,OAAAC,eAAIsY,EAAArX,UAAA,wBAAJ,WACE,IAAI0F,EAAS3H,KAAK2H,OAClB,SAAKA,GAAWA,EAAOZ,MAAQF,EAAS6S,YAAc/R,EAASA,EAAOA,WAGlEA,EAAOZ,MAAQF,EAAS8S,qBACnB3Z,KAAK8H,GAAGrB,EAAApE,YAAYuX,SAAkCjS,EAAQkS,iBAEnElS,EAAOZ,MAAQF,EAASiT,iBACnB9Z,KAAK8H,GAAGrB,EAAApE,YAAY0X,SAA8BpS,EAAQkS,iBAE5DlS,EAAOZ,MAAQF,EAAS+R,QAAU5Y,KAAK8H,GAAGrB,EAAApE,YAAYuX,0CAI/DN,EAAArX,UAAA+X,oBAAA,SAAoBC,GAIlB,OACEA,EAAOrZ,KAAKwE,MAAQ6U,EAAO5I,aAAajM,MACxCpF,KAAKoE,MAAMU,QAAUmV,EAAO7V,MAAMU,SACjC9E,KAAK6Z,kBAGZP,EAhEA,CAAmDZ,GAA7BhZ,EAAA4Z,uBAmEtB,IAAAY,EAAA,SAAAlF,GAAA,SAAAkF,mDAMA,OAN+DjF,EAAAiF,EAAAlF,GAM/DkF,EANA,CAA+DZ,GAAzC5Z,EAAAwa,mCAStB,IAAA5K,GAAA,SAAA0F,GAAA,SAAA1F,IAAA,IAAA4F,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASyR,QAIlB,OALoCrD,EAAA3F,EAAA0F,GAKpC1F,EALA,CAAoCoJ,GAAvBhZ,EAAA4P,kBAQb,IAAAG,GAAA,SAAAuF,GAAA,SAAAvF,IAAA,IAAAyF,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASsT,QAIlB,OALoClF,EAAAxF,EAAAuF,GAKpCvF,EALA,CAAoCiJ,GAAvBhZ,EAAA+P,kBAQb,IAAAO,GAAA,SAAAgF,GAAA,SAAAhF,IAAA,IAAAkF,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASiT,mBAelB,OAhBsC7E,EAAAjF,EAAAgF,GAYpCjU,OAAAC,eAAIgP,EAAA/N,UAAA,iBAAJ,WACE,IAAI2N,EAAiB5P,KAAK4P,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAetK,OAAS,mCAE7D0K,EAhBA,CAAsCsJ,GAAzB5Z,EAAAsQ,oBAmBb,IAAAE,GAAA,SAAA8E,GAAA,SAAA9E,IAAA,IAAAgF,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASuT,WAIlB,OALuCnF,EAAA/E,EAAA8E,GAKvC9E,EALA,CAAuCwI,GAA1BhZ,EAAAwQ,qBAQb,IAAAG,GAAA,SAAA2E,GAAA,SAAA3E,IAAA,IAAA6E,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASwT,KAMlB,OAPiCpF,EAAA5E,EAAA2E,GAOjC3E,EAPA,CAAiCqI,GAApBhZ,EAAA2Q,eAUb,IAAAE,GAAA,SAAAyE,GAAA,SAAAzE,IAAA,IAAA2E,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASyT,QAClB,OAFoCrF,EAAA1E,EAAAyE,GAEpCzE,EAFA,CAAoCmI,GAAvBhZ,EAAA6Q,kBAKb,IAAAE,GAAA,SAAAuE,GAAA,SAAAvE,IAAA,IAAAyE,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAAS0T,kBAIlB,OALqCtF,EAAAxE,EAAAuE,GAKrCvE,EALA,CAAqC6I,GAAxB5Z,EAAA+Q,mBAQb,IAAAE,GAAA,SAAAqE,GAAA,SAAArE,IAAA,IAAAuE,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAAS2T,uBAKlB,OAN0CvF,EAAAtE,EAAAqE,GAM1CrE,EANA,CAA0C2I,GAA7B5Z,EAAAiR,wBASb,IAAAW,GAAA,SAAA0D,GAAA,SAAA1D,IAAA,IAAA4D,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAAS4T,eAMlB,OAP2CxF,EAAA3D,EAAA0D,GAO3C1D,EAPA,CAA2C5J,GAA9BhI,EAAA4R,yBAUb,IAAAE,GAAA,SAAAwD,GAAA,SAAAxD,IAAA,IAAA0D,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAAS6T,eAMlB,OAPkCzF,EAAAzD,EAAAwD,GAOlCxD,EAPA,CAAkC9J,GAArBhI,EAAA8R,gBAUb,IAAAV,GAAA,SAAAkE,GAAA,SAAAlE,IAAA,IAAAoE,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAAS+S,SAUlB,OAXqC3E,EAAAnE,EAAAkE,GAWrClE,EAXA,CAAqC4H,GAAxBhZ,EAAAoR,mBAcb,IAAAY,GAAA,SAAAsD,GAAA,SAAAtD,IAAA,IAAAwD,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAAS8T,aAIlB,OALyC1F,EAAAvD,EAAAsD,GAKzCtD,EALA,CAAyCgH,GAA5BhZ,EAAAgS,uBAQb,IAAAgB,GAAA,SAAAsC,GAAA,SAAAtC,IAAA,IAAAwC,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAAS+T,iBAGhB1F,EAAA2F,gBAAuB,IACzB,OALsC5F,EAAAvC,EAAAsC,GAKtCtC,EALA,CAAsCwH,GAAzBxa,EAAAgT,oBAQb,IAAAG,GAAA,SAAAmC,GAAA,SAAAnC,IAAA,IAAAqC,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASiU,MAalB,OAdkC7F,EAAApC,EAAAmC,GAclCnC,EAdA,CAAkC6F,GAArBhZ,EAAAmT,gBAiBb,IAAAI,GAAA,SAAA+B,GAAA,SAAA/B,IAAA,IAAAiC,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAAS0R,sBAalB,OAdyCtD,EAAAhC,EAAA+B,GAUvCjU,OAAAC,eAAIiS,EAAAhR,UAAA,iBAAJ,WACE,IAAI2N,EAAiB5P,KAAK4P,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAetK,OAAS,mCAE7D2N,EAdA,CAAyCqG,GAA5B5Z,EAAAuT,uBAiBb,IAAAnB,GAAA,SAAAkD,GAAA,SAAAlD,IAAA,IAAAoD,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASkU,KAQlB,OATiC9F,EAAAnD,EAAAkD,GASjClD,EATA,CAAiC4G,GAApBhZ,EAAAoS,eAYb,IAAAQ,GAAA,SAAA0C,GAAA,SAAA1C,IAAA,IAAA4C,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASmU,oBAIlB,OALuC/F,EAAA3C,EAAA0C,GAKvC1C,EALA,CAAuCgH,GAA1B5Z,EAAA4S,qBAQb,IAAAL,GAAA,SAAA+C,GAAA,SAAA/C,IAAA,IAAAiD,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASoU,SAYlB,OAbqChG,EAAAhD,EAAA+C,GAarC/C,EAbA,CAAqCyG,GAAxBhZ,EAAAuS,mBAgBb,IAAAO,GAAA,SAAAwC,GAAA,SAAAxC,IAAA,IAAA0C,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASqU,uBAClB,OAF0CjG,EAAAzC,EAAAwC,GAE1CxC,EAFA,CAA0CxC,IAA7BtQ,EAAA8S,wBAKb,IAAAW,GAAA,SAAA6B,GAAA,SAAA7B,IAAA,IAAA+B,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAAS2R,oBAClB,OAFuCvD,EAAA9B,EAAA6B,GAEvC7B,EAFA,CAAuCF,IAA1BvT,EAAAyT,qBAKb,IAAAE,GAAA,SAAA2B,GAAA,SAAA3B,IAAA,IAAA6B,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAAS8S,uBAIlB,OAL0C1E,EAAA5B,EAAA2B,GAK1C3B,EALA,CAA0CiG,GAA7B5Z,EAAA2T,wBAQb,IAAAE,GAAA,SAAAyB,GAAA,SAAAzB,IAAA,IAAA2B,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASsU,SAIlB,OALqClG,EAAA1B,EAAAyB,GAKrCzB,EALA,CAAqCmF,GAAxBhZ,EAAA6T,mBAQb,IAAAK,GAAA,SAAAoB,GAAA,SAAApB,IAAA,IAAAsB,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASuU,aAMlB,OAPgCnG,EAAArB,EAAAoB,GAOhCpB,EAPA,CAAgClM,GAAnBhI,EAAAkU,cAUb,IAAAF,GAAA,SAAAsB,GAAA,SAAAtB,IAAA,IAAAwB,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASwU,SAMlB,OAPqCpG,EAAAvB,EAAAsB,GAOrCtB,EAPA,CAAqCgF,GAAxBhZ,EAAAgU,mBAUb,IAAAI,GAAA,SAAAkB,GAAA,SAAAlB,IAAA,IAAAoB,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAASyU,QAIlB,OALoCrG,EAAAnB,EAAAkB,GAKpClB,EALA,CAAoC4E,GAAvBhZ,EAAAoU,kBAQb,IAAAK,GAAA,SAAAa,GAAA,SAAAb,IAAA,IAAAe,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAAS0U,MAUlB,OAXkCtG,EAAAd,EAAAa,GAWlCb,EAXA,CAAkCuE,GAArBhZ,EAAAyU,gBAcb,IAAAG,GAAA,SAAAU,GAAA,SAAAV,IAAA,IAAAY,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAAS2U,kBAMlB,OAPqCvG,EAAAX,EAAAU,GAOrCV,EAPA,CAAqCgF,GAAxB5Z,EAAA4U,mBAUb,IAAAI,GAAA,SAAAM,GAAA,SAAAN,IAAA,IAAAQ,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAAS4U,sBAClB,OAFyCxG,EAAAP,EAAAM,GAEzCN,EAFA,CAAyCwF,GAA5Bxa,EAAAgV,uBAKb,IAAAF,GAAA,SAAAQ,GAAA,SAAAR,IAAA,IAAAU,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAAS6S,WAMlB,OAPuCzE,EAAAT,EAAAQ,GAOvCR,EAPA,CAAuCkE,GAA1BhZ,EAAA8U,qBAUb,IAAAI,GAAA,SAAAI,GAAA,SAAAJ,IAAA,IAAAM,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAAS6U,OAIlB,OALmCzG,EAAAL,EAAAI,GAKnCJ,EALA,CAAmC8D,GAAtBhZ,EAAAkV,iBAQb,IAAAE,GAAA,SAAAE,GAAA,SAAAF,IAAA,IAAAI,EAAA,OAAAF,KAAAG,MAAAnV,KAAA4J,YAAA5J,YACEkV,EAAAnO,KAAOF,EAAS8U,QAMlB,OAPoC1G,EAAAH,EAAAE,GAOpCF,EAPA,CAAoC4D,GAqBpC,SAAgBe,GAAmB9N,EAAmCiQ,QAAA,IAAAA,OAAA,GACpE,IAAIhb,EAAO+K,EAAY/K,KAAKwE,KACxBuC,EAASgE,EAAYhE,OACzB,OAAKA,IAEHgE,EAAY5E,MAAQF,EAAS4U,qBAC7B9T,EAAOZ,MAAQF,EAAS6S,WAElB/R,EAASA,EAAOA,SAEpBA,EAAOZ,MAAQF,EAASiT,iBACnBL,GAAqC9R,EAAQiU,IAClDjQ,EAAY7D,GAAGrB,EAAApE,YAAY0X,QACvBtT,EAAA9D,iBACA8D,EAAA/D,oBACF9B,EAGJ+G,EAAOZ,MAAQF,EAAS8S,sBACxBhS,EAAOZ,MAAQF,EAAS0T,gBAEjBd,GAAyC9R,EAAQiU,GACjDnV,EAAA9D,iBAAmB/B,EAErBgb,EACHhb,EACA+K,EAAYvH,MAAMU,OAAOoM,aAAezK,EAAAnE,eAAiB1B,EAvBzCA,EA2BtB,SAAgBuQ,GAAmBN,GAEjC,OADIA,EAAKgL,SAAS,SAAQhL,EAAOA,EAAKjL,UAAU,EAAGiL,EAAKvL,OAAS,IAC1DuL,EAMT,SAAStI,GAAUmC,EAAe/C,GAChC,IAAK,IAAItH,EAAI,EAAGsK,EAAID,EAAMpF,OAAQjF,EAAIsK,IAAKtK,EACzCqK,EAAMrK,GAAGsH,OAASA,EA7DTjI,EAAAoV,kBAUbpV,EAAAoc,cAAA,SAA8B/U,EAAqBgJ,GACjD,GAAIA,EACF,IAAK,IAAI1P,EAAI,EAAGsK,EAAIoF,EAAWzK,OAAQjF,EAAIsK,IAAKtK,EAAG,CACjD,IAAI0b,EAAYhM,EAAW1P,GAC3B,GAAI0b,EAAUlS,eAAiB9C,EAAM,OAAOgV,EAGhD,OAAO,MAITrc,EAAA+Z,sBA8BA/Z,EAAAyR,q7BCv7DA,IAyIY6K,EAzIZvV,EAAAtG,EAAA,GAgBA8b,EAAA9b,EAAA,GAMA+b,EAAA/b,EAAA,GAOAgc,EAAAhc,EAAA,GAsCAic,EAAAjc,EAAA,GAsCAkc,EAAAlc,EAAA,GAKAmc,EAAA,WAKA,OALA,gBAQAC,EAAA,WAIA,OAJA,gBAOAC,EAAA,WAGA,OAHA,gBA4DA,SAASC,EAA0B5S,EAA8B6S,GAE/D,OADAjZ,OAAOiZ,EAAIpX,QACHuE,GACN,KAAKsS,EAAA1G,cAAcO,SACnB,KAAKmG,EAAA1G,cAAcW,gBACjB,OAAQsG,EAAIhX,WAAW,IACrB,QACE,GAAW,MAAPgX,EAAa,OAAOV,EAAaW,YACrC,GAAW,OAAPD,EAAc,OAAOV,EAAaY,YACtC,MAEF,SACE,GAAW,MAAPF,EAAa,OAAOV,EAAaa,sBACrC,GAAW,OAAPH,EAAc,OAAOV,EAAac,sBACtC,MAEF,QACE,GAAW,KAAPJ,EAAY,OAAOV,EAAae,IACpC,MAEF,QACE,GAAW,KAAPL,EAAY,OAAOV,EAAagB,IACpC,MAEF,QACE,GAAW,KAAPN,EAAY,OAAOV,EAAaiB,IACpC,GAAW,MAAPP,EAAa,OAAOV,EAAakB,IACrC,MAEF,QACE,GAAW,KAAPR,EAAY,OAAOV,EAAamB,IACpC,MAEF,QACE,GAAW,KAAPT,EAAY,OAAOV,EAAaoB,IACpC,MAEF,QACE,GAAW,KAAPV,EAAY,OAAOV,EAAaqB,YACpC,MAEF,SACE,GAAW,KAAPX,EAAY,OAAOV,EAAasB,WACpC,MAEF,QACE,GAAW,KAAPZ,EAAY,OAAOV,EAAauB,YACpC,MAEF,QACE,GAAW,MAAPb,EAAa,OAAOV,EAAawB,GACrC,MAEF,QACE,GAAW,MAAPd,EAAa,OAAOV,EAAayB,GACrC,MAEF,QACE,GAAW,KAAPf,EAAY,OAAOV,EAAa0B,GACpC,GAAW,MAAPhB,EAAa,OAAOV,EAAa2B,GACrC,GAAW,MAAPjB,EAAa,OAAOV,EAAa4B,YACrC,GAAW,OAAPlB,EAAc,OAAOV,EAAa6B,cACtC,MAEF,QACE,GAAW,KAAPnB,EAAY,OAAOV,EAAa8B,GACpC,GAAW,MAAPpB,EAAa,OAAOV,EAAa+B,GACrC,GAAW,MAAPrB,EAAa,OAAOV,EAAagC,YAIzC,MAEF,KAAK7B,EAAA1G,cAAcY,gBACjB,OAAQqG,EAAIhX,WAAW,IACrB,QACE,GAAW,KAAPgX,EAAY,OAAOV,EAAaiC,KACpC,GAAW,MAAPvB,EAAa,OAAOV,EAAakC,WACrC,MAEF,QACE,GAAW,KAAPxB,EAAY,OAAOV,EAAamC,MACpC,GAAW,MAAPzB,EAAa,OAAOV,EAAaoC,WACrC,MAEF,QACE,GAAW,KAAP1B,EAAY,OAAOV,EAAaqC,IACpC,MAEF,SACE,GAAW,KAAP3B,EAAY,OAAOV,EAAasC,YAIxC,MAEF,KAAKnC,EAAA1G,cAAca,iBACjB,OAAQoG,EAAIhX,WAAW,IACrB,QACE,GAAW,MAAPgX,EAAa,OAAOV,EAAauC,YACrC,MAEF,QACE,GAAW,MAAP7B,EAAa,OAAOV,EAAawC,aAO7C,OAAOxC,EAAayC,SA9JtB,SAAYzC,GACVA,IAAA,qBAGAA,IAAA,6BACAA,IAAA,6BACAA,IAAA,iDACAA,IAAA,iDAGAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,4BACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,kCACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YAGAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,4BACAA,IAAA,4BAGAA,IAAA,8BACAA,IAAA,8BAvCF,CAAYA,EAAAtc,EAAAsc,eAAAtc,EAAAsc,kBAiKZ,IAiuDY0C,EAmCAC,EApwDNC,EAAa,IAAIC,IAGvBC,EAAA,SAAA9J,GAoDE,SAAA8J,EAAY5Y,QAAA,IAAAA,MAAA,MAAZ,IAAAgP,EACEF,EAAAxU,KAAAR,KAAMkG,IAAYlG,YA9CpBkV,EAAA6J,kBAAyB,EAKzB7J,EAAA8J,eAAsC,IAAIH,IAE1C3J,EAAA+J,gBAAuC,IAAIJ,IAE3C3J,EAAAgK,YAAgCN,EAEhC1J,EAAAiK,YAAqC,IAAIN,IAEzC3J,EAAAkK,iBAAwC,IAAIP,IAE5C3J,EAAAmK,mBAA+C,IAAIR,IAGnD3J,EAAAoK,eAAwC,KAExCpK,EAAAqK,eAA+B,KAI/BrK,EAAAsK,aAAyC,KAEzCtK,EAAAuK,cAAiC,KAEjCvK,EAAAwK,uBAA0C,KAG1CxK,EAAAyK,OAAc,EAEdzK,EAAA0K,mBAAsC,KAEtC1K,EAAA2K,eAAkC,KAElC3K,EAAA4K,eAAkC,KAElC5K,EAAA6K,aAAoB,EAQlB7K,EAAK8K,SAAW,IAAI3D,EAAA4D,SAAS/K,GAC7BA,EAAKgL,aAoqDT,OA3tD6BjL,EAAA6J,EAAA9J,GA2D3B8J,EAAA7c,UAAAke,UAAA,SAAUpb,GAER,IADA,IAAImb,EAAUlgB,KAAKkgB,QACV7f,EAAI,EAAGsK,EAAIuV,EAAQ5a,OAAQjF,EAAIsK,IAAKtK,EAAG,CAC9C,IAAIyE,EAASob,EAAQ7f,GACrB,GAAIyE,EAAOC,gBAAkBA,EAAgB,OAAOD,EAEtD,OAAO,MAITga,EAAA7c,UAAAme,mBAAA,SAAmBC,GACjB,IAAIC,EACJ,OACEtgB,KAAKmgB,UAAUE,EAAiC,QAChDrgB,KAAKmgB,UAAUE,EAAiC,cAChDrgB,KAAKmgB,WAAWG,EAAM7Z,EAAA3D,eAAiBud,GAAkC,QACzErgB,KAAKmgB,UAAWG,EAAyD,cAK7ExB,EAAA7c,UAAAse,WAAA,SAAWC,eACTxgB,KAAKwgB,QAAUA,EAGfxgB,KAAKkf,YAAc,IAAIL,MACpB,KAAM3C,EAAAuE,KAAKC,KACX,MAAOxE,EAAAuE,KAAKE,MACZ,MAAOzE,EAAAuE,KAAKG,MACZ,MAAO1E,EAAAuE,KAAKI,MACZ,QAASL,EAAQM,YACjB,KAAM5E,EAAAuE,KAAKM,KACX,MAAO7E,EAAAuE,KAAKO,MACZ,MAAO9E,EAAAuE,KAAKQ,MACZ,MAAO/E,EAAAuE,KAAKS,MACZ,QAASV,EAAQW,YACjB,OAAQjF,EAAAuE,KAAKW,OACb,MAAOlF,EAAAuE,KAAKY,MACZ,MAAOnF,EAAAuE,KAAKa,MACZ,OAAQpF,EAAAuE,KAAKc,OACb,SAAUrF,EAAAuE,KAAKa,MACf,UAAWpF,EAAAuE,KAAKW,QAInBphB,KAAKwhB,mBAAmB,aAActF,EAAAuE,KAAKG,IACzCa,QAAQjB,EAAQkB,SAAW,EAAI,IACjC1hB,KAAKwhB,mBAAmB,qBAAsBtF,EAAAuE,KAAKW,KACjDK,QAAQjB,EAAQmB,cAAgB,EAAI,EAAG,IACzC3hB,KAAKwhB,mBAAmB,gBAAiBtF,EAAAuE,KAAKW,KAC5CK,QAAQjB,EAAQoB,SAAW,EAAI,EAAG,IACpC5hB,KAAKwhB,mBAAmB,kBAAmBtF,EAAAuE,KAAKG,IAC9Ca,QAAQjB,EAAQqB,WAAY,IAC9B7hB,KAAKwhB,mBAAmB,qBAAsBtF,EAAAuE,KAAKG,IACjDa,QAAQjB,EAAQsB,kBAAmB,IACrC9hB,KAAKwhB,mBAAmB,mBAAoBtF,EAAAuE,KAAKG,IAC/Ca,QAAQjB,EAAQuB,gBAAiB,IACnC/hB,KAAKwhB,mBAAmB,6BAA8BtF,EAAAuE,KAAKW,KACzDK,QAAQjB,EAAQwB,WAAU,GAA2B,EAAI,EAAG,IAC9DhiB,KAAKwhB,mBAAmB,6BAA8BtF,EAAAuE,KAAKW,KACzDK,QAAQjB,EAAQwB,WAAU,GAA2B,EAAI,EAAG,IAS9D,IANA,IAAIC,EAAgB,IAAI9b,MACpB+b,EAAgB,IAAIrD,IACpBsD,EAAgB,IAAIhc,MACpBic,EAAmB,IAAIjc,MAGlB9F,EAAI,EAAGsK,EAAI3K,KAAKkgB,QAAQ5a,OAAQjF,EAAIsK,IAAKtK,EAAG,CACnD,IAAIyE,EAAS9E,KAAKkgB,QAAQ7f,GAGtBgiB,EAAY,IAAIC,EAAUtiB,KAAM8E,GACpC9E,KAAKgf,eAAe/W,IAAIoa,EAAUE,aAAcF,GAChDriB,KAAKwiB,iBAAmBH,EAIxB,IADA,IAAIhT,EAAavK,EAAOuK,WACfoT,EAAI,EAAGniB,EAAI+O,EAAW/J,OAAQmd,EAAIniB,IAAKmiB,EAAG,CACjD,IAAIrS,EAAYf,EAAWoT,GAC3B,OAAQrS,EAAUrJ,MAChB,KAAKoV,EAAAtV,SAASiT,iBACZ9Z,KAAK0iB,gBAAkCtS,EAAW+R,EAAeC,GACjE,MAEF,KAAKjG,EAAAtV,SAAS0T,gBACZva,KAAK2iB,eAAgCvS,GACrC,MAEF,KAAK+L,EAAAtV,SAAS+S,OACZ5Z,KAAK4iB,kBAAmCxS,EAAW8R,GACnD,MAEF,KAAK/F,EAAAtV,SAAS0R,oBACZvY,KAAK6iB,mBAAwCzS,GAC7C,MAEF,KAAK+L,EAAAtV,SAASoU,OACZjb,KAAK8iB,kBAAmC1S,EAAW8R,EAAeD,GAClE,MAEF,KAAK9F,EAAAtV,SAASqU,qBACZlb,KAAK+iB,oBAA0C3S,GAC/C,MAEF,KAAK+L,EAAAtV,SAAS8S,qBACZ3Z,KAAKgjB,oBAA0C5S,EAAW+R,EAAeC,GACzE,MAEF,KAAKjG,EAAAtV,SAAS2U,gBACZxb,KAAKijB,oBAAqC7S,GAC1C,MAEF,KAAK+L,EAAAtV,SAAS6S,SACZ1Z,KAAKkjB,oBAAuC9S,KAQpD,IAAS/P,EAAI,EAAGA,EAAI4hB,EAAc3c,QAAS,CACzC,IAAI6d,EAAelB,EAAc5hB,GAEjC,GADIsL,EAAcwX,EAAaxX,aAEzBQ,EAAUnM,KAAKojB,gBAAgBD,EAAa9R,aAAc6Q,KAE5DliB,KAAKgf,eAAe/W,IAAIkb,EAAaE,UAAWlX,GAChD8V,EAAcqB,OAAOjjB,EAAG,KAEpB8L,EAAUnM,KAAKojB,gBAAgBD,EAAaI,gBAAiBrB,KAC/DliB,KAAKgf,eAAe/W,IAAIkb,EAAaE,UAAWlX,GAChD8V,EAAcqB,OAAOjjB,EAAG,KAExBL,KAAKuG,MACH0V,EAAAnY,eAAe0f,kCACf7X,EAAYvH,MACMuH,EAAYhE,OAAQkJ,KAAKvP,MAC3CqK,EAAY0F,aAAajM,QAEzB/E,QAIF8L,EAAUnM,KAAKgf,eAAe9d,IAAIiiB,EAAa9R,gBAEjDrR,KAAKgf,eAAe/W,IAAIkb,EAAaE,UAAWlX,GAChD8V,EAAcqB,OAAOjjB,EAAG,KAEpB8L,EAAUnM,KAAKgf,eAAe9d,IAAIiiB,EAAaI,mBACjDvjB,KAAKgf,eAAe/W,IAAIkb,EAAaE,UAAWlX,GAChD8V,EAAcqB,OAAOjjB,EAAG,KAExBoD,QAAO,KACLpD,OAOV,IAAuC,IAAAojB,EAAAC,EAAAxB,GAAayB,EAAAF,EAAAG,QAAAD,EAAAE,KAAAF,EAAAF,EAAAG,OAAE,CAA7C,IAAAE,EAAAC,EAAAJ,EAAAriB,MAAA,GAAC0iB,EAAAF,EAAA,GAAYG,EAAAH,EAAA,GAChBI,EAAqCD,EACrC9X,OAAO,EACX,EAAG,CACD,IAAI+X,EAAcC,WAkBX,EAGFhY,EAAUnM,KAAKgf,eAAe9d,IAAIgjB,EAAc7S,iBAEhDlF,EAAUnM,KAAKgf,eAAe9d,IAAIgjB,EAAcjK,OAAOrZ,KAAKwE,OAE7DpF,KAAKokB,yBACHJ,EACA7X,EACA+X,EAAcjK,OAAO5I,cAGvBrR,KAAKuG,MACH0V,EAAAnY,eAAeugB,mBACfJ,EAAahK,OAAO7V,MAAO6f,EAAahK,OAAOrZ,KAAKwE,MAGxD,MAnCA,GAAI+G,EAAUnM,KAAKof,iBAAiBle,IAAIgjB,EAAc7S,cAAe,CACnErR,KAAKokB,yBACHJ,EACA7X,EACA+X,EAAcjK,OAAO5I,cAEvB,OAEF6S,EAAgBhC,EAAchhB,IAAIgjB,EAAc7S,gBAE9CrR,KAAKuG,MACH0V,EAAAnY,eAAe0f,kCACfS,EAAahK,OAAO5I,aAAajN,MACW6f,EAAahK,OAAOtS,OAAQkJ,KAAMvP,MAC9E2iB,EAAahK,OAAO5I,aAAajM,YAuBhC8e,qGAIX,IAAIlE,EAAWhgB,KAAKggB,SACpB,IAAS3f,EAAI,EAAGsK,EAAIwX,EAAc7c,OAAQjF,EAAIsK,IAAKtK,EAAG,CACpD,IAAIikB,EAAmBnC,EAAc9hB,GACjCkkB,EAAqBD,EAAiB3Y,YACtC6Y,EAAc/gB,OAAO8gB,EAAmB5b,aACxC8b,EAAczE,EAAS0E,kBAAkBF,EAAY5jB,KAAM,MAC/D,GAAK6jB,EACL,GAAIA,EAAY1d,MAAQ2X,EAAYiG,gBAAiB,CACnD,IAAIC,EAAgCH,EACpCH,EAAiBM,cAAgBA,OAEjC5kB,KAAKuG,MACH0V,EAAAnY,eAAe+gB,sCACfL,EAAYpgB,OAOhB,IAAI0gB,EAAgBtE,EAAQsE,cAC5B,GAAIA,MACF,IAA0B,IAAAC,EAAArB,EAAAoB,GAAaE,EAAAD,EAAAnB,QAAAoB,EAAAnB,KAAAmB,EAAAD,EAAAnB,OAAE,CAAhC,IAAAqB,EAAAlB,EAAAiB,EAAA1jB,MAAA,GAAC+S,EAAA4Q,EAAA,GAAOrkB,EAAAqkB,EAAA,GACf,GAAKrkB,EAAK0E,OAAV,CAEA,KADI6G,EAAUnM,KAAKgf,eAAe9d,IAAIN,IAEjC,MAAM,IAAIskB,MAAM,sBAAwBtkB,GADhCZ,KAAKgf,eAAe/W,IAAIoM,EAAOlI,sGAOlD,GAAInM,KAAKgf,eAAemG,IAAI,SAAU,CAChChZ,EAAU1I,OAAOzD,KAAKgf,eAAe9d,IAAI,UAC7CuC,OAAO0I,EAAQpF,MAAQ2X,EAAYiG,iBACnC3kB,KAAKsf,eAAiCnT,EAIxC,GAAInM,KAAKgf,eAAemG,IAAI,UAAW,CACjChZ,EAAU1I,OAAOzD,KAAKgf,eAAe9d,IAAI,WAG7C,GAFAuC,OAAO0I,EAAQpF,MAAQ2X,EAAYiG,iBAC/BS,EAAWpF,EAASqF,aAA6BlZ,EAAS,MAE5D,GAAInM,KAAKkf,YAAYiG,IAAI,UAAW,CAClC,IAAIxZ,EAA+BQ,EAASR,YAC5C3L,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,MAAOuH,EAAY4Z,+BAGtCvlB,KAAKuf,eAAiB6F,EACtBplB,KAAKkf,YAAYjX,IAAI,SAAUmd,EAAS/c,MAOxC8D,EAAU1I,OAAOzD,KAAKgf,eAAe9d,IAAI,WAC7CuC,OAAO0I,EAAQpF,MAAQ2X,EAAY8G,oBACnCxlB,KAAKylB,cAAmCtZ,EAItCnM,KAAKqf,mBAAmB8F,IAAI,YAC1BhZ,EAAyBnM,KAAKqf,mBAAmBne,IAAI,QAASiL,SAExDpF,MAAQ2X,EAAY8G,oBACPrZ,EAASnE,MAAMvB,EAAApE,YAAYqjB,QAAUjf,EAAApE,YAAYsjB,WAElDxZ,EAASlE,IAAIxB,EAAApE,YAAYujB,MAC7C5lB,KAAKwf,aAAkCrT,IAK3C,GAAInM,KAAKgf,eAAemG,IAAI,SAAU,CAChChZ,EAAmBnM,KAAKgf,eAAe9d,IAAI,SAC/CuC,OAAO0I,EAAQpF,MAAQ2X,EAAY8G,qBAC/BJ,EAAWplB,KAAKggB,SAAS6F,gBAAmC1Z,EAAS,SAC3DnM,KAAKyf,cAAgB2F,GAIrC,GAAIplB,KAAKgf,eAAemG,IAAI,UAAW,CACrC,IAMQC,EALJtV,GADA3D,EAAmBnM,KAAKgf,eAAe9d,IAAI,WACzB4O,QACtB,GAAIA,EACF,GAAIA,EAAQqV,IAAI,YACdhZ,EAAU1I,OAAOqM,EAAQ5O,IAAI,aAC7BuC,OAAO0I,EAAQpF,MAAQ2X,EAAY8G,qBAC/BJ,EAAWplB,KAAKggB,SAAS6F,gBAAmC1Z,EAAS,SAC3DnM,KAAK0f,uBAAyB0F,GAMlD,GACEplB,KAAKgf,eAAemG,IAAI,kBACxBnlB,KAAKgf,eAAemG,IAAI,cACxBnlB,KAAKgf,eAAemG,IAAI,aACxB,CAEIhZ,EAAmBnM,KAAKgf,eAAe9d,IAAI,iBAC/CuC,OAAO0I,EAAQpF,MAAQ2X,EAAY8G,oBACnC,IAAI5F,EAAqBnc,OAAOzD,KAAKggB,SAAS6F,gBAAmC1Z,EAAS,OACtF4G,EAAY6M,EAAmB7M,UACnCtP,OAA0C,GAAnCsP,EAAU+S,eAAexgB,QAChC7B,OAAOsP,EAAU+S,eAAe,IAAM9lB,KAAKwgB,QAAQW,WACnD1d,OAAOsP,EAAU+S,eAAe,GAAGC,oBACnCtiB,OAAOsP,EAAU3J,YAAcpJ,KAAKwgB,QAAQW,WAG5ChV,EAAmBnM,KAAKgf,eAAe9d,IAAI,aAC3CuC,OAAO0I,EAAQpF,MAAQ2X,EAAY8G,oBACnC,IAAI3F,EAAiBpc,OAAOzD,KAAKggB,SAAS6F,gBAAmC1Z,EAAS,OACtF4G,EAAY8M,EAAe9M,UAC3BtP,OAA0C,GAAnCsP,EAAU+S,eAAexgB,QAChC7B,OAAOsP,EAAU+S,eAAe,IAAM9lB,KAAKwgB,QAAQW,WACnD1d,OAAOsP,EAAU+S,eAAe,IAAM9lB,KAAKwgB,QAAQW,WACnD1d,OAAOsP,EAAU3J,YAAc8S,EAAAuE,KAAKc,MAGpCpV,EAAmBnM,KAAKgf,eAAe9d,IAAI,aAC3CuC,OAAO0I,EAAQpF,MAAQ2X,EAAY8G,oBACnC,IAAI1F,EAAiBrc,OAAOzD,KAAKggB,SAAS6F,gBAAmC1Z,EAAS,OACtF4G,EAAY+M,EAAe/M,UAC3BtP,OAA0C,GAAnCsP,EAAU+S,eAAexgB,QAChC7B,OAAOsP,EAAU+S,eAAe,IAAM9lB,KAAKwgB,QAAQW,WACnD1d,OAAOsP,EAAU3J,YAAc8S,EAAAuE,KAAKc,MAEpCvhB,KAAK4f,mBAAqBA,EAC1B5f,KAAK6f,eAAiBA,EACtB7f,KAAK8f,eAAiBA,EACtB9f,KAAK+f,aAAgB,EAAIS,EAAQW,UAAU6E,SAAW,EAAI,GAAK,EAC/DhmB,KAAK2f,OAAQ,IAKjBb,EAAA7c,UAAAuf,mBAAA,SAAmByE,EAAoB5d,EAAY/G,GACjDmC,OAAO4E,EAAKP,GAAE,IACd9H,KAAKgf,eAAe/W,IAAIge,EACtB,IAAIC,EAAOlmB,KAAMimB,EAAYA,EAAY5d,EAAM,KAAMsW,EAAe9W,MACjEse,yBAAyB7kB,KAKhCwd,EAAA7c,UAAAmkB,iBAAA,SAAiBH,EAAoB5d,EAAY/G,GAC/CmC,OAAO4E,EAAKP,GAAE,IACd9H,KAAKgf,eAAe/W,IAAIge,EACtB,IAAIC,EAAOlmB,KAAMimB,EAAYA,EAAY5d,EAAM,KAAMsW,EAAe9W,MACjEwe,uBAAuB/kB,KAKtBwd,EAAA7c,UAAAmhB,gBAAR,SACE/R,EACAiV,GAIA,IAFA,IAAIna,EACAiT,EAAmBpf,KAAKof,mBACzB,CACD,GAAIjT,EAAUiT,EAAiBle,IAAImQ,GAAe,OAAOlF,EACzD,IAAI8X,EAAeqC,EAAmBplB,IAAImQ,GAC1C,IAAK4S,EAAc,MACnB,IAAIA,EAAaE,WAIjB,OAAOnkB,KAAKgf,eAAe9d,IAAI+iB,EAAa5S,cAH1CA,EAAe4S,EAAa5S,aAKhC,OAAO,MAIDyN,EAAA7c,UAAAskB,gBAAR,SACExW,EACAyW,GAGA,IADA,IAAIC,EAAe9H,EAAe9W,KACzBxH,EAAI,EAAGsK,EAAIoF,EAAWzK,OAAQjF,EAAIsK,IAAKtK,EAAG,CACjD,IAAI0b,EAAYhM,EAAW1P,GAEvB0H,EAAO2e,EADAvK,EAAArS,oBAAoBiS,EAAUnb,OAErCmH,IACEA,GAAQ4W,EAAe/I,QACrBmG,EAAU3X,MAAMU,OAAO6hB,UACzBF,GAAgB1e,EAEhB/H,KAAKuG,MACH0V,EAAAnY,eAAe8iB,8BACf7K,EAAU3X,MAAO2X,EAAUnb,KAAKwD,MAAMS,YAG/B2hB,EAAgBze,EAKlB0e,EAAe1e,EACxB/H,KAAKuG,MACH0V,EAAAnY,eAAe+iB,oBACf9K,EAAU3X,MAAO2X,EAAUnb,KAAKwD,MAAMS,YAGxC4hB,GAAgB1e,EAVhB/H,KAAKuG,MACH0V,EAAAnY,eAAe8iB,8BACf7K,EAAU3X,MAAO2X,EAAUnb,KAAKwD,MAAMS,aAY9C,OAAO4hB,GAID3H,EAAA7c,UAAA6kB,YAAR,SACE3a,EACAR,GAEA,IAAIob,EAAapb,EAAYhE,OAE7B,GACGwE,EAAQ6a,aAAarI,EAAe7I,SAEnCnK,EAAYvH,MAAMU,OAAO6hB,WACzBxa,EAAQrE,GAAGrB,EAAApE,YAAYuX,UAErBnW,OAAOsjB,GAAYhgB,MAAQoV,EAAAtV,SAAS+R,QAE5BmO,EAAYhgB,MAAQoV,EAAAtV,SAAS6S,UACnCjW,OAAcsjB,EAAYpf,QAAQZ,MAAQoV,EAAAtV,SAAS+R,QAGzD,CACA,IAAIqN,EAAata,EAAY4Z,yBACzBvlB,KAAKgf,eAAemG,IAAIc,GAC1BjmB,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,MAAO+H,EAAQoW,cAGlCviB,KAAKgf,eAAe/W,IAAIge,EAAY9Z,GAIpCA,EAAQ6a,aAAarI,EAAe/I,WACtCzJ,EAAQoW,aAAe5W,EAAY4Z,2BAK/BzG,EAAA7c,UAAAygB,gBAAR,SACE/W,EACAwW,EACAC,EACA6E,QAAA,IAAAA,MAAA,MAEA,IAAI1E,EAAe5W,EAAYub,sBAC/B,GAAIlnB,KAAKgf,eAAemG,IAAI5C,GAC1BviB,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,MAAOme,OAH5B,CAQA,IAAIxS,EAAapE,EAAYoE,WACzBoX,EAAaxb,EAAY/K,KAAKwE,KAC9BnD,EAAY,IAAImlB,EAClBpnB,KACAmnB,EACA5E,EACA5W,EACAoE,EACI/P,KAAKumB,gBAAgBxW,EACnB4O,EAAe7I,OACf6I,EAAe1I,OACf0I,EAAezI,WAEjByI,EAAe9W,MAErB5F,EAAU0F,OAASsf,EACnBjnB,KAAKgf,eAAe/W,IAAIsa,EAActgB,GAEtC,IAAI4N,EAAkBlE,EAAYkE,gBAClC,GAAIA,EAAiB,CACnB,IAAIwX,EAAqBxX,EAAgBvK,OACzC,GAAIrD,EAAU+kB,aAAarI,EAAezI,WACpCmR,GACFrnB,KAAKuG,MACH0V,EAAAnY,eAAewjB,8CACfnL,EAAAvV,MAAMd,KACJ6F,EAAY/K,KAAKwD,MACjByL,EAAgBwX,EAAqB,GAAGjjB,aAMzC,GAAIijB,EAAoB,CAC7B,IAAK,IAAIhnB,EAAI,EAAGA,EAAIgnB,IAAsBhnB,EACxCL,KAAKsG,QACH2V,EAAAnY,eAAeyjB,wBACf1X,EAAgBxP,GAAG+D,OAGvBge,EAAiBvc,KAAK5D,IAQ1B,GAHI0J,EAAYhD,aAAawZ,EAActc,KAAK5D,GAG5CglB,EAAW,CACb,GAAIA,EAAUnX,SACZ,GAAImX,EAAUnX,QAAQqV,IAAIgC,GAKxB,YAJAnnB,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,MAAOme,QAK5B0E,EAAUnX,QAAU,IAAI+O,IAE1BoI,EAAUnX,QAAQ7H,IAAIkf,EAAYllB,GAC9BglB,EAAUnf,GAAGrB,EAAApE,YAAYmlB,gBAAkBvlB,EAAU6F,GAAGrB,EAAApE,YAAYuX,SACtE3X,EAAUgG,IAAIxB,EAAApE,YAAYmlB,oBAIvB,GAAIvlB,EAAU6F,GAAGrB,EAAApE,YAAYuX,QAAS,CAC3C,GAAI5Z,KAAKof,iBAAiB+F,IAAI5C,GAK5B,YAJAviB,KAAKuG,MACH0V,EAAAnY,eAAe2jB,4DACf9b,EAAY/K,KAAKwD,MAAOme,GAM5B,GAFAviB,KAAKof,iBAAiBnX,IAAIsa,EAActgB,GACxCjC,KAAKwiB,iBAAiB1S,QAAQ7H,IAAIkf,EAAYllB,GAC1CA,EAAU6F,GAAGrB,EAAApE,YAAYuX,SAAWjO,EAAYvH,MAAMU,OAAO4iB,QAAS,CACxE,GAAI1nB,KAAKqf,mBAAmB8F,IAAIgC,GAAa,CAC3C,IAAIQ,EAA+B3nB,KAAKqf,mBAAmBne,IAAIimB,GAK/D,YAJAnnB,KAAKuG,MACH0V,EAAAnY,eAAe2jB,4DACf9b,EAAY/K,KAAKwD,MAAOujB,EAAexb,QAAQoW,cAInDtgB,EAAUgG,IAAIxB,EAAApE,YAAYmlB,eAC1BxnB,KAAKqf,mBAAmBpX,IAAIkf,GAC1Bhb,QAASlK,EACT0N,WAAYhE,EAAY/K,QAO9B,IADA,IAAIgnB,EAAqBjc,EAAYmE,QACrBnF,GAAPtK,EAAI,EAAOunB,EAAmBtiB,QAAQjF,EAAIsK,IAAKtK,EAAG,CACzD,IAAIwnB,EAAoBD,EAAmBvnB,GAC3C,OAAQwnB,EAAkB9gB,MACxB,KAAKoV,EAAAtV,SAAS+T,iBACZ5a,KAAK8nB,gBAAkCD,EAAmB5lB,GAC1D,MAEF,KAAKka,EAAAtV,SAAS2R,kBACRqP,EAAkB7f,MAAMvB,EAAApE,YAAY0lB,IAAMthB,EAAApE,YAAY2lB,KACxDhoB,KAAKioB,mBAAsCJ,EAAmB5lB,GAE9DjC,KAAKkoB,iBAAoCL,EAAmB5lB,GAE9D,MAEF,QAEE,YADAwB,QAAO,IAMbzD,KAAK8mB,YAAY7kB,EAAW0J,KAItBmT,EAAA7c,UAAA6lB,gBAAR,SACEnc,EACAwc,GAEA,IAAIvnB,EAAO+K,EAAY/K,KAAKwE,KACxBmd,EAAe5W,EAAYub,sBAC3BnX,EAAapE,EAAYoE,WACzBqY,EAAcD,EAAephB,MAAQ2X,EAAY2J,oBAGrD,GAAI1c,EAAY7D,GAAGrB,EAAApE,YAAY0X,QAAS,CAKtC,GAJIqO,GAEF3kB,QAAO,GAELzD,KAAKgf,eAAemG,IAAI5C,GAK1B,YAJAviB,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,MAAOme,GAI5B,GAAI4F,EAAerY,SACjB,GAAIqY,EAAerY,QAAQqV,IAAIvkB,GAK7B,YAJAZ,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,MAAOme,QAK5B4F,EAAerY,QAAU,IAAI+O,IAE/B,IAAIyJ,EAAc,IAAIpC,EACpBlmB,KACAY,EACA2hB,EACArG,EAAAuE,KAAKc,KACL5V,EACAoE,EACI/P,KAAKumB,gBAAgBxW,EAAY4O,EAAe5I,QAChD4I,EAAe9W,MAErBygB,EAAY3gB,OAASwgB,EACrBA,EAAerY,QAAQ7H,IAAIrH,EAAM0nB,GACjCtoB,KAAKgf,eAAe/W,IAAIsa,EAAc+F,GAClCH,EAAergB,GAAGrB,EAAApE,YAAYmlB,gBAChCc,EAAYrgB,IAAIxB,EAAApE,YAAYmlB,eAG1Bc,EAAYtB,aAAarI,EAAe5I,UAAYuS,EAAYxgB,GAAGrB,EAAApE,YAAYkmB,WACjFvoB,KAAKuG,MACH0V,EAAAnY,eAAe8iB,8BACfnjB,OAAO0Y,EAAAL,cAAcK,EAAA1G,cAAcM,OAAQhG,IAAa3L,MAAO,cAK9D,CAKL,GAJIgkB,GAEF3kB,QAAQkI,EAAY3D,MAAMvB,EAAApE,YAAYmmB,SAAW/hB,EAAApE,YAAY0lB,IAAMthB,EAAApE,YAAY2lB,MAE7EG,EAAeM,iBACjB,GAAIN,EAAeM,gBAAgBtD,IAAIvkB,GAKrC,YAJAZ,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,MAAOme,QAK5B4F,EAAeM,gBAAkB,IAAI5J,IAEvC,IAAI6J,EAAgB,IAAIC,EACtBR,EACAvnB,EACA2hB,EACA5W,GAEEoE,GAAY/P,KAAKumB,gBAAgBxW,EAAY4O,EAAe9W,MAChEsgB,EAAeM,gBAAgBxgB,IAAIrH,EAAM8nB,KAKrC5J,EAAA7c,UAAAimB,iBAAR,SACEvc,EACAwc,GAEA,IAAIhB,EAAaxb,EAAY/K,KAAKwE,KAC9Bmd,EAAe5W,EAAYub,sBAC3BjlB,EAAsC,KAEtC8N,EAAapE,EAAYoE,WACzB6Y,EAAiBjK,EAAe9W,KAWpC,GAVIkI,IACF6Y,EAAiB5oB,KAAKumB,gBAAgBxW,EACpC4O,EAAevI,gBACfuI,EAAetI,gBACfsI,EAAerI,iBACfqI,EAAe5I,SAKfpK,EAAY7D,GAAGrB,EAAApE,YAAY0X,QAAS,CAGtC,GAFAtW,OAAOkI,EAAY/K,KAAKmG,MAAQoV,EAAAtV,SAASwQ,aAErCrX,KAAKgf,eAAemG,IAAI5C,GAK1B,YAJAviB,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBAAwB3Z,EAAY/K,KAAKwD,MACxDme,GAIJ,GAAI4F,EAAerY,SACjB,GAAIqY,EAAerY,QAAQqV,IAAIgC,GAK7B,YAJAnnB,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,MAAOme,QAK5B4F,EAAerY,QAAU,IAAI+O,IAE/B5c,EAAY,IAAI4mB,EACd7oB,KACAmnB,EACA5E,EACA5W,EACAwc,EACAS,GAEFT,EAAerY,QAAQ7H,IAAIkf,EAAYllB,GACvCjC,KAAKgf,eAAe/W,IAAIsa,EAActgB,GAClCkmB,EAAergB,GAAGrB,EAAApE,YAAYmlB,gBAChCvlB,EAAUgG,IAAIxB,EAAApE,YAAYmlB,mBAIvB,CACL,GAAIW,EAAeM,iBACjB,GAAIN,EAAeM,gBAAgBtD,IAAIgC,GAKrC,YAJAnnB,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,MAAOme,QAK5B4F,EAAeM,gBAAkB,IAAI5J,IAEvC5c,EAAY,IAAI4mB,EACd7oB,KACAmnB,EACA5E,EACA5W,EACAwc,EACAS,GAKEjd,EAAY/K,KAAKmG,MAAQoV,EAAAtV,SAASwQ,YAChC8Q,EAAeW,qBACjB9oB,KAAKuG,MACH0V,EAAAnY,eAAeilB,qDACfpd,EAAY/K,KAAKwD,QAGnBnC,EAAUgG,IAAIxB,EAAApE,YAAYgV,aAC1B8Q,EAAeW,qBAAuB7mB,GAGxCkmB,EAAeM,gBAAgBxgB,IAAIkf,EAAYllB,GAE7CkmB,EAAergB,GAAGrB,EAAApE,YAAYmlB,gBAChCvlB,EAAUgG,IAAIxB,EAAApE,YAAYmlB,eAI9BxnB,KAAKgpB,uBAAuBrd,EAAYoE,WAAY9N,EAAWkmB,IAGzDrJ,EAAA7c,UAAA+mB,uBAAR,SACEjZ,EACA9N,EACAkmB,GAEA,GAAIpY,EACF,IAAK,IAAI1P,EAAI,EAAGsK,EAAIoF,EAAWzK,OAAQjF,EAAIsK,IAAKtK,EAAG,CACjD,IAAI0b,EAAYhM,EAAW1P,GAC3B,OAAQ0b,EAAUlS,eAChB,KAAKsS,EAAA1G,cAAcO,SACnB,KAAKmG,EAAA1G,cAAcW,gBACnB,KAAK+F,EAAA1G,cAAcY,gBACnB,KAAK8F,EAAA1G,cAAca,iBACjB,IAAI2S,EAAUlN,EAAUnS,WAAamS,EAAUnS,UAAUtE,QAAU,EACnE,GAAe,GAAX2jB,EAAc,CAChB,IAAIC,EAA0BnN,EAAUnS,UAAW,GACnD,GACEsf,EAASniB,MAAQoV,EAAAtV,SAASG,SACNkiB,EAAUpS,aAAeqF,EAAAvF,YAAYmB,OACzD,CACA,IAAIhR,EAAO0V,EACTV,EAAUlS,cACgBqf,EAAU5nB,OAEtC,GAAIyF,GAAQiV,EAAayC,QACvBze,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACf2B,EAAS9kB,WAEN,CACL,IAAI+kB,EAAYhB,EAAeiB,mBAC3BD,EAAUhE,IAAIpe,GAChB/G,KAAKuG,MACH0V,EAAAnY,eAAeulB,kCACfH,EAAS9kB,QAGXnC,EAAUqnB,aAAeviB,EACzBoiB,EAAUlhB,IAAIlB,EAAM9E,UAIxBjC,KAAKuG,MACH0V,EAAAnY,eAAeylB,wBACfL,EAAS9kB,YAIbpE,KAAKuG,MACH0V,EAAAnY,eAAe0lB,+BACfzN,EAAU3X,MAAO,IAAK6kB,EAAQpkB,SAAS,OAS7Cia,EAAA7c,UAAAgmB,mBAAR,SACEtc,EACAwc,GAEA,IAAIhB,EAAaxb,EAAY/K,KAAKwE,KAC9BqkB,EAAuB9d,EAAYub,sBACnCwC,EAAkB1pB,KAAKgf,eAAe9d,IAAIuoB,GAC1CE,EAAWhe,EAAY7D,GAAGrB,EAAApE,YAAY0lB,KACtC6B,GAAQ,EACZ,GAAIF,GACF,GACEA,EAAgB3iB,MAAQ2X,EAAYmL,UAI/B,OAHJF,EACcD,EAAiBI,gBACjBJ,EAAiBK,iBAOhC,YAJA/pB,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,MAAOqlB,QAK5BC,EAAkB,IAAIM,EACpBhqB,KACAmnB,EACAsC,EACAtB,GAEFyB,GAAQ,EAGV,IAAI7Z,EAAapE,EAAYoE,WACzB6Y,EAAiBjK,EAAe9W,KAChCkI,IACF6Y,EAAiB5oB,KAAKumB,gBAAgBxW,EACpC4O,EAAe5I,SAInB,IAAIkU,GAAYN,EAAWljB,EAAAjE,cAAgBiE,EAAAhE,eAAiB0kB,EAG5D,GAAIxb,EAAY7D,GAAGrB,EAAApE,YAAY0X,QAAS,CACtC,IAAImQ,EAAa/B,EAAe5F,aAAe9b,EAAA9D,iBAAmBsnB,EAClE,GAAIjqB,KAAKgf,eAAemG,IAAI+E,GAK1B,YAJAlqB,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,MAAO8lB,GAI5B,IAAIC,EAAkB,IAAItB,EACxB7oB,KACAiqB,EACAC,EACAve,EACA,KACAid,GAOF,GALIe,EACSD,EAAiBI,gBAAkBK,EAEnCT,EAAiBK,gBAAkBI,EAE5CP,EAAO,CACT,GAAIzB,EAAerY,SACjB,GAAIqY,EAAerY,QAAQqV,IAAIgC,GAK7B,YAJAnnB,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,MAAO8lB,QAK5B/B,EAAerY,QAAU,IAAI+O,IAE/BsJ,EAAerY,QAAQ7H,IAAIkf,EAAYuC,QAEvCjmB,OAAO0kB,EAAerY,SAAWqY,EAAerY,QAAQqV,IAAIgC,IAE9DnnB,KAAKgf,eAAe/W,IAAIwhB,EAAsBC,GAC1CvB,EAAergB,GAAGrB,EAAApE,YAAYmlB,gBAChCkC,EAAgBzhB,IAAIxB,EAAApE,YAAYmlB,mBAI7B,CACL,IAAI4C,EAAejC,EAAe5F,aAAe9b,EAAA/D,mBAAqBunB,EACtE,GAAI9B,EAAeM,iBACjB,GAAIN,EAAeM,gBAAgBtD,IAAI8E,GAKrC,YAJAjqB,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,MAAOqlB,QAK5BtB,EAAeM,gBAAkB,IAAI5J,IAEvC,IAAIwL,EAAoB,IAAIxB,EAC1B7oB,KACAiqB,EACAG,EACAze,EACAwc,EACAS,GAEEe,EACSD,EAAiBI,gBAAkBO,EAEnCX,EAAiBK,gBAAkBM,EAEhDlC,EAAeM,gBAAgBxgB,IAAIgiB,EAAUP,GAC7C1pB,KAAKgf,eAAe/W,IAAIwhB,EAAsBC,GAC1CvB,EAAergB,GAAGrB,EAAApE,YAAYmlB,iBAChCkC,EAAgBzhB,IAAIxB,EAAApE,YAAYmlB,eAChC6C,EAAkBpiB,IAAIxB,EAAApE,YAAYmlB,kBAKhC1I,EAAA7c,UAAA0gB,eAAR,SACEhX,EACAsb,QAAA,IAAAA,MAAA,MAEA,IAAI1E,EAAe5W,EAAYub,sBAC/B,GAAIlnB,KAAKgf,eAAemG,IAAI5C,GAC1BviB,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,MAAOme,OAH5B,CAOA,IAAI4E,EAAaxb,EAAY/K,KAAKwE,KAC9B+G,EAAU,IAAIme,EAAKtqB,KAAMmnB,EAAY5E,EAAc5W,GAIvD,GAHAQ,EAAQxE,OAASsf,EACjBjnB,KAAKgf,eAAe/W,IAAIsa,EAAcpW,GAElC8a,EAAW,CACb,GAAIA,EAAUnX,SACZ,GAAImX,EAAUnX,QAAQqV,IAAIgC,GAKxB,YAJAnnB,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,MAAOme,QAK5B0E,EAAUnX,QAAU,IAAI+O,IAE1BoI,EAAUnX,QAAQ7H,IAAIkf,EAAYhb,GAC9B8a,EAAUnf,GAAGrB,EAAApE,YAAYmlB,gBAAkBrb,EAAQrE,GAAGrB,EAAApE,YAAYuX,SACpEzN,EAAQlE,IAAIxB,EAAApE,YAAYmlB,oBAErB,GAAIrb,EAAQrE,GAAGrB,EAAApE,YAAYuX,QAAS,CACzC,GAAI5Z,KAAKof,iBAAiB+F,IAAI5C,GAK5B,YAJAviB,KAAKuG,MACH0V,EAAAnY,eAAe2jB,4DACf9b,EAAY/K,KAAKwD,MAAOme,GAM5B,GAFAviB,KAAKof,iBAAiBnX,IAAIsa,EAAcpW,GACxCnM,KAAKwiB,iBAAiB1S,QAAQ7H,IAAIkf,EAAYhb,GAC1CR,EAAYvH,MAAMU,OAAO4iB,QAAS,CACpC,GAAI1nB,KAAKqf,mBAAmB8F,IAAIgC,GAAa,CAC3C,IAAIQ,EAA+B3nB,KAAKqf,mBAAmBne,IAAIimB,GAK/D,YAJAnnB,KAAKuG,MACH0V,EAAAnY,eAAe2jB,4DACf9b,EAAY/K,KAAKwD,MAAOujB,EAAexb,QAAQoW,cAInDpW,EAAQlE,IAAIxB,EAAApE,YAAYmlB,eACxBxnB,KAAKqf,mBAAmBpX,IAAIkf,GAC1Bhb,QAAOA,EACPwD,WAAYhE,EAAY/K,QAM9B,IADA,IAAI4M,EAAS7B,EAAY6B,OAChBnN,EAAI,EAAGsK,EAAI6C,EAAOlI,OAAQjF,EAAIsK,IAAKtK,EAC1CL,KAAKuqB,oBAAoB/c,EAAOnN,GAAI8L,GAGtCnM,KAAK8mB,YAAY3a,EAASR,KAGpBmT,EAAA7c,UAAAsoB,oBAAR,SACE5e,EACA6e,GAEA,IAAI5pB,EAAO+K,EAAY/K,KAAKwE,KACxBmd,EAAe5W,EAAYub,sBAC/B,GAAIsD,EAAI1a,SACN,GAAI0a,EAAI1a,QAAQqV,IAAIvkB,GAKlB,YAJAZ,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,MAAOme,QAK5BiI,EAAI1a,QAAU,IAAI+O,IAEpB,IAAIvd,EAAQ,IAAImpB,EAAUD,EAAKxqB,KAAMY,EAAM2hB,EAAc5W,GACzD6e,EAAI1a,QAAQ7H,IAAIrH,EAAMU,GAClBkpB,EAAI1iB,GAAGrB,EAAApE,YAAYmlB,gBACrBlmB,EAAM2G,IAAIxB,EAAApE,YAAYmlB,gBAIlB1I,EAAA7c,UAAA2gB,kBAAR,SACExS,EACA8R,GAEA,IAAIpS,EAAUM,EAAUN,QACxB,GAAIA,EACF,IAAK,IAAIzP,EAAI,EAAGsK,EAAImF,EAAQxK,OAAQjF,EAAIsK,IAAKtK,EAC3CL,KAAK0qB,iBAAiB5a,EAAQzP,GAAI+P,EAAUc,aAAcgR,QAG5DliB,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfnX,EAAUhM,QAKR0a,EAAA7c,UAAAmiB,yBAAR,SACE7B,EACApW,EACAwe,GAGA3qB,KAAKof,iBAAiBnX,IAAIsa,EAAcpW,GAGxC,IAAI+E,EAAeyZ,EAAmBvmB,MAAMU,OAAOoM,aAC/C0Z,EAASnkB,EAAA1D,iBAAmBmO,EAC5BmR,EAAYriB,KAAKgf,eAAe9d,IAAI0pB,GACnCvI,IAAWA,EAAY5e,OAAOzD,KAAKgf,eAAe9d,IAAI0pB,EAASnkB,EAAAnE,eAAiB,WACrFmB,OAAO4e,EAAUtb,MAAQ2X,EAAYmM,WACrC,IAAI1D,EAAawD,EAAmBvlB,KACxBid,EAAWvS,QAAQ7H,IAAIkf,EAAYhb,GAG/C,IAAIrH,EAAS6lB,EAAmBvmB,MAAMU,OAClCA,EAAO6hB,UACL3mB,KAAKgf,eAAemG,IAAIgC,GAC1BnnB,KAAKuG,MACH0V,EAAAnY,eAAe2jB,4DACfkD,EAAmBvmB,MAAO+iB,IAG5Bhb,EAAQoW,aAAe4E,EACvBnnB,KAAKgf,eAAe/W,IAAIkf,EAAYhb,IAI7BrH,EAAO4iB,SAChB1nB,KAAKqf,mBAAmBpX,IAAI0iB,EAAmBvlB,MAC7C+G,QAAOA,EACPwD,WAAYgb,KAKV7L,EAAA7c,UAAAyoB,iBAAR,SACEzQ,EACA/I,EACAgR,GAEA,IAQI4I,EACAC,EACA9G,EAVA5S,EAAe4I,EAAO7V,MAAMU,OAAOoM,aAAezK,EAAAnE,eAAiB2X,EAAO5I,aAAajM,KAC3F,GAAIpF,KAAKof,iBAAiB+F,IAAI9T,GAC5BrR,KAAKuG,MACH0V,EAAAnY,eAAe2jB,4DACfxN,EAAO5I,aAAajN,MAAOiN,QAS/B,GAAoB,MAAhBH,EAAsB,CAIxB,GAHA4Z,EAAiB7Q,EAAO7V,MAAMU,OAAOoM,aAAezK,EAAAnE,eAAiB2X,EAAOrZ,KAAKwE,KAG7EpF,KAAKgf,eAAemG,IAAI2F,GAM1B,YALA9qB,KAAKokB,yBACH/S,EACSrR,KAAKgf,eAAe9d,IAAI4pB,GACjC7Q,EAAO5I,cAMX,GAAI6Q,EAAciD,IAAI9T,GAKpB,YAJArR,KAAKuG,MACH0V,EAAAnY,eAAe2jB,4DACfxN,EAAO5I,aAAajN,MAAOiN,IAI/B4S,EAAe,IAAI1H,GACN4H,YAAa,EAC1BF,EAAa5S,aAAeyZ,EAC5B7G,EAAahK,OAASA,EACtBiI,EAAcja,IAAIoJ,EAAc4S,OAG3B,CAKL,GAJA6G,EAAiB5Z,EAAezK,EAAAnE,eAAiB2X,EAAOrZ,KAAKwE,KAG7D2lB,EAAoB/qB,KAAKgf,eAAe9d,IAAI4pB,GAO1C,YALA9qB,KAAKokB,yBACH/S,EACA0Z,EACA9Q,EAAO5I,cAOX,IADA,IAAI2Z,EAAO,IAAIC,IACRhH,EAAe/B,EAAchhB,IAAI4pB,IAAiB,CACvD,IAAI7G,EAAaE,WAaV,CAEL,GADA4G,EAAoB/qB,KAAKgf,eAAe9d,IAAI+iB,EAAa5S,cAOvD,YALArR,KAAKokB,yBACH/S,EACA0Z,EACA9Q,EAAO5I,cAIX,MArBA,GADA0Z,EAAoB/qB,KAAKof,iBAAiBle,IAAI+iB,EAAa5S,cAOzD,YALArR,KAAKokB,yBACH/S,EACA0Z,EACA9Q,EAAO5I,cAKX,GADAyZ,EAAiB7G,EAAa5S,aAC1B2Z,EAAK7F,IAAIlB,GAAe,MAC5B+G,EAAKE,IAAIjH,GAgBb,GAAI/B,EAAciD,IAAI9T,GAKpB,YAJArR,KAAKuG,MACH0V,EAAAnY,eAAe2jB,4DACfxN,EAAO5I,aAAajN,MAAOiN,IAI/B4S,EAAe,IAAI1H,GACN4H,YAAa,EAC1BF,EAAa5S,aAAeyZ,EAC5B7G,EAAahK,OAASA,EACtBiI,EAAcja,IAAIoJ,EAAc4S,KAI5BnF,EAAA7c,UAAA4gB,mBAAR,SACElX,EACAsb,QAAA,IAAAA,MAAA,MAEA,IAAI1E,EAAe5W,EAAYub,sBAC/B,GAAIlnB,KAAKgf,eAAemG,IAAI5C,GAC1BviB,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,MAAOme,OAH5B,CAOA,IAAI4E,EAAaxb,EAAY/K,KAAKwE,KAC9B2K,EAAapE,EAAYoE,WACzB9N,EAAY,IAAI4mB,EAClB7oB,KACAmnB,EACA5E,EACA5W,EACA,KACAoE,EACI/P,KAAKumB,gBAAgBxW,EACnB4O,EAAe7I,OACf6I,EAAe5I,OACf4I,EAAe9I,UAEjB8I,EAAe9W,MAKrB,GAHA5F,EAAU0F,OAASsf,EACnBjnB,KAAKgf,eAAe/W,IAAIsa,EAActgB,GAElCglB,EAAW,CACb,GAAIA,EAAUnX,SACZ,GAAImX,EAAUnX,QAAQqV,IAAIgC,GAKxB,YAJAnnB,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,MAAOme,QAK5B0E,EAAUnX,QAAU,IAAI+O,IAE1BoI,EAAUnX,QAAQ7H,IAAIkf,EAAYllB,GAC9BglB,EAAUnf,GAAGrB,EAAApE,YAAYmlB,gBAAkBvlB,EAAU6F,GAAGrB,EAAApE,YAAYuX,UACtE3X,EAAU0F,OAASsf,EACnBhlB,EAAUgG,IAAIxB,EAAApE,YAAYmlB,qBAEvB,GAAIvlB,EAAU6F,GAAGrB,EAAApE,YAAYuX,QAAS,CAC3C,GAAI5Z,KAAKof,iBAAiB+F,IAAI5C,GAK5B,YAJAviB,KAAKuG,MACH0V,EAAAnY,eAAe2jB,4DACf9b,EAAY/K,KAAKwD,MAAOme,GAM5B,GAFAviB,KAAKof,iBAAiBnX,IAAIsa,EAActgB,GACxCjC,KAAKwiB,iBAAiB1S,QAAQ7H,IAAIkf,EAAYllB,GAC1C0J,EAAYvH,MAAMU,OAAO4iB,QAAS,CACpC,GAAI1nB,KAAKqf,mBAAmB8F,IAAIgC,GAAa,CAC3C,IAAIQ,EAA+B3nB,KAAKqf,mBAAmBne,IAAIimB,GAK/D,YAJAnnB,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,MAAOujB,EAAexb,QAAQoW,cAInDtgB,EAAUgG,IAAIxB,EAAApE,YAAYmlB,eAC1BxnB,KAAKqf,mBAAmBpX,IAAIkf,GAC1Bhb,QAASlK,EACT0N,WAAYhE,EAAY/K,QAK9BZ,KAAK8mB,YAAY7kB,EAAW0J,KAGtBmT,EAAA7c,UAAA6gB,kBAAR,SACE1S,EACA8R,EACAD,GAEA,IAAI/P,EAAe9B,EAAU8B,aAC7B,GAAIA,EACF,IAAK,IAAI7R,EAAI,EAAGsK,EAAIuH,EAAa5M,OAAQjF,EAAIsK,IAAKtK,EAChDL,KAAKmrB,iBACHjZ,EAAa7R,GACb+P,EAAUc,aACVgR,EAAeD,QAGd,GAAI7R,EAAU+B,cAAe,CAClC,IAAIgV,EAAa/W,EAAU+B,cAAc/M,KACrCmd,EACFnS,EAAUhM,MAAMU,OAAOoM,aACvBzK,EAAAnE,eACA6kB,EAEF,GAAInnB,KAAKgf,eAAemG,IAAI5C,GAM1B,YALAviB,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACflV,EAAU+B,cAAc/N,MACxBme,GAMJ,IAAIF,EAAYriB,KAAKgf,eAAe9d,IAAIkP,EAAUc,cAClD,GAAImR,EAEF,YADAriB,KAAKgf,eAAe/W,IAAIsa,EAAcF,GAKxC,IAAIc,EAAe,IAAI7G,EACvB6G,EAAaE,UAAYd,EACzB,IAAIlR,EAAe5K,EAAA1D,iBAAmBqN,EAAUc,aAChDiS,EAAa9R,aAAeA,EAC5B8R,EAAaI,gBAAkBlS,EAAe5K,EAAAnE,eAAiB,QAC/D6gB,EAAaxX,YAAc,KAC3BsW,EAAcpc,KAAKsd,KAIfrE,EAAA7c,UAAAkpB,iBAAR,SACExf,EACAuF,EACAoV,EACArE,GAEA,IAAIoB,EAAY1X,EAAYub,sBAC5B,GAAIlnB,KAAKgf,eAAemG,IAAI9B,GAC1BrjB,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,MAAOif,OAH5B,CAQA,IAGIlX,EAHAkF,EAAeH,EAAezK,EAAAnE,eAAiBqJ,EAAY0F,aAAajM,KAI5E,GAAI+G,EAAUnM,KAAKof,iBAAiBle,IAAImQ,GACtCrR,KAAKgf,eAAe/W,IAAIob,EAAWlX,OADrC,CAMA,IAAMif,EAAY3kB,EAAAnE,eAAiB,QAC/B6gB,EAAe,IAAI7G,EACvB6G,EAAaE,UAAYA,EACrBnS,EAAa2K,SAASuP,IACxBjI,EAAa9R,aAAeA,EAC5B8R,EAAaI,gBACXrS,EAAatL,UAAU,EAAGsL,EAAa5L,OAAS8lB,EAAU9lB,OAAS,GACnEqG,EAAY0F,aAAajM,OAG3B+d,EAAa9R,aAAeA,EAC5B8R,EAAaI,gBACXrS,EACAka,EACA3kB,EAAAnE,eACAqJ,EAAY0F,aAAajM,MAG7B+d,EAAaxX,YAAcA,EAC3BsW,EAAcpc,KAAKsd,MAGbrE,EAAA7c,UAAA8gB,oBAAR,SAA4BpX,EAAmCsb,QAAA,IAAAA,MAAA,MAC7D,IAAI1E,EAAe5W,EAAYub,sBAC/B,GAAIlnB,KAAKgf,eAAemG,IAAI5C,GAC1BviB,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,MAAOme,OAH5B,CAQA,IAAIxS,EAAapE,EAAYoE,WACzBoX,EAAaxb,EAAY/K,KAAKwE,KAC9BnD,EAAY,IAAIopB,EAClBrrB,KACAmnB,EACA5E,EACA5W,EACAoE,EACI/P,KAAKumB,gBAAgBxW,EAAY4O,EAAe7I,QAChD6I,EAAe9W,MAKrB,GAHA5F,EAAU0F,OAASsf,EACnBjnB,KAAKgf,eAAe/W,IAAIsa,EAActgB,GAElCglB,EAAW,CACb,GAAIA,EAAUnX,SACZ,GAAImX,EAAUnX,QAAQqV,IAAIljB,EAAUsgB,cAKlC,YAJAviB,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,MAAOme,QAK5B0E,EAAUnX,QAAU,IAAI+O,IAE1BoI,EAAUnX,QAAQ7H,IAAIhG,EAAUsgB,aAActgB,GAC1CglB,EAAUnf,GAAGrB,EAAApE,YAAYmlB,gBAAkBvlB,EAAU6F,GAAGrB,EAAApE,YAAYuX,SACtE3X,EAAUgG,IAAIxB,EAAApE,YAAYmlB,oBAEvB,GAAIvlB,EAAU6F,GAAGrB,EAAApE,YAAYuX,QAAS,CAC3C,GAAI5Z,KAAKof,iBAAiB+F,IAAI5C,GAK5B,YAJAviB,KAAKuG,MACH0V,EAAAnY,eAAe2jB,4DACf9b,EAAY/K,KAAKwD,MAAOme,GAM5B,GAFAviB,KAAKof,iBAAiBnX,IAAIsa,EAActgB,GACxCjC,KAAKwiB,iBAAiB1S,QAAQ7H,IAAIkf,EAAYllB,GAC1C0J,EAAYvH,MAAMU,OAAO4iB,QAAS,CACpC,GAAI1nB,KAAKqf,mBAAmB8F,IAAIgC,GAAa,CAC3C,IAAIQ,EAA+B3nB,KAAKqf,mBAAmBne,IAAIimB,GAK/D,YAJAnnB,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,MAAOujB,EAAexb,QAAQoW,cAInDtgB,EAAUgG,IAAIxB,EAAApE,YAAYmlB,eAC1BxnB,KAAKqf,mBAAmBpX,IAAIkf,GAC1Bhb,QAASlK,EACT0N,WAAYhE,EAAY/K,QAM9B,IADA,IAAIgnB,EAAqBjc,EAAYmE,QAC5BzP,EAAI,EAAGsK,EAAIid,EAAmBtiB,OAAQjF,EAAIsK,IAAKtK,EAAG,CACzD,IAAIwnB,EAAoBD,EAAmBvnB,GAC3C,OAAQwnB,EAAkB9gB,MAExB,KAAKoV,EAAAtV,SAAS+T,iBACZ5a,KAAK8nB,gBAAkCD,EAAmB5lB,GAC1D,MAEF,KAAKka,EAAAtV,SAAS2R,kBACRqP,EAAkB7f,MAAMvB,EAAApE,YAAY0lB,IAAMthB,EAAApE,YAAY2lB,KACxDhoB,KAAKioB,mBAAsCJ,EAAmB5lB,GAE9DjC,KAAKkoB,iBAAoCL,EAAmB5lB,GAE9D,MAEF,QACE,MAAM,IAAIijB,MAAM,8BAKtBllB,KAAK8mB,YAAY7kB,EAAW0J,KAGtBmT,EAAA7c,UAAA+gB,oBAAR,SACErX,EACAwW,EACAC,EACAkJ,QAAA,IAAAA,MAAA,MAEA,IAAI/I,EAAe5W,EAAYub,sBAC3BC,EAAaxb,EAAY/K,KAAKwE,KAC9B6hB,EAAYjnB,KAAKgf,eAAe9d,IAAIqhB,GAQxC,GAPK0E,KACHA,EAAY,IAAIsE,EAAUvrB,KAAMmnB,EAAY5E,EAAc5W,IAChDhE,OAAS2jB,EACnBtrB,KAAKgf,eAAe/W,IAAIsa,EAAc0E,GACtCjnB,KAAK8mB,YAAYG,EAAWtb,IAG1B2f,EAAiB,CACnB,GAAIA,EAAgBxb,SAClB,GAAIwb,EAAgBxb,QAAQqV,IAAIgC,GAK9B,YAJAnnB,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,MAAOme,QAK5B+I,EAAgBxb,QAAU,IAAI+O,IAEhCyM,EAAgBxb,QAAQ7H,IAAIkf,EAAYF,GACpCqE,EAAgBxjB,GAAGrB,EAAApE,YAAYmlB,gBAAkBP,EAAUnf,GAAGrB,EAAApE,YAAYuX,SAC5EqN,EAAUhf,IAAIxB,EAAApE,YAAYmlB,oBAEvB,GAAIP,EAAUnf,GAAGrB,EAAApE,YAAYuX,QAAS,CAC3C,IAAI+N,EAAiB3nB,KAAKof,iBAAiBle,IAAIqhB,GAa/C,GAZIoF,GACGA,EAAe7f,GAAGrB,EAAApE,YAAYuX,SACjC5Z,KAAKuG,MACH0V,EAAAnY,eAAe0nB,kFACf7f,EAAY/K,KAAKwD,MAAO6iB,EAAU1E,cAGtC0E,EAAYU,GAEZ3nB,KAAKof,iBAAiBnX,IAAIsa,EAAc0E,GAE1CjnB,KAAKwiB,iBAAiB1S,QAAQ7H,IAAIkf,EAAYF,GAC1Ctb,EAAYvH,MAAMU,OAAO4iB,QAAS,CACpC,GAAI1nB,KAAKqf,mBAAmB8F,IAAIgC,GAAa,CAC3C,IAAIsE,EAA+BzrB,KAAKqf,mBAAmBne,IAAIimB,GAC/D,GAAIsE,EAAetf,UAAY8a,EAK7B,YAJAjnB,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,MAAOqnB,EAAetf,QAAQoW,mBAKnDviB,KAAKqf,mBAAmBpX,IAAIkf,GAC1Bhb,QAAS8a,EACTtX,WAAYhE,EAAY/K,OAG5BqmB,EAAUhf,IAAIxB,EAAApE,YAAYmlB,gBAK9B,IADA,IAAI1X,EAAUnE,EAAYmE,QACjBzP,EAAI,EAAGsK,EAAImF,EAAQxK,OAAQjF,EAAIsK,IAAKtK,EAC3C,OAAQyP,EAAQzP,GAAG0G,MACjB,KAAKoV,EAAAtV,SAASiT,iBACZ9Z,KAAK0iB,gBAAkC5S,EAAQzP,GAAI8hB,EAAeC,EAAkB6E,GACpF,MAEF,KAAK9K,EAAAtV,SAAS0T,gBACZva,KAAK2iB,eAAgC7S,EAAQzP,GAAI4mB,GACjD,MAEF,KAAK9K,EAAAtV,SAAS0R,oBACZvY,KAAK6iB,mBAAwC/S,EAAQzP,GAAI4mB,GACzD,MAEF,KAAK9K,EAAAtV,SAASqU,qBACZlb,KAAK+iB,oBAA0CjT,EAAQzP,GAAI4mB,GAC3D,MAEF,KAAK9K,EAAAtV,SAAS8S,qBACZ3Z,KAAKgjB,oBAA0ClT,EAAQzP,GAAI8hB,EAAeC,EAAkB6E,GAC5F,MAEF,KAAK9K,EAAAtV,SAAS2U,gBAGZxb,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfzX,EAAQzP,GAAG+D,OAEb,MAEF,KAAK+X,EAAAtV,SAAS6S,SACZ1Z,KAAKkjB,oBAAuCpT,EAAQzP,GAAI4mB,GACxD,MAEF,QACE,MAAM,IAAI/B,MAAM,+BAMhBpG,EAAA7c,UAAAghB,oBAAR,SAA4BtX,EAA8Bsb,QAAA,IAAAA,MAAA,MAGxD,IAAIrmB,EAAO+K,EAAY/K,KAAKwE,KAC5B,GAAIpF,KAAKkf,YAAYiG,IAAIvkB,IAASZ,KAAKmf,YAAYgG,IAAIvkB,GACrDZ,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,MAAOxD,OAH5B,CAOA,IAAIyT,EAAQ,IAAImI,EAChBnI,EAAMzE,eAAiBjE,EAAYiE,eACnCyE,EAAMhM,KAAOsD,EAAYtD,KACzBrI,KAAKmf,YAAYlX,IAAIrH,EAAMyT,KAGrByK,EAAA7c,UAAAihB,oBAAR,SAA4B9S,EAA8B6W,QAAA,IAAAA,MAAA,MAExD,IADA,IAAI/U,EAAe9B,EAAU8B,aACpB7R,EAAI,EAAGsK,EAAIuH,EAAa5M,OAAQjF,EAAIsK,IAAKtK,EAAG,CACnD,IAAIsL,EAAcuG,EAAa7R,GAC3B0P,EAAapE,EAAYoE,WACzBwS,EAAe5W,EAAYub,sBAC/B,GAAIlnB,KAAKgf,eAAemG,IAAI5C,GAC1BviB,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,MAAOme,OAH5B,CAOA,IAAI4E,EAAaxb,EAAY/K,KAAKwE,KAC9BsmB,EAAS,IAAIxF,EACflmB,KACAmnB,EACA5E,EACArG,EAAAuE,KAAKc,KACL5V,EACAoE,EACI/P,KAAKumB,gBAAgBxW,EACnB4O,EAAe7I,OACf6I,EAAe5I,OACf4I,EAAe9I,UAEjB8I,EAAe9W,MAYrB,GAVA6jB,EAAO/jB,OAASsf,EAChBjnB,KAAKgf,eAAe/W,IAAIsa,EAAcmJ,GAElCA,EAAO1E,aAAarI,EAAe5I,UAAY2V,EAAO5jB,GAAGrB,EAAApE,YAAYspB,QACvE3rB,KAAKuG,MACH0V,EAAAnY,eAAe8iB,8BACfnjB,OAAO0Y,EAAAL,cAAcK,EAAA1G,cAAcM,OAAQhG,IAAa3L,MAAO,UAI/D6iB,EAAW,CACb,GAAIA,EAAUnX,SACZ,GAAImX,EAAUnX,QAAQqV,IAAIgC,GAAa,CACrCnnB,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,MAAOme,GAE1B,eAGF0E,EAAUnX,QAAU,IAAI+O,IAE1BoI,EAAUnX,QAAQ7H,IAAIkf,EAAYuE,GAC9BzE,EAAUnf,GAAGrB,EAAApE,YAAYmlB,gBAAkBkE,EAAO5jB,GAAGrB,EAAApE,YAAYuX,SACnE8R,EAAOzjB,IAAIxB,EAAApE,YAAYmlB,oBAEpB,GAAIkE,EAAO5jB,GAAGrB,EAAApE,YAAYuX,UAC3B5Z,KAAKof,iBAAiB+F,IAAI5C,GAC5BviB,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,MAAOme,GAG1BviB,KAAKof,iBAAiBnX,IAAIsa,EAAcmJ,GAE1C1rB,KAAKwiB,iBAAiB1S,QAAQ7H,IAAIkf,EAAYuE,GAC1C/f,EAAYvH,MAAMU,OAAO4iB,SAAS,CACpC,GAAI1nB,KAAKqf,mBAAmB8F,IAAIgC,GAAa,CAC3C,IAAIQ,EAA+B3nB,KAAKqf,mBAAmBne,IAAIimB,GAC/DnnB,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,MAAOujB,EAAexb,QAAQoW,cAEjD,SAEFmJ,EAAOzjB,IAAIxB,EAAApE,YAAYmlB,eACvBxnB,KAAKqf,mBAAmBpX,IAAIkf,GAC1Bhb,QAASuf,EACT/b,WAAYhE,EAAY/K,OAI9BZ,KAAK8mB,YAAY4E,EAAQ/f,MAG/BmT,EA3tDA,CAA6B7C,EAAAhW,mBAwxD7B,SAAgBygB,EAAoB3f,GAClC,OAAQA,GACN,KAAKoV,EAAA1G,cAAcK,OAAQ,OAAO6I,EAAe7I,OACjD,KAAKqG,EAAA1G,cAAcO,SACnB,KAAKmG,EAAA1G,cAAcW,gBAAiB,OAAOuI,EAAevI,gBAC1D,KAAK+F,EAAA1G,cAAcY,gBAAiB,OAAOsI,EAAetI,gBAC1D,KAAK8F,EAAA1G,cAAca,iBAAkB,OAAOqI,EAAerI,iBAC3D,KAAK6F,EAAA1G,cAAcS,UAAW,OAAOyI,EAAezI,UACpD,KAAKiG,EAAA1G,cAAcQ,OAAQ,OAAO0I,EAAe1I,OACjD,KAAKkG,EAAA1G,cAAcM,OAAQ,OAAO4I,EAAe5I,OACjD,KAAKoG,EAAA1G,cAAcI,SAAU,OAAO8I,EAAe9I,SACnD,KAAKsG,EAAA1G,cAAcG,QAAS,OAAO+I,EAAe/I,QAClD,QAAS,OAAO+I,EAAe9W,MApyDtBnI,EAAAof,UA8tDb,SAAYJ,GAEVA,IAAA,mBAEAA,IAAA,iBAEAA,IAAA,eAEAA,IAAA,yBAEAA,IAAA,2CAEAA,IAAA,uBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,iBAEAA,IAAA,6CAEAA,IAAA,0BAEAA,IAAA,sCAEAA,IAAA,kBAEAA,IAAA,wBAEAA,IAAA,0BAEAA,IAAA,0BAhCF,CAAYA,EAAAhf,EAAAgf,cAAAhf,EAAAgf,iBAmCZ,SAAYC,GAEVA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,uCAEAA,IAAA,0BAEAA,IAAA,oBAEAA,IAAA,oBAEAA,IAAA,yBAEAA,IAAA,uBApBF,CAAYA,EAAAjf,EAAAif,iBAAAjf,EAAAif,oBAuBZjf,EAAAgnB,sBAiBA,IAAAkF,EAAA,WAoBE,SAAAA,EAAsBC,EAAkB1E,EAAoB5E,GAT5DviB,KAAA4H,MAAqBnB,EAAApE,YAAYwF,KAEjC7H,KAAA4oB,eAAiCjK,EAAe9W,KAEhD7H,KAAA8P,QAAsC,KAEtC9P,KAAA2H,OAAyB,KAIvB3H,KAAK6rB,QAAUA,EACf7rB,KAAKmnB,WAAaA,EAClBnnB,KAAKuiB,aAAeA,EAWxB,OAPEqJ,EAAA3pB,UAAA6F,GAAA,SAAGC,GAA2B,OAAQ/H,KAAK4H,MAAQG,IAASA,GAE5D6jB,EAAA3pB,UAAA+F,MAAA,SAAMJ,GAA4B,OAA+B,IAAvB5H,KAAK4H,MAAQA,IAEvDgkB,EAAA3pB,UAAAgG,IAAA,SAAIF,GAA2B/H,KAAK4H,OAASG,GAE7C6jB,EAAA3pB,UAAA+kB,aAAA,SAAajf,GAA8B,OAAQ/H,KAAK4oB,eAAiB7gB,IAASA,GACpF6jB,EAlCA,GAAsBlsB,EAAAksB,UAqCtB,IAAAtJ,EAAA,SAAAtN,GAQE,SAAAsN,EACEuJ,EACA/mB,GAFF,IAAAoQ,EAIEF,EAAAxU,KAAAR,KAAM6rB,EAAS/mB,EAAOoM,aAAczK,EAAA1D,iBAAmB+B,EAAOoM,eAAalR,YAV7EkV,EAAAnO,KAAO2X,EAAYmM,UAWjB3V,EAAKpF,QAAU,IAAI+O,MAEvB,OAf+B5J,EAAAqN,EAAAtN,GAe/BsN,EAfA,CAA+BsJ,GAAlBlsB,EAAA4iB,YAkBb,IAAAiJ,EAAA,SAAAvW,GASE,SAAAuW,EACEM,EACA1E,EACA5E,EACA5W,GAJF,IAAAuJ,EAMEF,EAAAxU,KAAAR,KAAM6rB,EAAS1E,EAAY5E,IAAaviB,YAZ1CkV,EAAAnO,KAAO2X,EAAYoN,UAajB5W,EAAKvJ,YAAcA,EACnBuJ,EAAKtN,MAAQ+D,EAAY/D,QAE7B,OAnB+BqN,EAAAsW,EAAAvW,GAmB/BuW,EAnBA,CAA+BK,GAAlBlsB,EAAA6rB,YAsBb,IAAAjB,EAAA,SAAAtV,GAQE,SAAAsV,EACEuB,EACA1E,EACA5E,EACA5W,GAJF,IAAAuJ,EAMEF,EAAAxU,KAAAR,KAAM6rB,EAAS1E,EAAY5E,IAAaviB,YAZ1CkV,EAAAnO,KAAO2X,EAAYqN,KAajB7W,EAAKvJ,YAAcA,EACnBuJ,EAAKtN,MAAQ+D,EAAY/D,QAE7B,OAlB0BqN,EAAAqV,EAAAtV,GAkB1BsV,EAlBA,CAA0BsB,GAAblsB,EAAA4qB,OAqBb,IAAAG,EAAA,SAAAzV,GASE,SAAAyV,EACED,EACAqB,EACA1E,EACA5E,EACA5W,GALF,IAAAuJ,EAOEF,EAAAxU,KAAAR,KAAM6rB,EAAS1E,EAAY5E,IAAaviB,YAd1CkV,EAAAnO,KAAO2X,EAAYsN,UAKnB9W,EAAA+W,cAAqB,EAUnB/W,EAAKvN,OAAS6iB,EACdtV,EAAKvJ,YAAcA,IAEvB,OApB+BsJ,EAAAwV,EAAAzV,GAoB/ByV,EApBA,CAA+BmB,GAAlBlsB,EAAA+qB,YAsBb,SAAkByB,GAChBA,IAAA,eACAA,IAAA,qBACAA,IAAA,iBAHF,CAAkBxsB,EAAAwsB,oBAAAxsB,EAAAwsB,uBAMlB,IAAAC,EAAA,SAAAnX,GAeE,SAAAmX,EACEN,EACA1E,EACA5E,EACAla,EACAsD,GALF,IAAAuJ,EAOEF,EAAAxU,KAAAR,KAAM6rB,EAAS1E,EAAY5E,IAAaviB,YAb1CkV,EAAAkX,kBAAiB,EAcflX,EAAK7M,KAAOA,EACZ6M,EAAKvJ,YAAcA,IAgBvB,OAxCyCsJ,EAAAkX,EAAAnX,GA2BvCmX,EAAAlqB,UAAAkkB,yBAAA,SAAyB7kB,GAIvB,OAHAtB,KAAKosB,kBAAiB,EACtBpsB,KAAKqsB,qBAAuB/qB,EAC5BtB,KAAKiI,IAAIxB,EAAApE,YAAYspB,MAAQllB,EAAApE,YAAYiqB,SAClCtsB,MAGTmsB,EAAAlqB,UAAAokB,uBAAA,SAAuB/kB,GAIrB,OAHAtB,KAAKosB,kBAAiB,EACtBpsB,KAAKusB,mBAAqBjrB,EAC1BtB,KAAKiI,IAAIxB,EAAApE,YAAYspB,MAAQllB,EAAApE,YAAYiqB,SAClCtsB,MAEXmsB,EAxCA,CAAyCP,GAA5BlsB,EAAAysB,sBA2Cb,IAAAjG,EAAA,SAAAlR,GAIE,SAAAkR,EACE2F,EACA1E,EACA5E,EACAla,EACAsD,EACAid,GANF,IAAA1T,EAQEF,EAAAxU,KAAAR,KAAM6rB,EAAS1E,EAAY5E,EAAcla,EAAMsD,IAAY3L,YAV7DkV,EAAAnO,KAAO2X,EAAY5I,OAWjBZ,EAAKtN,MAAQ+D,EAAcA,EAAY/D,MAAQnB,EAAApE,YAAYwF,KAC3DqN,EAAK0T,eAAiBA,EACtB1T,EAAK7M,KAAOA,IAEhB,OAjB4B4M,EAAAiR,EAAAlR,GAiB5BkR,EAjBA,CAA4BiG,GAAfzsB,EAAAwmB,SAoBb,IAAAsG,EAAA,WAiBA,OALE,SAAY5rB,EAAcyH,EAAYU,QAAA,IAAAA,MAAA,MACpC/I,KAAKY,KAAOA,EACZZ,KAAKqI,KAAOA,EACZrI,KAAK+I,YAAcA,GAfvB,GAAarJ,EAAA8sB,YAoBb,IAAAC,EAAA,SAAAzX,GASE,SAAAyX,EACEZ,EACA1E,EACAuF,EACArkB,EACAsD,QAAA,IAAAA,MAAA,MALF,IAAAuJ,EAOEF,EAAAxU,KAAAR,KAAM6rB,EAAS1E,EAAYA,EAAY9e,EAAMsD,IAAY3L,YAd3DkV,EAAAnO,KAAO2X,EAAYiO,MAKnBzX,EAAA0X,aAA8B,KAU5B1X,EAAKwX,MAAQA,IAEjB,OAnB2BzX,EAAAwX,EAAAzX,GAmB3ByX,EAnBA,CAA2BN,GAAdzsB,EAAA+sB,QAsBb,IAAA5D,EAAA,SAAA7T,GAgBE,SAAA6T,EACEgD,EACA1E,EACA5E,EACA5W,EACAwc,EACAS,QADA,IAAAT,MAAA,WACA,IAAAS,MAAiCjK,EAAe9W,MANlD,IAAAqN,EAQEF,EAAAxU,KAAAR,KAAM6rB,EAAS1E,EAAY5E,IAAaviB,YAtB1CkV,EAAAnO,KAAO2X,EAAY8G,mBAOnBtQ,EAAA2X,UAAkC,IAAIhO,IAEtC3J,EAAA4X,mBAAoC,KAEpC5X,EAAAoU,aAA6BtN,EAAayC,QAYxCvJ,EAAKvJ,YAAcA,EACnBuJ,EAAKtN,MAAQ+D,EAAY/D,MACzBsN,EAAKiT,eAAiBA,EACtBjT,EAAK0T,eAAiBA,IAI1B,OAhCuC3T,EAAA4T,EAAA7T,GA+BrC6T,EAAA5mB,UAAA4C,SAAA,WAAqB,OAAO7E,KAAKmnB,YACnC0B,EAhCA,CAAuC+C,GAA1BlsB,EAAAmpB,oBAmCb,IAAAkE,EAAA,SAAA/X,GAoCE,SAAA+X,EACE9qB,EACAsgB,EACAxP,EACApL,EACAqlB,gBADA,IAAArlB,MAAA,WACA,IAAAqlB,MAAA,MALF,IAAA9X,EAOEF,EAAAxU,KAAAR,KAAMiC,EAAU4pB,QAAS5pB,EAAUklB,WAAY5E,IAAaviB,KAO5D,GAhDFkV,EAAAnO,KAAO2X,EAAYnH,SAOnBrC,EAAA+X,aAAkC,IAAIpO,IAEtC3J,EAAAgY,iBAEAhY,EAAAiY,oBAEAjY,EAAAkY,aAA8B,KAM9BlY,EAAAmY,kBAEAnY,EAAAoY,IAAmB,EAEnBpY,EAAAqY,oBAA2B,EAE3BrY,EAAAsY,WAA8B,KAE9BtY,EAAAuY,WAA0B,KAElBvY,EAAAwY,YAAmB,EACnBxY,EAAAyY,WAA2B,KACnCzY,EAAA0Y,aAAoB,EAkFZ1Y,EAAA2Y,SAA2B,KAC3B3Y,EAAA4Y,SAA2B,KAC3B5Y,EAAA6Y,SAA2B,KAC3B7Y,EAAA8Y,SAA2B,KA1EjC9Y,EAAKjT,UAAYA,EACjBiT,EAAKnC,UAAYA,EACjBmC,EAAKvN,OAASA,EACduN,EAAKtN,MAAQ3F,EAAU2F,MACvBsN,EAAK0T,eAAiB3mB,EAAU2mB,eAChC1T,EAAK8X,wBAA0BA,GACzB/qB,EAAU6F,GAAGrB,EAAApE,YAAYsjB,SAAW,CACxC,IAAIsI,EAAa,EACjB,GAAItmB,GAAUA,EAAOZ,MAAQ2X,EAAYvH,MAAO,CAC9C1T,OAAOyR,EAAKpN,GAAGrB,EAAApE,YAAY6rB,WAC3B,IAAIC,EAAQ,IAAI1B,EACdxqB,EAAU4pB,QACV,OACAoC,IACAxqB,OAAOsP,EAAUqb,WAEnBlZ,EAAK+X,aAAahlB,IAAI,OAAQkmB,GAC9BjZ,EAAKgY,cAAciB,EAAMzB,OAASyB,EAClC,IAAIE,EAAiC1mB,EAAQqlB,wBAC7C,GAAIqB,EAAwB,CACrBnZ,EAAK8X,0BAAyB9X,EAAK8X,wBAA0B,IAAInO,SACtE,IAA2C,IAAAyP,EAAA5K,EAAA2K,GAAsBE,EAAAD,EAAA1K,QAAA2K,EAAA1K,KAAA0K,EAAAD,EAAA1K,OAAE,CAA1D,IAAA4K,EAAAzK,EAAAwK,EAAAjtB,MAAA,GAACmtB,EAAAD,EAAA,GAAeE,EAAAF,EAAA,GAClBtZ,EAAK8X,wBAAwB7H,IAAIsJ,IACpCvZ,EAAK8X,wBAAwB/kB,IAAIwmB,EAAeC,4GAKtDjrB,QAAQyR,EAAKpN,GAAGrB,EAAApE,YAAY6rB,WAG9B,IADA,IAAIpI,EAAiB/S,EAAU+S,eACtBzlB,EAAI,EAAGsK,EAAImb,EAAexgB,OAAQjF,EAAIsK,IAAKtK,EAAG,CACrD,IAAIsuB,EAAgB7I,EAAezlB,GAC/BuuB,EAAgB7b,EAAU8b,iBAAiBxuB,GAC3C8tB,EAAQ,IAAI1B,EACdxqB,EAAU4pB,QACV+C,EACAX,IACAU,GAGFzZ,EAAK+X,aAAahlB,IAAI2mB,EAAeT,GACrCjZ,EAAKgY,cAAciB,EAAMzB,OAASyB,UAGtCjZ,EAAK4Z,KAAOC,EAAKptB,OAAOuT,KAkL5B,OA3Q8BD,EAAA8X,EAAA/X,GA6F5B+X,EAAA9qB,UAAA+sB,SAAA,SAAS3mB,EAAYzH,EAA4B+K,QAA5B,IAAA/K,MAAA,WAA4B,IAAA+K,MAAA,MAE/C,IAAIsiB,EAAajuB,KAAK+S,UAAU+S,eAAexgB,OAAStF,KAAKmtB,iBAAiB7nB,OAC1EtF,KAAK8H,GAAGrB,EAAApE,YAAY6rB,aAAaD,EACrC,IAAIE,EAAQ,IAAI1B,EACdzsB,KAAKiC,UAAU4pB,QACfjrB,GAEI,OAASqtB,EAAWppB,SAAS,IACjCopB,EACA5lB,EACAsD,GAEF,GAAI/K,EAAM,CACR,GAAIZ,KAAKitB,aAAa9H,IAAIvkB,GAAO,MAAM,IAAIskB,MAAM,wBACjDllB,KAAKitB,aAAahlB,IAAIrH,EAAMutB,GAI9B,OAFAnuB,KAAKktB,cAAciB,EAAMzB,OAASyB,EAClCnuB,KAAKmtB,iBAAiBtnB,KAAKwC,GACpB8lB,GASTpB,EAAA9qB,UAAAgtB,aAAA,SAAa5mB,EAAY6mB,GACvB,IAAIC,EAoBAhB,EAnBJ,YAFuB,IAAAe,OAAA,GAEf7mB,EAAK+mB,gBACX,OACED,EAAQnvB,KAAK6tB,SACb,MAEF,OACEsB,EAAQnvB,KAAK8tB,SACb,MAEF,OACEqB,EAAQnvB,KAAK+tB,SACb,MAEF,OACEoB,EAAQnvB,KAAKguB,SACb,MAEF,QAAS,MAAM,IAAI9I,MAAM,0BAa3B,OAVIiK,GAASA,EAAM7pB,SACjB6oB,EAAQgB,EAAME,OACRhnB,KAAOA,EACb8lB,EAAMvmB,MAAQnB,EAAApE,YAAYwF,MAE1BsmB,EAAQnuB,KAAKgvB,SAAS3mB,GAEpBA,EAAKP,GAAG,KACV9H,KAAK8uB,KAAKQ,gBAAgBnB,EAAMzB,MAAOwC,GAElCf,GAITpB,EAAA9qB,UAAAstB,cAAA,SAAcpB,GACZ,IAAIA,EAAMrmB,GAAGrB,EAAApE,YAAYiqB,SAAzB,CAEA,IAAI6C,EAEJ,OAHA1rB,OAAO0qB,EAAMzB,OAAS,GAEtBjpB,OAAqB,MAAd0qB,EAAM9lB,MACE8lB,EAAM9lB,KAAM+mB,gBACzB,OACED,EAAQnvB,KAAK6tB,WAAa7tB,KAAK6tB,aAC/B,MAEF,OACEsB,EAAQnvB,KAAK8tB,WAAa9tB,KAAK8tB,aAC/B,MAEF,OACEqB,EAAQnvB,KAAK+tB,WAAa/tB,KAAK+tB,aAC/B,MAEF,OACEoB,EAAQnvB,KAAKguB,WAAahuB,KAAKguB,aAC/B,MAEF,QAAS,MAAM,IAAI9I,MAAM,0BAE3BzhB,OAAO0qB,EAAMzB,OAAS,GACtByC,EAAMtpB,KAAKsoB,KAIbpB,EAAA9qB,UAAAutB,oBAAA,SAAoBnnB,EAAY6mB,GAC9B,IAAIC,EAoBAhB,EAnBJ,OAAQ9lB,EAAK+mB,gBACX,OACED,EAAQnvB,KAAK6tB,WAAa7tB,KAAK6tB,aAC/B,MAEF,OACEsB,EAAQnvB,KAAK8tB,WAAa9tB,KAAK8tB,aAC/B,MAEF,OACEqB,EAAQnvB,KAAK+tB,WAAa/tB,KAAK+tB,aAC/B,MAEF,OACEoB,EAAQnvB,KAAKguB,WAAahuB,KAAKguB,aAC/B,MAEF,QAAS,MAAM,IAAI9I,MAAM,0BAa3B,OAVIiK,EAAM7pB,QACR6oB,EAAQgB,EAAMA,EAAM7pB,OAAS,IACvB+C,KAAOA,GAEb8lB,EAAQnuB,KAAKgvB,SAAS3mB,GACtB8mB,EAAMtpB,KAAKsoB,IAET9lB,EAAKP,GAAG,KACV9H,KAAK8uB,KAAKQ,gBAAgBnB,EAAMzB,MAAOwC,GAElCf,GAITpB,EAAA9qB,UAAAwtB,kBAAA,WACE,IAAIC,EAAK1vB,KAAK0tB,cAGd,OAFK1tB,KAAK2tB,WACL3tB,KAAK2tB,WAAW9nB,KAAK6pB,GADJ1vB,KAAK2tB,YAAe+B,GAEnC1vB,KAAKotB,aAAesC,EAAG7qB,SAAS,KAIzCkoB,EAAA9qB,UAAA0tB,kBAAA,WACElsB,OAA0B,MAAnBzD,KAAK2tB,YACZ,IAAIroB,EAAiBtF,KAAK2tB,WAAYroB,OACtC7B,OAAO6B,EAAS,GACRtF,KAAK2tB,WAAY0B,MACrB/pB,EAAS,EACXtF,KAAKotB,aAAuBptB,KAAK2tB,WAAYroB,EAAS,GAAGT,SAAS,KAElE7E,KAAKotB,aAAe,KACpBptB,KAAK2tB,WAAa,OAKtBZ,EAAA9qB,UAAA2tB,SAAA,SAASjwB,EAAgB2tB,GAMvB,GALAttB,KAAKstB,IAAMA,EACX7pB,QAAQzD,KAAK2tB,aAAe3tB,KAAK2tB,WAAWroB,QAC5CtF,KAAK2tB,WAAa,KAClB3tB,KAAKotB,aAAe,KACpBptB,KAAK6tB,SAAW7tB,KAAK8tB,SAAW9tB,KAAK+tB,SAAW/tB,KAAKguB,SAAW,KAC5DhuB,KAAK6rB,QAAQrL,QAAQqP,UAEvB,IADA,IAAIxC,EAAiBrtB,KAAKqtB,eACjBhtB,EAAI,EAAGsK,EAAI0iB,EAAe/nB,OAAQjF,EAAIsK,IAAKtK,EAAG,CACrD,IAAIyvB,EAAgBzC,EAAehtB,GACnCV,EAAOowB,iBACLzC,EACAwC,EAAcE,aACdF,EAAchrB,OAAOgU,eACrBgX,EAAc9qB,KACd8qB,EAAc7qB,UAOtB8nB,EAAA9qB,UAAA4C,SAAA,WAAqB,OAAO7E,KAAKiC,UAAUklB,YAC7C4F,EA3QA,CAA8BnB,GAAjBlsB,EAAAqtB,WA8Qb,IAAAkD,EAAA,SAAAjb,GAUE,SAAAib,EAAYpE,EAAkB9Y,GAA9B,IAAAmC,EACEF,EAAAxU,KAAAR,KAAM6rB,EAAS,GAAI,KAAG7rB,KATxBkV,EAAAnO,KAAO2X,EAAYwR,gBAUjB,IAAI/I,EAAapU,EAAUod,2BAC3Bjb,EAAKiS,WAAaA,EAClBjS,EAAKqN,aAAe4E,EACpBjS,EAAKnC,UAAYA,EACjBmC,EAAK7M,KAAO6T,EAAAuE,KAAKQ,IAAImP,WAAWrd,KAEpC,OAlBoCkC,EAAAgb,EAAAjb,GAkBpCib,EAlBA,CAAoCrE,GAAvBlsB,EAAAuwB,iBAqBb,IAAAtH,EAAA,SAAA3T,GAUE,SAAA2T,EACER,EACAhB,EACA5E,EACA5W,GAJF,IAAAuJ,EAMEF,EAAAxU,KAAAR,KAAMmoB,EAAe0D,QAAS1E,EAAY5E,IAAaviB,YAdzDkV,EAAAnO,KAAO2X,EAAY2R,gBAejBnb,EAAKiT,eAAiBA,EACtBjT,EAAKvJ,YAAcA,EACnBuJ,EAAKtN,MAAQ+D,EAAY/D,QAE7B,OArBoCqN,EAAA0T,EAAA3T,GAqBpC2T,EArBA,CAAoCiD,GAAvBlsB,EAAAipB,iBAwBb,IAAA2H,EAAA,SAAAtb,GAUE,SAAAsb,EACEruB,EACAsgB,EACAla,EACAsD,EACAhE,GALF,IAAAuN,EAOEF,EAAAxU,KAAAR,KAAMiC,EAAU4pB,QAAS5pB,EAAUklB,WAAY5E,EAAcla,EAAMsD,IAAY3L,YAfjFkV,EAAAnO,KAAO2X,EAAY6R,MAKnBrb,EAAAsb,cAAqB,EAWnBtb,EAAKjT,UAAYA,EACjBiT,EAAKtN,MAAQ3F,EAAU2F,MACvBsN,EAAK7M,KAAOA,EACZ6M,EAAKvN,OAASA,IAElB,OAvB2BsN,EAAAqb,EAAAtb,GAuB3Bsb,EAvBA,CAA2BnE,GAAdzsB,EAAA4wB,QA0Bb,IAAAtG,EAAA,SAAAhV,GAYE,SAAAgV,EACE6B,EACA1E,EACA5E,EACA5a,GAJF,IAAAuN,EAMEF,EAAAxU,KAAAR,KAAM6rB,EAAS1E,EAAY5E,IAAaviB,YAhB1CkV,EAAAnO,KAAO2X,EAAYmL,SAKnB3U,EAAA4U,gBAA4C,KAE5C5U,EAAA6U,gBAA4C,KAU1C7U,EAAKvN,OAASA,IAElB,OArB8BsN,EAAA+U,EAAAhV,GAqB9BgV,EArBA,CAA8B4B,GAAjBlsB,EAAAsqB,WAwBb,IAAA5C,EAAA,SAAApS,GAiBE,SAAAoS,EACEyE,EACA1E,EACA5E,EACA5W,EACAid,GALF,IAAA1T,EAOEF,EAAAxU,KAAAR,KAAM6rB,EAAS1E,EAAY5E,IAAaviB,YAtB1CkV,EAAAnO,KAAO2X,EAAYiG,gBAKnBzP,EAAA2X,UAA+B,IAAIhO,IAEnC3J,EAAAuT,gBAA8C,KAE9CvT,EAAA0P,cAAuC,KAEvC1P,EAAA4T,qBAAiD,KAEjD5T,EAAAkU,mBAA2D,IAAIvK,IAU7D3J,EAAKvJ,YAAcA,EACnBuJ,EAAKtN,MAAQ+D,EAAY/D,MACzBsN,EAAK0T,eAAiBA,IAM1B,OAjCoC3T,EAAAmS,EAAApS,GA8BlCoS,EAAAnlB,UAAA4C,SAAA,WACE,OAAO7E,KAAKmnB,YAEhBC,EAjCA,CAAoCwE,GAAvBlsB,EAAA0nB,iBAoCb,IAAAqJ,EAAA,SAAAzb,GAwBE,SAAAyb,EACExuB,EACAklB,EACA5E,EACApa,EACAuoB,gBADA,IAAAvoB,MAAA,WACA,IAAAuoB,MAAA,MALF,IAAAxb,EAOEF,EAAAxU,KAAAR,KAAMiC,EAAU4pB,QAAS1E,EAAY5E,IAAaviB,KASlD,GAtCFkV,EAAAnO,KAAO2X,EAAYvH,MAWnBjC,EAAA8X,wBAAmD,KAEnD9X,EAAAyb,oBAA2B,EAE3Bzb,EAAA0b,oBAAuC,KAEvC1b,EAAAiU,UAA+C,KAE/CjU,EAAA2b,aAAyB,EAWvB3b,EAAKjT,UAAYA,EACjBiT,EAAKtN,MAAQ3F,EAAU2F,MACvBsN,EAAK0T,eAAiB3mB,EAAU2mB,eAChC1T,EAAK/M,cAAgBA,EACrB+M,EAAK7M,KAAOpG,EAAU4pB,QAAQrL,QAAQW,UAAU2P,QAAQ5b,GACxDA,EAAKwb,KAAOA,EAGRA,EAAM,CACR,IAAIrC,EAAyBqC,EAAK1D,wBAClC,GAAIqB,EAAwB,CACrBnZ,EAAK8X,0BAAyB9X,EAAK8X,wBAA0B,IAAInO,SACtE,IAAiC,IAAAkS,EAAArN,EAAA2K,GAAsB2C,EAAAD,EAAAnN,QAAAoN,EAAAnN,KAAAmN,EAAAD,EAAAnN,OAAE,CAAhD,IAAA4K,EAAAzK,EAAAiN,EAAA1vB,MAAA,GAAC2oB,EAAAuE,EAAA,GAAUyC,EAAAzC,EAAA,GAClBtZ,EAAK8X,wBAAwB/kB,IAAIgiB,EAAUgH,uGAMjD,IACI5wB,EAAQsK,EADRgB,EAAcuJ,EAAKjT,UAAU0J,YAEjC,GAAIA,EAAa,CACf,IAAIiE,EAAiBjE,EAAYiE,eACjC,GAAIzH,EAAe,CACjB,IAAKwC,EAAIxC,EAAc7C,SAAWsK,EAAetK,OAC/C,MAAM,IAAI4f,MAAM,gCAElB,GAAIva,EAEF,IADKuK,EAAK8X,0BAAyB9X,EAAK8X,wBAA0B,IAAInO,KACjExe,EAAI,EAAGA,EAAIsK,IAAKtK,EACnB6U,EAAK8X,wBAAwB/kB,IAAI2H,EAAevP,GAAGO,KAAKwE,KAAM+C,EAAc9H,SAG3E,GAAIuP,EAAetK,OACxB,MAAM,IAAI4f,MAAM,yCA4CxB,OA9G2BjQ,EAAAwb,EAAAzb,GAwEzByb,EAAAxuB,UAAAivB,eAAA,SAAeC,GACb,IAAIC,EAAwBpxB,KAC5B,GAAG,GAAIoxB,GAAWD,EAAQ,OAAO,QAC1BC,EAAUA,EAAQV,MACzB,OAAO,GAITD,EAAAxuB,UAAAovB,eAAA,SAAetqB,EAAoBuqB,GACjC,QADiC,IAAAA,OAAA,GAC7BA,EACF,OAAQvqB,GACN,KAAKiV,EAAaW,YAEhB,GADI4U,EAAoBvxB,KAAKqxB,eAAerV,EAAaa,uBAClC,OAAO0U,EAC9B,MAEF,KAAKvV,EAAaY,YAChB,IAAI2U,EACJ,GADIA,EAAoBvxB,KAAKqxB,eAAerV,EAAac,uBAClC,OAAOyU,EAC9B,MAEF,QAAS9tB,QAAO,GAGpB,IAAI2hB,EAAyBplB,KAC7B,EAAG,CACD,IAAImpB,EAAY/D,EAAS+D,UACzB,GAAIA,EAAW,CACb,IAAIqI,EAAWrI,EAAUjoB,IAAI6F,GAC7B,GAAIyqB,EAAU,OAAOA,SAEhBpM,EAAWA,EAASsL,MAC7B,OAAO,MAGTD,EAAAxuB,UAAA4C,SAAA,WACE,OAAO7E,KAAKmnB,YAEhBsJ,EA9GA,CAA2B7E,GAAdlsB,EAAA+wB,QAiHb,IAAApF,EAAA,SAAArW,GAQE,SAAAqW,EACEQ,EACA1E,EACA5E,EACA5W,EACAid,GALF,IAAA1T,EAOEF,EAAAxU,KAAAR,KAAM6rB,EAAS1E,EAAY5E,EAAc5W,EAAaid,IAAe5oB,YAbvEkV,EAAAnO,KAAO2X,EAAY2J,sBAerB,OAjBwCpT,EAAAoW,EAAArW,GAiBxCqW,EAjBA,CAAwCjE,GAA3B1nB,EAAA2rB,qBAoBb,IAAAoG,EAAA,SAAAzc,GAUE,SAAAyc,EACExvB,EACAklB,EACA5E,EACApa,EACAuoB,QADA,IAAAvoB,eACA,IAAAuoB,MAAA,MALF,IAAAxb,EAOEF,EAAAxU,KAAAR,KAAMiC,EAAWklB,EAAY5E,EAAcpa,EAAeuoB,IAAK1wB,YAfjEkV,EAAAnO,KAAO2X,EAAYgT,YAiBrB,OAnB+Bzc,EAAAwc,EAAAzc,GAmB/Byc,EAnBA,CAA+BhB,GAAlB/wB,EAAA+xB,YAsBb,SAAkBE,GAEhBA,IAAA,eAKAA,IAAA,qBAEAA,IAAA,qCAEAA,IAAA,mBAEAA,IAAA,mBAEAA,IAAA,0BAEAA,IAAA,0BAKAA,IAAA,kDAEAA,IAAA,iDAEAA,IAAA,iDAEAA,IAAA,uDAEAA,IAAA,wDAKAA,IAAA,sCAEAA,IAAA,4CAKAA,IAAA,sCAMAA,IAAA,sCAQAA,IAAA,wCAxDF,CAAkBjyB,EAAAiyB,YAAAjyB,EAAAiyB,eAgElB,IAAA5C,EAAA,WAyCE,SAAAA,IAtBA/uB,KAAA4xB,aAAyC,KAof3C,OA7eS7C,EAAAptB,OAAP,SAAckwB,GACZ,IAAIC,EAAa,IAAI/C,EAWrB,OAVA+C,EAAWnqB,OAAS,KACpBmqB,EAAWlqB,MAAK,EAChBkqB,EAAWD,gBAAkBA,EAC7BC,EAAWC,cAAgB,KAC3BD,EAAWE,WAAa,KACxBF,EAAWG,YAAc,KACzBH,EAAW1oB,WAAayoB,EAAgB9e,UAAU3J,WAClD0oB,EAAW9E,wBAA0B6E,EAAgB7E,wBACrD8E,EAAWI,cAAgBzQ,QAAQ,GACnCqQ,EAAWK,iBAAmB,KACvBL,GAMT/C,EAAA9sB,UAAA6F,GAAA,SAAGC,GAAyB,OAAQ/H,KAAK4H,MAAQG,IAASA,GAE1DgnB,EAAA9sB,UAAA+F,MAAA,SAAMD,GAAyB,OAA8B,IAAtB/H,KAAK4H,MAAQG,IAEpDgnB,EAAA9sB,UAAAgG,IAAA,SAAIF,GAAyB/H,KAAK4H,OAASG,GAE3CgnB,EAAA9sB,UAAAmwB,MAAA,SAAMrqB,GAAyB/H,KAAK4H,QAAUG,GAG9CgnB,EAAA9sB,UAAAowB,KAAA,WACE,IAAIC,EAAS,IAAIvD,EAWjB,OAVAuD,EAAO3qB,OAAS3H,KAChBsyB,EAAO1qB,MAAQ5H,KAAK4H,MACpB0qB,EAAOT,gBAAkB7xB,KAAK6xB,gBAC9BS,EAAOP,cAAgB/xB,KAAK+xB,cAC5BO,EAAON,WAAahyB,KAAKgyB,WACzBM,EAAOL,YAAcjyB,KAAKiyB,YAC1BK,EAAOlpB,WAAapJ,KAAKoJ,WACzBkpB,EAAOtF,wBAA0BhtB,KAAKgtB,wBACtCsF,EAAOJ,cAAgBlyB,KAAKkyB,cAC5BI,EAAOH,iBAAmBnyB,KAAKmyB,iBAAmBnyB,KAAKmyB,iBAAiBI,QAAU,KAC3ED,GAITvD,EAAA9sB,UAAAuwB,KAAA,mBACM7qB,EAASlE,OAAOzD,KAAK2H,QACzB,GAAI3H,KAAK4xB,aAAc,KACrB,IAAwB,IAAApD,EAAA9K,EAAA1jB,KAAK4xB,aAAapkB,UAAQsW,EAAA0K,EAAA5K,QAAAE,EAAAD,KAAAC,EAAA0K,EAAA5K,OAAE,CAA/C,IAAI6O,EAAW3O,EAAAxiB,MACdmxB,EAAY3qB,GAAGrB,EAAApE,YAAYqwB,SAC7B1yB,KAAK6xB,gBAAgBtC,cAAckD,qGAGvCzyB,KAAK4xB,aAAe,KAEtB,OAAOjqB,GAITonB,EAAA9sB,UAAA0wB,eAAA,SAAetqB,EAAYzH,EAAcsuB,EAAevjB,GACtD,IAAI8mB,EAAczyB,KAAK6xB,gBAAgB5C,aAAa5mB,GAAM,GAC1D,GAAKrI,KAAK4xB,aACL,CACH,IAAIgB,EAAgB5yB,KAAK4xB,aAAa1wB,IAAIN,GAC1C,GAAIgyB,EAOF,OANIjnB,EACF3L,KAAK6xB,gBAAgBhG,QAAQtlB,MAC3B0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,OAEdX,QAAO,GACPmvB,OAVa5yB,KAAK4xB,aAAe,IAAI/S,IAkBhD,OALA4T,EAAYxqB,IAAIxB,EAAApE,YAAYqwB,QAC5B1yB,KAAK4xB,aAAa3pB,IAAIrH,EAAM6xB,GACxBpqB,EAAKP,GAAG,KACV9H,KAAKsvB,gBAAgBmD,EAAY/F,MAAOwC,GAEnCuD,GAIT1D,EAAA9sB,UAAA4wB,oBAAA,SAAoBnG,EAAYrkB,EAAYzH,GAC1C,GAAKZ,KAAK4xB,aACL,CACH,IAAIgB,EAAgB5yB,KAAK4xB,aAAa1wB,IAAIN,GAC1C,GAAIgyB,EAAe,CACjB,IAAIjnB,EAAcinB,EAAcjnB,YAOhC,OANIA,EACF3L,KAAK6xB,gBAAgBhG,QAAQtlB,MAC3B0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,OAEdX,QAAO,GACPmvB,QAXa5yB,KAAK4xB,aAAe,IAAI/S,IAchDpb,OAAOipB,EAAQ1sB,KAAK6xB,gBAAgB3E,cAAc5nB,QAClD,IAAIwtB,EAAc,IAAIrG,EACpBzsB,KAAK6xB,gBAAgBhG,QACrBjrB,EACA8rB,EACArkB,EACA,MAGF,OADArI,KAAK4xB,aAAa3pB,IAAIrH,EAAMkyB,GACrBA,GAIT/D,EAAA9sB,UAAA8wB,eAAA,SAAenyB,GACb,IAAIutB,EACAiD,EAAuBpxB,KAC3B,GACE,GAAIoxB,EAAQQ,eAAiBzD,EAAQiD,EAAQQ,aAAa1wB,IAAIN,IAC5D,OAAOutB,QAEFiD,EAAUA,EAAQzpB,QAC3B,OAAO3H,KAAK6xB,gBAAgB5E,aAAa/rB,IAAIN,IAI/CmuB,EAAA9sB,UAAA+wB,eAAA,SAAetG,GACb,IAAIuG,EACAC,EACJ,GAAIxG,EAAQ,GAAI,CACd,GAAIA,EAAQ,EAAG,OAAO,EACtBuG,EAAMjzB,KAAKkyB,kBACN,MAAIgB,EAAMlzB,KAAKmyB,kBAMpB,OAAO,EALP,IAAI9xB,GAAMqsB,EAAQ,IAAM,GAAM,EAC9B,GAAIrsB,GAAK6yB,EAAI5tB,OAAQ,OAAO,EAC5B2tB,EAAMC,EAAI7yB,GACVqsB,GAAmB,IAATrsB,EAAI,GAIhB,OAAO8yB,OACLC,QACEH,EACAI,QACEC,QACA7R,QAAQiL,KAGZ6G,WAKJxE,EAAA9sB,UAAAqtB,gBAAA,SAAgB5C,EAAYwC,GAC1B,IAAI+D,EACAO,GAAY,EAChB,GAAI9G,EAAQ,GAAI,CACd,GAAIA,EAAQ,EAAG,OACfuG,EAAMjzB,KAAKkyB,kBACN,CACL,IAAIgB,EAAMlzB,KAAKmyB,iBAMf,IALAqB,GAAQ9G,EAAQ,IAAM,GAAM,EACvBwG,IACHlzB,KAAKmyB,iBAAmBe,EAAM,IAAI/sB,MAAMqtB,EAAM,GAC9CN,EAAI5tB,OAAS,GAER4tB,EAAI5tB,QAAUkuB,GAAKN,EAAIrtB,KAAK4b,QAAQ,IAC3CwR,EAAMC,EAAIM,GACV9G,GAAqB,IAAX8G,EAAM,GAElBP,EAAM/D,EACFuE,OACER,EACAI,QACEC,QACA7R,QAAQiL,KAGZ0G,QACEH,EACAS,QACEL,QACEC,QACA7R,QAAQiL,MAId8G,GAAO,EAAWxzB,KAAKmyB,iBAAkBqB,GAAOP,EAC/CjzB,KAAKkyB,cAAgBe,GAI5BlE,EAAA9sB,UAAA0xB,QAAA,SAAQC,GACN5zB,KAAK4H,OAAuB,KAAdgsB,EAAMhsB,MACpB5H,KAAKkyB,cAAgB0B,EAAM1B,cAC3BlyB,KAAKmyB,iBAAmByB,EAAMzB,kBAIhCpD,EAAA9sB,UAAA4xB,mBAAA,SAAmBD,GACbA,EAAM9rB,GAAE,IACV9H,KAAKiI,IAAG,IAEN2rB,EAAM9rB,GAAE,IACV9H,KAAKiI,IAAG,KAEN2rB,EAAM9rB,GAAE,IAAsB8rB,EAAM5B,YAAchyB,KAAKgyB,YACzDhyB,KAAKiI,IAAG,KAEN2rB,EAAM9rB,GAAE,KAAyB8rB,EAAM7B,eAAiB/xB,KAAK+xB,eAC/D/xB,KAAKiI,IAAG,KAEN2rB,EAAM9rB,GAAE,KACV9H,KAAKiI,IAAG,OAKZ8mB,EAAA9sB,UAAA6xB,cAAA,SAAc1oB,EAAYC,GAExBrL,KAAK4H,OAASwD,EAAKxD,MAAQyD,EAAMzD,MAAK,GAGtC5H,KAAK4H,OAAmB,KAAVwD,EAAKxD,MACnB5H,KAAK4H,OAAoB,KAAXyD,EAAMzD,MAGpB5H,KAAKkyB,cAAgBkB,QAAQhoB,EAAK8mB,cAAe7mB,EAAM6mB,eACvD,IAAI6B,EAAU3oB,EAAK+mB,iBACf6B,EAAW3oB,EAAM8mB,iBACrB,GAAe,MAAX4B,GAA+B,MAAZC,EAAkB,CACvC,IAAIC,EAAUj0B,KAAKmyB,iBACf+B,EAAYC,IAAIJ,EAAQzuB,OAAQ0uB,EAAS1uB,QAC7C,GAAI4uB,EAAW,CACb,GAAKD,EACA,KAAOA,EAAQ3uB,OAAS4uB,GAAWD,EAAQpuB,KAAK4b,QAAQ,SAD/CwS,EAAU,IAAI9tB,MAAM+tB,GAElC,IAAK,IAAI7zB,EAAI,EAAGA,EAAI6zB,IAAa7zB,EAC/B4zB,EAAQ5zB,GAAK+yB,QACXW,EAAQ1zB,GACR2zB,EAAS3zB,OAYnB0uB,EAAA9sB,UAAAmyB,YAAA,SAAYjqB,EAAqB9B,GAM/B,GAHA5E,OAAO4E,GAAQ6T,EAAAuE,KAAKc,OAGflZ,EAAKP,GAAG,IAAsC,OAAO,EAE1D,IAAIkH,EACJ,OAAQoN,EAAAiY,gBAAgBlqB,IAGtB,KAAKiS,EAAAkY,aAAaC,SAChB,IAAI1C,EAAkB7xB,KAAK6xB,gBACvB1D,EAAQ0D,EAAgB3E,cAAc9Q,EAAAoY,iBAAiBrqB,IAC3D,OAAQ0nB,EAAgB/C,KAAKkE,eAAe7E,EAAMzB,QAC3C+H,EAAsBtG,EAAM9lB,KAAMA,GAI3C,KAAK+T,EAAAkY,aAAaI,SAEhB,OADAjxB,OAAO2Y,EAAAuY,WAAWxqB,IACXnK,KAAKo0B,YAAYhY,EAAAwY,iBAAiBzqB,GAAO9B,GAIlD,KAAK+T,EAAAkY,aAAaO,UAAW,OAAO,EAEpC,KAAKzY,EAAAkY,aAAaQ,OAChB,OAAQ1Y,EAAA2Y,YAAY5qB,IAGlB,KAAKiS,EAAA4Y,SAASC,MACd,KAAK7Y,EAAA4Y,SAASE,MACd,KAAK9Y,EAAA4Y,SAASG,MACd,KAAK/Y,EAAA4Y,SAASI,MACd,KAAKhZ,EAAA4Y,SAASK,MACd,KAAKjZ,EAAA4Y,SAASM,MACd,KAAKlZ,EAAA4Y,SAASO,MACd,KAAKnZ,EAAA4Y,SAASQ,MACd,KAAKpZ,EAAA4Y,SAASS,MACd,KAAKrZ,EAAA4Y,SAASU,MACd,KAAKtZ,EAAA4Y,SAASW,MACd,KAAKvZ,EAAA4Y,SAASY,MACd,KAAKxZ,EAAA4Y,SAASa,MACd,KAAKzZ,EAAA4Y,SAASc,MACd,KAAK1Z,EAAA4Y,SAASe,MACd,KAAK3Z,EAAA4Y,SAASgB,MACd,KAAK5Z,EAAA4Y,SAASiB,MACd,KAAK7Z,EAAA4Y,SAASkB,MACd,KAAK9Z,EAAA4Y,SAASmB,MACd,KAAK/Z,EAAA4Y,SAASoB,MACd,KAAKha,EAAA4Y,SAASqB,MACd,KAAKja,EAAA4Y,SAASsB,MACd,KAAKla,EAAA4Y,SAASuB,MACd,KAAKna,EAAA4Y,SAASwB,MACd,KAAKpa,EAAA4Y,SAASyB,MACd,KAAKra,EAAA4Y,SAAS0B,MACd,KAAKta,EAAA4Y,SAAS2B,MACd,KAAKva,EAAA4Y,SAAS4B,MACd,KAAKxa,EAAA4Y,SAAS6B,MACd,KAAKza,EAAA4Y,SAAS8B,MACd,KAAK1a,EAAA4Y,SAAS+B,MACd,KAAK3a,EAAA4Y,SAASgC,MAAO,OAAO,EAG5B,KAAK5a,EAAA4Y,SAASiC,OACZ,QAEI7a,EAAAiY,gBAAgBrlB,EAAUoN,EAAA8a,cAAc/sB,KAAUiS,EAAAkY,aAAa6C,QAEhC,GAA7B/a,EAAAgb,iBAAiBpoB,IAEc,GAA7BoN,EAAAgb,iBAAiBpoB,KAChBhP,KAAKo0B,YAAYhY,EAAAib,eAAeltB,GAAO9B,KAI5C+T,EAAAiY,gBAAgBrlB,EAAUoN,EAAAib,eAAeltB,KAAUiS,EAAAkY,aAAa6C,QAEjC,GAA7B/a,EAAAgb,iBAAiBpoB,IAEc,GAA7BoN,EAAAgb,iBAAiBpoB,KAChBhP,KAAKo0B,YAAYhY,EAAA8a,cAAc/sB,GAAO9B,KASjD,KAAK+T,EAAA4Y,SAASsC,OAGZ,QAGMlb,EAAAiY,gBAAgBrlB,EAAUoN,EAAA8a,cAAc/sB,KAAUiS,EAAAkY,aAAa6C,OAC/D/a,EAAAgb,iBAAiBpoB,IAAY3G,EAAKkvB,wBAAwBrb,EAAAuE,KAAKG,OAC3D5gB,KAAKo0B,YAAYplB,EAAS3G,IAG9B+T,EAAAiY,gBAAgBrlB,EAAUoN,EAAAib,eAAeltB,KAAUiS,EAAAkY,aAAa6C,OAChE/a,EAAAgb,iBAAiBpoB,IAAY3G,EAAKkvB,wBAAwBrb,EAAAuE,KAAKG,OAC3D5gB,KAAKo0B,YAAYplB,EAAS3G,IAMtC,KAAK+T,EAAA4Y,SAASwC,OACZ,IAAIC,EAAQ,GAAKpvB,EAAKqvB,KACtB,OAAOtb,EAAAiY,gBAAgBrlB,EAAUoN,EAAAib,eAAeltB,KAAUiS,EAAAkY,aAAa6C,OAChE/a,EAAAgb,iBAAiBpoB,GAAWyoB,EAIrC,KAAKrb,EAAA4Y,SAAS2C,OACRF,EAAQ,GAAKpvB,EAAKqvB,KACtB,OAAO13B,KAAKo0B,YAAYhY,EAAA8a,cAAc/sB,GAAO9B,KAC3C+T,EAAAiY,gBAAgBrlB,EAAUoN,EAAAib,eAAeltB,KAAUiS,EAAAkY,aAAa6C,OAChE/a,EAAAgb,iBAAiBpoB,GAAWyoB,GAMhC,KAAKrb,EAAA4Y,SAAS4C,OACRH,EAAQ,GAAKpvB,EAAKqvB,KACtB,OAAOrvB,EAAKP,GAAE,KAERsU,EAAAiY,gBAAgBrlB,EAAUoN,EAAAib,eAAeltB,KAAUiS,EAAAkY,aAAa6C,OAChE/a,EAAAgb,iBAAiBpoB,GAAWyoB,GAE9Bz3B,KAAKo0B,YAAYhY,EAAA8a,cAAc/sB,GAAO9B,MACpC+T,EAAAiY,gBAAgBrlB,EAAUoN,EAAAib,eAAeltB,KAAUiS,EAAAkY,aAAa6C,OAChE/a,EAAAgb,iBAAiBpoB,IAAYyoB,GAKrC,KAAKrb,EAAA4Y,SAAS6C,OACd,KAAKzb,EAAA4Y,SAAS8C,OACd,KAAK1b,EAAA4Y,SAAS+C,OACZ,OAAO/3B,KAAKo0B,YAAYhY,EAAA8a,cAAc/sB,GAAO9B,IACtCrI,KAAKo0B,YAAYhY,EAAAib,eAAeltB,GAAO9B,GAGlD,MAGF,KAAK+T,EAAAkY,aAAa0D,MAChB,OAAQ5b,EAAA6b,WAAW9tB,IAGjB,KAAKiS,EAAA8b,QAAQC,OACb,KAAK/b,EAAA8b,QAAQE,OAAQ,OAAO,EAG5B,KAAKhc,EAAA8b,QAAQG,OACb,KAAKjc,EAAA8b,QAAQI,OACb,KAAKlc,EAAA8b,QAAQK,UAAW,OAAOlwB,EAAKqvB,KAAO,EAE7C,MAIF,KAAKtb,EAAAkY,aAAa6C,MAChB,IAAI71B,EAAa,EACjB,OAAQ8a,EAAAoc,kBAAkBruB,IACxB,OAAuB7I,EAAQ8a,EAAAgb,iBAAiBjtB,GAAO,MACvD,OAAuB7I,EAAQ8a,EAAAqc,oBAAoBtuB,GAAO,MAC1D,OAAuB7I,EAAQsf,IAAIxE,EAAAsc,iBAAiBvuB,IAAQ,MAC5D,OAAuB7I,EAAQsf,IAAIxE,EAAAuc,iBAAiBxuB,IAAQ,MAC5D,QAAS1G,QAAO,GAElB,OAAQ4E,EAAKtB,MACX,OAAkB,OAAOzF,EAAQof,GAAGkY,WAAat3B,EAAQof,GAAGmY,UAC5D,OAAmB,OAAOv3B,EAAQqf,IAAIiY,WAAat3B,EAAQqf,IAAIkY,UAC/D,OAAkB,OAAOv3B,EAAQ,GAAKA,EAAQyf,GAAG8X,UACjD,OAAmB,OAAOv3B,EAAQ,GAAKA,EAAQ0f,IAAI6X,UACnD,QAAoB,OAAuB,KAAP,EAARv3B,GAE9B,MAIF,KAAK8a,EAAAkY,aAAawE,KAChB,IAAIC,OAAQ,EACZ,OAAQ3c,EAAA4c,aAAa7uB,IACnB,KAAK,EAAM4uB,EAAW3c,EAAA6c,aAAa9uB,GAAQ+R,EAAAuE,KAAKC,GAAKxE,EAAAuE,KAAKM,GAAI,MAC9D,KAAK,EAAMgY,EAAW3c,EAAA6c,aAAa9uB,GAAQ+R,EAAAuE,KAAKE,IAAMzE,EAAAuE,KAAKO,IAAK,MAChE,QAAW+X,EAAW3c,EAAA6c,aAAa9uB,GAAQ+R,EAAAuE,KAAKG,IAAM1E,EAAAuE,KAAKQ,IAE7D,OAAOwT,EAAsBsE,EAAU1wB,GAMzC,KAAK+T,EAAAkY,aAAa4E,MAChB,IAAK9c,EAAA+c,aAAahvB,GAAO,CACvB,IAAIutB,EAAOj0B,OAAO2Y,EAAAgd,mBAAmBjvB,IACjCkvB,EAAOjd,EAAAkd,cAAcnvB,EAAMutB,EAAO,GACtC,OAAO13B,KAAKo0B,YAAYiF,EAAMhxB,GAGhC,MAIF,KAAK+T,EAAAkY,aAAaiF,GAChB,OAAOv5B,KAAKo0B,YAAYhY,EAAAod,UAAUrvB,GAAO9B,IAClCrI,KAAKo0B,YAAY3wB,OAAO2Y,EAAAqd,WAAWtvB,IAAQ9B,GAIpD,KAAK+T,EAAAkY,aAAaoF,OAChB,OAAO15B,KAAKo0B,YAAYhY,EAAAud,cAAcxvB,GAAO9B,IACtCrI,KAAKo0B,YAAYhY,EAAAwd,cAAczvB,GAAO9B,GAI/C,KAAK+T,EAAAkY,aAAauF,KAChB,IAAIhO,EAAU7rB,KAAK6xB,gBAAgBhG,QAC/BzG,EAAW3hB,OAAOooB,EAAQ5M,gBAAgB/d,IAAIuC,OAAO2Y,EAAA0d,cAAc3vB,MACvE1G,OAAO2hB,EAASre,MAAQ2X,EAAYnH,UACpC,IAAInO,EAAwBgc,EAAUrS,UAAU3J,WAChD,OAAmBgc,EAAU0J,KAAKhnB,GAAE,IAC7B2sB,EAAsBrrB,EAAYf,GAI3C,KAAK+T,EAAAkY,aAAayF,YAAa,OAAO,EAExC,OAAO,GAIThL,EAAA9sB,UAAA2tB,SAAA,WACEnsB,OAAsB,MAAfzD,KAAK2H,QACZ3H,KAAK+xB,cAAgB,KACrB/xB,KAAKgyB,WAAa,KAClBhyB,KAAKiyB,YAAc,KACnBjyB,KAAKgtB,wBAA0B,MAEnC+B,EAvgBA,GA0gBA,SAAS0F,EAAsBsE,EAAgB/tB,GAC7C,IAAIgvB,EAAWjB,EAAS/S,SACpBiU,EAASjvB,EAAOgb,SACpB,OAAQ+S,EAASjxB,GAAE,IACZkyB,EAAWC,GACXlB,EAASjxB,GAAE,IAAsBkD,EAAOlD,GAAE,GA/gBtCpI,EAAAqvB,sFC58Fb,IAuBYuF,EAvBZ4F,EAAA/5B,EAAA,KAaA,SAAkBg6B,GAChBA,IAAA,eACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,6BACAA,IAAA,gBAPF,CAAkBz6B,EAAAy6B,aAAAz6B,EAAAy6B,gBAUlB,SAAY7F,GACVA,IAAA,QAAU8F,sBAAoB,UAC9B9F,IAAA,MAAQ+F,oBAAkB,QAC1B/F,IAAA,GAAKgG,iBAAe,KACpBhG,IAAA,KAAOiG,mBAAiB,OACxBjG,IAAA,MAAQkG,oBAAkB,QAC1BlG,IAAA,OAASmG,qBAAmB,SAC5BnG,IAAA,KAAOoG,mBAAiB,OACxBpG,IAAA,WAAaqG,yBAAuB,aACpCrG,IAAA,aAAesG,2BAAyB,eACxCtG,IAAA,SAAWuG,uBAAqB,WAChCvG,IAAA,SAAWwG,uBAAqB,WAChCxG,IAAA,UAAYyG,wBAAsB,YAClCzG,IAAA,UAAY0G,wBAAsB,YAClC1G,IAAA,KAAO2G,mBAAiB,OACxB3G,IAAA,MAAQ4G,oBAAkB,QAC1B5G,IAAA,MAAQ6G,oBAAkB,QAC1B7G,IAAA,MAAQ8G,oBAAkB,QAC1B9G,IAAA,OAAS+G,qBAAmB,SAC5B/G,IAAA,OAASgH,qBAAmB,SAC5BhH,IAAA,KAAOiH,mBAAiB,OACxBjH,IAAA,OAASkH,qBAAmB,SAC5BlH,IAAA,KAAOmH,mBAAiB,OACxBnH,IAAA,IAAMoH,kBAAgB,MACtBpH,IAAA,YAAcqH,0BAAwB,cACtCrH,IAAA,cAAgBsH,4BAA0B,gBAC1CtH,IAAA,UAAYuH,wBAAsB,YAClCvH,IAAA,WAAawH,yBAAuB,aACpCxH,IAAA,WAAayH,yBAAuB,aA5BtC,CAAYzH,EAAA50B,EAAA40B,eAAA50B,EAAA40B,kBA+BZ,SAAY4D,GACVA,IAAA,OAAS8D,qBAAmB,SAC5B9D,IAAA,OAAS+D,qBAAmB,SAC5B/D,IAAA,UAAYgE,wBAAsB,YAClChE,IAAA,OAASiE,uBAAqB,SAC9BjE,IAAA,OAASkE,uBAAqB,SAC9BlE,IAAA,QAAUmE,wBAAsB,UAChCnE,IAAA,SAAWoE,yBAAuB,WAClCpE,IAAA,SAAWqE,yBAAuB,WAClCrE,IAAA,WAAasE,2BAAyB,aACtCtE,IAAA,QAAUuE,wBAAsB,UAChCvE,IAAA,OAASwE,qBAAmB,SAC5BxE,IAAA,OAASyE,qBAAmB,SAC5BzE,IAAA,OAAS0E,qBAAmB,SAC5B1E,IAAA,UAAY2E,wBAAsB,YAClC3E,IAAA,OAAS4E,uBAAqB,SAC9B5E,IAAA,OAAS6E,uBAAqB,SAC9B7E,IAAA,QAAU8E,wBAAsB,UAChC9E,IAAA,SAAW+E,yBAAuB,WAClC/E,IAAA,SAAWgF,yBAAuB,WAClChF,IAAA,WAAaiF,2BAAyB,aACtCjF,IAAA,QAAUkF,wBAAsB,UAChClF,IAAA,OAASmF,qBAAmB,SAC5BnF,IAAA,UAAYoF,yBAAuB,YACnCpF,IAAA,UAAYqF,yBAAuB,YACnCrF,IAAA,QAAUsF,sBAAoB,UAC9BtF,IAAA,cAAgBuF,iCAA+B,gBAC/CvF,IAAA,cAAgBwF,iCAA+B,gBAC/CxF,IAAA,cAAgByF,iCAA+B,gBAC/CzF,IAAA,cAAgB0F,iCAA+B,gBAC/C1F,IAAA,cAAgB2F,iCAA+B,gBAC/C3F,IAAA,cAAgB4F,iCAA+B,gBAC/C5F,IAAA,cAAgB6F,iCAA+B,gBAC/C7F,IAAA,cAAgB8F,iCAA+B,gBAC/C9F,IAAA,eAAiB+F,+BAA6B,iBAC9C/F,IAAA,eAAiBgG,+BAA6B,iBAC9ChG,IAAA,gBAAkBiG,mCAAiC,kBACnDjG,IAAA,gBAAkBkG,mCAAiC,kBACnDlG,IAAA,gBAAkBmG,mCAAiC,kBACnDnG,IAAA,gBAAkBoG,mCAAiC,kBACnDpG,IAAA,gBAAkBqG,mCAAiC,kBACnDrG,IAAA,gBAAkBsG,mCAAiC,kBACnDtG,IAAA,gBAAkBuG,mCAAiC,kBACnDvG,IAAA,gBAAkBwG,mCAAiC,kBACnDxG,IAAA,WAAayG,2BAAyB,aACtCzG,IAAA,UAAY0G,0BAAwB,YACpC1G,IAAA,eAAiB2G,6BAA2B,iBAC5C3G,IAAA,eAAiB4G,6BAA2B,iBAG5C5G,IAAA,cAAgB6G,0BAAwB,gBACxC7G,IAAA,eAAiB8G,2BAAyB,iBAC1C9G,IAAA,cAAgB+G,0BAAwB,gBACxC/G,IAAA,eAAiBgH,2BAAyB,iBAC1ChH,IAAA,eAAiBiH,2BAAyB,iBAtD5C,CAAYz/B,EAAAw4B,UAAAx4B,EAAAw4B,aAmEZ,SAAYlD,GACVA,IAAA,OAASoK,qBAAmB,SAC5BpK,IAAA,OAASqK,qBAAmB,SAC5BrK,IAAA,OAASsK,qBAAmB,SAC5BtK,IAAA,OAASuK,sBAAoB,SAC7BvK,IAAA,OAASwK,sBAAoB,SAC7BxK,IAAA,OAASyK,sBAAoB,SAC7BzK,IAAA,OAAS0K,sBAAoB,SAC7B1K,IAAA,OAAS2K,qBAAmB,SAC5B3K,IAAA,MAAQ4K,oBAAkB,QAC1B5K,IAAA,OAAS6K,qBAAmB,SAC5B7K,IAAA,OAAS8K,qBAAmB,SAC5B9K,IAAA,OAAS+K,sBAAoB,SAC7B/K,IAAA,OAASgL,sBAAoB,SAC7BhL,IAAA,QAAUiL,sBAAoB,UAC9BjL,IAAA,QAAUkL,sBAAoB,UAC9BlL,IAAA,MAAQmL,oBAAkB,QAC1BnL,IAAA,MAAQoL,oBAAkB,QAC1BpL,IAAA,MAAQqL,qBAAmB,QAC3BrL,IAAA,MAAQsL,qBAAmB,QAC3BtL,IAAA,MAAQuL,qBAAmB,QAC3BvL,IAAA,MAAQwL,qBAAmB,QAC3BxL,IAAA,MAAQyL,qBAAmB,QAC3BzL,IAAA,MAAQ0L,qBAAmB,QAC3B1L,IAAA,MAAQ2L,qBAAmB,QAC3B3L,IAAA,MAAQ4L,qBAAmB,QAC3B5L,IAAA,OAAS6L,qBAAmB,SAC5B7L,IAAA,OAAS8L,qBAAmB,SAC5B9L,IAAA,OAAS+L,qBAAmB,SAC5B/L,IAAA,OAASgM,sBAAoB,SAC7BhM,IAAA,OAASiM,sBAAoB,SAC7BjM,IAAA,OAASkM,sBAAoB,SAC7BlM,IAAA,OAASmM,sBAAoB,SAC7BnM,IAAA,OAASoM,qBAAmB,SAC5BpM,IAAA,MAAQqM,oBAAkB,QAC1BrM,IAAA,OAASsM,qBAAmB,SAC5BtM,IAAA,OAASuM,qBAAmB,SAC5BvM,IAAA,OAASwM,sBAAoB,SAC7BxM,IAAA,OAASyM,sBAAoB,SAC7BzM,IAAA,QAAU0M,sBAAoB,UAC9B1M,IAAA,QAAU2M,sBAAoB,UAC9B3M,IAAA,MAAQ4M,oBAAkB,QAC1B5M,IAAA,MAAQ6M,oBAAkB,QAC1B7M,IAAA,MAAQ8M,qBAAmB,QAC3B9M,IAAA,MAAQ+M,qBAAmB,QAC3B/M,IAAA,MAAQgN,qBAAmB,QAC3BhN,IAAA,MAAQiN,qBAAmB,QAC3BjN,IAAA,MAAQkN,qBAAmB,QAC3BlN,IAAA,MAAQmN,qBAAmB,QAC3BnN,IAAA,MAAQoN,qBAAmB,QAC3BpN,IAAA,MAAQqN,qBAAmB,QAC3BrN,IAAA,OAASsN,uBAAqB,SAC9BtN,IAAA,OAASuN,uBAAqB,SAC9BvN,IAAA,OAASwN,uBAAqB,SAC9BxN,IAAA,OAASyN,uBAAqB,SAC9BzN,IAAA,YAAc0N,4BAA0B,cACxC1N,IAAA,OAAS2N,uBAAqB,SAC9B3N,IAAA,OAAS4N,uBAAqB,SAC9B5N,IAAA,MAAQ6N,sBAAoB,QAC5B7N,IAAA,MAAQ8N,sBAAoB,QAC5B9N,IAAA,MAAQ+N,sBAAoB,QAC5B/N,IAAA,MAAQgO,sBAAoB,QAC5BhO,IAAA,MAAQiO,sBAAoB,QAC5BjO,IAAA,MAAQkO,sBAAoB,QAC5BlO,IAAA,OAASmO,uBAAqB,SAC9BnO,IAAA,OAASoO,uBAAqB,SAC9BpO,IAAA,OAASqO,uBAAqB,SAC9BrO,IAAA,OAASsO,uBAAqB,SAC9BtO,IAAA,YAAcuO,4BAA0B,cACxCvO,IAAA,OAASwO,uBAAqB,SAC9BxO,IAAA,OAASyO,uBAAqB,SAC9BzO,IAAA,MAAQ0O,sBAAoB,QAC5B1O,IAAA,MAAQ2O,sBAAoB,QAC5B3O,IAAA,MAAQ4O,sBAAoB,QAC5B5O,IAAA,MAAQ6O,sBAAoB,QAC5B7O,IAAA,MAAQ8O,sBAAoB,QAC5B9O,IAAA,MAAQ+O,sBAAoB,QA5E9B,CAAYrkC,EAAAs1B,WAAAt1B,EAAAs1B,cA+EZ,SAAYgP,GACVA,IAAA,SAAWC,qBAAmB,WAC9BD,IAAA,cAAgBE,0BAAwB,gBACxCF,IAAA,WAAaG,uBAAqB,aAClCH,IAAA,WAAaI,uBAAqB,aAJpC,CAAY1kC,EAAAskC,SAAAtkC,EAAAskC,YAWZ,SAAYK,GACVA,IAAA,IAAMC,yBAAuB,MAC7BD,IAAA,IAAME,yBAAuB,MAC7BF,IAAA,IAAMG,yBAAuB,MAC7BH,IAAA,GAAKI,wBAAsB,KAC3BJ,IAAA,IAAMK,yBAAuB,MAC7BL,IAAA,KAAOM,0BAAwB,OANjC,CAAYjlC,EAAA2kC,cAAA3kC,EAAA2kC,iBASZ,IAAAO,EAAA,oBAAAA,KAWA,OANSA,EAAAjjC,OAAP,SAAckjC,EAAoBC,GAChC,IAAIC,EAAU,IAAIH,EAGlB,OAFAG,EAAQF,OAASA,EACjBE,EAAQD,OAASA,EACVC,GAEXH,EAXA,GAAallC,EAAAklC,gBAab,IAAAI,EAAA,WA+BE,SAAAA,IAsZQhlC,KAAAilC,oBAA6B,EAC7BjlC,KAAAklC,sBAA6B,EAqQ7BllC,KAAAmlC,qBAA8B,EAC9BnlC,KAAAolC,sBAA+B,EAgMzC,OAh3BSJ,EAAArjC,OAAP,WACE,IAAIhC,EAAS,IAAIqlC,EAGjB,OAFArlC,EAAO2tB,IAAM+X,wBACb1lC,EAAO2lC,cAAgBC,OAAOC,SAAS,IAChC7lC,GAGFqlC,EAAAS,WAAP,SAAkBZ,GAChB,IAAIa,EAAOC,EAAad,GACxB,IACE,IAAIllC,EAAS,IAAIqlC,EAGjB,OAFArlC,EAAO2tB,IAAMsY,oBAAoBF,EAAMb,EAAOv/B,QAC9C3F,EAAO2lC,cAAgBC,OAAOC,SAAS,IAChC7lC,UAEP4lC,OAAO/S,KAAKqT,WAAkBH,MAQlCV,EAAA/iC,UAAA6jC,gBAAA,SACEllC,EACAmlC,EACAC,GAEA,IAAIC,EAAOC,EAAYtlC,GACnB8kC,EAAOS,EAAcH,GACzB,IACE,OAAOI,yBAAyBpmC,KAAKstB,IAAK2Y,EAAMF,EAAQL,EAAMM,EAAaA,EAAW1gC,OAAS,WAE/FigC,OAAO/S,KAAKkT,GACZH,OAAO/S,KAAKyT,KAIhBjB,EAAA/iC,UAAAokC,2BAAA,SACEN,EACAC,GAEA,IAAIN,EAAOS,EAAcH,GACzB,IACE,OAAOM,oCAAoCtmC,KAAKstB,IAAKyY,EAAQL,EAAMM,EAAaA,EAAW1gC,OAAS,WAEpGigC,OAAO/S,KAAKkT,KAIhBV,EAAA/iC,UAAAskC,mBAAA,SAAmB3lC,GACjB,IAAIqlC,EAAOC,EAAYtlC,GACvB,IACE4lC,4BAA4BxmC,KAAKstB,IAAK2Y,WAEtCV,OAAO/S,KAAKyT,KAMhBjB,EAAA/iC,UAAAwkC,UAAA,SAAUnlC,GACR,IAAIolC,EAAM1mC,KAAKslC,cAEf,OADAqB,sBAAsBD,EAAKplC,GACpBslC,eAAe5mC,KAAKstB,IAAKoZ,IAGlC1B,EAAA/iC,UAAA4kC,UAAA,SAAUC,EAAeC,QAAA,IAAAA,MAAA,GACvB,IAAIL,EAAM1mC,KAAKslC,cAEf,OADA0B,sBAAsBN,EAAKI,EAAUC,GAC9BH,eAAe5mC,KAAKstB,IAAKoZ,IAGlC1B,EAAA/iC,UAAAglC,UAAA,SAAU3lC,GACR,IAAIolC,EAAM1mC,KAAKslC,cAEf,OADA4B,wBAAwBR,EAAKplC,GACtBslC,eAAe5mC,KAAKstB,IAAKoZ,IAGlC1B,EAAA/iC,UAAAklC,UAAA,SAAU7lC,GACR,IAAIolC,EAAM1mC,KAAKslC,cAEf,OADA8B,wBAAwBV,EAAKplC,GACtBslC,eAAe5mC,KAAKstB,IAAKoZ,IAKlC1B,EAAA/iC,UAAAolC,YAAA,SACEC,EACAn9B,GAEA,OAAOo9B,eAAevnC,KAAKstB,IAAKga,EAAIn9B,IAGtC66B,EAAA/iC,UAAAulC,aAAA,SACEF,EACAl8B,EACAC,GAEA,OAAOo8B,gBAAgBznC,KAAKstB,IAAKga,EAAIl8B,EAAMC,IAG7C25B,EAAA/iC,UAAAylC,WAAA,SACEJ,EACA1mC,EACA+mC,QADA,IAAA/mC,MAAA,WACA,IAAA+mC,MAAA,MAEA,IAAI1B,EAAOC,EAAYtlC,GACnB8kC,EAAOkC,EAAcD,GACzB,IACE,OAAOE,cAAc7nC,KAAKstB,IAAKga,EAAIrB,EAAMP,EAAMiC,EAA6BA,EAAUriC,OAAS,WAE/FigC,OAAO/S,KAAKkT,GACZH,OAAO/S,KAAKyT,KAIhBjB,EAAA/iC,UAAA6lC,eAAA,SACEpb,EACArkB,GAEA,OAAO0/B,kBAAkB/nC,KAAKstB,IAAKZ,EAAOrkB,IAG5C28B,EAAA/iC,UAAA+lC,eAAA,SACEtb,EACAprB,GAEA,OAAO2mC,kBAAkBjoC,KAAKstB,IAAKZ,EAAOprB,IAG5C0jC,EAAA/iC,UAAAimC,gBAAA,SACEtnC,EACAyH,GAEA,IAAI49B,EAAOC,EAAYtlC,GACvB,IACE,OAAOunC,mBAAmBnoC,KAAKstB,IAAK2Y,EAAM59B,WAE1Ck9B,OAAO/S,KAAKyT,KAIhBjB,EAAA/iC,UAAAmmC,WAAA,SACEC,EACAC,EACAC,EACAlgC,EACAy8B,GAEA,YAFA,IAAAA,MAAA,GAEO0D,cAAcxoC,KAAKstB,IAAK+a,EAAOC,EAAS,EAAI,EAAGxD,EAA6BuD,EAAOhgC,EAAMkgC,IAGlGvD,EAAA/iC,UAAAwmC,YAAA,SACEJ,EACAE,EACAjnC,EACA+G,EACAy8B,GAEA,YAFA,IAAAA,MAAA,GAEO4D,eAAe1oC,KAAKstB,IAAK+a,EAAOvD,EAA6BuD,EAAOE,EAAKjnC,EAAO+G,IAGzF28B,EAAA/iC,UAAA0mC,iBAAA,SACEN,EACAE,EACAlgC,EACAy8B,GAEA,YAFA,IAAAA,MAAA,GAEO8D,oBAAoB5oC,KAAKstB,IAAK+a,EAAOvD,EAAQz8B,EAAMkgC,IAG5DvD,EAAA/iC,UAAA4mC,kBAAA,SACER,EACAE,EACAjnC,EACA+G,EACAy8B,GAEA,YAFA,IAAAA,MAAA,GAEOgE,qBAAqB9oC,KAAKstB,IAAK+a,EAAOvD,EAAQyD,EAAKjnC,EAAO+G,IAGnE28B,EAAA/iC,UAAA8mC,gBAAA,SACEzB,EACAe,EACAvD,EACAyD,EACAjnC,EACA+G,GAEA,OAAO2gC,mBAAmBhpC,KAAKstB,IAAKga,EAAIe,EAAOvD,EAAQyD,EAAKjnC,EAAO+G,IAGrE28B,EAAA/iC,UAAAgnC,oBAAA,SACEZ,EACAvD,EACAyD,EACAW,EACAC,EACA9gC,GAEA,OAAO+gC,uBAAuBppC,KAAKstB,IAAK+a,EAAOvD,EAAQyD,EAAKW,EAAUC,EAAa9gC,IAGrF28B,EAAA/iC,UAAAonC,iBAAA,SACEd,EACAW,EACAI,EACAC,GAEA,OAAOC,oBAAoBxpC,KAAKstB,IAAKib,EAAKW,EAAUI,EAASC,IAG/DvE,EAAA/iC,UAAAwnC,iBAAA,SACElB,EACAmB,GAEA,OAAOC,oBAAoB3pC,KAAKstB,IAAKib,EAAKmB,IAK5C1E,EAAA/iC,UAAA2nC,eAAA,SACEld,EACAprB,GAEA,OAAOuoC,kBAAkB7pC,KAAKstB,IAAKZ,EAAOprB,IAG5C0jC,EAAA/iC,UAAA6nC,gBAAA,SACElpC,EACAU,GAEA,IAAI2kC,EAAOC,EAAYtlC,GACvB,IACE,OAAOmpC,mBAAmB/pC,KAAKstB,IAAK2Y,EAAM3kC,WAE1CikC,OAAO/S,KAAKyT,KAIhBjB,EAAA/iC,UAAA+nC,YAAA,SACEx6B,EACAy6B,EACA5hC,QAAA,IAAAA,MAAA,GAEA,IAAI49B,EAAOC,EAAY12B,GACnBk2B,EAAOkC,EAAcqC,GACzB,IACE,OAAOC,eAAelqC,KAAKstB,IAAK2Y,EAAMP,EAAMuE,EAAS3kC,OAAQ+C,WAE7Dk9B,OAAO/S,KAAKkT,GACZH,OAAO/S,KAAKyT,KAIhBjB,EAAA/iC,UAAAkoC,YAAA,SACE36B,EACArB,EACA7M,QADA,IAAA6M,MAAA,QACA,IAAA7M,MAAA,GAEA,IAAI2kC,EAAOC,EAAY12B,GACvB,IACE,OAAO46B,eAAepqC,KAAKstB,IAAK2Y,EAAM93B,EAAW7M,WAEjDikC,OAAO/S,KAAKyT,KAIhBjB,EAAA/iC,UAAAooC,WAAA,SACEt/B,GAEA,OAAOu/B,cAActqC,KAAKstB,IAAKviB,IAGjCi6B,EAAA/iC,UAAAsoC,WAAA,SACE/6B,EACAwD,GAEA,IAAIizB,EAAOC,EAAY12B,GACvB,IACE,OAAOg7B,cAAcxqC,KAAKstB,IAAK2Y,EAAMjzB,WAErCuyB,OAAO/S,KAAKyT,KAIhBjB,EAAA/iC,UAAAwoC,SAAA,SACEt8B,EACAyD,EACAC,GAEA,YAFA,IAAAA,MAAA,GAEO64B,YAAY1qC,KAAKstB,IAAKnf,EAAWyD,EAAQC,IAGlDmzB,EAAA/iC,UAAA0oC,UAAA,WACE,OAAOC,aAAa5qC,KAAKstB,MAG3B0X,EAAA/iC,UAAA4oC,aAAA,SACE9/B,GAEA,YAFA,IAAAA,MAAA,GAEO+/B,gBAAgB9qC,KAAKstB,IAAKviB,IAGnCi6B,EAAA/iC,UAAA8oC,aAAA,SACEn5B,EACAC,EACA1D,GAEA,OAAO68B,gBAAgBhrC,KAAKstB,IAAKnf,EAAWyD,EAAQC,IAGtDmzB,EAAA/iC,UAAAgpC,aAAA,SACE19B,EACA29B,EACA/8B,EACA7M,QAAA,IAAAA,MAAA,GAIA,IAFA,IAAI6pC,EAAW59B,EAAMjI,OACjB8lC,EAAO,IAAIjlC,MAAaglC,GACnB9qC,EAAI,EAAGA,EAAI8qC,IAAY9qC,EAC9B+qC,EAAK/qC,GAAK6lC,EAAY34B,EAAMlN,IAE9B,IAAIqlC,EAAOS,EAAciF,GACrBnF,EAAOC,EAAYgF,GACvB,IACE,OAAOG,gBAAgBrrC,KAAKstB,IAAKoY,EAAMyF,EAAUlF,EAAM93B,EAAW7M,WAElEikC,OAAO/S,KAAKyT,GACZV,OAAO/S,KAAKkT,GACZ,IAASrlC,EAAI8qC,EAAW,EAAG9qC,GAAK,IAAKA,EAAGklC,OAAO/S,KAAK4Y,EAAK/qC,MAI7D2kC,EAAA/iC,UAAAqpC,WAAA,SACEna,EACAwW,EACAv+B,GAEA,IAAI68B,EAAOC,EAAY/U,GACnBuU,EAAOkC,EAAcD,GACzB,IACE,OAAO4D,cAAcvrC,KAAKstB,IAAK2Y,EAAMP,EAAMiC,GAAYA,EAASriC,QAAU,EAAG8D,WAE7Em8B,OAAO/S,KAAKkT,GACZH,OAAO/S,KAAKyT,KAIhBjB,EAAA/iC,UAAAupC,iBAAA,SACEra,EACAwW,EACAv+B,GAEA,IAAI68B,EAAOC,EAAY/U,GACnBuU,EAAOkC,EAAcD,GACzB,IACE,OAAO8D,oBAAoBzrC,KAAKstB,IAAK2Y,EAAMP,EAAMiC,GAAYA,EAASriC,QAAU,EAAG8D,WAEnFm8B,OAAO/S,KAAKkT,GACZH,OAAO/S,KAAKyT,KAIhBjB,EAAA/iC,UAAAypC,mBAAA,SACEhf,EACAib,EACAgE,GAEA,IAAIjG,EAAOkC,EAAcD,GACrB1B,EAAOC,EAAYyF,GACvB,IACE,OAAOC,sBAAsB5rC,KAAKstB,IAAKZ,EAAOgZ,EAAMiC,GAAYA,EAASriC,QAAU,EAAG2gC,WAEtFV,OAAO/S,KAAKyT,GACZV,OAAO/S,KAAKkT,KAIhBV,EAAA/iC,UAAA4pC,kBAAA,WACE,OAAOC,qBAAqB9rC,KAAKstB,MAKnC0X,EAAA/iC,UAAA8pC,UAAA,SACEnrC,EACAyH,EACA2jC,EACAjjC,GAEA,IAAIk9B,EAAOC,EAAYtlC,GACvB,IACE,OAAOqrC,mBAAmBjsC,KAAKstB,IAAK2Y,EAAM59B,EAAM2jC,EAAU,EAAI,EAAGjjC,WAEjEw8B,OAAO/S,KAAKyT,KAIhBjB,EAAA/iC,UAAAiqC,YAAA,SACEtrC,EACAyH,EACA8jC,EACAn5B,GAEA,IAAIizB,EAAOC,EAAYtlC,GACnB8kC,EAAOS,EAAcgG,GACzB,IACE,OAAOC,qBAAqBpsC,KAAKstB,IAAK2Y,EAAM59B,EAAMq9B,EAAMyG,EAAWA,EAAS7mC,OAAS,EAAG0N,WAExFuyB,OAAO/S,KAAKkT,GACZH,OAAO/S,KAAKyT,KAIhBjB,EAAA/iC,UAAAoqC,eAAA,SAAezrC,GACb,IAAIqlC,EAAOC,EAAYtlC,GACvB,IACE0rC,wBAAwBtsC,KAAKstB,IAAK2Y,WAElCV,OAAO/S,KAAKyT,KAOhBjB,EAAA/iC,UAAAsqC,qBAAA,SAAqBxG,EAAoBC,EAAiChzB,GACxEhT,KAAKklC,qBAAuBzhC,QAAQzD,KAAKklC,sBACzC,IAAIsH,EAAWxsC,KAAKilC,oBACfuH,IAAUxsC,KAAKilC,oBAAsBuH,EAAWtG,EAAY,KACjE,IAAIR,EAAOS,EAAcH,GACzB,IACE,IAAIyG,EAAUrG,yBAAyBpmC,KAAKstB,IAAKkf,EAAUzG,EAAQL,EAAMM,EAAaA,EAAW1gC,OAAS,GAC1G,OAAO8mC,qBAAqBpsC,KAAKstB,IAAKkf,EAAUC,EAAS,EAAG,EAAGz5B,WAE/DuyB,OAAO/S,KAAKkT,KAIhBV,EAAA/iC,UAAAyqC,wBAAA,WACE1sC,KAAKklC,sBAAwBzhC,OAAOzD,KAAKklC,sBACzC,IAAIsH,EAAW/oC,OAAOzD,KAAKilC,qBAC3BqH,wBAAwBtsC,KAAKstB,IAAKkf,GAClChG,4BAA4BxmC,KAAKstB,IAAKkf,IAGxCxH,EAAA/iC,UAAA0qC,kBAAA,SACEpqB,EACAlR,GAEA,IAAIu7B,EAAQ1G,EAAY3jB,GACpBsqB,EAAQ3G,EAAY70B,GACxB,IACE,OAAOy7B,2BAA2B9sC,KAAKstB,IAAKsf,EAAOC,WAEnDtH,OAAO/S,KAAKqa,GACZtH,OAAO/S,KAAKoa,KAIhB5H,EAAA/iC,UAAA8qC,eAAA,SACExqB,EACAlR,GAEA,IAAIu7B,EAAQ1G,EAAY3jB,GACpBsqB,EAAQ3G,EAAY70B,GACxB,IACE,OAAO27B,wBAAwBhtC,KAAKstB,IAAKsf,EAAOC,WAEhDtH,OAAO/S,KAAKqa,GACZtH,OAAO/S,KAAKoa,KAIhB5H,EAAA/iC,UAAAgrC,gBAAA,SACE1qB,EACAlR,GAEA,IAAIu7B,EAAQ1G,EAAY3jB,GACpBsqB,EAAQ3G,EAAY70B,GACxB,IACE,OAAO67B,yBAAyBltC,KAAKstB,IAAKsf,EAAOC,WAEjDtH,OAAO/S,KAAKqa,GACZtH,OAAO/S,KAAKoa,KAIhB5H,EAAA/iC,UAAAkrC,gBAAA,SACE5qB,EACAlR,GAEA,IAAIu7B,EAAQ1G,EAAY3jB,GACpBsqB,EAAQ3G,EAAY70B,GACxB,IACE,OAAO+7B,yBAAyBptC,KAAKstB,IAAKsf,EAAOC,WAEjDtH,OAAO/S,KAAKqa,GACZtH,OAAO/S,KAAKoa,KAIhB5H,EAAA/iC,UAAAorC,aAAA,SAAah8B,GACX,IAAI40B,EAAOC,EAAY70B,GACvB,IACEi8B,sBAAsBttC,KAAKstB,IAAK2Y,WAEhCV,OAAO/S,KAAKyT,KAIhBjB,EAAA/iC,UAAAsrC,kBAAA,SACEhrB,EACAirB,EACAC,EACAC,GAEA,IAAId,EAAQ1G,EAAY3jB,GACpBsqB,EAAQ3G,EAAYsH,GACpBG,EAAQzH,EAAYuH,GACxB,IACE,OAAOG,2BAA2B5tC,KAAKstB,IAAKsf,EAAOC,EAAOc,EAAOD,WAEjEnI,OAAO/S,KAAKmb,GACZpI,OAAO/S,KAAKqa,GACZtH,OAAO/S,KAAKoa,KAIhB5H,EAAA/iC,UAAA4rC,eAAA,SACEtrB,EACAirB,EACAC,GAEA,IAAIb,EAAQ1G,EAAY3jB,GACpBsqB,EAAQ3G,EAAYsH,GACpBG,EAAQzH,EAAYuH,GACxB,IACE,OAAOK,wBAAwB9tC,KAAKstB,IAAKsf,EAAOC,EAAOc,WAEvDpI,OAAO/S,KAAKmb,GACZpI,OAAO/S,KAAKqa,GACZtH,OAAO/S,KAAKoa,KAIhB5H,EAAA/iC,UAAA8rC,gBAAA,SACExrB,EACAirB,EACAC,GAEA,IAAIb,EAAQ1G,EAAY3jB,GACpBsqB,EAAQ3G,EAAYsH,GACpBG,EAAQzH,EAAYuH,GACxB,IACE,OAAOO,yBAAyBhuC,KAAKstB,IAAKsf,EAAOC,EAAOc,WAExDpI,OAAO/S,KAAKmb,GACZpI,OAAO/S,KAAKqa,GACZtH,OAAO/S,KAAKoa,KAIhB5H,EAAA/iC,UAAAgsC,gBAAA,SACE1rB,EACAirB,EACAC,EACAS,GAEA,IAAItB,EAAQ1G,EAAY3jB,GACpBsqB,EAAQ3G,EAAYsH,GACpBG,EAAQzH,EAAYuH,GACxB,IACE,OAAOU,yBAAyBnuC,KAAKstB,IAAKsf,EAAOC,EAAOc,EAAOO,WAE/D3I,OAAO/S,KAAKmb,GACZpI,OAAO/S,KAAKqa,GACZtH,OAAO/S,KAAKoa,KAIhB5H,EAAA/iC,UAAAmsC,aAAA,SAAa7rB,GACX,IAAI0jB,EAAOC,EAAY3jB,GACvB,IACE8rB,sBAAsBruC,KAAKstB,IAAK2Y,WAEhCV,OAAO/S,KAAKyT,KAIhBjB,EAAA/iC,UAAAqsC,UAAA,SACEC,EACAC,EACAC,EACAtd,EACAnN,QAAA,IAAAA,MAAA,MAOA,IALA,IAAIiiB,EAAOC,EAAYliB,GACnBrZ,EAAI8jC,EAASnpC,OACbopC,EAAO,IAAIvoC,MAAawE,GACxBgkC,EAAO,IAAIxoC,MAAqBwE,GAChCikC,EAAO,IAAIzoC,MAAawE,GACnBtK,EAAI,EAAGA,EAAIsK,IAAKtK,EAAG,CAC1B,IAAIwkC,EAAS4J,EAASpuC,GAAGwkC,OACrBC,EAAS2J,EAASpuC,GAAGykC,OACzB4J,EAAKruC,GAAKslC,EAAad,GACvB8J,EAAKtuC,GAAK8wB,GAAU+I,EAAA2U,OAAOC,OACvB9uC,KAAK6mC,UAAUkI,QAAQjK,GAASkK,SAASlK,IACzC9kC,KAAKymC,UAAUsI,QAAQjK,IAC3B8J,EAAKvuC,GAAKwkC,EAAOv/B,OAEnB,IAAI2pC,EAAQ9I,EAAcuI,GACtBQ,EAAQ/I,EAAcwI,GACtBQ,EAAQhJ,EAAcyI,GAC1B,IACEQ,mBAAmBpvC,KAAKstB,IAAKihB,EAASC,EAASvI,EAAMgJ,EAAOC,EAAOC,EAAOxkC,WAE1E46B,OAAO/S,KAAK2c,GACZ5J,OAAO/S,KAAK0c,GACZ3J,OAAO/S,KAAKyc,GACZ,IAAS5uC,EAAIsK,EAAI,EAAGtK,GAAK,IAAKA,EAAGklC,OAAO/S,KAAKkc,EAAKruC,IAClDklC,OAAO/S,KAAKyT,KAIhBjB,EAAA/iC,UAAAotC,iBAAA,SAAiBC,GACf,IAAI5J,EAAOkC,EAAc0H,GACzB,IACEC,0BAA0BvvC,KAAKstB,IAAKoY,EAAM4J,EAAMhqC,gBAEhDigC,OAAO/S,KAAKkT,KAIhBV,EAAA/iC,UAAAutC,SAAA,SAASC,GACPC,kBAAkB1vC,KAAKstB,IAAKmiB,IAG9BzK,EAAA/iC,UAAA0tC,iBAAA,WACE,OAAOC,6BAGT5K,EAAA/iC,UAAA4tC,iBAAA,SAAiBC,QAAA,IAAAA,MAAA,GACfC,0BAA0BD,IAG5B9K,EAAA/iC,UAAA+tC,eAAA,WACE,OAAOC,2BAGTjL,EAAA/iC,UAAAiuC,eAAA,SAAeJ,QAAA,IAAAA,MAAA,GACbK,wBAAwBL,IAG1B9K,EAAA/iC,UAAAmuC,aAAA,SAAaC,QAAA,IAAAA,OAAA,GACXC,sBAAsBD,IAGxBrL,EAAA/iC,UAAAsuC,SAAA,SAASd,QAAA,IAAAA,MAAA,GACHA,EACFe,0BAA0Bf,EAAMzvC,KAAKstB,KAErCmjB,wBAAwBzwC,KAAKstB,MAIjC0X,EAAA/iC,UAAAyuC,UAAA,SAAUC,EAAkBlB,QAAA,IAAAA,MAAA,GAG1B,IAFA,IAAItE,EAAWwF,EAAOrrC,OAClBiI,EAAQ,IAAIpH,MAAaglC,GACpB9qC,EAAI,EAAGA,EAAI8qC,IAAY9qC,EAC9BkN,EAAMlN,GAAK6lC,EAAYyK,EAAOtwC,IAEhC,IAAIqlC,EAAOS,EAAc54B,GACzB,IACMkiC,EACFmB,2BAA2BnB,EAAMzvC,KAAKstB,IAAKoY,EAAMyF,GAEjD0F,yBAAyB7wC,KAAKstB,IAAKoY,EAAMyF,WAG3C5F,OAAO/S,KAAKkT,GACZ,IAASrlC,EAAI8qC,EAAU9qC,GAAK,IAAKA,EAAGklC,OAAO/S,KAAKjlB,EAAMlN,MAO1D2kC,EAAA/iC,UAAA6uC,qBAAA,SAAqB3mC,GAEnB,IAAI4mC,EAAwBnB,4BACxBoB,EAAsBf,0BACtBgB,EAAoBC,wBACxBnB,0BAA0B,GAC1BI,wBAAwB,GACxBG,uBAAsB,GAGtB,IAAIjoC,EAAO8oC,2BAA2BhnC,GAClCslC,EAAOzvC,KAAKusC,qBAAqBlkC,EAAM,KAAM8B,GAC7CoD,EAAQvN,KAAKolC,sBACjB,IAAK73B,EAAO,CACV,IAAI3M,EAAOslC,EAAY,cACvBlmC,KAAKmlC,qBAAuBvkC,EAC5BZ,KAAKolC,sBAAwB73B,EAAQ44B,GAAgBvlC,IAUvD,OARAgwC,2BAA2BnB,EAAMzvC,KAAKstB,IAAK/f,EAAO,GAClDpD,EAAOinC,yBAAyB3B,GAChCzvC,KAAK0sC,0BAGLqD,0BAA0BgB,GAC1BZ,wBAAwBa,GACxBV,sBAAsBW,GACf9mC,GAGT66B,EAAA/iC,UAAAovC,SAAA,WACE,OAA4C,GAArCC,wBAAwBtxC,KAAKstB,MAGtC0X,EAAA/iC,UAAAsvC,UAAA,WACEC,yBAAyBxxC,KAAKstB,MAGhC0X,EAAA/iC,UAAAwvC,SAAA,SAASC,GACP,IAAIhL,EAAM1mC,KAAKslC,cACXW,EAAOC,EAAYwL,GACnBC,EAAmB,EACnBC,EAAsB,EAC1B,IACEC,gCAAgCnL,EAAK1mC,KAAKstB,IAAK2Y,GAC/C0L,EAAYG,EAAQpL,GACpB,IAAIqL,EAAcD,EAAQpL,EAAM,GAChCkL,EAAeE,EAAQpL,EAAM,GAC7B,IAAIsL,EAAM,IAAIC,EAGd,OAFAD,EAAIE,OAqhBV,SAAoB3J,EAAYjjC,GAE9B,IADA,IAAI0sC,EAAM,IAAIG,WAAW7sC,GAChBjF,EAAW,EAAGA,EAAIiF,IAAUjF,EACnC2xC,EAAI3xC,GAAK+xC,KAAS7J,EAAMloC,GAE1B,OAAO2xC,EA1hBUK,CAAWV,EAAWI,GACnCC,EAAIniB,UAAYyiB,EAAWV,GACpBI,UAEH/L,GAAMV,OAAO/S,KAAKyT,GAClB0L,GAAWpM,OAAO/S,KAAKmf,GACvBC,GAAcrM,OAAO/S,KAAKof,KAIlC5M,EAAA/iC,UAAAswC,OAAA,WACE,MAAM,IAAIrtB,MAAM,oBAGlB8f,EAAA/iC,UAAAuwC,QAAA,WACE,MAAM,IAAIttB,MAAM,oBAGlB8f,EAAA/iC,UAAAwwC,QAAA,WACEhvC,OAAOzD,KAAKstB,KACZiY,OAAO/S,KAAKxyB,KAAKslC,eACjBC,OAAO/S,KAAKxyB,KAAKilC,qBACjBM,OAAO/S,KAAKxyB,KAAKmlC,sBACjBI,OAAO/S,KAAKxyB,KAAKolC,uBACjBsN,uBAAuB1yC,KAAKstB,KAC5BttB,KAAKstB,IAAM,GAGb0X,EAAA/iC,UAAA0wC,eAAA,WACE,OAAOC,EAASjxC,OAAO3B,OAGzBglC,EAAA/iC,UAAA4wC,gBAAA,SACE1oC,EACA2oC,EACAC,GAEA,QAHA,IAAAD,OAAA,QACA,IAAAC,MAAgBnyB,IAAIiY,WAEhBka,EAAW,EAAG,OAAO,EAGzB,IAAIC,EACAC,EAEA,OALJF,GAAY,EAKAG,yBAAyB/oC,IACnC,KAAKmqB,EAAa6C,MAChB,OAAQga,2BAA2BhnC,IACjC,OACE,OAAOnK,KAAKymC,UAAU0M,0BAA0BhpC,IAElD,OACE,OAAOnK,KAAK6mC,UACVuM,6BAA6BjpC,GAC7BkpC,8BAA8BlpC,IAGlC,OACE,OAAOnK,KAAKinC,UAAUqM,0BAA0BnpC,IAElD,OACE,OAAOnK,KAAKmnC,UAAUoM,0BAA0BppC,IAElD,QACE,MAAM,IAAI+a,MAAM,0BAItB,KAAKoP,EAAaC,SAChB,OAAOwT,kBAAkB/nC,KAAKstB,IAC5BkmB,0BAA0BrpC,GAC1BgnC,2BAA2BhnC,IAG/B,KAAKmqB,EAAaO,UAChB,IAAI5O,EAAawtB,0BAA0BtpC,GAC3C,IAAK8b,EAAY,MACjB,OAAOkiB,mBAAmBnoC,KAAKstB,IAAKrH,EAAYkrB,2BAA2BhnC,IAE7E,KAAKmqB,EAAawE,KAChB,KAAMka,EAAUhzC,KAAK6yC,gBAAgBa,oBAAoBvpC,GAAO2oC,EAAeC,IAC7E,MAEF,OACEY,sBAAsBxpC,GAClBy+B,oBAAoB5oC,KAAKstB,IACvBsmB,sBAAsBzpC,GACtB0pC,uBAAuB1pC,GACvBgnC,2BAA2BhnC,GAC3B6oC,GAEFxK,cAAcxoC,KAAKstB,IACjBsmB,sBAAsBzpC,GACtB2pC,sBAAsB3pC,GAAQ,EAAI,EAClC0pC,uBAAuB1pC,GACvB4pC,sBAAsB5pC,GACtBgnC,2BAA2BhnC,GAC3B6oC,GAIV,KAAK1e,EAAa0D,MAChB,KAAMgb,EAAUhzC,KAAK6yC,gBAAgBmB,uBAAuB7pC,GAAO2oC,EAAeC,IAChF,MAEF,OAAOxL,eAAevnC,KAAKstB,IAAK2mB,oBAAoB9pC,GAAO6oC,GAE7D,KAAK1e,EAAaQ,OAChB,KAAMke,EAAUhzC,KAAK6yC,gBAAgBqB,uBAAuB/pC,GAAO2oC,EAAeC,IAChF,MAEF,KAAME,EAAUjzC,KAAK6yC,gBAAgBsB,wBAAwBhqC,GAAO2oC,EAAeC,IACjF,MAEF,OAAOtL,gBAAgBznC,KAAKstB,IAAK8mB,qBAAqBjqC,GAAO6oC,EAASC,GAG1E,OAAO,GAKTjO,EAAA/iC,UAAAoyC,iBAAA,SAAiBzzC,GACf,IAAIqlC,EAAOC,EAAYtlC,GACvB,IACE,OAAO0zC,oCAAoCt0C,KAAKstB,IAAK2Y,WAErDV,OAAO/S,KAAKyT,KAIhBjB,EAAA/iC,UAAAsyC,iBAAA,SAAiB7nB,GACf,OAAO4lB,EAAWkC,oCAAoCx0C,KAAKstB,IAAKZ,KAGlEsY,EAAA/iC,UAAA8tB,iBAAA,SACE0f,EACAtlC,EACAsqC,EACAC,EACAC,GAEAC,kCAAkCnF,EAAMtlC,EAAMsqC,EAAWC,EAAYC,IAn3BvD3P,EAAA6P,kBAA2B,MAG3B7P,EAAA8P,kBAA2B,MAk3B7C9P,EA53BA,GAAatlC,EAAAslC,SAg4BbtlC,EAAA20B,gBAAA,SAAgClqB,GAC9B,OAAO+oC,yBAAyB/oC,IAGlCzK,EAAA84B,kBAAA,SAAkCruB,GAChC,OAAOgnC,2BAA2BhnC,IAGpCzK,EAAA03B,iBAAA,SAAiCjtB,GAC/B,OAAOgpC,0BAA0BhpC,IAGnCzK,EAAA+4B,oBAAA,SAAoCtuB,GAClC,OAAOipC,6BAA6BjpC,IAGtCzK,EAAAq1C,qBAAA,SAAqC5qC,GACnC,OAAOkpC,8BAA8BlpC,IAGvCzK,EAAAg5B,iBAAA,SAAiCvuB,GAC/B,OAAOmpC,0BAA0BnpC,IAGnCzK,EAAAi5B,iBAAA,SAAiCxuB,GAC/B,OAAOopC,0BAA0BppC,IAGnCzK,EAAA80B,iBAAA,SAAiCrqB,GAC/B,OAAOqpC,0BAA0BrpC,IAGnCzK,EAAAs1C,iBAAA,SAAiC7qC,GAC/B,OAAO8qC,0BAA0B9qC,IAGnCzK,EAAAk1B,iBAAA,SAAiCzqB,GAC/B,OAAO+qC,0BAA0B/qC,IAGnCzK,EAAAi1B,WAAA,SAA2BxqB,GACzB,OAAOgrC,uBAAuBhrC,IAGhCzK,EAAAq1B,YAAA,SAA4B5qB,GAC1B,OAAOiqC,qBAAqBjqC,IAG9BzK,EAAAw3B,cAAA,SAA8B/sB,GAC5B,OAAO+pC,uBAAuB/pC,IAGhCzK,EAAA23B,eAAA,SAA+BltB,GAC7B,OAAOgqC,wBAAwBhqC,IAGjCzK,EAAAu4B,WAAA,SAA2B9tB,GACzB,OAAO8pC,oBAAoB9pC,IAG7BzK,EAAA01C,cAAA,SAA8BjrC,GAC5B,OAAO6pC,uBAAuB7pC,IAGhCzK,EAAAs5B,aAAA,SAA6B7uB,GAC3B,OAAOypC,sBAAsBzpC,IAG/BzK,EAAA21C,cAAA,SAA8BlrC,GAC5B,OAAO0pC,uBAAuB1pC,IAGhCzK,EAAA41C,WAAA,SAA2BnrC,GACzB,OAAOupC,oBAAoBvpC,IAG7BzK,EAAAu5B,aAAA,SAA6B9uB,GAC3B,OAAO2pC,sBAAsB3pC,IAG/BzK,EAAA61C,cAAA,SAA8BprC,GAC5B,OAAOqrC,uBAAuBrrC,IAGhCzK,EAAA+1C,eAAA,SAA+BtrC,GAC7B,OAAOurC,wBAAwBvrC,IAGjCzK,EAAAi2C,YAAA,SAA4BxrC,GAC1B,OAAOyrC,qBAAqBzrC,IAG9BzK,EAAAm2C,cAAA,SAA8B1rC,GAC5B,OAAO2rC,uBAAuB3rC,IAGhCzK,EAAAy5B,aAAA,SAA6BhvB,GAC3B,OAAOmoC,EAAWyD,sBAAsB5rC,KAG1CzK,EAAA05B,mBAAA,SAAmCjvB,GACjC,OAAO6rC,6BAA6B7rC,IAGtCzK,EAAA45B,cAAA,SAA8BnvB,EAAqBuiB,GACjD,OAAOupB,uBAAuB9rC,EAAMuiB,IAGtChtB,EAAAw2C,eAAA,SAA+B/rC,GAC7B,OAAOgsC,wBAAwBhsC,IAGjCzK,EAAA85B,UAAA,SAA0BrvB,GACxB,OAAOisC,qBAAqBjsC,IAG9BzK,EAAA+5B,WAAA,SAA2BtvB,GACzB,OAAOksC,sBAAsBlsC,IAG/BzK,EAAA42C,YAAA,SAA4BnsC,GAC1B,OAAOmoC,EAAWiE,qBAAqBpsC,KAGzCzK,EAAA82C,YAAA,SAA4BrsC,GAC1B,OAAOssC,qBAAqBtsC,IAG9BzK,EAAAg3C,aAAA,SAA6BvsC,GAC3B,OAAOmoC,EAAWqE,sBAAsBxsC,KAG1CzK,EAAAk3C,kBAAA,SAAkCzsC,GAChC,OAAO0sC,2BAA2B1sC,IAGpCzK,EAAAi6B,cAAA,SAA8BxvB,GAC5B,OAAO2sC,yBAAyB3sC,IAGlCzK,EAAAk6B,cAAA,SAA8BzvB,GAC5B,OAAO4sC,0BAA0B5sC,IAGnCzK,EAAAs3C,mBAAA,SAAmC7sC,GACjC,OAAO8sC,4BAA4B9sC,IAGrCzK,EAAAw3C,aAAA,SAA6B/sC,GAC3B,OAAOgtC,sBAAsBhtC,IAG/BzK,EAAA03C,eAAA,SAA+BjtC,GAC7B,OAAOktC,wBAAwBltC,IAGjCzK,EAAAo6B,cAAA,SAA8B3vB,GAC5B,OAAOmoC,EAAWgF,uBAAuBntC,KAG3CzK,EAAA63C,UAAA,SAA0BptC,GACxB,OAAOqtC,mBAAmBrtC,IAG5BzK,EAAA+3C,oBAAA,SAAoCttC,GAClC,OAAOutC,4BAA4BvtC,IAGrCzK,EAAAi4C,eAAA,SAA+BxtC,EAAqBuiB,GAClD,OAAOkrB,wBAAwBztC,EAAMuiB,IAGvChtB,EAAAm4C,YAAA,SAA4B1tC,GAC1B,OAAOmoC,EAAWwF,4BAA4B3tC,KAKhDzK,EAAAq4C,gBAAA,SAAgCtI,GAC9B,OAAO2B,yBAAyB3B,IAGlC/vC,EAAAs4C,gBAAA,SAAgCvI,GAC9B,OAAO6C,EAAW2F,yBAAyBxI,KAG7C/vC,EAAAw4C,sBAAA,SAAsCzI,GACpC,OAAO0I,8BAA8B1I,IAGvC/vC,EAAA04C,qBAAA,SAAqC3I,EAAmB/iB,GACtD,OAAO2rB,0BAA0B5I,EAAM/iB,IAGzChtB,EAAA44C,sBAAA,SAAsC7I,GACpC,OAAO8I,2BAA2B9I,IAGpC,IAAAmD,EAAA,WAYE,SAAAA,KA0BF,OAjCSA,EAAAjxC,OAAP,SAAchC,GACZ,IAAI64C,EAAW,IAAI5F,EAGnB,OAFA4F,EAAS74C,OAASA,EAClB64C,EAASlrB,IAAMmrB,kBACRD,GAKT5F,EAAA3wC,UAAAy2C,SAAA,SAASx0C,GACP,OAAOy0C,kBAAkB34C,KAAKstB,IAAKppB,IAGrC0uC,EAAA3wC,UAAA22C,UAAA,SAAUC,EAAwBC,EAAsB3qC,EAA8BjK,QAA9B,IAAAiK,MAAA,QAA8B,IAAAjK,MAAA,GACpF60C,mBAAmBF,EAAMC,EAAI3qC,EAAWjK,IAG1C0uC,EAAA3wC,UAAA+2C,mBAAA,SAAmB90C,EAAqBiK,GACtC,OAAO8qC,4BAA4Bj5C,KAAKstB,IAAKppB,EAAMiK,IAGrDykC,EAAA3wC,UAAAi3C,mBAAA,SAAmBL,EAAwBC,EAAsBK,EAAgBj1C,QAAA,IAAAA,MAAA,GAC/E,IAAIwhC,EAAOS,EAAcgT,GACzB,IACEC,4BAA4BP,EAAMC,EAAIpT,EAAMyT,EAAQ7zC,OAAQpB,WAE5DqhC,OAAO/S,KAAKkT,KAIhBkN,EAAA3wC,UAAAo3C,iBAAA,SAAiBC,EAAyBC,GACxC,OAAOC,0BAA0Bx5C,KAAKstB,IAAKgsB,EAAOC,EAAav5C,KAAKL,OAAO2tB,MAE/EslB,EAtCA,GAkFA,SAASjN,EAAa8T,GACpB,IAAKA,EAAK,OAAO,EAIjB,IAHA,IAAIC,EAAYD,EAAIn0C,OAChBijC,EAAMhD,OAAOC,SAASkU,GACtBC,EAAMpR,EACDloC,EAAI,EAAGA,EAAIq5C,IAAar5C,EAC/Bu5C,MAAUD,IAAOF,EAAIp5C,IAEvB,OAAOkoC,EAGT,SAASpC,EAAc0T,GACrB,IAAKA,EAAM,OAAO,EAGlB,IAFA,IAAItR,EAAMhD,OAAOC,SAASqU,EAAKv0C,QAAU,GACrCq0C,EAAMpR,EACDloC,EAAI,EAAGsK,EAAIkvC,EAAKv0C,OAAQjF,EAAIsK,IAAKtK,EAAG,CAC3C,IAAIy5C,EAAMD,EAAKx5C,GAEfu5C,MAAUD,EAAyB,IAAdG,GACrBF,MAAUD,EAAM,EAAKG,GAAS,EAAK,KACnCF,MAAUD,EAAM,EAAKG,GAAQ,GAAM,KACnCF,MAAUD,EAAM,EAAKG,IAAQ,IAC7BH,GAAO,EAET,OAAOpR,EAGT,SAASX,EAAcmS,GACrB,OAAO5T,EAAc4T,GA2BvB,SAAS7T,EAAY8T,GACnB,GAAW,MAAPA,EAAa,OAAO,EAIxB,IAHA,IAAIzR,EAAMhD,OAAOC,SA1BnB,SAA0BwU,GAExB,IADA,IAAI30C,EAAM,EACDhF,EAAI,EAAGsK,EAAIqvC,EAAI10C,OAAQjF,EAAIsK,IAAKtK,EAAG,CAC1C,IAAI45C,EAAID,EAAIt0C,WAAWrF,GACnB45C,GAAK,OAAUA,GAAK,OAAU55C,EAAI,EAAIsK,IACxCsvC,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBD,EAAIt0C,aAAarF,IAEpD45C,GAAK,MACL50C,EAEFA,GADS40C,GAAK,KACP,EACEA,GAAK,MACP,EACEA,GAAK,QACP,EACEA,GAAK,SACP,EAEA,EAGX,OAAO50C,EAKmB60C,CAAiBF,GAAO,GAE9CL,EAAMpR,EACDloC,EAAI,EAAGsK,EAAIqvC,EAAI10C,OAAQjF,EAAIsK,IAAKtK,EAAG,CAC1C,IAAI45C,EAAID,EAAIt0C,WAAWrF,GACnB45C,GAAK,OAAUA,GAAK,OAAU55C,EAAI,EAAIsK,IACxCsvC,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBD,EAAIt0C,aAAarF,IAEpD45C,GAAK,IACPL,MAAUD,IAAOM,GACRA,GAAK,MACdL,MAAUD,IAAQ,IAASM,IAAM,GACjCL,MAAUD,IAAQ,IAAqB,GAAZM,IAClBA,GAAK,OACdL,MAAUD,IAAQ,IAASM,IAAM,IACjCL,MAAUD,IAAQ,IAASM,IAAO,EAAK,IACvCL,MAAUD,IAAQ,IAAqB,GAAZM,IAClBA,GAAK,SACdL,MAAUD,IAAQ,IAASM,IAAM,IACjCL,MAAUD,IAAQ,IAASM,IAAM,GAAM,IACvCL,MAAUD,IAAQ,IAASM,IAAO,EAAK,IACvCL,MAAUD,IAAQ,IAAqB,GAAZM,IAClBA,GAAK,UACdL,MAAUD,IAAQ,IAASM,IAAM,IACjCL,MAAUD,IAAQ,IAASM,IAAM,GAAM,IACvCL,MAAUD,IAAQ,IAASM,IAAM,GAAM,IACvCL,MAAUD,IAAQ,IAASM,IAAO,EAAK,IACvCL,MAAUD,IAAQ,IAAqB,GAAZM,KAE3BL,MAAUD,IAAQ,IAASM,IAAM,IACjCL,MAAUD,IAAQ,IAASM,IAAM,GAAM,IACvCL,MAAUD,IAAQ,IAASM,IAAM,GAAM,IACvCL,MAAUD,IAAQ,IAASM,IAAM,GAAM,IACvCL,MAAUD,IAAQ,IAASM,IAAO,EAAK,IACvCL,MAAUD,IAAQ,IAAqB,GAAZM,IAI/B,OADAL,MAAUD,EAAK,GACRpR,EAGT,SAASuJ,EAAQvJ,GACf,OACG6J,KAAS7J,GACT6J,KAAS7J,EAAM,IAAO,EACtB6J,KAAS7J,EAAM,IAAM,GACrB6J,KAAS7J,EAAM,IAAM,GAY1B,SAAgB+J,EAAW/J,GACzB,IAAKA,EAAK,OAAO,KAKjB,IAJA,IAEI4R,EACAC,EAASC,EAASC,EAASC,EAH3BC,EAAM,IAAIr0C,MAIPg0C,EAAK/H,KAAS7J,MACR,IAAL4R,GAINC,EAAuB,GAAlBhI,KAAS7J,KACK,MAAT,IAAL4R,IAILE,EAAuB,GAAlBjI,KAAS7J,KACK,MAAT,IAAL4R,GACHA,GAAY,GAALA,IAAY,GAAOC,GAAM,EAAKC,GAErCC,EAAuB,GAAlBlI,KAAS7J,KACK,MAAT,IAAL4R,GACHA,GAAY,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAEjDC,EAAuB,GAAlBnI,KAAS7J,KAEZ4R,EADiB,MAAT,IAALA,IACS,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAGlD,EAALJ,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EAD/C,GAAlBnI,KAAS7J,OAKpBiS,EAAI30C,KAAKs0C,IApBPK,EAAI30C,MAAY,GAALs0C,IAAY,EAAKC,IAL5BI,EAAI30C,KAAKs0C,GAmCb,OAAOM,OAAOC,eAAeF,GAhPlB96C,EAAAkzC,WAqMblzC,EAAA4yC,aA+CA,IAAAL,EAAA,WAKA,OALA,gBAAavyC,EAAAuyC,eAQbvyC,EAAAi7C,yBAAA,SAAgBA,EAAyBxwC,GAEvC,OAAQgnC,2BAA2BhnC,IACjC,OACA,OACA,OACA,OAAqB,OAAO,EAE9B,OAAQ+oC,yBAAyB/oC,IAC/B,KAAKmqB,EAAayF,YAClB,KAAKzF,EAAasmB,OAAQ,OAAO,EACjC,KAAKtmB,EAAaumB,MAAO,OAA2C,GAApChE,2BAA2B1sC,GAC3D,KAAKmqB,EAAa4E,MAChB,IAAK6c,sBAAsB5rC,GAAO,CAChC,IAAI2wC,EAAc9E,6BAA6B7rC,GAC/C,OAAO2wC,EAAc,GAAKH,EAAyB1E,uBAAuB9rC,EAAM2wC,EAAc,KAIpG,OAAO,kBCnkDT,IAAAC,EAGAA,EAAA,WACA,OAAA/6C,KADA,GAIA,IAEA+6C,KAAAhuB,SAAA,cAAAA,KAAA,EAAAiuB,MAAA,QACC,MAAAC,GAED,iBAAAC,SAAAH,EAAAG,QAOAv7C,EAAAD,QAAAq7C,iFCdA,IAAAI,EAAAh7C,EAAA,IAcA,SAAkBi7C,GAKhBA,IAAA,WAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,iBAKAA,IAAA,WAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,iBAEAA,IAAA,gBAKAA,IAAA,cAEAA,IAAA,cAKAA,IAAA,gBAxCF,CAAkB17C,EAAA07C,WAAA17C,EAAA07C,cA4ClB,SAAkBC,GAChBA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,uBAEAA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,sBAEAA,IAAA,kBAEAA,IAAA,gBAEAA,IAAA,mBAEAA,IAAA,2BAEAA,IAAA,yBArBF,CAAkB37C,EAAA27C,YAAA37C,EAAA27C,eAyBlB,IAAA56B,EAAA,WAoBE,SAAAA,EAAY1Z,EAAgBa,EAAkB8vB,GAHtC13B,KAAAs7C,mBAAkC,KAIxCt7C,KAAK+G,KAAOA,EACZ/G,KAAK4H,MAAQA,EACb5H,KAAK03B,KAAOA,EACZ13B,KAAKgmB,SAAgBu1B,KAAe7jB,EAAO,GAC3C13B,KAAKw7C,eAAiB,KACtBx7C,KAAK+lB,mBAAqB,KAC1B/lB,KAAKy7C,gBAAkBz7C,KAmW3B,OA/VEe,OAAAC,eAAIyf,EAAAxe,UAAA,eAAJ,WACE,OAAQjC,KAAK+G,MACX,OAAkB,OAAO0Z,EAAKC,GAC9B,OAAmB,OAAOD,EAAKE,IAC/B,QACA,OAAmB,OAAOF,EAAKG,IAC/B,QACA,OAAmB,OAAOH,EAAKI,IAC/B,OAAqB,OAAoB,IAAb7gB,KAAK03B,KAAajX,EAAKi7B,QAAUj7B,EAAKk7B,QAClE,OAAkB,OAAOl7B,EAAKM,GAC9B,OAAmB,OAAON,EAAKO,IAC/B,OAAmB,OAAOP,EAAKQ,IAC/B,OAAmB,OAAOR,EAAKS,IAC/B,OAAqB,OAAoB,IAAblhB,KAAK03B,KAAajX,EAAKm7B,QAAUn7B,EAAKo7B,QAClE,QACA,QAAS,OAAOp7B,EAAKG,sCAKzBH,EAAAxe,UAAA65C,UAAA,SAAUjwB,GACR,GAAIA,EAAQlM,MAAO,CACjB,IAAI67B,EAAiBx7C,KAAKw7C,eAC1B,OAA0B,OAAnBA,IAA4BA,EAAex0B,aAAam0B,EAAAx8B,eAAezI,WAEhF,OAAO,GAITuK,EAAAxe,UAAA85C,yBAAA,SAAyBC,GACvB,OAAOA,EAAWtkB,KAAO13B,KAAK03B,MAIhCjX,EAAAxe,UAAAs1B,wBAAA,SAAwBykB,GACtB,IAAItkB,EAAO13B,KAAK8H,GAAE,GAAuB9H,KAAK03B,KAAO13B,KAAK03B,KAAO,EACjE,OAAO,IAAQskB,EAAWtkB,KAAOA,GAInCjX,EAAAxe,UAAA6F,GAAA,SAAGF,GAA0B,OAAQ5H,KAAK4H,MAAQA,IAAUA,GAE5D6Y,EAAAxe,UAAA+F,MAAA,SAAMJ,GAA0B,OAA+B,IAAvB5H,KAAK4H,MAAQA,IAGrD6Y,EAAAxe,UAAA6uB,QAAA,SAAQmrB,GACNx4C,OAAgB,GAATzD,KAAK+G,OAA2B/G,KAAKw7C,gBAC5C,IAAIxJ,EAAM,IAAIvxB,EAAKzgB,KAAK+G,MAAmB,IAAb/G,KAAK4H,MAAwB,IAAwB5H,KAAK03B,MAExF,OADAsa,EAAIwJ,eAAiBS,EACdjK,GAITvxB,EAAAxe,UAAAmuB,WAAA,SAAWrd,GACTtP,OAAgB,GAATzD,KAAK+G,OAAyB/G,KAAK+lB,oBAC1C,IAAIisB,EAAM,IAAIvxB,EAAKzgB,KAAK+G,MAAmB,IAAb/G,KAAK4H,MAAwB,IAAwB5H,KAAK03B,MAExF,OADAsa,EAAIjsB,mBAAqBhT,EAClBi/B,GAITvxB,EAAAxe,UAAAi6C,WAAA,WASE,OARAz4C,OAAOzD,KAAK8H,GAAE,MACT9H,KAAKs7C,qBACR73C,QAAQzD,KAAK8H,GAAE,MACf9H,KAAKs7C,mBAAqB,IAAI76B,EAAKzgB,KAAK+G,KAAgB,IAAV/G,KAAK4H,MAA4B5H,KAAK03B,MACpF13B,KAAKs7C,mBAAmBG,gBAAkBz7C,KAC1CA,KAAKs7C,mBAAmBE,eAAiBx7C,KAAKw7C,eAC9Cx7C,KAAKs7C,mBAAmBv1B,mBAAqB/lB,KAAK+lB,oBAE7C/lB,KAAKs7C,oBAId76B,EAAAxe,UAAAivB,eAAA,SAAeC,EAAcgrB,GAC3B,IAAIC,EACAC,EACAxqB,EACAyqB,EACJ,QAL2B,IAAAH,OAAA,GAKvBn8C,KAAK8H,GAAE,MACT,GAAIqpB,EAAOrpB,GAAE,QACN9H,KAAK8H,GAAE,MAAwBqpB,EAAOrpB,GAAE,MAC3C,GAAIs0C,EAAep8C,KAAKw7C,gBACtB,GAAIa,EAAclrB,EAAOqqB,eACvB,OAAOY,EAAalrB,eAAemrB,QAEhC,IAAIxqB,EAAkB7xB,KAAK+lB,sBAC5Bu2B,EAAiBnrB,EAAOpL,oBAC1B,OAAO8L,EAAgBX,eAAeorB,QAKzC,IAAKnrB,EAAOrpB,GAAE,KACnB,GAAI9H,KAAK8H,GAAE,GACT,GAAIqpB,EAAOrpB,GAAE,IACX,IAAKq0C,GAAwBn8C,KAAK8H,GAAE,IAAsBqpB,EAAOrpB,GAAE,GACjE,OAAO9H,KAAK03B,MAAQvG,EAAOuG,SAExB,IAAe,IAAXvG,EAAOpqB,KAChB,OAAO/G,KAAK03B,MAAQ,GACf,GAAe,IAAXvG,EAAOpqB,KAChB,OAAO/G,KAAK03B,MAAQ,QAEjB,GAAI13B,KAAK8H,GAAE,IACZqpB,EAAOrpB,GAAE,GACX,OAAO9H,KAAK03B,MAAQvG,EAAOuG,KAIjC,OAAO,GAIFjX,EAAA87B,iBAAP,SAAwBnxC,EAAYC,EAAamxC,GAC/C,OAAInxC,EAAM6lB,eAAe9lB,EAAMoxC,GAA+BpxC,EACrDA,EAAK8lB,eAAe7lB,EAAOmxC,GAA+BnxC,EAC5D,MAIToV,EAAAxe,UAAA4C,SAAA,SAAS43C,GACP,QADO,IAAAA,OAAA,IACFA,GAAYz8C,KAAK8H,GAAE,KAAuB,CAC7C,IAAI0zC,EAAiBx7C,KAAKw7C,eAC1B,GAAIA,EACF,OAAOx7C,KAAK8H,GAAE,KACV0zC,EAAe32C,WAAa,UAC5B22C,EAAe32C,WAErB,IAAIkhB,EAAqB/lB,KAAK+lB,mBAC9B,GAAIA,EACF,OAAO/lB,KAAK8H,GAAE,KACV,IAAMie,EAAmBlhB,UAAS,GAAQ,WAC1CkhB,EAAmBlhB,UAAS,GAElCpB,QAAO,GAET,OAAQzD,KAAK+G,MACX,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,MAAO,QAC5B,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,MAAO,QAC5B,QAAoB,MAAO,OAC3B,QAAmB,MAAO,MAC1B,QAAmB,MAAO,MAC1B,QAAStD,QAAO,GAChB,QAAoB,MAAO,SAO/Bgd,EAAAxe,UAAAmtB,aAAA,WACE,OAAQpvB,KAAK+G,MACX,QAAS,SACT,OACA,OAAmB,SACnB,OACA,OAAqB,OAAoB,IAAb/G,KAAK03B,KAAY,EAAiB,EAC9D,QAAmB,SACnB,QAAmB,SACnB,QAAqB,WAKzBjX,EAAAxe,UAAAy6C,aAAA,SAAa/8C,GACX,OAAQK,KAAK+G,MACX,QAAoBtD,QAAO,GAC3B,QAAS,OAAO9D,EAAO8mC,UAAU,GACjC,OACA,OAAqB,GAAiB,IAAbzmC,KAAK03B,KAAY,OAAO/3B,EAAO8mC,UAAU,GAClE,OACA,OAAmB,OAAO9mC,EAAOknC,UAAU,GAC3C,QAAmB,OAAOlnC,EAAOsnC,UAAU,GAC3C,QAAmB,OAAOtnC,EAAOwnC,UAAU,KAK/C1mB,EAAAxe,UAAA06C,YAAA,SAAYh9C,GACV,OAAQK,KAAK+G,MACX,QAAoBtD,QAAO,GAC3B,QAAS,OAAO9D,EAAO8mC,UAAU,GACjC,OACA,OAAqB,GAAiB,IAAbzmC,KAAK03B,KAAY,OAAO/3B,EAAO8mC,UAAU,GAClE,OACA,OAAmB,OAAO9mC,EAAOknC,UAAU,GAC3C,QAAmB,OAAOlnC,EAAOsnC,UAAU,GAC3C,QAAmB,OAAOtnC,EAAOwnC,UAAU,KAK/C1mB,EAAAxe,UAAA26C,eAAA,SAAej9C,GACb,OAAQK,KAAK+G,MACX,QAAoBtD,QAAO,GAC3B,QAAS,OAAO9D,EAAO8mC,WAAW,GAClC,OACA,OAAqB,GAAiB,IAAbzmC,KAAK03B,KAAY,OAAO/3B,EAAO8mC,WAAW,GACnE,OACA,OAAmB,OAAO9mC,EAAOknC,WAAW,GAAI,GAChD,QAAmB,OAAOlnC,EAAOsnC,WAAW,GAC5C,QAAmB,OAAOtnC,EAAOwnC,WAAW,KAKhD1mB,EAAAxe,UAAAkuB,kBAAA,WACE,OAAQnwB,KAAK+G,MACX,QAAS,MAAO,IAChB,OACA,OAAmB,MAAO,IAC1B,OACA,OAAqB,OAAoB,IAAb/G,KAAK03B,KAAa,IAAM,IACpD,QAAmB,MAAO,IAC1B,QAAmB,MAAO,IAC1B,QAAoB,MAAO,MAOfjX,EAAAC,GAAY,IAAID,EAAI,EAClC,IAGmB,GAILA,EAAAE,IAAY,IAAIF,EAAI,EAClC,IAGkB,IAIJA,EAAAG,IAAY,IAAIH,EAAI,EAClC,IAEkB,IAIJA,EAAAI,IAAY,IAAIJ,EAAI,EAClC,IAGkB,IAIJA,EAAAk7B,QAAgB,IAAIl7B,EAAI,EACtC,IAGkB,IAIJA,EAAAi7B,QAAgB,IAAIj7B,EAAI,EACtC,IAIkB,IAIJA,EAAAM,GAAW,IAAIN,EAAI,EACjC,IAGmB,GAILA,EAAAO,IAAY,IAAIP,EAAI,EAClC,IAGkB,IAIJA,EAAAQ,IAAY,IAAIR,EAAI,EAClC,IAEkB,IAIJA,EAAAS,IAAY,IAAIT,EAAI,EAClC,IAGkB,IAIJA,EAAAo7B,QAAgB,IAAIp7B,EAAI,EACtC,IAGkB,IAIJA,EAAAm7B,QAAgB,IAAIn7B,EAAI,EACtC,IAIkB,IAIJA,EAAAW,KAAa,IAAIX,EAAI,GACnC,IAGmB,GAILA,EAAAY,IAAY,IAAIZ,EAAI,GAClC,IAEkB,IAIJA,EAAAa,IAAY,IAAIb,EAAI,GAClC,IAGkB,IAIJA,EAAAc,KAAa,IAAId,EAAI,KAAgC,GACvEA,EA9XA,GAAa/gB,EAAA+gB,OAiYb/gB,EAAAm9C,mBAAA,SAAmCC,GAGjC,IAFA,IAAIC,EAAWD,EAAMx3C,OACjB0sC,EAAM,IAAI7rC,MAAkB42C,GACvB18C,EAAI,EAAGA,EAAI08C,IAAY18C,EAAG2xC,EAAI3xC,GAAKy8C,EAAMz8C,GAAG+uB,eACrD,OAAO4iB,GAITtyC,EAAAs9C,cAAA,SAA8BF,GAC5B,IAAIC,EAAWD,EAAMx3C,OACrB,IAAKy3C,EAAU,MAAO,GAEtB,IADA,IAAIp3C,EAAK,IAAIQ,MAAc42C,GAClB18C,EAAI,EAAGA,EAAI08C,IAAY18C,EAAGsF,EAAGtF,GAAKy8C,EAAMz8C,GAAGwE,WACpD,OAAOc,EAAGG,KAAK,MAIjB,IAAAm3C,EAAA,WAoBE,SAAAA,EACEn3B,EACA1c,EACAglB,QAFA,IAAAtI,MAAA,WACA,IAAA1c,MAAA,WACA,IAAAglB,MAAA,MARFpuB,KAAAk9C,qBAA8C,KAU5Cl9C,KAAK8lB,eAAiBA,MACtB9lB,KAAKm9C,eAAiB,KACtBn9C,KAAKo9C,mBAAqB,EAC1Bp9C,KAAKoJ,WAAaA,GAA0BqX,EAAKc,KACjDvhB,KAAKouB,SAAWA,EAChBpuB,KAAKq9C,SAAU,EACfr9C,KAAKqI,KAAOoY,EAAKQ,IAAImP,WAAWpwB,MA8FpC,OA1FEi9C,EAAAh7C,UAAA4sB,iBAAA,SAAiBnC,GACf,IAAIywB,EAAiBn9C,KAAKm9C,eAC1B,OAAOA,GAAkBA,EAAe73C,OAASonB,EAC7CywB,EAAezwB,GACf4wB,EAAwB5wB,IAI9BuwB,EAAAh7C,UAAAivB,eAAA,SAAeC,GAIb,IAAIosB,EAAev9C,KAAKouB,SACpBovB,EAAiBrsB,EAAO/C,SAC5B,GAAImvB,GACF,IAAMC,IAAkBD,EAAarsB,eAAessB,GAAkB,OAAO,OACxE,GAAIA,EACT,OAAO,EAIT,GAAIx9C,KAAKq9C,SAAWlsB,EAAOksB,QAAS,OAAO,EAG3C,IAAII,EAAqBz9C,KAAK8lB,eAC1B43B,EAAuBvsB,EAAOrL,eAC9B63B,EAAgBF,EAAmBn4C,OACvC,GAAIq4C,GAAiBD,EAAqBp4C,OAAQ,OAAO,EACzD,IAAK,IAAIjF,EAAI,EAAGA,EAAIs9C,IAAiBt9C,EAAG,CACtC,IAAIu9C,EAAoBH,EAAmBp9C,GACvCw9C,EAAsBH,EAAqBr9C,GAC/C,IAAKu9C,EAAkB1sB,eAAe2sB,GAAsB,OAAO,EAIrE,IAAIC,EAAiB99C,KAAKoJ,WACtB20C,EAAmB5sB,EAAO/nB,WAC9B,OAAO00C,GAAkBC,GAAoBD,EAAe5sB,eAAe6sB,IAItEd,EAAAe,oBAAP,SAA2Bl4B,EAA+B1c,EAAkBglB,QAAA,IAAAA,MAAA,MAC1E,IAAIzoB,KAEJ,GADIyoB,GAAUzoB,EAAGE,KAAKuoB,EAAS+B,qBAC3BrK,EACF,IAAK,IAAIzlB,EAAI,EAAGsK,EAAImb,EAAexgB,OAAQjF,EAAIsK,IAAKtK,EAAGsF,EAAGE,KAAKigB,EAAezlB,GAAG8vB,qBAGnF,OADAxqB,EAAGE,KAAKuD,EAAW+mB,qBACZxqB,EAAGG,KAAK,KAIjBm3C,EAAAh7C,UAAAkuB,kBAAA,WACE,OAAO8sB,EAAUe,oBAAoBh+C,KAAK8lB,eAAgB9lB,KAAKoJ,WAAYpJ,KAAKouB,WAIlF6uB,EAAAh7C,UAAA4C,SAAA,SAASo5C,QAAA,IAAAA,OAAA,GACP,IAAIt4C,EAAK,IAAIQ,MACbR,EAAGE,KAAK,KACR,IAAI6mB,EAAQ,EACR0B,EAAWpuB,KAAKouB,SAChBA,GACE6vB,IACFt4C,EAAGE,KAAK,UACRF,EAAGE,KAAKuoB,EAASvpB,YACjB6nB,EAAQ,GAGZ,IAAIvjB,EAAanJ,KAAK8lB,eAClB63B,EAAgBx0C,EAAW7D,OAC/B,GAAIq4C,EAKF,IAJA,IAAIpwC,EAAQvN,KAAKm9C,eACbhS,EAAW59B,EAAQA,EAAMjI,OAAS,EAClC44C,EAAgBl+C,KAAKo9C,mBACrBe,EAAYn+C,KAAKq9C,QAAUM,EAAgB,GAAK,EAC3Ct9C,EAAI,EAAGA,EAAIs9C,IAAiBt9C,IAAKqsB,EACpCA,GAAO/mB,EAAGE,KAAK,MACfxF,GAAK89C,GAAWx4C,EAAGE,KAAK,OACxBxF,EAAI8qC,EAAUxlC,EAAGE,KAAgB0H,EAAOlN,IACvCsF,EAAGE,KAAKy3C,EAAwBj9C,IACjCA,GAAK69C,GAAiB79C,GAAK89C,EAAWx4C,EAAGE,KAAK,OAC7CF,EAAGE,KAAK,MACbF,EAAGE,KAAKsD,EAAW9I,GAAGwE,YAK1B,OAFAc,EAAGE,KAAK,SACRF,EAAGE,KAAK7F,KAAKoJ,WAAWvE,YACjBc,EAAGG,KAAK,KAEnBm3C,EA7HA,GAAav9C,EAAAu9C,YAkIb,IAAImB,EAA+C,KAGnD,SAAgBd,EAAwB5wB,GACjC0xB,IAA6BA,MAClC,IAAK,IAAI/9C,EAAI+9C,EAA4B94C,OAAQjF,GAAKqsB,IAASrsB,EAC7D+9C,EAA4Bv4C,KAAK,OAASxF,EAAEwE,SAAS,KAEvD,OAAOu5C,EAA4B1xB,EAAQ,GAL7ChtB,EAAA49C,8cCtmBA,IAuBY32C,EAwIA03C,EA/JZpiC,EAAA9b,EAAA,GAMAgc,EAAAhc,EAAA,GAKA+C,EAAA/C,EAAA,GA0JA,SAAgBm+C,EAAiBl5C,GAE/B,OADA3B,OAAO2B,EAAKE,QACJF,EAAKM,WAAW,IACtB,QACE,OAAQN,GACN,IAAK,WAAY,OAAOuB,EAAM6hB,SAC9B,IAAK,KAAM,OAAO7hB,EAAM43C,GACxB,IAAK,QAAS,OAAO53C,EAAM63C,MAC3B,IAAK,QAAS,OAAO73C,EAAM83C,MAE7B,MAEF,QACE,OAAQr5C,GACN,IAAK,QAAS,OAAOuB,EAAMwT,MAE7B,MAEF,QACE,OAAQ/U,GACN,IAAK,OAAQ,OAAOuB,EAAM+3C,KAC1B,IAAK,QAAS,OAAO/3C,EAAMg4C,MAC3B,IAAK,QAAS,OAAOh4C,EAAMwQ,MAC3B,IAAK,WAAY,OAAOxQ,EAAMyT,SAC9B,IAAK,QAAS,OAAOzT,EAAMglB,MAC3B,IAAK,cAAe,OAAOhlB,EAAM0Q,YAEnC,MAEF,SACE,OAAQjS,GACN,IAAK,WAAY,OAAOuB,EAAMi4C,SAC9B,IAAK,UAAW,OAAOj4C,EAAMk4C,QAC7B,IAAK,UAAW,OAAOl4C,EAAMm4C,QAC7B,IAAK,SAAU,OAAOn4C,EAAMo4C,OAC5B,IAAK,KAAM,OAAOp4C,EAAM0T,GAE1B,MAEF,SACE,OAAQjV,GACN,IAAK,OAAQ,OAAOuB,EAAMq4C,KAC1B,IAAK,OAAQ,OAAOr4C,EAAMolB,KAC1B,IAAK,SAAU,OAAOplB,EAAMiT,OAC5B,IAAK,UAAW,OAAOjT,EAAMs4C,QAE/B,MAEF,SACE,OAAQ75C,GACN,IAAK,QAAS,OAAOuB,EAAMQ,MAC3B,IAAK,UAAW,OAAOR,EAAMu4C,QAC7B,IAAK,MAAO,OAAOv4C,EAAMmU,IACzB,IAAK,OAAQ,OAAOnU,EAAMw4C,KAC1B,IAAK,WAAY,OAAOx4C,EAAM4Q,SAEhC,MAEF,SACE,OAAQnS,GACN,IAAK,MAAO,OAAOuB,EAAMohB,IAE3B,MAEF,SACE,OAAQ3iB,GACN,IAAK,KAAM,OAAOuB,EAAMoU,GACxB,IAAK,aAAc,OAAOpU,EAAMy4C,WAChC,IAAK,SAAU,OAAOz4C,EAAMsU,OAC5B,IAAK,KAAM,OAAOtU,EAAM04C,GACxB,IAAK,aAAc,OAAO14C,EAAM6Q,WAChC,IAAK,YAAa,OAAO7Q,EAAM+qB,UAC/B,IAAK,KAAM,OAAO/qB,EAAM24C,GAE1B,MAEF,SACE,OAAQl6C,GACN,IAAK,QAAS,OAAOuB,EAAM44C,MAE7B,MAEF,SACE,OAAQn6C,GACN,IAAK,MAAO,OAAOuB,EAAM64C,IAE3B,MAEF,SACE,OAAQp6C,GACN,IAAK,SAAU,OAAOuB,EAAM84C,OAE9B,MAEF,SACE,OAAQr6C,GACN,IAAK,YAAa,OAAOuB,EAAMmlB,UAC/B,IAAK,MAAO,OAAOnlB,EAAM+Q,IACzB,IAAK,OAAQ,OAAO/Q,EAAMM,KAE5B,MAEF,SACE,OAAQ7B,GACN,IAAK,KAAM,OAAOuB,EAAM+4C,GAE1B,MAEF,SACE,OAAQt6C,GACN,IAAK,UAAW,OAAOuB,EAAMg5C,QAC7B,IAAK,UAAW,OAAOh5C,EAAMi5C,QAC7B,IAAK,YAAa,OAAOj5C,EAAMk5C,UAC/B,IAAK,SAAU,OAAOl5C,EAAMm5C,OAE9B,MAEF,SACE,OAAQ16C,GACN,IAAK,WAAY,OAAOuB,EAAM4hB,SAC9B,IAAK,SAAU,OAAO5hB,EAAMwU,OAE9B,MAEF,SACE,OAAQ/V,GACN,IAAK,MAAO,OAAOuB,EAAMqhB,IACzB,IAAK,SAAU,OAAOrhB,EAAMoT,OAC5B,IAAK,QAAS,OAAOpT,EAAMqR,MAC3B,IAAK,SAAU,OAAOrR,EAAM0U,OAE9B,MAEF,SACE,OAAQjW,GACN,IAAK,OAAQ,OAAOuB,EAAMsR,KAC1B,IAAK,QAAS,OAAOtR,EAAM2U,MAC3B,IAAK,OAAQ,OAAO3U,EAAMO,KAC1B,IAAK,MAAO,OAAOP,EAAM4U,IACzB,IAAK,OAAQ,OAAO5U,EAAMyO,KAC1B,IAAK,SAAU,OAAOzO,EAAMo5C,OAE9B,MAEF,SACE,OAAQ36C,GACN,IAAK,MAAO,OAAOuB,EAAMq5C,IACzB,IAAK,OAAQ,OAAOr5C,EAAM+U,KAE5B,MAEF,SACE,OAAQtW,GACN,IAAK,QAAS,OAAOuB,EAAMgV,MAC3B,IAAK,OAAQ,OAAOhV,EAAMs5C,KAE5B,MAEF,SACE,OAAQ76C,GACN,IAAK,QAAS,OAAOuB,EAAMu5C,OAKjC,OAAOv5C,EAAM8X,QAGf,SAAgB0hC,EAAsBC,GACpC,OAAQA,GACN,KAAKz5C,EAAM6hB,SACX,KAAK7hB,EAAM43C,GACX,KAAK53C,EAAM0Q,YACX,KAAK1Q,EAAMk4C,QACX,KAAKl4C,EAAMo4C,OACX,KAAKp4C,EAAMw4C,KACX,KAAKx4C,EAAMmU,IACX,KAAKnU,EAAMohB,IACX,KAAKphB,EAAM24C,GACX,KAAK34C,EAAM44C,MACX,KAAK54C,EAAM84C,OACX,KAAK94C,EAAMmlB,UACX,KAAKnlB,EAAM4hB,SACX,KAAK5hB,EAAMqhB,IACX,KAAKrhB,EAAMyO,KAAM,OAAO,EACxB,QAAS,OAAO,IAvUpB,SAAYzO,GAKVA,IAAA,uBACAA,IAAA,WACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,eACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,uBACAA,IAAA,8BACAA,IAAA,wBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,oBACAA,IAAA,YACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,oBACAA,IAAA,sBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,cACAA,IAAA,YACAA,IAAA,4BACAA,IAAA,oBACAA,IAAA,YACAA,IAAA,4BACAA,IAAA,0BACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,oBACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,YACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,oBACAA,IAAA,wBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,kBAIAA,IAAA,0BACAA,IAAA,4BACAA,IAAA,0BACAA,IAAA,4BACAA,IAAA,8BACAA,IAAA,gCACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,0BACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,8BACAA,IAAA,sCACAA,IAAA,4CACAA,IAAA,kCACAA,IAAA,4CACAA,IAAA,gDACAA,IAAA,0DACAA,IAAA,4CACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,0CACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,8BACAA,IAAA,0CACAA,IAAA,sDACAA,IAAA,8EACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,kBACAA,IAAA,8BACAA,IAAA,kBACAA,IAAA,8CACAA,IAAA,sBACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,qBACAA,IAAA,+BACAA,IAAA,iCACAA,IAAA,uCACAA,IAAA,yDACAA,IAAA,iCACAA,IAAA,qCACAA,IAAA,yDACAA,IAAA,qEACAA,IAAA,6FACAA,IAAA,yCACAA,IAAA,6BACAA,IAAA,iCACAA,IAAA,aAIAA,IAAA,6BACAA,IAAA,mCACAA,IAAA,qCACAA,IAAA,iCAIAA,IAAA,uBACAA,IAAA,2BArIF,CAAYA,EAAAjH,EAAAiH,QAAAjH,EAAAiH,WAwIZ,SAAY03C,GACVA,IAAA,qBACAA,IAAA,mBACAA,IAAA,mBAHF,CAAYA,EAAA3+C,EAAA2+C,qBAAA3+C,EAAA2+C,wBAMZ3+C,EAAA4+C,mBAwKA5+C,EAAAygD,wBAqBAzgD,EAAA2gD,sBAAA,SAAsCD,GACpC,OAAQA,GACN,KAAKz5C,EAAMo4C,OAAQ,MAAO,SAC1B,KAAKp4C,EAAM04C,GAAI,MAAO,KACtB,KAAK14C,EAAM6Q,WAAY,MAAO,aAC9B,KAAK7Q,EAAM+Q,IAAK,MAAO,MACvB,KAAK/Q,EAAMo5C,OAAQ,MAAO,SAC1B,KAAKp5C,EAAM+U,KAAM,MAAO,OACxB,KAAK/U,EAAMu5C,MAAO,MAAO,QACzB,KAAKv5C,EAAM25C,YAAa,MAAO,MAC/B,KAAK35C,EAAMyQ,MAAO,MAAO,IACzB,KAAKzQ,EAAM45C,SAAU,MAAO,IAC5B,KAAK55C,EAAM65C,YAAa,MAAO,IAC/B,KAAK75C,EAAM85C,gBAAiB,MAAO,KACnC,KAAK95C,EAAM+5C,mBAAoB,MAAO,KACtC,KAAK/5C,EAAMg6C,cAAe,MAAO,KACjC,KAAKh6C,EAAMi6C,mBAAoB,MAAO,KACtC,KAAKj6C,EAAMk6C,qBAAsB,MAAO,MACxC,KAAKl6C,EAAMm6C,0BAA2B,MAAO,MAC7C,KAAKn6C,EAAMsX,KAAM,MAAO,IACxB,KAAKtX,EAAMwX,MAAO,MAAO,IACzB,KAAKxX,EAAMo6C,kBAAmB,MAAO,KACrC,KAAKp6C,EAAMq6C,SAAU,MAAO,IAC5B,KAAKr6C,EAAMs6C,MAAO,MAAO,IACzB,KAAKt6C,EAAMu6C,QAAS,MAAO,IAC3B,KAAKv6C,EAAMw6C,UAAW,MAAO,KAC7B,KAAKx6C,EAAMy6C,YAAa,MAAO,KAC/B,KAAKz6C,EAAM06C,kBAAmB,MAAO,KACrC,KAAK16C,EAAM26C,wBAAyB,MAAO,KAC3C,KAAK36C,EAAM46C,oCAAqC,MAAO,MACvD,KAAK56C,EAAM66C,UAAW,MAAO,IAC7B,KAAK76C,EAAM86C,IAAK,MAAO,IACvB,KAAK96C,EAAM+6C,MAAO,MAAO,IACzB,KAAK/6C,EAAMg7C,YAAa,MAAO,IAC/B,KAAKh7C,EAAMi7C,MAAO,MAAO,IACzB,KAAKj7C,EAAMk7C,oBAAqB,MAAO,KACvC,KAAKl7C,EAAMm7C,QAAS,MAAO,KAC3B,KAAKn7C,EAAMo7C,OAAQ,MAAO,IAC1B,KAAKp7C,EAAMq7C,YAAa,MAAO,KAC/B,KAAKr7C,EAAMs7C,aAAc,MAAO,KAChC,KAAKt7C,EAAMu7C,gBAAiB,MAAO,KACnC,KAAKv7C,EAAMw7C,yBAA0B,MAAO,MAC5C,KAAKx7C,EAAMy7C,aAAc,MAAO,KAChC,KAAKz7C,EAAM07C,eAAgB,MAAO,KAClC,KAAK17C,EAAM27C,yBAA0B,MAAO,MAC5C,KAAK37C,EAAM47C,+BAAgC,MAAO,MAClD,KAAK57C,EAAM67C,2CAA4C,MAAO,OAC9D,KAAK77C,EAAM87C,iBAAkB,MAAO,KACpC,KAAK97C,EAAM+7C,WAAY,MAAO,KAC9B,KAAK/7C,EAAMg8C,aAAc,MAAO,KAChC,QAEE,OADAl/C,QAAO,GACA,KAKb,IAAAmD,EAAA,WAUE,SAAAA,EAAY9B,EAAgBS,EAAYC,GA4CxCxF,KAAAgwB,aAAsB,EA3CpBhwB,KAAK8E,OAASA,EACd9E,KAAKuF,MAAQA,EACbvF,KAAKwF,IAAMA,EA0Cf,OAvCSoB,EAAAd,KAAP,SAAY88C,EAAUC,GACpB,GAAID,EAAE99C,QAAU+9C,EAAE/9C,OAAQ,MAAM,IAAIogB,MAAM,mBAC1C,OAAO,IAAIte,EAAMg8C,EAAE99C,OACjB89C,EAAEr9C,MAAQs9C,EAAEt9C,MAAQq9C,EAAEr9C,MAAQs9C,EAAEt9C,MAChCq9C,EAAEp9C,IAAMq9C,EAAEr9C,IAAMo9C,EAAEp9C,IAAMq9C,EAAEr9C,MAI9BzE,OAAAC,eAAI4F,EAAA3E,UAAA,eAAJ,WACE,OAAO,IAAI2E,EAAM5G,KAAK8E,OAAQ9E,KAAKuF,MAAOvF,KAAKuF,wCAEjDxE,OAAAC,eAAI4F,EAAA3E,UAAA,aAAJ,WACE,OAAO,IAAI2E,EAAM5G,KAAK8E,OAAQ9E,KAAKwF,IAAKxF,KAAKwF,sCAG/CzE,OAAAC,eAAI4F,EAAA3E,UAAA,YAAJ,WAGE,IAFA,IAAImD,EAAOpF,KAAK8E,OAAOM,KACnBJ,EAAO,EACFiU,EAAMjZ,KAAKuF,MAAO0T,GAAO,IAAKA,EACb,IAApB7T,EAAKM,WAAWuT,IAA2BjU,IAEjD,OAAOA,mCAGTjE,OAAAC,eAAI4F,EAAA3E,UAAA,cAAJ,WAGE,IAFA,IAAImD,EAAOpF,KAAK8E,OAAOM,KACnBH,EAAS,EACJgU,EAAMjZ,KAAKuF,MAAQ,EAAG0T,GAAO,GACZ,IAApB7T,EAAKM,WAAWuT,KADqBA,IAEvChU,EAEJ,OAAOA,mCAGT2B,EAAA3E,UAAA4C,SAAA,WACE,OAAO7E,KAAK8E,OAAOM,KAAKQ,UAAU5F,KAAKuF,MAAOvF,KAAKwF,MAIvDoB,EAvDA,GAAalH,EAAAkH,QA+Db,IAAAk8C,EAAA,SAAA9tC,GAgBE,SAAA8tC,EAAYh+C,EAAgBoB,QAAA,IAAAA,MAAA,MAA5B,IAAAgP,EACEF,EAAAxU,KAAAR,KAAMkG,IAAYlG,KAdpBkV,EAAA1P,IAAW,EAEX0P,EAAA+D,IAAW,EACX/D,EAAAkrC,OAAgB,EAChBlrC,EAAA6tC,SAAgB,EAEhB7tC,EAAA8tC,WAAoB,EACpB9tC,EAAA+tC,aAAoB,EACpB/tC,EAAAguC,oBAA2B,EAE3BhuC,EAAAiuC,UAAmC,KAKjCjuC,EAAKpQ,OAASA,EACdoQ,EAAK+D,IAAM,EACX/D,EAAK1P,IAAMV,EAAOM,KAAKE,OACvB4P,EAAKhP,YAAcA,GAA4B,IAAIC,MAEnD,IAAIf,EAAON,EAAOM,KAWlB,GAPE8P,EAAK+D,IAAM/D,EAAK1P,KACS,OAAzBJ,EAAKM,WAAWwP,EAAK+D,QAEnB/D,EAAK+D,IAKP/D,EAAK+D,IAAM,EAAI/D,EAAK1P,KACK,IAAzBJ,EAAKM,WAAWwP,EAAK+D,MACQ,IAA7B7T,EAAKM,WAAWwP,EAAK+D,IAAM,GAG3B,IADA/D,EAAK+D,KAAO,EAEV/D,EAAK+D,IAAM/D,EAAK1P,KACS,IAAzBJ,EAAKM,WAAWwP,EAAK+D,QAEnB/D,EAAK+D,aAiiCf,OA7kC+BhE,EAAA6tC,EAAA9tC,GAkD7B8tC,EAAA7gD,UAAA2hB,KAAA,SAAKw/B,GAEH,YAFG,IAAAA,MAAyC/E,EAAmBS,SAC/D9+C,KAAKgjD,WAAa,EACXhjD,KAAKogD,MAAQpgD,KAAKqjD,WAAWD,IAG9BN,EAAA7gD,UAAAohD,WAAR,SACED,EACAE,QADA,IAAAF,MAAyC/E,EAAmBS,cAC5D,IAAAwE,MAAsB1iC,IAAIiY,WAG1B,IADA,IAAIzzB,EAAOpF,KAAK8E,OAAOM,KAChBpF,KAAKiZ,IAAMjZ,KAAKwF,KAAK,CAC1BxF,KAAK+iD,SAAW/iD,KAAKiZ,IACrB,IAAIvY,EAAI0E,EAAKM,WAAW1F,KAAKiZ,KAC7B,OAAQvY,GACN,QACE,OACIV,KAAKiZ,IAAMjZ,KAAKwF,KACO,IAAzBJ,EAAKM,WAAW1F,KAAKiZ,MACpB,MAGL,QACA,OACA,QACA,QACA,UACIjZ,KAAKiZ,IACP,MAEF,QAEE,QADEjZ,KAAKiZ,IAELqqC,EAAiB,GAAKtjD,KAAKiZ,IAAMjZ,KAAKwF,KACb,IAAzBJ,EAAKM,WAAW1F,KAAKiZ,QAEnBjZ,KAAKiZ,IAELqqC,EAAiB,GAAKtjD,KAAKiZ,IAAMjZ,KAAKwF,KACb,IAAzBJ,EAAKM,WAAW1F,KAAKiZ,QAEnBjZ,KAAKiZ,IACAtS,EAAMm6C,2BAERn6C,EAAMi6C,oBAERj6C,EAAMg7C,YAEf,QACA,QACA,QACE,OAAOh7C,EAAM48C,cAEf,QAEE,QADEvjD,KAAKiZ,IAELqqC,EAAiB,GAAKtjD,KAAKiZ,IAAMjZ,KAAKwF,KACb,IAAzBJ,EAAKM,WAAW1F,KAAKiZ,QAEnBjZ,KAAKiZ,IACAtS,EAAM07C,gBAER17C,EAAMu6C,QAEf,QAEE,KADElhD,KAAKiZ,IACHqqC,EAAiB,GAAKtjD,KAAKiZ,IAAMjZ,KAAKwF,IAAK,CAC7C,GAA6B,IAAzBJ,EAAKM,WAAW1F,KAAKiZ,KAEvB,QADEjZ,KAAKiZ,IACAtS,EAAMk7C,oBAEf,GAA6B,IAAzBz8C,EAAKM,WAAW1F,KAAKiZ,KAEvB,QADEjZ,KAAKiZ,IACAtS,EAAM87C,iBAGjB,OAAO97C,EAAM66C,UAEf,QAEE,QADExhD,KAAKiZ,IACAtS,EAAM68C,UAEf,QAEE,QADExjD,KAAKiZ,IACAtS,EAAM88C,WAEf,QAEE,KADEzjD,KAAKiZ,IACHqqC,EAAiB,GAAKtjD,KAAKiZ,IAAMjZ,KAAKwF,IAAK,CAC7C,GAA6B,IAAzBJ,EAAKM,WAAW1F,KAAKiZ,KAEvB,QADEjZ,KAAKiZ,IACAtS,EAAMu7C,gBAEf,GAA6B,IAAzB98C,EAAKM,WAAW1F,KAAKiZ,KAEvB,QADEjZ,KAAKiZ,IAELqqC,EAAiB,GAAKtjD,KAAKiZ,IAAMjZ,KAAKwF,KACb,IAAzBJ,EAAKM,WAAW1F,KAAKiZ,QAEnBjZ,KAAKiZ,IACAtS,EAAMw7C,0BAERx7C,EAAMo6C,kBAGjB,OAAOp6C,EAAMq6C,SAEf,QAEE,KADEhhD,KAAKiZ,IACHqqC,EAAiB,GAAKtjD,KAAKiZ,IAAMjZ,KAAKwF,IAAK,CAC7C,GAA6B,IAAzBJ,EAAKM,WAAW1F,KAAKiZ,KAEvB,QADEjZ,KAAKiZ,IACAtS,EAAMw6C,UAEf,GAA6B,IAAzB/7C,EAAKM,WAAW1F,KAAKiZ,KAEvB,QADEjZ,KAAKiZ,IACAtS,EAAMq7C,YAGjB,OAAOr7C,EAAMsX,KAEf,QAEE,QADEje,KAAKiZ,IACAtS,EAAMyQ,MAEf,QAEE,KADEpX,KAAKiZ,IACHqqC,EAAiB,GAAKtjD,KAAKiZ,IAAMjZ,KAAKwF,IAAK,CAC7C,GAA6B,IAAzBJ,EAAKM,WAAW1F,KAAKiZ,KAEvB,QADEjZ,KAAKiZ,IACAtS,EAAMy6C,YAEf,GAA6B,IAAzBh8C,EAAKM,WAAW1F,KAAKiZ,KAEvB,QADEjZ,KAAKiZ,IACAtS,EAAMs7C,aAGjB,OAAOt7C,EAAMwX,MAEf,QAEE,KADEne,KAAKiZ,IACHqqC,EAAiB,GAAKtjD,KAAKiZ,IAAMjZ,KAAKwF,IAAK,CAC7C,GAAItC,EAAAwgD,eAAet+C,EAAKM,WAAW1F,KAAKiZ,MAEtC,QADEjZ,KAAKiZ,IACAtS,EAAMg9C,aAEf,GACEL,EAAiB,GAAKtjD,KAAKiZ,IAAM,EAAIjZ,KAAKwF,KACjB,IAAzBJ,EAAKM,WAAW1F,KAAKiZ,MACQ,IAA7B7T,EAAKM,WAAW1F,KAAKiZ,IAAM,GAG3B,OADAjZ,KAAKiZ,KAAO,EACLtS,EAAM25C,YAGjB,OAAO35C,EAAMi9C,IAEf,QACE,IAAIC,EAAkB7jD,KAAKiZ,IAE3B,KADEjZ,KAAKiZ,IACHqqC,EAAiB,GAAKtjD,KAAKiZ,IAAMjZ,KAAKwF,IAAK,CAC7C,GAA6B,IAAzBJ,EAAKM,WAAW1F,KAAKiZ,KAAwB,CAC/C,IAAI/O,EAAciS,EAAA1F,YAAYqtC,KAQ9B,IANE9jD,KAAKiZ,IAAM,EAAIjZ,KAAKwF,KACS,IAA7BJ,EAAKM,WAAW1F,KAAKiZ,IAAM,OAEzBjZ,KAAKiZ,IACP/O,EAAciS,EAAA1F,YAAYstC,UAEnB/jD,KAAKiZ,IAAMjZ,KAAKwF,KACvB,GAA6B,IAAzBJ,EAAKM,WAAW1F,KAAKiZ,KAA2B,GAChDjZ,KAAKiZ,IACP,MAGAjZ,KAAKmjD,WACPnjD,KAAKmjD,UACHj5C,EACA9E,EAAKQ,UAAUi+C,EAAiB7jD,KAAKiZ,KACrCjZ,KAAKoE,MAAMy/C,EAAiB7jD,KAAKiZ,MAGrC,MAEF,GAA6B,IAAzB7T,EAAKM,WAAW1F,KAAKiZ,KAA2B,CAElD,IADA,IAAI+qC,GAAS,IACJhkD,KAAKiZ,IAAMjZ,KAAKwF,KAEvB,GACG,KAFH9E,EAAI0E,EAAKM,WAAW1F,KAAKiZ,OAGvBjZ,KAAKiZ,IAAM,EAAIjZ,KAAKwF,KACS,IAA7BJ,EAAKM,WAAW1F,KAAKiZ,IAAM,GAC3B,CACAjZ,KAAKiZ,KAAO,EACZ+qC,GAAS,EACT,MAGCA,EAKMhkD,KAAKmjD,WACdnjD,KAAKmjD,UACHhnC,EAAA1F,YAAY6B,MACZlT,EAAKQ,UAAUi+C,EAAiB7jD,KAAKiZ,KACrCjZ,KAAKoE,MAAMy/C,EAAiB7jD,KAAKiZ,MARnCjZ,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfjkD,KAAKoE,MAAMpE,KAAKiZ,KAAM,MAS1B,MAEF,GAA6B,IAAzB7T,EAAKM,WAAW1F,KAAKiZ,KAEvB,QADEjZ,KAAKiZ,IACAtS,EAAMy7C,aAGjB,OAAOz7C,EAAMs6C,MAEf,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACE,OAAOjhD,KAAKkkD,cACRv9C,EAAMw9C,eACNx9C,EAAMg9C,aAEZ,QAEE,QADE3jD,KAAKiZ,IACAtS,EAAMy9C,MAEf,QAEE,QADEpkD,KAAKiZ,IACAtS,EAAM09C,UAEf,QAEE,KADErkD,KAAKiZ,IACHqqC,EAAiB,GAAKtjD,KAAKiZ,IAAMjZ,KAAKwF,IAAK,CAC7C,GAA6B,IAAzBJ,EAAKM,WAAW1F,KAAKiZ,KAEvB,QADEjZ,KAAKiZ,IAELqqC,EAAiB,GACjBtjD,KAAKiZ,IAAMjZ,KAAKwF,KACS,IAAzBJ,EAAKM,WAAW1F,KAAKiZ,QAEnBjZ,KAAKiZ,IACAtS,EAAM27C,0BAER37C,EAAM06C,kBAEf,GAA6B,IAAzBj8C,EAAKM,WAAW1F,KAAKiZ,KAEvB,QADEjZ,KAAKiZ,IACAtS,EAAM85C,gBAGjB,OAAO95C,EAAM45C,SAEf,QAEE,KADEvgD,KAAKiZ,IACHqqC,EAAiB,GAAKtjD,KAAKiZ,IAAMjZ,KAAKwF,IAAK,CAC7C,GAA6B,IAAzBJ,EAAKM,WAAW1F,KAAKiZ,KAEvB,QADEjZ,KAAKiZ,IAELqqC,EAAiB,GACjBtjD,KAAKiZ,IAAMjZ,KAAKwF,KACS,IAAzBJ,EAAKM,WAAW1F,KAAKiZ,QAEnBjZ,KAAKiZ,IACAtS,EAAMk6C,sBAERl6C,EAAMg6C,cAEf,GAA6B,IAAzBv7C,EAAKM,WAAW1F,KAAKiZ,KAEvB,QADEjZ,KAAKiZ,IACAtS,EAAM29C,mBAGjB,OAAO39C,EAAMo7C,OAEf,QAEE,KADE/hD,KAAKiZ,IACHqqC,EAAiB,GAAKtjD,KAAKiZ,IAAMjZ,KAAKwF,IAAK,CAC7C,GAA6B,IAAzBJ,EAAKM,WAAW1F,KAAKiZ,KAA8B,CAErD,KADEjZ,KAAKiZ,IACHqqC,EAAiB,GAAKtjD,KAAKiZ,IAAMjZ,KAAKwF,IAAK,CAC7C,GAA6B,IAAzBJ,EAAKM,WAAW1F,KAAKiZ,KAEvB,QADEjZ,KAAKiZ,IAELqqC,EAAiB,GAAKtjD,KAAKiZ,IAAMjZ,KAAKwF,KACb,IAAzBJ,EAAKM,WAAW1F,KAAKiZ,QAEnBjZ,KAAKiZ,IACAtS,EAAM67C,4CAER77C,EAAM46C,oCAEf,GAA6B,IAAzBn8C,EAAKM,WAAW1F,KAAKiZ,KAEvB,QADEjZ,KAAKiZ,IACAtS,EAAM47C,+BAGjB,OAAO57C,EAAM26C,wBAEf,GAA6B,IAAzBl8C,EAAKM,WAAW1F,KAAKiZ,KAEvB,QADEjZ,KAAKiZ,IACAtS,EAAM+5C,mBAGjB,OAAO/5C,EAAM65C,YAEf,QAEE,QADExgD,KAAKiZ,IACAtS,EAAM49C,SAEf,QAEE,QADEvkD,KAAKiZ,IACAtS,EAAM69C,YAEf,QAEE,QADExkD,KAAKiZ,IACAtS,EAAM89C,aAEf,QAEE,QADEzkD,KAAKiZ,IAELqqC,EAAiB,GAAKtjD,KAAKiZ,IAAMjZ,KAAKwF,KACb,IAAzBJ,EAAKM,WAAW1F,KAAKiZ,QAEnBjZ,KAAKiZ,IACAtS,EAAMg8C,cAERh8C,EAAM+6C,MAEf,SAEE,QADE1hD,KAAKiZ,IACAtS,EAAM+9C,UAEf,SAEE,KADE1kD,KAAKiZ,IACHqqC,EAAiB,GAAKtjD,KAAKiZ,IAAMjZ,KAAKwF,IAAK,CAC7C,GAA6B,KAAzBJ,EAAKM,WAAW1F,KAAKiZ,KAEvB,QADEjZ,KAAKiZ,IACAtS,EAAMm7C,QAEf,GAA6B,IAAzB18C,EAAKM,WAAW1F,KAAKiZ,KAEvB,QADEjZ,KAAKiZ,IACAtS,EAAM+7C,WAGjB,OAAO/7C,EAAM86C,IAEf,SAEE,QADEzhD,KAAKiZ,IACAtS,EAAMg+C,WAEf,SAEE,QADE3kD,KAAKiZ,IACAtS,EAAMi7C,MAEf,QAEE,QADE5hD,KAAKiZ,IACAtS,EAAMi+C,GAEf,QACE,GAAI1hD,EAAA2hD,kBAAkBnkD,GAAI,CACxB,GAAIwC,EAAA4hD,mBAAmBpkD,GAAI,CAEzB,IADA,IAAIqkD,EAAY/kD,KAAKiZ,MAEjBjZ,KAAKiZ,IAAMjZ,KAAKwF,KAClBtC,EAAA8hD,iBAAiBtkD,EAAI0E,EAAKM,WAAW1F,KAAKiZ,OAE1C,IAAK/V,EAAA4hD,mBAAmBpkD,GAEtB,OADAV,KAAKiZ,IAAM8rC,EACJp+C,EAAMU,WAGjB,IACI49C,EAAe3G,EADDl5C,EAAKQ,UAAUm/C,EAAW/kD,KAAKiZ,MAEjD,GACEgsC,GAAgBt+C,EAAM8X,SACtB2kC,IAAuB/E,EAAmB6G,SAExC9B,IAAuB/E,EAAmB8G,SAC1ChF,EAAsB8E,IAGxB,OAAOA,EAETjlD,KAAKiZ,IAAM8rC,EAEb,OAAOp+C,EAAMU,WACR,GAAInE,EAAAkiD,aAAa1kD,GAAI,GACxBV,KAAKiZ,IACP,MAOF,OALAjZ,KAAKuG,MACH0V,EAAAnY,eAAeuhD,kBACfrlD,KAAKoE,MAAMpE,KAAKiZ,IAAKjZ,KAAKiZ,IAAM,MAEhCjZ,KAAKiZ,IACAtS,EAAM8X,SAInB,OAAO9X,EAAM2+C,WAGfxC,EAAA7gD,UAAAsjD,KAAA,SACEC,EACApC,EACAqC,QAFA,IAAAD,OAAA,QACA,IAAApC,MAAyC/E,EAAmBS,cAC5D,IAAA2G,MAAyB7kC,IAAIiY,WAE7B,IAAIzzB,EAAOpF,KAAK8E,OAAOM,KACvB,GAAIpF,KAAKgjD,UAAY,EAAG,CACtB,IAAI+B,EAAY/kD,KAAKiZ,IACjBysC,EAAc1lD,KAAKogD,MACnBuF,EAAiB3lD,KAAK+iD,SAG1B,GAFA/iD,KAAKgjD,UAAYhjD,KAAKqjD,WAAWD,EAAoBqC,GACrDzlD,KAAKijD,aAAejjD,KAAK+iD,SACrByC,EAAgB,CAClBxlD,KAAKkjD,oBAAqB,EAC1B,IAAK,IAAIjqC,EAAM8rC,EAAWv/C,EAAMxF,KAAKijD,aAAchqC,EAAMzT,IAAOyT,EAC9D,GAAI/V,EAAAuC,YAAYL,EAAKM,WAAWuT,IAAO,CACrCjZ,KAAKkjD,oBAAqB,EAC1B,OAINljD,KAAKiZ,IAAM8rC,EACX/kD,KAAKogD,MAAQsF,EACb1lD,KAAK+iD,SAAW4C,EAElB,OAAO3lD,KAAKgjD,WAGdF,EAAA7gD,UAAA2jD,eAAA,WACE,OAAO5lD,KAAK6lD,KAAKl/C,EAAMU,WAAYg3C,EAAmB8G,SAGxDrC,EAAA7gD,UAAA6jD,mBAAA,WACE,OAAO9lD,KAAK6lD,KAAKl/C,EAAMU,WAAYg3C,EAAmB6G,SAGxDpC,EAAA7gD,UAAA4jD,KAAA,SAAKzF,EAAcgD,QAAA,IAAAA,MAAyC/E,EAAmBS,SAC7E,IAAIiG,EAAY/kD,KAAKiZ,IACjBysC,EAAc1lD,KAAKogD,MACnBuF,EAAiB3lD,KAAK+iD,SACtB0C,EAAoB7kC,IAAIiY,UAC5B,OAAQunB,GACN,KAAKz5C,EAAM65C,YACTiF,EAAoB,EAKxB,OADAzlD,KAAKogD,MAAQpgD,KAAKqjD,WAAWD,EAAoBqC,GAC7CzlD,KAAKogD,OAASA,GAChBpgD,KAAKgjD,WAAa,GACX,IAEPhjD,KAAKiZ,IAAM8rC,EACX/kD,KAAKogD,MAAQsF,EACb1lD,KAAK+iD,SAAW4C,GACT,IAIX7C,EAAA7gD,UAAA8jD,KAAA,WACE,IAAIC,EAUJ,OATIC,GACFD,EAAQC,EACRA,EAAgB,MAEhBD,EAAQ,IAAIE,EAEdF,EAAM/sC,IAAMjZ,KAAKiZ,IACjB+sC,EAAM5F,MAAQpgD,KAAKogD,MACnB4F,EAAMjD,SAAW/iD,KAAK+iD,SACfiD,GAGTlD,EAAA7gD,UAAAkkD,QAAA,SAAQH,GACNC,EAAgBD,GAGlBlD,EAAA7gD,UAAAmkD,MAAA,SAAMJ,GACJhmD,KAAKiZ,IAAM+sC,EAAM/sC,IACjBjZ,KAAKogD,MAAQ4F,EAAM5F,MACnBpgD,KAAK+iD,SAAWiD,EAAMjD,SACtB/iD,KAAKgjD,WAAa,GAGpBF,EAAA7gD,UAAAmC,MAAA,SAAMmB,EAAiBC,GAOrB,YAPI,IAAAD,OAAc,QAAG,IAAAC,OAAY,GAC7BD,EAAQ,GACVA,EAAQvF,KAAK+iD,SACbv9C,EAAMxF,KAAKiZ,KACFzT,EAAM,IACfA,EAAMD,GAED,IAAIqB,EAAM5G,KAAK8E,OAAQS,EAAOC,IAGvCs9C,EAAA7gD,UAAAokD,eAAA,WAGE,IAFA,IAAIjhD,EAAOpF,KAAK8E,OAAOM,KACnBG,EAAQvF,KAAKiZ,MAEbjZ,KAAKiZ,IAAMjZ,KAAKwF,KAClBtC,EAAA8hD,iBAAiB5/C,EAAKM,WAAW1F,KAAKiZ,QAExC,OAAO7T,EAAKQ,UAAUL,EAAOvF,KAAKiZ,MAGpC6pC,EAAA7gD,UAAAqwC,WAAA,WAKE,IAJA,IAAIltC,EAAOpF,KAAK8E,OAAOM,KACnBkhD,EAAQlhD,EAAKM,WAAW1F,KAAKiZ,OAC7B1T,EAAQvF,KAAKiZ,IACb8sB,EAAS,KACA,CACX,GAAI/lC,KAAKiZ,KAAOjZ,KAAKwF,IAAK,CACxBugC,GAAU3gC,EAAKQ,UAAUL,EAAOvF,KAAKiZ,KACrCjZ,KAAKuG,MACH0V,EAAAnY,eAAeyiD,4BACfvmD,KAAKoE,MAAMmB,EAAQ,EAAGvF,KAAKwF,MAE7B,MAEF,IAAI9E,EAAI0E,EAAKM,WAAW1F,KAAKiZ,KAC7B,GAAIvY,GAAK4lD,EAAO,CACdvgB,GAAU3gC,EAAKQ,UAAUL,EAAOvF,KAAKiZ,OACrC,MAEF,GAAK,IAADvY,EAAJ,CAMA,GAAIwC,EAAAuC,YAAY/E,GAAI,CAClBqlC,GAAU3gC,EAAKQ,UAAUL,EAAOvF,KAAKiZ,KACrCjZ,KAAKuG,MACH0V,EAAAnY,eAAeyiD,4BACfvmD,KAAKoE,MAAMmB,EAAQ,EAAGvF,KAAKiZ,MAE7B,QAEAjZ,KAAKiZ,SAbL8sB,GAAU3gC,EAAKQ,UAAUL,EAAOvF,KAAKiZ,KACrC8sB,GAAU/lC,KAAKwmD,qBACfjhD,EAAQvF,KAAKiZ,IAajB,OAAO8sB,GAGT+c,EAAA7gD,UAAAukD,mBAAA,WACE,KAAMxmD,KAAKiZ,KAAOjZ,KAAKwF,IAKrB,OAJAxF,KAAKuG,MACH0V,EAAAnY,eAAe2iD,uBACfzmD,KAAKoE,MAAMpE,KAAKwF,MAEX,GAGT,IAAIJ,EAAOpF,KAAK8E,OAAOM,KACnB1E,EAAI0E,EAAKM,WAAW1F,KAAKiZ,OAC7B,OAAQvY,GACN,QAAkB,MAAO,KACzB,QAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,QAA2B,MAAO,IAClC,QAA2B,MAAO,IAClC,SACE,OACEV,KAAKiZ,IAAMjZ,KAAKwF,KACS,KAAzBJ,EAAKM,WAAW1F,KAAKiZ,QAEnBjZ,KAAKiZ,IACAjZ,KAAK0mD,6BAEP1mD,KAAK2mD,oBAEd,QAEI3mD,KAAKiZ,IAAMjZ,KAAKwF,KACS,IAAzBJ,EAAKM,WAAW1F,KAAKiZ,QAEnBjZ,KAAKiZ,IAIX,QACA,UACA,UAAkC,MAAO,GACzC,QAAS,OAAOwhC,OAAOmM,aAAalmD,KAIxCoiD,EAAA7gD,UAAA4kD,kBAAA,WAIE,IAHA,IAAIzhD,EAAOpF,KAAK8E,OAAOM,KACnBG,EAAQvF,KAAKiZ,IACb6tC,GAAU,IACD,CACX,GAAI9mD,KAAKiZ,KAAOjZ,KAAKwF,IAAK,CACxBxF,KAAKuG,MACH0V,EAAAnY,eAAeijD,wCACf/mD,KAAKoE,MAAMmB,EAAOvF,KAAKwF,MAEzB,MAEF,GAA6B,IAAzBJ,EAAKM,WAAW1F,KAAKiZ,KAAzB,CAKA,IAAIvY,EAAI0E,EAAKM,WAAW1F,KAAKiZ,KAC7B,GAAK,IAADvY,IAAwBomD,EAAS,MACrC,GAAI5jD,EAAAuC,YAAY/E,GAAI,CAClBV,KAAKuG,MACH0V,EAAAnY,eAAeijD,wCACf/mD,KAAKoE,MAAMmB,EAAOvF,KAAKiZ,MAEzB,QAEAjZ,KAAKiZ,IACP6tC,GAAU,QAdN9mD,KAAKiZ,IACP6tC,GAAU,EAed,OAAO1hD,EAAKQ,UAAUL,EAAOvF,KAAKiZ,MAGpC6pC,EAAA7gD,UAAA+kD,gBAAA,WAIE,IAHA,IAAI5hD,EAAOpF,KAAK8E,OAAOM,KACnBG,EAAQvF,KAAKiZ,IACbrR,EAAQ,EACL5H,KAAKiZ,IAAMjZ,KAAKwF,KAAK,CAC1B,IAAI9E,EAAS0E,EAAKM,WAAW1F,KAAKiZ,KAClC,IAAK/V,EAAA8hD,iBAAiBtkD,GAAI,MAI1B,SAHEV,KAAKiZ,IAGCvY,GACN,SACEkH,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,SACEA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,SACEA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,QACEA,GAAS,GAWf,OANc,GAAVA,GACF5H,KAAKuG,MACH0V,EAAAnY,eAAemjD,iCACfjnD,KAAKoE,MAAMmB,EAAOvF,KAAKiZ,MAGpB7T,EAAKQ,UAAUL,EAAOvF,KAAKiZ,MAGpC6pC,EAAA7gD,UAAAiiD,YAAA,WACE,IAAI9+C,EAAOpF,KAAK8E,OAAOM,KACvB,GAA6B,IAAzBA,EAAKM,WAAW1F,KAAKiZ,MAAuBjZ,KAAKiZ,IAAM,EAAIjZ,KAAKwF,IAClE,OAAQJ,EAAKM,WAAW1F,KAAKiZ,IAAM,IACjC,QACA,SACA,QACA,QACA,QACA,SAAiB,OAAO,EAI5B,IADA,IAAIA,EAAMjZ,KAAKiZ,IACRA,EAAMjZ,KAAKwF,KAAK,CACrB,IAAI9E,EAAI0E,EAAKM,WAAWuT,GACxB,GAAK,IAADvY,GAAsB,IAADA,GAAoB,KAADA,EAC1C,OAAO,EAET,IAAKA,EAAC,IAAkBA,EAAC,KAAoB,IAADA,EAAiB,MAE7DuY,IAEF,OAAO,GAGT6pC,EAAA7gD,UAAAilD,YAAA,WACE,IAAI9hD,EAAOpF,KAAK8E,OAAOM,KACvB,GAA6B,IAAzBA,EAAKM,WAAW1F,KAAKiZ,MAAuBjZ,KAAKiZ,IAAM,EAAIjZ,KAAKwF,IAAK,CACvE,OAAQJ,EAAKM,WAAW1F,KAAKiZ,IAAM,IACjC,QACA,SAEE,OADAjZ,KAAKiZ,KAAO,EACLjZ,KAAKmnD,iBAEd,QACA,QAEE,OADAnnD,KAAKiZ,KAAO,EACLjZ,KAAKonD,oBAEd,QACA,SAEE,OADApnD,KAAKiZ,KAAO,EACLjZ,KAAKqnD,mBAGhB,GAAInkD,EAAAokD,aAAaliD,EAAKM,WAAW1F,KAAKiZ,IAAM,IAAK,CAC/C,IAAI1T,EAAQvF,KAAKiZ,MACfjZ,KAAKiZ,IACP,IAAI3X,EAAQtB,KAAKqnD,mBAKjB,OAJArnD,KAAKuG,MACH0V,EAAAnY,eAAeyjD,8CACfvnD,KAAKoE,MAAMmB,EAAOvF,KAAKiZ,MAElB3X,GAGX,OAAOtB,KAAKwnD,sBAGd1E,EAAA7gD,UAAAklD,eAAA,WAME,IALA,IAAI/hD,EAAOpF,KAAK8E,OAAOM,KACnBG,EAAQvF,KAAKiZ,IACb3X,EAAQmgB,QAAQ,EAAG,GACnBgmC,EAAShmC,QAAQ,GAAI,GACrBimC,EAASniD,EACNvF,KAAKiZ,IAAMjZ,KAAKwF,KAAK,CAC1B,IAAIyT,EAAMjZ,KAAKiZ,IACXvY,EAAI0E,EAAKM,WAAWuT,GACxB,GAAIvY,GAAC,IAAmBA,GAAC,GAEvBY,EAAQqmD,QACNC,QAAQtmD,EAAOmmD,GACfhmC,QAAQ/gB,EAAC,GAAgB,SAErB,GAAIA,GAAC,IAAkBA,GAAC,GAE9BY,EAAQqmD,QACNC,QAAQtmD,EAAOmmD,GACfhmC,QAAQ,GAAK/gB,EAAC,GAAe,SAE1B,GAAIA,GAAC,IAAkBA,GAAC,IAE7BY,EAAQqmD,QACNC,QAAQtmD,EAAOmmD,GACfhmC,QAAQ,GAAK/gB,EAAC,GAAe,QAE1B,IAAK,IAADA,EAWT,MAVIgnD,GAAUzuC,GACZjZ,KAAKuG,MACHmhD,GAAUniD,EACN0W,EAAAnY,eAAe+jD,wCACf5rC,EAAAnY,eAAegkD,0DACnB9nD,KAAKoE,MAAM6U,IAGfyuC,EAASzuC,EAAM,EAIjBjZ,KAAKiZ,IAAMA,EAAM,EAanB,OAXIjZ,KAAKiZ,KAAO1T,EACdvF,KAAKuG,MACH0V,EAAAnY,eAAeikD,2BACf/nD,KAAKoE,MAAMmB,IAEJmiD,GAAU1nD,KAAKiZ,KACxBjZ,KAAKuG,MACH0V,EAAAnY,eAAe+jD,wCACf7nD,KAAKoE,MAAMsjD,EAAS,IAGjBpmD,GAGTwhD,EAAA7gD,UAAAulD,mBAAA,WAME,IALA,IAAIpiD,EAAOpF,KAAK8E,OAAOM,KACnBG,EAAQvF,KAAKiZ,IACb3X,EAAQmgB,QAAQ,EAAG,GACnBumC,EAASvmC,QAAQ,GAAI,GACrBimC,EAASniD,EACNvF,KAAKiZ,IAAMjZ,KAAKwF,KAAK,CAC1B,IAAIyT,EAAMjZ,KAAKiZ,IACXvY,EAAI0E,EAAKM,WAAWuT,GACxB,GAAIvY,GAAC,IAAmBA,GAAC,GAEvBY,EAAQqmD,QACNC,QAAQtmD,EAAO0mD,GACfvmC,QAAQ/gB,EAAC,GAAgB,QAEtB,IAAK,IAADA,EAWT,MAVIgnD,GAAUzuC,GACZjZ,KAAKuG,MACHmhD,GAAUniD,EACN0W,EAAAnY,eAAe+jD,wCACf5rC,EAAAnY,eAAegkD,0DACnB9nD,KAAKoE,MAAM6U,IAGfyuC,EAASzuC,EAAM,EAIjBjZ,KAAKiZ,IAAMA,EAAM,EAanB,OAXIjZ,KAAKiZ,KAAO1T,EACdvF,KAAKuG,MACH0V,EAAAnY,eAAemkD,eACfjoD,KAAKoE,MAAMmB,IAEJmiD,GAAU1nD,KAAKiZ,KACxBjZ,KAAKuG,MACH0V,EAAAnY,eAAe+jD,wCACf7nD,KAAKoE,MAAMsjD,EAAS,IAGjBpmD,GAGTwhD,EAAA7gD,UAAAolD,iBAAA,WAME,IALA,IAAIjiD,EAAOpF,KAAK8E,OAAOM,KACnBG,EAAQvF,KAAKiZ,IACb3X,EAAQmgB,QAAQ,EAAG,GACnBymC,EAAQzmC,QAAQ,EAAG,GACnBimC,EAASniD,EACNvF,KAAKiZ,IAAMjZ,KAAKwF,KAAK,CAC1B,IAAIyT,EAAMjZ,KAAKiZ,IACXvY,EAAI0E,EAAKM,WAAWuT,GACxB,GAAIvY,GAAC,IAAmBA,GAAC,GAEvBY,EAAQqmD,QACNC,QAAQtmD,EAAO4mD,GACfzmC,QAAQ/gB,EAAC,GAAgB,QAEtB,IAAK,IAADA,EAWT,MAVIgnD,GAAUzuC,GACZjZ,KAAKuG,MACHmhD,GAAUniD,EACN0W,EAAAnY,eAAe+jD,wCACf5rC,EAAAnY,eAAegkD,0DACnB9nD,KAAKoE,MAAM6U,IAGfyuC,EAASzuC,EAAM,IAIfjZ,KAAKiZ,IAaT,OAXIjZ,KAAKiZ,KAAO1T,EACdvF,KAAKuG,MACH0V,EAAAnY,eAAeqkD,qBACfnoD,KAAKoE,MAAMmB,IAEJmiD,GAAU1nD,KAAKiZ,KACxBjZ,KAAKuG,MACH0V,EAAAnY,eAAe+jD,wCACf7nD,KAAKoE,MAAMsjD,EAAS,IAGjBpmD,GAGTwhD,EAAA7gD,UAAAmlD,kBAAA,WAOE,IANA,IAAIhiD,EAAOpF,KAAK8E,OAAOM,KACnBG,EAAQvF,KAAKiZ,IACb3X,EAAQmgB,QAAQ,EAAG,GACnB2mC,EAAQ3mC,QAAQ,EAAG,GACnB4mC,EAAQ5mC,QAAQ,EAAG,GACnBimC,EAASniD,EACNvF,KAAKiZ,IAAMjZ,KAAKwF,KAAK,CAC1B,IAAIyT,EAAMjZ,KAAKiZ,IACXvY,EAAI0E,EAAKM,WAAWuT,GACxB,GAAK,IAADvY,EAEFY,EAAQsmD,QACNtmD,EACA8mD,QAEG,GAAK,IAAD1nD,EAETY,EAAQqmD,QACNC,QAAQtmD,EAAO8mD,GACfC,OAEG,IAAK,IAAD3nD,EAWT,MAVIgnD,GAAUzuC,GACZjZ,KAAKuG,MACHmhD,GAAUniD,EACN0W,EAAAnY,eAAe+jD,wCACf5rC,EAAAnY,eAAegkD,0DACnB9nD,KAAKoE,MAAM6U,IAGfyuC,EAASzuC,EAAM,EAIjBjZ,KAAKiZ,IAAMA,EAAM,EAanB,OAXIjZ,KAAKiZ,KAAO1T,EACdvF,KAAKuG,MACH0V,EAAAnY,eAAewkD,sBACftoD,KAAKoE,MAAMmB,IAEJmiD,GAAU1nD,KAAKiZ,KACxBjZ,KAAKuG,MACH0V,EAAAnY,eAAe+jD,wCACf7nD,KAAKoE,MAAMsjD,EAAS,IAGjBpmD,GAGTwhD,EAAA7gD,UAAAsmD,UAAA,WAWE,OAAOvoD,KAAKwoD,oBAGd1F,EAAA7gD,UAAAumD,iBAAA,WAIE,IAFA,IAAIjjD,EAAQvF,KAAKiZ,IACb7T,EAAOpF,KAAK8E,OAAOM,KAChBpF,KAAKiZ,IAAMjZ,KAAKwF,KAAOtC,EAAAwgD,eAAet+C,EAAKM,WAAW1F,KAAKiZ,SAC9DjZ,KAAKiZ,IAET,GAAIjZ,KAAKiZ,IAAMjZ,KAAKwF,KAAgC,IAAzBJ,EAAKM,WAAW1F,KAAKiZ,KAE9C,MADEjZ,KAAKiZ,IACAjZ,KAAKiZ,IAAMjZ,KAAKwF,KAAOtC,EAAAwgD,eAAet+C,EAAKM,WAAW1F,KAAKiZ,SAC9DjZ,KAAKiZ,IAGX,GAAIjZ,KAAKiZ,IAAMjZ,KAAKwF,IAAK,CACvB,IAAI9E,EAAI0E,EAAKM,WAAW1F,KAAKiZ,KAC7B,GAAK,IAADvY,GAAoB,KAADA,EAUrB,MARIV,KAAKiZ,IAAMjZ,KAAKwF,MACS,IAAzBJ,EAAKM,WAAW1F,KAAKiZ,MACI,IAAzB7T,EAAKM,WAAW1F,KAAKiZ,OAEvB/V,EAAAwgD,eAAet+C,EAAKM,WAAW1F,KAAKiZ,IAAM,OAExCjZ,KAAKiZ,IAEFjZ,KAAKiZ,IAAMjZ,KAAKwF,KAAOtC,EAAAwgD,eAAet+C,EAAKM,WAAW1F,KAAKiZ,SAC9DjZ,KAAKiZ,IAIb,OAAOwvC,WAAWrjD,EAAKQ,UAAUL,EAAOvF,KAAKiZ,OAG/C6pC,EAAA7gD,UAAAymD,aAAA,WACE,MAAM,IAAIxjC,MAAM,oBAGlB49B,EAAA7gD,UAAA0kD,kBAAA,WAIE,IAHA,IAAIgC,EAAS,EACTrnD,EAAQ,EACR8D,EAAOpF,KAAK8E,OAAOM,KAChBpF,KAAKiZ,IAAMjZ,KAAKwF,KAAK,CAC1B,IAAI9E,EAAI0E,EAAKM,WAAW1F,KAAKiZ,OAC7B,GAAIvY,GAAC,IAAmBA,GAAC,GACvBY,EAAgB,GAARA,EAAaZ,EAAC,QACjB,GAAIA,GAAC,IAAkBA,GAAC,GAC7BY,EAAgB,GAARA,EAAa,GAAKZ,EAAC,OACtB,MAAIA,GAAC,IAAkBA,GAAC,KAO7B,OAJAV,KAAKuG,MACH0V,EAAAnY,eAAeikD,2BACf/nD,KAAKoE,MAAMpE,KAAKiZ,IAAM,EAAGjZ,KAAKiZ,MAEzB,GANP3X,EAAgB,GAARA,EAAa,GAAKZ,EAAC,GAQ7B,GAAgB,KAAVioD,EAAa,MAErB,OAAIA,GACF3oD,KAAKuG,MACH0V,EAAAnY,eAAe2iD,uBACfzmD,KAAKoE,MAAMpE,KAAKiZ,MAEX,IAEFwhC,OAAOmM,aAAatlD,IAGrBwhD,EAAA7gD,UAAAykD,0BAAR,WACE,IAAInhD,EAAQvF,KAAKiZ,IACb3X,EAAQtB,KAAKmnD,iBACbyB,EAAU7Z,QAAQztC,GAClBunD,GAAU,EAEdplD,QAAQurC,SAAS1tC,IACbsnD,EAAU,UACZ5oD,KAAKuG,MACH0V,EAAAnY,eAAeglD,4EACf9oD,KAAKoE,MAAMmB,EAAOvF,KAAKiZ,MAEzB4vC,GAAU,GAGZ,IAAIzjD,EAAOpF,KAAK8E,OAAOM,KAiBvB,OAhBIpF,KAAKiZ,KAAOjZ,KAAKwF,KACnBxF,KAAKuG,MACH0V,EAAAnY,eAAe2iD,uBACfzmD,KAAKoE,MAAMmB,EAAOvF,KAAKwF,MAEzBqjD,GAAU,GACwB,KAAzBzjD,EAAKM,WAAW1F,KAAKiZ,OAC5BjZ,KAAKiZ,KAEPjZ,KAAKuG,MACH0V,EAAAnY,eAAeilD,qCACf/oD,KAAKoE,MAAMmB,EAAOvF,KAAKiZ,MAEzB4vC,GAAU,GAGRA,EAAgB,GACbD,EAAU,MACbnO,OAAOmM,aAAagC,GACpBnO,OAAOmM,aAC2B,QAA/BgC,EAAU,OAAS,KAAO,IAC1BA,EAAU,OAAS,KAAY,QAIxC9F,EAAA7gD,UAAA+mD,OAAA,aAEFlG,EA7kCA,CAA+B7mC,EAAAhW,mBAAlBvG,EAAAojD,YAglCb,IAAAoD,EAAA,WAOA,OAPA,gBAAaxmD,EAAAwmD,QAUb,IAAID,EAA8B,o6BCxjDlC,IAyDYgD,EAzDZhtC,EAAA9b,EAAA,GAKAg7C,EAAAh7C,EAAA,GAmBAgc,EAAAhc,EAAA,GAoBA+b,EAAA/b,EAAA,GAMAsG,EAAAtG,EAAA,IAOA,SAAY8oD,GAEVA,IAAA,mBAEAA,IAAA,qBAJF,CAAYA,EAAAvpD,EAAAupD,aAAAvpD,EAAAupD,gBAQZ,IAAAhpC,EAAA,SAAAjL,GAWE,SAAAiL,EAAY4L,GAAZ,IAAA3W,EACEF,EAAAxU,KAAAR,KAAM6rB,EAAQ3lB,cAAYlG,YAN5BkV,EAAAg0C,sBAA2C,KAE3Ch0C,EAAAi0C,yBAA+C,KAK7Cj0C,EAAK2W,QAAUA,IA+jCnB,OA5kC8B5W,EAAAgL,EAAAjL,GAiB5BiL,EAAAhe,UAAAmnD,YAAA,SACEp/C,EACAgjB,EACAq8B,GAIA,QALA,IAAAr8B,MAAA,WACA,IAAAq8B,MAAaJ,EAAWK,QAIpBt/C,EAAKjD,MAAQoV,EAAAtV,SAAS6O,UAAW,CACnC,IAAI3C,EAAY/S,KAAKupD,iBAAgCv/C,EAAMgjB,EAAyBq8B,GACpF,OAAKt2C,EACE/I,EAAK5B,WAAa2K,EAAU1K,KAAK6zC,aAAenpC,EAAU1K,KAD1C,KAKzB5E,OAAOuG,EAAKjD,MAAQoV,EAAAtV,SAASuO,MAC7B,IAAIo0C,EAAqBx/C,EACrBmd,EAAaqiC,EAAS5oD,KAAKwE,KAC3B6gB,EAAakB,EACb9D,EAAYmmC,EAASplD,MAAMU,OAAOoM,aAAezK,EAAAnE,eAAiB6kB,EAIhEnI,EAAiBhf,KAAK6rB,QAAQ7M,eAC9B7S,OAAO,EACX,IACGA,EAAU6S,EAAe9d,IAAImiB,MAC7BlX,EAAU6S,EAAe9d,IAAI+kB,IAE9B,OAAQ9Z,EAAQpF,MACd,KAAKo0C,EAAAz8B,YAAYqN,KACf,OAA+B,OAA3By9B,EAASrhD,eAA0BqhD,EAASrhD,cAAc7C,QACxD+jD,GAAcJ,EAAWK,QAC3BtpD,KAAKuG,MACH0V,EAAAnY,eAAe2lD,sBACfz/C,EAAK5F,MAAO+H,EAAQoW,cAGjB,MAEFrG,EAAAuE,KAAKG,IAEd,KAAKu6B,EAAAz8B,YAAYiG,gBACf,IAAIS,EAAWplB,KAAK0pD,8BACFv9C,EAChBq9C,EAASrhD,cACT6kB,EACAhjB,GAEF,OAAKob,EACEpb,EAAK5B,WAAagd,EAAS/c,KAAK6zC,aAAe92B,EAAS/c,KADzC,KAS5B,IAAIgM,EAAQrU,KAAK6rB,QAAQ1M,YAAYje,IAAIimB,GACzC,GAAI9S,EAAO,OAAOrU,KAAKopD,YAAY/0C,EAAMhM,KAAM2kB,EAAyBq8B,GAKxE,IAAIM,EAAoBH,EAASrhD,cACjC,GAAIwhD,EAAmB,CAGrB,IAFA,IAAIC,EAAmBD,EAAkBrkD,OACrC0gC,EAAa,IAAI7/B,MAAYyjD,GACxBvpD,EAAI,EAAGA,EAAIupD,IAAoBvpD,EAAG,CACzC,IAAIwpD,EAAY7pD,KAAKopD,YACnBO,EAAkBtpD,GAClB2sB,EACAq8B,GAEF,IAAKQ,EAAW,OAAO,KACvB7jB,EAAW3lC,GAAKwpD,EAElB,GAAID,EAAkB,CACpB,IAAIE,EAAc5tC,EAAA8gC,cAAchX,GAC5B8jB,EAAYxkD,SACd+d,GAAa,IAAMymC,EAAc,IACjC7jC,GAAc,IAAM6jC,EAAc,UAE/B,GAAI98B,EAAyB,CAClC,IAAI+8B,EAAkB/8B,EAAwB9rB,IAAI+kB,GAClD,GAAI8jC,EAAiB,OAAOA,GAOhC,IAAI7qC,EAAclf,KAAK6rB,QAAQ3M,YAC3B7W,OAAI,EACR,OACGA,EAAO6W,EAAYhe,IAAImiB,MACvBhb,EAAO6W,EAAYhe,IAAI+kB,IAEjB5d,GAIPghD,GAAcJ,EAAWK,QAC3BtpD,KAAKuG,MACH0V,EAAAnY,eAAeugB,mBACfmlC,EAAS5oD,KAAKwD,MAAO6hB,GAGlB,OAIThG,EAAAhe,UAAAsnD,iBAAA,SACEv/C,EACAgjB,EACAq8B,QADA,IAAAr8B,MAAA,WACA,IAAAq8B,MAAyBJ,EAAWK,QAEpC,IAAIjgD,EAAmBW,EAAKX,iBACxB+kB,EAAwB,KAC5B,GAAI/kB,KACF+kB,EAAWpuB,KAAKopD,YAAY//C,EAAkB2jB,EAAyBq8B,IACxD,OAAO,KAQxB,IANA,IAAIW,EAAqBhgD,EAAKb,WAC1Bw0C,EAAgBqM,EAAmB1kD,OACnCwgB,EAAiB,IAAI3f,MAAYw3C,GACjCR,EAAiB,IAAIh3C,MAAcw3C,GACnCP,EAAqB,EACrBC,GAAU,EACLh9C,EAAI,EAAGA,EAAIs9C,IAAiBt9C,EAAG,CACtC,IAAI4pD,EAAoBD,EAAmB3pD,GAC3C,OAAQ4pD,EAAkBhhD,eACxB,KAAKkT,EAAA7G,cAAcwpC,QACjB1B,EAAqB/8C,EAAI,EACzB,MAEF,KAAK8b,EAAA7G,cAAc40C,KACjBzmD,OAAOpD,GAAKs9C,GACZN,GAAU,EAId,IAAI1uB,EAAgB3uB,KAAKopD,YACvB3lD,OAAOwmD,EAAkB5hD,MACzB2kB,EACAq8B,GAEF,IAAK16B,EAAe,OAAO,KAC3B7I,EAAezlB,GAAKsuB,EACpBwuB,EAAe98C,GAAK4pD,EAAkBrpD,KAAKwE,KAE7C,IACIgE,EADA+gD,EAAiBngD,EAAKZ,WAE1B,GAAI+gD,GAEF,KADA/gD,EAAapJ,KAAKopD,YAAYe,EAAgBn9B,EAAyBq8B,IACtD,OAAO,UAExBjgD,EAAa8S,EAAAuE,KAAKc,KAEpB,IAAIxO,EAAY,IAAImJ,EAAA+gC,UAAUn3B,EAAgB1c,EAAYglB,GAI1D,OAHArb,EAAUoqC,eAAiBA,EAC3BpqC,EAAUqqC,mBAAqBA,EAC/BrqC,EAAUsqC,QAAUA,EACbtqC,GAITkN,EAAAhe,UAAAmoD,qBAAA,SACEx6C,EACA+5C,EACA38B,EACAq9B,EACAhB,QAFA,IAAAr8B,MAAA,WACA,IAAAq9B,MAAA,WACA,IAAAhB,MAAyBJ,EAAWK,QAEpC,IAAIgB,EAAiB16C,EAAetK,OAChCilD,EAAgBZ,EAAoBA,EAAkBrkD,OAAS,EACnE,GAAIglD,GAAkBC,EAgBpB,OAfIA,EACFvqD,KAAKuG,MACH0V,EAAAnY,eAAe0mD,oCACfruC,EAAAvV,MAAMd,KACS6jD,EAAmB,GAAGvlD,MACtBulD,EAAmBY,EAAgB,GAAGnmD,OAErDkmD,EAAezlD,SAAS,IAAK0lD,EAAc1lD,SAAS,KAE7CwlD,GACTrqD,KAAKuG,MACH0V,EAAAnY,eAAe0mD,oCACfH,EAAsBjmD,MAAMqmD,MAAOH,EAAezlD,SAAS,IAAK,KAG7D,KAGT,IADA,IAAIsD,EAAgB,IAAIhC,MAAYmkD,GAC3BjqD,EAAI,EAAGA,EAAIiqD,IAAkBjqD,EAAG,CACvC,IAAIgI,EAAOrI,KAAKopD,YACDO,EAAmBtpD,GAChC2sB,EACAq8B,GAEF,IAAKhhD,EAAM,OAAO,KAElBF,EAAc9H,GAAKgI,EAErB,OAAOF,GAIT8X,EAAAhe,UAAAyiB,kBAAA,SACE/U,EACA+6C,EACArB,QAAA,IAAAA,MAAyBJ,EAAWK,QAEpC,IACIn9C,EADAvL,EAAO+O,EAAWvK,KAGtB,GAAIslD,EAAS,CAEX,OAAQA,EAAQ3jD,MACd,KAAKo0C,EAAAz8B,YAAYnH,SAEf,GADApL,EAAqBu+C,EAAS57B,KAAKiE,eAAenyB,GAIhD,OAFAZ,KAAKkpD,sBAAwB,KAC7BlpD,KAAKmpD,yBAA2B,KACzBh9C,EAETu+C,EAAqBA,EAASzoD,UAAU0F,OACxC,MAEF,KAAKwzC,EAAAz8B,YAAYvH,MACfuzC,EAAkBA,EAASzoD,UAAU0F,OAMzC,KAAO+iD,GAAS,CACd,IAAI56C,EAAU46C,EAAQ56C,QACtB,GAAIA,IACE3D,EAAU2D,EAAQ5O,IAAIN,IAGxB,OAFAZ,KAAKkpD,sBAAwB,KAC7BlpD,KAAKmpD,yBAA2B,KACzBh9C,EAGXu+C,EAAUA,EAAQ/iD,QAKtB,IAAIqX,EAAiBhf,KAAK6rB,QAAQ7M,eAClC,OAAI7S,EAAU6S,EAAe9d,IAAIyO,EAAWvL,MAAMU,OAAOoM,aAAezK,EAAAnE,eAAiB1B,KACvFZ,KAAKkpD,sBAAwB,KAC7BlpD,KAAKmpD,yBAA2B,KACzBh9C,IAILA,EAAU6S,EAAe9d,IAAIN,KAC/BZ,KAAKkpD,sBAAwB,KAC7BlpD,KAAKmpD,yBAA2B,KACzBh9C,IAGLk9C,GAAcJ,EAAWK,QAC3BtpD,KAAKuG,MACH0V,EAAAnY,eAAeugB,mBACf1U,EAAWvL,MAAOxD,GAGf,OAITqf,EAAAhe,UAAA0oD,sBAAA,SACEC,EACAC,EACAxB,QAAA,IAAAA,MAAyBJ,EAAWK,QAGpC,IAAIwB,EAAmBF,EAAe7/C,WAClComB,EAASnxB,KAAK+qD,kBAAkBD,EAAkBD,EAAoBxB,GAC1E,IAAKl4B,EAAQ,OAAO,KAGpB,IAAI65B,EAAeJ,EAAe5oD,SAASoD,KAG3C,OAAQ+rB,EAAOpqB,MACb,KAAKo0C,EAAAz8B,YAAY5I,OACjB,KAAKqlC,EAAAz8B,YAAYiO,MACjB,KAAKwuB,EAAAz8B,YAAY6R,MACf,IAAIloB,EAA6B8oB,EAAQ9oB,KAGzC,GAFA5E,OAAO4E,GAAQ6T,EAAAuE,KAAKc,QAChBi6B,EAAiBnzC,EAAKmzC,gBAMxB,OAJAx7C,KAAKuG,MACH0V,EAAAnY,eAAemnD,oCACfL,EAAe5oD,SAASoC,MAAO4mD,EAAoC75B,EAAQ9oB,KAAKxD,YAE3E,KAETssB,EAASqqB,EACT,MAEF,KAAKL,EAAAz8B,YAAYmL,SACf,IAOI2xB,EAPA36C,EAASb,KAAK6lB,gBAChBpiB,OAAkB0tB,EAAQrH,iBAC1B,KACA,KACAu/B,GAEF,IAAKxoD,EAAQ,OAAO,KAEpB,KADI26C,EAAiB36C,EAAOkS,UAAU3J,WAAWoyC,gBAM/C,OAJAx7C,KAAKuG,MACH0V,EAAAnY,eAAemnD,oCACfL,EAAe5oD,SAASoC,MAAO4mD,EAAcnqD,EAAOkS,UAAU3J,WAAWvE,YAEpE,KAETssB,EAASqqB,EACT,MAEF,KAAKL,EAAAz8B,YAAYvH,MACf,IAAI9K,EAAoBrM,KAAKmpD,yBAC7B,GAAI98C,EAAmB,CACrB,IAAI6+C,EAAqB/5B,EAAQE,eAAe8pB,EAAAn/B,aAAaW,aAC7D,IAAKuuC,EAKH,OAJAlrD,KAAKuG,MACH0V,EAAAnY,eAAeqnD,qCACf9+C,EAAkBjI,MAAe+sB,EAAQ5O,cAEpC,KAET,IAAInZ,EAAa8hD,EAAWn4C,UAAU3J,WACtC,KAAM+nB,EAAS/nB,EAAWoyC,gBAKxB,OAJAx7C,KAAKuG,MACH0V,EAAAnY,eAAemnD,oCACfL,EAAe5oD,SAASoC,MAAO4mD,EAAc5hD,EAAWvE,YAEnD,MAQf,OAAQssB,EAAOpqB,MACb,KAAKo0C,EAAAz8B,YAAYiG,gBACjB,KAAKw2B,EAAAz8B,YAAYvH,MACf,OAAG,CACD,IACI8C,OAAM,EACV,IAFInK,EAAUqhB,EAAOrhB,WAELmK,EAASnK,EAAQ5O,IAAI8pD,IAGnC,OAFAhrD,KAAKkpD,sBAAwB4B,EAC7B9qD,KAAKmpD,yBAA2B,KACzBlvC,EAGT,GAAIkX,EAAOpqB,MAAQo0C,EAAAz8B,YAAYiG,gBAAiB,CAC9C,IAAqBwM,EAAQvM,cAG3B,MAFAuM,EAA0CA,EAAQvM,kBAK/C,IAAIuM,EAAOpqB,MAAQo0C,EAAAz8B,YAAYvH,MAOpC,MANA,IAAYga,EAAQT,KAGlB,MAFAS,EAAwBA,EAAQT,MAQtC,MAEF,QACE,IAAI5gB,EACJ,GADIA,EAAUqhB,EAAOrhB,QAGnB,GADImK,EAASnK,EAAQ5O,IAAI8pD,GAIvB,OAFAhrD,KAAKkpD,sBAAwB4B,EAC7B9qD,KAAKmpD,yBAA2B,KACzBlvC,EAUf,OAJAja,KAAKuG,MACH0V,EAAAnY,eAAemnD,oCACfL,EAAe5oD,SAASoC,MAAO4mD,EAAc75B,EAAO5O,cAE/C,MAGTtC,EAAAhe,UAAAmpD,qBAAA,SACEC,EACAR,EACAxB,QAAA,IAAAA,MAAyBJ,EAAWK,QAEpC,IAAIwB,EAAmBO,EAActgD,WACjComB,EAASnxB,KAAK+qD,kBAAkBD,EAAkBD,EAAoBxB,GAC1E,IAAKl4B,EAAQ,OAAO,KACpB,OAAQA,EAAOpqB,MACb,KAAKo0C,EAAAz8B,YAAY5I,OACjB,KAAKqlC,EAAAz8B,YAAYiO,MACjB,KAAKwuB,EAAAz8B,YAAY6R,MAEf,GAAIY,EAD6BA,EAAQ9oB,KACvBmzC,eAGhB,OAFAx7C,KAAKkpD,sBAAwB4B,EAC7B9qD,KAAKmpD,yBAA2BkC,EAAch/C,kBACvC8kB,EAET,MAEF,KAAKgqB,EAAAz8B,YAAYvH,MACf,IAAI+zC,EAAqB/5B,EAAQE,eAAe8pB,EAAAn/B,aAAaW,aAC7D,IAAKuuC,EAOH,OANI7B,GAAcJ,EAAWK,QAC3BtpD,KAAKuG,MACH0V,EAAAnY,eAAeqnD,qCACfE,EAAcjnD,MAAe+sB,EAAQ5O,cAGlC,KAGT,GAAI4O,EADa+5B,EAAWn4C,UAAU3J,WACdoyC,eAGtB,OAFAx7C,KAAKkpD,sBAAwB4B,EAC7B9qD,KAAKmpD,yBAA2BkC,EAAch/C,kBACvC8kB,EAWb,OANIk4B,GAAcJ,EAAWK,QAC3BtpD,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfujC,EAAiB1mD,OAGd,MAGT6b,EAAAhe,UAAA8oD,kBAAA,SACEhgD,EACA8/C,EACAxB,GAEA,SAFA,IAAAA,MAAyBJ,EAAWK,QAE7Bv+C,EAAWhE,MAAQoV,EAAAtV,SAAS+Q,eACjC7M,EAAuCA,EAAYA,WAErD,OAAQA,EAAWhE,MACjB,KAAKoV,EAAAtV,SAASoQ,UACZ,IAAI5O,EAAOrI,KAAKopD,YACQr+C,EAAYC,OAClC6/C,EAAmB/7B,KAAK9B,wBACxBq8B,GAEF,GAAIhhD,EAEF,GADI4zC,EAAY5zC,EAAKmzC,eAInB,OAFAx7C,KAAKkpD,sBAAwB,KAC7BlpD,KAAKmpD,yBAA2B,KACzBlN,EAGX,OAAO,KAET,KAAK9/B,EAAAtV,SAASqQ,OACZ,MAAM,IAAIgO,MAAM,mBAElB,KAAK/I,EAAAtV,SAASoR,KACZ,GAAI4yC,EAAmB/7B,KAAKhnB,GAAE,MAE5B,GADIwjD,EAAgBT,EAAmB/7B,KAAKiE,eAAe,QAIzD,OAFA/yB,KAAKkpD,sBAAwB,KAC7BlpD,KAAKmpD,yBAA2B,KACzBmC,EAIX,OADI3jD,EAASkjD,EAAmBljD,SAE9B3H,KAAKkpD,sBAAwB,KAC7BlpD,KAAKmpD,yBAA2B,KACzBxhD,IAEL0hD,GAAcJ,EAAWK,QAC3BtpD,KAAKuG,MACH0V,EAAAnY,eAAeynD,+CACfxgD,EAAW3G,OAGR,MAET,KAAK+X,EAAAtV,SAASmR,MAEV,IAAIszC,EAOF3jD,EARJ,GAAIkjD,EAAmB/7B,KAAKhnB,GAAE,MAE5B,GADIwjD,EAAgBT,EAAmB/7B,KAAKiE,eAAe,SAIzD,OAFA/yB,KAAKkpD,sBAAwB,KAC7BlpD,KAAKmpD,yBAA2B,KACzBmC,EAIX,OADI3jD,EAASkjD,EAAmBljD,SAClBA,EAAOZ,MAAQo0C,EAAAz8B,YAAYvH,QAAUxP,EAAiBA,EAAQ+oB,OAC1E1wB,KAAKkpD,sBAAwB,KAC7BlpD,KAAKmpD,yBAA2B,KACzBxhD,IAEL0hD,GAAcJ,EAAWK,QAC3BtpD,KAAKuG,MACH0V,EAAAnY,eAAe0nD,iDACfzgD,EAAW3G,OAGR,MAET,KAAK+X,EAAAtV,SAASQ,WACZ,OAAOrH,KAAK0kB,kBAAwC3Z,EAAY8/C,EAAoBxB,GAEtF,KAAKltC,EAAAtV,SAASG,QACZ,OAA4B+D,EAAY+L,aACtC,KAAKqF,EAAAvF,YAAYmB,OAGf,OAFA/X,KAAKkpD,sBAAwBn+C,EAC7B/K,KAAKmpD,yBAA2B,KACzBnpD,KAAK6rB,QAAQtM,eAIxB,MAEF,KAAKpD,EAAAtV,SAASW,eACZ,OAAOxH,KAAK2qD,sBACgB5/C,EAC1B8/C,EACAxB,GAGJ,KAAKltC,EAAAtV,SAASU,cACZ,OAAOvH,KAAKorD,qBACergD,EACzB8/C,EACAxB,GAGJ,KAAKltC,EAAAtV,SAASS,KACZ,IAAIwjD,EAAoC//C,EAAYA,WAChDomB,EAASnxB,KAAK+qD,kBAAkBD,EAAkBD,EAAoBxB,GAC1E,IAAKl4B,EAAQ,OAAO,KACpB,GAAIA,EAAOpqB,MAAQo0C,EAAAz8B,YAAY8G,mBAAoB,CACjD,IAAIJ,EAAWplB,KAAKyrD,iCACCt6B,EACFpmB,EAAY5C,cAC7B0iD,EAAmB/7B,KAAK9B,wBACxBjiB,EACAs+C,GAEF,IAAKjkC,EAAU,OAAO,KACtB,IACI62B,EADA7yC,EAAagc,EAASrS,UAAU3J,WAEpC,GADI6yC,EAAY7yC,EAAWoyC,eAIzB,OAAOS,EAEP,IAAIlpC,EAAY3J,EAAW2c,mBAC3B,GAAIhT,EAAW,CACb,IAAI24C,EAAiB34C,EAAUmqC,qBAO/B,OANKwO,IACHA,EAAiB,IAAIvQ,EAAAlrB,eAAejwB,KAAK6rB,QAAS9Y,GAClDA,EAAUmqC,qBAAuBwO,GAI5BA,EASX,OANIrC,GAAcJ,EAAWK,QAC3BtpD,KAAKuG,MACH0V,EAAAnY,eAAe6nD,uGACfb,EAAiB1mD,MAAO+sB,EAAO5O,cAG5B,MAWb,OANI8mC,GAAcJ,EAAWK,QAC3BtpD,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAGR,MAIT6b,EAAAhe,UAAA4jB,gBAAA,SACE5jB,EACAkG,EACA6kB,EACAq8B,gBADA,IAAAr8B,MAAA,WACA,IAAAq8B,MAAyBJ,EAAWK,QAEpC,IAAIQ,EAAc3hD,EAAgB+T,EAAA8gC,cAAc70C,GAAiB,GAC7Did,EAAWnjB,EAAU4qB,UAAU3rB,IAAI4oD,GACvC,GAAI1kC,EAAU,OAAOA,EAErB,IAAIzZ,EAAc1J,EAAU0J,YACxBigD,EAAa3pD,EAAU6F,GAAGrB,EAAApE,YAAY6rB,UACtC/F,EAAiBlmB,EAAUkmB,eAG3BkG,EAAyBrB,EAE7B,GADAA,EAA0B,IAAInO,IAC1BwP,MACF,IAA2C,IAAAC,EAAA5K,EAAA2K,GAAsBE,EAAAD,EAAA1K,QAAA2K,EAAA1K,KAAA0K,EAAAD,EAAA1K,OAAE,CAA1D,IAAA4K,EAAAzK,EAAAwK,EAAAjtB,MAAA,GAACmtB,EAAAD,EAAA,GAAeE,EAAAF,EAAA,GACvBxB,EAAwB/kB,IACtBwmB,EACAC,qGAMN,IAAI5B,EAAqB7qB,EAAU6qB,mBACnC,GAAIA,EAAoB,CACtBrpB,OAAOxB,EAAU6F,GAAGrB,EAAApE,YAAY6rB,WAChC,IACI29B,EADmBpoD,OAAO0kB,GAAgBxc,YACHiE,eACvCk8C,EAAyBD,EAAoBvmD,OACjD7B,OAAOqoD,GAA0Bh/B,EAAmBxnB,QACpD,IAAK,IAAIjF,EAAI,EAAGA,EAAIyrD,IAA0BzrD,EAC5C2sB,EAAwB/kB,IACtB4jD,EAAoBxrD,GAAGO,KAAKwE,KAC5B0nB,EAAmBzsB,SAIvBoD,QAAQqpB,GAIV,IAEIi/B,EAFAC,EAAgBrgD,EAAYoH,UAC5Bk5C,EAAyBtgD,EAAYiE,eAEzC,GAAIzH,IAAkB4jD,EAA2B5jD,EAAc7C,QAAS,CACtE7B,OAAOwoD,GAA0BF,GAA4BE,EAAuB3mD,QACpF,IAASjF,EAAI,EAAGA,EAAI0rD,IAA4B1rD,EAC9C2sB,EAAwB/kB,IACAgkD,EAAwB5rD,GAAGO,KAAKwE,KACtD+C,EAAc9H,SAIlBoD,QAAQwoD,GAA2D,GAAjCA,EAAuB3mD,QAI3D,IAAI4mD,EAA8B,KAC9B99B,EAAwB,KAC5B,GAAIw9B,EAAY,CAOd,KANAM,EAAgBlsD,KAAKqlB,aACnB5hB,OAAO0kB,GACP2E,EACAE,EACAq8B,IAEkB,OAAO,KAC3Bj7B,EAAW89B,EAAc7jD,KACzB2kB,EAAwB/kB,IAAI,OAAQmmB,GAItC,IAiBIhlB,EAjBA+iD,EAAsBH,EAAc7iD,WACpCijD,EAA0BD,EAAoB7mD,OAC9CwgB,EAAiB,IAAI3f,MAAYimD,GACjCjP,EAAiB,IAAIh3C,MAAcimD,GACnChP,EAAqB,EACzB,IAAS/8C,EAAI,EAAGA,EAAI+rD,IAA2B/rD,EAAG,CAChD,IAAIgsD,EAAuBF,EAAoB9rD,GAC3CgsD,EAAqBpjD,eAAiBkT,EAAA7G,cAAcwpC,UACtD1B,EAAqB/8C,EAAI,GAE3B,IAAImpD,EAAW/lD,OAAO4oD,EAAqBhkD,MACvCsmB,EAAgB3uB,KAAKopD,YAAYI,EAAUx8B,EAAyBq8B,GACxE,IAAK16B,EAAe,OAAO,KAC3B7I,EAAezlB,GAAKsuB,EACpBwuB,EAAe98C,GAAKgsD,EAAqBzrD,KAAKwE,KAIhD,GAAInD,EAAU6F,GAAGrB,EAAApE,YAAY2lB,KAC3B5e,EAAa8S,EAAAuE,KAAKc,UACb,GAAItf,EAAU6F,GAAGrB,EAAApE,YAAYgV,aAClCjO,EAAa3F,OAAOyoD,GAAe7jD,SAC9B,CACDmhD,EAAW/lD,OAAOuoD,EAAc5iD,YAApC,IACIf,EAAOrI,KAAKopD,YAAYI,EAAUx8B,EAAyBq8B,GAC/D,IAAKhhD,EAAM,OAAO,KAClBe,EAAaf,EAGf,IAAI0K,EAAY,IAAImJ,EAAA+gC,UAAUn3B,EAAgB1c,EAAYglB,GAC1Drb,EAAUoqC,eAAiBA,EAC3BpqC,EAAUqqC,mBAAqBA,EAE/B,IAAI76B,EAAetgB,EAAUsgB,aAa7B,OAZIunC,EAAYxkD,SAAQid,GAAgB,IAAMunC,EAAc,KAC5D1kC,EAAW,IAAI+1B,EAAApuB,SACb9qB,EACAsgB,EACAxP,EACAm5C,GAEI/jC,EACJ6E,GAEF/qB,EAAU4qB,UAAU5kB,IAAI6hD,EAAa1kC,GACrCplB,KAAK6rB,QAAQ5M,gBAAgBhX,IAAIsa,EAAc6C,GACxCA,GAITnF,EAAAhe,UAAAqqD,yBAAA,SACErqD,EACAkG,EACAkhD,QAAA,IAAAA,MAAyBJ,EAAWK,QAEpC7lD,OAAOxB,EAAU6F,GAAGrB,EAAApE,YAAY6rB,WAChC,IAAI/F,EAAiB1kB,OAAOxB,EAAUkmB,gBAEtC,IAAMhgB,IAAiBA,EAAc7C,OAAS,OAAOrD,EAErD,IAAIklB,EAAallB,EAAUklB,WACvBolC,EAAarwC,EAAA8gC,cAAc70C,GAC3BqkD,EAAmB,IAAIrR,EAAAtyB,kBACzB7oB,KAAK6rB,QACL1E,EACAgB,EAAe5F,aAAe,IAAMgqC,EAAa,IAAM9lD,EAAA/D,mBAAqBykB,EAC5EllB,EAAU0J,YACVwc,EACAlmB,EAAU2mB,gBAKZ,OAHA4jC,EAAiB5kD,MAAQ3F,EAAU2F,MACnC4kD,EAAiBljC,aAAernB,EAAUqnB,aAC1CkjC,EAAiB1/B,mBAAqB3kB,EAC/BqkD,GAITvsC,EAAAhe,UAAAwpD,iCAAA,SACExpD,EACA0nD,EACA38B,EACAy/B,EACApD,QAAA,IAAAA,MAAyBJ,EAAWK,QAEpC,IAAIoD,EAAuC,KAC3C,OAAIzqD,EAAU6F,GAAGrB,EAAApE,YAAYqjB,WAC3BjiB,OAA4B,MAArBkmD,GAAyD,GAA5BA,EAAkBrkD,QACtDonD,EAAwB1sD,KAAKoqD,qBAC3B3mD,OAAOxB,EAAU0J,YAAYiE,gBAC7B+5C,EACA38B,EACAy/B,EACApD,IAIGrpD,KAAK6lB,gBACV5jB,EACAyqD,EACA1/B,EACAq8B,GANmC,MAWvCppC,EAAAhe,UAAAojB,aAAA,SACEpjB,EACAkG,EACA6kB,EACAq8B,4BADA,IAAAr8B,MAAA,WACA,IAAAq8B,MAAyBJ,EAAWK,QAEpC,IAAIQ,EAAc3hD,EAAgB+T,EAAA8gC,cAAc70C,GAAiB,GAG7Did,EAAWnjB,EAAU4qB,UAAU3rB,IAAI4oD,GACvC,GAAI1kC,EAAU,OAAOA,EAGrB,IAAIiJ,EAAyBrB,EAE7B,GADAA,EAA0B,IAAInO,IAC1BwP,MACF,IAA2C,IAAA0C,EAAArN,EAAA2K,GAAsB2C,EAAAD,EAAAnN,QAAAoN,EAAAnN,KAAAmN,EAAAD,EAAAnN,OAAE,CAA1D,IAAA+oC,EAAA5oC,EAAAiN,EAAA1vB,MAAA,GAACmtB,EAAAk+B,EAAA,GAAej+B,EAAAi+B,EAAA,GACvB3/B,EAAwB/kB,IAAIwmB,EAAeC,qGAM/C,IAAI/iB,EAAc1J,EAAU0J,YAC5B,GAAIxD,EAAe,CACjB,IAAIyH,EAAiBjE,EAAYiE,eAC7Bg9C,EAAwBh9C,EAAetK,OACvCunD,EAAsB1kD,EAAc7C,OACxC7B,OAAOopD,GAAuBD,GAC9B,IAAK,IAAIvsD,EAAI,EAAGA,EAAIwsD,IAAuBxsD,EACzC2sB,EAAwB/kB,IAAI2H,EAAevP,GAAGO,KAAKwE,KAAM+C,EAAc9H,SAGzEoD,OAA4C,GAArCkI,EAAYiE,eAAetK,QAIpC,IAAIwnD,EAA0B,KAC9B,GAAInhD,EAAYhD,YAAa,CAC3B,IAAIokD,EAAgB/sD,KAAKopD,YACvBz9C,EAAYhD,YACZqkB,EACAq8B,GAEF,IAAK0D,EAAe,OAAO,KAC3B,KAAMD,EAAYC,EAAcvR,gBAO9B,OANI6N,GAAcJ,EAAWK,QAC3BtpD,KAAK6rB,QAAQtlB,MACX0V,EAAAnY,eAAe+gB,sCACflZ,EAAYhD,YAAYvE,OAGrB,KAET,GAAI0oD,EAAU9lC,aAAam0B,EAAAx8B,eAAe1I,QAOxC,OANIozC,GAAcJ,EAAWK,QAC3BtpD,KAAK6rB,QAAQtlB,MACX0V,EAAAnY,eAAekpD,yCACfrhD,EAAYhD,YAAYvE,MAAO0oD,EAAUvqC,cAGtC,KAET,GAAIuqC,EAAU9lC,aAAam0B,EAAAx8B,eAAezI,YAAcjU,EAAU+kB,aAAam0B,EAAAx8B,eAAezI,WAO5F,OANImzC,GAAcJ,EAAWK,QAC3BtpD,KAAK6rB,QAAQtlB,MACX0V,EAAAnY,eAAempD,+DACf9wC,EAAAvV,MAAMd,KAAK6F,EAAY/K,KAAKwD,MAAOuH,EAAYhD,YAAYvE,QAGxD,KAKX,IAAI+iB,EAAallB,EAAUklB,WACvB5E,EAAetgB,EAAUsgB,aACzBunC,EAAYxkD,SACd6hB,GAAc,IAAM2iC,EAAc,IAClCvnC,GAAgB,IAAMunC,EAAc,MAEtC1kC,EAAW,IAAI+1B,EAAA1qB,MAAMxuB,EAAWklB,EAAY5E,EAAcpa,EAAe2kD,IAChE9/B,wBAA0BA,EACnC/qB,EAAU4qB,UAAU5kB,IAAI6hD,EAAa1kC,GACrCplB,KAAK6rB,QAAQ5M,gBAAgBhX,IAAIsa,EAAc6C,GAG/C,IAAIoL,EAAoB,EACxB,GAAIs8B,EAAW,CACb,GAAIA,EAAUh9C,QAAS,CAChBsV,EAAStV,UAASsV,EAAStV,QAAU,IAAI+O,SAC9C,IAA4B,IAAAquC,EAAAxpC,EAAAopC,EAAUh9C,QAAQtC,UAAQ2/C,EAAAD,EAAAtpC,QAAAupC,EAAAtpC,KAAAspC,EAAAD,EAAAtpC,OAAE,CAAnD,IAAIwpC,EAAeD,EAAA7rD,MACtB8jB,EAAStV,QAAQ7H,IAAImlD,EAAgBjmC,WAAYimC,sGAGrD58B,EAAes8B,EAAUn8B,oBAI3B,GAAI1uB,EAAU6mB,qBAAsB,CAClC,IAAIukC,EAAqBrtD,KAAKssD,yBAC5BrqD,EAAU6mB,qBACV3gB,EACAkhD,GAEF,IAAKgE,EAAoB,OAAO,KAChCjoC,EAASwL,oBAAsB5wB,KAAK6lB,gBAAgBwnC,EAAoB,KAAM,KAAMhE,GAItF,GAAIpnD,EAAUwmB,oBACZ,IAAmB,IAAA6kC,EAAA5pC,EAAAzhB,EAAUwmB,gBAAgBjb,UAAQ+/C,EAAAD,EAAA1pC,QAAA2pC,EAAA1pC,KAAA0pC,EAAAD,EAAA1pC,OAAE,CAAlD,IAAI3J,EAAMszC,EAAAjsD,MACb,OAAQ2Y,EAAOlT,MAGb,KAAKo0C,EAAAz8B,YAAY2R,gBACVjL,EAAStV,UAASsV,EAAStV,QAAU,IAAI+O,KAC9C,IAAI2uC,EAAoCvzC,EAAQtO,YAC5C8hD,EAAyB,KAE7B,GAAKD,EAAiBnlD,KAiBpBolD,EAAYztD,KAAKopD,YACfoE,EAAiBnlD,KACjB+c,EAAS4H,wBACTq8B,OApBwB,CAC1B,GAAkB,OAAdyD,GAA4C,OAAtBA,EAAUh9C,QAAkB,CACpD,IAAI49C,EAAYZ,EAAUh9C,QAAQ5O,IAAqB+Y,EAAQkN,YAC3DumC,IAAcA,EAAU5lD,GAAGrB,EAAApE,YAAYu9C,WACzCn8C,OAAOiqD,EAAU3mD,MAAQo0C,EAAAz8B,YAAY6R,OACrCk9B,EAAoBC,EAAWrlD,MAG9BolD,GACCpE,GAAcJ,EAAWK,QAC3BtpD,KAAKuG,MACH0V,EAAAnY,eAAe6pD,cACfH,EAAiB5sD,KAAKwD,MAAMqmD,OAWpC,IAAKgD,EAAW,MAChB,IAAIG,EAAgB,IAAIzS,EAAA7qB,MACNrW,EAChBsI,EAAe9b,EAAA/D,mBAAsCuX,EAAQkN,WAC7DsmC,EACAD,EACApoC,GAEF,OAAQqoC,EAAUznC,UAChB,KAAK,EAAG,MACR,KAAK,EAAwB,EAAfwK,KAAoBA,EAAc,MAChD,KAAK,EAAwB,EAAfA,IAAkBA,EAAoC,GAAL,EAAfA,IAAuB,MACvE,KAAK,EAAwB,EAAfA,IAAkBA,EAAoC,GAAL,EAAfA,IAAuB,MACvE,QAAS/sB,QAAO,GAElBmqD,EAAcp9B,aAAeA,EAC7BA,GAAgBi9B,EAAUznC,SAC1BZ,EAAStV,QAAQ7H,IAAIgS,EAAOkN,WAAYymC,GACxC,MAIF,KAAKzS,EAAAz8B,YAAY8G,mBACVJ,EAAStV,UAASsV,EAAStV,QAAU,IAAI+O,KAC9C,IAAI2tC,EAAmBxsD,KAAKssD,yBACPryC,EACnB9R,EACAkhD,GAEF,IAAKmD,EAAkB,OAAO,KAC9BA,EAAiBjqC,aAAeA,EAAe9b,EAAA/D,mBAAqB8pD,EAAiBrlC,WACrF/B,EAAStV,QAAQ7H,IAAIgS,EAAOkN,WAAYqlC,GACxC,MAIF,KAAKrR,EAAAz8B,YAAYmL,SACVzE,EAAStV,UAASsV,EAAStV,QAAU,IAAI+O,KAC9C,IAAIiL,EAAkBrmB,OAAkBwW,EAAQ6P,iBAC5CC,EAA6B9P,EAAQ8P,gBACrC8jC,EAAmB,IAAI1S,EAAAnxB,SACzBhqB,KAAK6rB,QACL5R,EAAOkN,WACP5E,EAAe9b,EAAA/D,mBAAqBuX,EAAOkN,WAC3CllB,GAEE6rD,EAAyB9tD,KAAKssD,yBAChCxiC,EACA3hB,EACAkhD,GAEF,IAAKyE,EAAwB,OAAO,KAIpC,GAHAA,EACGvrC,aAAeA,EAAe9b,EAAA/D,mBAAqBorD,EAAuB3mC,WAC7E0mC,EAAiB/jC,gBAAkBgkC,EAC/B/jC,EAAiB,CACnB,IAAIgkC,GAAyB/tD,KAAKssD,yBAChCviC,EACA5hB,EACAkhD,GAEF,IAAK0E,GAAwB,OAAO,KACpCA,GACGxrC,aAAeA,EAAe9b,EAAA/D,mBAAqBqrD,GAAuB5mC,WAC7E0mC,EAAiB9jC,gBAAkBgkC,GAErC3oC,EAAStV,QAAQ7H,IAAIgS,EAAOkN,WAAY0mC,GACxC,MAEF,QAASpqD,QAAO,sGAMtB2hB,EAASuL,oBAAsBH,MAG/B,IAAsC,IAAAw9B,GAAAtqC,EAAAzhB,EAAUmnB,oBAAkB6kC,GAAAD,GAAApqC,QAAAqqC,GAAApqC,KAAAoqC,GAAAD,GAAApqC,OAAE,CAA3D,IAAAsqC,GAAAnqC,EAAAkqC,GAAA3sD,MAAA,GAACyF,GAAAmnD,GAAA,GAAMC,GAAAD,GAAA,GACdzqD,OAAOsD,IAAQo0C,EAAAn/B,aAAayC,SAC5B,IAAI2vC,QAAgB,EACpB,GAAID,GAAkBrmD,GAAGrB,EAAApE,YAAY6rB,UAAW,CAC9C,IAAImgC,GAAkBruD,KAAKssD,yBACzB6B,GACAhmD,EACAkhD,GAEF,IAAKgF,GAAiB,SACtBD,GAAmBpuD,KAAK6lB,gBAAgBwoC,GAAiB,KAAM,KAAMhF,QAErE+E,GAAmBpuD,KAAK6lB,gBAAgBsoC,GAAmB,KAAM,KAAM9E,GAEzE,GAAK+E,GAAL,CACA,IAAIjlC,GAAY/D,EAAS+D,UACpBA,KAAW/D,EAAS+D,UAAYA,GAAY,IAAItK,KACrDsK,GAAUlhB,IAAIlB,GAAMqnD,2GAEtB,OAAOhpC,GAITnF,EAAAhe,UAAAynD,8BAAA,SACEznD,EACA0nD,EACA38B,EACAy/B,EACApD,QAAA,IAAAA,MAAyBJ,EAAWK,QAEpC,IAAIoD,EAAuC,KAG3C,GAAIzqD,EAAU6F,GAAGrB,EAAApE,YAAYqjB,SAAU,CACrC,IAAI4oC,EAAqBrsD,EAAU0J,YAAYiE,eAC3Cg9C,EAAwB0B,EAAmBhpD,OAC/C7B,OAAOmpD,EAAwB,GAC/B,IAAIC,EAA4C,OAAtBlD,EAA6BA,EAAkBrkD,OAAS,EAClF,GAAIsnD,GAAyBC,EAO3B,OANIxD,GAAcJ,EAAWK,QAC3BtpD,KAAKuG,MACH0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAOwoD,EAAsB/nD,SAAS,IAAKgoD,EAAoBhoD,SAAS,KAGhF,KAST,KAPA6nD,EAAwB1sD,KAAKoqD,qBAC3BkE,EACA3E,EACA38B,EACAy/B,EACApD,IAE0B,OAAO,UAInC,GAA0B,OAAtBM,GAA8BA,EAAkBrkD,OAOlD,OANI+jD,GAAcJ,EAAWK,QAC3BtpD,KAAKuG,MACH0V,EAAAnY,eAAe2lD,sBACfgD,EAAWroD,MAAOnC,EAAUsgB,cAGzB,KAKX,OAAOviB,KAAKqlB,aACVpjB,EACAyqD,EACA1/B,EACAq8B,IAGNppC,EA5kCA,CAA8BhE,EAAAhW,mBAAjBvG,EAAAugB,06BCjEb,IAkKY4uB,EAlKZ0f,EAAApuD,EAAA,IAOA8b,EAAA9b,EAAA,GAKAic,EAAAjc,EAAA,GAyBAsG,EAAAtG,EAAA,GAUAg7C,EAAAh7C,EAAA,GAwBAkc,EAAAlc,EAAA,GAIAuG,EAAAvG,EAAA,GAKAgc,EAAAhc,EAAA,GA+DA+b,EAAA/b,EAAA,GASA+C,EAAA/C,EAAA,IAUA,SAAY0uC,GAEVA,IAAA,mBAEAA,IAAA,mBAJF,CAAYA,EAAAnvC,EAAAmvC,SAAAnvC,EAAAmvC,YAQZ,IAAA2f,EAAA,oBAAAA,IAGExuD,KAAAmxB,OAAiB0d,EAAO4f,OAExBzuD,KAAA2hB,eAAsB,EAEtB3hB,KAAA4hB,UAAiB,EAEjB5hB,KAAA0uD,cAAqB,EAErB1uD,KAAA2uD,aAAoB,EAEpB3uD,KAAA6vB,WAAkB,EAElB7vB,KAAA6hB,WAAkB,EAElB7hB,KAAA8kB,cAA2C,KAE3C9kB,KAAA4uD,SAAQ,EAGR5uD,KAAA8hB,kBAAyB,EAEzB9hB,KAAA+hB,gBAAuB,EA0BzB,OAvBEhhB,OAAAC,eAAIwtD,EAAAvsD,UAAA,gBAAJ,WACE,OAAOjC,KAAKmxB,QAAU0d,EAAOC,wCAI/B/tC,OAAAC,eAAIwtD,EAAAvsD,UAAA,iBAAJ,WACE,OAAOjC,KAAKmxB,QAAU0d,EAAOC,OAAS5yB,EAAAuE,KAAKm7B,QAAU1/B,EAAAuE,KAAKo7B,yCAI5D96C,OAAAC,eAAIwtD,EAAAvsD,UAAA,iBAAJ,WACE,OAAOjC,KAAKmxB,QAAU0d,EAAOC,OAAS5yB,EAAAuE,KAAKi7B,QAAUx/B,EAAAuE,KAAKk7B,yCAI5D56C,OAAAC,eAAIwtD,EAAAvsD,UAAA,sBAAJ,WACE,OAAOjC,KAAKmxB,QAAU0d,EAAOC,OAAQ,EAAiB,mCAIxD0f,EAAAvsD,UAAA+f,WAAA,SAAW6sC,GACT,OAAoC,IAA5B7uD,KAAK4uD,SAAWC,IAE5BL,EAlDA,GAAa9uD,EAAA8uD,UAqDb,SAAkBM,GAEhBA,IAAA,eAEAA,IAAA,mCAEAA,IAAA,mCANF,CAAkBpvD,EAAAovD,UAAApvD,EAAAovD,aAUlB,SAAkBC,GAEhBA,IAAA,eAEAA,IAAA,uBAEAA,IAAA,uBANF,CAAkBrvD,EAAAqvD,iBAAArvD,EAAAqvD,oBAUlB,SAAkBC,GAEhBA,IAAA,eAEAA,IAAA,eAJF,CAAkBtvD,EAAAsvD,WAAAtvD,EAAAsvD,cAQlB,IAkwOIC,EACAC,EAnwOJC,EAAA,SAAAn6C,GA6CE,SAAAm6C,EAAYtjC,EAAkBrL,QAAA,IAAAA,MAAA,MAA9B,IAAAtL,EACEF,EAAAxU,KAAAR,KAAM6rB,EAAQ3lB,cAAYlG,YAjC5BkV,EAAAk6C,qBAAwC,KAExCl6C,EAAAm6C,0BAEAn6C,EAAAo6C,YAA2B,KAE3Bp6C,EAAAq6C,YAAoBrzC,EAAAuE,KAAKc,KAQzBrM,EAAAs6C,kBAEAt6C,EAAAu6C,eAA4C,IAAI5wC,IAEhD3J,EAAAw6C,iBAEAx6C,EAAAy6C,QAAqB,EAErBz6C,EAAA06C,QAAuB,EAEvB16C,EAAA26C,mBAA0B,EA80ElB36C,EAAA46C,eAAkC,KAClC56C,EAAA66C,eAAkC,KAClC76C,EAAA86C,eAAkC,KAClC96C,EAAA+6C,eAAkC,KAv0ExC/6C,EAAK2W,QAAUA,EACf3W,EAAK8K,SAAW6L,EAAQ7L,SACnBQ,IAASA,EAAU,IAAIguC,GAC5Bt5C,EAAKsL,QAAUA,EACftL,EAAKsb,aAAe/O,QAGlByuC,IAAI1vC,EAAQqB,WAAY,IAE1B3M,EAAKvV,OAASyc,EAAA4oB,OAAOrjC,WAqpOzB,OA7sO8BsT,EAAAk6C,EAAAn6C,GAwCrBm6C,EAAAgB,QAAP,SAAetkC,EAAkBrL,GAC/B,YAD+B,IAAAA,MAAA,MACxB,IAAI2uC,EAAStjC,EAASrL,GAAS2vC,WAmBxChB,EAAAltD,UAAAkuD,QAAA,mBACM3vC,EAAUxgB,KAAKwgB,QACf7gB,EAASK,KAAKL,OACdksB,EAAU7rB,KAAK6rB,QAGnBA,EAAQtL,WAAWC,GAGnB,IAAI4vC,EAAwB,IAAIjV,EAAApuB,SAASlB,EAAQpG,cAAe,QAAS,IAAIvJ,EAAA+gC,aAAc/gC,EAAAuE,KAAKc,OAChGvhB,KAAKowD,sBAAwBA,EAC7B,IAAIC,EAAoB,IAAIlqD,MAC5BnG,KAAKqwD,kBAAoBA,EACzBrwD,KAAK6xB,gBAAkBu+B,EAIvB,IADA,IAAIlwC,EAAU2L,EAAQ3L,QACb7f,EAAI,EAAGsK,EAAIuV,EAAQ5a,OAAQjF,EAAIsK,IAAKtK,EACvC6f,EAAQ7f,GAAGqnB,SAAS1nB,KAAKswD,cAAcpwC,EAAQ7f,IAIrD,GAAIgwD,EAAkB/qD,QAAmC,OAAzBumB,EAAQrM,aAAuB,CAC7D,IAAIzM,EAAYq9C,EAAsBr9C,UAClCw9C,EAAU5wD,EAAOusC,YACnBkkB,EAAsB7tC,aACtBviB,KAAKwwD,mBACHz9C,EAAU+S,eACV/S,EAAU3J,WACV2J,EAAUqb,UAEZlS,EAAA2gC,mBAAmBuT,EAAsBjjC,kBACzCxtB,EAAOqqC,YAAY,KAAMqmB,IAE3BD,EAAsBxgC,SAASjwB,EAAQ4wD,GAClC1kC,EAAQrM,cAAc7f,EAAO6vC,SAAS+gB,GAI7C,IAAI//B,EAAexwB,KAAKwwB,aACxBA,EAAeigC,UAAUjgC,EAAchQ,EAAQW,UAAU6E,UACzDhmB,KAAKwwB,aAAeA,EAChBhQ,EAAQkB,SACV/hB,EAAOosC,UACL,YAAW,GAEX,EACApsC,EAAOknC,UAAUkI,QAAQve,GAAewe,SAASxe,KAGnD7wB,EAAOosC,UACL,YAAW,GAEX,EACApsC,EAAO8mC,UAAUsI,QAAQve,KAK7B,IAAIkgC,EAAW1wD,KAAKwvD,eAAelqD,OAC/BypC,QAAQ4hB,UAAUF,UAAUjgC,EAAc,OAAU/O,QAAQ,GAAI,KAChE,EACJ9hB,EAAO2uC,UACLoiB,EACA1wD,KAAKwgB,QAAQkB,SACTtF,EAAA4oB,OAAO8P,kBACP14B,EAAA4oB,OAAO6P,kBACX70C,KAAKwvD,eACLhvC,EAAQ2Q,OACR,UAIE3Q,EAAQkuC,cAAc/uD,EAAOouC,gBAAgB,IAAK,MAAO,UAG7D,IAAI2hB,EAAgB1vD,KAAK0vD,cAErBkB,GAAwB,EADJlB,EAAcpqD,SAGpC3F,EAAO0vC,iBAAiBqgB,GACxB/vD,EAAOotC,eAAe,IAAK,SAC3B6jB,GAAwB,GAItBpwC,EAAQmuC,cACVhvD,EAAOkuC,eAAe,IAAK,MAAO,SAC7B+iB,GAAuBjxD,EAAOotC,eAAe,IAAK,cAIzD,IAAiC,IAAAve,EAAA9K,EAAAmI,EAAQxM,oBAAkByE,EAAA0K,EAAA5K,QAAAE,EAAAD,KAAAC,EAAA0K,EAAA5K,OAAE,CAApD,IAAAqB,EAAAlB,EAAAD,EAAAxiB,MAAA,GAACV,EAAAqkB,EAAA,GAAM4rC,EAAA5rC,EAAA,GACdjlB,KAAK8wD,iBAAiBlwD,EAAMiwD,EAAa1kD,2GAM3C,OAFInM,KAAK6vD,mBAAmBtB,EAAAwC,oBAAoB/wD,MAEzCL,GAIDwvD,EAAAltD,UAAA6uD,iBAAR,SAAyBlwD,EAAcuL,EAAkBye,4BAAA,IAAAA,MAAA,IAGvD,IAAI9a,EAAU3D,EAAQ2D,QACtB,GAAIA,EAAS,CACX,IAAIkhD,EAAYpmC,EAAShqB,GAAQuL,EAAQpF,MAAQo0C,EAAAz8B,YAAYvH,MACzD1Q,EAAA/D,mBACA+D,EAAA9D,kBAEJ,GAAIwJ,EAAQpF,MAAQo0C,EAAAz8B,YAAYoN,cAC9B,IAAmB,IAAA6gC,EAAAjpC,EAAA5T,EAAQtC,UAAQ0/C,EAAAP,EAAA/oC,QAAAspC,EAAArpC,KAAAqpC,EAAAP,EAAA/oC,OAAE,EAA5B3J,EAAMizC,EAAA5rD,OACDwG,GAAGrB,EAAApE,YAAYuX,SAC3B5Z,KAAK8wD,iBAAiB72C,EAAOkN,WAAYlN,EAAQ+2C,8GAGnD,IAAmB,IAAA7D,EAAAzpC,EAAA5T,EAAQtC,UAAQ8/C,EAAAH,EAAAvpC,QAAA0pC,EAAAzpC,KAAAypC,EAAAH,EAAAvpC,OAAE,CAAhC,IAAI3J,KAAMqzC,EAAAhsD,OACFwG,GAAGrB,EAAApE,YAAYu9C,UAC1B5/C,KAAK8wD,iBAAiB72C,EAAOkN,WAAYlN,EAAQ+2C,sGAKvD,OAAQ7kD,EAAQpF,MAGd,KAAKo0C,EAAAz8B,YAAY5I,OAEf,GADc3J,EAAQrE,GAAGrB,EAAApE,YAAYspB,QAAUxf,EAAQrE,GAAGrB,EAAApE,YAAY0X,OAAStT,EAAApE,YAAYkmB,WAC1EvoB,KAAKwgB,QAAQwB,WAAU,GAStChiB,KAAKL,OAAOwtC,gBAAgBhhC,EAAQoW,aAAcqI,EAAShqB,QARvD+K,EAAuBQ,EAASR,cAElC3L,KAAKuG,MACH0V,EAAAnY,eAAemtD,+BACftlD,EAAY/K,KAAKwD,OAMvB,MAEF,KAAK+2C,EAAAz8B,YAAYsN,UAEb,IAAIrgB,EADN,GAAKlI,OAAO0I,EAAQxE,QAAQG,GAAGrB,EAAApE,YAAYspB,QAAW3rB,KAAKwgB,QAAQwB,WAAU,GAS3EhiB,KAAKL,OAAOwtC,gBAAgBhhC,EAAQoW,aAAcqI,EAAShqB,QARvD+K,EAA0BQ,EAASR,cAErC3L,KAAKuG,MACH0V,EAAAnY,eAAemtD,+BACftlD,EAAY/K,KAAKwD,OAMvB,MAIF,KAAK+2C,EAAAz8B,YAAYnH,SACf,IACIxE,GADAqS,EAAqBjZ,GACA4G,UACrBA,EAAUqqC,mBAAqBrqC,EAAU+S,eAAexgB,SAE1D8f,EAAWplB,KAAKkxD,iBAAiB9rC,GACjCplB,KAAKmxD,iBAEH/rC,EAAStd,GAAGrB,EAAApE,YAAY+uD,WAAWpxD,KAAKL,OAAOgtC,kBAAkBvnB,EAAS7C,aAAcqI,EAAShqB,GACrG,MAIF,KAAKu6C,EAAAz8B,YAAYmL,SACf,IAAIhpB,EAAS4C,OAAkB0I,EAAS2d,iBACxC9pB,KAAK8wD,iBAAiBrqD,EAAAjE,cAAgB5B,EAAMC,EAAQ+pB,GACpD,IAAIymC,EAAoBllD,EAAS4d,gBAC7BsnC,GAAQrxD,KAAK8wD,iBAAiBrqD,EAAAhE,cAAgB7B,EAAMywD,EAAQzmC,GAChE,MAIF,KAAKuwB,EAAAz8B,YAAY6R,MACf,IAAI5wB,EAASK,KAAKL,OACd0I,EAAe8D,EAAS9D,KACxBipD,EAAajpD,EAAK+mB,eAClB0V,EAAiB34B,EAASqkB,aAC1BrP,EAAYnhB,KAAKwgB,QAAQW,UACzBowC,EAAiBvxD,KAAKwgB,QAAQ+wC,eAG9BC,EAAa5mC,EAASnkB,EAAAjE,cAAgB5B,EAgB1C,GAfAjB,EAAOusC,YACLslB,EACAxxD,KAAKwwD,mBAAmB,KAAMnoD,EAAM8Y,GACpC,KACAxhB,EAAOyoC,WACL//B,EAAK2d,SACL3d,EAAKP,GAAE,GACPnI,EAAOmoC,eAAe,EAAGypB,GACzBD,EACAxsB,IAGJnlC,EAAOgtC,kBAAkB6kB,EAAYA,IAGhCrlD,EAAQrE,GAAGrB,EAAApE,YAAYkmB,UAAW,CACrC,IAAIkpC,EAAa7mC,EAASnkB,EAAAhE,cAAgB7B,EAC1CjB,EAAOusC,YACLulB,EACAzxD,KAAKwwD,oBAAqBnoD,GAAQ6T,EAAAuE,KAAKc,KAAMJ,GAC7C,KACAxhB,EAAO8oC,YACLpgC,EAAK2d,SACLrmB,EAAOmoC,eAAe,EAAGypB,GACzB5xD,EAAOmoC,eAAe,EAAGwpB,GACzBA,EACAxsB,IAGJnlC,EAAOgtC,kBAAkB8kB,EAAYA,GAEvC,MAIF,KAAKtW,EAAAz8B,YAAY8G,uBACf,IAAqB,IAAA+nC,EAAA7pC,EAAoBvX,EAAS0gB,UAAUrf,UAAQwgD,EAAAT,EAAA3pC,QAAAoqC,EAAAnqC,KAAAmqC,EAAAT,EAAA3pC,OAAE,CAAjE,IACCwG,EAAexpB,EACnB,IAFOwkB,EAAQ4oC,EAAA1sD,OAEFwG,GAAGrB,EAAApE,YAAYqjB,SAE1B0E,IADIsnC,EAAWtsC,EAAS7C,cACC3c,UAAU8rD,EAASx4C,YAAY,MAE1DlZ,KAAK8wD,iBAAiB1mC,EAAchF,EAAUwF,qGAEhD,MAEF,KAAKuwB,EAAAz8B,YAAYiG,oBACf,IAAqB,IAAAspC,EAAAvqC,EAAiBvX,EAAS0gB,UAAUrf,UAAQ0gD,EAAAD,EAAArqC,QAAAsqC,EAAArqC,KAAAqqC,EAAAD,EAAArqC,OAAE,CAA9D,IAAIwB,EAGDssC,EAFFtnC,EAAexpB,EACnB,IAFOwkB,EAAQ8oC,EAAA5sD,OAEFwG,GAAGrB,EAAApE,YAAYqjB,SAE1B0E,IADIsnC,EAAWtsC,EAAS7C,cACC3c,UAAU8rD,EAASx4C,YAAY,MAE1D,IAAIy4C,EAAOvsC,EAASwL,oBAChB+gC,GAAM3xD,KAAK8wD,iBAAiB1mC,EAAe3jB,EAAA/D,mBAAqBivD,EAAKxqC,WAAYwqC,EAAM/mC,GAC3F5qB,KAAK8wD,iBAAiB1mC,EAAchF,EAAUwF,qGAEhD,MAIF,KAAKuwB,EAAAz8B,YAAYqN,KACjB,KAAKovB,EAAAz8B,YAAYvH,MACjB,KAAKgkC,EAAAz8B,YAAYoN,UAAW,MAE5B,QAASroB,QAAO,KAOpB0rD,EAAAltD,UAAA2vD,oBAAA,SAAoBvxC,EAAwCosC,GAC1D,IAAI3nD,EAAS9E,KAAK6rB,QAAQzL,mBAAmBC,GACzCvb,EAAQ9E,KAAKswD,cAAcxrD,GAE7B9E,KAAKuG,MACH0V,EAAAnY,eAAe+tD,iBACfpF,EAAWroD,MAAOic,IAMxB8uC,EAAAltD,UAAAquD,cAAA,SAAcxrD,GACZ,IAAIA,EAAOgD,GAAGrB,EAAApE,YAAY+uD,UAA1B,CACAtsD,EAAOmD,IAAIxB,EAAApE,YAAY+uD,UAQvB,IALA,IAAIzvC,EAAgB3hB,KAAKwgB,QAAQmB,cAC7B+F,EAAU5iB,EAAO4iB,QACjB0oC,EAAwBpwD,KAAKowD,sBAC7BC,EAAoBrwD,KAAKqwD,kBACzBhhD,EAAavK,EAAOuK,WACfhP,EAAI,EAAGsK,EAAI0E,EAAW/J,OAAQjF,EAAIsK,IAAKtK,EAAG,CACjD,IAAI+P,EAAYf,EAAWhP,GAC3B,OAAQ+P,EAAUrJ,MAChB,KAAKoV,EAAAtV,SAASiT,kBAET6H,GAAkB+F,GAAWtX,EAAUtI,GAAGrB,EAAApE,YAAYuX,WACnCxJ,EAAW0hD,WAE/B9xD,KAAK+xD,wBAA0C3hD,KAAe,MAEhE,MAEF,KAAK+L,EAAAtV,SAASqU,qBAAsB,MACpC,KAAKiB,EAAAtV,SAAS0T,iBACRoH,GAAkB+F,GAAWtX,EAAUtI,GAAGrB,EAAApE,YAAYuX,UACxD5Z,KAAKgyD,uBAAwC5hD,GAE/C,MAEF,KAAK+L,EAAAtV,SAAS0R,qBAEToJ,GAAkB+F,GAAWtX,EAAUtI,GAAGrB,EAAApE,YAAYuX,WAChCxJ,EAAW0hD,WAElC9xD,KAAKiyD,2BAAgD7hD,MAEvD,MAEF,KAAK+L,EAAAtV,SAASoU,OACZjb,KAAK4xD,oBACexhD,EAAWrL,eACXqL,EAAWS,MAE/B,MAEF,KAAKsL,EAAAtV,SAAS8S,sBACRgI,GAAkB+F,GAAWtX,EAAUtI,GAAGrB,EAAApE,YAAYuX,UACxD5Z,KAAKkyD,4BAAkD9hD,GAEzD,MAEF,KAAK+L,EAAAtV,SAAS6S,SACZ,IAAIy4C,EAAenyD,KAAKoyD,yBAA4ChiD,GAChE+hD,GAAc9B,EAAkBxqD,KAAKssD,GACzC,MAEF,KAAKh2C,EAAAtV,SAAS+S,OACuC,MAA7BxJ,EAAWrL,gBAC/B/E,KAAK4xD,oBACuBxhD,EAAWrL,eACMqL,EAAWS,OAGtD8Q,GAAiB+F,IACnB1nB,KAAKqyD,uBAAwCjiD,GAE/C,MAEF,QACE,IAAIkiD,EAAmBtyD,KAAK6xB,gBAC5B7xB,KAAK6xB,gBAAkBu+B,EACvBC,EAAkBxqD,KAAK7F,KAAKuyD,iBAAiBniD,IAC7CpQ,KAAK6xB,gBAAkBygC,MAS/BnD,EAAAltD,UAAAuwD,yBAAA,SAAyB7mD,GAEvB,IAAIQ,EAAU1I,OAAOzD,KAAK6rB,QAAQ7M,eAAe9d,IAAIyK,EAAYub,wBAEjE,OADAzjB,OAAO0I,EAAQpF,MAAQo0C,EAAAz8B,YAAY5I,QAC9B9V,KAAKyyD,cAAsBtmD,GACjBA,EADkC,MAInDgjD,EAAAltD,UAAAwwD,cAAA,SAAcC,GACZ,GAAIA,EAAO5qD,GAAGrB,EAAApE,YAAY+uD,UAAW,OAAO,EAC5CsB,EAAOzqD,IAAIxB,EAAApE,YAAY+uD,UAEvB,IAAIzxD,EAASK,KAAKL,OACdgM,EAAc+mD,EAAO/mD,YACrBgnD,EAA0B,EAE9B,GAAID,EAAOrqD,MAAQ6T,EAAAuE,KAAKc,KACtB,GAAI5V,EAGF,GAAIA,EAAYtD,KAAM,CACpB,IAAIuqD,EAAe5yD,KAAKggB,SAASopC,YAAYz9C,EAAYtD,MACzD,IAAKuqD,EAAc,OAAO,EAC1B,GAAIA,GAAgB12C,EAAAuE,KAAKc,KAKvB,OAJAvhB,KAAKuG,MACH0V,EAAAnY,eAAe6pD,cACfhiD,EAAYtD,KAAKjE,QAEZ,EAETsuD,EAAOrqD,KAAOuqD,MAGT,KAAIjnD,EAAY5C,YAqBrB,OAJA/I,KAAKuG,MACH0V,EAAAnY,eAAe6pD,cACfhiD,EAAY/K,KAAKwD,MAAMqmD,QAElB,EAfP,GALAkI,EAAW3yD,KAAK6yD,4BACdlnD,EAAY5C,YACZmT,EAAAuE,KAAKc,KAAI,GAGPvhB,KAAKuvD,aAAerzC,EAAAuE,KAAKc,KAK3B,OAJAvhB,KAAKuG,MACH0V,EAAAnY,eAAegvD,mCACfnnD,EAAY5C,YAAY3E,MAAOpE,KAAKuvD,YAAY1qD,WAAY,WAEvD,EAET6tD,EAAOrqD,KAAOrI,KAAKuvD,iBAWrB9rD,QAAO,GAKX,GAAIivD,EAAO5qD,GAAGrB,EAAApE,YAAYsjB,UAAY+sC,EAAO1rC,aAAam0B,EAAAx8B,eAAe/I,SAAU,OAAO,EAE1F,IAAI07C,EAAaoB,EAAOrqD,KAAK+mB,eACzB2jC,EAAqBL,EAAO5qD,GAAGrB,EAAApE,YAAYspB,QAAU+mC,EAAO5qD,GAAGrB,EAAApE,YAAY0X,OAAStT,EAAApE,YAAYkmB,UAGpG,GAAImqC,EAAO5qD,GAAGrB,EAAApE,YAAYsjB,SAGxB,OAAIotC,GAAsB/yD,KAAKwgB,QAAQwB,WAAU,IAC/C0wC,EAAOzqD,IAAIxB,EAAApE,YAAY2wD,eACnBrnD,EACFsnD,EAAiBP,EAAQ/mD,EAAa+mD,EAAO/qD,SAE7CsnD,EAA8B,MAC9BC,EAA+BwD,EAAOvrC,YAExCxnB,EAAOsuC,gBACLykB,EAAOnwC,aACP0sC,EACAC,EACAoC,GAEFoB,EAAOzqD,IAAIxB,EAAApE,YAAY+uD,WAChB,IAIPpxD,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACf9jB,OAAOkI,GAAavH,QAGjB,GAKT,IAAI8uD,GAAoB,EAGxB,GAAoB,OAAhBvnD,GAAoD,OAA5BA,EAAY5C,aA0BtC,GAzBK4pD,IACHA,EAAW3yD,KAAKmzD,kBACdxnD,EAAY5C,YACZ2pD,EAAOrqD,KAAI,MAMX+T,EAAAiY,gBAAgBs+B,IAAav2C,EAAAkY,aAAa6C,QACxC47B,GACFJ,EAAWhzD,EAAOmxC,qBAAqB6hB,GACnCv2C,EAAAiY,gBAAgBs+B,IAAav2C,EAAAkY,aAAa6C,QAC5Cn3B,KAAKsG,QACH2V,EAAAnY,eAAesvD,4DACfznD,EAAYvH,OAEd8uD,GAAoB,IAGtBA,GAAoB,GAKpBR,EAAO1rC,aAAam0B,EAAAx8B,eAAe5I,UAChCm9C,EAAmB,CAGtB,OAFAzvD,OAAO2Y,EAAAiY,gBAAgBs+B,IAAav2C,EAAAkY,aAAa6C,OAClC/a,EAAAoc,kBAAkBm6B,IAE/B,OACED,EAAOtmC,kBAAiB,EACxBsmC,EAAOrmC,qBAAuB5K,QAAQrF,EAAAgb,iBAAiBu7B,GAAW,GAClE,MAEF,OACED,EAAOtmC,kBAAiB,EACxBsmC,EAAOrmC,qBAAuB5K,QAC5BrF,EAAAqc,oBAAoBk6B,GACpBv2C,EAAA24B,qBAAqB4d,IAEvB,MAEF,OACED,EAAOtmC,kBAAiB,EACxBsmC,EAAOnmC,mBAAqBnQ,EAAAsc,iBAAiBi6B,GAC7C,MAEF,OACED,EAAOtmC,kBAAiB,EACxBsmC,EAAOnmC,mBAAqBnQ,EAAAuc,iBAAiBg6B,GAC7C,MAEF,QAEE,OADAlvD,QAAO,IACA,EAGXivD,EAAOzqD,IAAIxB,EAAApE,YAAYiqB,eAM3BqmC,EAAWD,EAAOrqD,KAAKq0C,aAAa/8C,GAGtC,IAAI4iB,EAAemwC,EAAOnwC,aAS1B,OAPI2wC,GACFvzD,EAAOosC,UAAUxpB,EAAc+uC,GAAY,EAAMoB,EAAOrqD,KAAKq0C,aAAa/8C,IAC1EK,KAAKqwD,kBAAkBxqD,KAAKlG,EAAOmqC,gBAAgBvnB,EAAcowC,KAGjEhzD,EAAOosC,UAAUxpB,EAAc+uC,GAAayB,EAAoBJ,IAE3D,GAKTxD,EAAAltD,UAAA+vD,uBAAA,SAAuBrmD,GACrB,IAAIQ,EAAU1I,OAAOzD,KAAK6rB,QAAQ7M,eAAe9d,IAAIyK,EAAYub,wBAEjE,OADAzjB,OAAO0I,EAAQpF,MAAQo0C,EAAAz8B,YAAYqN,MAC9B/rB,KAAKqzD,YAAkBlnD,GACfA,EADgC,MAI/CgjD,EAAAltD,UAAAoxD,YAAA,SAAYlnD,WACV,GAAIA,EAAQrE,GAAGrB,EAAApE,YAAY+uD,UAAW,OAAO,EAC7CjlD,EAAQlE,IAAIxB,EAAApE,YAAY+uD,UAExB,IAAIzxD,EAASK,KAAKL,OAClBK,KAAKsvD,YAAcnjD,EACnB,IAAImnD,EAAkC,KAClCC,GAAqB,EAEzB,GAAIpnD,EAAQ2D,YACV,IAAmB,IAAA0e,EAAA9K,EAAAvX,EAAQ2D,QAAQtC,UAAQsW,EAAA0K,EAAA5K,QAAAE,EAAAD,KAAAC,EAAA0K,EAAA5K,OAAE,CAAxC,IAAI3J,EAAM6J,EAAAxiB,MACb,GAAI2Y,EAAOlT,MAAQo0C,EAAAz8B,YAAYsN,UAA/B,CACA,IAAIwnC,GAAc,EACd1Z,EAAiB7/B,EACjBw5C,EAAmB3Z,EAAInuC,YAC3BmuC,EAAI7xC,IAAIxB,EAAApE,YAAY+uD,UACpB,IAAIuB,OAAQ,EACRc,EAAiBnyD,OACnBqxD,EAAW3yD,KAAKmzD,kBACFM,EAAiBnyD,MAC7B4a,EAAAuE,KAAKG,IAAG,KAINxE,EAAAiY,gBAAgBs+B,IAAav2C,EAAAkY,aAAa6C,QACxChrB,EAAQrE,GAAGrB,EAAApE,YAAYspB,QACzBgnC,EAAWhzD,EAAOmxC,qBAAqB6hB,GACnCv2C,EAAAiY,gBAAgBs+B,IAAav2C,EAAAkY,aAAa6C,QAC5Cn3B,KAAKuG,MACH0V,EAAAnY,eAAe4vD,0EACfD,EAAiBnyD,MAAM8C,OAEzBovD,GAAc,IAGhBA,GAAc,IAGQ,MAAjBF,EACTX,EAAWhzD,EAAO8mC,UAAU,IAExB8sB,GACFvzD,KAAKuG,MACH0V,EAAAnY,eAAe6vD,kCACfF,EAAiBrvD,OAGrBuuD,EAAWhzD,EAAO6nC,aAAaprB,EAAA4Y,SAAS4+B,OACtCj0D,EAAOuoC,gBAAgBorB,EAAc/wC,aAAY,GACjD5iB,EAAO8mC,UAAU,IAEnBksB,EAAWhzD,EAAOmxC,qBAAqB6hB,GACnCv2C,EAAAiY,gBAAgBs+B,IAAav2C,EAAAkY,aAAa6C,QACxChrB,EAAQrE,GAAGrB,EAAApE,YAAYspB,QACzB3rB,KAAKuG,MACH0V,EAAAnY,eAAe4vD,0EACfD,EAAiBrvD,OAGrBovD,GAAc,IAGdA,GACF7zD,EAAOosC,UAAU+N,EAAIv3B,aAAY,GAAkB,EAAM5iB,EAAO8mC,UAAU,IAC1EzmC,KAAKqwD,kBAAkBxqD,KAAKlG,EAAOmqC,gBAAgBgQ,EAAIv3B,aAAcowC,IACrEY,GAAqB,IAErB5zD,EAAOosC,UAAU+N,EAAIv3B,aAAY,GAAmBpW,EAAQrE,GAAGrB,EAAApE,YAAYspB,OAAQgnC,GACnFY,GAAqB,GAEvBD,EAA2BxZ,qGAI/B,OADA95C,KAAKsvD,YAAc,MACZ,GAMTH,EAAAltD,UAAAgwD,2BAAA,SACEtmD,EACAxD,EACA6kB,QAAA,IAAAA,MAAA,MAEA,IAAI7gB,EAAU1I,OAAOzD,KAAK6rB,QAAQ7M,eAAe9d,IAAIyK,EAAYub,wBAEjE,OADAzjB,OAAO0I,EAAQpF,MAAQo0C,EAAAz8B,YAAY8G,oBAC5BxlB,KAAK6zD,kCACS1nD,EACnBhE,EACA6kB,EACA,KACoB7gB,EAASR,YAAY/K,OAK7CuuD,EAAAltD,UAAA4xD,kCAAA,SACE5xD,EACAkG,EACA6kB,EACAS,EACAg/B,GAEA,IAAIrnC,EAAWplB,KAAKggB,SAASyrC,iCAC3BxpD,EACAkG,EACA6kB,EACAy/B,GAEF,OAAKrnC,GACLA,EAASqI,WAAaA,EACjBztB,KAAK8zD,gBAAgB1uC,GACnBA,EADqC,MAFtB,MAOxB+pC,EAAAltD,UAAAuuD,mBAAA,SACE1qC,EACA1c,EACAglB,QAAA,IAAAA,MAAA,MAEA,IACI4X,EADA2X,EAAgB73B,EAAiBA,EAAexgB,OAAS,EAEzDonB,EAAQ,EAQZ,GAPI0B,IACF4X,EAAa,IAAI7/B,MAAM,EAAIw3C,IAChB,GAAKvvB,EAASgB,eACzB1C,EAAQ,GAERsZ,EAAa,IAAI7/B,MAAMw3C,GAErB73B,EACF,IAAK,IAAIzlB,EAAI,EAAGA,EAAIs9C,IAAiBt9C,IAAKqsB,EACxCsZ,EAAWtZ,GAAS5G,EAAezlB,GAAG+uB,eAG1C,IAAI2kC,EAAa3qD,EAAWgmB,eACxBzvB,EAASK,KAAKL,OACd8sC,EAAU9sC,EAAO0mC,2BAA2B0tB,EAAY/tB,GAC5D,IAAKyG,EAAS,CACZ,IAAI7rC,EAAOsb,EAAA+gC,UAAUe,oBAAoBl4B,EAAgB1c,EAAYglB,GACrEqe,EAAU9sC,EAAOmmC,gBAAgBllC,EAAMmzD,EAAY/tB,GAErD,OAAOyG,GAIT0iB,EAAAltD,UAAA6xD,gBAAA,SAAgB1uC,GACd,GAAIA,EAAStd,GAAGrB,EAAApE,YAAY+uD,UAAW,OAAO,EAC9C3tD,SAAS2hB,EAAStd,GAAGrB,EAAApE,YAAYsjB,UAAYP,EAAS4B,aAAam0B,EAAAx8B,eAAe/I,WAClFwP,EAASnd,IAAIxB,EAAApE,YAAY+uD,UAGzB,IAkBI9jC,EAlBA3hB,EAAcyZ,EAASnjB,UAAU0J,YACjCqH,EAAOrH,EAAYqH,KACnBA,EACEoS,EAAStd,GAAGrB,EAAApE,YAAYsjB,UAC1B3lB,KAAKuG,MACH0V,EAAAnY,eAAekwD,yDACfroD,EAAY/K,KAAKwD,OAIhBghB,EAAStd,GAAGrB,EAAApE,YAAYsjB,UAC3B3lB,KAAKuG,MACH0V,EAAAnY,eAAemwD,gFACftoD,EAAY/K,KAAKwD,OAMvB,IAAI2O,EAAYqS,EAASrS,UACrB05B,EAAUzsC,KAAKwwD,mBAAmBz9C,EAAU+S,eAAgB/S,EAAU3J,WAAY2J,EAAUqb,UAC5FzuB,EAASK,KAAKL,OAClB,GAAIqT,EAAM,CACR,IAAIkhD,EAAgB9uC,EAAStd,GAAGrB,EAAApE,YAAYgV,aACxCjO,EAAagc,EAASrS,UAAU3J,WAGhCkpD,EAAmBtyD,KAAK6xB,gBAC5B7xB,KAAK6xB,gBAAkBzM,EACvB,IAAI0J,EAAO1J,EAAS0J,KAChBplB,OAAI,EACR,GAAIsJ,EAAKjM,MAAQoV,EAAAtV,SAAS8T,WACxBlX,QAAQ2hB,EAASpd,MAAMvB,EAAApE,YAAYgV,YAAc5Q,EAAApE,YAAY0lB,IAAMthB,EAAApE,YAAY2lB,IAAMvhB,EAAApE,YAAYujB,OACjGniB,OAAO2hB,EAAStd,GAAGrB,EAAApE,YAAYuK,QAC/BlD,EAAO1J,KAAKmzD,kBACYngD,EAAMjI,WAC5B3B,EAAU,KAIZ0lB,EAAK7mB,IAAG,GACH6mB,EAAKsF,YAAY1qB,EAAMN,IAAa0lB,EAAK7mB,IAAG,GACjD6mB,EAAKc,eACA,CACLnsB,OAAOuP,EAAKjM,MAAQoV,EAAAtV,SAASyR,OAC7B,IAAI67C,EAAQn0D,KAAKo0D,kBAAmCphD,EAAM3D,YAiB1D,GAhBI+V,EAAStd,GAAGrB,EAAApE,YAAYujB,QAC1BjmB,EAAOosC,UAAU,WAAU,GAAkB,EAAMpsC,EAAO8mC,UAAU,IACpE0tB,EAAME,QACJ10D,EAAO8qC,SACL9qC,EAAO0nC,YACLjrB,EAAA8b,QAAQC,OACRx4B,EAAOuoC,gBAAgB,WAAU,IAEnCvoC,EAAOqqC,YAAY,MACjBrqC,EAAO2rC,WAAW,QAAS,KAAI,GAC/B3rC,EAAOmqC,gBAAgB,WAAYnqC,EAAO8mC,UAAU,SAK5D3X,EAAKc,WACDskC,EAAe,CACjB,IAAI3C,EAAiBvxD,KAAKwgB,QAAQ+wC,eAIlC,GAHA9tD,OAAO2hB,EAAStd,GAAGrB,EAAApE,YAAY6rB,YAG1BY,EAAKhnB,GAAE,GAGV,GAAIgnB,EAAKhnB,GAAE,IACTqsD,EAAMtuD,KAAKlG,EAAOmoC,eAAe,EAAGypB,QAG/B,CACL,IAAI5pD,EAASlE,OAAO2hB,EAASzd,QAC7BlE,OAAOkE,EAAOZ,MAAQo0C,EAAAz8B,YAAYvH,OAClCg9C,EAAMtuD,KAAKlG,EAAOqoC,eAAe,EAC/BhoC,KAAKs0D,wBAA+B3sD,EAAQgE,EAAY/K,cAMrDwI,GAAc8S,EAAAuE,KAAKc,MAASuN,EAAKhnB,GAAE,IAC5C9H,KAAKuG,MACH0V,EAAAnY,eAAeywD,+DACf5oD,EAAYoH,UAAU3J,WAAWhF,OAGrCsF,EAAQyqD,EAAM7uD,OAEM,GAAhB6uD,EAAM7uD,OACJ6uD,EAAM,GACNx0D,EAAOqqC,YAAY,KAAMmqB,EAAO/qD,EAAWgmB,gBAH7CzvB,EAAOgrC,YAgBb,GAXA3qC,KAAK6xB,gBAAkBygC,EAGvBhlC,EAAM3tB,EAAOusC,YACX9mB,EAAS7C,aACTkqB,EACAvwB,EAAA2gC,mBAAmBz3B,EAAS+H,kBAC5BzjB,GAIE0b,EAAS4B,aAAam0B,EAAAx8B,eAAe9I,UAAW,CAClD,IAAIkG,EAAYtY,OAAO0Y,EAAAL,cAAcK,EAAA1G,cAAcI,SAAUlK,EAAYoE,aACzE/P,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxL,EAAU3X,aAKdghB,EAASnd,IAAIxB,EAAApE,YAAY2wD,eACzBC,EAAiB7tC,EAAUzZ,EAAayZ,EAASnjB,UAAU0F,QAG3D2lB,EAAM3tB,EAAO4tC,kBACXnoB,EAAS7C,aACT0sC,EACAC,EACAziB,GAKJ,OADArnB,EAASwK,SAASjwB,EAAQ2tB,IACnB,GAKT6hC,EAAAltD,UAAAiwD,4BAAA,SAA4BvmD,GAG1B,IAFA,IAAImE,EAAUnE,EAAYmE,QACtB6R,EAAgB3hB,KAAKwgB,QAAQmB,cACxBthB,EAAI,EAAGsK,EAAImF,EAAQxK,OAAQjF,EAAIsK,IAAKtK,EAAG,CAC9C,IAAI4Z,EAASnK,EAAQzP,GACrB,OAAQ4Z,EAAOlT,MACb,KAAKoV,EAAAtV,SAASiT,kBAET6H,IAAiB1H,EAAOnS,GAAGrB,EAAApE,YAAYuX,SACpBK,EAAQ63C,WAE5B9xD,KAAK+xD,wBAA0C93C,MAEjD,MAEF,KAAKkC,EAAAtV,SAASqU,sBAETyG,IAAiB1H,EAAOnS,GAAGrB,EAAApE,YAAYuX,SAChBK,EAAQ63C,WAEhC9xD,KAAKw0D,4BAAkDv6C,MAEzD,MAEF,KAAKkC,EAAAtV,SAAS0T,iBACRoH,GAAiB1H,EAAOnS,GAAGrB,EAAApE,YAAYuX,UACzC5Z,KAAKgyD,uBAAwC/3C,GAE/C,MAEF,KAAKkC,EAAAtV,SAAS0R,qBAEToJ,IAAiB1H,EAAOnS,GAAGrB,EAAApE,YAAYuX,SACjBK,EAAQ63C,WAE/B9xD,KAAKiyD,2BAAgDh4C,MAEvD,MAEF,KAAKkC,EAAAtV,SAAS8S,sBACRgI,GAAiB1H,EAAOnS,GAAGrB,EAAApE,YAAYuX,UACzC5Z,KAAKkyD,4BAAkDj4C,GAEzD,MAEF,KAAKkC,EAAAtV,SAAS6S,SACZ,GAAIiI,GAAiB1H,EAAOnS,GAAGrB,EAAApE,YAAYuX,QAAS,CAClD,IAAIu4C,EAAenyD,KAAKoyD,yBAA4Cn4C,GAAQ,GACxEk4C,GAAcnyD,KAAKqwD,kBAAkBxqD,KAAKssD,GAEhD,MAEF,QAAS1uD,QAAO,MAKtB0rD,EAAAltD,UAAAwyD,iBAAA,SAAiB/yD,WACf,GAAKA,EAAGoO,QAAR,CAEA,IAAI6R,EAAgB3hB,KAAKwgB,QAAQmB,kBACjC,IAAoB,IAAA6M,EAAA9K,EAAAhiB,EAAGoO,QAAQtC,UAAQsW,EAAA0K,EAAA5K,QAAAE,EAAAD,KAAAC,EAAA0K,EAAA5K,OAAE,CAApC,IAAIzX,EAAO2X,EAAAxiB,MACd,OAAQ6K,EAAQpF,MACd,KAAKo0C,EAAAz8B,YAAYiG,iBAGXhD,IACiBxV,EAASrE,GAAGrB,EAAApE,YAAYuX,SACpBzN,EAASrE,GAAGrB,EAAApE,YAAYqjB,UAE/C1lB,KAAK00D,+BAA+CvoD,MAEtD,MAEF,KAAKgvC,EAAAz8B,YAAYqN,KACf/rB,KAAKqzD,YAAkBlnD,GACvB,MAEF,KAAKgvC,EAAAz8B,YAAY8G,mBACf,IAEI7D,GAAqCxV,EAASrE,GAAGrB,EAAApE,YAAYuX,WACrCzN,EAASrE,GAAGrB,EAAApE,YAAYqjB,SAClD,CACA,GAAIvZ,EAAQ6a,aAAam0B,EAAAx8B,eAAe/I,SAAU,MAClD5V,KAAK6zD,kCACgB1nD,KAEnB,KACA,KACoBA,EAASR,YAAY/K,MAG7C,MAEF,KAAKu6C,EAAAz8B,YAAY5I,OACf9V,KAAKyyD,cAAsBtmD,GAC3B,MAEF,KAAKgvC,EAAAz8B,YAAYoN,UACf9rB,KAAKy0D,iBAA4BtoD,yGASzCgjD,EAAAltD,UAAAowD,uBAAA,SAAuBjiD,GACrB,IAAIgP,EAAmBpf,KAAK6rB,QAAQzM,iBAChCtP,EAAUM,EAAUN,QACxB,GAAKA,EACL,IAAK,IAAIzP,EAAI,EAAGsK,EAAImF,EAAQxK,OAAQjF,EAAIsK,IAAKtK,EAAG,CAC9C,IAAI4Z,EAASnK,EAAQzP,GACjB8L,EAAUiT,EAAiBle,IAC7BkP,EAAUhM,MAAMU,OAAOoM,aAAezK,EAAAnE,eAAiB2X,EAAO5I,aAAajM,MAE7E,GAAK+G,EACL,OAAQA,EAAQpF,MACd,KAAKo0C,EAAAz8B,YAAYiG,gBACOxY,EAASrE,GAAGrB,EAAApE,YAAYqjB,UAC5C1lB,KAAK00D,+BAA+CvoD,MAEtD,MAEF,KAAKgvC,EAAAz8B,YAAYqN,KACf/rB,KAAKqzD,YAAkBlnD,GACvB,MAEF,KAAKgvC,EAAAz8B,YAAY8G,oBAEQrZ,EAASrE,GAAGrB,EAAApE,YAAYqjB,UAC7CtV,EAAUhM,MAAMU,OAAO4iB,SAEvB1nB,KAAK6zD,kCACgB1nD,KAEnB,KACA,KACoBA,EAASR,YAAY/K,MAG7C,MAEF,KAAKu6C,EAAAz8B,YAAY5I,OACf9V,KAAKyyD,cAAsBtmD,GAC3B,MAEF,KAAKgvC,EAAAz8B,YAAYoN,UACf9rB,KAAKy0D,iBAA4BtoD,MASzCgjD,EAAAltD,UAAA8vD,wBAAA,SACEpmD,EACAxD,EACA6kB,QAAA,IAAAA,MAAA,MAEA,IAAI7gB,EAAU1I,OAAOzD,KAAK6rB,QAAQ7M,eAAe9d,IAAIyK,EAAYub,wBACjEzjB,OAAO0I,EAAQpF,MAAQo0C,EAAAz8B,YAAYiG,iBACnC3kB,KAAK00D,+BACavoD,EAChBhE,EACA6kB,EACArhB,IAIJwjD,EAAAltD,UAAAyyD,+BAAA,SACEzyD,EACAkG,EACA6kB,EACAq9B,QADA,IAAAr9B,MAAA,WACA,IAAAq9B,MAAA,MAEA,IAAIjlC,EAAWplB,KAAKggB,SAAS0pC,8BAC3BznD,EACAkG,EACA6kB,EACAq9B,GAAyBpoD,EAAU0J,aAEhCyZ,GACLplB,KAAK20D,aAAavvC,IAGpB+pC,EAAAltD,UAAA0yD,aAAA,SAAavvC,eACX,GAAIA,EAAStd,GAAGrB,EAAApE,YAAY+uD,UAAW,OAAO,EAC9ChsC,EAASnd,IAAIxB,EAAApE,YAAY+uD,UAEzB,IAAIwD,EAAgBxvC,EAASnjB,UAAU6N,QACvC,GAAI8kD,MACF,IAAoB,IAAA9wC,EAAAJ,EAAAkxC,EAAcpnD,UAAQyX,EAAAnB,EAAAF,QAAAqB,EAAApB,KAAAoB,EAAAnB,EAAAF,OAAE,CAC1C,QADOzX,EAAO8Y,EAAA3jB,OACEyF,MACd,KAAKo0C,EAAAz8B,YAAY5I,OACf9V,KAAKyyD,cAAsBtmD,GAC3B,MAEF,KAAKgvC,EAAAz8B,YAAY8G,mBAEQrZ,EAASrE,GAAGrB,EAAApE,YAAYqjB,UAE7C1lB,KAAK6zD,kCACgB1nD,KACf,KAAM,KACUA,EAASR,YAAY/K,MAG7C,MAEF,KAAKu6C,EAAAz8B,YAAYmL,UACXhpB,EAAoBsL,EAAS2d,kBAE/B9pB,KAAK6zD,kCACHhzD,KACI,KAAM,KACVA,EAAO8K,YAAY/K,OAGnBywD,EAAoBllD,EAAS4d,kBAE/B/pB,KAAK6zD,kCACHxC,KACI,KAAM,KACVA,EAAO1lD,YAAY/K,yGAQ/B,IAAIi0D,EAAezvC,EAASwL,oBACxBikC,GAAc70D,KAAK8zD,gBAAgBe,GACvC,IAAIpsC,EAAkBrD,EAAStV,QAC/B,GAAI2Y,MACF,IAAoB,IAAAkkC,EAAAjpC,EAAA+E,EAAgBjb,UAAQ0/C,EAAAP,EAAA/oC,QAAAspC,EAAArpC,KAAAqpC,EAAAP,EAAA/oC,OAAE,CAAzC,IAAIzX,EACP,QADOA,EAAO+gD,EAAA5rD,OACEyF,MACd,KAAKo0C,EAAAz8B,YAAY8G,mBAEQrZ,EAASrE,GAAGrB,EAAApE,YAAYqjB,UAE7C1lB,KAAK6zD,kCACgB1nD,KAEnBiZ,EAAS4H,wBACT,KACoB7gB,EAASR,YAAY/K,MAG7C,MAEF,KAAKu6C,EAAAz8B,YAAY6R,MACfpkB,EAAQlE,IAAIxB,EAAApE,YAAY+uD,UACxB,MAEF,KAAKjW,EAAAz8B,YAAYmL,SACf,IAAIhpB,EAQAwwD,GARAxwD,EAAoBsL,EAAS2d,kBAE/B9pB,KAAK6zD,kCACHhzD,KACIukB,EAAS4H,wBAAyB,KACtCnsB,EAAO8K,YAAY/K,OAGnBywD,EAAoBllD,EAAS4d,kBAE/B/pB,KAAK6zD,kCACHxC,KACIjsC,EAAS4H,wBAAyB,KACtCqkC,EAAO1lD,YAAY/K,yGAQ/B,OAAO,GAGTuuD,EAAAltD,UAAAuyD,4BAAA,SACE7oD,EACAxD,EACA6kB,EACAq9B,QADA,IAAAr9B,MAAA,WACA,IAAAq9B,MAAA,MAGArqD,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACf5b,EAAYvH,QAOhB+qD,EAAAltD,UAAA6yD,iBAAA,SAAiBjwB,EAAoBkwB,QAAA,IAAAA,MAAA,GACnC,IAAIvkC,EAAeigC,UAAUzwD,KAAKwwB,aAAcukC,GAC5ChwB,EAAU3oB,EAAAwoB,cAAcjjC,OAAOkjC,EAAQrU,GAG3C,OAFAxwB,KAAKwvD,eAAe3pD,KAAKk/B,GACzB/kC,KAAKwwB,aAAem3B,QAAQn3B,EAAc/O,QAAQojB,EAAOv/B,OAAQ,IAC1Dy/B,GAMToqB,EAAAltD,UAAA+yD,yBAAA,SAAyBvlB,GAEvB,GADAhsC,OAAOgsC,EAAK3nC,GAAGrB,EAAApE,YAAY+uD,WACvB3hB,EAAKliB,oBAAsB,EAC7B,OAAOkiB,EAAKliB,mBAEd,IAAImiC,EAAgB1vD,KAAK0vD,cACrBhjC,EAAQgjC,EAAcpqD,OAO1B,OANKmqC,EAAK3nC,GAAGrB,EAAApE,YAAY4yD,aAAexlB,EAAK18B,UAAUqqC,mBAAqB3N,EAAK18B,UAAU+S,eAAexgB,SAExGmqC,EAAOzvC,KAAKkxD,iBAAiBzhB,IAE/BigB,EAAc7pD,KAAK4pC,EAAKniB,KACxBmiB,EAAKliB,mBAAqBb,EACnBA,GAKTyiC,EAAAltD,UAAAswD,iBAAA,SAAiBniD,GACf,IACI1G,EADA/J,EAASK,KAAKL,OAElB,OAAQyQ,EAAUrJ,MAChB,KAAKoV,EAAAtV,SAASyR,MACZ5O,EAAO1J,KAAKk1D,sBAAsC9kD,GAClD,MAEF,KAAK+L,EAAAtV,SAASsT,MACZzQ,EAAO1J,KAAKm1D,sBAAsC/kD,GAClD,MAEF,KAAK+L,EAAAtV,SAASuT,SACZ1Q,EAAO1J,KAAKo1D,yBAA4ChlD,GACxD,MAEF,KAAK+L,EAAAtV,SAASwT,GACZ3Q,EAAO1J,KAAKq1D,mBAAgCjlD,GAC5C,MAEF,KAAK+L,EAAAtV,SAASyT,MACZ5Q,EAAO1J,KAAKs1D,sBAAsCllD,GAClD,MAEF,KAAK+L,EAAAtV,SAAS8T,WACZjR,EAAO1J,KAAKu1D,2BAAgDnlD,GAC5D,MAEF,KAAK+L,EAAAtV,SAASiU,IACZpR,EAAO1J,KAAKw1D,oBAAkCplD,GAC9C,MAEF,KAAK+L,EAAAtV,SAASkU,GACZrR,EAAO1J,KAAKy1D,mBAAgCrlD,GAC5C,MAEF,KAAK+L,EAAAtV,SAASsU,OACZzR,EAAO1J,KAAK01D,uBAAwCtlD,GACpD,MAEF,KAAK+L,EAAAtV,SAASwU,OACZ3R,EAAO1J,KAAK21D,uBAAwCvlD,GACpD,MAEF,KAAK+L,EAAAtV,SAASyU,MACZ5R,EAAO1J,KAAK41D,sBAAsCxlD,GAClD,MAEF,KAAK+L,EAAAtV,SAAS0U,IACZ7R,EAAO1J,KAAK61D,oBAAkCzlD,GAC9C,MAEF,KAAK+L,EAAAtV,SAAS6S,UACZhQ,EAAO1J,KAAKoyD,yBAA4ChiD,MAC7C1G,EAAO/J,EAAOgrC,aACzB,MAEF,KAAKxuB,EAAAtV,SAAS6U,KACZhS,EAAO1J,KAAK81D,qBAAoC1lD,GAChD,MAEF,KAAK+L,EAAAtV,SAAS8U,MACZjS,EAAO1J,KAAK+1D,sBAAsC3lD,GAClD,MAEF,KAAK+L,EAAAtV,SAAS2U,gBAGZ,GAAIxb,KAAK6xB,iBAAmB7xB,KAAKowD,sBAC/B,OAAOzwD,EAAOgrC,YAIlB,QACElnC,QAAO,GACPiG,EAAO/J,EAAOksC,oBAIlB,OADI7rC,KAAKwgB,QAAQqP,WAAW7vB,KAAKg2D,iBAAiBtsD,EAAM0G,EAAUhM,OAC3DsF,GAGTylD,EAAAltD,UAAAmyD,kBAAA,SAAkB/kD,GAChB,IAAI4mD,EAAgB5mD,EAAW/J,OAC3B6uD,EAAQ,IAAIhuD,MAAqB8vD,GACrC9B,EAAM7uD,OAAS,EAEf,IADA,IAAIwpB,EAAO9uB,KAAK6xB,gBAAgB/C,KACvBzuB,EAAI,EAAGA,EAAI41D,IAAiB51D,EAAG,CACtC,IAAIqJ,EAAO1J,KAAKuyD,iBAAiBljD,EAAWhP,IAC5C,OAAQ+b,EAAAiY,gBAAgB3qB,IACtB,KAAK0S,EAAAkY,aAAa4E,MAChB,IAAK9c,EAAA+c,aAAazvB,GAAO,CACvB,IAAK,IAAI+Y,EAAI,EAAG9X,EAAIyR,EAAAgd,mBAAmB1vB,GAAO+Y,EAAI9X,IAAK8X,EAAG0xC,EAAMtuD,KAAKuW,EAAAkd,cAAc5vB,EAAM+Y,IACzF,MAIJ,QAAS0xC,EAAMtuD,KAAK6D,GACpB,KAAK0S,EAAAkY,aAAa4hC,KAEpB,GAAIpnC,EAAK9mB,MAAK,IAA6B,CACrCoU,EAAAu+B,yBAAyBjxC,IAAOyqD,EAAMtuD,KAAK7F,KAAKL,OAAOksC,qBAC3D,OAGJ,OAAOsoB,GAGThF,EAAAltD,UAAAizD,sBAAA,SAAsB9kD,GACpB,IAAIf,EAAae,EAAUf,WACvByiB,EAAa9xB,KAAK6xB,gBAAgB/C,KAClCA,EAAOgD,EAAWO,OACtBryB,KAAK6xB,gBAAgB/C,KAAOA,EAE5B,IAAIqlC,EAAQn0D,KAAKo0D,kBAAkB/kD,GAC/B3F,EAAuB,GAAhByqD,EAAM7uD,OACbtF,KAAKL,OAAOgrC,YACI,GAAhBwpB,EAAM7uD,OACJ6uD,EAAM,GACNn0D,KAAKL,OAAOqqC,YAAY,KAAMmqB,EAAM/3C,EAAAoc,kBAAkB27B,EAAMA,EAAM7uD,OAAS,KAIjF,OAFAtF,KAAK6xB,gBAAgB/C,KAAOA,EAAK0D,OACjCV,EAAW6B,QAAQ7E,GACZplB,GAGTylD,EAAAltD,UAAAkzD,sBAAA,SAAsB/kD,GACpB,IAAIzQ,EAASK,KAAKL,OAClB,GAAIyQ,EAAUZ,MAKZ,OAJAxP,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfnX,EAAUZ,MAAMpL,OAEXzE,EAAOksC,oBAEhB,IAAI/c,EAAO9uB,KAAK6xB,gBAAgB/C,KAC5BkD,EAAalD,EAAKkD,WACtB,OAAkB,MAAdA,GACFhyB,KAAKuG,MACH0V,EAAAnY,eAAeqyD,qFACf/lD,EAAUhM,OAELzE,EAAOksC,sBAEhB/c,EAAK7mB,IAAG,GACDtI,EAAOwqC,YAAYnY,KAG5Bm9B,EAAAltD,UAAAmzD,yBAAA,SAAyBhlD,GACvB,IAAIzQ,EAASK,KAAKL,OACd6P,EAAQY,EAAUZ,MACtB,GAAIA,EAKF,OAJAxP,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACf/X,EAAMpL,OAEDzE,EAAOksC,oBAGhB,IAAI/c,EAAO9uB,KAAK6xB,gBAAgB/C,KAC5BiD,EAAgBjD,EAAKiD,cACzB,OAAqB,MAAjBA,GACF/xB,KAAKuG,MACH0V,EAAAnY,eAAesyD,8EACfhmD,EAAUhM,OAELzE,EAAOksC,sBAEhB/c,EAAK7mB,IAAG,IACDtI,EAAOwqC,YAAYpY,KAG5Bo9B,EAAAltD,UAAAozD,mBAAA,SAAmBjlD,GACjB,IAAIyhB,EAAkB7xB,KAAK6xB,gBACvBlyB,EAASK,KAAKL,OAEd6P,EAAQqiB,EAAgBpC,oBACxBqC,EAAaD,EAAgB/C,KAC7BA,EAAOgD,EAAWO,OACtBR,EAAgB/C,KAAOA,EACvB,IAAIkD,EAAa,SAAWxiB,EAC5Bsf,EAAKkD,WAAaA,EAClB,IAAID,EAAgB,YAAcviB,EAClCsf,EAAKiD,cAAgBA,EAErB,IAAI/e,EAAOhT,KAAKuyD,iBAAiBniD,EAAUA,WACvCimD,EAAWr2D,KAAKs2D,cAClBt2D,KAAKmzD,kBAAkB/iD,EAAUjC,UAAW+N,EAAAuE,KAAKG,IAAG,KACpD5gB,KAAKuvD,aAKP19B,EAAgB/C,KAAOA,EAAK0D,OAC5BX,EAAgBlC,oBAChB,IAAI4mC,EAAaznC,EAAK9mB,MAAK,IAC3B8mB,EAAKsD,MACH,KAKFN,EAAW6B,QAAQ7E,GAEnB,IAAI0nC,GACF72D,EAAO4qC,WAAWxY,EAChBwkC,EACIvjD,EACArT,EAAOqqC,YAAY,MACjBh3B,EACArT,EAAOwqC,YAAYpY,EAAeskC,IACnC,KAIT,OADIE,GAAYC,EAAM3wD,KAAKlG,EAAOksC,qBAC3BlsC,EAAOqqC,YAAYhY,EAAYwkC,IAGxCrH,EAAAltD,UAAAqzD,sBAAA,SAAsBllD,GACpB,OAAOpQ,KAAKL,OAAOgrC,aAGrBwkB,EAAAltD,UAAAszD,2BAAA,SAA2BnlD,GACzB,IAAIjG,EAAOnK,KAAKmzD,kBAAkB/iD,EAAUrF,WAAYmR,EAAAuE,KAAKc,KAAI,KAKjE,OAJIvhB,KAAKuvD,aAAerzC,EAAAuE,KAAKc,OAC3BpX,EAAOnK,KAAKL,OAAO0qC,WAAWlgC,GAC9BnK,KAAKuvD,YAAcrzC,EAAAuE,KAAKc,MAEnBpX,GAGTglD,EAAAltD,UAAAuzD,oBAAA,SAAoBplD,GAGlB,IAAIyhB,EAAkB7xB,KAAK6xB,gBACvBriB,EAAQqiB,EAAgBpC,oBACxBqC,EAAaD,EAAgB/C,KAC7BA,EAAOgD,EAAWO,OACtBR,EAAgB/C,KAAOA,EACvB,IAAIkD,EAAalD,EAAKkD,WAAa,SAAWxiB,EAC9Csf,EAAKkD,WAAaA,EAClB,IAAID,EAAgB,YAAcviB,EAClCsf,EAAKiD,cAAgBA,EACrB,IAAI0kC,EAAc,UAAYjnD,EAG1B7P,EAASK,KAAKL,OACdgzD,EAAWviD,EAAUrH,YACrB/I,KAAKuyD,iBAA4BniD,EAAUrH,aAC3C,EACAstD,EAA0B,EAC1BK,GAAa,EACjB,GAAItmD,EAAUjC,UAAW,CACvBkoD,EAAWr2D,KAAKs2D,cACdt2D,KAAK6yD,4BAAwCziD,EAAUjC,UAAW+N,EAAAuE,KAAKW,KAAI,GAC3EphB,KAAKuvD,aAGP,IAAIoH,EAAUh3D,EAAOmxC,qBAAqBulB,GACtCj6C,EAAAiY,gBAAgBsiC,IAAYv6C,EAAAkY,aAAa6C,QAC3C1zB,OAAiC,GAA1B2Y,EAAAoc,kBAAkBm+B,IACQ,GAA7Bv6C,EAAAgb,iBAAiBu/B,KAAeD,GAAa,IAKnDL,EAAWr2D,KAAKs2D,cACdt2D,KAAK6yD,4BAAwCziD,EAAUjC,UAAW+N,EAAAuE,KAAKW,KAAI,GAC3EphB,KAAKuvD,kBAIP8G,EAAW12D,EAAO8mC,UAAU,GAC5BiwB,GAAa,EAEf,IAAIE,EAAWxmD,EAAUwC,YACrB5S,KAAKmzD,kBAA8B/iD,EAAUwC,YAAasJ,EAAAuE,KAAKc,KAAI,KACnE,EACAs1C,EAAgBzmD,EAAUA,UAC1B0mD,EAAWD,EAAc9vD,MAAQoV,EAAAtV,SAASyR,OAA8D,GAApCu+C,EAAexnD,WAAW/J,OAC9FtF,KAAKuyD,iBAAkCsE,EAAexnD,WAAW,IACjErP,KAAKuyD,iBAAiBsE,GAG1BhlC,EAAgB/C,KAAOA,EAAK0D,OAC5BX,EAAgBlC,oBAChB,IAAIonC,EAAejoC,EAAK9mB,MAAM,KAC9B8mB,EAAKsD,MACH,KAKEskC,EAAY5kC,EAAW6B,QAAQ7E,GAC9BgD,EAAW+B,mBAAmB/E,GAEnC,IAAIkoC,EAAa,IAAI7wD,MACjBwsD,GAAUqE,EAAWnxD,KAAK8sD,GAE9B,IAAIsE,EAAc,IAAI9wD,MAuBtB,OAtBI4wD,EACFE,EAAYpxD,KACVlG,EAAOqqC,YAAYjY,GACjBpyB,EAAOwqC,YAAYnY,EAAYryB,EAAO0nC,YAAYjrB,EAAA8b,QAAQC,OAAQk+B,IAClES,GACD,KAGHG,EAAYpxD,KACVlG,EAAOwqC,YAAYnY,EAAYryB,EAAO0nC,YAAYjrB,EAAA8b,QAAQC,OAAQk+B,KAEpEY,EAAYpxD,KAAKixD,IAEfF,GAAUK,EAAYpxD,KAAK+wD,GAC/BK,EAAYpxD,KACVlG,EAAOwqC,YAAYssB,IAGrBO,EAAWnxD,KACTlG,EAAO4qC,WAAWksB,EAAa92D,EAAOqqC,YAAY,KAAMitB,EAAW,KAG9Dt3D,EAAOqqC,YAAYhY,EAAYglC,IAGxC7H,EAAAltD,UAAAwzD,mBAAA,SAAmBrlD,GACjB,IAAIzQ,EAASK,KAAKL,OACdkyB,EAAkB7xB,KAAK6xB,gBACvBjgB,EAASxB,EAAUwB,OACnBC,EAAUzB,EAAUyB,QAGpBwkD,EAAWr2D,KAAKs2D,cAClBt2D,KAAK6yD,4BAA4BziD,EAAUjC,UAAW+N,EAAAuE,KAAKW,KAAI,GAC/DphB,KAAKuvD,aAGP,IACGvvD,KAAKwgB,QAAQmB,eACd3hB,KAAK6xB,gBAAgB7pB,MAAMvB,EAAApE,YAAYqjB,QAAUjf,EAAApE,YAAY60D,iBAC7D,CAEA,IAAIC,EAAkBx3D,EAAOmxC,qBAAqBulB,GAClD,GACEj6C,EAAAiY,gBAAgB8iC,IAAoB/6C,EAAAkY,aAAa6C,OACf,GAAlC/a,EAAAoc,kBAAkB2+B,GAElB,OAAO/6C,EAAAgb,iBAAiB+/B,GACpBn3D,KAAKuyD,iBAAiB3gD,GACtBC,EACE7R,KAAKuyD,iBAAiB1gD,GACtBlS,EAAOgrC,YAIb0rB,EAAWr2D,KAAKs2D,cACdt2D,KAAK6yD,4BAA4BziD,EAAUjC,UAAW+N,EAAAuE,KAAKW,KAAI,GAC/DphB,KAAKuvD,aAMX,IAAIz9B,EAAaD,EAAgB/C,KAC7BsoC,EAAatlC,EAAWO,OAC5BR,EAAgB/C,KAAOsoC,EACvB,IAAIC,EAAar3D,KAAKuyD,iBAAiB3gD,GACvCigB,EAAgB/C,KAAOsoC,EAAW5kC,OAElC,IAAI8kC,EAA6B,EACjC,GAAIzlD,EAAS,CACX,IAAI0lD,EAAczlC,EAAWO,OAC7BR,EAAgB/C,KAAOyoC,EACvBD,EAAct3D,KAAKuyD,iBAAiB1gD,GACpCggB,EAAgB/C,KAAOyoC,EAAY/kC,OACnCV,EAAWgC,cAAcsjC,EAAYG,QAErCzlC,EAAW+B,mBAAmBujC,GAEhC,OAAOz3D,EAAO8qC,SAAS4rB,EAAUgB,EAAYC,IAG/CnI,EAAAltD,UAAAyzD,uBAAA,SAAuBtlD,GACrB,IAAIzQ,EAASK,KAAKL,OACdkyB,EAAkB7xB,KAAK6xB,gBACvB1nB,EAAsB,EACtB2kB,EAAO+C,EAAgB/C,KAK3B,GAFAA,EAAK7mB,IAAG,GAEJmI,EAAU9O,MAAO,CACnB,IAAI8H,EAAa0lB,EAAK1lB,WACtB,GAAIA,GAAc8S,EAAAuE,KAAKc,KAOrB,OANAvhB,KAAK6yD,4BAA4BziD,EAAU9O,MAAO8H,EAAU,GAC5DpJ,KAAKuG,MACH0V,EAAAnY,eAAegvD,mCACf1iD,EAAU9O,MAAM8C,MAAOpE,KAAKuvD,YAAY1qD,WAAYuE,EAAWvE,YAEjE7E,KAAKuvD,YAAcrzC,EAAAuE,KAAKc,KACjB5hB,EAAOksC,oBAEhB1hC,EAAOnK,KAAKmzD,kBACV/iD,EAAU9O,MACV8H,EAAU,EAEVyoB,EAAgB/pB,GAAGrB,EAAApE,YAAYmlB,eAC5B,EACA,GAIAsH,EAAKsF,YAAYjqB,EAAMf,IAAa0lB,EAAK7mB,IAAG,GAInD,OAAIkU,EAAA9D,gBAAgBjI,GAAmBjG,GAAcxK,EAAOgrC,YAGrD7b,EAAKhnB,GAAE,MACVnI,EAAOwqC,YAAY1mC,OAAOqrB,EAAKmD,aAAc,EAAG9nB,GAChDxK,EAAOkrC,aAAa1gC,IAG1BglD,EAAAltD,UAAA0zD,uBAAA,SAAuBvlD,GACrB,IAAIzQ,EAASK,KAAKL,OACdkyB,EAAkB7xB,KAAK6xB,gBAEvBpe,EAAQrD,EAAUqD,MAClB+jD,EAAW/jD,EAAMnO,OACrB,IAAKkyD,EACH,OAAOx3D,KAAKmzD,kBAAkB/iD,EAAUjC,UAAW+N,EAAAuE,KAAKc,KAAI,KAI9D,IAAImpC,EAAU74B,EAAgBpC,oBAC1BqC,EAAaD,EAAgB/C,KAG7B2oC,EAAY5lC,EAAgB5C,aAAa/S,EAAAuE,KAAKQ,KAAK,GACnDy2C,EAAiBD,EAAU/qC,MAG3BirC,EAAS,IAAIxxD,MAAqB,EAAIqxD,GAC1CG,EAAO,GAAKh4D,EAAOiqC,eACjB8tB,EACA13D,KAAKmzD,kBAAkB/iD,EAAUjC,UAAW+N,EAAAuE,KAAKQ,IAAG,MAMtD,IAFA,IAAI22C,EAAa,EACbC,GAAgB,EACXx3D,EAAI,EAAGA,EAAIm3D,IAAYn3D,EAAG,CACjC,IACImP,EADQiE,EAAMpT,GACAmP,MACdA,EACFmoD,EAAOC,KAAgBj4D,EAAOwqC,YAAY,OAAS9pC,EAAEwE,SAAS,IAAM,IAAM6lD,EACxE/qD,EAAO6nC,aAAaprB,EAAA4Y,SAASC,MAC3Bt1B,EAAOmoC,eAAe4vB,EAAc,GACpC13D,KAAKmzD,kBAAkB3jD,EAAO0M,EAAAuE,KAAKQ,IAAG,OAI1C42C,EAAex3D,EAInBwxB,EAAgBtC,cAAckoC,GAG9BE,EAAOC,GAAcj4D,EAAOwqC,aAAa0tB,GAAgB,EACnD,OAASA,EAAahzD,SAAS,IAC/B,SACA,IAAM6lD,GAGZ,IAAIoN,EAAen4D,EAAOqqC,YAAY,SAAW0gB,EAASiN,EAAM,GAC5DI,GAAgB,EAChBC,GAAuB,EACvBC,GAAe,EACfC,GAAkB,EACtB,IAAS73D,EAAI,EAAGA,EAAIm3D,IAAYn3D,EAAG,CACjC,IACIgP,EADQoE,EAAMpT,GACKgP,WACnB4mD,EAAgB5mD,EAAW/J,OAG3BwpB,EAAOgD,EAAWO,OACtBR,EAAgB/C,KAAOA,EACvB,IAAIkD,EAAa,SAAW04B,EAC5B57B,EAAKkD,WAAaA,EAElB,IAAImmC,EAAS93D,GAAKm3D,EAAW,EACzBY,EAAYD,EAASnmC,EAAa,QAAU3xB,EAAI,GAAGwE,SAAS,IAAM,IAAM6lD,EACxEyJ,EAAQ,IAAIhuD,MAAqB,EAAI8vD,GACzC9B,EAAM,GAAK2D,EAGX,IAFA,IAAIO,EAAQ,EACR9B,GAAa,EACR9zC,EAAI,EAAGA,EAAIwzC,IAAiBxzC,EAAG,CACtC,IAAI/Y,EAAO1J,KAAKuyD,iBAAiBljD,EAAWoT,IAC5C,GAAIrG,EAAAiY,gBAAgB3qB,IAAS0S,EAAAkY,aAAa4hC,MACxC/B,EAAMkE,KAAW3uD,EACbolB,EAAK9mB,MAAK,KAA6B,CACzCuuD,GAAa,EACb,OAINpC,EAAM7uD,OAAS+yD,GACX9B,GAAc4B,KACXrpC,EAAKhnB,GAAE,KAAqBiwD,GAAgB,GAC5CjpC,EAAKhnB,GAAE,KAA6BkwD,GAAuB,GAC3DlpC,EAAKhnB,GAAE,KAAoBmwD,GAAe,GAC1CnpC,EAAKhnB,GAAE,MAAuBowD,GAAkB,IAIvDppC,EAAKsD,MACH,KAGFP,EAAgB/C,KAAOA,EAAK0D,OAC5BslC,EAAen4D,EAAOqqC,YAAYouB,EAAWjE,EAAK,GAWpD,OATAtiC,EAAgBlC,oBAGZkoC,GAAgB,IACdE,GAAejmC,EAAW7pB,IAAG,GAC7B+vD,GAAsBlmC,EAAW7pB,IAAG,GACpCgwD,GAAcnmC,EAAW7pB,IAAG,GAC5BiwD,GAAiBpmC,EAAW7pB,IAAG,KAE9B6vD,GAGT3I,EAAAltD,UAAA2zD,sBAAA,SAAsBxlD,GACpB,IAAI0e,EAAO9uB,KAAK6xB,gBAAgB/C,KAShC,OANAA,EAAK7mB,IAAG,GAGR6mB,EAAK7mB,IAAG,GAGDsmD,EAAA+J,aAAat4D,KAAM,KAAMoQ,IAGlC++C,EAAAltD,UAAA4zD,oBAAA,SAAoBzlD,GAQlB,OAJApQ,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfnX,EAAUhM,OAELpE,KAAKL,OAAOksC,qBAOrBsjB,EAAAltD,UAAAmwD,yBAAA,SAAyBhiD,EAA8BmoD,QAAA,IAAAA,OAAA,GACrD,IAAI1sC,EAAU7rB,KAAK6rB,QACfgG,EAAkB7xB,KAAK6xB,gBACvB3f,EAAe9B,EAAU8B,aACzBsmD,EAAkBtmD,EAAa5M,OAGnC,GAAIizD,GACF1mC,GAAmB7xB,KAAKowD,uBACxBhgD,EAAUzI,QAAUyI,EAAUzI,OAAOZ,MAAQoV,EAAAtV,SAAS+R,OACrD,CAMD,IAAK,IAAIvY,EAAI,EAAGA,EAAIm4D,IAAmBn4D,EACrCL,KAAKwyD,yBAAyBtgD,EAAa7R,IAE7C,OAAO,EAIT,IAAIo4D,EAAe,IAAItyD,MACnB2oB,EAAO9uB,KAAK6xB,gBAAgB/C,KAC5B9O,EAAWhgB,KAAKggB,SACpB,IAAS3f,EAAI,EAAGA,EAAIm4D,IAAmBn4D,EAAG,CACxC,IAAIsL,EAAcuG,EAAa7R,GAC3BO,EAAO+K,EAAY/K,KAAKwE,KACxBiD,EAAoB,KACpBsqD,EAA0B,EAC9B,GAAIhnD,EAAYtD,KAAM,CAKpB,KAJAA,EAAO2X,EAASopC,YACdz9C,EAAYtD,KACZymB,EAAK9B,0BAEI,SACPrhB,EAAY5C,cACd4pD,EAAW3yD,KAAKmzD,kBACdxnD,EAAY5C,YACZV,EAAI,UAKH,KAAIsD,EAAY5C,YAchB,CACL/I,KAAKuG,MACH0V,EAAAnY,eAAe6pD,cACfhiD,EAAY/K,KAAKwD,MAAMqmD,OAEzB,SAbA,GALAkI,EAAW3yD,KAAK6yD,4BACdlnD,EAAY5C,YACZmT,EAAAuE,KAAKc,KAAI,GAGPvhB,KAAKuvD,aAAerzC,EAAAuE,KAAKc,KAAM,CACjCvhB,KAAKuG,MACH0V,EAAAnY,eAAegvD,mCACfnnD,EAAYvH,MAAOpE,KAAKuvD,YAAY1qD,WAAY,UAElD,SAEFwD,EAAOrI,KAAKuvD,YAQd,IAAImJ,GAAY,EAChB,GAAI/sD,EAAY7D,GAAGrB,EAAApE,YAAYspB,OAC7B,GAAIgnC,EAEF,GADAA,EAAW3yD,KAAKL,OAAOmxC,qBAAqB6hB,GACxCv2C,EAAAiY,gBAAgBs+B,IAAav2C,EAAAkY,aAAa6C,MAAO,CACnD,IAAIhJ,EAAQ,IAAIgtB,EAAA1uB,MAAMZ,EAASjrB,GAAO,EAAGyH,GACzC,OAAQ+T,EAAAoc,kBAAkBm6B,IACxB,OACExkC,EAAQA,EAAMhI,yBACZ1E,QACErF,EAAAgb,iBAAiBu7B,GACjB,IAGJ,MAEF,OACExkC,EAAQA,EAAMhI,yBACZ1E,QACErF,EAAAqc,oBAAoBk6B,GACpBv2C,EAAA24B,qBAAqB4d,KAGzB,MAEF,OACExkC,EAAQA,EAAM9H,uBAA4BjK,EAAAsc,iBAAiBi6B,IAC3D,MAEF,OACExkC,EAAQA,EAAM9H,uBAAuBjK,EAAAuc,iBAAiBg6B,IACtD,MAEF,QAEE,OADAlvD,QAAO,GACAzD,KAAKL,OAAOksC,oBAIvB,IAAIja,EAAeC,EAAgB/C,KAAK8C,aACxC,GAAKA,GACA,GAAIA,EAAazM,IAAIvkB,GAKxB,OAJAZ,KAAKuG,MACH0V,EAAAnY,eAAewhB,uBACf3Z,EAAY/K,KAAKwD,MAAOxD,GAEnBZ,KAAKL,OAAOksC,yBANFha,EAAgB/C,KAAK8C,aAAeA,EAAe,IAAI/S,IAQ1E+S,EAAa3pB,IAAIrH,EAAMutB,GACvBuqC,GAAY,OAEZ14D,KAAKsG,QACH2V,EAAAnY,eAAesvD,4DACfznD,EAAYvH,YAIhBpE,KAAKuG,MACH0V,EAAAnY,eAAe60D,wCACfhtD,EAAYvH,OAIlB,IAAKs0D,EAAW,CACVvqC,OAAK,EAKPA,EAHAxiB,EAAY3D,MAAMvB,EAAApE,YAAYm9C,IAAM/4C,EAAApE,YAAYspB,QAChDmD,EAAKhnB,GAAE,MAECgnB,EAAK6D,eAAetqB,EAAMzH,GAAM,EAAO+K,GAEvCkmB,EAAgB7C,SAAS3mB,EAAMzH,EAAM+K,GAE3CgnD,GACF8F,EAAa5yD,KAAK7F,KAAK44D,2BAA2BjtD,EAAY/K,KAAM+xD,IAChExkC,EAAM9lB,KAAKP,GAAG,KAChBgnB,EAAKQ,gBAAgBnB,EAAMzB,OAAQoC,EAAKsF,YAAYu+B,EAAUtqD,KAEvD8lB,EAAM9lB,KAAKP,GAAG,KACvBgnB,EAAKQ,gBAAgBnB,EAAMzB,OAAO,IAIxC,OAAO+rC,EAAanzD,OACO,GAAvBmzD,EAAanzD,OACXmzD,EAAa,GACbz4D,KAAKL,OAAOqqC,YAAY,KAAMyuB,EAAY,GAC5C,GAGNtJ,EAAAltD,UAAA6zD,qBAAA,SAAqB1lD,GACnB,OAAOpQ,KAAKmzD,kBAAkB/iD,EAAUrF,WAAYmR,EAAAuE,KAAKc,KAAI,MAG/D4tC,EAAAltD,UAAA8zD,sBAAA,SAAsB3lD,GACpB,IAAIzQ,EAASK,KAAKL,OAGd02D,EAAWr2D,KAAKs2D,cAClBt2D,KAAK6yD,4BAA4BziD,EAAUjC,UAAW+N,EAAAuE,KAAKW,KAAI,GAC/DphB,KAAKuvD,aAGP,IACGvvD,KAAKwgB,QAAQmB,eACd3hB,KAAK6xB,gBAAgB7pB,MAAMvB,EAAApE,YAAYqjB,QAAUjf,EAAApE,YAAY60D,iBAC7D,CAEA,IAAIC,EAAkBx3D,EAAOmxC,qBAAqBulB,GAClD,GACEj6C,EAAAiY,gBAAgB8iC,IAAoB/6C,EAAAkY,aAAa6C,OACf,GAAlC/a,EAAAoc,kBAAkB2+B,IAElB,IAAK/6C,EAAAgb,iBAAiB+/B,GAAkB,OAAOx3D,EAAOgrC,iBAItD0rB,EAAWr2D,KAAKs2D,cACdt2D,KAAK6yD,4BAA4BziD,EAAUjC,UAAW+N,EAAAuE,KAAKW,KAAI,GAC/DphB,KAAKuvD,aAMX,IAAI19B,EAAkB7xB,KAAK6xB,gBACvBriB,EAAQqiB,EAAgBpC,oBACxBqC,EAAaD,EAAgB/C,KAC7BA,EAAOgD,EAAWO,OACtBR,EAAgB/C,KAAOA,EACvB,IAAIkD,EAAa,SAAWxiB,EAC5Bsf,EAAKkD,WAAaA,EAClB,IAAID,EAAgB,YAAcviB,EAClCsf,EAAKiD,cAAgBA,EAErB,IAAI/e,EAAOhT,KAAKuyD,iBAAiBniD,EAAUA,WAEvCmmD,EAAaznC,EAAK9mB,MAAK,IAc3B,OAXA6pB,EAAgB/C,KAAOA,EAAK0D,OAC5BX,EAAgBlC,oBAChBb,EAAKsD,MACH,KAMGN,EAAW+B,mBAAmB/E,GAE5BnvB,EAAOqqC,YAAYhY,GACxBryB,EAAO4qC,WAAWxY,EAChBpyB,EAAO8qC,SAAS4rB,EACdE,EACIvjD,EACArT,EAAOqqC,YAAY,MACjBh3B,EACArT,EAAOwqC,YAAYpY,IACpB,QAabo9B,EAAAltD,UAAA42D,sBAAA,SACE1sD,EACA2sD,EACAC,GAEAt1D,OAAO0I,EAAQrE,GAAGrB,EAAApE,YAAYiqB,UAC9B,IAAIjkB,EAAO8D,EAAQ9D,KACnB,QACG0wD,GACD1wD,EAAKP,GAAE,IACPgxD,EAAehxD,GAAE,IACjBO,EAAKqvB,KAAOohC,EAAephC,MACtB13B,KAAKuvD,YAAcuJ,GAAgB/xD,MACnC/G,KAAKuvD,YAAclnD,GAAMtB,MAE9B,OACA,OACE,IAAI0wB,EAAQpvB,EAAK0zC,yBAAyB7/B,EAAAuE,KAAKG,KAC/C,OAAO5gB,KAAKL,OAAO8mC,UACQ,GAAzBt6B,EAAQigB,kBACJ2iB,QAAQ5iC,EAAQkgB,uBAAyBoL,GAASA,EAClD,GAGR,OACA,OACA,QACE,IAAIuhC,EAAO7sD,EAAQ9D,KAAKkvB,wBAAwBrb,EAAAuE,KAAKG,KACrD,OAAO5gB,KAAKL,OAAO8mC,UACQ,GAAzBt6B,EAAQigB,kBACJ2iB,QAAQ5iC,EAAQkgB,sBAAwB2sC,EACxC,GAGR,OACA,OACE,OAAOh5D,KAAKL,OAAO8mC,UACQ,GAAzBt6B,EAAQigB,kBACJ2iB,QAAQ5iC,EAAQkgB,sBAChB,GAGR,OACA,OACE,IAAKlgB,EAAQ0f,QAAQrL,QAAQkB,SAC3B,OAAO1hB,KAAKL,OAAO8mC,UACQ,GAAzBt6B,EAAQigB,kBACJ2iB,QAAQ5iC,EAAQkgB,sBAChB,GAKV,OACA,OACE,OAAgC,GAAzBlgB,EAAQigB,kBACXpsB,KAAKL,OAAOknC,UACVkI,QAAQ5iC,EAAQkgB,sBAChB2iB,SAAS7iC,EAAQkgB,uBAEnBrsB,KAAKL,OAAOknC,UAAU,GAE5B,QAEE,IAAM16B,EAAQ6a,aAAam0B,EAAAx8B,eAAe/I,UAAYkjD,GAAkB58C,EAAAuE,KAAKY,IAC3E,OAAOrhB,KAAKL,OAAOwnC,UAAgCh7B,EAASogB,oBAG9DvsB,KAAKuvD,YAAcrzC,EAAAuE,KAAKY,IAE1B,QACE,OAAOrhB,KAAKL,OAAOsnC,UAAgC96B,EAASogB,oBAE9D,QAEE,OADA9oB,QAAO,GACAzD,KAAKL,OAAOksC,sBAKzBsjB,EAAAltD,UAAAkxD,kBAAA,SACEpoD,EACA+tD,EACAG,EACAC,GAIA,IAAI/uD,EACJ,OAHAnK,KAAKuvD,YAAcuJ,EAGX/tD,EAAWhE,MACjB,KAAKoV,EAAAtV,SAASoQ,UACZ9M,EAAOnK,KAAKm5D,2BAAgDpuD,EAAY+tD,GACxE,MAEF,KAAK38C,EAAAtV,SAASqQ,OACZ/M,EAAOnK,KAAKo5D,wBAA0CruD,EAAY+tD,GAClE,MAEF,KAAK38C,EAAAtV,SAASS,KACZ6C,EAAOnK,KAAKq5D,sBAAsCtuD,EAAY+tD,GAC9D,MAEF,KAAK38C,EAAAtV,SAASuQ,MACZjN,EAAOnK,KAAKs5D,uBAAwCvuD,EAAY+tD,GAChE,MAEF,KAAK38C,EAAAtV,SAASU,cACZ4C,EAAOnK,KAAKu5D,+BAAwDxuD,EAAY+tD,GAChF,MAEF,KAAK38C,EAAAtV,SAAS0Q,SACZpN,EAAOnK,KAAKw5D,0BAA8CzuD,EAAY+tD,GACtE,MAEF,KAAK38C,EAAAtV,SAASQ,WACd,KAAK8U,EAAAtV,SAASM,MACd,KAAKgV,EAAAtV,SAASI,KACd,KAAKkV,EAAAtV,SAASoR,KACd,KAAKkE,EAAAtV,SAASmR,MACd,KAAKmE,EAAAtV,SAASK,KACZiD,EAAOnK,KAAKy5D,4BACY1uD,EACtB+tD,EACc,GAAdG,GAEF,MAEF,KAAK98C,EAAAtV,SAAS2Q,WACZrN,EAAOnK,KAAK05D,4BAAkD3uD,EAAY+tD,GAC1E,MAEF,KAAK38C,EAAAtV,SAASG,QACZmD,EAAOnK,KAAK25D,yBAA4C5uD,EAAY+tD,GACpE,MAEF,KAAK38C,EAAAtV,SAAS6Q,IACZvN,EAAOnK,KAAK45D,qBAAoC7uD,EAAY+tD,GAC5D,MAEF,KAAK38C,EAAAtV,SAAS+Q,cACZzN,EAAOnK,KAAK65D,+BAAwD9uD,EAAY+tD,GAChF,MAEF,KAAK38C,EAAAtV,SAASW,eACZ2C,EAAOnK,KAAK85D,gCACgB/uD,EAC1B+tD,EACc,GAAdG,GAEF,MAEF,KAAK98C,EAAAtV,SAASiR,QACZ3N,EAAOnK,KAAK+5D,yBAA4ChvD,EAAY+tD,GACpE,MAEF,KAAK38C,EAAAtV,SAASsR,aACZhO,EAAOnK,KAAKg6D,8BAAsDjvD,EAAY+tD,GAC9E,MAEF,KAAK38C,EAAAtV,SAASuR,YACZjO,EAAOnK,KAAKi6D,6BAAoDlvD,EAAY+tD,GAC5E,MAEF,QACE94D,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAEb+F,EAAOnK,KAAKL,OAAOksC,oBAIvB,IAAI0jB,EAAcvvD,KAAKuvD,YASvB,OARkB,GAAd0J,GAAyC1J,GAAeuJ,GAC1D3uD,EAAOnK,KAAKk6D,kBAAkB/vD,EAAMolD,EAAauJ,EAAgBG,EAAgBC,EAAUnuD,GAC3F/K,KAAKuvD,YAAcuJ,GACF,GAARI,IACT/uD,EAAOnK,KAAKm6D,uBAAuBhwD,EAAMolD,IAGvCvvD,KAAKwgB,QAAQqP,WAAW7vB,KAAKg2D,iBAAiB7rD,EAAMY,EAAW3G,OAC5D+F,GAGTglD,EAAAltD,UAAA4wD,4BAAA,SACE9nD,EACA+tD,EACAI,GAEA,OAAOl5D,KAAKmzD,kBACVpoD,EACA+tD,GAAkB58C,EAAAuE,KAAKc,KACnBrF,EAAAuE,KAAKG,IACLk4C,EAAc,EAElBI,IAIJ/J,EAAAltD,UAAA6uC,qBAAA,SACE/lC,EACA+tD,EACAG,EACAC,GAEA,OAAOl5D,KAAKL,OAAOmxC,qBACjB9wC,KAAKmzD,kBAAkBpoD,EAAY+tD,EAAgBG,EAAgBC,KAIvE/J,EAAAltD,UAAAi4D,kBAAA,SACE/vD,EACA4uB,EACA/tB,EACAiuD,EACAC,EACAzM,GAEAhpD,OAAqB,GAAdw1D,GACP,IAAIt5D,EAASK,KAAKL,OAGlB,OAAiB,IAAbo5B,EAAShyB,MACXtD,OAAkB,IAAXuH,EAAOjE,MACd/G,KAAKuG,MACH0V,EAAAnY,eAAegvD,mCACfrG,EAAWroD,MAAO20B,EAASl0B,WAAYmG,EAAOnG,YAEzClF,EAAOksC,qBAID,IAAX7gC,EAAOjE,KAA8BpH,EAAO0qC,WAAWlgC,IAEtD4uB,EAAS7H,eAAelmB,IACT,GAAdiuD,GACFj5D,KAAKuG,MACH0V,EAAAnY,eAAes2D,sDACf3N,EAAWroD,MAAO20B,EAASl0B,WAAYmG,EAAOnG,YAKhDk0B,EAASjxB,GAAE,GAGTkD,EAAOlD,GAAE,GACM,IAAbixB,EAAShyB,KAGI,IAAXiE,EAAOjE,OACToD,EAAOxK,EAAO0nC,YAAYjrB,EAAA8b,QAAQmiC,WAAYlwD,IAM5B,IAAXa,EAAOjE,OAChBoD,EAAOxK,EAAO0nC,YAAYjrB,EAAA8b,QAAQoiC,UAAWnwD,IAMtCa,EAAOlD,GAAE,GAMZqC,EAHW,IAAb4uB,EAAShyB,KACPiE,EAAOlD,GAAE,GACPkD,EAAOlD,GAAE,IACJnI,EAAO0nC,YAAYjrB,EAAA8b,QAAQqiC,cAAepwD,GAE1CxK,EAAO0nC,YAAYjrB,EAAA8b,QAAQsiC,cAAerwD,GAG/Ca,EAAOlD,GAAE,IACJnI,EAAO0nC,YAAYjrB,EAAA8b,QAAQuiC,cAAetwD,GAE1CxK,EAAO0nC,YAAYjrB,EAAA8b,QAAQwiC,cAAevwD,GAMjDa,EAAOlD,GAAE,GACPkD,EAAOlD,GAAE,IACJnI,EAAO0nC,YAAYjrB,EAAA8b,QAAQyiC,cAAexwD,GAE1CxK,EAAO0nC,YAAYjrB,EAAA8b,QAAQ0iC,cAAezwD,GAG/Ca,EAAOlD,GAAE,IACJnI,EAAO0nC,YAAYjrB,EAAA8b,QAAQ2iC,cAAe1wD,GAE1CxK,EAAO0nC,YAAYjrB,EAAA8b,QAAQ4iC,cAAe3wD,IAOvD1G,OAAmB,GAAZuH,EAAOpD,MAAyB,sBACvCuC,EAAOxK,EAAO0qC,WAAWlgC,IAIlB4uB,EAASjxB,GAAE,IAAuBkD,EAAOlD,GAAE,GAKhDqC,EAFW,IAAXa,EAAOjE,KACLgyB,EAASjxB,GAAE,IACNnI,EAAO0nC,YACZtO,EAASjxB,GAAE,GACPsU,EAAA8b,QAAQ6iC,gBACR3+C,EAAA8b,QAAQ8iC,gBACZ7wD,GAGKxK,EAAO0nC,YACZtO,EAASjxB,GAAE,GACPsU,EAAA8b,QAAQ+iC,gBACR7+C,EAAA8b,QAAQgjC,gBACZ/wD,GAMA4uB,EAASjxB,GAAE,IACNnI,EAAO0nC,YACZtO,EAASjxB,GAAE,GACPsU,EAAA8b,QAAQijC,gBACR/+C,EAAA8b,QAAQkjC,gBACZjxD,GAGKxK,EAAO0nC,YACZtO,EAASjxB,GAAE,GACPsU,EAAA8b,QAAQmjC,gBACRj/C,EAAA8b,QAAQojC,gBACZnxD,GAQF4uB,EAASjxB,GAAE,IAGRkD,EAAOlD,GAAE,MACZqC,EAAOxK,EAAO0nC,YAAYjrB,EAAA8b,QAAQqjC,QAASpxD,IAIpCa,EAAOlD,GAAE,KAClBqC,EAAOxK,EAAO0nC,YACZr8B,EAAOlD,GAAE,GAAqBsU,EAAA8b,QAAQsjC,UAAYp/C,EAAA8b,QAAQujC,UAC1Dz7D,KAAKm6D,uBAAuBhwD,EAAM4uB,IAEpCmgC,EAAQ,GAKJngC,EAASjxB,GAAE,KAETixB,EAASrB,KAAO1sB,EAAO0sB,OACzBvtB,EAAOnK,KAAKm6D,uBAAuBhwD,EAAM4uB,GACzCmgC,EAAQ,GAMhBl5D,KAAKuvD,YAAcvkD,EACJ,GAARkuD,EACHl5D,KAAKm6D,uBAAuBhwD,EAAMa,GAClCb,IAGNglD,EAAAltD,UAAAk3D,2BAAA,SAA2BpuD,EAAiC+tD,GAC1D,IAAI9tD,EAAShL,KAAKggB,SAASopC,YACzBr+C,EAAWC,OACXhL,KAAK6xB,gBAAgB/C,KAAK9B,yBAE5B,OAAKhiB,EACEhL,KAAKmzD,kBAAkBpoD,EAAWA,WAAYC,EAAM,KADvChL,KAAKL,OAAOksC,qBASlCsjB,EAAAltD,UAAAm3D,wBAAA,SACEruD,EACA+tD,GAEA,IAII4C,EACAC,EACAC,EACAC,EACAC,EAEA3xD,EAVAxK,EAASK,KAAKL,OACdyL,EAAOL,EAAWK,KAClBC,EAAQN,EAAWM,MASnB0wD,GAAW,EAEX5wD,EAAWJ,EAAWI,SAC1B,OAAQA,GACN,KAAKzE,EAAAC,MAAM45C,SAKT,GAJAmb,EAAW17D,KAAK6yD,4BAA4BznD,EAAM0tD,EAAc,GAChE6C,EAAW37D,KAAKuvD,YAGZvvD,KAAKuvD,YAAYznD,GAAE,KAAuB,CAE5C,GADI0zC,EAAiBmgB,EAASngB,eAG5B,GADIhqB,EAAWgqB,EAAenqB,eAAe8pB,EAAAn/B,aAAa8B,IAC5C,CACZ3T,EAAOnK,KAAKg8D,sBAAsBxqC,EAAUpmB,EAAMswD,EAAUrwD,EAAON,GACnE,MAOJ,OAJA/K,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAENpE,KAAKL,OAAOksC,oBAKrB,GAFA+vB,EAAY57D,KAAK6yD,4BAA4BxnD,EAAOswD,EAAQ,GAC5DE,EAAY77D,KAAKuvD,cACbuM,EAAa5/C,EAAAuE,KAAK87B,iBAAiBof,EAAUE,GAAW,IAuB1D,OALA77D,KAAKuG,MACH0V,EAAAnY,eAAem4D,8CACflxD,EAAW3G,MAAO,IAAKu3D,EAAS92D,WAAYg3D,EAAUh3D,YAExD7E,KAAKuvD,YAAcuJ,EACZn5D,EAAOksC,oBAEhB,OAxBE6vB,EAAW17D,KAAKk6D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB1wD,GAEFwwD,EAAY57D,KAAKk6D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBzwD,GAUIywD,EAAW/0D,MACjB,OACA,OACA,OACEoD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASS,MAAOimC,EAAUE,GACrD,MAEF,OACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASW,MAAO+lC,EAAUE,GACrD,MAEF,OACEzxD,EAAOxK,EAAO6nC,aACZxnC,KAAKwgB,QAAQkB,SACTtF,EAAA4Y,SAASW,MACTvZ,EAAA4Y,SAASS,MACbimC,EACAE,GAEF,MAEF,OACA,OACA,OACA,QACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASU,MAAOgmC,EAAUE,GACrD,MAEF,OACEzxD,EAAOxK,EAAO6nC,aACZxnC,KAAKwgB,QAAQkB,SACTtF,EAAA4Y,SAASY,MACTxZ,EAAA4Y,SAASU,MACbgmC,EACAE,GAEF,MAEF,OACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASY,MAAO8lC,EAAUE,GACrD,MAEF,QACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASa,MAAO6lC,EAAUE,GACrD,MAEF,QACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASc,MAAO4lC,EAAUE,GACrD,MAEF,QACEn4D,QAAO,GACP0G,EAAOxK,EAAOksC,oBAGlB7rC,KAAKuvD,YAAcrzC,EAAAuE,KAAKW,KACxB,MAEF,KAAK1a,EAAAC,MAAM65C,YAKT,GAJAkb,EAAW17D,KAAK6yD,4BAA4BznD,EAAM0tD,EAAc,GAChE6C,EAAW37D,KAAKuvD,YAGZvvD,KAAKuvD,YAAYznD,GAAE,KAAuB,CAE5C,GADI0zC,EAAiBmgB,EAASngB,eAG5B,GADIhqB,EAAWgqB,EAAenqB,eAAe8pB,EAAAn/B,aAAa0B,IAC5C,CACZvT,EAAOnK,KAAKg8D,sBAAsBxqC,EAAUpmB,EAAMswD,EAAUrwD,EAAON,GACnE,MAOJ,OAJA/K,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAENpE,KAAKL,OAAOksC,oBAKrB,GAFA+vB,EAAY57D,KAAK6yD,4BAA4BxnD,EAAOswD,EAAQ,GAC5DE,EAAY77D,KAAKuvD,cACbuM,EAAa5/C,EAAAuE,KAAK87B,iBAAiBof,EAAUE,GAAW,IAuB1D,OALA77D,KAAKuG,MACH0V,EAAAnY,eAAem4D,8CACflxD,EAAW3G,MAAO,IAAKu3D,EAAS92D,WAAYg3D,EAAUh3D,YAExD7E,KAAKuvD,YAAcuJ,EACZn5D,EAAOksC,oBAEhB,OAxBE6vB,EAAW17D,KAAKk6D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB1wD,GAEFwwD,EAAY57D,KAAKk6D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBzwD,GAUIywD,EAAW/0D,MACjB,OACA,OACA,OACEoD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASqB,MAAOqlC,EAAUE,GACrD,MAEF,OACEzxD,EAAOxK,EAAO6nC,aACZxnC,KAAKwgB,QAAQkB,SACTtF,EAAA4Y,SAASuB,MACTna,EAAA4Y,SAASqB,MACbqlC,EACAE,GAEF,MAEF,OACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASuB,MAAOmlC,EAAUE,GACrD,MAEF,OACA,OACA,OACA,QACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASsB,MAAOolC,EAAUE,GACrD,MAEF,OACEzxD,EAAOxK,EAAO6nC,aACZxnC,KAAKwgB,QAAQkB,SACTtF,EAAA4Y,SAASwB,MACTpa,EAAA4Y,SAASsB,MACbolC,EACAE,GAEF,MAEF,OACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASwB,MAAOklC,EAAUE,GACrD,MAEF,QACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASyB,MAAOilC,EAAUE,GACrD,MAEF,QACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAAS0B,MAAOglC,EAAUE,GACrD,MAEF,QACEn4D,QAAO,GACP0G,EAAOxK,EAAOksC,oBAGlB7rC,KAAKuvD,YAAcrzC,EAAAuE,KAAKW,KACxB,MAEF,KAAK1a,EAAAC,MAAM85C,gBAKT,GAJAib,EAAW17D,KAAK6yD,4BAA4BznD,EAAM0tD,EAAc,GAChE6C,EAAW37D,KAAKuvD,YAGZvvD,KAAKuvD,YAAYznD,GAAE,KAAuB,CAE5C,GADI0zC,EAAiBmgB,EAASngB,eAG5B,GADIhqB,EAAWgqB,EAAenqB,eAAe8pB,EAAAn/B,aAAa+B,IAC5C,CACZ5T,EAAOnK,KAAKg8D,sBAAsBxqC,EAAUpmB,EAAMswD,EAAUrwD,EAAON,GACnE,MAOJ,OAJA/K,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAENpE,KAAKL,OAAOksC,oBAKrB,GAFA+vB,EAAY57D,KAAK6yD,4BAA4BxnD,EAAOswD,EAAQ,GAC5DE,EAAY77D,KAAKuvD,cACbuM,EAAa5/C,EAAAuE,KAAK87B,iBAAiBof,EAAUE,GAAW,IAuB1D,OALA77D,KAAKuG,MACH0V,EAAAnY,eAAem4D,8CACflxD,EAAW3G,MAAO,KAAMu3D,EAAS92D,WAAYg3D,EAAUh3D,YAEzD7E,KAAKuvD,YAAcuJ,EACZn5D,EAAOksC,oBAEhB,OAxBE6vB,EAAW17D,KAAKk6D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB1wD,GAEFwwD,EAAY57D,KAAKk6D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBzwD,GAUIywD,EAAW/0D,MACjB,OACA,OACA,OACEoD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASe,MAAO2lC,EAAUE,GACrD,MAEF,OACEzxD,EAAOxK,EAAO6nC,aACZxnC,KAAKwgB,QAAQkB,SACTtF,EAAA4Y,SAASiB,MACT7Z,EAAA4Y,SAASe,MACb2lC,EACAE,GAEF,MAEF,OACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASiB,MAAOylC,EAAUE,GACrD,MAEF,OACA,OACA,OACA,QACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASgB,MAAO0lC,EAAUE,GACrD,MAEF,OACEzxD,EAAOxK,EAAO6nC,aACZxnC,KAAKwgB,QAAQkB,SACTtF,EAAA4Y,SAASkB,MACT9Z,EAAA4Y,SAASgB,MACb0lC,EACAE,GAEF,MAEF,OACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASkB,MAAOwlC,EAAUE,GACrD,MAEF,QACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASmB,MAAOulC,EAAUE,GACrD,MAEF,QACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASoB,MAAOslC,EAAUE,GACrD,MAEF,QACEn4D,QAAO,GACP0G,EAAOxK,EAAOksC,oBAGlB7rC,KAAKuvD,YAAcrzC,EAAAuE,KAAKW,KACxB,MAEF,KAAK1a,EAAAC,MAAM+5C,mBAKT,GAJAgb,EAAW17D,KAAK6yD,4BAA4BznD,EAAM0tD,EAAc,GAChE6C,EAAW37D,KAAKuvD,YAGZvvD,KAAKuvD,YAAYznD,GAAE,KAAuB,CAE5C,GADI0zC,EAAiBmgB,EAASngB,eAG5B,GADIhqB,EAAWgqB,EAAenqB,eAAe8pB,EAAAn/B,aAAa2B,IAC5C,CACZxT,EAAOnK,KAAKg8D,sBAAsBxqC,EAAUpmB,EAAMswD,EAAUrwD,EAAON,GACnE,MAOJ,OAJA/K,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAENpE,KAAKL,OAAOksC,oBAKrB,GAFA+vB,EAAY57D,KAAK6yD,4BAA4BxnD,EAAOswD,EAAQ,GAC5DE,EAAY77D,KAAKuvD,cACbuM,EAAa5/C,EAAAuE,KAAK87B,iBAAiBof,EAAUE,GAAW,IAuB1D,OALA77D,KAAKuG,MACH0V,EAAAnY,eAAem4D,8CACflxD,EAAW3G,MAAO,KAAMu3D,EAAS92D,WAAYg3D,EAAUh3D,YAEzD7E,KAAKuvD,YAAcuJ,EACZn5D,EAAOksC,oBAEhB,OAxBE6vB,EAAW17D,KAAKk6D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB1wD,GAEFwwD,EAAY57D,KAAKk6D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBzwD,GAUIywD,EAAW/0D,MACjB,OACA,OACA,OACEoD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAAS2B,MAAO+kC,EAAUE,GACrD,MAEF,OACEzxD,EAAOxK,EAAO6nC,aACZxnC,KAAKwgB,QAAQkB,SACTtF,EAAA4Y,SAAS6B,MACTza,EAAA4Y,SAAS2B,MACb+kC,EACAE,GAEF,MAEF,OACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAAS6B,MAAO6kC,EAAUE,GACrD,MAEF,OACA,OACA,OACA,QACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAAS4B,MAAO8kC,EAAUE,GACrD,MAEF,OACEzxD,EAAOxK,EAAO6nC,aACZxnC,KAAKwgB,QAAQkB,SACTtF,EAAA4Y,SAAS8B,MACT1a,EAAA4Y,SAAS4B,MACb8kC,EACAE,GAEF,MAEF,OACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAAS8B,MAAO4kC,EAAUE,GACrD,MAEF,QACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAAS+B,MAAO2kC,EAAUE,GACrD,MAEF,QACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASgC,MAAO0kC,EAAUE,GACrD,MAEF,QACEn4D,QAAO,GACP0G,EAAOxK,EAAOksC,oBAGlB7rC,KAAKuvD,YAAcrzC,EAAAuE,KAAKW,KACxB,MAGF,KAAK1a,EAAAC,MAAMk6C,qBACX,KAAKn6C,EAAAC,MAAMg6C,cAUT,GAJA+a,EAAW17D,KAAK6yD,4BAA4BznD,EAAM0tD,EAAc,GAChE6C,EAAW37D,KAAKuvD,YAGZpkD,GAAYzE,EAAAC,MAAMg6C,eAAiB3gD,KAAKuvD,YAAYznD,GAAE,KAExD,GADI0zC,EAAiBmgB,EAASngB,eAG5B,GADIhqB,EAAWgqB,EAAenqB,eAAe8pB,EAAAn/B,aAAawB,IAC5C,CACZrT,EAAOnK,KAAKg8D,sBAAsBxqC,EAAUpmB,EAAMswD,EAAUrwD,EAAON,GACnE,MAQN,GAFA6wD,EAAY57D,KAAK6yD,4BAA4BxnD,EAAOswD,EAAQ,GAC5DE,EAAY77D,KAAKuvD,cACbuM,EAAa5/C,EAAAuE,KAAK87B,iBAAiBof,EAAUE,GAAW,IAuB1D,OALA77D,KAAKuG,MACH0V,EAAAnY,eAAem4D,8CACflxD,EAAW3G,MAAOsC,EAAA25C,sBAAsBt1C,EAAWI,UAAWwwD,EAAS92D,WAAYg3D,EAAUh3D,YAE/F7E,KAAKuvD,YAAcuJ,EACZn5D,EAAOksC,oBAEhB,OAxBE6vB,EAAW17D,KAAKk6D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB1wD,GAEFwwD,EAAY57D,KAAKk6D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBzwD,GAUIywD,EAAW/0D,MACjB,OACA,OACA,OACA,OACA,OACA,OACA,QACEoD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASC,MAAOymC,EAAUE,GACrD,MAEF,OACA,OACEzxD,EAAOxK,EAAO6nC,aACZxnC,KAAKwgB,QAAQkB,SACTtF,EAAA4Y,SAASE,MACT9Y,EAAA4Y,SAASC,MACbymC,EACAE,GAEF,MAEF,OACA,OACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASE,MAAOwmC,EAAUE,GACrD,MAEF,QACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASG,MAAOumC,EAAUE,GACrD,MAEF,QACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASI,MAAOsmC,EAAUE,GACrD,MAEF,QACEn4D,QAAO,GACP0G,EAAOxK,EAAOksC,oBAGlB7rC,KAAKuvD,YAAcrzC,EAAAuE,KAAKW,KACxB,MAEF,KAAK1a,EAAAC,MAAMm6C,0BACX,KAAKp6C,EAAAC,MAAMi6C,mBAKT,GAJA8a,EAAW17D,KAAK6yD,4BAA4BznD,EAAM0tD,EAAc,GAChE6C,EAAW37D,KAAKuvD,YAGZpkD,GAAYzE,EAAAC,MAAMi6C,oBAAsB5gD,KAAKuvD,YAAYznD,GAAE,KAE7D,GADI0zC,EAAiBmgB,EAASngB,eAG5B,GADIhqB,EAAWgqB,EAAenqB,eAAe8pB,EAAAn/B,aAAayB,IAC5C,CACZtT,EAAOnK,KAAKg8D,sBAAsBxqC,EAAUpmB,EAAMswD,EAAUrwD,EAAON,GACnE,MAQN,GAFA6wD,EAAY57D,KAAK6yD,4BAA4BxnD,EAAOswD,EAAQ,GAC5DE,EAAY77D,KAAKuvD,cACbuM,EAAa5/C,EAAAuE,KAAK87B,iBAAiBof,EAAUE,GAAW,IAuB1D,OALA77D,KAAKuG,MACH0V,EAAAnY,eAAem4D,8CACflxD,EAAW3G,MAAOsC,EAAA25C,sBAAsBt1C,EAAWI,UAAWwwD,EAAS92D,WAAYg3D,EAAUh3D,YAE/F7E,KAAKuvD,YAAcuJ,EACZn5D,EAAOksC,oBAEhB,OAxBE6vB,EAAW17D,KAAKk6D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB1wD,GAEFwwD,EAAY57D,KAAKk6D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBzwD,GAUIywD,EAAW/0D,MACjB,OACA,OACA,OACA,OACA,OACA,OACA,QACEoD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASK,MAAOqmC,EAAUE,GACrD,MAEF,OACA,OACEzxD,EAAOxK,EAAO6nC,aACZxnC,KAAKwgB,QAAQkB,SACTtF,EAAA4Y,SAASM,MACTlZ,EAAA4Y,SAASK,MACbqmC,EACAE,GAEF,MAEF,OACA,OACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASM,MAAOomC,EAAUE,GACrD,MAEF,QACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASO,MAAOmmC,EAAUE,GACrD,MAEF,QACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASQ,MAAOkmC,EAAUE,GACrD,MAEF,QACEn4D,QAAO,GACP0G,EAAOxK,EAAOksC,oBAGlB7rC,KAAKuvD,YAAcrzC,EAAAuE,KAAKW,KACxB,MAEF,KAAK1a,EAAAC,MAAMo7C,OACT,OAAO/hD,KAAKk8D,kBAAkB9wD,EAAMC,EAAOytD,GAE7C,KAAKpyD,EAAAC,MAAMq7C,YAAa+Z,GAAW,EACnC,KAAKr1D,EAAAC,MAAMsX,KAKT,GAJAy9C,EAAW17D,KAAK6yD,4BAA4BznD,EAAM0tD,EAAc,GAChE6C,EAAW37D,KAAKuvD,YAGZvvD,KAAKuvD,YAAYznD,GAAE,KAAuB,CAE5C,GADI0zC,EAAiBmgB,EAASngB,eAG5B,GADIhqB,EAAWgqB,EAAenqB,eAAe8pB,EAAAn/B,aAAae,KAC5C,CACZ5S,EAAOnK,KAAKg8D,sBAAsBxqC,EAAUpmB,EAAMswD,EAAUrwD,EAAON,GACnE,MAOJ,OAJA/K,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAENpE,KAAKL,OAAOksC,oBAGrB,GAAIkwB,EACFH,EAAY57D,KAAKmzD,kBAAkB9nD,EAAOswD,EAAQ,SAC7C,CAGL,GAFAC,EAAY57D,KAAK6yD,4BAA4BxnD,EAAOswD,EAAQ,GAC5DE,EAAY77D,KAAKuvD,cACbuM,EAAa5/C,EAAAuE,KAAK87B,iBAAiBof,EAAUE,GAAW,IAuB1D,OALA77D,KAAKuG,MACH0V,EAAAnY,eAAem4D,8CACflxD,EAAW3G,MAAO,IAAKu3D,EAAS92D,WAAYg3D,EAAUh3D,YAExD7E,KAAKuvD,YAAcuJ,EACZn5D,EAAOksC,oBAtBd6vB,EAAW17D,KAAKk6D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB1wD,GAEFwwD,EAAY57D,KAAKk6D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBzwD,GAWN,OAAQrL,KAAKuvD,YAAYxoD,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEoD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAAS4+B,OAAQ8H,EAAUE,GACtD,MAEF,OACA,OACEzxD,EAAOxK,EAAO6nC,aACZxnC,KAAKwgB,QAAQkB,SACTtF,EAAA4Y,SAASmnC,OACT//C,EAAA4Y,SAAS4+B,OACb8H,EACAE,GAEF,MAEF,OACA,OACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASmnC,OAAQT,EAAUE,GACtD,MAEF,QACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASonC,OAAQV,EAAUE,GACtD,MAEF,QACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASqnC,OAAQX,EAAUE,GACtD,MAEF,QACEn4D,QAAO,GACP0G,EAAOxK,EAAOksC,oBAGlB,MAEF,KAAKnlC,EAAAC,MAAMs7C,aAAc8Z,GAAW,EACpC,KAAKr1D,EAAAC,MAAMwX,MAKT,GAJAu9C,EAAW17D,KAAK6yD,4BAA4BznD,EAAM0tD,EAAc,GAChE6C,EAAW37D,KAAKuvD,YAGZvvD,KAAKuvD,YAAYznD,GAAE,KAAuB,CAE5C,GADI0zC,EAAiBmgB,EAASngB,eAG5B,GADIhqB,EAAWgqB,EAAenqB,eAAe8pB,EAAAn/B,aAAagB,KAC5C,CACZ7S,EAAOnK,KAAKg8D,sBAAsBxqC,EAAUpmB,EAAMswD,EAAUrwD,EAAON,GACnE,MAOJ,OAJA/K,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAENpE,KAAKL,OAAOksC,oBAGrB,GAAIkwB,EACFH,EAAY57D,KAAKmzD,kBAAkB9nD,EAAOswD,EAAQ,KAClDE,EAAY77D,KAAKuvD,gBACZ,CAGL,GAFAqM,EAAY57D,KAAK6yD,4BAA4BxnD,EAAOswD,EAAQ,GAC5DE,EAAY77D,KAAKuvD,cACbuM,EAAa5/C,EAAAuE,KAAK87B,iBAAiBof,EAAUE,GAAW,IAuB1D,OALA77D,KAAKuG,MACH0V,EAAAnY,eAAem4D,8CACflxD,EAAW3G,MAAO,IAAKu3D,EAAS92D,WAAYg3D,EAAUh3D,YAExD7E,KAAKuvD,YAAcuJ,EACZn5D,EAAOksC,oBAtBd6vB,EAAW17D,KAAKk6D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB1wD,GAEFwwD,EAAY57D,KAAKk6D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBzwD,GAWN,OAAQrL,KAAKuvD,YAAYxoD,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEoD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASsnC,OAAQZ,EAAUE,GACtD,MAEF,OACA,OACEzxD,EAAOxK,EAAO6nC,aACZxnC,KAAKwgB,QAAQkB,SACTtF,EAAA4Y,SAASunC,OACTngD,EAAA4Y,SAASsnC,OACbZ,EACAE,GAEF,MAEF,OACA,OACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASunC,OAAQb,EAAUE,GACtD,MAEF,QACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASwnC,OAAQd,EAAUE,GACtD,MAEF,QACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASynC,OAAQf,EAAUE,GACtD,MAEF,QACEn4D,QAAO,GACP0G,EAAOxK,EAAOksC,oBAGlB,MAEF,KAAKnlC,EAAAC,MAAMu7C,gBAAiB6Z,GAAW,EACvC,KAAKr1D,EAAAC,MAAMq6C,SAKT,GAJA0a,EAAW17D,KAAK6yD,4BAA4BznD,EAAM0tD,EAAc,GAChE6C,EAAW37D,KAAKuvD,YAGZvvD,KAAKuvD,YAAYznD,GAAE,KAAuB,CAE5C,GADI0zC,EAAiBmgB,EAASngB,eAG5B,GADIhqB,EAAWgqB,EAAenqB,eAAe8pB,EAAAn/B,aAAaiB,KAC5C,CACZ9S,EAAOnK,KAAKg8D,sBAAsBxqC,EAAUpmB,EAAMswD,EAAUrwD,EAAON,GACnE,MAOJ,OAJA/K,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAENpE,KAAKL,OAAOksC,oBAGrB,GAAIkwB,EACFL,EAAW17D,KAAKm6D,uBAAuBuB,EAAUC,GACjDC,EAAY57D,KAAKmzD,kBAAkB9nD,EAAOswD,EAAQ,SAC7C,CAGL,GAFAC,EAAY57D,KAAK6yD,4BAA4BxnD,EAAOswD,EAAQ,GAC5DE,EAAY77D,KAAKuvD,cACbuM,EAAa5/C,EAAAuE,KAAK87B,iBAAiBof,EAAUE,GAAW,IAuB1D,OALA77D,KAAKuG,MACH0V,EAAAnY,eAAem4D,8CACflxD,EAAW3G,MAAO,IAAKu3D,EAAS92D,WAAYg3D,EAAUh3D,YAExD7E,KAAKuvD,YAAcuJ,EACZn5D,EAAOksC,oBAtBd6vB,EAAW17D,KAAKk6D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB1wD,GAEFwwD,EAAY57D,KAAKk6D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBzwD,GAWN,OAAQrL,KAAKuvD,YAAYxoD,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEoD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASiC,OAAQykC,EAAUE,GACtD,MAEF,OACA,OACEzxD,EAAOxK,EAAO6nC,aACZxnC,KAAKwgB,QAAQkB,SACTtF,EAAA4Y,SAAS0nC,OACTtgD,EAAA4Y,SAASiC,OACbykC,EACAE,GAEF,MAEF,OACA,OACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAAS0nC,OAAQhB,EAAUE,GACtD,MAEF,QACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAAS2nC,OAAQjB,EAAUE,GACtD,MAEF,QACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAAS4nC,OAAQlB,EAAUE,GACtD,MAEF,QACEn4D,QAAO,GACP0G,EAAOxK,EAAOksC,oBAGlB,MAEF,KAAKnlC,EAAAC,MAAMw7C,yBAA0B4Z,GAAW,EAChD,KAAKr1D,EAAAC,MAAMo6C,kBAKT,GAJA2a,EAAW17D,KAAK6yD,4BAA4BznD,EAAM0tD,EAAc,GAChE6C,EAAW37D,KAAKuvD,YAGZvvD,KAAKuvD,YAAYznD,GAAE,KAAuB,CAE5C,GADI0zC,EAAiBmgB,EAASngB,eAG5B,GADIhqB,EAAWgqB,EAAenqB,eAAe8pB,EAAAn/B,aAAakB,KAC5C,CACZ/S,EAAOnK,KAAKg8D,sBAAsBxqC,EAAUpmB,EAAMswD,EAAUrwD,EAAON,GACnE,MAOJ,OAJA/K,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAENpE,KAAKL,OAAOksC,oBAGrB,IAAIzmB,OAAQ,EAGZ,GAAyB,IAArBplB,KAAKuvD,YAAYxoD,MAGnB,GAFA60D,EAAY57D,KAAKmzD,kBAAkB9nD,EAAO6Q,EAAAuE,KAAKY,IAAG,KAClDw6C,EAAY77D,KAAKuvD,cACXnqC,EAAWplB,KAAKgwD,gBAAiB,CAErC,KADI/oC,EAAYjnB,KAAK6rB,QAAQ7M,eAAe9d,IAAI,UAChC,CACdlB,KAAKuG,MACH0V,EAAAnY,eAAeugB,mBACftZ,EAAW3G,MAAO,SAEpB+F,EAAOxK,EAAOksC,oBACd,MAGF,KADI5pC,EAAYglB,EAAUnX,QAAUmX,EAAUnX,QAAQ5O,IAAI,OAAS,MACnD,CACdlB,KAAKuG,MACH0V,EAAAnY,eAAeugB,mBACftZ,EAAW3G,MAAO,aAEpB+F,EAAOxK,EAAOksC,oBACd,MAEFpoC,OAAOxB,EAAU8E,MAAQo0C,EAAAz8B,YAAY8G,oBACrCxlB,KAAKgwD,eAAiB5qC,EAAWplB,KAAKggB,SAAS6F,gBAAmC5jB,EAAW,YAsB/F,GAhBAy5D,EAAW17D,KAAKk6D,kBACdwB,EACA17D,KAAKuvD,YACLrzC,EAAAuE,KAAKa,IAAG,IAGRlW,GAEFuwD,EAAW37D,KAAKuvD,YAChBqM,EAAY57D,KAAKmzD,kBACf9nD,EACA6Q,EAAAuE,KAAKa,IAAG,KAIVu6C,EAAY77D,KAAKuvD,cACXnqC,EAAWplB,KAAKiwD,gBAAiB,CAErC,KADIhpC,EAAYjnB,KAAK6rB,QAAQ7M,eAAe9d,IAAI,SAChC,CACdlB,KAAKuG,MACH0V,EAAAnY,eAAeugB,mBACftZ,EAAW3G,MAAO,QAEpB+F,EAAOxK,EAAOksC,oBACd,MAGF,KADI5pC,EAAYglB,EAAUnX,QAAUmX,EAAUnX,QAAQ5O,IAAI,OAAS,MACnD,CACdlB,KAAKuG,MACH0V,EAAAnY,eAAeugB,mBACftZ,EAAW3G,MAAO,YAEpB+F,EAAOxK,EAAOksC,oBACd,MAEFpoC,OAAOxB,EAAU8E,MAAQo0C,EAAAz8B,YAAY8G,oBACrCxlB,KAAKiwD,eAAiB7qC,EAAWplB,KAAKggB,SAAS6F,gBAAmC5jB,EAAW,MAM/FkI,EAHIib,GAAYplB,KAAK8zD,gBAAgB1uC,GAG9BplB,KAAK68D,eAAez3C,GAAYs2C,EAAUE,IAF1Cj8D,EAAOksC,oBAIhB,MAEF,KAAKnlC,EAAAC,MAAMy7C,aAAc2Z,GAAW,EACpC,KAAKr1D,EAAAC,MAAMs6C,MAKT,GAJAya,EAAW17D,KAAK6yD,4BAA4BznD,EAAM0tD,EAAc,GAChE6C,EAAW37D,KAAKuvD,YAGZvvD,KAAKuvD,YAAYznD,GAAE,KAAuB,CAE5C,GADI0zC,EAAiBmgB,EAASngB,eAG5B,GADIhqB,EAAWgqB,EAAenqB,eAAe8pB,EAAAn/B,aAAamB,KAC5C,CACZhT,EAAOnK,KAAKg8D,sBAAsBxqC,EAAUpmB,EAAMswD,EAAUrwD,EAAON,GACnE,MAOJ,OAJA/K,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAENpE,KAAKL,OAAOksC,oBAGrB,GAAIkwB,EACFL,EAAW17D,KAAKm6D,uBAAuBuB,EAAUC,GACjDC,EAAY57D,KAAKmzD,kBAAkB9nD,EAAOswD,EAAQ,KAClDE,EAAY77D,KAAKuvD,gBACZ,CAGL,GAFAqM,EAAY57D,KAAK6yD,4BAA4BxnD,EAAOswD,EAAQ,GAC5DE,EAAY77D,KAAKuvD,cACbuM,EAAa5/C,EAAAuE,KAAK87B,iBAAiBof,EAAUE,GAAW,IAuB1D,OALA77D,KAAKuG,MACH0V,EAAAnY,eAAem4D,8CACflxD,EAAW3G,MAAO,IAAKu3D,EAAS92D,WAAYg3D,EAAUh3D,YAExD7E,KAAKuvD,YAAcuJ,EACZn5D,EAAOksC,oBAtBd6vB,EAAW17D,KAAKk6D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB1wD,GAEFwwD,EAAY57D,KAAKk6D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBzwD,GAWN,OAAQrL,KAAKuvD,YAAYxoD,MACvB,OACA,OACA,OACEoD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAAS8nC,OAAQpB,EAAUE,GACtD,MAEF,OACEzxD,EAAOxK,EAAO6nC,aACZxnC,KAAKwgB,QAAQkB,SACTtF,EAAA4Y,SAAS+nC,OACT3gD,EAAA4Y,SAAS8nC,OACbpB,EACAE,GAEF,MAEF,OACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAAS+nC,OAAQrB,EAAUE,GACtD,MAEF,OACA,OACA,QAIA,OACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAAS6C,OAAQ6jC,EAAUE,GACtD,MAEF,OACEzxD,EAAOxK,EAAO6nC,aACZxnC,KAAKwgB,QAAQkB,SACTtF,EAAA4Y,SAASgoC,OACT5gD,EAAA4Y,SAAS6C,OACb6jC,EACAE,GAEF,MAEF,OACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASgoC,OAAQtB,EAAUE,GACtD,MAEF,QACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASioC,OAAQvB,EAAUE,GACtD,MAEF,QACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASkoC,OAAQxB,EAAUE,GACtD,MAEF,QACEn4D,QAAO,GACP0G,EAAOxK,EAAOksC,oBAGlB,MAEF,KAAKnlC,EAAAC,MAAM07C,eAAgB0Z,GAAW,EACtC,KAAKr1D,EAAAC,MAAMu6C,QAKT,GAJAwa,EAAW17D,KAAK6yD,4BAA4BznD,EAAM0tD,EAAc,GAChE6C,EAAW37D,KAAKuvD,YAGZvvD,KAAKuvD,YAAYznD,GAAE,KAAuB,CAE5C,GADI0zC,EAAiBmgB,EAASngB,eAG5B,GADIhqB,EAAWgqB,EAAenqB,eAAe8pB,EAAAn/B,aAAaoB,KAC5C,CACZjT,EAAOnK,KAAKg8D,sBAAsBxqC,EAAUpmB,EAAMswD,EAAUrwD,EAAON,GACnE,MAOJ,OAJA/K,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAENpE,KAAKL,OAAOksC,oBAGrB,GAAIkwB,EACFL,EAAW17D,KAAKm6D,uBAAuBuB,EAAUC,GACjDC,EAAY57D,KAAKmzD,kBAAkB9nD,EAAOswD,EAAQ,KAClDE,EAAY77D,KAAKuvD,gBACZ,CAGL,GAFAqM,EAAY57D,KAAK6yD,4BAA4BxnD,EAAOswD,EAAQ,GAC5DE,EAAY77D,KAAKuvD,cACbuM,EAAa5/C,EAAAuE,KAAK87B,iBAAiBof,EAAUE,GAAW,IAuB1D,OALA77D,KAAKuG,MACH0V,EAAAnY,eAAem4D,8CACflxD,EAAW3G,MAAO,IAAKu3D,EAAS92D,WAAYg3D,EAAUh3D,YAExD7E,KAAKuvD,YAAcuJ,EACZn5D,EAAOksC,oBAtBd6vB,EAAW17D,KAAKk6D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB1wD,GAEFwwD,EAAY57D,KAAKk6D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBzwD,GAWN,OAAQrL,KAAKuvD,YAAYxoD,MACvB,OACA,OAIA,OACEoD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAAS8C,OAAQ4jC,EAAUE,GACtD,MAEF,OACEzxD,EAAOxK,EAAO6nC,aACZxnC,KAAKwgB,QAAQkB,SACTtF,EAAA4Y,SAASmoC,OACT/gD,EAAA4Y,SAAS8C,OACb4jC,EACAE,GAEF,MAEF,OACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASmoC,OAAQzB,EAAUE,GACtD,MAEF,OACA,OACA,QAIA,OACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAAS+C,OAAQ2jC,EAAUE,GACtD,MAEF,OACEzxD,EAAOxK,EAAO6nC,aACZxnC,KAAKwgB,QAAQkB,SACTtF,EAAA4Y,SAASooC,OACThhD,EAAA4Y,SAAS+C,OACb2jC,EACAE,GAEF,MAEF,OACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASooC,OAAQ1B,EAAUE,GACtD,MAEF,QAEE,KADIx2C,EAAWplB,KAAK8vD,gBACL,CAEb,KADI7oC,EAAYjnB,KAAK6rB,QAAQ7M,eAAe9d,IAAI,UAChC,CACdlB,KAAKuG,MACH0V,EAAAnY,eAAeugB,mBACftZ,EAAW3G,MAAO,SAEpB+F,EAAOxK,EAAOksC,oBACd,MAGF,KADI5pC,EAAYglB,EAAUnX,QAAUmX,EAAUnX,QAAQ5O,IAAI,OAAS,MACnD,CACdlB,KAAKuG,MACH0V,EAAAnY,eAAeugB,mBACftZ,EAAW3G,MAAO,aAEpB+F,EAAOxK,EAAOksC,oBACd,MAEFpoC,OAAOxB,EAAU8E,MAAQo0C,EAAAz8B,YAAY8G,oBACrCxlB,KAAK8vD,eAAiB1qC,EAAWplB,KAAKggB,SAAS6F,gBAAmC5jB,EAAW,MAK7FkI,EAHIib,GAAYplB,KAAK8zD,gBAAgB1uC,GAG9BplB,KAAK68D,eAAez3C,GAAYs2C,EAAUE,IAF1Cj8D,EAAOksC,oBAIhB,MAEF,QAEE,KADIzmB,EAAWplB,KAAK+vD,gBACL,CACb,IAAI9oC,EASAhlB,EARJ,KADIglB,EAAYjnB,KAAK6rB,QAAQ7M,eAAe9d,IAAI,SAChC,CACdlB,KAAKuG,MACH0V,EAAAnY,eAAeugB,mBACftZ,EAAW3G,MAAO,QAEpB+F,EAAOxK,EAAOksC,oBACd,MAGF,KADI5pC,EAAYglB,EAAUnX,QAAUmX,EAAUnX,QAAQ5O,IAAI,OAAS,MACnD,CACdlB,KAAKuG,MACH0V,EAAAnY,eAAeugB,mBACftZ,EAAW3G,MAAO,YAEpB+F,EAAOxK,EAAOksC,oBACd,MAEFpoC,OAAOxB,EAAU8E,MAAQo0C,EAAAz8B,YAAY8G,oBACrCxlB,KAAK+vD,eAAiB3qC,EAAWplB,KAAKggB,SAAS6F,gBAAmC5jB,EAAW,MAK7FkI,EAHIib,GAAYplB,KAAK8zD,gBAAgB1uC,GAG9BplB,KAAK68D,eAAez3C,GAAYs2C,EAAUE,IAF1Cj8D,EAAOksC,oBAIhB,MAEF,QACEpoC,QAAO,GACP0G,EAAOxK,EAAOksC,oBAGlB,MAEF,KAAKnlC,EAAAC,MAAM27C,yBAA0ByZ,GAAW,EAChD,KAAKr1D,EAAAC,MAAM06C,kBAKT,GAJAqa,EAAW17D,KAAK6yD,4BAA4BznD,EAAM0tD,EAAeuE,QAAO,GACxE1B,EAAW37D,KAAKuvD,YAGZvvD,KAAKuvD,YAAYznD,GAAE,KAAuB,CAE5C,GADI0zC,EAAiBmgB,EAASngB,eAG5B,GADIhqB,EAAWgqB,EAAenqB,eAAe8pB,EAAAn/B,aAAagC,aAC5C,CACZ7T,EAAOnK,KAAKg8D,sBAAsBxqC,EAAUpmB,EAAMswD,EAAUrwD,EAAON,GACnE,MAOJ,OAJA/K,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAENpE,KAAKL,OAAOksC,oBAKrB,OAFA+vB,EAAY57D,KAAKmzD,kBAAkB9nD,EAAOswD,EAAQ,KAClDE,EAAY77D,KAAKuvD,YACTvvD,KAAKuvD,YAAYxoD,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEoD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASwC,OAAQkkC,EAAUE,GACtD,MAEF,OACA,OACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASsoC,OAAQ5B,EAAUE,GACtD,MAEF,OACA,OACEzxD,EAAOxK,EAAO6nC,aACZxnC,KAAKwgB,QAAQkB,SACTtF,EAAA4Y,SAASsoC,OACTlhD,EAAA4Y,SAASwC,OACbkkC,EACAE,GAEF,MAEF,QACA,QAKE,OAJA57D,KAAKuG,MACH0V,EAAAnY,eAAey5D,2CACfxyD,EAAW3G,MAAOsC,EAAA25C,sBAAsBt1C,EAAWI,UAAWnL,KAAKuvD,YAAY1qD,YAE1ElF,EAAOksC,oBAEhB,QACEpoC,QAAO,GACP0G,EAAOxK,EAAOksC,oBAGlB,MAEF,KAAKnlC,EAAAC,MAAM47C,+BAAgCwZ,GAAW,EACtD,KAAKr1D,EAAAC,MAAM26C,wBAKT,GAJAoa,EAAW17D,KAAK6yD,4BAA4BznD,EAAM0tD,EAAeuE,QAAO,GACxE1B,EAAW37D,KAAKuvD,YAGZvvD,KAAKuvD,YAAYznD,GAAE,KAAuB,CAE5C,GADI0zC,EAAiBmgB,EAASngB,eAG5B,GADIhqB,EAAWgqB,EAAenqB,eAAe8pB,EAAAn/B,aAAa4B,aAC5C,CACZzT,EAAOnK,KAAKg8D,sBAAsBxqC,EAAUpmB,EAAMswD,EAAUrwD,EAAON,GACnE,MAOJ,OAJA/K,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAENpE,KAAKL,OAAOksC,oBAMrB,OAHA6vB,EAAW17D,KAAKm6D,uBAAuBuB,EAAUC,GACjDC,EAAY57D,KAAKmzD,kBAAkB9nD,EAAOswD,EAAQ,KAClDE,EAAY77D,KAAKuvD,YACTvvD,KAAKuvD,YAAYxoD,MACvB,OACA,OAIA,OACEoD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAAS2C,OAAQ+jC,EAAUE,GACtD,MAEF,OACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASwoC,OAAQ9B,EAAUE,GACtD,MAEF,OACEzxD,EAAOxK,EAAO6nC,aACZxnC,KAAKwgB,QAAQkB,SACTtF,EAAA4Y,SAASwoC,OACTphD,EAAA4Y,SAAS2C,OACb+jC,EACAE,GAEF,MAEF,OACA,OACA,QAIA,OACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAAS4C,OAAQ8jC,EAAUE,GACtD,MAEF,OACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASyoC,OAAQ/B,EAAUE,GACtD,MAEF,OACEzxD,EAAOxK,EAAO6nC,aACZxnC,KAAKwgB,QAAQkB,SACTtF,EAAA4Y,SAASyoC,OACTrhD,EAAA4Y,SAAS4C,OACb8jC,EACAE,GAEF,MAEF,QACA,QAKE,OAJA57D,KAAKuG,MACH0V,EAAAnY,eAAey5D,2CACfxyD,EAAW3G,MAAOsC,EAAA25C,sBAAsBt1C,EAAWI,UAAWnL,KAAKuvD,YAAY1qD,YAE1ElF,EAAOksC,oBAEhB,QACEpoC,QAAO,GACP0G,EAAOxK,EAAOksC,oBAGlB,MAEF,KAAKnlC,EAAAC,MAAM67C,2CAA4CuZ,GAAW,EAClE,KAAKr1D,EAAAC,MAAM46C,oCAKT,GAJAma,EAAW17D,KAAK6yD,4BAA4BznD,EAAM0tD,EAAeuE,QAAO,GACxE1B,EAAW37D,KAAKuvD,YAGZvvD,KAAKuvD,YAAYznD,GAAE,KAAuB,CAE5C,GADI0zC,EAAiBmgB,EAASngB,eAG5B,GADIhqB,EAAWgqB,EAAenqB,eAAe8pB,EAAAn/B,aAAa6B,eAC5C,CACZ1T,EAAOnK,KAAKg8D,sBAAsBxqC,EAAUpmB,EAAMswD,EAAUrwD,EAAON,GACnE,MAOJ,OAJA/K,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAENpE,KAAKL,OAAOksC,oBAMrB,OAHA6vB,EAAW17D,KAAKm6D,uBAAuBuB,EAAUC,GACjDC,EAAY57D,KAAKmzD,kBAAkB9nD,EAAOswD,EAAQ,KAClDE,EAAY77D,KAAKuvD,YACTvvD,KAAKuvD,YAAYxoD,MACvB,OACA,OACA,QACEoD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAAS4C,OAAQ8jC,EAAUE,GAExD,OACA,OACA,OACA,OACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAAS4C,OAAQ8jC,EAAUE,GACtD,MAEF,OACA,OACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASyoC,OAAQ/B,EAAUE,GACtD,MAEF,OACA,OACEzxD,EAAOxK,EAAO6nC,aACZxnC,KAAKwgB,QAAQkB,SACTtF,EAAA4Y,SAASyoC,OACTrhD,EAAA4Y,SAAS4C,OACb8jC,EACAE,GAEF,MAEF,QACA,QAKE,OAJA57D,KAAKuG,MACH0V,EAAAnY,eAAey5D,2CACfxyD,EAAW3G,MAAOsC,EAAA25C,sBAAsBt1C,EAAWI,UAAWnL,KAAKuvD,YAAY1qD,YAE1ElF,EAAOksC,oBAEhB,QACEpoC,QAAO,GACP0G,EAAOxK,EAAOksC,oBAGlB,MAEF,KAAKnlC,EAAAC,MAAM87C,iBAAkBsZ,GAAW,EACxC,KAAKr1D,EAAAC,MAAM66C,UAKT,GAJAka,EAAW17D,KAAK6yD,4BAA4BznD,EAAM0tD,EAAeuE,QAAO,GACxE1B,EAAW37D,KAAKuvD,YAGZvvD,KAAKuvD,YAAYznD,GAAE,KAAuB,CAE5C,GADI0zC,EAAiBmgB,EAASngB,eAG5B,GADIhqB,EAAWgqB,EAAenqB,eAAe8pB,EAAAn/B,aAAaqB,aAC5C,CACZlT,EAAOnK,KAAKg8D,sBAAsBxqC,EAAUpmB,EAAMswD,EAAUrwD,EAAON,GACnE,MAOJ,OAJA/K,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAENpE,KAAKL,OAAOksC,oBAGrB,GAAIkwB,EACFH,EAAY57D,KAAKmzD,kBAAkB9nD,EAAOswD,EAAQ,KAClDE,EAAY77D,KAAKuvD,gBACZ,CAGL,GAFAqM,EAAY57D,KAAK6yD,4BAA4BxnD,EAAOswD,EAAQ,GAC5DE,EAAY77D,KAAKuvD,cACbuM,EAAa5/C,EAAAuE,KAAK87B,iBAAiBof,EAAUE,GAAW,IAuB1D,OALA77D,KAAKuG,MACH0V,EAAAnY,eAAem4D,8CACflxD,EAAW3G,MAAO,IAAKu3D,EAAS92D,WAAYg3D,EAAUh3D,YAExD7E,KAAKuvD,YAAcuJ,EACZn5D,EAAOksC,oBAtBd6vB,EAAW17D,KAAKk6D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB1wD,GAEFwwD,EAAY57D,KAAKk6D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBzwD,GAWN,OAAQrL,KAAKuvD,YAAYxoD,MACvB,OACA,OACA,OACA,OACA,OACA,QACA,OACEoD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASsC,OAAQokC,EAAUE,GACtD,MAEF,OACA,OACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAAS0oC,OAAQhC,EAAUE,GACtD,MAEF,OACA,OACEzxD,EAAOxK,EAAO6nC,aACZxnC,KAAKwgB,QAAQkB,SACTtF,EAAA4Y,SAAS0oC,OACTthD,EAAA4Y,SAASsC,OACbokC,EACAE,GAEF,MAEF,QACA,QAKE,OAJA57D,KAAKuG,MACH0V,EAAAnY,eAAey5D,2CACfxyD,EAAW3G,MAAOsC,EAAA25C,sBAAsBt1C,EAAWI,UAAWnL,KAAKuvD,YAAY1qD,YAE1ElF,EAAOksC,oBAEhB,QACEpoC,QAAO,GACP0G,EAAOxK,EAAOksC,oBAGlB,MAEF,KAAKnlC,EAAAC,MAAM+7C,WAAYqZ,GAAW,EAClC,KAAKr1D,EAAAC,MAAM86C,IAKT,GAJAia,EAAW17D,KAAK6yD,4BAA4BznD,EAAM0tD,EAAeuE,QAAO,GACxE1B,EAAW37D,KAAKuvD,YAGZvvD,KAAKuvD,YAAYznD,GAAE,KAAuB,CAE5C,GADI0zC,EAAiBmgB,EAASngB,eAG5B,GADIhqB,EAAWgqB,EAAenqB,eAAe8pB,EAAAn/B,aAAasB,YAC5C,CACZnT,EAAOnK,KAAKg8D,sBAAsBxqC,EAAUpmB,EAAMswD,EAAUrwD,EAAON,GACnE,MAOJ,OAJA/K,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAENpE,KAAKL,OAAOksC,oBAGrB,GAAIkwB,EACFH,EAAY57D,KAAKmzD,kBAAkB9nD,EAAOswD,EAAQ,KAClDE,EAAY77D,KAAKuvD,gBACZ,CAGL,GAFAqM,EAAY57D,KAAK6yD,4BAA4BxnD,EAAOswD,EAAQ,GAC5DE,EAAY77D,KAAKuvD,cACbuM,EAAa5/C,EAAAuE,KAAK87B,iBAAiBof,EAAUE,GAAW,IAuB1D,OALA77D,KAAKuG,MACH0V,EAAAnY,eAAem4D,8CACflxD,EAAW3G,MAAO,IAAKu3D,EAAS92D,WAAYg3D,EAAUh3D,YAExD7E,KAAKuvD,YAAcuJ,EACZn5D,EAAOksC,oBAtBd6vB,EAAW17D,KAAKk6D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB1wD,GAEFwwD,EAAY57D,KAAKk6D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBzwD,GAWN,OAAQrL,KAAKuvD,YAAYxoD,MACvB,OACA,OACA,OACA,OACA,QACEoD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAAS2oC,MAAOjC,EAAUE,GACrD,MAEF,OACA,OACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAAS2oC,MAAOjC,EAAUE,GACrD,MAEF,OACA,OACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAAS4oC,MAAOlC,EAAUE,GACrD,MAEF,OACA,OACEzxD,EAAOxK,EAAO6nC,aACZxnC,KAAKwgB,QAAQkB,SACTtF,EAAA4Y,SAAS4oC,MACTxhD,EAAA4Y,SAAS2oC,MACbjC,EACAE,GAEF,MAEF,QACA,QAKE,OAJA57D,KAAKuG,MACH0V,EAAAnY,eAAey5D,2CACfxyD,EAAW3G,MAAOsC,EAAA25C,sBAAsBt1C,EAAWI,UAAWnL,KAAKuvD,YAAY1qD,YAE1ElF,EAAOksC,oBAEhB,QACEpoC,QAAO,GACP0G,EAAOxK,EAAOksC,oBAGlB,MAEF,KAAKnlC,EAAAC,MAAMg8C,aAAcoZ,GAAW,EACpC,KAAKr1D,EAAAC,MAAM+6C,MAKT,GAJAga,EAAW17D,KAAK6yD,4BAA4BznD,EAAM0tD,EAAeuE,QAAO,GACxE1B,EAAW37D,KAAKuvD,YAGZvvD,KAAKuvD,YAAYznD,GAAE,KAAuB,CAC5C,IAAI0zC,EAEEhqB,EADN,GADIgqB,EAAiBmgB,EAASngB,eAG5B,GADIhqB,EAAWgqB,EAAenqB,eAAe8pB,EAAAn/B,aAAauB,aAC5C,CACZpT,EAAOnK,KAAKg8D,sBAAsBxqC,EAAUpmB,EAAMswD,EAAUrwD,EAAON,GACnE,MAOJ,OAJA/K,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAENpE,KAAKL,OAAOksC,oBAGrB,GAAIkwB,EACFH,EAAY57D,KAAKmzD,kBAAkB9nD,EAAOswD,EAAQ,KAClDE,EAAY77D,KAAKuvD,gBACZ,CAGL,GAFAqM,EAAY57D,KAAK6yD,4BAA4BxnD,EAAOswD,EAAQ,GAC5DE,EAAY77D,KAAKuvD,cACbuM,EAAa5/C,EAAAuE,KAAK87B,iBAAiBof,EAAUE,GAAW,IAuB1D,OALA77D,KAAKuG,MACH0V,EAAAnY,eAAem4D,8CACflxD,EAAW3G,MAAO,IAAKu3D,EAAS92D,WAAYg3D,EAAUh3D,YAExD7E,KAAKuvD,YAAcuJ,EACZn5D,EAAOksC,oBAtBd6vB,EAAW17D,KAAKk6D,kBACdwB,EACAC,EACAA,EAAWG,EAAU,IAGrB1wD,GAEFwwD,EAAY57D,KAAKk6D,kBACf0B,EACAC,EACAA,EAAYC,EAAU,IAGtBzwD,GAWN,OAAQrL,KAAKuvD,YAAYxoD,MACvB,OACA,OACA,OACA,OACA,QACEoD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAAS6oC,OAAQnC,EAAUE,GACtD,MAEF,OACA,OACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAAS6oC,OAAQnC,EAAUE,GACtD,MAEF,OACA,OACEzxD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAAS8oC,OAAQpC,EAAUE,GACtD,MAEF,OACA,OACEzxD,EAAOxK,EAAO6nC,aACZxnC,KAAKwgB,QAAQkB,SACTtF,EAAA4Y,SAAS8oC,OACT1hD,EAAA4Y,SAAS6oC,OACbnC,EACAE,GAEF,MAEF,QACA,QAKE,OAJA57D,KAAKuG,MACH0V,EAAAnY,eAAey5D,2CACfxyD,EAAW3G,MAAOsC,EAAA25C,sBAAsBt1C,EAAWI,UAAWnL,KAAKuvD,YAAY1qD,YAE1ElF,EAAOksC,oBAEhB,QACEpoC,QAAO,GACP0G,EAAOxK,EAAOksC,oBAGlB,MAKF,KAAKnlC,EAAAC,MAAMk7C,oBAOT,GANA6Z,EAAW17D,KAAK6yD,4BAA4BznD,EAAM0tD,EAAc,GAChE6C,EAAW37D,KAAKuvD,YAChBqM,EAAY57D,KAAKmzD,kBAAkB9nD,EAAOswD,EAAQ,KAClDE,EAAY77D,KAAKuvD,YAGbplD,EAAOxK,EAAOkzC,gBAAgB6oB,GAAU,EAAM,GAChD17D,KAAKs2D,cAAcoF,EAAU17D,KAAKuvD,aAClCplD,EAAOxK,EAAO8qC,SACZzqC,KAAKs2D,cAAcoF,EAAU17D,KAAKuvD,aAClCqM,EACAzxD,OAIG,CACL,IAAI2kB,EAAO9uB,KAAK6xB,gBAAgB/C,KAC5B2oC,EAAYz3D,KAAK6xB,gBAAgBrC,oBACnCxvB,KAAKuvD,aACJzgC,EAAKsF,YAAYsnC,EAAU17D,KAAKuvD,cAEnCplD,EAAOxK,EAAO8qC,SACZzqC,KAAKs2D,cACH32D,EAAOqoC,eAAeyvB,EAAU/qC,MAAOgvC,GACvC17D,KAAKuvD,aAEPqM,EACAj8D,EAAOmoC,eACLrkC,OAAOg0D,GAAW/qC,MAClB1sB,KAAKuvD,YAAYngC,iBAIvB,MAEF,KAAK1oB,EAAAC,MAAMm7C,QAOT,GANA4Z,EAAW17D,KAAK6yD,4BAA4BznD,EAAM0tD,EAAc,GAChE6C,EAAW37D,KAAKuvD,YAChBqM,EAAY57D,KAAKmzD,kBAAkB9nD,EAAOswD,EAAQ,KAClDE,EAAY77D,KAAKuvD,YAGbplD,EAAOnK,KAAKL,OAAOkzC,gBAAgB6oB,GAAU,EAAM,GACrDvxD,EAAOnK,KAAKL,OAAO8qC,SACjBzqC,KAAKs2D,cAAcoF,EAAU17D,KAAKuvD,aAClCplD,EACAyxD,OAIG,CACD9sC,EAAO9uB,KAAK6xB,gBAAgB/C,KAC5B2oC,EAAYz3D,KAAK6xB,gBAAgBrC,oBACnCxvB,KAAKuvD,aACJzgC,EAAKsF,YAAYsnC,EAAU17D,KAAKuvD,cAEnCplD,EAAOxK,EAAO8qC,SACZzqC,KAAKs2D,cACH32D,EAAOqoC,eAAeyvB,EAAU/qC,MAAOgvC,GACvC17D,KAAKuvD,aAEP5vD,EAAOmoC,eACLrkC,OAAOg0D,GAAW/qC,MAClB1sB,KAAKuvD,YAAYngC,gBAEnBwsC,GAGJ,MAEF,QACEn4D,QAAO,GACP0G,EAAOnK,KAAKL,OAAOksC,oBAGvB,OAAOkwB,EACH/7D,KAAK44D,2BAA2BxtD,EAAMjB,EAAM2uD,GAAkB58C,EAAAuE,KAAKc,MACnEpX,GAGNglD,EAAAltD,UAAA87D,qBAAA,SACE3P,EACA9sD,EACA08D,EACAvR,GAEA,IAAIwR,EACAC,EAAyB,EAO7B,OANI9P,EAAiBtmD,GAAGrB,EAAApE,YAAY6rB,WAClCgwC,EAAUF,EACVC,MAEAA,GAAwB38D,GAEnBtB,KAAKm+D,kBACV/P,EACA6P,EACAxR,EACAyR,EACA9P,EAAiBpnC,aAAam0B,EAAAx8B,eAAe5I,UAIjDo5C,EAAAltD,UAAA+5D,sBAAA,SACE5N,EACAhjD,EACAswD,EACArwD,EACAohD,GAEA,IAAIwR,EACAC,EAAyB,EAC7B,GAAI9P,EAAiBtmD,GAAGrB,EAAApE,YAAY6rB,UAAW,CAC7C,IAAIvmB,EAASlE,OAAO2qD,EAAiBzmD,QACrClE,OAAOkE,EAAOZ,MAAQo0C,EAAAz8B,YAAYvH,OAClC+mD,EAAUxC,EACVuC,GAAwB5yD,QAExB4yD,GAAwB7yD,EAAMC,GAShC,OAPUrL,KAAKm+D,kBACb/P,EACA6P,EACAxR,EACAyR,EACA9P,EAAiBpnC,aAAam0B,EAAAx8B,eAAe5I,UAKjDo5C,EAAAltD,UAAAi6D,kBAAA,SAAkBnxD,EAAwBqzD,EAA6BtF,GACrE,IAOI9c,EANAh8B,EADUhgB,KAAK6rB,QACI7L,SACnB6R,EAAkB7xB,KAAK6xB,gBACvBV,EAASnR,EAAS+qC,kBAAkBhgD,EAAY8mB,GACpD,IAAKV,EAAQ,OAAOnxB,KAAKL,OAAOksC,oBAIhC,OAAQ1a,EAAOpqB,MACb,KAAKo0C,EAAAz8B,YAAY5I,OACf,IAAK9V,KAAKyyD,cAAsBthC,GAC9B,OAAOnxB,KAAKL,OAAOksC,oBAErBpoC,OAAgB0tB,EAAQ9oB,MAAQ6T,EAAAuE,KAAKc,MAGvC,KAAK45B,EAAAz8B,YAAYiO,MACjB,KAAKwuB,EAAAz8B,YAAY6R,MACfyrB,EAAmC7qB,EAAQ9oB,KAC3C,MAEF,KAAK8yC,EAAAz8B,YAAYmL,SACf,IAAIE,EAA6BoH,EAAQpH,gBACzC,GAAIA,EAAiB,CACnB,IAAI3E,EAAWplB,KAAKggB,SAAS6F,gBAAgBkE,EAAiB,MAC9D,IAAK3E,EAAU,OAAOplB,KAAKL,OAAOksC,oBAClCpoC,OAAmD,GAA5C2hB,EAASrS,UAAU+S,eAAexgB,QACzC02C,EAAa52B,EAASrS,UAAU+S,eAAe,GAC/C,MAMF,OAJA9lB,KAAKuG,MACH0V,EAAAnY,eAAeu6D,oEACftzD,EAAW3G,MAAkB+sB,EAAQ5O,cAEhCviB,KAAKL,OAAOksC,oBAErB,KAAKsP,EAAAz8B,YAAYvH,MACf,GAAI6I,EAASmpC,yBAA0B,CACrC,IAAImV,EAAczsC,EAAgB/C,KAAKhnB,GAAE,MACrCy2D,EAAqBptC,EAAQE,eAAe8pB,EAAAn/B,aAAaY,YAAa0hD,GAC1E,IAAKC,EAaH,OAZyBptC,EAAQE,eAAe8pB,EAAAn/B,aAAaW,YAAa2hD,GAOxEt+D,KAAKuG,MACH0V,EAAAnY,eAAe06D,+CACfzzD,EAAW3G,MAAe+sB,EAAQ5O,cAPpCviB,KAAKuG,MACH0V,EAAAnY,eAAeqnD,qCACfpgD,EAAW3G,MAAe+sB,EAAQ5O,cAQ/BviB,KAAKL,OAAOksC,oBAErBpoC,OAAqD,GAA9C86D,EAAWxrD,UAAU+S,eAAexgB,QAC3C02C,EAAauiB,EAAWxrD,UAAU+S,eAAe,GACjD,MAIJ,QAKE,OAJA9lB,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAENpE,KAAKL,OAAOksC,oBAKvBpoC,OAAOu4C,GAAc9/B,EAAAuE,KAAKc,MAC1B,IAAIy8C,EAAYh+D,KAAKmzD,kBAAkBiL,EAAiBpiB,EAAU,KAClE,OAAOh8C,KAAK44D,2BACV7tD,EACAizD,EACAlF,GAAkB58C,EAAAuE,KAAKc,OAI3B4tC,EAAAltD,UAAA22D,2BAAA,SACE7tD,EACA0zD,EACAC,QAAA,IAAAA,OAAA,GAEA,IAAI/+D,EAASK,KAAKL,OACdwxB,EAASnxB,KAAKggB,SAAS+qC,kBAAkBhgD,EAAY/K,KAAK6xB,iBAC9D,IAAKV,EAAQ,OAAOxxB,EAAOksC,oBAE3B,OAAQ1a,EAAOpqB,MACb,KAAKo0C,EAAAz8B,YAAYiO,MACf,IAAItkB,EAAe8oB,EAAQ9oB,KAG3B,GAFA5E,OAAO4E,GAAQ6T,EAAAuE,KAAKc,MACpBvhB,KAAKuvD,YAAcmP,EAAMr2D,EAAO6T,EAAAuE,KAAKc,KACzB4P,EAAQrpB,GAAGrB,EAAApE,YAAYspB,OAKjC,OAJA3rB,KAAKuG,MACH0V,EAAAnY,eAAeu6D,oEACftzD,EAAW3G,MAAO+sB,EAAO5O,cAEpB5iB,EAAOksC,oBAEhB,IAAI/c,EAAO9uB,KAAK6xB,gBAAgB/C,KAIhC,OAHIzmB,EAAKP,GAAG,KACVgnB,EAAKQ,gBAAwB6B,EAAQzE,OAAQoC,EAAKsF,YAAYqqC,EAAsBp2D,IAE/Eq2D,EACH/+D,EAAOqoC,eAAuB7W,EAAQzE,MAAO+xC,GAC7C9+D,EAAOiqC,eAAuBzY,EAAQzE,MAAO+xC,GAEnD,KAAKtjB,EAAAz8B,YAAY5I,OACf,IAAK9V,KAAKyyD,cAAsBthC,GAAS,OAAOxxB,EAAOksC,oBACnDxjC,EAAgB8oB,EAAQ9oB,KAG5B,GAFA5E,OAAO4E,GAAQ6T,EAAAuE,KAAKc,MACpBvhB,KAAKuvD,YAAcmP,EAAMr2D,EAAO6T,EAAAuE,KAAKc,KACzB4P,EAAQrpB,GAAGrB,EAAApE,YAAYspB,OAMjC,OALA3rB,KAAKuG,MACH0V,EAAAnY,eAAeu6D,oEACftzD,EAAW3G,MACX+sB,EAAO5O,cAEF5iB,EAAOksC,oBAGhB,GADA4yB,EAAuBz+D,KAAKm6D,uBAAuBsE,EAAsBp2D,GACrEq2D,EAAK,CACP,IAAIpN,EAAajpD,EAAK+mB,eAClB7M,EAAe4O,EAAO5O,aAC1B,OAAO5iB,EAAOqqC,YAAY,MACxBrqC,EAAOmqC,gBAAgBvnB,EAAck8C,GACrC9+D,EAAOuoC,gBAAgB3lB,EAAc+uC,IACpCA,GAEH,OAAO3xD,EAAOmqC,gBAAgB3Y,EAAO5O,aAAck8C,GAGvD,KAAKtjB,EAAAz8B,YAAY6R,MACf,IAAM5kB,EAAsBwlB,EAAQxlB,YACpC,GACUwlB,EAAQrpB,GAAGrB,EAAApE,YAAYkmB,YAE7BvoB,KAAK6xB,gBAAgB/pB,GAAGrB,EAAApE,YAAYgV,cACrB,MAAf1L,GAC2B,MAA3BA,EAAY5C,YAOd,OAJA/I,KAAKuG,MACH0V,EAAAnY,eAAeu6D,oEACftzD,EAAW3G,MAAe+sB,EAAQ5O,cAE7B5iB,EAAOksC,oBAEhB,IAAI8yB,EAAiBl7D,OAAOzD,KAAKggB,SAASkpC,uBACtC0V,EAAW5+D,KAAK6yD,4BAClB8L,EACA3+D,KAAKwgB,QAAQW,UAAS,GAGpB9Y,EAAe8oB,EAAQ9oB,KAC3BrI,KAAKuvD,YAAcmP,EAAMr2D,EAAO6T,EAAAuE,KAAKc,KACjC+vC,EAAajpD,EAAK+mB,eAKtB,GAJa,IAAT/mB,EAAKtB,OAEP03D,EAAuBz+D,KAAKm6D,uBAAuBsE,EAAsBp2D,IAEvEq2D,EAAK,CAEH5vC,GADA+C,EAAkB7xB,KAAK6xB,iBACA/C,KAD3B,IAMI4oC,EAJY7lC,EAAgBrC,oBAC9BnnB,GACCymB,EAAKsF,YAAYqqC,EAAsBp2D,IAEXqkB,MAG/B,OAAO/sB,EAAOqqC,YAAY,MACxBrqC,EAAOiqC,eAAe8tB,EAAgB+G,GACtC9+D,EAAO8oC,YACLpgC,EAAK2d,SACL44C,EACAj/D,EAAOmoC,eAAe4vB,EAAgBpG,GACtCA,EACQngC,EAAQX,cAElB7wB,EAAOmoC,eAAe4vB,EAAgBpG,IACrCA,GAGH,OAAO3xD,EAAO8oC,YACZpgC,EAAK2d,SACL44C,EACAH,EACAnN,EACQngC,EAAQX,cAItB,KAAK2qB,EAAAz8B,YAAYmL,SACf,IAAIE,EAA6BoH,EAAQpH,gBACzC,GAAIA,EAAiB,CACnB,IAAI80C,EAAiB7+D,KAAKggB,SAAS6F,gBAAgBkE,EAAiB,MACpE,IAAK80C,EAAgB,OAAOl/D,EAAOksC,oBAGnC,IAAK6yB,EAAK,CACR,GAAIG,EAAe/2D,GAAGrB,EAAApE,YAAY6rB,UAAW,CACvCywC,EAAiBl7D,OAAOzD,KAAKggB,SAASkpC,uBACtC0V,EAAW5+D,KAAK6yD,4BAClB8L,EACA3+D,KAAKwgB,QAAQW,UAAS,GAGxB,OAAOnhB,KAAK68D,eAAegC,GAAkBD,EAAUH,IAEvD,OAAOz+D,KAAK68D,eAAegC,GAAkBJ,IAKjD,IAAI30C,EAA6BqH,EAAQrH,gBACzCrmB,OAA0B,MAAnBqmB,GACP,IAAIg1C,EAAiB9+D,KAAKggB,SAAS6F,gBAAmCiE,EAAiB,MACvF,IAAKg1C,EAAgB,OAAOn/D,EAAOksC,oBACnC,IACIkzB,GADA31D,EAAa01D,EAAe/rD,UAAU3J,YACRgmB,eAClC,GAAIyvC,EAAe/2D,GAAGrB,EAAApE,YAAY6rB,UAAW,CACvCywC,EAAiBl7D,OAAOzD,KAAKggB,SAASkpC,uBACtC0V,EAAW5+D,KAAK6yD,4BAClB8L,EACA3+D,KAAKwgB,QAAQW,UAAS,GAIpBu2C,EADY13D,KAAK6xB,gBAAgBrC,oBAAoBpmB,GAAY,GACtCsjB,MAC/B,OAAO/sB,EAAOqqC,YAAY,MACxBhqC,KAAK68D,eAAegC,GAClBl/D,EAAOqoC,eAAe0vB,EAAgBkH,GACtCH,IAEFz+D,KAAK68D,eAAeiC,GAClBn/D,EAAOmoC,eAAe4vB,EAAgBqH,MAEvCA,GAGH,OAAOp/D,EAAOqqC,YAAY,MACxBhqC,KAAK68D,eAAegC,GAAkBJ,IACtCz+D,KAAK68D,eAAeiC,IACnBC,GAQP,OALE/+D,KAAKuG,MACH0V,EAAAnY,eAAeu6D,oEACftzD,EAAW3G,MAAO+sB,EAAO5O,cAGtB5iB,EAAOksC,oBAEhB,KAAKsP,EAAAz8B,YAAYvH,MACf,IAAI9K,EAAoBrM,KAAKggB,SAASmpC,yBACtC,GAAI98C,EAAmB,CACrB,IAAIiyD,EAAct+D,KAAK6xB,gBAAgB/C,KAAKhnB,GAAE,MAC1CojD,EAAqB/5B,EAAQE,eAAe8pB,EAAAn/B,aAAaW,YAAa2hD,GAC1E,IAAKpT,EAKH,OAJAlrD,KAAKuG,MACH0V,EAAAnY,eAAeqnD,qCACfpgD,EAAW3G,MAAO+sB,EAAO5O,cAEpB5iB,EAAOksC,oBAEhB,IAAI0yB,EAAqBptC,EAAQE,eAAe8pB,EAAAn/B,aAAaY,YAAa0hD,GAC1E,IAAKC,EAMH,OALAv+D,KAAKuG,MACH0V,EAAAnY,eAAe06D,+CACfzzD,EAAW3G,MAAO+sB,EAAO5O,cAE3BviB,KAAKuvD,YAAcmP,EAAMxT,EAAWn4C,UAAU3J,WAAa8S,EAAAuE,KAAKc,KACzD5hB,EAAOksC,oBAEhB,IAAImQ,EAAqB7qB,EAAQ9oB,KAO7B22D,GANAL,EAAiBl7D,OAAOzD,KAAKggB,SAASkpC,uBACtC0V,EAAW5+D,KAAK6yD,4BAClB8L,EACA3+D,KAAKwgB,QAAQW,UAAS,GAGNnhB,KAAKmzD,kBACrB9mD,EACA6P,EAAAuE,KAAKG,IAAG,MAIV,GAAI89C,EAAK,CACP,IAAI7sC,EACAotC,GADAptC,EAAkB7xB,KAAK6xB,iBACW5C,aAAa+sB,GAAY,GAC3DkjB,EAAmBrtC,EAAgBrC,oBAAoBxvB,KAAKuvD,aAAa,GACzEnmD,EAAa8hD,EAAWn4C,UAAU3J,WAEtC,OADApJ,KAAK6xB,gBAAgBtC,cAAc0vC,GAC5Bt/D,EAAOqqC,YAAY,MACxBhqC,KAAK68D,eAAe0B,GAClB5+D,EAAOqoC,eAAei3B,EAAgBvyC,MAAOkyC,GAC7Cj/D,EAAOqoC,eAAek3B,EAAiBxyC,MAAOsyC,GAC9CP,IAEFz+D,KAAK68D,eAAe3R,GAClBvrD,EAAOmoC,eAAem3B,EAAgBvyC,MAAOuyC,EAAgB52D,KAAK+mB,gBAClEzvB,EAAOmoC,eAAeo3B,EAAiBxyC,MAAOwyC,EAAiB72D,KAAK+mB,mBAErEhmB,EAAWgmB,gBAEd,OAAOpvB,KAAK68D,eAAe0B,GACzBK,EACAI,EACAP,KAWV,OAJAz+D,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAENzE,EAAOksC,qBAGhBsjB,EAAAltD,UAAAo3D,sBAAA,SAAsBtuD,EAA4B+tD,GAChD,IAKI/lD,EACAosD,EANAx/D,EAASK,KAAKL,OACdkyB,EAAkB7xB,KAAK6xB,gBACvBV,EAASnxB,KAAKggB,SAAS+qC,kBAAkBhgD,EAAWA,WAAY8mB,GACpE,IAAKV,EAAQ,OAAOxxB,EAAOksC,oBAI3B,OAAQ1a,EAAOpqB,MAGb,KAAKo0C,EAAAz8B,YAAY8G,mBACf,IAAIvjB,EAA+BkvB,EAC/BhpB,EAAgB4C,EAAW5C,cAG/B,GAAIlG,EAAU+kB,aAAam0B,EAAAx8B,eAAe/I,SACxC,OAAO5V,KAAKo/D,6BAA6Bn9D,EAAW8I,EAAY+tD,GAGlE,IAAI1zC,EAA4B,KAGhC,GAAIjd,EAAe,CACjB,IAAKlG,EAAU6F,GAAGrB,EAAApE,YAAYqjB,SAK5B,OAJA1lB,KAAKuG,MACH0V,EAAAnY,eAAe2lD,sBACf1+C,EAAWA,WAAW3G,MAAOnC,EAAUsgB,cAElC5iB,EAAOksC,oBAEhBzmB,EAAWplB,KAAKggB,SAASyrC,iCACvBxpD,EACAkG,EACAnI,KAAK6xB,gBAAgB/C,KAAK9B,wBAC1BjiB,OAIG,IAAI9I,EAAU6F,GAAGrB,EAAApE,YAAYqjB,SAAU,CAI5C,IAHA,IAAI25C,EAAgB,IAAIxgD,IACpBjP,EAAiBnM,OAAOxB,EAAU0J,YAAYiE,gBAC9C0vD,EAAoB1vD,EAAetK,OAC9BjF,EAAI,EAAGA,EAAIi/D,IAAqBj/D,EACvCg/D,EAAcp3D,IAAI2H,EAAevP,GAAGO,KAAKwE,KAAM,MAGjD,IAAI0gB,EAAiB7jB,EAAU0J,YAAYoH,UAAU5J,WACjDo2D,EAAoBz5C,EAAexgB,OACnC24D,EAAsBlzD,EAAWnB,UACjC41D,EAAevB,EAAoB34D,OACnCm6D,EAAgB,IAAIt5D,MAAqBq5D,GAC7C,IAASn/D,EAAI,EAAGA,EAAIk/D,IAAqBl/D,EAAG,CAC1C,IAAImpD,EAAW1jC,EAAezlB,GAAGgI,KAC7BzH,EAAO4oD,EAASziD,MAAQoV,EAAAtV,SAASuO,KAAkBo0C,EAAU5oD,KAAKwE,KAAO,KACzEs6D,EAAqBr/D,EAAIm/D,EACzBvB,EAAoB59D,GACpB4B,EAAU0J,YAAYoH,UAAU5J,WAAW9I,GAAG0I,YAClD,IAAK22D,EAKH,OAJA1/D,KAAKuG,MACH0V,EAAAnY,eAAe0lB,+BACfze,EAAW3G,MAAOm7D,EAAkB16D,SAAS,IAAK26D,EAAa36D,SAAS,KAEnElF,EAAOksC,oBAEhB,GAAa,OAATjrC,GAAiBy+D,EAAcl6C,IAAIvkB,GAAO,CAE5C,GADI++D,EAAeN,EAAcn+D,IAAIN,GACnB,CAChB6+D,EAAcp/D,GAAKL,KAAK6yD,4BAA4B6M,EAAoBC,EAAY,GACpF,IAAI7D,OAAU,EACd,KAAMA,EAAa5/C,EAAAuE,KAAK87B,iBAAiBojB,EAAc3/D,KAAKuvD,aAAa,OACjEuM,EAAa5/C,EAAAuE,KAAK87B,iBAAiBojB,EAAc3/D,KAAKuvD,aAAa,IAKvE,OAJAvvD,KAAKuG,MACH0V,EAAAnY,eAAegvD,mCACfhtC,EAAezlB,GAAGgI,KAAKjE,MAAOpE,KAAKuvD,YAAY1qD,WAAY86D,EAAa96D,YAEnElF,EAAOksC,oBAGlB8zB,EAAe7D,OAEf2D,EAAcp/D,GAAKL,KAAK6yD,4BAA4B6M,EAAoBxjD,EAAAuE,KAAKG,IAAG,GAChF++C,EAAe3/D,KAAKuvD,YAGtB8P,EAAcp3D,IAAIrH,EAAM++D,OACnB,CACL,IAAIC,EAAe5/D,KAAKggB,SAASopC,YAC/BtjC,EAAezlB,GAAGgI,KAClBrI,KAAK6xB,gBAAgB/C,KAAK9B,yBAE5B,IAAK4yC,EAAc,OAAOjgE,EAAOksC,oBACjC4zB,EAAcp/D,GAAKL,KAAKmzD,kBACtBuM,EACAE,EAAY,MAMlB,IAAIlT,EAAwB,IAAIvmD,MAAYm5D,GAC5C,IAASj/D,EAAI,EAAGA,EAAIi/D,IAAqBj/D,EAAG,CAC1C,IAAIs/D,EAAel8D,OAAO47D,EAAcn+D,IAAI0O,EAAevP,GAAGO,KAAKwE,OACnEsnD,EAAsBrsD,GAAKs/D,EAO7B,OALAv6C,EAAWplB,KAAKggB,SAAS6F,gBACvB5jB,EACAyqD,EACA1sD,KAAK6xB,gBAAgB/C,KAAK9B,0BAGrBhtB,KAAK68D,eAAez3C,EAAUq6C,GADfz/D,KAAKL,OAAOksC,oBAQlCzmB,EAAWplB,KAAKggB,SAAS6F,gBACvB5jB,EACA,KACAjC,KAAK6xB,gBAAgB/C,KAAK9B,yBAG9B,IAAK5H,EAAU,OAAOplB,KAAKL,OAAOksC,oBAGlC,IAAI+yB,EAA0B,EAS9B,OARIx5C,EAAStd,GAAGrB,EAAApE,YAAY6rB,YAC1B0wC,EAAW5+D,KAAK6yD,4BACdpvD,OAAOzD,KAAKggB,SAASkpC,uBACrBlpD,KAAKwgB,QAAQW,UAAS,IAKnBnhB,KAAKm+D,kBACV/4C,EACAra,EAAWnB,UACXmB,EACA6zD,EACAx5C,EAAS4B,aAAam0B,EAAAx8B,eAAe5I,SAKzC,KAAKolC,EAAAz8B,YAAYiO,MACf,GAAI5Z,EAAoBoe,EAAQ9oB,KAAK0d,mBAAoB,CAErDo5C,EADUhuC,EAAQrpB,GAAGrB,EAAApE,YAAYiqB,SACtB3sB,EAAO8mC,UAAUsI,QAAgB5d,EAAQ9E,uBAEzC1sB,EAAOmoC,eAAuB3W,EAAQzE,MAAK,GAExD,MAMA,OAJA1sB,KAAKuG,MACH0V,EAAAnY,eAAe6nD,uGACf5gD,EAAW3G,MAAe+sB,EAAQ9oB,KAAKxD,YAElClF,EAAOksC,oBAGlB,KAAKsP,EAAAz8B,YAAY5I,OACf,GAAI/C,EAAqBoe,EAAQ9oB,KAAK0d,mBAAoB,CACxDo5C,EAAWx/D,EAAOuoC,gBAAyB/W,EAAQ5O,aAAuB4O,EAAQ9oB,KAAK+mB,gBACvF,MAMA,OAJApvB,KAAKuG,MACH0V,EAAAnY,eAAe6nD,uGACf5gD,EAAW3G,MAAgB+sB,EAAQ9oB,KAAKxD,YAEnClF,EAAOksC,oBAGlB,KAAKsP,EAAAz8B,YAAY6R,MAEf,GAAIxd,EADeoe,EAAQ9oB,KACN0d,mBAAoB,CACvC,IAAI44C,EAAiBl7D,OAAOzD,KAAKggB,SAASkpC,uBACtC0V,EAAW5+D,KAAK6yD,4BAClB8L,EACA3+D,KAAKwgB,QAAQW,UAAS,GAGxBg+C,EAAWx/D,EAAOyoC,WAChB,GACA,EACAw2B,EAAQ,EAEAztC,EAAQX,cAElB,MAMA,OAJAxwB,KAAKuG,MACH0V,EAAAnY,eAAe6nD,uGACf5gD,EAAW3G,MAAe+sB,EAAQ9oB,KAAKxD,YAElClF,EAAOksC,oBAGlB,KAAKsP,EAAAz8B,YAAYwR,gBACfnd,EAA6Boe,EAAQpe,UACrCosD,EAAWn/D,KAAKmzD,kBACdpoD,EAAWA,WACMomB,EAAQ9oB,KAAI,KAI/B,MAEF,KAAK8yC,EAAAz8B,YAAYmL,SAGjB,QAKE,OAJA7pB,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAENzE,EAAOksC,oBAGlB,OAAO7rC,KAAK6/D,oBACV9sD,EACAosD,EACAp0D,EAAWnB,UACXmB,IAIIokD,EAAAltD,UAAAm9D,6BAAR,SACEn9D,EACA8I,EACA+tD,GAEA,IAAI3wD,EAA+B,KAI/BwhD,EAAoB5+C,EAAW5C,cAC/B4C,EAAW5C,gBACRlG,EAAU6F,GAAGrB,EAAApE,YAAYqjB,UAC5B1lB,KAAKuG,MACH0V,EAAAnY,eAAe2lD,sBACf1+C,EAAW3G,MAAOnC,EAAUsgB,cAGhCpa,EAAgBnI,KAAKggB,SAASoqC,qBAC5B3mD,OAAOxB,EAAU0J,YAAYiE,gBAC7B+5C,EACA3pD,KAAK6xB,gBAAgB/C,KAAK9B,wBAC1BjiB,IAKJ,IAAIZ,EAAOokD,EAAAuR,YACT9/D,KACAiC,EACAkG,EACA4C,EAAWnB,UACXkvD,EACA/tD,GAEF,OAAKZ,IACHnK,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAENpE,KAAKL,OAAOksC,sBASvBsjB,EAAAltD,UAAA89D,mBAAA,SACEhtD,EACAysD,EACAQ,EACAvT,GAKA,GAAIuT,IAAwB,MADbjtD,EAAUqb,UAMvB,OAJApuB,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,QAEN,EAIT,IAAIi5C,EAAUtqC,EAAUsqC,QACxB,GAAIA,EAKF,OAJAr9C,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,QAEN,EAGT,IAAI67D,EAAUltD,EAAUqqC,mBACpB5O,EAAUz7B,EAAU+S,eAAexgB,OAGvC,OAAIk6D,EAAeS,GACjBjgE,KAAKuG,MACH05D,EAAUzxB,EACNvyB,EAAAnY,eAAeo8D,wCACfjkD,EAAAnY,eAAe0lB,+BACnBijC,EAAWroD,MAAO67D,EAAQp7D,WAAY26D,EAAa36D,aAE9C,KAIL26D,EAAehxB,IAAY6O,KAC7Br9C,KAAKuG,MACH0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAOoqC,EAAQ3pC,WAAY26D,EAAa36D,aAE9C,IAOXsqD,EAAAltD,UAAAk8D,kBAAA,SACE/4C,EACA64C,EACAxR,EACAyR,EACAiC,QADA,IAAAjC,MAAA,QACA,IAAAiC,OAAA,GAEA,IAAIX,EAAevB,EAAoB34D,OACnCyN,EAAYqS,EAASrS,UAEzB,IAAK/S,KAAK+/D,mBACRhtD,EACAysD,EACW,GAAXtB,EACAzR,GAEA,OAAOzsD,KAAKL,OAAOksC,oBAIrB,GAAIs0B,EAAQ,CAEV,GADA18D,QAAQ2hB,EAAStd,GAAGrB,EAAApE,YAAY4yD,cAC5Bj1D,KAAKqvD,uBAAuB+Q,SAASh7C,GAKlC,CACLplB,KAAKqvD,uBAAuBxpD,KAAKuf,GACjC,IAAIjb,EAAOnK,KAAKqgE,2BAA2Bj7C,EAAU64C,EAAqBxR,EAAYyR,GAEtF,OADAl+D,KAAKqvD,uBAAuBhgC,MACrBllB,EARPnK,KAAKsG,QACH2V,EAAAnY,eAAew8D,yCACf7T,EAAWroD,MAAOghB,EAAS7C,cAWjC,IAAIg+C,EAAuBrC,EAAUsB,EAAe,EAAIA,EACpD73B,EAAW,IAAIxhC,MAAqBo6D,GACpC7zC,EAAQ,EACRwxC,IACFv2B,EAAS,GAAKu2B,EACdxxC,EAAQ,GAGV,IADA,IAAI5G,EAAiB/S,EAAU+S,eACtBzlB,EAAI,EAAGA,EAAIm/D,IAAgBn/D,IAAKqsB,EACvCib,EAASjb,GAAS1sB,KAAKmzD,kBACrB8K,EAAoB59D,GACpBylB,EAAezlB,GAAE,KAMrB,OADAoD,OAAOipB,GAAS6zC,GACTvgE,KAAK68D,eAAez3C,EAAUuiB,IAI/BwnB,EAAAltD,UAAAo+D,2BAAR,SACEj7C,EACA64C,EACAxR,EACAyR,gBAAA,IAAAA,MAAA,GAEA,IAAIsB,EAAevB,EAAoB34D,OACnCyN,EAAYqS,EAASrS,UACrB8e,EAAkB7xB,KAAK6xB,gBACvBlyB,EAASK,KAAKL,OACdgM,EAAcyZ,EAASnjB,UAAU0J,YAGjC60D,EAAe3uC,EAAgB/C,KAC/BmD,EAAc7M,EAAS7C,aAAe,aAAe6C,EAASwI,gBAAgB/oB,SAAS,IACvFuE,EAAagc,EAASrS,UAAU3J,WAChC0lB,EAAOqsB,EAAApsB,KAAKptB,OAAOkwB,GACvB/C,EAAK7mB,IAAG,MACR6mB,EAAKmD,YAAcA,EACnBnD,EAAK1lB,WAAaA,EAClB0lB,EAAK9B,wBAA0B5H,EAAS4H,wBAIxC,IAAIha,KACJ,GAAIkrD,EAAS,CACX,IAAIv2D,EAASlE,OAAO2hB,EAASzd,QAE7B,GADAlE,OAAOkE,EAAOZ,MAAQo0C,EAAAz8B,YAAYvH,OAC9BiF,EAAAiY,gBAAgB6pC,IAAY9hD,EAAAkY,aAAaC,SAC3CzF,EAAK+D,oBACHzW,EAAAoY,iBAAiB0pC,GACTv2D,EAAQU,KAChB,YAEG,CACL,IAAIo4D,EAAY3xC,EAAK6D,eAAuBhrB,EAAQU,KAAM,QAAQ,GAClE2K,EAAKnN,KACHlG,EAAOiqC,eAAe62B,EAAU/zC,MAAOwxC,KAK7C,IADA,IAAIp4C,EAAiB/S,EAAU+S,eACtBzlB,EAAI,EAAGA,EAAIm/D,IAAgBn/D,EAAG,CACrC,IAAIqgE,EAAY1gE,KAAKmzD,kBACnB8K,EAAoB59D,GACpBylB,EAAezlB,GAAE,KAInB,GAAI+b,EAAAiY,gBAAgBqsC,IAActkD,EAAAkY,aAAaC,SAC7CzF,EAAK+D,oBACHzW,EAAAoY,iBAAiBksC,GACjB56C,EAAezlB,GACf0S,EAAU8b,iBAAiBxuB,QAGxB,CACL,IAAIsgE,EAAgB7xC,EAAK6D,eACvB7M,EAAezlB,GACf0S,EAAU8b,iBAAiBxuB,IAC1ByuB,EAAKsF,YAAYssC,EAAW56C,EAAezlB,KAE9C2S,EAAKnN,KACHlG,EAAOiqC,eAAe+2B,EAAcj0C,MAAOg0C,KAMjD7uC,EAAgB/C,KAAOA,EACvB,IAAI6uB,EAAgB5qC,EAAU+S,eAAexgB,OAC7C,IAASjF,EAAIm/D,EAAcn/D,EAAIs9C,IAAiBt9C,EAAG,CACjD,IAAIsyD,EAAW3yD,KAAKmzD,kBAClB1vD,OAAOkI,EAAYoH,UAAU5J,WAAW9I,GAAG0I,aAC3C+c,EAAezlB,GAAE,KAIfsgE,EAAgB7xC,EAAK6D,eACvB7M,EAAezlB,GACf0S,EAAU8b,iBAAiBxuB,IAC1ByuB,EAAKsF,YAAYu+B,EAAU7sC,EAAezlB,KAE7C2S,EAAKnN,KACHlG,EAAOiqC,eAAe+2B,EAAcj0C,MAAOimC,IAK/C,IAAIkE,EAAgBpzD,OAAOkI,EAAYqH,MACvC,GAAI6jD,EAAc9vD,MAAQoV,EAAAtV,SAASyR,MAEjC,IADA,IAAIjJ,EAA8BwnD,EAAexnD,WACjC1E,GAAPtK,EAAI,EAAOgP,EAAW/J,QAAQjF,EAAIsK,IAAKtK,EAAG,CACjD,IAAIqJ,EAAO1J,KAAKuyD,iBAAiBljD,EAAWhP,IAC5C,GAAI+b,EAAAiY,gBAAgB3qB,IAAS0S,EAAAkY,aAAa4hC,MACxCljD,EAAKnN,KAAK6D,GACNolB,EAAK9mB,MAAK,KAA6B,WAI/CgL,EAAKnN,KAAK7F,KAAKuyD,iBAAiBsE,IAIlC,IAAIjlC,EAAe9C,EAAK8C,aACxB,GAAIA,EAAc,KAChB,IAAwB,IAAApD,EAAA9K,EAAAkO,EAAapkB,UAAQsW,EAAA0K,EAAA5K,QAAAE,EAAAD,KAAAC,EAAA0K,EAAA5K,OAAE,CAA1C,IAAI6O,EAAW3O,EAAAxiB,MACdmxB,EAAY3qB,GAAGrB,EAAApE,YAAYqwB,SAC7Bb,EAAgBtC,cAAckD,qGAGlC3D,EAAK8C,aAAe,KAOtB,OALA9C,EAAKc,WACL5vB,KAAK6xB,gBAAgB/C,KAAO0xC,EAC5BxgE,KAAKuvD,YAAcnmD,EAGfA,GAAc8S,EAAAuE,KAAKc,MAASuN,EAAK9mB,MAAK,IAOnCrI,EAAOqqC,YAAY/X,EAAajf,EAAM5J,EAAWgmB,iBANtDpvB,KAAKuG,MACH0V,EAAAnY,eAAeywD,+DACf5oD,EAAYoH,UAAU3J,WAAWhF,OAE5BzE,EAAOksC,sBAMlBsjB,EAAAltD,UAAAivD,iBAAA,SAAiB0P,GAQf,IAAIpzC,EAAaozC,EAASpzC,WAC1B,GAAIA,EAAY,OAAOA,EAEvB,IAAIqzC,EAAoBD,EAAS7tD,UAC7B+tD,EAAeF,EAASr+C,aACxBw+C,EAAyBF,EAAkB/6C,eAC3Ck7C,EAAgCJ,EAAS3+D,UAAU0J,YAAYoH,UAAU5J,WACzE83D,EAAmBJ,EAAkBz3D,WACrC83D,EAAiBL,EAAkBzyC,SACnCw9B,EAAagV,EAAS94D,GAAGrB,EAAApE,YAAY6rB,UAGrCizC,EAAeN,EAAkBzjB,mBACjCgkB,EAAcD,EACdE,EAAeN,EAAuBz7D,OACtCg8D,EAAcD,EACdzV,MACAwV,IACAE,GAEJ,IAAIC,EAAc99D,OAAO69D,EAAcF,GAEnCI,EAAoB,IAAIr7D,MAAqBi7D,GAC7CK,EAAe,EAGf9hE,EAASK,KAAKL,OACdisD,IACF4V,EAAkB,GAAK7hE,EAAOmoC,eAAe,EAAG9nC,KAAKwgB,QAAQ+wC,gBAC7DkQ,EAAe,GAIjB,IAAK,IAAIphE,EAAI,EAAGA,EAAI8gE,IAAgB9gE,IAAKohE,EACvCD,EAAkBC,GAAgB9hE,EAAOmoC,eAAe25B,EAAcV,EAAuB1gE,GAAG+uB,gBAElG3rB,OAAOg+D,GAAgBL,GAGvB,IAAIM,EAAsB,IAAIxlD,EAAA+gC,UAAU8jB,EAAwBE,EAAkBC,GAC9ES,EAAiBb,EAAe,cACpCY,EAAoBtkB,mBAAqBikB,GACzC7zC,EAAa,IAAI2tB,EAAApuB,SACf6zC,EAAS3+D,UACT0/D,EACAD,EACAd,EAASj5D,OACTi5D,EAAS5zC,0BAEA/kB,IAAI24D,EAASh5D,MAAQnB,EAAApE,YAAY4yD,WAAaxuD,EAAApE,YAAY+uD,UACrEwP,EAASpzC,WAAaA,EAItB,IAAI8kC,EAAmBtyD,KAAK6xB,gBAC5B7xB,KAAK6xB,gBAAkBrE,EAGvB,IAAI2d,EAAWo2B,EAAc,EACzBh0D,EAAQ,IAAIpH,MAAcglC,GAC1By2B,EAAM,KAAOL,EAAY18D,SAAS,IACtC,IAASxE,EAAI,EAAGA,EAAI8qC,IAAY9qC,EAAG,CACjC,IAAImP,EAAQnP,EAAEwE,SAAS,IAAM+8D,EAC7Br0D,EAAMlN,GAAKmP,EAEb,IAAIwD,EAAOrT,EAAOqqC,YAAYz8B,EAAM,IAClC5N,EAAOqqC,YAAY,cACjBrqC,EAAOsrC,aAAa19B,EAAO,aAEzB4zD,EACIxhE,EAAO6nC,aACLprB,EAAA4Y,SAASsnC,OACT38D,EAAOuoC,gBAAgB,QAAO,GAC9BvoC,EAAO8mC,UAAU06B,IAEnBxhE,EAAOuoC,gBAAgB,QAAO,MAGtCvoC,EAAOksC,sBAET,IAASxrC,EAAI,EAAGA,EAAIkhE,IAAelhE,IAAKohE,EAAc,CACpD,IAAIp5D,EAAO04D,EAAuBI,EAAe9gE,GAC7CsL,EAAcq1D,EAA8BG,EAAe9gE,GAC3D0I,EAAc4C,EAAY5C,YAC1B4pD,OAAQ,EACR5pD,EACF4pD,EAAWhzD,EAAOiqC,eAAe63B,EAC/BzhE,KAAKmzD,kBACHpqD,EACAV,EAAI,OAMRrI,KAAKuG,MACH0V,EAAAnY,eAAe+9D,4CACfl2D,EAAYvH,OAEduuD,EAAWhzD,EAAOksC,qBAEpB74B,EAAOrT,EAAOqqC,YAAYz8B,EAAMlN,EAAI,IAClC2S,EACA2/C,IAEF6O,EAAkBC,GAAgB9hE,EAAOmoC,eAAe25B,EAAcp5D,EAAK+mB,gBAE7EpvB,KAAK6xB,gBAAkBygC,EACvB7uD,OAAOg+D,GAAgBH,GAEvB,IAAI/Q,EAAU5wD,EAAOusC,YACnBy1B,EACA3hE,KAAKwwD,mBACHkR,EAAoB57C,eACpB47C,EAAoBt4D,WACpBs4D,EAAoBtzC,UAEtBlS,EAAA2gC,mBAAmBrvB,EAAWL,kBAC9BxtB,EAAOqqC,YAAY,MACjBh3B,EACArT,EAAO2rC,WACLw1B,EACAU,EACAP,EAAiB7xC,iBAElB6xC,EAAiB7xC,iBAGtB,OADA5B,EAAWoC,SAASjwB,EAAQ4wD,GACrB/iC,GAID2hC,EAAAltD,UAAA6/D,cAAR,WAEE,IAAK9hE,KAAK2vD,QAAS,CACjB,IAAIhwD,EAASK,KAAKL,OAClBK,KAAK2vD,QAAUhwD,EAAOosC,UAHL,QAIH,GAEZ,EACApsC,EAAO8mC,UAAU,IAGrB,MAVmB,SAcb0oB,EAAAltD,UAAAkvD,cAAR,WAEE,IAAKnxD,KAAK4vD,QAAS,CACjB,IAAIjwD,EAASK,KAAKL,OAClBK,KAAK4vD,QAAUjwD,EAAOusC,YAHL,WAIflsC,KAAKwwD,oBAAqBt0C,EAAAuE,KAAKQ,KAAO/E,EAAAuE,KAAKc,MAC3C,KACA5hB,EAAOmqC,gBAAgB9pC,KAAK8hE,gBAC1BniE,EAAOmoC,eAAe,EAAC,KAG3BnoC,EAAOgtC,kBAVU,WAUsB,YAEzC,MAZmB,YAgBrBwiB,EAAAltD,UAAA46D,eAAA,SACEz3C,EACAuiB,QAAA,IAAAA,MAAA,MAEA,IAAIo6B,EAAcp6B,EAAWA,EAASriC,OAAS,EAC3Ck6D,EAAeuC,EAEfX,EADeh8C,EAASrS,UAAUqqC,mBAElCikB,EAAej8C,EAASrS,UAAU+S,eAAexgB,OACjDg8D,EAAcD,EACdj8C,EAAStd,GAAGrB,EAAApE,YAAY6rB,cACxBkzC,IACAE,IACA9B,GAEJ/7D,OAAOs+D,GAAeX,GAEtB,IAAIzhE,EAASK,KAAKL,OAClB,IAAKK,KAAK8zD,gBAAgB1uC,GAAW,OAAOzlB,EAAOksC,oBACnD,IAAIziC,EAAagc,EAASrS,UAAU3J,WAChC44D,EAAe58C,EAAStd,GAAGrB,EAAApE,YAAY2wD,eAG3C,GAAI+O,EAAcT,EAAa,CACxB35B,KACHA,EAAW,IAAIxhC,MAAMm7D,IACZh8D,OAAS,GAKpB,IAHA,IAAIwgB,EAAiBV,EAASrS,UAAU+S,eACpCm8C,EAAiB78C,EAASnjB,UAAU0J,YAAYoH,UAAU5J,WAC1D+4D,GAA0B,EACrB7hE,EAAIm/D,EAAcn/D,EAAIghE,IAAgBhhE,EAAG,CAChD,IAAI0I,EAAck5D,EAAe5hE,GAAG0I,YACpC,GAAsB,OAAhBA,IAAwBoT,EAAArV,oBAAoBiC,EAAYhC,MAAQ,CACpEm7D,GAA0B,EAC1B,OAGJ,GAAIA,EACF,IAAS7hE,EAAIm/D,EAAcn/D,EAAIghE,IAAgBhhE,EAC7CsnC,EAAS9hC,KACP7F,KAAKmzD,kBACS8O,EAAe5hE,GAAG0I,YAC9B+c,EAAezlB,GAAE,UAMlB,CACL,IAASA,EAAIm/D,EAAcn/D,EAAIghE,IAAgBhhE,EAC7CsnC,EAAS9hC,KAAKigB,EAAezlB,GAAGq8C,aAAa/8C,IAE/C,IAAKqiE,EAAc,CACjB,IAAIpB,EAAWx7C,EAEf,GADAA,EAAWplB,KAAKkxD,iBAAiB9rC,IAC5BplB,KAAK8zD,gBAAgB1uC,GAAW,OAAOzlB,EAAOksC,oBACnDzmB,EAAS0J,KAAKlnB,MAAQg5D,EAAS9xC,KAAKlnB,MACpC5H,KAAK6rB,QAAQ5M,gBAAgBhX,IAAImd,EAAS7C,aAAc6C,GACxD,IAAI25C,EAAmB31D,EAAWgmB,eAElC,OADApvB,KAAKuvD,YAAcnmD,EACZzJ,EAAOqqC,YAAY,MACxBrqC,EAAOmqC,gBAAgB9pC,KAAK8hE,gBAAiBniE,EAAO8mC,UAAU+4B,IAC9D7/D,EAAO2rC,WAAWlmB,EAAS7C,aAAcolB,EAAUo3B,IAClDA,KAOT,OADA/+D,KAAKuvD,YAAcnmD,EACf44D,EAAqBriE,EAAO6rC,iBAAiBpmB,EAAS7C,aAAcolB,EAAUv+B,EAAWgmB,gBACnFzvB,EAAO2rC,WAAWlmB,EAAS7C,aAAcolB,EAAUv+B,EAAWgmB,iBAK1E+/B,EAAAltD,UAAA49D,oBAAA,SACE9sD,EACAosD,EACAlB,EACAxR,EACAyR,QAAA,IAAAA,MAAA,GAEA,IAAIsB,EAAevB,EAAoB34D,OAEvC,IAAKtF,KAAK+/D,mBACRhtD,EACAysD,EACW,GAAXtB,EACAzR,GAEA,OAAOzsD,KAAKL,OAAOksC,oBAGrB,IAAI00B,EAAuBrC,EAAUsB,EAAe,EAAIA,EACpD73B,EAAW,IAAIxhC,MAAqBo6D,GACpC7zC,EAAQ,EACRwxC,IACFv2B,EAAS,GAAKu2B,EACdxxC,EAAQ,GAGV,IADA,IAAI5G,EAAiB/S,EAAU+S,eACtBzlB,EAAI,EAAGA,EAAIm/D,IAAgBn/D,IAAKqsB,EACvCib,EAASjb,GAAS1sB,KAAKmzD,kBACrB8K,EAAoB59D,GACpBylB,EAAezlB,GAAE,KAMrB,OADAoD,OAAOipB,GAAS6zC,GACTvgE,KAAKmiE,iBAAiBpvD,EAAWosD,EAAUx3B,IAIpDwnB,EAAAltD,UAAAkgE,iBAAA,SACEpvD,EACAosD,EACAx3B,QAAA,IAAAA,MAAA,MAEA,IAAIo6B,EAAcp6B,EAAWA,EAASriC,OAAS,EAC3Ck6D,EAAeuC,EAEfX,EADeruD,EAAUqqC,mBAEzBikB,EAAetuD,EAAU+S,eAAexgB,OACxCg8D,EAAcD,EACdtuD,EAAUqb,aACVgzC,IACAE,IACA9B,GAEJ/7D,OAAOs+D,GAAeX,GAEtBphE,KAAKwwD,mBAAmBz9C,EAAU+S,eAAgB/S,EAAU3J,WAAY2J,EAAUqb,UAClF,IAAIzuB,EAASK,KAAKL,OAGlB,GAAIoiE,EAAcT,EAAa,CACxB35B,KACHA,EAAW,IAAIxhC,MAAMm7D,IACZh8D,OAAS,GAGpB,IADA,IAAIwgB,EAAiB/S,EAAU+S,eACtBzlB,EAAIm/D,EAAcn/D,EAAIghE,IAAgBhhE,EAC7CsnC,EAAS9hC,KAAKigB,EAAezlB,GAAGq8C,aAAa/8C,IAIjD,IAAIyJ,EAAa2J,EAAU3J,WAE3B,OADApJ,KAAKuvD,YAAcnmD,EACZzJ,EAAOqqC,YAAY,MACxBrqC,EAAOmqC,gBAAgB9pC,KAAK8hE,gBAC1BniE,EAAO8mC,UAAU+4B,IAEnB7/D,EAAO+rC,mBAAmByzB,EAAUx3B,EAAU50B,EAAUod,sBACvD/mB,EAAWgmB,iBAGhB+/B,EAAAltD,UAAAq3D,uBAAA,SAAuBvuD,EAA6B+tD,GAIlD,IAHA,IAAIhtD,EAAcf,EAAWe,YACzBs2D,EAAiBt2D,EAAYxG,OAC7B+8D,EAAQ,IAAIl8D,MAAqBi8D,KAC5B/hE,EAAI,EAAGA,EAAI+hE,IAAkB/hE,EACpCgiE,EAAMhiE,GAAKL,KAAKmzD,kBACdrnD,EAAYzL,GACZ6b,EAAAuE,KAAKc,UAWT,OANA8gD,EAAMD,GAAkBpiE,KAAKmzD,kBAC3BrnD,EAAYs2D,GACZtJ,OAIK94D,KAAKL,OAAOqqC,YAAY,KAAMq4B,EAAOriE,KAAKuvD,YAAYngC,iBAG/D+/B,EAAAltD,UAAAs3D,+BAAA,SAA+BxuD,EAAqC+tD,GAClE,IAAI3nC,EAASnxB,KAAKggB,SAASorC,qBAAqBrgD,EAAY/K,KAAK6xB,iBACjE,IAAKV,EAAQ,OAAOnxB,KAAKL,OAAOksC,oBAChC,OAAQ1a,EAAOpqB,MACb,KAAKo0C,EAAAz8B,YAAYvH,MACf,IAAImnD,EAAct+D,KAAK6xB,gBAAgB/C,KAAKhnB,GAAE,MAC1CojD,EAAqB/5B,EAAQE,eAAe8pB,EAAAn/B,aAAaW,YAAa2hD,GAC1E,IAAKpT,EAKH,OAJAlrD,KAAKuG,MACH0V,EAAAnY,eAAeqnD,qCACfpgD,EAAWA,WAAW3G,MAAe+sB,EAAQ5O,cAExCviB,KAAKL,OAAOksC,oBAErB,IAAIqyB,EAAUl+D,KAAKmzD,kBACjBpoD,EAAWA,WACHomB,EAAQ9oB,KAAI,KAItB,OAAOrI,KAAKm+D,kBAAkBjT,GAC5BngD,EAAWsB,mBACVtB,EAAYmzD,GAOnB,OAJAl+D,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAENpE,KAAKL,OAAOksC,qBAGrBsjB,EAAAltD,UAAAu3D,0BAAA,SAA0BzuD,EAAgC+tD,GACxD,IAAIntD,EAAcZ,EAAWY,YACzB/K,EAAO+K,EAAY/K,KACnBumB,GAAcvmB,EAAKwE,KAAKE,OACxB1E,EAAKwE,KACL,aAAe,IAAMpF,KAAK0vD,cAAcpqD,OAAOT,SAAS,IACxDgtB,EAAkB7xB,KAAK6xB,gBACvB5vB,EAAY,IAAIk5C,EAAAtyB,kBAClB7oB,KAAK6rB,QACL1E,EACA0K,EAAgBtP,aAAe9b,EAAA7D,gBAAkBukB,EACjDxb,EACA,KACAwvC,EAAAx8B,eAAe9W,MAEbinB,EAAO+C,EAAgB/C,KACvB1J,EAAWplB,KAAK6zD,kCAClB5xD,KAEA6sB,EAAK9B,wBACL8B,EACAnjB,GAEF,IAAKyZ,EAAU,OAAOplB,KAAKL,OAAOksC,oBAClC7rC,KAAKuvD,YAAcnqC,EAASrS,UAAU1K,KAGtC,IAAIqkB,EAAQ1sB,KAAKg1D,yBAAyB5vC,GAC1C,OAAOsH,EAAQ,EACX1sB,KAAKL,OAAOksC,oBACZ7rC,KAAKL,OAAO8mC,UAAU/Z,IAQ5ByiC,EAAAltD,UAAAw3D,4BAAA,SACE1uD,EACA+tD,EACAwJ,GAEA,IAAI3iE,EAASK,KAAKL,OACdkyB,EAAkB7xB,KAAK6xB,gBAG3B,OAAQ9mB,EAAWhE,MACjB,KAAKoV,EAAAtV,SAASI,KACZ,IAAIuZ,EAAUxgB,KAAKwgB,QAInB,OAHKs4C,EAAetd,iBAClBx7C,KAAKuvD,YAAc/uC,EAAQW,WAEtBX,EAAQkB,SACX/hB,EAAOknC,UAAU,GACjBlnC,EAAO8mC,UAAU,GAEvB,KAAKtqB,EAAAtV,SAASK,KAEZ,OADAlH,KAAKuvD,YAAcrzC,EAAAuE,KAAKW,KACjBzhB,EAAO8mC,UAAU,GAE1B,KAAKtqB,EAAAtV,SAASM,MAEZ,OADAnH,KAAKuvD,YAAcrzC,EAAAuE,KAAKW,KACjBzhB,EAAO8mC,UAAU,GAE1B,KAAKtqB,EAAAtV,SAASoR,KAEZ,IADI6W,EAAO+C,EAAgB/C,MAClBhnB,GAAE,MAET,GADIy6D,EAAazzC,EAAKiE,eAAe,QAGnC,OADA/yB,KAAKuvD,YAAcgT,EAAWl6D,KACvB1I,EAAOmoC,eAAey6B,EAAW71C,MAAO61C,EAAWl6D,KAAK+mB,gBAGnE,GAAIyC,EAAgB/pB,GAAGrB,EAAApE,YAAY6rB,UAAW,CAC5C,IAAIvmB,EAASlE,OAAOouB,EAAgBlqB,QACpClE,OAAOkE,EAAOZ,MAAQo0C,EAAAz8B,YAAYvH,OAClC,IAAIiX,EAAmBzmB,EAAQU,KAC/B,OAAIwpB,EAAgB/pB,GAAGrB,EAAApE,YAAYgV,eAC5ByX,EAAKhnB,GAAE,KACVgnB,EAAK7mB,IAAG,IAERjI,KAAKuvD,YAAcnhC,EACZzuB,EAAOqoC,eAAe,EAC3BhoC,KAAKs0D,wBAA+B3sD,EAAQoD,MAIlD/K,KAAKuvD,YAAcnhC,EACZzuB,EAAOmoC,eAAe,EAAG1Z,EAASgB,iBAO3C,OALApvB,KAAKuG,MACH0V,EAAAnY,eAAeynD,+CACfxgD,EAAW3G,OAEbpE,KAAKuvD,YAAcvvD,KAAKwgB,QAAQW,UACzBxhB,EAAOksC,oBAEhB,KAAK1vB,EAAAtV,SAASmR,MACZ,IAAI8W,EAEEyzC,EADN,IADIzzC,EAAO+C,EAAgB/C,MAClBhnB,GAAE,MAET,GADIy6D,EAAazzC,EAAKiE,eAAe,QAInC,GADIrC,EADkBjtB,OAAO8+D,EAAWl6D,KAAKmzC,gBAClB9qB,KAGzB,OADA1wB,KAAKuvD,YAAc7+B,EAAKroB,KACjB1I,EAAOmoC,eAAey6B,EAAW71C,MAAOgE,EAAKroB,KAAK+mB,gBAI/D,GAAIyC,EAAgB/pB,GAAGrB,EAAApE,YAAY6rB,UAAW,CAC5C,IAEIwC,EAFA/oB,EAASlE,OAAOouB,EAAgBlqB,QAGpC,GAFAlE,OAAOkE,EAAOZ,MAAQo0C,EAAAz8B,YAAYvH,OAC9BuZ,EAAe/oB,EAAQ+oB,KACjB,CACR,IAAI8xC,EAAY9xC,EAAKroB,KAErB,OADArI,KAAKuvD,YAAciT,EACZ7iE,EAAOmoC,eAAe,EAAG06B,EAAUpzC,iBAQ9C,OALApvB,KAAKuG,MACH0V,EAAAnY,eAAe0nD,iDACfzgD,EAAW3G,OAEbpE,KAAKuvD,YAAcvvD,KAAKwgB,QAAQW,UACzBxhB,EAAOksC,oBAKlB,IAAI1a,EAASnxB,KAAKggB,SAAS0E,kBACzB3Z,EACA/K,KAAKsvD,aAAez9B,GAEtB,IAAKV,EAAQ,OAAOxxB,EAAOksC,oBAE3B,OAAQ1a,EAAOpqB,MACb,KAAKo0C,EAAAz8B,YAAYiO,MACf,IAAI81C,EAAoBtxC,EAAQ9oB,KAEhC,GADA5E,OAAOg/D,GAAavmD,EAAAuE,KAAKc,MACb4P,EAAQrpB,GAAGrB,EAAApE,YAAYiqB,SACjC,OAAOtsB,KAAK64D,sBAA6B1nC,EAAQ2nC,EAAgBwJ,GAEnE,IAAIr0C,EAAqBkD,EAAQzE,MAGjC,OAFAjpB,OAAOwqB,GAAc,GACrBjuB,KAAKuvD,YAAckT,EACZziE,KAAKL,OAAOmoC,eAAe7Z,EAAYw0C,EAAUrzC,gBAE1D,KAAK+rB,EAAAz8B,YAAY5I,OACf,IAAK9V,KAAKyyD,cAAsBthC,GAC9B,OAAOnxB,KAAKL,OAAOksC,oBAErB,IAAIqC,EAAsB/c,EAAQ9oB,KAElC,OADA5E,OAAOyqC,GAAchyB,EAAAuE,KAAKc,MACb4P,EAAQrpB,GAAGrB,EAAApE,YAAYiqB,SAC3BtsB,KAAK64D,sBAA8B1nC,EAAQ2nC,EAAgBwJ,IAEpEtiE,KAAKuvD,YAAcrhB,EACZluC,KAAKL,OAAOuoC,gBAAyB/W,EAAQ5O,aAAc2rB,EAAW9e,iBAE/E,KAAK+rB,EAAAz8B,YAAYsN,UACf,OAAKmF,EAAOrpB,GAAGrB,EAAApE,YAAY+uD,WAQ3BpxD,KAAKuvD,YAAcrzC,EAAAuE,KAAKG,IACRuQ,EAAQrpB,GAAGrB,EAAApE,YAAYiqB,SAC9BtsB,KAAKL,OAAO8mC,UAAsBtV,EAAQlF,eAE5CjsB,KAAKL,OAAOuoC,gBAA4B/W,EAAQ5O,aAAY,KAXjEviB,KAAKuG,MACH0V,EAAAnY,eAAe4+D,+HACf33D,EAAW3G,OAEbpE,KAAKuvD,YAAcrzC,EAAAuE,KAAKG,IACjB5gB,KAAKL,OAAOksC,qBAQvB,KAAKsP,EAAAz8B,YAAY8G,mBACf,IAAIJ,EAAWplB,KAAKggB,SAAS6F,gBACRsL,EACnB,KACAU,EAAgB/C,KAAK9B,yBAEvB,IAAM5H,IAAYplB,KAAK8zD,gBAAgB1uC,GAAY,OAAOzlB,EAAOksC,oBACjE,IAAInf,EAAQ1sB,KAAKg1D,yBAAyB5vC,GAE1C,OADAplB,KAAKuvD,YAAcnqC,EAASrS,UAAU1K,KAC/BrI,KAAKL,OAAO8mC,UAAU/Z,GAOjC,OAJA1sB,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAENpE,KAAKL,OAAOksC,qBAGrBsjB,EAAAltD,UAAAy3D,4BAAA,SACE3uD,EACA+tD,GAEA,IAAIn5D,EAASK,KAAKL,OAIdwK,EAAOnK,KAAK6yD,4BAA4B9nD,EAAWA,WAAY/K,KAAKwgB,QAAQW,UAAS,GACrF9Y,EAAOrI,KAAKuvD,YACZziD,EAAS9M,KAAKggB,SAASopC,YAAYr+C,EAAW+B,QAElD,OADA9M,KAAKuvD,YAAcrzC,EAAAuE,KAAKW,KACnBtU,EACEzE,EAAKP,GAAE,OAAyBgF,EAAOhF,GAAE,KAC5CO,EAAKozC,gBAAgBvqB,eAAepkB,GAClCnN,EAAO6nC,aACLn/B,EAAKP,GAAE,IACHsU,EAAA4Y,SAASM,MACTlZ,EAAA4Y,SAASK,MACblrB,EACA9B,EAAKq0C,aAAa/8C,IAEpBA,EAAO8mC,UAAU,GACnB9mC,EAAO8mC,UAAUp+B,EAAK6oB,eAAepkB,GAAQ,GAAQ,EAAI,GAXzCnN,EAAOksC,qBAc7BsjB,EAAAltD,UAAA03D,yBAAA,SACE5uD,EACA+tD,EACA6J,QAAA,IAAAA,OAAA,GAEA,IAAIhjE,EAASK,KAAKL,OAElB,OAAQoL,EAAW+L,aACjB,KAAKqF,EAAAvF,YAAYG,MACftT,QAAQk/D,GACR,IAAI1mB,EAAY6c,EAAetd,eAC/B,OACES,GACAA,EAAUh6C,WAAajC,KAAK6rB,QAAQvM,eAE7Btf,KAAK4iE,oBACVn/D,OAAOw4C,EAAU9zC,eAAe,GACP4C,EAAYN,oBACrC,EACAM,IAGJ/K,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAENzE,EAAOksC,qBAEhB,KAAK1vB,EAAAvF,YAAYU,MACf,IAAIurD,EAAsC93D,EAAYzJ,MAItD,OAHIqhE,IACFE,GAAcA,GAEZ/J,GAAkB58C,EAAAuE,KAAKY,IAClB1hB,EAAOsnC,UAAe47B,IAE/B7iE,KAAKuvD,YAAcrzC,EAAAuE,KAAKa,IACjB3hB,EAAOwnC,UAAU07B,IAE1B,KAAK1mD,EAAAvF,YAAYa,QACf,IAAIqrD,EAAsC/3D,EAAYzJ,MAOtD,OANIqhE,IACFG,EAAWC,QACTthD,QAAQ,GACRqhD,IAGIhK,EAAe/xD,MAIrB,OACE,GAAIi8D,UAAUF,GAAW,OAAOnjE,EAAO8mC,UAAUsI,QAAQ+zB,IACzD,MAEF,OACE,GAAIG,UAAUH,GAAW,OAAOnjE,EAAO8mC,UAAUsI,QAAQ+zB,IACzD,MAEF,OACE,GAAII,WAAWJ,GAAW,OAAOnjE,EAAO8mC,UAAUsI,QAAQ+zB,IAC1D,MAEF,OACE,GAAIK,WAAWL,GAAW,OAAOnjE,EAAO8mC,UAAUsI,QAAQ+zB,IAC1D,MAEF,OACE,GAAIM,WAAWN,GAAW,OAAOnjE,EAAO8mC,UAAUsI,QAAQ+zB,IAC1D,MAEF,OACE,GAAIO,WAAWP,GAAW,OAAOnjE,EAAO8mC,UAAUsI,QAAQ+zB,IAC1D,MAEF,QACE,GAAIQ,YAAYR,GAAW,OAAOnjE,EAAO8mC,UAAUsI,QAAQ+zB,IAC3D,MAEF,OACE,IAAK9iE,KAAKwgB,QAAQkB,SAAU,CAC1B,GAAI0hD,WAAWN,GAAW,OAAOnjE,EAAO8mC,UAAUsI,QAAQ+zB,IAC1D,MAEF,OAAOnjE,EAAOknC,UAAUkI,QAAQ+zB,GAAW9zB,SAAS8zB,IAEtD,OACE,IAAK9iE,KAAKwgB,QAAQkB,SAAU,CAC1B,GAAI2hD,WAAWP,GAAW,OAAOnjE,EAAO8mC,UAAUsI,QAAQ+zB,IAC1D,MAEF,OAAOnjE,EAAOknC,UAAUkI,QAAQ+zB,GAAW9zB,SAAS8zB,IAEtD,OACA,OACE,OAAOnjE,EAAOknC,UAAUkI,QAAQ+zB,GAAW9zB,SAAS8zB,IAEtD,QACE,GAAIS,WAAWT,GAAW,OAAOnjE,EAAOsnC,UAAUu8B,WAAWV,IAC7D,MAEF,QACE,GAAIW,WAAWX,GAAW,OAAOnjE,EAAOwnC,UAAUu8B,WAAWZ,IAC7D,MAEF,QACE,MAEF,QAEE,OADAr/D,QAAO,GACA9D,EAAOksC,oBAMlB,OAAIu3B,WAAWN,IACb9iE,KAAKuvD,YAAcrzC,EAAAuE,KAAKG,IACjBjhB,EAAO8mC,UAAUsI,QAAQ+zB,KACvBO,WAAWP,IACpB9iE,KAAKuvD,YAAcrzC,EAAAuE,KAAKQ,IACjBthB,EAAO8mC,UAAUsI,QAAQ+zB,MAEhC9iE,KAAKuvD,YAAcrzC,EAAAuE,KAAKI,IACjBlhB,EAAOknC,UAAUkI,QAAQ+zB,GAAW9zB,SAAS8zB,KAGxD,KAAK3mD,EAAAvF,YAAYmB,OAEf,OADAtU,QAAQk/D,GACD3iE,KAAK2jE,qBAA8C54D,GAE5D,KAAKoR,EAAAvF,YAAYe,OAEf,OADAlU,QAAQk/D,GACD3iE,KAAK4jE,qBAA8C74D,EAAY+tD,GAS1E,OALA94D,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAEbpE,KAAKuvD,YAAcuJ,EACZn5D,EAAOksC,qBAIhBsjB,EAAAltD,UAAA4hE,mBAAA,SAAmBC,GACjB,IAMIC,EACAC,EAPAn4C,EAAU7rB,KAAK6rB,QACflsB,EAASK,KAAKL,OACd6gB,EAAUxgB,KAAKwgB,QACfivC,EAAiBzvD,KAAKyvD,eACtBwU,EAAgBp4C,EAAQlM,MAI5B,GAAK8vC,EAAetqC,IAAI2+C,GA2BtBE,GADAD,EAA+BtU,EAAevuD,IAAI4iE,IACrBh/B,WA3BO,CACpC,IAAIo/B,EAAeJ,EAAYx+D,OAC3B6+D,EAAa,EAAmB,EAAfD,EACjBp/B,EAAS,EACT/kB,EAAe8L,EAAQ9L,aACvBkkD,IACFE,GAAcpkD,EACd+kB,GAAU/kB,GAEZ,IAAIqkD,EAAe,IAAIjyB,WAAWgyB,GAClCC,EAAat/B,GAAsC,IAAvBo/B,EAC5BE,EAAat/B,EAAS,GAAMo/B,IAAkB,EAAK,IACnDE,EAAat/B,EAAS,GAAMo/B,IAAiB,GAAM,IACnDE,EAAat/B,EAAS,GAAMo/B,IAAiB,GAAM,IACnD,IAAK,IAAI7jE,EAAI,EAAGA,EAAI6jE,IAAgB7jE,EAClC+jE,EAAat/B,EAAS,EAAQ,EAAJzkC,GAA6C,IAAnCyjE,EAAYp+D,WAAWrF,GAC3D+jE,EAAat/B,EAAS,EAAQ,EAAJzkC,GAAUyjE,EAAYp+D,WAAWrF,KAAO,EAAK,IAEzE0jE,EAAgB/jE,KAAK80D,iBAAiBsP,EAAc5jD,EAAQW,UAAU6E,UACtEypC,EAAexnD,IAAI67D,EAAaC,GAE9BC,EADEC,EACatc,QAAQoc,EAAcj/B,OAAQrjB,QAAQ1B,EAAc,IAEpDgkD,EAAcj/B,OAMjC,GAAIjZ,EAAQ3M,YAAYiG,IAAI,UAAW,CACrC,IAAIk/C,EAAmBx4C,EAAQ3M,YAAYhe,IAAI,UAC/ClB,KAAKuvD,YAAc8U,OAEnBrkE,KAAKuvD,YAAc/uC,EAAQW,UAE7B,OAAIX,EAAQkB,SACH/hB,EAAOknC,UAAUkI,QAAQi1B,GAAeh1B,SAASg1B,KAExDvgE,OAAO2/D,WAAWY,IACXrkE,EAAO8mC,UAAUsI,QAAQi1B,MAIpC7U,EAAAltD,UAAA0hE,qBAAA,SAAqB54D,GACnB,OAAO/K,KAAK6jE,mBAAmB94D,EAAWzJ,QAI5C6tD,EAAAltD,UAAAqiE,kBAAA,SAAkBC,EAAmB/2D,GACnC,IAAIlI,EAASkI,EAAOlI,OAChB0gB,EAAWu+C,EAAYv+C,SACvBw+C,EAAal/D,EAAS0gB,EACtBy+C,EAAgBzkE,KAAKwgB,QAAQW,UAAU6E,SAGvC0+C,EAAmBD,EAAgB,EAAI,GAAK,EAC5CE,EAAiBD,EAIjBE,EAAkB,GAAM,GAAKC,IAAIL,EADd,EAC8C,GAEjE34C,EAAU7rB,KAAK6rB,QACfi5C,EAAUj5C,EAAQlM,MAClBI,EAAe8L,EAAQ9L,aAEvB+kB,EAAS,EACTggC,IACFhgC,GAAU/kB,EACV4kD,GAAkB5kD,EAClB6kD,GAAmB7kD,GAIrB,IAAI8kB,EAAS,IAAIsN,WAAWuyB,EAAkBE,GAC1C7/B,EAAU/kC,KAAK80D,iBAAiBjwB,GAGf,GAAjB4/B,GACFvhE,EAAA6hE,SAASpd,QAAQ5iB,EAAQD,OAAQrjB,QAAQijD,IAAmB7/B,EAAQC,GACpEA,GAAU,IAEVrhC,OAAO4/D,WAAWt+B,EAAQD,SAC1B5hC,EAAA8hE,SAASj2B,QAAQhK,EAAQD,QAAU4/B,EAAiB7/B,EAASC,GAC7DA,GAAU,GAEZ5hC,EAAA8hE,SAAS1/D,EAAQu/B,EAAQC,GACzBA,GAAU,EACVrhC,QAASqhC,EAAS,GAAK,IAAO6/B,GAG9B7/B,EAAS6/B,EACLG,IAAShgC,GAAU/kB,GACvB7c,EAAA8hE,SAASR,EAAY3/B,EAAQC,GAC7BA,GAnCuB,EAoCvB,IAAIwsB,EAAaiT,EAAYn1C,eAC7B,OAAQkiC,GACN,OACE,OAAQtrC,GACN,KAAK,EACH,IAAK,IAAI3lB,EAAI,EAAGA,EAAIiF,IAAUjF,EAAG,CAC/B,IAAIiB,EAAQkM,EAAOnN,GACnBoD,OAAO2Y,EAAAoc,kBAAkBl3B,IAAUgwD,GACnC7tD,OAAO2Y,EAAAiY,gBAAgB/yB,IAAU8a,EAAAkY,aAAa6C,OAC9Cj0B,EAAA+hE,QAAQ7oD,EAAAgb,iBAAiB91B,GAAQujC,EAAQC,GACzCA,GAAU,EAEZ,MAEF,KAAK,EACH,IAASzkC,EAAI,EAAGA,EAAIiF,IAAUjF,EAAG,CAC3BiB,EAAQkM,EAAOnN,GACnBoD,OAAO2Y,EAAAoc,kBAAkBl3B,IAAUgwD,GACnC7tD,OAAO2Y,EAAAiY,gBAAgB/yB,IAAU8a,EAAAkY,aAAa6C,OAC9Cj0B,EAAAgiE,SAAS9oD,EAAAgb,iBAAiB91B,GAAQujC,EAAQC,GAC1CA,GAAU,EAEZ,MAEF,KAAK,EACH,IAASzkC,EAAI,EAAGA,EAAIiF,IAAUjF,EAAG,CAC3BiB,EAAQkM,EAAOnN,GACnBoD,OAAO2Y,EAAAoc,kBAAkBl3B,IAAUgwD,GACnC7tD,OAAO2Y,EAAAiY,gBAAgB/yB,IAAU8a,EAAAkY,aAAa6C,OAC9Cj0B,EAAA8hE,SAAS5oD,EAAAgb,iBAAiB91B,GAAQujC,EAAQC,GAC1CA,GAAU,EAEZ,MAEF,QAASrhC,QAAO,GAElB,MAEF,OACE,IAASpD,EAAI,EAAGA,EAAIiF,IAAUjF,EAAG,CAC3BiB,EAAQkM,EAAOnN,GACnBoD,OAAO2Y,EAAAoc,kBAAkBl3B,IAAUgwD,GACnC7tD,OAAO2Y,EAAAiY,gBAAgB/yB,IAAU8a,EAAAkY,aAAa6C,OAC9Cj0B,EAAA6hE,SAAStjD,QAAQrF,EAAAqc,oBAAoBn3B,GAAQ8a,EAAA24B,qBAAqBzzC,IAASujC,EAAQC,GACnFA,GAAU,EAEZ,MAEF,OACE,IAASzkC,EAAI,EAAGA,EAAIiF,IAAUjF,EAAG,CAC3BiB,EAAQkM,EAAOnN,GACnBoD,OAAO2Y,EAAAoc,kBAAkBl3B,IAAUgwD,GACnC7tD,OAAO2Y,EAAAiY,gBAAgB/yB,IAAU8a,EAAAkY,aAAa6C,OAC9Cj0B,EAAAiiE,SAAS/oD,EAAAsc,iBAAiBp3B,GAAQujC,EAAQC,GAC1CA,GAAU,EAEZ,MAEF,OACE,IAASzkC,EAAI,EAAGA,EAAIiF,IAAUjF,EAAG,CAC3BiB,EAAQkM,EAAOnN,GACnBoD,OAAO2Y,EAAAoc,kBAAkBl3B,IAAUgwD,GACnC7tD,OAAO2Y,EAAAiY,gBAAgB/yB,IAAU8a,EAAAkY,aAAa6C,OAC9Cj0B,EAAAkiE,SAAShpD,EAAAuc,iBAAiBr3B,GAAQujC,EAAQC,GAC1CA,GAAU,EAEZ,MAEF,QAASrhC,QAAO,GAElBA,OAAOqhC,GAAU6/B,EAAiBC,GAElC,IAAItlD,EAAiBtf,KAAK6rB,QAAQvM,eAClC,GAAIA,EAAgB,CAClB,IAAI+lD,EAAgBrlE,KAAKggB,SAASqF,aAAa/F,GAAkBilD,GAAe,KAAMloD,EAAA4sC,WAAWK,QACjG,IAAK+b,EAEH,OADArlE,KAAKuvD,YAAcvvD,KAAKwgB,QAAQW,UACzBnhB,KAAKL,OAAOksC,oBAErB7rC,KAAKuvD,YAAc8V,EAAch9D,UAEjCrI,KAAKuvD,YAAcvvD,KAAKwgB,QAAQW,UAIlC,IAAImkD,EAAUvgC,EAAQD,OAEtB,OADIggC,IAASQ,EAAU3d,QAAQ2d,EAAS7jD,QAAQ1B,EAAc,KACzC,GAAjB0kD,EACKzkE,KAAKL,OAAOknC,UAAUkI,QAAQu2B,GAAUt2B,SAASs2B,KAExD7hE,OAAO4/D,WAAWiC,IACXtlE,KAAKL,OAAO8mC,UAAUsI,QAAQu2B,MAIzCnW,EAAAltD,UAAA2gE,oBAAA,SACE2B,EACAz4D,EACAy5D,EACA9Y,GASA,IAPA,IAAI9sD,EAASK,KAAKL,OAGd2F,EAASwG,EAAYxG,OACrBkI,EAAS,IAAIrH,MAAqBb,GAClCkgE,EAAoBjB,EAAYn1C,eAChCq2C,GAAW,EACNplE,EAAI,EAAGA,EAAIiF,IAAUjF,EAI5B,GAHAmN,EAAOnN,GAAKyL,EAAYzL,GACpBL,KAAKmzD,kBAA8BrnD,EAAYzL,GAAIkkE,EAAW,KAC9DA,EAAY7nB,aAAa/8C,GACzB8lE,EAAU,CACZ,IAAIt7D,EAAOxK,EAAOmxC,qBAAqBtjC,EAAOnN,IAC1C+b,EAAAiY,gBAAgBlqB,IAASiS,EAAAkY,aAAa6C,MACxC1zB,OAAO2Y,EAAAoc,kBAAkBruB,IAASq7D,IAE9BD,GACFvlE,KAAKsG,QACH2V,EAAAnY,eAAesvD,4DACf3G,EAAWroD,OAGfqhE,GAAW,GAMjB,GAAIA,EAAU,OAAOzlE,KAAKskE,kBAAkBC,EAAa/2D,GAGzD,IAAI8R,EAAiB7b,OAAOzD,KAAK6rB,QAAQvM,gBACzC,IAAKA,GAAkBA,EAAevY,MAAQo0C,EAAAz8B,YAAYiG,gBAAiB,OAAOhlB,EAAOksC,oBACzF,IAAIw5B,EAAgBrlE,KAAKggB,SAASqF,aAA6B/F,GAAkBilD,IACjF,IAAKc,EAAe,OAAO1lE,EAAOksC,oBAClC,IAAI65B,EAAYL,EAAch9D,KAG9BrI,KAAKuvD,YAAcmW,EACnB,IAAIrU,EAASgU,EAAch0C,eAAe8pB,EAAAn/B,aAAaY,aAAa,GACpE,IAAKy0C,EAKH,OAJArxD,KAAKuG,MACH0V,EAAAnY,eAAe06D,+CACf/R,EAAWroD,MAAOihE,EAAc9iD,cAE3B5iB,EAAOksC,oBAEhB,IAAI85B,EAAkBD,EAAUt2C,eAC5ByC,EAAkB7xB,KAAK6xB,gBACvB4lC,EAAY5lC,EAAgB5C,aAAay2C,GAAW,GACpDvR,EAAQ,IAAIhuD,MAAqB,EAAIb,GACrConB,EAAQ,EACZynC,EAAMznC,KAAW/sB,EAAOiqC,eAAe6tB,EAAU/qC,MAC/C1sB,KAAK68D,eAAep5D,OAAO4hE,EAAcz0C,sBACvCjxB,EAAO8mC,UAAU,GACjB9mC,EAAO8mC,UAAUnhC,MAGrB,IAASjF,EAAI,EAAGA,EAAIiF,IAAUjF,EAC5B8zD,EAAMznC,KAAW1sB,KAAK68D,eAAexL,GACnC1xD,EAAOmoC,eAAe2vB,EAAU/qC,MAAOi5C,GACvChmE,EAAO8mC,UAAUpmC,GACjBmN,EAAOnN,KAOX,OAJAoD,OAAOipB,EAAQ,GAAKynC,EAAM7uD,QAC1B6uD,EAAMznC,GAAS/sB,EAAOmoC,eAAe2vB,EAAU/qC,MAAOi5C,GACtD9zC,EAAgBtC,cAAckoC,GAC9Bz3D,KAAKuvD,YAAcmW,EACZ/lE,EAAOqqC,YAAY,KAAMmqB,EAAOwR,IAGzCxW,EAAAltD,UAAA2hE,qBAAA,SAAqB74D,EAAqC+tD,GACxD,IAAIn5D,EAASK,KAAKL,OAGd67C,EAAiBsd,EAAetd,eACpC,IAAKA,GAAkBA,EAAe1zC,GAAGrB,EAAApE,YAAYmmB,UAKnD,OAJAxoB,KAAKuG,MACH0V,EAAAnY,eAAegvD,mCACf/nD,EAAW3G,MAAO,WAAY00D,EAAej0D,YAExClF,EAAOksC,oBAIhB,IAAI8lB,EAAOnW,EAAe5qB,oBAC1B,GAAI+gC,EAAM,CACR,GAAIA,EAAK5+C,UAAUqqC,mBAKjB,OAJAp9C,KAAKuG,MACH0V,EAAAnY,eAAe8hE,sDACf76D,EAAW3G,MAAOo3C,EAAe32C,YAE5BlF,EAAOksC,oBAEhB,GAAI8lB,EAAK7pD,GAAGrB,EAAApE,YAAYu9C,SAKtB,OAJA5/C,KAAKuG,MACH0V,EAAAnY,eAAe+hE,mFACf96D,EAAW3G,MAAOo3C,EAAe32C,YAE5BlF,EAAOksC,oBAEhB,GAAI8lB,EAAK7pD,GAAGrB,EAAApE,YAAYw9C,WAKtB,OAJA7/C,KAAKuG,MACH0V,EAAAnY,eAAegiE,qFACf/6D,EAAW3G,MAAOo3C,EAAe32C,YAE5BlF,EAAOksC,oBAKlB,IAAIt+B,EAAQxC,EAAWwC,MACnB49B,EAAW59B,EAAMjI,OACjBkI,EAASzC,EAAWyC,OACpBsC,EAAU0rC,EAAe1rC,QACzBi2D,GAAY,EACZ1D,EAAQ,IAAIl8D,MAAqBglC,EAAW,GAC5CssB,EAAYz3D,KAAK6xB,gBAAgB5C,aAAajvB,KAAKwgB,QAAQW,WAC/D1d,OAAO0nC,GAAY39B,EAAOlI,QAC1B,IAAK,IAAIjF,EAAI,EAAGsK,EAAIwgC,EAAU9qC,EAAIsK,IAAKtK,EAAG,CACxC,IAAI4Z,EAASnK,EAAUA,EAAQ5O,IAAIqM,EAAMlN,GAAG+E,MAAQ,KACpD,GAAK6U,GAAUA,EAAOlT,MAAQo0C,EAAAz8B,YAAY6R,MAA1C,CAQA,IAAIloB,EAAe4R,EAAQ5R,KAC3Bg6D,EAAMhiE,EAAI,GAAKL,KAAKL,OAAO8oC,YACzBpgC,EAAK2d,SACLhmB,KAAKL,OAAOmoC,eAAe2vB,EAAU/qC,MAAO1sB,KAAKwgB,QAAQ+wC,gBACzDvxD,KAAKmzD,kBAAkB3lD,EAAOnN,GAAY4Z,EAAQ5R,KAAI,KACtDA,EAAK+mB,eACGnV,EAAQuW,mBAbhBxwB,KAAKuG,MACH0V,EAAAnY,eAAemnD,oCACf19C,EAAMlN,GAAG+D,MAAOmJ,EAAMlN,GAAG+E,KAAMo2C,EAAe32C,YAEhDkhE,GAAY,EAahB,OADA/lE,KAAKuvD,YAAc/T,EAAenzC,KAAKozC,gBACnCsqB,EAAkBpmE,EAAOksC,qBAG7Bw2B,EAAM,GAAK1iE,EAAOiqC,eAChB6tB,EAAU/qC,MACV6hC,EAAAyX,gBAAgBhmE,KAAMw7C,EAAgBzwC,IAIxCs3D,EAAMA,EAAM/8D,OAAS,GAAK3F,EAAOmoC,eAAe2vB,EAAU/qC,MAAO1sB,KAAKwgB,QAAQ+wC,gBAEvE5xD,EAAOqqC,YAAY,KAAMq4B,EAAOriE,KAAKwgB,QAAQ+wC,kBAGtDpC,EAAAltD,UAAA23D,qBAAA,SAAqB7uD,EAA2B+tD,GAC9C,IAAIn5D,EAASK,KAAKL,OACd6gB,EAAUxgB,KAAKwgB,QACfqR,EAAkB7xB,KAAK6xB,gBAGvBV,EAASnxB,KAAKggB,SAAS+qC,kBACzBhgD,EAAWA,WACX8mB,GAEF,IAAKV,EAAQ,OAAOxxB,EAAOksC,oBAC3B,GAAI1a,EAAOpqB,MAAQo0C,EAAAz8B,YAAYiG,gBAK7B,OAJA3kB,KAAKuG,MACH0V,EAAAnY,eAAemiE,yEACfl7D,EAAWA,WAAW3G,OAEjBpE,KAAKL,OAAOksC,oBAErB,IAGI2P,EAqBArxC,EAxBAge,EAAiCgJ,EACjC+6B,EAA8B,KAC9B/jD,EAAgB4C,EAAW5C,cAoB/B,KAbE+jD,GAJC/jD,GACoD,QAApDqzC,EAAiBsd,EAAetd,iBACjCA,EAAe1zC,GAAGrB,EAAApE,YAAYqjB,SAEd1lB,KAAKggB,SAASqF,aAC5B8C,EACAqzB,EAAerzC,cACf0pB,EAAgB/C,KAAK9B,yBAGPhtB,KAAKggB,SAAS0pC,8BAC5BvhC,EACAhgB,EACA0pB,EAAgB/C,KAAK9B,wBACrBjiB,IAGgB,OAAOpL,EAAOksC,oBAKlC,IAAIq6B,EAAqCha,EACrCt7B,EAAuC,KAC3C,GAEE,GADAA,EAAsBs1C,EAAqBt1C,oBAClB,YAClBs1C,EAAuBA,EAAqBx1C,MAcrD,OAVEvmB,EADEymB,EACK5wB,KAAKm+D,kBAAkBvtC,EAAqB7lB,EAAWnB,UAAWmB,EACvEyV,EAAQW,UAAUu7B,aAAa/8C,IAK1BK,KAAKmmE,aAAaja,EAAenhD,GAG1C/K,KAAKuvD,YAAcrD,EAAc7jD,KAC1B8B,GAGTglD,EAAAltD,UAAA43D,+BAAA,SACE9uD,EACA+tD,GAGA,OAAO94D,KAAKmzD,kBACVpoD,EAAWA,WACX+tD,EAAc,MAWlB3J,EAAAltD,UAAA63D,gCAAA,SACElP,EACAkO,EACAwJ,GAEA,IAAI3iE,EAASK,KAAKL,OAEdwxB,EAASnxB,KAAKggB,SAAS2qC,sBAAsBC,EAAgB5qD,KAAK6xB,iBACtE,IAAKV,EAAQ,OAAOxxB,EAAOksC,oBAE3B,OAAQ1a,EAAOpqB,MACb,KAAKo0C,EAAAz8B,YAAY5I,OACf,IAAK9V,KAAKyyD,cAAsBthC,GAC9B,OAAOxxB,EAAOksC,oBAEhB,IAAIqC,EAAsB/c,EAAQ9oB,KAElC,OADA5E,OAAOyqC,GAAchyB,EAAAuE,KAAKc,MACb4P,EAAQrpB,GAAGrB,EAAApE,YAAYiqB,SAC3BtsB,KAAK64D,sBAA8B1nC,EAAQ2nC,EAAgBwJ,IAEpEtiE,KAAKuvD,YAAcrhB,EACZvuC,EAAOuoC,gBAAyB/W,EAAQ5O,aAAc2rB,EAAW9e,iBAE1E,KAAK+rB,EAAAz8B,YAAYsN,UACf,IAAIrkB,EAAqBwpB,EAAQxpB,OAEjC,OADAlE,OAAkB,OAAXkE,GAAmBA,EAAOZ,MAAQo0C,EAAAz8B,YAAYqN,MAChD/rB,KAAKqzD,YAAkB1rD,IAI5B3H,KAAKuvD,YAAcrzC,EAAAuE,KAAKG,IACRuQ,EAAQrpB,GAAGrB,EAAApE,YAAYiqB,SAC9B3sB,EAAO8mC,UAAsBtV,EAAQlF,eAEvCtsB,EAAOuoC,gBAA4B/W,EAAQ5O,aAAY,KAP5DviB,KAAKuvD,YAAcrzC,EAAAuE,KAAKG,IACjB5gB,KAAKL,OAAOksC,qBAQvB,KAAKsP,EAAAz8B,YAAY6R,MACf,IAAIouC,EAAiBl7D,OAAOzD,KAAKggB,SAASkpC,uBAC1CzlD,OAAe0tB,EAAQX,cAAgB,GACvC,IAAIouC,EAAW5+D,KAAK6yD,4BAClB8L,EACA3+D,KAAKwgB,QAAQW,UAAS,GAIxB,OADAnhB,KAAKuvD,YAAsBp+B,EAAQ9oB,KAC5B1I,EAAOyoC,WACJjX,EAAQ9oB,KAAK2d,SACbmL,EAAQ9oB,KAAKP,GAAG,GACxB82D,EACQztC,EAAQ9oB,KAAK+mB,eACb+B,EAAQX,cAGpB,KAAK2qB,EAAAz8B,YAAYmL,SACf,IAAI5nB,EAAuBkvB,EAAQrH,gBACnC,GAAI7nB,EAAW,CACb,IAAImjB,EAAWplB,KAAKggB,SAAS6F,gBAAgB5jB,EAAW,MACxD,IAAKmjB,EAAU,OAAOzlB,EAAOksC,oBAC7B,IAAI94B,EAAYqS,EAASrS,UACzB,IAAK/S,KAAK+/D,mBACRhtD,EACA,EACAqS,EAAStd,GAAGrB,EAAApE,YAAY6rB,UACxB08B,GAEA,OAAOjrD,EAAOksC,oBAEhB,IAAIs0B,EAA8D,IAApD/6C,EAASwD,eAAiBuyB,EAAAx8B,eAAe5I,QACvD,GAAIqP,EAAStd,GAAGrB,EAAApE,YAAY6rB,UAAW,CACjCvmB,EAASlE,OAAO2hB,EAASzd,QAC7BlE,OAAOkE,EAAOZ,MAAQo0C,EAAAz8B,YAAYvH,OAC9BwnD,EAAiBl7D,OAAOzD,KAAKggB,SAASkpC,uBACtC0V,EAAW5+D,KAAK6yD,4BAClB8L,EACA3+D,KAAKwgB,QAAQW,UAAS,GAIxB,OADAnhB,KAAKuvD,YAAcx8C,EAAU3J,WACtBpJ,KAAKm+D,kBAAkB/4C,KAAcwlC,EAAgBgU,EAAUuB,GAGtE,OADAngE,KAAKuvD,YAAcx8C,EAAU3J,WACtBpJ,KAAKm+D,kBAAkB/4C,KAAcwlC,EAAgB,EAAGuV,GAOjE,OAJAngE,KAAKuG,MACH0V,EAAAnY,eAAemnD,oCACfL,EAAexmD,MAAkB+sB,EAAQhK,WAAuBgK,EAAQxpB,OAAO9C,YAE1ElF,EAAOksC,oBAQpB,OAJA7rC,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfqjC,EAAexmD,OAEVzE,EAAOksC,qBAGhBsjB,EAAAltD,UAAA83D,yBAAA,SAAyBhvD,EAA+B+tD,GACtD,IAAI1qD,EAASrD,EAAWqD,OACpBC,EAAStD,EAAWsD,OACpBwjB,EAAkB7xB,KAAK6xB,gBACvBC,EAAaD,EAAgB/C,KAE7BunC,EAAWr2D,KAAKs2D,cAClBt2D,KAAK6yD,4BAA4B9nD,EAAWoD,UAAW+N,EAAAuE,KAAKW,KAAI,GAChEphB,KAAKuvD,aAGP,IACGvvD,KAAKwgB,QAAQmB,eACd3hB,KAAK6xB,gBAAgB7pB,MAAMvB,EAAApE,YAAYqjB,QAAUjf,EAAApE,YAAY60D,iBAC7D,CAEA,IAAIC,EAAkBn3D,KAAKL,OAAOmxC,qBAAqBulB,GACvD,GACEj6C,EAAAiY,gBAAgB8iC,IAAoB/6C,EAAAkY,aAAa6C,OACf,GAAlC/a,EAAAoc,kBAAkB2+B,GAElB,OAAO/6C,EAAAgb,iBAAiB+/B,GACpBn3D,KAAK6yD,4BAA4BzkD,EAAQ0qD,EAAc,GACvD94D,KAAK6yD,4BAA4BxkD,EAAQyqD,EAAc,GAI3DzC,EAAWr2D,KAAKs2D,cACdt2D,KAAK6yD,4BAA4B9nD,EAAWoD,UAAW+N,EAAAuE,KAAKW,KAAI,GAChEphB,KAAKuvD,aAKX,IAAI6W,EAAat0C,EAAWO,OAC5BR,EAAgB/C,KAAOs3C,EACvB,IAAIC,EAAarmE,KAAK6yD,4BAA4BzkD,EAAQ0qD,EAAc,GACpEwN,EAAatmE,KAAKuvD,YACtB6W,EAAW5zC,OAEX,IAAI+zC,EAAaz0C,EAAWO,OAC5BR,EAAgB/C,KAAOy3C,EACvB,IAAIC,EAAaxmE,KAAK6yD,4BAA4BxkD,EAAQyqD,EAAc,GACpE2N,EAAazmE,KAAKuvD,YACtB19B,EAAgB/C,KAAOy3C,EAAW/zC,OAElCV,EAAWgC,cAAcsyC,EAAYG,GAErC,IAAIzK,EAAa5/C,EAAAuE,KAAK87B,iBAAiB+pB,EAAYG,GAAY,GAC/D,OAAK3K,GAQLuK,EAAarmE,KAAKk6D,kBAChBmM,EACAC,EACAxK,EAAU,IAGV1tD,GAEFo4D,EAAaxmE,KAAKk6D,kBAChBsM,EACAC,EACA3K,EAAU,IAGVztD,GAEFrO,KAAKuvD,YAAcuM,EACZ97D,KAAKL,OAAO8qC,SAAS4rB,EAAUgQ,EAAYG,KAxBhDxmE,KAAKuG,MACH0V,EAAAnY,eAAegvD,mCACf/nD,EAAW3G,MAAOkiE,EAAWzhE,WAAY4hE,EAAW5hE,YAEtD7E,KAAKuvD,YAAcuJ,EACZ94D,KAAKL,OAAOksC,sBAsBvBsjB,EAAAltD,UAAA+3D,8BAAA,SAA8BjvD,EAAoC+tD,GAChE,IAAIn5D,EAASK,KAAKL,OACdkyB,EAAkB7xB,KAAK6xB,gBAGvB60C,EAAW1mE,KAAKmzD,kBAClBpoD,EAAWiE,QACX8pD,GAAkB58C,EAAAuE,KAAKc,KACnBrF,EAAAuE,KAAKG,IACLk4C,EAAc,KAKpB,GAAI18C,EAAAiY,gBAAgBqyC,IAAatqD,EAAAkY,aAAayF,YAAa,OAAO2sC,EAClE,IAEIp/B,EACAgqB,EACAqV,EAJApX,EAAcvvD,KAAKuvD,YAMvB,OAAQxkD,EAAWI,UACjB,KAAKzE,EAAAC,MAAMw6C,UAGT,GAAInhD,KAAKuvD,YAAYznD,GAAE,KAKrB,OAJA9H,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAENpE,KAAKL,OAAOksC,oBAGrB,OAAQ0jB,EAAYxoD,MAClB,OACA,OACA,OACA,OACA,OACA,OACA,QACEugC,EAAKlrB,EAAA4Y,SAAS4+B,OACdtC,EAAU,EACVqV,EAAYhnE,EAAO8mC,UAAU,GAC7B,MAEF,OACA,OAEEa,GADI9mB,EAAUxgB,KAAKwgB,SACNkB,SACTtF,EAAA4Y,SAASmnC,OACT//C,EAAA4Y,SAAS4+B,OACbtC,EAAa9wC,EAAQ+wC,eACrBoV,EAAYpX,EAAY5S,YAAYh9C,GACpC,MAEF,OACA,OACE2nC,EAAKlrB,EAAA4Y,SAASmnC,OACd7K,EAAU,EACVqV,EAAYhnE,EAAOknC,UAAU,GAC7B,MAEF,QACES,EAAKlrB,EAAA4Y,SAASonC,OACd9K,EAAU,EACVqV,EAAYhnE,EAAOsnC,UAAU,GAC7B,MAEF,QACEK,EAAKlrB,EAAA4Y,SAASqnC,OACd/K,EAAU,EACVqV,EAAYhnE,EAAOwnC,UAAU,GAC7B,MAEF,QAEE,OADA1jC,QAAO,GACA9D,EAAOksC,oBAGlB,MAEF,KAAKnlC,EAAAC,MAAMy6C,YAGT,GAAIphD,KAAKuvD,YAAYznD,GAAE,KAKrB,OAJA9H,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAENpE,KAAKL,OAAOksC,oBAGrB,OAAQ0jB,EAAYxoD,MAClB,OACA,OACA,OACA,OACA,OACA,OACA,QACEugC,EAAKlrB,EAAA4Y,SAASsnC,OACdhL,EAAU,EACVqV,EAAYhnE,EAAO8mC,UAAU,GAC7B,MAEF,OACA,OACE,IAAIjmB,EACJ8mB,GADI9mB,EAAUxgB,KAAKwgB,SACNkB,SACTtF,EAAA4Y,SAASunC,OACTngD,EAAA4Y,SAASsnC,OACbhL,EAAa9wC,EAAQ+wC,eACrBoV,EAAYpX,EAAY5S,YAAYh9C,GACpC,MAEF,OACA,OACE2nC,EAAKlrB,EAAA4Y,SAASunC,OACdjL,EAAU,EACVqV,EAAYhnE,EAAOknC,UAAU,GAC7B,MAEF,QACES,EAAKlrB,EAAA4Y,SAASwnC,OACdlL,EAAU,EACVqV,EAAYhnE,EAAOsnC,UAAU,GAC7B,MAEF,QACEK,EAAKlrB,EAAA4Y,SAASynC,OACdnL,EAAU,EACVqV,EAAYhnE,EAAOwnC,UAAU,GAC7B,MAEF,QAEE,OADA1jC,QAAO,GACA9D,EAAOksC,oBAGlB,MAEF,QAEE,OADApoC,QAAO,GACA9D,EAAOksC,oBAKlB,GAAIitB,GAAkB58C,EAAAuE,KAAKc,KACzB,OAAOvhB,KAAK44D,2BAA2B7tD,EAAWiE,QAChDrP,EAAO6nC,aAAaF,EAClBo/B,EACAC,IAEF,GAKJ,IAAIlP,EAAY5lC,EAAgB5C,aAAasgC,GAAa,GACtDqX,EAAW5mE,KAAK44D,2BAA2B7tD,EAAWiE,QACxDrP,EAAO6nC,aAAaF,EAClBtnC,KAAKL,OAAOmoC,eAAe2vB,EAAU/qC,MAAO4kC,GAC5CqV,IAEF,GAEF3mE,KAAKuvD,YAAc9rD,OAAOg0D,GAAWpvD,KACrCwpB,EAAgBtC,cAAqBkoC,GAErC,IAAIxpC,EAAqBwpC,EAAW/qC,MACpC,OAAO/sB,EAAOqqC,YAAY,MACxBrqC,EAAOiqC,eAAe3b,EAAYy4C,GAClCE,EACAjnE,EAAOmoC,eAAe7Z,EAAYqjC,IACjCA,IAGLnC,EAAAltD,UAAAg4D,6BAAA,SACElvD,EACA+tD,GAEA,IAEI3uD,EAFAxK,EAASK,KAAKL,OACdo8D,GAAW,EAGf,OAAQhxD,EAAWI,UACjB,KAAKzE,EAAAC,MAAMsX,KAWT,GAVA9T,EAAOnK,KAAKmzD,kBACVpoD,EAAWiE,QACX8pD,GAAkB58C,EAAAuE,KAAKc,KACnBrF,EAAAuE,KAAKG,IACLk4C,EAAc,KAMhB94D,KAAKuvD,YAAYznD,GAAE,KAAuB,CAE5C,GADI0zC,EAAiBx7C,KAAKuvD,YAAY/T,eAGpC,GADIhqB,EAAWgqB,EAAenqB,eAAe8pB,EAAAn/B,aAAaiC,MAC5C,CACZ9T,EAAOnK,KAAK+9D,qBAAqBvsC,EAAUzmB,EAAWiE,QAAS7E,EAAMY,GACrE,MAOJ,OAJA/K,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAENzE,EAAOksC,oBAIhB,MAEF,KAAKnlC,EAAAC,MAAMwX,MACT,GAAIpT,EAAWiE,QAAQjI,MAAQoV,EAAAtV,SAASG,UAClB+D,EAAWiE,QAAS8H,aAAeqF,EAAAvF,YAAYa,SAC/C1M,EAAWiE,QAAS8H,aAAeqF,EAAAvF,YAAYU,OAClE,CAEDnN,EAAOnK,KAAK25D,yBAA4C5uD,EAAWiE,QAAS8pD,GAAgB,GAExF94D,KAAKwgB,QAAQqP,WAAW7vB,KAAKg2D,iBAAiB7rD,EAAMY,EAAW3G,OACnE,MAaF,GAVA+F,EAAOnK,KAAKmzD,kBACVpoD,EAAWiE,QACX8pD,GAAkB58C,EAAAuE,KAAKc,KACnBrF,EAAAuE,KAAKG,IACLk4C,EAAc,KAMhB94D,KAAKuvD,YAAYznD,GAAE,KAAuB,CAE5C,GADI0zC,EAAiBx7C,KAAKuvD,YAAY/T,eAGpC,GADIhqB,EAAWgqB,EAAenqB,eAAe8pB,EAAAn/B,aAAamC,OAC5C,CACZhU,EAAOnK,KAAK+9D,qBAAqBvsC,EAAUzmB,EAAWiE,QAAS7E,EAAMY,GACrE,MAOJ,OAJA/K,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAENzE,EAAOksC,oBAGhB,OAAQ7rC,KAAKuvD,YAAYxoD,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEoD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASsnC,OAAQ38D,EAAO8mC,UAAU,GAAIt8B,GACjE,MAEF,OACA,OACEA,EAAOxK,EAAO6nC,aACZxnC,KAAKwgB,QAAQkB,SACTtF,EAAA4Y,SAASunC,OACTngD,EAAA4Y,SAASsnC,OACbt8D,KAAKuvD,YAAY7S,aAAa/8C,GAC9BwK,GAEF,MAEF,OACA,OACEA,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASunC,OAAQ58D,EAAOknC,UAAU,GAAI18B,GACjE,MAEF,QACEA,EAAOxK,EAAO0nC,YAAYjrB,EAAA8b,QAAQ2uC,OAAQ18D,GAC1C,MAEF,QACEA,EAAOxK,EAAO0nC,YAAYjrB,EAAA8b,QAAQ4uC,OAAQ38D,GAC1C,MAEF,QACE1G,QAAO,GACP0G,EAAOxK,EAAOksC,oBAGlB,MAEF,KAAKnlC,EAAAC,MAAMw6C,UAYT,GAXA4a,GAAW,EACX5xD,EAAOnK,KAAKmzD,kBACVpoD,EAAWiE,QACX8pD,GAAkB58C,EAAAuE,KAAKc,KACnBrF,EAAAuE,KAAKG,IACLk4C,EAAc,KAMhB94D,KAAKuvD,YAAYznD,GAAE,KAAuB,CAE5C,GADI0zC,EAAiBx7C,KAAKuvD,YAAY/T,eAGpC,GADIhqB,EAAWgqB,EAAenqB,eAAe8pB,EAAAn/B,aAAakC,YAC5C,CACZ/T,EAAOnK,KAAK+9D,qBAAqBvsC,EAAUzmB,EAAWiE,QAAS7E,EAAMY,GACrE,MAOJ,OAJA/K,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAENzE,EAAOksC,oBAGhB,OAAQ7rC,KAAKuvD,YAAYxoD,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEoD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAAS4+B,OAAQzpD,EAAMnK,KAAKL,OAAO8mC,UAAU,IACxE,MAEF,OACA,OACEt8B,EAAOxK,EAAO6nC,aACZxnC,KAAKwgB,QAAQkB,SACTtF,EAAA4Y,SAASmnC,OACT//C,EAAA4Y,SAAS4+B,OACbzpD,EACAnK,KAAKuvD,YAAY5S,YAAYh9C,IAE/B,MAEF,OACA,OACEwK,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASmnC,OAAQhyD,EAAMxK,EAAOknC,UAAU,IACnE,MAEF,QACE18B,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASonC,OAAQjyD,EAAMxK,EAAOsnC,UAAU,IACnE,MAEF,QACE98B,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASqnC,OAAQlyD,EAAMxK,EAAOwnC,UAAU,IACnE,MAEF,QACE1jC,QAAO,GACP0G,EAAOxK,EAAOksC,oBAGlB,MAEF,KAAKnlC,EAAAC,MAAMy6C,YAYT,GAXA2a,GAAW,EACX5xD,EAAOnK,KAAKmzD,kBACVpoD,EAAWiE,QACX8pD,GAAkB58C,EAAAuE,KAAKc,KACnBrF,EAAAuE,KAAKG,IACLk4C,EAAc,KAMhB94D,KAAKuvD,YAAYznD,GAAE,KAAuB,CAE5C,GADI0zC,EAAiBx7C,KAAKuvD,YAAY/T,eAGpC,GADIhqB,EAAWgqB,EAAenqB,eAAe8pB,EAAAn/B,aAAaoC,YAC5C,CACZjU,EAAOnK,KAAK+9D,qBAAqBvsC,EAAUzmB,EAAWiE,QAAS7E,EAAMY,GACrE,MAOJ,OAJA/K,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAENzE,EAAOksC,oBAGhB,OAAQ7rC,KAAKuvD,YAAYxoD,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEoD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASsnC,OAAQnyD,EAAMxK,EAAO8mC,UAAU,IACnE,MAEF,OACA,OACEt8B,EAAOxK,EAAO6nC,aACZxnC,KAAKwgB,QAAQkB,SACTtF,EAAA4Y,SAASunC,OACTngD,EAAA4Y,SAASsnC,OACbnyD,EACAnK,KAAKuvD,YAAY5S,YAAYh9C,IAE/B,MAEF,OACA,OACEwK,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASunC,OAAQpyD,EAAMxK,EAAOknC,UAAU,IACnE,MAEF,QACE18B,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASwnC,OAAQryD,EAAMxK,EAAOsnC,UAAU,IACnE,MAEF,QACE98B,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASynC,OAAQtyD,EAAMxK,EAAOwnC,UAAU,IACnE,MAEF,QACE1jC,QAAO,GACP0G,EAAOxK,EAAOksC,oBAGlB,MAEF,KAAKnlC,EAAAC,MAAMg7C,YAWT,GAVAx3C,EAAOnK,KAAKmzD,kBACVpoD,EAAWiE,QACX8pD,GAAkB58C,EAAAuE,KAAKc,KACnBrF,EAAAuE,KAAKG,IACLk4C,EAAc,KAMhB94D,KAAKuvD,YAAYznD,GAAE,KAErB,GADI0zC,EAAiBx7C,KAAKuvD,YAAY/T,eAGpC,GADIhqB,EAAWgqB,EAAenqB,eAAe8pB,EAAAn/B,aAAaqC,KAC5C,CACZlU,EAAOnK,KAAK+9D,qBAAqBvsC,EAAUzmB,EAAWiE,QAAS7E,EAAMY,GACrE,MAMNZ,EAAOnK,KAAK+mE,eAAe58D,EAAMnK,KAAKuvD,aACtCvvD,KAAKuvD,YAAcrzC,EAAAuE,KAAKW,KACxB,MAEF,KAAK1a,EAAAC,MAAMi7C,MAaT,GAZAz3C,EAAOnK,KAAKmzD,kBACVpoD,EAAWiE,QACX8pD,GAAkB58C,EAAAuE,KAAKc,KACnBrF,EAAAuE,KAAKG,IACLk4C,EAAehxD,GAAE,GACfoU,EAAAuE,KAAKI,IACLi4C,EAAc,KAMlB94D,KAAKuvD,YAAYznD,GAAE,KAAuB,CAC5C,IAAI0zC,EAEEhqB,EADN,GADIgqB,EAAiBx7C,KAAKuvD,YAAY/T,eAGpC,GADIhqB,EAAWgqB,EAAenqB,eAAe8pB,EAAAn/B,aAAasC,aAC5C,CACZnU,EAAOnK,KAAK+9D,qBAAqBvsC,EAAUzmB,EAAWiE,QAAS7E,EAAMY,GACrE,MAOJ,OAJA/K,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAENzE,EAAOksC,oBAUhB,OARE1hC,EAAOnK,KAAKk6D,kBACV/vD,EACAnK,KAAKuvD,YAAavvD,KAAKuvD,YAAY8N,QAAO,IAE1CtyD,EAAWiE,SAIPhP,KAAKuvD,YAAYxoD,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEoD,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAAS6oC,OAAQ1zD,EAAMxK,EAAO8mC,WAAW,IACpE,MAEF,OACA,OACEt8B,EAAOxK,EAAO6nC,aACZxnC,KAAKwgB,QAAQkB,SACTtF,EAAA4Y,SAAS8oC,OACT1hD,EAAA4Y,SAAS6oC,OACb1zD,EACAnK,KAAKuvD,YAAY3S,eAAej9C,IAElC,MAEF,OACA,OACEwK,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAAS8oC,OAAQ3zD,EAAMxK,EAAOknC,WAAW,GAAI,IACxE,MAEF,QACEpjC,QAAO,GACP0G,EAAOxK,EAAOksC,oBAGlB,MAEF,KAAKnlC,EAAAC,MAAMo5C,OAKT,OAJA//C,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfxc,EAAW3G,OAENzE,EAAOksC,oBAEhB,QAEE,OADApoC,QAAO,GACA9D,EAAOksC,oBAGlB,OAAOkwB,EACH/7D,KAAK44D,2BAA2B7tD,EAAWiE,QAAS7E,EAAM2uD,GAAkB58C,EAAAuE,KAAKc,MACjFpX,GAINglD,EAAAltD,UAAAk4D,uBAAA,SAAuBhwD,EAAqB9B,GAC1C,IAAI1I,EAASK,KAAKL,OACdmvB,EAAO9uB,KAAK6xB,gBAAgB/C,KAChC,OAAQzmB,EAAKtB,MACX,OACM+nB,EAAKsF,YAAYjqB,EAAM9B,KACzB8B,EAAOnK,KAAKwgB,QAAQwB,WAAU,GAC1BriB,EAAO0nC,YAAYjrB,EAAA8b,QAAQ8uC,cAAe78D,GAC1CxK,EAAO6nC,aAAaprB,EAAA4Y,SAAS2C,OAC3Bh4B,EAAO6nC,aAAaprB,EAAA4Y,SAASwC,OAC3BrtB,EACAxK,EAAO8mC,UAAU,KAEnB9mC,EAAO8mC,UAAU,MAGzB,MAEF,OACM3X,EAAKsF,YAAYjqB,EAAM9B,KACzB8B,EAAOnK,KAAKwgB,QAAQwB,WAAU,GAC1BriB,EAAO0nC,YAAYjrB,EAAA8b,QAAQ+uC,eAAgB98D,GAC3CxK,EAAO6nC,aAAaprB,EAAA4Y,SAAS2C,OAC3Bh4B,EAAO6nC,aAAaprB,EAAA4Y,SAASwC,OAC3BrtB,EACAxK,EAAO8mC,UAAU,KAEnB9mC,EAAO8mC,UAAU,MAGzB,MAEF,OACM3X,EAAKsF,YAAYjqB,EAAM9B,KACzB8B,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASsC,OAClCntB,EACAxK,EAAO8mC,UAAU,OAGrB,MAEF,OACM3X,EAAKsF,YAAYjqB,EAAM9B,KACzB8B,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASsC,OAClCntB,EACAxK,EAAO8mC,UAAU,SAGrB,MAEF,QACM3X,EAAKsF,YAAYjqB,EAAM9B,KACzB8B,EAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASsC,OAClCntB,EACAxK,EAAO8mC,UAAU,KAMzB,OAAOt8B,GAITglD,EAAAltD,UAAA8kE,eAAA,SAAe58D,EAAqB9B,GAClC,IAAI1I,EAASK,KAAKL,OAClB,OAAQ0I,EAAKtB,MACX,OACA,OACA,OACA,OACA,QACEoD,EAAOnK,KAAKm6D,uBAAuBhwD,EAAM9B,GAG3C,OACA,OACE,OAAO1I,EAAO0nC,YAAYjrB,EAAA8b,QAAQC,OAAQhuB,GAE5C,OACA,OACE,OAAOxK,EAAO0nC,YAAYjrB,EAAA8b,QAAQE,OAAQjuB,GAE5C,OACA,OACE,OAAOxK,EAAO0nC,YAAyB,IAAbh/B,EAAKqvB,KAAatb,EAAA8b,QAAQE,OAAShc,EAAA8b,QAAQC,OAAQhuB,GAE/E,QACE,OAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASG,MAAOhrB,EAAMxK,EAAOsnC,UAAU,IAEpE,QACE,OAAOtnC,EAAO6nC,aAAaprB,EAAA4Y,SAASI,MAAOjrB,EAAMxK,EAAOwnC,UAAU,IAEpE,QAEE,OADA1jC,QAAO,GACA9D,EAAO8mC,UAAU,KAM9B0oB,EAAAltD,UAAAq0D,cAAA,SAAcnsD,EAAqB9B,GACjC,IAAI1I,EAASK,KAAKL,OAClB,OAAQ0I,EAAKtB,MACX,OACA,OACA,OACA,OACA,QACEoD,EAAOnK,KAAKm6D,uBAAuBhwD,EAAM9B,GAG3C,OACA,OACE,OAAO8B,EAET,OACA,OACE,OAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASM,MAAOnrB,EAAMxK,EAAOknC,UAAU,IAEpE,OACA,OACE,OAAoB,IAAbx+B,EAAKqvB,KACR/3B,EAAO6nC,aAAaprB,EAAA4Y,SAASM,MAAOnrB,EAAMxK,EAAOknC,UAAU,IAC3D18B,EAEN,QACE,OAAOxK,EAAO6nC,aAAaprB,EAAA4Y,SAASO,MAAOprB,EAAMxK,EAAOsnC,UAAU,IAEpE,QACE,OAAOtnC,EAAO6nC,aAAaprB,EAAA4Y,SAASQ,MAAOrrB,EAAMxK,EAAOwnC,UAAU,IAEpE,QAEE,OADA1jC,QAAO,GACA9D,EAAO8mC,UAAU,KAM9B0oB,EAAAltD,UAAAkkE,aAAA,SAAaja,EAAsBO,WAC7B9sD,EAASK,KAAKL,OACdkyB,EAAkB7xB,KAAK6xB,gBACvB0/B,EAAiBvxD,KAAKwgB,QAAQ+wC,eAG9BkG,EAAY5lC,EAAgB5C,aAAai9B,EAAc7jD,MAAM,GAC7DowD,EAAe,IAAItyD,MAQvB,GAPAsyD,EAAa5yD,KACXlG,EAAOiqC,eAAe6tB,EAAU/qC,MAC9B6hC,EAAAyX,gBAAgBhmE,KAAMksD,EAAeO,KAKrCP,EAAcp8C,YAChB,IAAmB,IAAA0e,EAAA9K,EAAAwoC,EAAcp8C,QAAQtC,UAAQsW,EAAA0K,EAAA5K,QAAAE,EAAAD,KAAAC,EAAA0K,EAAA5K,OAAE,CAA9C,IAAI3J,EAAM6J,EAAAxiB,MACb,GAAI2Y,EAAOlT,MAAQo0C,EAAAz8B,YAAY6R,MAAO,CACpC,IAAI22C,EAAejtD,EACfwzC,EAAYyZ,EAAM7+D,KAClB8+D,EAAkB1Z,EAAUr+B,eAC5Bo+B,EAAmB0Z,EAAMjlE,UAAU0J,YAEvC,GADAlI,QAAQyjE,EAAMl/D,MAAMvB,EAAApE,YAAYspB,QAC5B6hC,EAAiBzkD,YACnB0vD,EAAa5yD,KAAKlG,EAAO8oC,YAAYglB,EAAUznC,SAC7CrmB,EAAOmoC,eAAe2vB,EAAU/qC,MAAO6kC,GACvCvxD,KAAKmzD,kBACH3F,EAAiBzkD,YACjB0kD,EAAS,KAIX0Z,EACAD,EAAM12C,mBAEH,CAEL,IAAI3V,EAAoCqsD,EAAMjlE,UAAU0J,YAAakP,eACrE49C,EAAa5yD,KAAKlG,EAAO8oC,YAAYglB,EAAUznC,SAC7CrmB,EAAOmoC,eAAe2vB,EAAU/qC,MAAO6kC,GACvC12C,GAAkB,EACdlb,EAAOmoC,eAAe,EAAIjtB,EAAgBssD,GAC1C1Z,EAAU/Q,aAAa/8C,GACzBwnE,EACFD,EAAM12C,mHAchB,OANAioC,EAAa5yD,KACXlG,EAAOmoC,eAAe2vB,EAAU/qC,MAAO6kC,IAGzC1/B,EAAgBtC,cAAckoC,GAC9Bz3D,KAAKuvD,YAAcrD,EAAc7jD,KAC1B1I,EAAOqqC,YAAY,KAAMyuB,EAAclH,IAIhDpC,EAAAltD,UAAAqyD,wBAAA,SAAwBpI,EAAsBO,GAE5C,IAAI9sD,EAASK,KAAKL,OACd4xD,EAAiBvxD,KAAKwgB,QAAQ+wC,eAElC,OADAvxD,KAAKuvD,YAAcrD,EAAc7jD,KAC1B1I,EAAO8qC,SACE,GAAd8mB,EACI5xD,EAAO6nC,aACLprB,EAAA4Y,SAASM,MACT31B,EAAOmoC,eAAe,EAAC,GACvBnoC,EAAOknC,UAAU,IAEnBlnC,EAAOmoC,eAAe,EAAC,GAC3BnoC,EAAOmoC,eAAe,EAAGypB,GACzB5xD,EAAOqoC,eAAe,EACpBhoC,KAAKmmE,aAAaja,EAAeO,MAMvC0C,EAAAltD,UAAA+zD,iBAAA,SAAiB7rD,EAAqB/F,GACpC,IAAIytB,EAAkB7xB,KAAK6xB,gBACvB/sB,EAASV,EAAMU,OACfA,EAAOgU,eAAiB,IAAGhU,EAAOgU,eAAiB9Y,KAAKL,OAAO00C,iBAAiBvvC,EAAOC,iBAC3FX,EAAM4rB,aAAe7lB,EACrB0nB,EAAgBxE,eAAexnB,KAAKzB,IAExC+qD,EA7sOA,CAA8BlzC,EAAAhW,mBAitO9B,SAASgtD,EACP9mD,EACAR,EACAy7D,GAKA,QALA,IAAAA,MAAA,MAEAnY,EAA8BmY,EAAgBA,EAAcjgD,WAAaxb,EAAYvH,MAAMU,OAAOqU,WAClG+1C,EAA+B/iD,EAAQgb,WAElChb,EAAQ6a,aAAam0B,EAAAx8B,eAAe9I,UAAzC,CAEA,IAAIgW,EAAU1f,EAAQ0f,QAClB9P,EAAYtY,OAAO0Y,EAAAL,cAAcK,EAAA1G,cAAcI,SAAUlK,EAAYoE,aACrEtG,EAAOsS,EAAUnS,UACrB,GAAIH,GAAQA,EAAKnE,OAAQ,CACvB,IAAIoX,EAAMjT,EAAK,GACXiT,EAAI3V,MAAQoV,EAAAtV,SAASG,SAA+B0V,EAAK5F,aAAeqF,EAAAvF,YAAYmB,QACtFm3C,EAAyDxyC,EAAKpb,MAC1DmI,EAAKnE,QAAU,KACjBoX,EAAMjT,EAAK,IACH1C,MAAQoV,EAAAtV,SAASG,SAA+B0V,EAAK5F,aAAeqF,EAAAvF,YAAYmB,QACtFk3C,EAA8BC,EAC9BA,EAAyDxyC,EAAKpb,MAC1DmI,EAAKnE,OAAS,GAChBumB,EAAQtlB,MACN0V,EAAAnY,eAAe0lB,+BACfzN,EAAU3X,MAAO,IAAKqF,EAAKnE,OAAOT,aAItCgnB,EAAQtlB,MACN0V,EAAAnY,eAAeylB,wBACf7M,EAAItY,SAKVynB,EAAQtlB,MACN0V,EAAAnY,eAAeylB,wBACf7M,EAAItY,YAIRynB,EAAQtlB,MACN0V,EAAAnY,eAAeo8D,wCACfnkD,EAAU3X,MAAO,IAAK,MA7vOf1E,EAAAyvD,0FCxPb,SAAYrrD,GACVA,IAAA,uDACAA,IAAA,+CACAA,IAAA,qCACAA,IAAA,mHACAA,IAAA,6LACAA,IAAA,6EACAA,IAAA,yFACAA,IAAA,uEACAA,IAAA,qEACAA,IAAA,+HACAA,IAAA,qIACAA,IAAA,mGACAA,IAAA,yEACAA,IAAA,+FACAA,IAAA,yFACAA,IAAA,mEACAA,IAAA,+CACAA,IAAA,yMACAA,IAAA,+FACAA,IAAA,mHACAA,IAAA,yFACAA,IAAA,gEACAA,IAAA,gDACAA,IAAA,gCACAA,IAAA,0FACAA,IAAA,8DACAA,IAAA,0CACAA,IAAA,4GACAA,IAAA,gHACAA,IAAA,0HACAA,IAAA,sGACAA,IAAA,0GACAA,IAAA,wEACAA,IAAA,gFACAA,IAAA,gGACAA,IAAA,sGACAA,IAAA,gHACAA,IAAA,oFACAA,IAAA,4EACAA,IAAA,8HACAA,IAAA,8HACAA,IAAA,wFACAA,IAAA,gHACAA,IAAA,gFACAA,IAAA,oKACAA,IAAA,kLACAA,IAAA,8HACAA,IAAA,gDACAA,IAAA,oCACAA,IAAA,gJACAA,IAAA,4CACAA,IAAA,oGACAA,IAAA,sCACAA,IAAA,8DACAA,IAAA,sDACAA,IAAA,4CACAA,IAAA,4DACAA,IAAA,wIACAA,IAAA,sDACAA,IAAA,wDACAA,IAAA,oEACAA,IAAA,kDACAA,IAAA,wFACAA,IAAA,wFACAA,IAAA,gHACAA,IAAA,oDACAA,IAAA,kDACAA,IAAA,0HACAA,IAAA,gKACAA,IAAA,kFACAA,IAAA,oEACAA,IAAA,kKACAA,IAAA,kJACAA,IAAA,oFACAA,IAAA,sIACAA,IAAA,sDACAA,IAAA,8CACAA,IAAA,4EACAA,IAAA,4FACAA,IAAA,oDACAA,IAAA,8EACAA,IAAA,kFACAA,IAAA,sGACAA,IAAA,0GACAA,IAAA,gFACAA,IAAA,sNACAA,IAAA,0JACAA,IAAA,sIACAA,IAAA,4LACAA,IAAA,sLACAA,IAAA,oGACAA,IAAA,oGACAA,IAAA,oFACAA,IAAA,wKACAA,IAAA,kHACAA,IAAA,4EACAA,IAAA,4KACAA,IAAA,0DACAA,IAAA,8FACAA,IAAA,4JACAA,IAAA,gIACAA,IAAA,gJACAA,IAAA,gJACAA,IAAA,sGACAA,IAAA,sEACAA,IAAA,wFACAA,IAAA,gFACAA,IAAA,sQACAA,IAAA,8KACAA,IAAA,kLACAA,IAAA,kFACAA,IAAA,0CACAA,IAAA,wFACAA,IAAA,4HAlHF,CAAYpE,EAAAoE,iBAAApE,EAAAoE,oBAsHZpE,EAAAqE,uBAAA,SAAuCG,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,2BACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,oDACjB,KAAK,IAAK,MAAO,uCACjB,KAAK,IAAK,MAAO,kCACjB,KAAK,IAAK,MAAO,+DACjB,KAAK,IAAK,MAAO,kEACjB,KAAK,IAAK,MAAO,iDACjB,KAAK,IAAK,MAAO,oCACjB,KAAK,IAAK,MAAO,uDACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,IAAK,MAAO,qCACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,qGACjB,KAAK,IAAK,MAAO,+CACjB,KAAK,IAAK,MAAO,6DACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,KAAM,MAAO,+BAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,oBAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,uDAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,kDAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,sCAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,gEAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,iBAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,iDAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,qBAClB,KAAK,KAAM,MAAO,gCAClB,KAAK,KAAM,MAAO,qEAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,2BAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,+EAClB,KAAK,KAAM,MAAO,wCAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,4EAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,kEAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,6CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,6BAClB,KAAK,KAAM,MAAO,8CAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mDAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,+GAClB,KAAK,KAAM,MAAO,8EAClB,KAAK,KAAM,MAAO,oEAClB,KAAK,KAAM,MAAO,6FAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,6DAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,wDAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,yFAClB,KAAK,KAAM,MAAO,oCAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,+EAClB,KAAK,KAAM,MAAO,mEAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,uEAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mIAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,4FAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,6DAClB,QAAS,MAAO,2HC1OpB/D,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA,IAEA,IAAAic,EAAAjc,EAAA,GAEAic,EAAA4oB,OAAO/iC,UAAUswC,OAAS,WACxB,OAAO,IAAI80B,SAASriC,OAAOhlC,KAAKstB,KAAKg6C,YAGvClrD,EAAA4oB,OAAO/iC,UAAUuwC,QAAU,WACzB,OAAO,IAAI60B,SAASriC,OAAOhlC,KAAKstB,KAAKi6C,+BCpBvC,SAAA7U,GAEA,MAAA2U,EAAA3U,EAAA8U,UAAArnE,EAAA,IAGA,QAAAyB,KAFA8wD,EAAA2U,WAEAA,GACAzlE,EAAAoP,WAAA,cAAApP,EAAAoP,WAAA,gBAAA0hD,EAAA9wD,GAAAylE,EAAAzlE,IAKA8wD,EAAA+U,kBAAAJ,EAAAK,QACAhV,EAAAiV,cAAAN,EAAAO,MACAlV,EAAAmV,cAAAR,EAAAS,SACApV,EAAAqV,QAAA,SAAAx/B,EAAAuR,GAAqCutB,EAAAW,OAAAz/B,GAAAuR,GACrC4Y,EAAAuV,OAAA,SAAA1/B,GAA+B,OAAA8+B,EAAAW,OAAAz/B,qCCf/B5oC,EAAAD,QAAAO,oBCAA,SAAAyyD,GAEA,IAAAwV,EAAA,oBAAAhtB,qBAAA,IAAAwX,MAAA3yD,KA6IA,SAAAooE,IACAjjD,MAAAkjD,kBACAljD,MAAAkjD,kBAAApoE,KAAAmoE,GAEAnoE,KAAAqoE,MAAAroE,KAAAY,KAAA,KAAAZ,KAAAmE,QAAA,UAAA+gB,OAAAmjD,MAWA,SAAAC,EAAAnkE,GACAnE,KAAAmE,WAAA,mBACA+gB,MAAAkjD,kBACAljD,MAAAkjD,kBAAApoE,KAAAsoE,GAEAtoE,KAAAqoE,MAAAroE,KAAAY,KAAA,KAAAZ,KAAAmE,QAAA,UAAA+gB,OAAAmjD,MA/JAH,EAAAK,WAAA,EAEAxnE,OAAAynE,iBACAN,EAAA,YAAA5mE,GAA0C,OAAAA,GAAA,SAE1Cs3B,WAAgBt3B,OAAA,IAAAmnE,UAAA,GAChB5vC,WAAgBv3B,MAAA,IAAAmnE,UAAA,KAGhB1nE,OAAAynE,iBACAN,EAAA,aAAA5mE,GAA4C,OAAAA,GAAA,SAE5Cs3B,WAAgBt3B,OAAA,MAAAmnE,UAAA,GAChB5vC,WAAgBv3B,MAAA,MAAAmnE,UAAA,KAGhB1nE,OAAAynE,iBACAN,EAAA,IAAAA,EAAA,eAAA5mE,GAAmE,SAAAA,IAEnEs3B,WAAgBt3B,OAAA,WAAAmnE,UAAA,GAChB5vC,WAAgBv3B,MAAA,WAAAmnE,UAAA,KAGhB1nE,OAAAynE,iBACAN,EAAA,YAAA5mE,GAA0C,WAAAA,IAE1Cs3B,WAAgBt3B,MAAA,EAAAmnE,UAAA,GAChB5vC,WAAgBv3B,MAAA,IAAAmnE,UAAA,KAGhB1nE,OAAAynE,iBACAN,EAAA,aAAA5mE,GAA4C,aAAAA,IAE5Cs3B,WAAgBt3B,MAAA,EAAAmnE,UAAA,GAChB5vC,WAAgBv3B,MAAA,MAAAmnE,UAAA,KAGhB1nE,OAAAynE,iBACAN,EAAA,IAAAA,EAAA,eAAA5mE,GAAmE,OAAAA,IAAA,IAEnEs3B,WAAgBt3B,MAAA,EAAAmnE,UAAA,GAChB5vC,WAAgBv3B,MAAA,WAAAmnE,UAAA,KAGhB1nE,OAAAynE,iBACAN,EAAA,cAAA5mE,GAA8C,QAAAA,IAE9Cs3B,WAAgBt3B,MAAA,EAAAmnE,UAAA,GAChB5vC,WAAgBv3B,MAAA,EAAAmnE,UAAA,KAGhB1nE,OAAAynE,iBACAN,EAAA,aAAA5mE,GAA4C,OAAAonE,KAAAC,OAAArnE,KAE5Cs3B,WAAgBt3B,MAAAonE,KAAAC,QAAA,eAAAF,UAAA,GAChB5vC,WAAgBv3B,MAAAonE,KAAAC,OAAA,eAAAF,UAAA,GAChBG,oBAAyBtnE,MAAAonE,KAAAC,OAAA,iBAAAF,UAAA,GACzBI,kBAAuBvnE,OAAA,SAAAmnE,UAAA,GACvBK,kBAAuBxnE,MAAA,SAAAmnE,UAAA,GACvBM,SAAcznE,MAAAonE,KAAAC,OAAA,cAAAF,UAAA,KAGd1nE,OAAAynE,iBACAN,EAAA,aAAA5mE,GAA4C,OAAAA,IAE5Cs3B,WAAgBt3B,OAAA,uBAAAmnE,UAAA,GAChB5vC,WAAgBv3B,MAAA,uBAAAmnE,UAAA,GAChBG,oBAAyBtnE,MAAA,wBAAAmnE,UAAA,GACzBI,kBAAuBvnE,OAAA,iBAAAmnE,UAAA,GACvBK,kBAAuBxnE,MAAA,iBAAAmnE,UAAA,GACvBM,SAAcznE,MAAA,sBAAAmnE,UAAA,KAGdP,EAAA,IAAAQ,KAAAM,MAEAd,EAAA,aAAA5mE,GACA,IAAAZ,EAAAgoE,KAAAM,MAAA1nE,MACA,OAAAA,EAAA,GAAAZ,KAGAwnE,EAAA,gBAAA5mE,GAGA,kBADAA,GAAA,WADAA,OAAA,gBACAA,IAAA,eACAA,IAAA,oBAGA4mE,EAAA,cAAA5mE,EAAAm2B,GAEA,OAAAn2B,IADAm2B,GAAA,IACAn2B,IAAA,GAAAm2B,GAGAywC,EAAA,cAAA5mE,EAAAm2B,GAEA,OAAAn2B,KADAm2B,GAAA,IACAn2B,GAAA,GAAAm2B,GAGAywC,EAAA,IAAAQ,KAAAO,IAEAf,EAAA,IAAAQ,KAAAxY,IAEAgY,EAAA,IAAAQ,KAAAv0C,IAEA+zC,EAAA,KAAAQ,KAAAntB,KAEA2sB,EAAA,MAAAQ,KAAAQ,MAGAhB,EAAA,iBAAA5mE,GACA,WAAAonE,KAAAO,IAAA3nE,EAAAonE,KAAAS,MAAA7nE,IACA,EAAAonE,KAAAU,MAAA,GAAA9nE,GAEAonE,KAAAU,MAAA9nE,IAGA4mE,EAAA,gBAAAt2D,EAAAC,EAAA1D,GACA,OAAAA,EAAAyD,EAAAC,GAGAq2D,EAAA,KAAAQ,KAAAW,KAEAnB,EAAA,MAAAQ,KAAAS,MAEAjB,EAAA,kBAAAoB,EAAAC,GACA,OAAAb,KAAAO,IAAAK,GAAAZ,KAAAc,KAAAD,IAGArB,EAAA,eAAA5mE,GACA,IAAAshD,EAAAthD,GAAA,WACAuhD,GAAA,SAAAvhD,IAAA,EAIA,OAFAshD,GADAthD,EAAAshD,EAAAC,IACA,WACAA,GAAA,MAAAvhD,IAAA,KAIA4mE,EAAA,iBAAA5mE,GACA,OAAAA,GAAA,QAAAA,GAAA,iBAAAA,GAUA6mE,EAAAlmE,UAAAlB,OAAAY,OAAAujB,MAAAjjB,WACAkmE,EAAAlmE,UAAArB,KAAA,mBACAunE,EAAAlmE,UAAAkC,QAAA,cAEA+jE,EAAA,uBACA,UAAAC,GAWAG,EAAArmE,UAAAlB,OAAAY,OAAAujB,MAAAjjB,WACAqmE,EAAArmE,UAAArB,KAAA,iBAEAsnE,EAAA,gBAAAuB,EAAAtlE,GACA,GAAAslE,EAAA,OAAAA,EACA,UAAAnB,EAAAnkE,IAGA+jE,EAAA,oBAAA5mE,GACA,OAAAA,GAGA4mE,EAAA,kBAAAluB,EAAA0vB,GACA,SAAAC,SAAA3vB,OAAA4vB,IAGAnvB,OAAA,uBAAAD,GACA,OAAAC,OAAAmM,aAAAzxC,MAAAslC,OAAAD,IAGAC,OAAA,wBAAAD,GACA,OAAAC,OAAAovB,cAAA10D,MAAAslC,OAAAD,IAGA0tB,EAAA,UAAA4B,OAAAC,UAEA7B,EAAA,iBAAAxrD,GACA,uBAAAA,GAGAwrD,EAAA,qBAAAxrD,GACA,uBAAAA,GAAA,iBAAAA,GAGAwrD,EAAA,kBAAAxrD,GACA,uBAAAA,gBAAA+9B,QAGAytB,EAAA,QAAA/hE,MAAA6jE,QAEA9B,EAAA,mBAAA/9D,GACA,OAAAA,GAGA+9D,EAAA,cAAAoB,EAAAC,GACA,OAAAD,EAAAC,GAGArB,EAAA,eAAAoB,EAAAC,GACA,OAAAb,KAAAC,OAAAW,EAAAC,IAGArB,EAAA,OAAAQ,KAEAR,EAAA,aACA,IAAA+B,EAAA,IAAA93B,WAAA,GACA+3B,EAAA,EACA,OACA1kC,SAAA0iC,EAAA,4BAAAxwC,GACA,KAAAA,KAAA,YACA,GAAAwyC,EAAAxyC,EAAAuyC,EAAA3kE,OAAA,CACA,IAAA6kE,EAAAF,GACAA,EAAA,IAAA93B,WAAAu2B,KAAAxY,IAAA,MAAA+Z,EAAA3kE,OAAAoyB,EAAA,EAAAuyC,EAAA3kE,UACA2C,IAAAkiE,GAEA,IAAA5hC,EAAA2hC,EAEA,OADA,GAAAA,GAAAxyC,KAAAwyC,EAAA,KAAAA,IACA3hC,GAEA/V,KAAA01C,EAAA,wBAAA3/B,KACA6hC,KAAAlC,EAAA,wBAAAmC,EAAAC,EAAA5yC,GACAuyC,EAAAM,WAAAF,EAAAC,IAAA5yC,MAjBA,GAsBAwwC,EAAA,MAAAA,EAAA,kBAAA3/B,EAAAjnC,EAAAwjC,GACAmlC,KAAA1hC,GAAA,EAAAzD,IAAAxjC,GAGA4mE,EAAA,KAAAA,EAAA,iBAAA3/B,EAAAzD,GACA,OAAAmlC,KAAA1hC,GAAA,EAAAzD,yCCvPA,SAAA4tB,GAAA,MAAA8X,EAAA,IAAAC,aAAA,GACAC,EAAA,IAAAC,aAAAH,EAAA3lC,QACA+lC,EAAA,IAAAC,WAAAL,EAAA3lC,QAEA6tB,EAAAoY,WAAA,SAAAxpE,GAEA,OADAopE,EAAA,GAAAppE,EACAspE,EAAA,IAGAlY,EAAAqY,WAAA,SAAAzpE,GAEA,OADAspE,EAAA,GAAAtpE,EACAopE,EAAA,IAGAhY,EAAAsY,WAAA,SAAA1pE,GAEA,OADAkpE,EAAA,GAAAlpE,EACAmgB,QAAAmpD,EAAA,GAAAA,EAAA,KAGAlY,EAAAuY,WAAA,SAAA3pE,GAGA,OAFAspE,EAAA,GAAA77B,QAAAztC,GACAspE,EAAA,GAAA57B,SAAA1tC,GACAkpE,EAAA,wCCtBA,SAAA9X,GAAA,MAAAwY,EAAAxY,EAAAwY,MAAA/qE,EAAA,IAEAuyD,EAAAn/B,SAAA23C,EAAAC,KAEAzY,EAAAp/B,QAAA43C,EAAAE,IAEA1Y,EAAAjxC,QAAA,SAAA4pD,EAAAC,GACA,OAAAJ,EAAAK,SAAAF,EAAAC,IAGA5Y,EAAA3jB,QAAA,SAAAztC,GACA,OAAAA,EAAAkqE,KAGA9Y,EAAA1jB,SAAA,SAAA1tC,GACA,OAAAA,EAAAmqE,MAGA/Y,EAAA/K,QAAA,SAAAv8C,EAAAC,GACA,OAAAD,EAAA8f,IAAA7f,IAGAqnD,EAAAqQ,QAAA,SAAA33D,EAAAC,GACA,OAAAD,EAAAsgE,IAAArgE,IAGAqnD,EAAA9K,QAAA,SAAAx8C,EAAAC,GACA,OAAAD,EAAAugE,IAAAtgE,IAGAqnD,EAAAkZ,QAAA,SAAAxgE,EAAAC,GACA,OAAAD,EAAAygE,IAAAxgE,IAGAqnD,EAAAoZ,UAAA,SAAA1gE,EAAAC,GACA,OAAAD,EAAA2gE,aAAAF,IAAAxgE,EAAA0gE,cAAAC,YAGAtZ,EAAAuZ,QAAA,SAAA7gE,EAAAC,GACA,OAAAD,EAAA8gE,IAAA7gE,IAGAqnD,EAAAyZ,UAAA,SAAA/gE,EAAAC,GACA,OAAAD,EAAA2gE,aAAAG,IAAA7gE,EAAA0gE,cAAAC,YAGAtZ,EAAAt/B,QAAA,SAAAhoB,EAAAC,GACA,OAAAD,EAAAghE,IAAA/gE,IAGAqnD,EAAAj/B,OAAA,SAAAroB,EAAAC,GACA,OAAAD,EAAAihE,GAAAhhE,IAGAqnD,EAAA4Z,QAAA,SAAAlhE,EAAAC,GACA,OAAAD,EAAAmhE,IAAAlhE,IAGAqnD,EAAAr/B,QAAA,SAAAjoB,EAAAC,GACA,OAAAD,EAAAohE,IAAAnhE,IAGAqnD,EAAA+Z,QAAA,SAAArhE,EAAAC,GACA,OAAAD,EAAAshE,IAAArhE,IAGAqnD,EAAA/B,UAAA,SAAAvlD,EAAAC,GACA,OAAAD,EAAAuhE,KAAAthE,IAGAqnD,EAAAh/B,QAAA,SAAApyB,GACA,OAAAA,EAAAsrE,OAGAla,EAAAma,OAAA,SAAAzhE,EAAAC,GACA,OAAAD,EAAA0hE,GAAAzhE,IAGAqnD,EAAAv/B,OAAA,SAAA/nB,EAAAC,GACA,OAAAD,EAAA2hE,GAAA1hE,IAGAqnD,EAAAjC,UAAA,SAAAnvD,EAAAyzD,GACAtxD,OAAAsxD,GAAA,IAAAA,IAAA,IACA,IAAAiE,EAAAkS,EAAA8B,QAAAjY,EAAA,GACA,OAAAzzD,EAAA4pB,IAAA8tC,GAAAoT,IAAApT,EAAA4T,QAGAla,EAAAsQ,UAAA,SAAA1hE,GACA,WAAAA,EAAAmqE,MAAAnqE,EAAAkqE,KAAA,GAAAlqE,EAAAkqE,KAAA9qD,GAAAmY,YACA,IAAAv3B,EAAAmqE,MAAAnqE,EAAAkqE,KAAA9qD,GAAAkY,WAAAt3B,EAAAkqE,IAAA,GAGA9Y,EAAAwQ,WAAA,SAAA5hE,GACA,WAAAA,EAAAmqE,MAAAnqE,EAAAkqE,KAAA,GAAAlqE,EAAAkqE,KAAA7qD,IAAAkY,YACA,IAAAv3B,EAAAmqE,MAAAnqE,EAAAkqE,KAAA7qD,IAAAiY,WAAAt3B,EAAAkqE,IAAA,GAGA9Y,EAAA0Q,WAAA,SAAA9hE,GACA,WAAAA,EAAAmqE,MAAAnqE,EAAAkqE,KAAA,IACA,IAAAlqE,EAAAmqE,MAAAnqE,EAAAkqE,IAAA,GAGA9Y,EAAAuQ,UAAA,SAAA3hE,GACA,WAAAA,EAAAmqE,MAAAnqE,EAAAkqE,KAAA,GAAAlqE,EAAAkqE,KAAAzqD,GAAA8X,WAGA65B,EAAAyQ,WAAA,SAAA7hE,GACA,WAAAA,EAAAmqE,MAAAnqE,EAAAkqE,KAAA,GAAAlqE,EAAAkqE,KAAAxqD,IAAA6X,WAGA65B,EAAA2Q,WAAA,SAAA/hE,GACA,WAAAA,EAAAmqE,MAGA/Y,EAAA4Q,YAAA,SAAAhiE,GACA,WAAAA,EAAAmqE,OAAA,IAAAnqE,EAAAkqE,KAAA,IAAAlqE,EAAAkqE,MAGA,MAAAyB,EAAA/B,EAAAgC,WAAA7rD,IAAAwnD,kBACAsE,EAAAjC,EAAAgC,WAAA7rD,IAAAynD,kBAEApW,EAAA6Q,WAAA,SAAAjiE,GACA,OAAAA,EAAA8rE,IAAAH,IAAA3rE,EAAA+rE,IAAAF,IAGA,MAAAG,EAAApC,EAAAgC,WAAA5rD,IAAAunD,kBACA0E,EAAArC,EAAAgC,WAAA5rD,IAAAwnD,kBAEApW,EAAA+Q,WAAA,SAAAniE,GACA,OAAAA,EAAA8rE,IAAAE,IAAAhsE,EAAA+rE,IAAAE,IAGA7a,EAAA8Q,WAAA,SAAAliE,GACA,OAAAoxD,EAAAgW,KAAAC,OAAArnE,EAAAksE,aAGA9a,EAAAgR,WAAA,SAAApiE,GACA,OAAAA,EAAAksE,YAGA9a,EAAA+a,cAAA,SAAAnsE,EAAAosE,GACA,OAAAA,EAAApsE,EAAAyqE,aAAAzqE,GAAAuD,SAAA,sCC9IAlF,EAAAD,QAAAwrE,EAKA,IAAAyC,EAAA,KAEA,IACAA,EAAA,IAAAC,YAAAC,SAAA,IAAAD,YAAA5oC,OAAA,IAAAmN,YACA,u2BACSzyC,QACR,MAAAu7C,IAcD,SAAAiwB,EAAAM,EAAAC,EAAAiC,GAMA1tE,KAAAwrE,IAAA,EAAAA,EAMAxrE,KAAAyrE,KAAA,EAAAA,EAMAzrE,KAAA0tE,aAoCA,SAAAI,EAAAC,GACA,YAAAA,KAAA,YAXA7C,EAAAjpE,UAAA+rE,WAEAjtE,OAAAC,eAAAkqE,EAAAjpE,UAAA,cAAqDX,OAAA,IAkBrD4pE,EAAA4C,SAOA,IAAAG,KAOAC,KAQA,SAAAlB,EAAA1rE,EAAAosE,GACA,IAAAK,EAAAI,EAAAC,EACA,OAAAV,GAEAU,EAAA,IADA9sE,KAAA,IACAA,EAAA,OACA6sE,EAAAD,EAAA5sE,IAEA6sE,GAEAJ,EAAAxC,EAAAjqE,GAAA,EAAAA,GAAA,WACA8sE,IACAF,EAAA5sE,GAAAysE,GACAA,IAGAK,GAAA,MADA9sE,GAAA,IACAA,EAAA,OACA6sE,EAAAF,EAAA3sE,IAEA6sE,GAEAJ,EAAAxC,EAAAjqE,IAAA,WACA8sE,IACAH,EAAA3sE,GAAAysE,GACAA,GAmBA,SAAAb,EAAA5rE,EAAAosE,GACA,GAAAW,MAAA/sE,GACA,OAAAosE,EAAAY,EAAAnD,EACA,GAAAuC,EAAA,CACA,GAAApsE,EAAA,EACA,OAAAgtE,EACA,GAAAhtE,GAAAitE,EACA,OAAAC,MACK,CACL,GAAAltE,IAAAmtE,EACA,OAAA71C,EACA,GAAAt3B,EAAA,GAAAmtE,EACA,OAAA51C,EAEA,OAAAv3B,EAAA,EACA4rE,GAAA5rE,EAAAosE,GAAAgB,MACAnD,EAAAjqE,EAAAqtE,EAAA,EAAArtE,EAAAqtE,EAAA,EAAAjB,GAmBA,SAAAnC,EAAAqD,EAAAC,EAAAnB,GACA,WAAAxC,EAAA0D,EAAAC,EAAAnB,GA5CAxC,EAAA8B,UAkCA9B,EAAAgC,aAsBAhC,EAAAK,WASA,IAAAuD,EAAApG,KAAAqG,IASA,SAAAC,EAAAh1B,EAAA0zB,EAAAhE,GACA,OAAA1vB,EAAA10C,OACA,MAAA4f,MAAA,gBACA,WAAA80B,GAAA,aAAAA,GAAA,cAAAA,GAAA,cAAAA,EACA,OAAAmxB,EASA,GARA,iBAAAuC,GAEAhE,EAAAgE,EACAA,GAAA,GAEAA,OAEAhE,KAAA,IACA,MAAAA,EACA,MAAAuF,WAAA,SAEA,IAAA9sE,EACA,IAAAA,EAAA63C,EAAAk1B,QAAA,QACA,MAAAhqD,MAAA,mBACA,OAAA/iB,EACA,OAAA6sE,EAAAh1B,EAAAp0C,UAAA,GAAA8nE,EAAAhE,GAAAgF,MAQA,IAHA,IAAAS,EAAAjC,EAAA4B,EAAApF,EAAA,IAEA3jC,EAAAolC,EACA9qE,EAAA,EAAmBA,EAAA25C,EAAA10C,OAAgBjF,GAAA,GACnC,IAAAq3B,EAAAgxC,KAAAv0C,IAAA,EAAA6lB,EAAA10C,OAAAjF,GACAiB,EAAAqoE,SAAA3vB,EAAAp0C,UAAAvF,IAAAq3B,GAAAgyC,GACA,GAAAhyC,EAAA,GACA,IAAA03C,EAAAlC,EAAA4B,EAAApF,EAAAhyC,IACAqO,IAAA4lC,IAAAyD,GAAAlkD,IAAAgiD,EAAA5rE,SAGAykC,GADAA,IAAA4lC,IAAAwD,IACAjkD,IAAAgiD,EAAA5rE,IAIA,OADAykC,EAAA2nC,WACA3nC,EAoBA,SAAAspC,EAAAv1B,EAAA4zB,GACA,uBAAA5zB,EACAozB,EAAApzB,EAAA4zB,GACA,iBAAA5zB,EACAk1B,EAAAl1B,EAAA4zB,GAEAnC,EAAAzxB,EAAA0xB,IAAA1xB,EAAA2xB,KAAA,kBAAAiC,IAAA5zB,EAAA4zB,UAfAxC,EAAA8D,aAyBA9D,EAAAmE,YAUA,IAcAV,EAAAW,WAOAf,EAAAI,IAOAF,EAAAF,EAAA,EAOAgB,EAAAvC,EA5BA,OAkCA7B,EAAA6B,EAAA,GAMA9B,EAAAC,OAMA,IAAAmD,EAAAtB,EAAA,MAMA9B,EAAAoD,QAMA,IAAAlD,EAAA4B,EAAA,GAMA9B,EAAAE,MAMA,IAAAoE,EAAAxC,EAAA,MAMA9B,EAAAsE,OAMA,IAAAC,EAAAzC,GAAA,GAMA9B,EAAAuE,UAMA,IAAA52C,EAAA0yC,GAAA,iBAMAL,EAAAryC,YAMA,IAAA21C,EAAAjD,GAAA,SAMAL,EAAAsD,qBAMA,IAAA51C,EAAA2yC,EAAA,kBAMAL,EAAAtyC,YAMA,IAAA82C,EAAAxE,EAAAjpE,UAMAytE,EAAAC,MAAA,WACA,OAAA3vE,KAAA0tE,SAAA1tE,KAAAwrE,MAAA,EAAAxrE,KAAAwrE,KAOAkE,EAAAlC,SAAA,WACA,OAAAxtE,KAAA0tE,UACA1tE,KAAAyrE,OAAA,GAAAkD,GAAA3uE,KAAAwrE,MAAA,GACAxrE,KAAAyrE,KAAAkD,GAAA3uE,KAAAwrE,MAAA,IAUAkE,EAAA7qE,SAAA,SAAA6kE,GAEA,IADAA,KAAA,IACA,MAAAA,EACA,MAAAuF,WAAA,SACA,GAAAjvE,KAAA4vE,SACA,UACA,GAAA5vE,KAAA6vE,aAAA,CACA,GAAA7vE,KAAA8sE,GAAAl0C,GAAA,CAGA,IAAAk3C,EAAA5C,EAAAxD,GACAmC,EAAA7rE,KAAA6rE,IAAAiE,GACAC,EAAAlE,EAAAF,IAAAmE,GAAApE,IAAA1rE,MACA,OAAA6rE,EAAAhnE,SAAA6kE,GAAAqG,EAAAJ,QAAA9qE,SAAA6kE,GAEA,UAAA1pE,KAAA0uE,MAAA7pE,SAAA6kE,GAQA,IAHA,IAAAyF,EAAAjC,EAAA4B,EAAApF,EAAA,GAAA1pE,KAAA0tE,UACAsC,EAAAhwE,KACA+lC,EAAA,KACA,CACA,IAAAkqC,EAAAD,EAAAnE,IAAAsD,GAEAe,GADAF,EAAAtE,IAAAuE,EAAAtE,IAAAwD,IAAAQ,UAAA,GACA9qE,SAAA6kE,GAEA,IADAsG,EAAAC,GACAL,SACA,OAAAM,EAAAnqC,EAEA,KAAAmqC,EAAA5qE,OAAA,GACA4qE,EAAA,IAAAA,EACAnqC,EAAA,GAAAmqC,EAAAnqC,IASA2pC,EAAAS,YAAA,WACA,OAAAnwE,KAAAyrE,MAOAiE,EAAAU,oBAAA,WACA,OAAApwE,KAAAyrE,OAAA,GAOAiE,EAAAW,WAAA,WACA,OAAArwE,KAAAwrE,KAOAkE,EAAAY,mBAAA,WACA,OAAAtwE,KAAAwrE,MAAA,GAOAkE,EAAAa,cAAA,WACA,GAAAvwE,KAAA6vE,aACA,OAAA7vE,KAAA8sE,GAAAl0C,GAAA,GAAA54B,KAAA0uE,MAAA6B,gBAEA,IADA,IAAAz2B,EAAA,GAAA95C,KAAAyrE,KAAAzrE,KAAAyrE,KAAAzrE,KAAAwrE,IACAgF,EAAA,GAAsBA,EAAA,GACtB,IAAA12B,EAAA,GAAA02B,GAD+BA,KAG/B,UAAAxwE,KAAAyrE,KAAA+E,EAAA,GAAAA,EAAA,GAOAd,EAAAE,OAAA,WACA,WAAA5vE,KAAAyrE,MAAA,IAAAzrE,KAAAwrE,KAOAkE,EAAAe,IAAAf,EAAAE,OAMAF,EAAAG,WAAA,WACA,OAAA7vE,KAAA0tE,UAAA1tE,KAAAyrE,KAAA,GAOAiE,EAAAgB,WAAA,WACA,OAAA1wE,KAAA0tE,UAAA1tE,KAAAyrE,MAAA,GAOAiE,EAAAiB,MAAA,WACA,aAAA3wE,KAAAwrE,MAOAkE,EAAAkB,OAAA,WACA,aAAA5wE,KAAAwrE,MAQAkE,EAAAmB,OAAA,SAAAj9C,GAGA,OAFAk6C,EAAAl6C,KACAA,EAAAy7C,EAAAz7C,KACA5zB,KAAA0tE,WAAA95C,EAAA85C,UAAA1tE,KAAAyrE,OAAA,OAAA73C,EAAA63C,OAAA,SAEAzrE,KAAAyrE,OAAA73C,EAAA63C,MAAAzrE,KAAAwrE,MAAA53C,EAAA43C,MASAkE,EAAA5C,GAAA4C,EAAAmB,OAOAnB,EAAAoB,UAAA,SAAAl9C,GACA,OAAA5zB,KAAA8sE,GAAAl5C,IASA87C,EAAAqB,IAAArB,EAAAoB,UAQApB,EAAA3C,GAAA2C,EAAAoB,UAOApB,EAAAsB,SAAA,SAAAp9C,GACA,OAAA5zB,KAAAixE,KAAAr9C,GAAA,GASA87C,EAAAwB,GAAAxB,EAAAsB,SAOAtB,EAAAyB,gBAAA,SAAAv9C,GACA,OAAA5zB,KAAAixE,KAAAr9C,IAAA,GASA87C,EAAArC,IAAAqC,EAAAyB,gBAQAzB,EAAA0B,GAAA1B,EAAAyB,gBAOAzB,EAAA2B,YAAA,SAAAz9C,GACA,OAAA5zB,KAAAixE,KAAAr9C,GAAA,GASA87C,EAAA4B,GAAA5B,EAAA2B,YAOA3B,EAAA6B,mBAAA,SAAA39C,GACA,OAAA5zB,KAAAixE,KAAAr9C,IAAA,GASA87C,EAAAtC,IAAAsC,EAAA6B,mBAQA7B,EAAA8B,GAAA9B,EAAA6B,mBAQA7B,EAAA+B,QAAA,SAAA79C,GAGA,GAFAk6C,EAAAl6C,KACAA,EAAAy7C,EAAAz7C,IACA5zB,KAAA8sE,GAAAl5C,GACA,SACA,IAAA89C,EAAA1xE,KAAA6vE,aACA8B,EAAA/9C,EAAAi8C,aACA,OAAA6B,IAAAC,GACA,GACAD,GAAAC,EACA,EAEA3xE,KAAA0tE,SAGA95C,EAAA63C,OAAA,EAAAzrE,KAAAyrE,OAAA,GAAA73C,EAAA63C,OAAAzrE,KAAAyrE,MAAA73C,EAAA43C,MAAA,EAAAxrE,KAAAwrE,MAAA,OAFAxrE,KAAA0rE,IAAA93C,GAAAi8C,cAAA,KAYAH,EAAAuB,KAAAvB,EAAA+B,QAMA/B,EAAAkC,OAAA,WACA,OAAA5xE,KAAA0tE,UAAA1tE,KAAA8sE,GAAAl0C,GACAA,EACA54B,KAAA4sE,MAAA1hD,IAAAkgD,IAQAsE,EAAAhB,IAAAgB,EAAAkC,OAOAlC,EAAAxkD,IAAA,SAAA2mD,GACA/D,EAAA+D,KACAA,EAAAxC,EAAAwC,IAIA,IAAAC,EAAA9xE,KAAAyrE,OAAA,GACAsG,EAAA,MAAA/xE,KAAAyrE,KACAuG,EAAAhyE,KAAAwrE,MAAA,GACAyG,EAAA,MAAAjyE,KAAAwrE,IAEA0G,EAAAL,EAAApG,OAAA,GACA0G,EAAA,MAAAN,EAAApG,KACA2G,EAAAP,EAAArG,MAAA,GAGA6G,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAYA,OAVAD,IADAC,GAAAP,GAHA,MAAAJ,EAAArG,QAIA,GAGA8G,IADAC,GAAAP,EAAAI,KACA,GAGAC,IADAC,GAAAP,EAAAI,KACA,GAEAE,GAAAP,EAAAI,EAEA3G,GANAgH,GAAA,QAMA,IATAC,GAAA,QAQAH,GAAA,QACA,IAHAC,GAAA,OAGAtyE,KAAA0tE,WAQAgC,EAAA+C,SAAA,SAAAC,GAGA,OAFA5E,EAAA4E,KACAA,EAAArD,EAAAqD,IACA1yE,KAAAkrB,IAAAwnD,EAAAhE,QASAgB,EAAAhE,IAAAgE,EAAA+C,SAOA/C,EAAAiD,SAAA,SAAAC,GACA,GAAA5yE,KAAA4vE,SACA,OAAAzE,EAKA,GAJA2C,EAAA8E,KACAA,EAAAvD,EAAAuD,IAGAjF,EAKA,OAAApC,EAJAoC,EAAAhC,IAAA3rE,KAAAwrE,IACAxrE,KAAAyrE,KACAmH,EAAApH,IACAoH,EAAAnH,MACAkC,EAAAkF,WAAA7yE,KAAA0tE,UAGA,GAAAkF,EAAAhD,SACA,OAAAzE,EACA,GAAAnrE,KAAA8sE,GAAAl0C,GACA,OAAAg6C,EAAAjC,QAAA/3C,EAAAuyC,EACA,GAAAyH,EAAA9F,GAAAl0C,GACA,OAAA54B,KAAA2wE,QAAA/3C,EAAAuyC,EAEA,GAAAnrE,KAAA6vE,aACA,OAAA+C,EAAA/C,aACA7vE,KAAA0uE,MAAA/C,IAAAiH,EAAAlE,OAEA1uE,KAAA0uE,MAAA/C,IAAAiH,GAAAlE,MACK,GAAAkE,EAAA/C,aACL,OAAA7vE,KAAA2rE,IAAAiH,EAAAlE,aAGA,GAAA1uE,KAAAkxE,GAAA3B,IAAAqD,EAAA1B,GAAA3B,GACA,OAAArC,EAAAltE,KAAAwtE,WAAAoF,EAAApF,WAAAxtE,KAAA0tE,UAKA,IAAAoE,EAAA9xE,KAAAyrE,OAAA,GACAsG,EAAA,MAAA/xE,KAAAyrE,KACAuG,EAAAhyE,KAAAwrE,MAAA,GACAyG,EAAA,MAAAjyE,KAAAwrE,IAEA0G,EAAAU,EAAAnH,OAAA,GACA0G,EAAA,MAAAS,EAAAnH,KACA2G,EAAAQ,EAAApH,MAAA,GACAsH,EAAA,MAAAF,EAAApH,IAEA6G,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAqBA,OAnBAD,IADAC,GAAAP,EAAAa,KACA,GAGAR,IADAC,GAAAP,EAAAc,KACA,GACAP,GAAA,MAEAD,IADAC,GAAAN,EAAAG,KACA,GAGAC,IADAC,GAAAP,EAAAe,KACA,GACAR,GAAA,MAEAD,IADAC,GAAAN,EAAAI,KACA,GACAE,GAAA,MAEAD,IADAC,GAAAL,EAAAE,KACA,GAEAE,GAAAP,EAAAgB,EAAAf,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,EAEA3G,GAZAgH,GAAA,QAYA,IAlBAC,GAAA,QAiBAH,GAAA,QACA,IAHAC,GAAA,OAGAtyE,KAAA0tE,WASAgC,EAAA/D,IAAA+D,EAAAiD,SAQAjD,EAAAqD,OAAA,SAAAC,GAGA,GAFAlF,EAAAkF,KACAA,EAAA3D,EAAA2D,IACAA,EAAApD,SACA,MAAA1qD,MAAA,oBAaA,IAWA+tD,EAAAjD,EAAAkD,EArBA,GAAAvF,EAIA,OAAA3tE,KAAA0tE,WACA,aAAA1tE,KAAAyrE,OACA,IAAAuH,EAAAxH,MAAA,IAAAwH,EAAAvH,KAUAF,GANAvrE,KAAA0tE,SAAAC,EAAAwF,MAAAxF,EAAAyF,OACApzE,KAAAwrE,IACAxrE,KAAAyrE,KACAuH,EAAAxH,IACAwH,EAAAvH,MAEAkC,EAAAkF,WAAA7yE,KAAA0tE,UARA1tE,KAWA,GAAAA,KAAA4vE,SACA,OAAA5vE,KAAA0tE,SAAAY,EAAAnD,EAEA,GAAAnrE,KAAA0tE,SA6BK,CAKL,GAFAsF,EAAAtF,WACAsF,IAAAjH,cACAiH,EAAA1B,GAAAtxE,MACA,OAAAsuE,EACA,GAAA0E,EAAA1B,GAAAtxE,KAAA2sE,KAAA,IACA,OAAA6C,EACA0D,EAAA5E,MAtCA,CAGA,GAAAtuE,KAAA8sE,GAAAl0C,GACA,OAAAo6C,EAAAlG,GAAA1B,IAAA4H,EAAAlG,GAAA2C,GACA72C,EACAo6C,EAAAlG,GAAAl0C,GACAwyC,GAIA6H,EADAjzE,KAAA0sE,IAAA,GACAb,IAAAmH,GAAAxG,IAAA,IACAM,GAAA3B,GACA6H,EAAAnD,aAAAzE,EAAAqE,GAEAO,EAAAhwE,KAAA0rE,IAAAsH,EAAArH,IAAAsH,IACAC,EAAAD,EAAA/nD,IAAA8kD,EAAAnE,IAAAmH,UAIS,GAAAA,EAAAlG,GAAAl0C,GACT,OAAA54B,KAAA0tE,SAAAY,EAAAnD,EACA,GAAAnrE,KAAA6vE,aACA,OAAAmD,EAAAnD,aACA7vE,KAAA0uE,MAAA7C,IAAAmH,EAAAtE,OACA1uE,KAAA0uE,MAAA7C,IAAAmH,GAAAtE,MACS,GAAAsE,EAAAnD,aACT,OAAA7vE,KAAA6rE,IAAAmH,EAAAtE,aACAwE,EAAA/H,EAmBA,IADA6E,EAAAhwE,KACAgwE,EAAA5C,IAAA4F,IAAA,CAGAC,EAAAvK,KAAAxY,IAAA,EAAAwY,KAAAQ,MAAA8G,EAAAxC,WAAAwF,EAAAxF,aAWA,IAPA,IAAA6F,EAAA3K,KAAAntB,KAAAmtB,KAAA4K,IAAAL,GAAAvK,KAAA6K,KACAC,EAAAH,GAAA,KAAAvE,EAAA,EAAAuE,EAAA,IAIAI,EAAAvG,EAAA+F,GACAS,EAAAD,EAAA9H,IAAAqH,GACAU,EAAA7D,cAAA6D,EAAApC,GAAAtB,IAGA0D,GADAD,EAAAvG,EADA+F,GAAAO,EACAxzE,KAAA0tE,WACA/B,IAAAqH,GAKAS,EAAA7D,WACA6D,EAAArI,GAEA8H,IAAAhoD,IAAAuoD,GACAzD,IAAAtE,IAAAgI,GAEA,OAAAR,GASAxD,EAAA7D,IAAA6D,EAAAqD,OAOArD,EAAAiE,OAAA,SAAAX,GAKA,OAJAlF,EAAAkF,KACAA,EAAA3D,EAAA2D,IAGArF,EAOApC,GANAvrE,KAAA0tE,SAAAC,EAAAiG,MAAAjG,EAAAkG,OACA7zE,KAAAwrE,IACAxrE,KAAAyrE,KACAuH,EAAAxH,IACAwH,EAAAvH,MAEAkC,EAAAkF,WAAA7yE,KAAA0tE,UAGA1tE,KAAA0rE,IAAA1rE,KAAA6rE,IAAAmH,GAAArH,IAAAqH,KASAtD,EAAAxD,IAAAwD,EAAAiE,OAQAjE,EAAAM,IAAAN,EAAAiE,OAMAjE,EAAA9C,IAAA,WACA,OAAArB,GAAAvrE,KAAAwrE,KAAAxrE,KAAAyrE,KAAAzrE,KAAA0tE,WAQAgC,EAAAtD,IAAA,SAAAx4C,GAGA,OAFAk6C,EAAAl6C,KACAA,EAAAy7C,EAAAz7C,IACA23C,EAAAvrE,KAAAwrE,IAAA53C,EAAA43C,IAAAxrE,KAAAyrE,KAAA73C,EAAA63C,KAAAzrE,KAAA0tE,WAQAgC,EAAArD,GAAA,SAAAz4C,GAGA,OAFAk6C,EAAAl6C,KACAA,EAAAy7C,EAAAz7C,IACA23C,EAAAvrE,KAAAwrE,IAAA53C,EAAA43C,IAAAxrE,KAAAyrE,KAAA73C,EAAA63C,KAAAzrE,KAAA0tE,WAQAgC,EAAAnD,IAAA,SAAA34C,GAGA,OAFAk6C,EAAAl6C,KACAA,EAAAy7C,EAAAz7C,IACA23C,EAAAvrE,KAAAwrE,IAAA53C,EAAA43C,IAAAxrE,KAAAyrE,KAAA73C,EAAA63C,KAAAzrE,KAAA0tE,WAQAgC,EAAAoE,UAAA,SAAAC,GAGA,OAFAjG,EAAAiG,KACAA,IAAApE,SACA,IAAAoE,GAAA,IACA/zE,KACA+zE,EAAA,GACAxI,EAAAvrE,KAAAwrE,KAAAuI,EAAA/zE,KAAAyrE,MAAAsI,EAAA/zE,KAAAwrE,MAAA,GAAAuI,EAAA/zE,KAAA0tE,UAEAnC,EAAA,EAAAvrE,KAAAwrE,KAAAuI,EAAA,GAAA/zE,KAAA0tE,WASAgC,EAAAlD,IAAAkD,EAAAoE,UAOApE,EAAAsE,WAAA,SAAAD,GAGA,OAFAjG,EAAAiG,KACAA,IAAApE,SACA,IAAAoE,GAAA,IACA/zE,KACA+zE,EAAA,GACAxI,EAAAvrE,KAAAwrE,MAAAuI,EAAA/zE,KAAAyrE,MAAA,GAAAsI,EAAA/zE,KAAAyrE,MAAAsI,EAAA/zE,KAAA0tE,UAEAnC,EAAAvrE,KAAAyrE,MAAAsI,EAAA,GAAA/zE,KAAAyrE,MAAA,OAAAzrE,KAAA0tE,WASAgC,EAAAhD,IAAAgD,EAAAsE,WAOAtE,EAAAuE,mBAAA,SAAAF,GAIA,GAHAjG,EAAAiG,KACAA,IAAApE,SAEA,KADAoE,GAAA,IAEA,OAAA/zE,KAEA,IAAAyrE,EAAAzrE,KAAAyrE,KACA,OAAAsI,EAAA,GAEAxI,EADAvrE,KAAAwrE,MACAuI,EAAAtI,GAAA,GAAAsI,EAAAtI,IAAAsI,EAAA/zE,KAAA0tE,UAEAnC,EADS,KAAAwI,EACTtI,EAEAA,IAAAsI,EAAA,GAFA,EAAA/zE,KAAA0tE,WAYAgC,EAAA/C,KAAA+C,EAAAuE,mBAQAvE,EAAAwE,MAAAxE,EAAAuE,mBAMAvE,EAAA1D,SAAA,WACA,OAAAhsE,KAAA0tE,SAEAnC,EAAAvrE,KAAAwrE,IAAAxrE,KAAAyrE,MAAA,GADAzrE,MAQA0vE,EAAA3D,WAAA,WACA,OAAA/rE,KAAA0tE,SACA1tE,KACAurE,EAAAvrE,KAAAwrE,IAAAxrE,KAAAyrE,MAAA,IAQAiE,EAAAyE,QAAA,SAAA/C,GACA,OAAAA,EAAApxE,KAAAo0E,YAAAp0E,KAAAq0E,aAOA3E,EAAA0E,UAAA,WACA,IAAA9I,EAAAtrE,KAAAyrE,KACAJ,EAAArrE,KAAAwrE,IACA,OACA,IAAAH,EACAA,IAAA,MACAA,IAAA,OACAA,IAAA,GACA,IAAAC,EACAA,IAAA,MACAA,IAAA,OACAA,IAAA,KAQAoE,EAAA2E,UAAA,WACA,IAAA/I,EAAAtrE,KAAAyrE,KACAJ,EAAArrE,KAAAwrE,IACA,OACAF,IAAA,GACAA,IAAA,OACAA,IAAA,MACA,IAAAA,EACAD,IAAA,GACAA,IAAA,OACAA,IAAA,MACA,IAAAA,IAWAH,EAAAoJ,UAAA,SAAAjsC,EAAAqlC,EAAA0D,GACA,OAAAA,EAAAlG,EAAAqJ,YAAAlsC,EAAAqlC,GAAAxC,EAAAsJ,YAAAnsC,EAAAqlC,IASAxC,EAAAqJ,YAAA,SAAAlsC,EAAAqlC,GACA,WAAAxC,EACA7iC,EAAA,GACAA,EAAA,MACAA,EAAA,OACAA,EAAA,OACAA,EAAA,GACAA,EAAA,MACAA,EAAA,OACAA,EAAA,OACAqlC,IAUAxC,EAAAsJ,YAAA,SAAAnsC,EAAAqlC,GACA,WAAAxC,EACA7iC,EAAA,OACAA,EAAA,OACAA,EAAA,MACAA,EAAA,GACAA,EAAA,OACAA,EAAA,OACAA,EAAA,MACAA,EAAA,GACAqlC,qRC7xCA,IAAAzxD,EAAA9b,EAAA,GAIAgc,EAAAhc,EAAA,GASA+b,EAAA/b,EAAA,GAMAic,EAAAjc,EAAA,GAcAg7C,EAAAh7C,EAAA,GAWAkc,EAAAlc,EAAA,GAIAsG,EAAAtG,EAAA,GAKA,SAAgB2/D,EACd2U,EACAxyE,EACAkG,EACAw/B,EACAmxB,EACArM,GAEA,IAEIpoD,EACAC,EACAC,EACAytC,EALAryC,EAAS80E,EAAS90E,OAWtB,OAAQsC,EAAUsgB,cAIhB,IAAK,YACH,IAAIla,EAAOqsE,EAAqBD,EAAUtsE,EAAew/B,EAAU8kB,GAEnE,OADAgoB,EAASllB,YAAcrzC,EAAAuE,KAAKW,KACvB/Y,EACEA,EAAKP,GAAE,KAAwBO,EAAKP,GAAE,KACzCnI,EAAO8mC,UAAU,GACjB9mC,EAAO8mC,UAAU,GAHH9mC,EAAOksC,oBAK3B,IAAK,UACCxjC,EAAOqsE,EAAqBD,EAAUtsE,EAAew/B,EAAU8kB,GAEnE,OADAgoB,EAASllB,YAAcrzC,EAAAuE,KAAKW,KACvB/Y,EACEA,EAAKP,GAAE,GACVnI,EAAO8mC,UAAU,GACjB9mC,EAAO8mC,UAAU,GAHH9mC,EAAOksC,oBAK3B,IAAK,WACCxjC,EAAOqsE,EAAqBD,EAAUtsE,EAAew/B,EAAU8kB,GAEnE,OADAgoB,EAASllB,YAAcrzC,EAAAuE,KAAKW,KACvB/Y,EACEA,EAAKP,GAAE,GACVnI,EAAO8mC,UAAU,GACjB9mC,EAAO8mC,UAAU,GAHH9mC,EAAOksC,oBAK3B,IAAK,cACCxjC,EAAOqsE,EAAqBD,EAAUtsE,EAAew/B,EAAU8kB,GAEnE,OADAgoB,EAASllB,YAAcrzC,EAAAuE,KAAKW,KACvB/Y,GACLosE,EAASllB,YAAcrzC,EAAAuE,KAAKW,KACrB/Y,EAAKP,GAAE,KACVnI,EAAO8mC,UAAU,GACjB9mC,EAAO8mC,UAAU,IAJH9mC,EAAOksC,oBAM3B,IAAK,WACCxjC,EAAOqsE,EAAqBD,EAAUtsE,EAAew/B,EAAU8kB,GAEnE,GADAgoB,EAASllB,YAAcrzC,EAAAuE,KAAKW,MACvB/Y,EAAM,OAAO1I,EAAOksC,oBAEzB,GADIoQ,EAAY5zC,EAAKmzC,eACN,CACb,IAAIj8B,EAAiBk1D,EAAS5oD,QAAQtM,eACtC,GAAIA,GAAkB08B,EAAU/qB,eAAe3R,GAAiB,OAAO5f,EAAO8mC,UAAU,GAE1F,OAAO9mC,EAAO8mC,UAAU,GAE1B,IAAK,UACCp+B,EAAOqsE,EAAqBD,EAAUtsE,EAAew/B,EAAU8kB,GAEnE,OADAgoB,EAASllB,YAAcrzC,EAAAuE,KAAKW,KACvB/Y,EAEgB,QADjB4zC,EAAY5zC,EAAKmzC,iBAC+D,OAAvDS,EAAU5qB,eAAe8pB,EAAAn/B,aAAaW,aAC/Dhd,EAAO8mC,UAAU,GACjB9mC,EAAO8mC,UAAU,GAJH9mC,EAAOksC,oBAM3B,IAAK,YAQH,GAPA4oC,EAASllB,YAAcrzC,EAAAuE,KAAKW,KACxBjZ,GACFssE,EAASluE,MACP0V,EAAAnY,eAAe2lD,sBACfgD,EAAWroD,MAAOnC,EAAUsgB,cAGT,GAAnBolB,EAASriC,OAKX,OAJAmvE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAE3ClF,EAAOksC,oBAEhB,IAAI1/B,EAAUsoE,EAASz0D,SAAS+qC,kBAAkBpjB,EAAS,GAAI8sC,EAAS5iD,gBAAiBxV,EAAA4sC,WAAW0rB,SACpG,OAAOh1E,EAAO8mC,UAAUt6B,EAAU,EAAI,GAExC,IAAK,aAQH,GAPAsoE,EAASllB,YAAcrzC,EAAAuE,KAAKW,KACxBjZ,GACFssE,EAASluE,MACP0V,EAAAnY,eAAe2lD,sBACfgD,EAAWroD,MAAOnC,EAAUsgB,cAGT,GAAnBolB,EAASriC,OAKX,OAJAmvE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAE3ClF,EAAOksC,oBAEhB,IAAI+oC,EAAOH,EAAS5hB,4BAA4BlrB,EAAS,GAAIzrB,EAAAuE,KAAKG,IAAG,GAErE,OADA6zD,EAASllB,YAAcrzC,EAAAuE,KAAKW,KACrBzhB,EAAO8mC,UAAUrqB,EAAAiY,gBAAgBugD,IAASx4D,EAAAkY,aAAa6C,MAAQ,EAAI,GAE5E,IAAK,YACH,IAAKs9C,EAAS5oD,QAAQlM,MAEpB,OADA80D,EAASllB,YAAcrzC,EAAAuE,KAAKW,KACrBzhB,EAAO8mC,UAAU,GAEtBp+B,EAAOqsE,EAAqBD,EAAUtsE,EAAew/B,EAAU8kB,GAEnE,OADAgoB,EAASllB,YAAcrzC,EAAAuE,KAAKW,KACvB/Y,EAEgB,QADjB4zC,EAAY5zC,EAAKmzC,iBACSS,EAAUj1B,aAAam0B,EAAAx8B,eAAezI,WAEhEvW,EAAO8mC,UAAU,GADjB9mC,EAAO8mC,UAAU,GAHH9mC,EAAOksC,oBAS3B,IAAK,MACH,GAAuB,GAAnBlE,EAASriC,OAcX,OAbI6C,IACEA,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IACnC,GAAxBA,EAAc7C,QAChBmvE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,MAI3D4vE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAE3ClF,EAAOksC,oBAEhB,GAAI1jC,EAAe,CACjB,GAA4B,GAAxBA,EAAc7C,OAMhB,OALI6C,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IAC/DssE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,KAEhDlF,EAAOksC,oBAEhBxnC,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIx/B,EAAc,GAAE,UAE/D9D,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIzrB,EAAAuE,KAAKG,IAAG,KAEzD,OAAQ6zD,EAASllB,YAAYxoD,MAC3B,OACA,OACA,OACA,OACEirC,EAAMryC,EAAO0nC,YAAYjrB,EAAA8b,QAAQG,OAAQh0B,GACzC,MAEF,QACA,OACA,OACE2tC,EAAMryC,EAAO0nC,YAAYjrB,EAAA8b,QAAQG,OAAQh0B,GACzC,MAEF,OACE,GAAIowE,EAASllB,YAAYznD,GAAE,KAAuB,CAChD2sE,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAEb4tC,EAAMryC,EAAOksC,oBACb,MAIJ,OACEmG,EAAMryC,EAAO0nC,YACXotC,EAASj0D,QAAQkB,SACbtF,EAAA8b,QAAQ28C,OACRz4D,EAAA8b,QAAQG,OACZh0B,GAEF,MAEF,OACA,OACE2tC,EAAMryC,EAAO0nC,YAAYjrB,EAAA8b,QAAQ28C,OAAQxwE,GACzC,MAEF,QACEowE,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAEb4tC,EAAMryC,EAAOksC,oBAIjB,OAAOmG,EAET,IAAK,MACH,GAAuB,GAAnBrK,EAASriC,OAcX,OAbI6C,IACEA,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IACnC,GAAxBA,EAAc7C,QAChBmvE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,MAI3D4vE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAE3ClF,EAAOksC,oBAEhB,GAAI1jC,EAAe,CACjB,GAA4B,GAAxBA,EAAc7C,OAMhB,OALI6C,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IAC/DssE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,KAEhDlF,EAAOksC,oBAEhBxnC,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIx/B,EAAc,GAAE,UAE/D9D,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIzrB,EAAAuE,KAAKG,IAAG,KAEzD,OAAQ6zD,EAASllB,YAAYxoD,MAC3B,OACA,OACA,OACA,OACEirC,EAAMryC,EAAO0nC,YAAYjrB,EAAA8b,QAAQI,OAAQj0B,GACzC,MAEF,QACA,OACA,OACE2tC,EAAMryC,EAAO0nC,YAAYjrB,EAAA8b,QAAQI,OAAQj0B,GACzC,MAEF,OACE,GAAIowE,EAASllB,YAAYznD,GAAE,KAAuB,CAChD2sE,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAEb4tC,EAAMryC,EAAOksC,oBACb,MAIJ,OACEmG,EAAMryC,EAAO0nC,YACXotC,EAASj0D,QAAQkB,SACbtF,EAAA8b,QAAQ48C,OACR14D,EAAA8b,QAAQI,OACZj0B,GAEF,MAEF,OACA,OACE2tC,EAAMryC,EAAO0nC,YAAYjrB,EAAA8b,QAAQ48C,OAAQzwE,GACzC,MAEF,QACEowE,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAEb4tC,EAAMryC,EAAOksC,oBAIjB,OAAOmG,EAET,IAAK,SACH,GAAuB,GAAnBrK,EAASriC,OAcX,OAbI6C,IACEA,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IACnC,GAAxBA,EAAc7C,QAChBmvE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,MAI3D4vE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAE3ClF,EAAOksC,oBAEhB,GAAI1jC,EAAe,CACjB,GAA4B,GAAxBA,EAAc7C,OAMhB,OALI6C,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IAC/DssE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,KAEhDlF,EAAOksC,oBAEhBxnC,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIx/B,EAAc,GAAE,UAE/D9D,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIzrB,EAAAuE,KAAKG,IAAG,KAEzD,OAAQ6zD,EAASllB,YAAYxoD,MAC3B,OACA,OACA,OACA,OACEirC,EAAMryC,EAAO0nC,YAAYjrB,EAAA8b,QAAQK,UAAWl0B,GAC5C,MAEF,QACA,OACA,OACE2tC,EAAMryC,EAAO0nC,YAAYjrB,EAAA8b,QAAQK,UAAWl0B,GAC5C,MAEF,OACE,GAAIowE,EAASllB,YAAYznD,GAAE,KAAuB,CAChD2sE,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAEb4tC,EAAMryC,EAAOksC,oBACb,MAIJ,OACEmG,EAAMryC,EAAO0nC,YACXotC,EAASj0D,QAAQkB,SACbtF,EAAA8b,QAAQ68C,UACR34D,EAAA8b,QAAQK,UACZl0B,GAEF,MAEF,OACA,OACE2tC,EAAMryC,EAAO0nC,YAAYjrB,EAAA8b,QAAQ68C,UAAW1wE,GAC5C,MAEF,QACEowE,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAEb4tC,EAAMryC,EAAOksC,oBAIjB,OAAOmG,EAET,IAAK,OACH,GAAuB,GAAnBrK,EAASriC,OAcX,OAbI6C,IACEA,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IACnC,GAAxBA,EAAc7C,QAChBmvE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,MAI3D4vE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAE3ClF,EAAOksC,oBAEhB,GAAI1jC,EAAe,CACjB,GAA4B,GAAxBA,EAAc7C,OAMhB,OALI6C,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IAC/DssE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,KAEhDlF,EAAOksC,oBAEhBxnC,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIx/B,EAAc,GAAE,UAE/D9D,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIzrB,EAAAuE,KAAKG,IAAG,KAGzD,OADAtc,EAAOmwE,EAASthB,kBAAkBxrB,EAAS,GAAI8sC,EAASllB,YAAW,KAC3DklB,EAASllB,YAAYxoD,MAC3B,OACA,OACA,OACA,OACA,QACEirC,EAAMyiC,EAASta,uBACbx6D,EAAO6nC,aAAaprB,EAAA4Y,SAASggD,QAAS3wE,EAAMC,GAC5CmwE,EAASllB,aAIb,OACA,OACEvd,EAAMryC,EAAO6nC,aAAaprB,EAAA4Y,SAASggD,QAAS3wE,EAAMC,GAClD,MAEF,OACE,GAAImwE,EAASllB,YAAYznD,GAAE,KAAuB,CAChD2sE,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAEb4tC,EAAMryC,EAAOksC,oBACb,MAIJ,OACEmG,EAAMryC,EAAO6nC,aACXitC,EAASj0D,QAAQkB,SACbtF,EAAA4Y,SAASigD,QACT74D,EAAA4Y,SAASggD,QACb3wE,EACAC,GAEF,MAEF,OACA,OACE0tC,EAAMryC,EAAO6nC,aAAaprB,EAAA4Y,SAASigD,QAAS5wE,EAAMC,GAClD,MAEF,QACEmwE,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAEb4tC,EAAMryC,EAAOksC,oBAIjB,OAAOmG,EAET,IAAK,OACH,GAAuB,GAAnBrK,EAASriC,OAcX,OAbI6C,IACEA,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IACnC,GAAxBA,EAAc7C,QAChBmvE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,MAI3D4vE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAE3ClF,EAAOksC,oBAEhB,GAAI1jC,EAAe,CACjB,GAA4B,GAAxBA,EAAc7C,OAMhB,OALI6C,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IAC/DssE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,KAEhDlF,EAAOksC,oBAEhBxnC,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIx/B,EAAc,GAAE,UAE/D9D,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIzrB,EAAAuE,KAAKG,IAAG,KAGzD,OADAtc,EAAOmwE,EAASthB,kBAAkBxrB,EAAS,GAAI8sC,EAASllB,YAAW,KAC3DklB,EAASllB,YAAYxoD,MAC3B,OACA,OACA,OACA,OACA,QACEirC,EAAMyiC,EAASta,uBACbx6D,EAAO6nC,aAAaprB,EAAA4Y,SAASkgD,QAAS7wE,EAAMC,GAC5CmwE,EAASllB,aAEX,MAEF,OACA,OACEvd,EAAMryC,EAAO6nC,aAAaprB,EAAA4Y,SAASkgD,QAAS7wE,EAAMC,GAClD,MAEF,OACE,GAAImwE,EAASllB,YAAYznD,GAAE,KAAuB,CAChD2sE,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAEb4tC,EAAMryC,EAAOksC,oBACb,MAIJ,OACEmG,EAAMryC,EAAO6nC,aACXitC,EAASj0D,QAAQkB,SACbtF,EAAA4Y,SAASmgD,QACT/4D,EAAA4Y,SAASkgD,QACb7wE,EACAC,GAEF,MAEF,OACA,OACE0tC,EAAMryC,EAAO6nC,aAAaprB,EAAA4Y,SAASmgD,QAAS9wE,EAAMC,GAClD,MAEF,QACEmwE,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAEb4tC,EAAMryC,EAAOksC,oBAIjB,OAAOmG,EAET,IAAK,MACH,GAAuB,GAAnBrK,EAASriC,OAcX,OAbI6C,IACEA,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IACnC,GAAxBA,EAAc7C,QAChBmvE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,MAI3D4vE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAE3ClF,EAAOksC,oBAEhB,GAAI1jC,EAAe,CACjB,GAA4B,GAAxBA,EAAc7C,OAMhB,OALI6C,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IAC/DssE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,KAEhDlF,EAAOksC,oBAEhBxnC,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIx/B,EAAc,GAAE,UAE/D9D,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIzrB,EAAAuE,KAAKa,IAAG,KAEzD,OAAQmzD,EAASllB,YAAYxoD,MAC3B,OACA,OACA,OAEE,IAAI0wD,EAAYgd,EAAS5iD,gBAAgBrC,oBAAoBtT,EAAAuE,KAAKG,KAAK,GACvEoxB,EAAMryC,EAAOorC,aACXprC,EAAOqoC,eAAeyvB,EAAU/qC,MAAOroB,GACvC1E,EAAO6nC,aAAaprB,EAAA4Y,SAASsnC,OAC3B38D,EAAO8mC,UAAU,GACjB9mC,EAAOmoC,eAAe2vB,EAAU/qC,MAAK,IAEvC/sB,EAAO6nC,aAAaprB,EAAA4Y,SAASqB,MAC3B12B,EAAOmoC,eAAe2vB,EAAU/qC,MAAK,GACrC/sB,EAAO8mC,UAAU,KAGrB,MAEF,OACMgxB,EAAYgd,EAAS5iD,gBAAgBrC,oBAAoBilD,EAASj0D,QAAQW,WAAW,GACzF6wB,EAAMryC,EAAOorC,aACXprC,EAAOqoC,eAAeyvB,EAAU/qC,MAAOroB,GACvC1E,EAAO6nC,aACLitC,EAASj0D,QAAQkB,SACbtF,EAAA4Y,SAASunC,OACTngD,EAAA4Y,SAASsnC,OACbmY,EAASj0D,QAAQW,UAAUu7B,aAAa/8C,GACxCA,EAAOmoC,eAAe2vB,EAAU/qC,MAAO+nD,EAASj0D,QAAQ+wC,iBAE1D5xD,EAAO6nC,aACLitC,EAASj0D,QAAQkB,SACbtF,EAAA4Y,SAASuB,MACTna,EAAA4Y,SAASqB,MACb12B,EAAOmoC,eAAe2vB,EAAU/qC,MAAO+nD,EAASj0D,QAAQ+wC,gBACxDkjB,EAASj0D,QAAQW,UAAUu7B,aAAa/8C,KAG5C,MAEF,OACM83D,EAAYgd,EAAS5iD,gBAAgBrC,oBAAoBtT,EAAAuE,KAAKI,KAAK,GACvEmxB,EAAMryC,EAAOorC,aACXprC,EAAOqoC,eAAeyvB,EAAU/qC,MAAOroB,GACvC1E,EAAO6nC,aAAaprB,EAAA4Y,SAASunC,OAC3B58D,EAAOknC,UAAU,EAAG,GACpBlnC,EAAOmoC,eAAe2vB,EAAU/qC,MAAK,IAEvC/sB,EAAO6nC,aAAaprB,EAAA4Y,SAASuB,MAC3B52B,EAAOmoC,eAAe2vB,EAAU/qC,MAAK,GACrC/sB,EAAOknC,UAAU,EAAG,KAGxB,MAEF,OACE,GAAI4tC,EAASllB,YAAYznD,GAAE,KAAuB,CAChD2sE,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAEb4tC,EAAMryC,EAAOksC,oBACb,MAIJ,OACA,OACA,OACA,OACA,QACEmG,EAAM3tC,EACN,MAEF,QACE2tC,EAAMryC,EAAO0nC,YAAYjrB,EAAA8b,QAAQk9C,OAAQ/wE,GACzC,MAEF,QACE2tC,EAAMryC,EAAO0nC,YAAYjrB,EAAA8b,QAAQm9C,OAAQhxE,GACzC,MAEF,QACE2tC,EAAMryC,EAAOksC,oBACb,MAEF,QACE4oC,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAEb4tC,EAAMryC,EAAOksC,oBAIjB,OAAOmG,EAET,IAAK,MACH,GAAuB,GAAnBrK,EAASriC,OAcX,OAbI6C,IACEA,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IACnC,GAAxBA,EAAc7C,QAChBmvE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,MAI3D4vE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAE3ClF,EAAOksC,oBAEhB,GAAI1jC,EAAe,CACjB,GAA4B,GAAxBA,EAAc7C,OAMhB,OALI6C,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IAC/DssE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,KAEhDlF,EAAOksC,oBAEhBxnC,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIx/B,EAAc,GAAE,UAE/D9D,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIzrB,EAAAuE,KAAKa,IAAG,KAGzD,OADAhd,EAAOmwE,EAASthB,kBAAkBxrB,EAAS,GAAI8sC,EAASllB,YAAW,KAC3DklB,EAASllB,YAAYxoD,MAC3B,OACA,OACA,OACE,IAAI+nB,EAAO2lD,EAAS5iD,gBAAgB/C,KAChCwmD,EAAab,EAAS5iD,gBAAgB5C,aACxCwlD,EAASllB,aACRzgC,EAAKsF,YAAY/vB,EAAMowE,EAASllB,cAE/BgmB,EAAad,EAAS5iD,gBAAgBrC,oBACxCilD,EAASllB,aACRzgC,EAAKsF,YAAY9vB,EAAMmwE,EAASllB,cAEnCklB,EAAS5iD,gBAAgBtC,cAAc+lD,GACvCtjC,EAAMryC,EAAOorC,aACXprC,EAAOqoC,eAAestC,EAAW5oD,MAAOroB,GACxC1E,EAAOqoC,eAAeutC,EAAW7oD,MAAOpoB,GACxC3E,EAAO6nC,aAAaprB,EAAA4Y,SAASqB,MAC3B12B,EAAOmoC,eAAewtC,EAAW5oD,MAAK,GACtC/sB,EAAOmoC,eAAeytC,EAAW7oD,MAAK,KAG1C,MAEF,OACA,OACA,OACA,QACMoC,EAAO2lD,EAAS5iD,gBAAgB/C,KAChCwmD,EAAab,EAAS5iD,gBAAgB5C,aACxCwlD,EAASllB,aACRzgC,EAAKsF,YAAY/vB,EAAMowE,EAASllB,cAE/BgmB,EAAad,EAAS5iD,gBAAgBrC,oBACxCilD,EAASllB,aACRzgC,EAAKsF,YAAY9vB,EAAMmwE,EAASllB,cAEnCklB,EAAS5iD,gBAAgBtC,cAAc+lD,GACvCtjC,EAAMryC,EAAOorC,aACXprC,EAAOqoC,eAAestC,EAAW5oD,MAAOroB,GACxC1E,EAAOqoC,eAAeutC,EAAW7oD,MAAOpoB,GACxC3E,EAAO6nC,aAAaprB,EAAA4Y,SAASsB,MAC3B32B,EAAOmoC,eAAewtC,EAAW5oD,MAAK,GACtC/sB,EAAOmoC,eAAeytC,EAAW7oD,MAAK,KAG1C,MAEF,OACM4oD,EAAab,EAAS5iD,gBAAgB5C,aAAa/S,EAAAuE,KAAKI,KAAK,GAC7D00D,EAAad,EAAS5iD,gBAAgBrC,oBAAoBtT,EAAAuE,KAAKI,KAAK,GACxE4zD,EAAS5iD,gBAAgBtC,cAAc+lD,GACvCtjC,EAAMryC,EAAOorC,aACXprC,EAAOqoC,eAAestC,EAAW5oD,MAAOroB,GACxC1E,EAAOqoC,eAAeutC,EAAW7oD,MAAOpoB,GACxC3E,EAAO6nC,aAAaprB,EAAA4Y,SAASuB,MAC3B52B,EAAOmoC,eAAewtC,EAAW5oD,MAAK,GACtC/sB,EAAOmoC,eAAeytC,EAAW7oD,MAAK,KAG1C,MAEF,OACM4oD,EAAab,EAAS5iD,gBAAgB5C,aAAa/S,EAAAuE,KAAKI,KAAK,GAC7D00D,EAAad,EAAS5iD,gBAAgBrC,oBAAoBtT,EAAAuE,KAAKI,KAAK,GACxE4zD,EAAS5iD,gBAAgBtC,cAAc+lD,GACvCtjC,EAAMryC,EAAOorC,aACXprC,EAAOqoC,eAAestC,EAAW5oD,MAAOroB,GACxC1E,EAAOqoC,eAAeutC,EAAW7oD,MAAOpoB,GACxC3E,EAAO6nC,aAAaprB,EAAA4Y,SAASwB,MAC3B72B,EAAOmoC,eAAewtC,EAAW5oD,MAAK,GACtC/sB,EAAOmoC,eAAeytC,EAAW7oD,MAAK,KAG1C,MAEF,OACM4oD,EAAab,EAAS5iD,gBAAgB5C,aAAawlD,EAASj0D,QAAQW,WAAW,GAC/Eo0D,EAAad,EAAS5iD,gBAAgBrC,oBAAoBilD,EAASj0D,QAAQW,WAAW,GAC1FszD,EAAS5iD,gBAAgBtC,cAAc+lD,GACvCtjC,EAAMryC,EAAOorC,aACXprC,EAAOqoC,eAAestC,EAAW5oD,MAAOroB,GACxC1E,EAAOqoC,eAAeutC,EAAW7oD,MAAOpoB,GACxC3E,EAAO6nC,aACLitC,EAASj0D,QAAQkB,SACbtF,EAAA4Y,SAASuB,MACTna,EAAA4Y,SAASqB,MACb12B,EAAOmoC,eAAewtC,EAAW5oD,MAAO+nD,EAASj0D,QAAQ+wC,gBACzD5xD,EAAOmoC,eAAeytC,EAAW7oD,MAAO+nD,EAASj0D,QAAQ+wC,kBAG7D,MAEF,OACE,GAAIkjB,EAASllB,YAAYznD,GAAE,KAAuB,CAChD2sE,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAEb4tC,EAAMryC,EAAOksC,oBACb,MAEEypC,EAAab,EAAS5iD,gBAAgB5C,aAAawlD,EAASj0D,QAAQW,WAAW,GAC/Eo0D,EAAad,EAAS5iD,gBAAgBrC,oBAAoBilD,EAASj0D,QAAQW,WAAW,GAC1FszD,EAAS5iD,gBAAgBtC,cAAc+lD,GACvCtjC,EAAMryC,EAAOorC,aACXprC,EAAOqoC,eAAestC,EAAW5oD,MAAOroB,GACxC1E,EAAOqoC,eAAeutC,EAAW7oD,MAAOpoB,GACxC3E,EAAO6nC,aACLitC,EAASj0D,QAAQkB,SACbtF,EAAA4Y,SAASwB,MACTpa,EAAA4Y,SAASsB,MACb32B,EAAOmoC,eAAewtC,EAAW5oD,MAAO+nD,EAASj0D,QAAQ+wC,gBACzD5xD,EAAOmoC,eAAeytC,EAAW7oD,MAAO+nD,EAASj0D,QAAQ+wC,kBAG7D,MAEF,QACEvf,EAAMryC,EAAO6nC,aAAaprB,EAAA4Y,SAASwgD,OAAQnxE,EAAMC,GACjD,MAEF,QACE0tC,EAAMryC,EAAO6nC,aAAaprB,EAAA4Y,SAASygD,OAAQpxE,EAAMC,GACjD,MAEF,QACEmwE,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAEb4tC,EAAMryC,EAAOksC,oBAIjB,OAAOmG,EAET,IAAK,MACH,GAAuB,GAAnBrK,EAASriC,OAcX,OAbI6C,IACEA,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IACnC,GAAxBA,EAAc7C,QAChBmvE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,MAI3D4vE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAE3ClF,EAAOksC,oBAEhB,GAAI1jC,EAAe,CACjB,GAA4B,GAAxBA,EAAc7C,OAMhB,OALI6C,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IAC/DssE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,KAEhDlF,EAAOksC,oBAEhBxnC,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIx/B,EAAc,GAAE,UAE/D9D,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIzrB,EAAAuE,KAAKa,IAAG,KAGzD,OADAhd,EAAOmwE,EAASthB,kBAAkBxrB,EAAS,GAAI8sC,EAASllB,YAAW,KAC3DklB,EAASllB,YAAYxoD,MAC3B,OACA,OACA,OACM+nB,EAAO2lD,EAAS5iD,gBAAgB/C,KAChCwmD,EAAab,EAAS5iD,gBAAgB5C,aACxCwlD,EAASllB,aACRzgC,EAAKsF,YAAY/vB,EAAMowE,EAASllB,cAE/BgmB,EAAad,EAAS5iD,gBAAgBrC,oBACxCilD,EAASllB,aACRzgC,EAAKsF,YAAY9vB,EAAMmwE,EAASllB,cAEnCklB,EAAS5iD,gBAAgBtC,cAAc+lD,GACvCtjC,EAAMryC,EAAOorC,aACXprC,EAAOqoC,eAAestC,EAAW5oD,MAAOroB,GACxC1E,EAAOqoC,eAAeutC,EAAW7oD,MAAOpoB,GACxC3E,EAAO6nC,aAAaprB,EAAA4Y,SAASS,MAC3B91B,EAAOmoC,eAAewtC,EAAW5oD,MAAK,GACtC/sB,EAAOmoC,eAAeytC,EAAW7oD,MAAK,KAG1C,MAEF,OACA,OACA,OACA,QACMoC,EAAO2lD,EAAS5iD,gBAAgB/C,KAChCwmD,EAAab,EAAS5iD,gBAAgB5C,aACxCwlD,EAASllB,aACRzgC,EAAKsF,YAAY/vB,EAAMowE,EAASllB,cAE/BgmB,EAAad,EAAS5iD,gBAAgBrC,oBACxCilD,EAASllB,aACRzgC,EAAKsF,YAAY9vB,EAAMmwE,EAASllB,cAEnCklB,EAAS5iD,gBAAgBtC,cAAc+lD,GACvCtjC,EAAMryC,EAAOorC,aACXprC,EAAOqoC,eAAestC,EAAW5oD,MAAOroB,GACxC1E,EAAOqoC,eAAeutC,EAAW7oD,MAAOpoB,GACxC3E,EAAO6nC,aAAaprB,EAAA4Y,SAASU,MAC3B/1B,EAAOmoC,eAAewtC,EAAW5oD,MAAK,GACtC/sB,EAAOmoC,eAAeytC,EAAW7oD,MAAK,KAG1C,MAEF,OACM4oD,EAAab,EAAS5iD,gBAAgB5C,aAAa/S,EAAAuE,KAAKI,KAAK,GAC7D00D,EAAad,EAAS5iD,gBAAgBrC,oBAAoBtT,EAAAuE,KAAKI,KAAK,GACxE4zD,EAAS5iD,gBAAgBtC,cAAc+lD,GACvCtjC,EAAMryC,EAAOorC,aACXprC,EAAOqoC,eAAestC,EAAW5oD,MAAOroB,GACxC1E,EAAOqoC,eAAeutC,EAAW7oD,MAAOpoB,GACxC3E,EAAO6nC,aAAaprB,EAAA4Y,SAASW,MAC3Bh2B,EAAOmoC,eAAewtC,EAAW5oD,MAAK,GACtC/sB,EAAOmoC,eAAeytC,EAAW7oD,MAAK,KAG1C,MAEF,OACM4oD,EAAab,EAAS5iD,gBAAgB5C,aAAa/S,EAAAuE,KAAKI,KAAK,GAC7D00D,EAAad,EAAS5iD,gBAAgBrC,oBAAoBtT,EAAAuE,KAAKI,KAAK,GACxE4zD,EAAS5iD,gBAAgBtC,cAAc+lD,GACvCtjC,EAAMryC,EAAOorC,aACXprC,EAAOqoC,eAAestC,EAAW5oD,MAAOroB,GACxC1E,EAAOqoC,eAAeutC,EAAW7oD,MAAOpoB,GACxC3E,EAAO6nC,aAAaprB,EAAA4Y,SAASY,MAC3Bj2B,EAAOmoC,eAAewtC,EAAW5oD,MAAK,GACtC/sB,EAAOmoC,eAAeytC,EAAW7oD,MAAK,KAG1C,MAEF,OACM4oD,EAAab,EAAS5iD,gBAAgB5C,aAAawlD,EAASj0D,QAAQW,WAAW,GAC/Eo0D,EAAad,EAAS5iD,gBAAgBrC,oBAAoBilD,EAASj0D,QAAQW,WAAW,GAC1FszD,EAAS5iD,gBAAgBtC,cAAc+lD,GACvCtjC,EAAMryC,EAAOorC,aACXprC,EAAOqoC,eAAestC,EAAW5oD,MAAOroB,GACxC1E,EAAOqoC,eAAeutC,EAAW7oD,MAAOpoB,GACxC3E,EAAO6nC,aACLitC,EAASj0D,QAAQkB,SACbtF,EAAA4Y,SAASW,MACTvZ,EAAA4Y,SAASS,MACb91B,EAAOmoC,eAAewtC,EAAW5oD,MAAO+nD,EAASj0D,QAAQ+wC,gBACzD5xD,EAAOmoC,eAAeytC,EAAW7oD,MAAO+nD,EAASj0D,QAAQ+wC,kBAG7D,MAEF,OACE,GAAIkjB,EAASllB,YAAYznD,GAAE,KAAuB,CAChD2sE,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAEb4tC,EAAMryC,EAAOksC,oBACb,MAEEypC,EAAab,EAAS5iD,gBAAgB5C,aAAawlD,EAASj0D,QAAQW,WAAW,GAC/Eo0D,EAAad,EAAS5iD,gBAAgBrC,oBAAoBilD,EAASj0D,QAAQW,WAAW,GAC1FszD,EAAS5iD,gBAAgBtC,cAAc+lD,GACvCtjC,EAAMryC,EAAOorC,aACXprC,EAAOqoC,eAAestC,EAAW5oD,MAAOroB,GACxC1E,EAAOqoC,eAAeutC,EAAW7oD,MAAOpoB,GACxC3E,EAAO6nC,aACLitC,EAASj0D,QAAQkB,SACbtF,EAAA4Y,SAASY,MACTxZ,EAAA4Y,SAASU,MACb/1B,EAAOmoC,eAAewtC,EAAW5oD,MAAO+nD,EAASj0D,QAAQ+wC,gBACzD5xD,EAAOmoC,eAAeytC,EAAW7oD,MAAO+nD,EAASj0D,QAAQ+wC,kBAG7D,MAEF,QACEvf,EAAMryC,EAAO6nC,aAAaprB,EAAA4Y,SAAS0gD,OAAQrxE,EAAMC,GACjD,MAEF,QACE0tC,EAAMryC,EAAO6nC,aAAaprB,EAAA4Y,SAAS2gD,OAAQtxE,EAAMC,GACjD,MAEF,QACEmwE,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAEb4tC,EAAMryC,EAAOksC,oBAIjB,OAAOmG,EAET,IAAK,OACH,GAAuB,GAAnBrK,EAASriC,OAcX,OAbI6C,IACEA,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IACnC,GAAxBA,EAAc7C,QAChBmvE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,MAI3D4vE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAE3ClF,EAAOksC,oBAEhB,GAAI1jC,EAAe,CACjB,GAA4B,GAAxBA,EAAc7C,OAMhB,OALI6C,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IAC/DssE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,KAEhDlF,EAAOksC,oBAEhBxnC,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIx/B,EAAc,GAAE,UAE/D9D,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIzrB,EAAAuE,KAAKa,IAAG,KAEzD,OAAQmzD,EAASllB,YAAYxoD,MAC3B,OACE,GAAI0tE,EAASllB,YAAYznD,GAAE,KAAuB,CAChD2sE,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAEb4tC,EAAMryC,EAAOksC,oBACb,MAIJ,QACEmG,EAAM3tC,EACN,MAEF,QACE2tC,EAAMryC,EAAO0nC,YAAYjrB,EAAA8b,QAAQ09C,QAASvxE,GAC1C,MAEF,QACE2tC,EAAMryC,EAAO0nC,YAAYjrB,EAAA8b,QAAQ29C,QAASxxE,GAC1C,MAEF,QACEowE,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAEb4tC,EAAMryC,EAAOksC,oBAIjB,OAAOmG,EAET,IAAK,QACH,GAAuB,GAAnBrK,EAASriC,OAcX,OAbI6C,IACEA,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IACnC,GAAxBA,EAAc7C,QAChBmvE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,MAI3D4vE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAE3ClF,EAAOksC,oBAEhB,GAAI1jC,EAAe,CACjB,GAA4B,GAAxBA,EAAc7C,OAMhB,OALI6C,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IAC/DssE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,KAEhDlF,EAAOksC,oBAEhBxnC,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIx/B,EAAc,GAAE,UAE/D9D,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIzrB,EAAAuE,KAAKa,IAAG,KAEzD,OAAQmzD,EAASllB,YAAYxoD,MAC3B,OACE,GAAI0tE,EAASllB,YAAYznD,GAAE,KAAuB,CAChD2sE,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAEb4tC,EAAMryC,EAAOksC,oBACb,MAIJ,QACEmG,EAAM3tC,EACN,MAEF,QACE2tC,EAAMryC,EAAO0nC,YAAYjrB,EAAA8b,QAAQ49C,SAAUzxE,GAC3C,MAEF,QACE2tC,EAAMryC,EAAO0nC,YAAYjrB,EAAA8b,QAAQ69C,SAAU1xE,GAC3C,MAEF,QACEowE,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAEb4tC,EAAMryC,EAAOksC,oBAIjB,OAAOmG,EAET,IAAK,WACH,GAAuB,GAAnBrK,EAASriC,OAcX,OAbI6C,IACEA,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IACnC,GAAxBA,EAAc7C,QAChBmvE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,MAI3D4vE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAE3ClF,EAAOksC,oBAEhB,GAAI1jC,EAAe,CACjB,GAA4B,GAAxBA,EAAc7C,OAMhB,OALI6C,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IAC/DssE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,KAEhDlF,EAAOksC,oBAEhBxnC,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIx/B,EAAc,GAAE,UAE/D9D,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIzrB,EAAAuE,KAAKa,IAAG,KAGzD,OADAhd,EAAOmwE,EAASthB,kBAAkBxrB,EAAS,GAAI8sC,EAASllB,YAAW,KAC3DklB,EAASllB,YAAYxoD,MAC3B,QACEirC,EAAMryC,EAAO6nC,aAAaprB,EAAA4Y,SAASghD,YAAa3xE,EAAMC,GACtD,MAEF,QACE0tC,EAAMryC,EAAO6nC,aAAaprB,EAAA4Y,SAASihD,YAAa5xE,EAAMC,GACtD,MAEF,QACEmwE,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAEb4tC,EAAMryC,EAAOksC,oBAIjB,OAAOmG,EAET,IAAK,UACH,GAAuB,GAAnBrK,EAASriC,OAcX,OAbI6C,IACEA,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IACnC,GAAxBA,EAAc7C,QAChBmvE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,MAI3D4vE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAE3ClF,EAAOksC,oBAEhB,GAAI1jC,EAAe,CACjB,GAA4B,GAAxBA,EAAc7C,OAMhB,OALI6C,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IAC/DssE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,KAEhDlF,EAAOksC,oBAEhBxnC,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIx/B,EAAc,GAAE,UAE/D9D,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIzrB,EAAAuE,KAAKa,IAAG,KAEzD,OAAQmzD,EAASllB,YAAYxoD,MAC3B,OACE,GAAI0tE,EAASllB,YAAYznD,GAAE,KAAuB,CAChD2sE,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAEb4tC,EAAMryC,EAAOksC,oBACb,MAIJ,QACEmG,EAAM3tC,EACN,MAEF,QACE2tC,EAAMryC,EAAO0nC,YAAYjrB,EAAA8b,QAAQg+C,WAAY7xE,GAC7C,MAEF,QACE2tC,EAAMryC,EAAO0nC,YAAYjrB,EAAA8b,QAAQi+C,WAAY9xE,GAC7C,MAEF,QACEowE,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAEb4tC,EAAMryC,EAAOksC,oBAIjB,OAAOmG,EAET,IAAK,cACH,GAAuB,GAAnBrK,EAASriC,OAYX,OAXM6C,GAAyC,GAAxBA,EAAc7C,SAC/B6C,GAAiBA,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IAChFssE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAgBA,EAAc7C,OAAOT,SAAS,IAAM,MAG/E4vE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAE3ClF,EAAOksC,oBAEhB,IAAM1jC,GAAyC,GAAxBA,EAAc7C,OAMnC,OALI6C,GAAiBA,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IAChFssE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAgBA,EAAc7C,OAAOT,SAAS,IAAM,KAEtElF,EAAOksC,oBAEhB,OAAQ1jC,EAAc,GAAGpB,MACvB,OACA,OACE1C,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIzrB,EAAAuE,KAAKY,IAAG,KACvD2wB,EAAMryC,EAAO0nC,YAAYjrB,EAAA8b,QAAQk+C,eAAgB/xE,GACjD,MAEF,OACA,OACEA,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIzrB,EAAAuE,KAAKa,IAAG,KACvD0wB,EAAMryC,EAAO0nC,YAAYjrB,EAAA8b,QAAQm+C,eAAgBhyE,GACjD,MAEF,OACE,GAAI8D,EAAc,GAAGL,GAAE,KAMrB,OALA2sE,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAEbqwE,EAASllB,YAAcpnD,EAAc,GAC9BxI,EAAOksC,oBAIlB,OACExnC,EAAOowE,EAASthB,kBACdxrB,EAAS,GACT8sC,EAASj0D,QAAQkB,SACbxF,EAAAuE,KAAKa,IACLpF,EAAAuE,KAAKY,IAAG,KAId2wB,EAAMryC,EAAO0nC,YACXotC,EAASj0D,QAAQkB,SACbtF,EAAA8b,QAAQm+C,eACRj6D,EAAA8b,QAAQk+C,eACZ/xE,GAEF,MAEF,QACEA,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIzrB,EAAAuE,KAAKG,IAAG,KACvDoxB,EAAMryC,EAAO0nC,YAAYjrB,EAAA8b,QAAQo+C,eAAgBjyE,GACjD,MAEF,QACEA,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIzrB,EAAAuE,KAAKI,IAAG,KACvDmxB,EAAMryC,EAAO0nC,YAAYjrB,EAAA8b,QAAQq+C,eAAgBlyE,GACjD,MAEF,QACEowE,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAEb4tC,EAAMryC,EAAOksC,oBAKjB,OADA4oC,EAASllB,YAAcpnD,EAAc,GAC9B6pC,EAET,IAAK,OACH,GAAuB,GAAnBrK,EAASriC,OAcX,OAbI6C,IACEA,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IACnC,GAAxBA,EAAc7C,QAChBmvE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,MAI3D4vE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAE3ClF,EAAOksC,oBAEhB,GAAI1jC,EAAe,CACjB,GAA4B,GAAxBA,EAAc7C,OAMhB,OALI6C,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IAC/DssE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,KAEhDlF,EAAOksC,oBAEhBxnC,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIx/B,EAAc,GAAE,UAE/D9D,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIzrB,EAAAuE,KAAKa,IAAG,KAEzD,OAAQmzD,EAASllB,YAAYxoD,MAC3B,QACEirC,EAAMryC,EAAO0nC,YAAYjrB,EAAA8b,QAAQs+C,QAASnyE,GAC1C,MAEF,QACE2tC,EAAMryC,EAAO0nC,YAAYjrB,EAAA8b,QAAQu+C,QAASpyE,GAC1C,MAGF,QACEowE,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAEb4tC,EAAMryC,EAAOksC,oBAIjB,OAAOmG,EAET,IAAK,QACH,GAAuB,GAAnBrK,EAASriC,OAcX,OAbI6C,IACEA,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IACnC,GAAxBA,EAAc7C,QAChBmvE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,MAI3D4vE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAE3ClF,EAAOksC,oBAEhB,GAAI1jC,GAAiBA,EAAc7C,OAAQ,CAEzC,GADAmvE,EAASllB,YAAcpnD,EAAc,GACT,GAAxBA,EAAc7C,OAMhB,OALI6C,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IAC/DssE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,KAEhDlF,EAAOksC,oBAEhBxnC,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIx/B,EAAc,GAAE,UAE/D9D,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIzrB,EAAAuE,KAAKa,IAAG,KAEzD,OAAQmzD,EAASllB,YAAYxoD,MAC3B,OACE,GAAI0tE,EAASllB,YAAYznD,GAAE,KAAuB,CAChD2sE,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAEb4tC,EAAMryC,EAAOksC,oBACb,MAIJ,QACEmG,EAAM3tC,EACN,MAGF,QACE2tC,EAAMryC,EAAO0nC,YAAYjrB,EAAA8b,QAAQw+C,SAAUryE,GAC3C,MAEF,QACE2tC,EAAMryC,EAAO0nC,YAAYjrB,EAAA8b,QAAQy+C,SAAUtyE,GAC3C,MAEF,QACEowE,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAEb4tC,EAAMryC,EAAOksC,oBAIjB,OAAOmG,EAKT,IAAK,OACH,OAAIrK,EAASriC,OAAS,GAAKqiC,EAASriC,OAAS,GACrC6C,GAAyC,GAAxBA,EAAc7C,QACnCmvE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAgBA,EAAc7C,OAAOT,SAAS,IAAM,KAG3E8iC,EAASriC,OAAS,EACpBmvE,EAASluE,MACP0V,EAAAnY,eAAeo8D,wCACfzT,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAGlD4vE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAG7ClF,EAAOksC,qBAEV1jC,GAAyC,GAAxBA,EAAc7C,QAQrCjB,EAAOowE,EAASthB,kBACdxrB,EAAS,GACT8sC,EAASj0D,QAAQW,UAAS,MAIxB2jB,EAA4B,GAAnB6C,EAASriC,OAAcsxE,EAAuBnC,EAAU9sC,EAAS,IAAM,GACvE,EACJhoC,EAAOksC,qBAEhB4oC,EAASllB,YAAcpnD,EAAc,GAC9BxI,EAAOyoC,WACZjgC,EAAc,GAAG6d,SACjB7d,EAAc,GAAGL,GAAG,GACpBzD,EACA8D,EAAc,GAAGL,GAAE,IACnBgxD,EAAehxD,GAAE,IACjBgxD,EAAephC,KAAOvvB,EAAc,GAAGuvB,MAClC+8C,EAASllB,YAAcuJ,GAAgB1pC,gBACvCqlD,EAASllB,YAAcpnD,EAAc,IAAIinB,eAC9C0V,MA3BI38B,GAAiBA,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IAChFssE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAgBA,EAAc7C,OAAOT,SAAS,IAAM,KAEtElF,EAAOksC,qBAyBlB,IAAK,QAEH,GADA4oC,EAASllB,YAAcrzC,EAAAuE,KAAKc,KACxBomB,EAASriC,OAAS,GAAKqiC,EAASriC,OAAS,EAkB3C,OAjBM6C,GAAyC,GAAxBA,EAAc7C,QACnCmvE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAgBA,EAAc7C,OAAOT,SAAS,IAAM,KAG3E8iC,EAASriC,OAAS,EACpBmvE,EAASluE,MACP0V,EAAAnY,eAAeo8D,wCACfzT,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAGlD4vE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAG7ClF,EAAOksC,oBAEhB,IAAM1jC,GAAyC,GAAxBA,EAAc7C,OAKnC,OAJAmvE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAgBA,EAAc7C,OAAOT,SAAS,IAAM,KAEtElF,EAAOksC,oBAEhBxnC,EAAOowE,EAASthB,kBACdxrB,EAAS,GACT8sC,EAASj0D,QAAQW,UAAS,KAI5B7c,EAAOmwE,EAASthB,kBACdxrB,EAAS,GACTx/B,EAAc,GACdA,EAAc,GAAGL,GAAE,GAChB,EACA,EAAwB,GAGzBO,OAAI,EAoBR,OAlBEF,EAAc,GAAGL,GAAE,MAEhB2sE,EAASllB,YAAYznD,GAAE,IACxB2sE,EAASllB,YAAY73B,KAAOvvB,EAAc,GAAGuvB,OAG/CpzB,EAAOmwE,EAASva,kBACd51D,EACAmwE,EAASllB,YAAapnD,EAAc,GAAE,IAGtCw/B,EAAS,IAEXt/B,EAAOF,EAAc,IAErBE,EAAOosE,EAASllB,aAEdzqB,EAA4B,GAAnB6C,EAASriC,OAAcsxE,EAAuBnC,EAAU9sC,EAAS,IAAM,GACvE,EACJhoC,EAAOksC,qBAEhB4oC,EAASllB,YAAcrzC,EAAAuE,KAAKc,KACrB5hB,EAAO8oC,YAAYtgC,EAAc,GAAG6d,SAAU3hB,EAAMC,EAAM+D,EAAK+mB,eAAgB0V,IAExF,IAAK,SAEH,GADA2vC,EAASllB,YAAcklB,EAASj0D,QAAQW,UACjB,GAAnBwmB,EAASriC,OAWX,OAVM6C,GAAyC,GAAxBA,EAAc7C,QACnCmvE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAgBA,EAAc7C,OAAOT,SAAS,IAAM,KAG/E4vE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAE3ClF,EAAOksC,oBAEV1jC,GAAyC,GAAxBA,EAAc7C,QACnCmvE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAgBA,EAAc7C,OAAOT,SAAS,IAAM,KAG/E,IAAImhB,EAAoB7d,EAAe,GAAG6d,SAkB1C,OAjBIyuD,EAASj0D,QAAQkB,SAEfo3C,EAAehxD,GAAE,IAAuBgxD,EAAephC,MAAQ,IACjE+8C,EAASllB,YAAcrzC,EAAAuE,KAAKQ,IAC5B+wB,EAAMryC,EAAO8mC,UAAUzgB,IAEvBgsB,EAAMryC,EAAOknC,UAAU7gB,EAAU,GAI/B8yC,EAAehxD,GAAE,IAA8C,IAAvBgxD,EAAephC,MACzD+8C,EAASllB,YAAcrzC,EAAAuE,KAAKS,IAC5B8wB,EAAMryC,EAAOknC,UAAU7gB,EAAU,IAEjCgsB,EAAMryC,EAAO8mC,UAAUzgB,GAGpBgsB,EAET,IAAK,UAEH,GADAyiC,EAASllB,YAAcklB,EAASj0D,QAAQW,UACjB,GAAnBwmB,EAASriC,OAWX,OAVM6C,GAAyC,GAAxBA,EAAc7C,QACnCmvE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAgBA,EAAc7C,OAAOT,SAAS,IAAM,KAG/E4vE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAE3ClF,EAAOksC,oBAEhB,IAAM1jC,GAAyC,GAAxBA,EAAc7C,OAKnC,OAJAmvE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAgBA,EAAc7C,OAAOT,SAAS,IAAM,KAEtElF,EAAOksC,oBAEhB,IACIgrC,OAAS,EACb,OAFI7wD,EAAoB7d,EAAe,GAAG6d,UAGxC,KAAK,EAAK6wD,EAAY,EAAG,MACzB,KAAK,EAAKA,EAAY,EAAG,MACzB,KAAK,EAAKA,EAAY,EAAG,MACzB,KAAK,EAAKA,EAAY,EAAG,MACzB,QAA0B,OAAfpzE,QAAO,GAAe9D,EAAOksC,oBAmB1C,OAjBI4oC,EAASj0D,QAAQkB,SAEfo3C,EAAehxD,GAAE,IAAuBgxD,EAAephC,MAAQ,IACjE+8C,EAASllB,YAAcrzC,EAAAuE,KAAKQ,IAC5B+wB,EAAMryC,EAAO8mC,UAAUowC,IAEvB7kC,EAAMryC,EAAOknC,UAAUgwC,EAAW,GAIhC/d,EAAehxD,GAAE,IAA8C,IAAvBgxD,EAAephC,MACzD+8C,EAASllB,YAAcrzC,EAAAuE,KAAKS,IAC5B8wB,EAAMryC,EAAOknC,UAAUgwC,EAAW,IAElC7kC,EAAMryC,EAAO8mC,UAAUowC,GAGpB7kC,EAET,IAAK,WAEH,GADAyiC,EAASllB,YAAcklB,EAASj0D,QAAQW,UACpCwmB,EAASriC,OAAS,EAWpB,OAVM6C,GAAyC,GAAxBA,EAAc7C,QACnCmvE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAgBA,EAAc7C,OAAOT,SAAS,IAAM,KAG/E4vE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAE3ClF,EAAOksC,oBAEhB,IAAM1jC,GAAyC,GAAxBA,EAAc7C,OAKnC,OAJAmvE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAgBA,EAAc7C,OAAOT,SAAS,IAAM,KAEtElF,EAAOksC,oBAEhB,IAAIoQ,EACJ,KADIA,EAAY9zC,EAAc,GAAGqzC,gBAM/B,OAJAi5B,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAENzE,EAAOksC,oBAEhB,IAAI/G,OAAM,EACV,GAAI6C,EAASriC,OAAQ,CACnB,GACEqiC,EAAS,GAAG5gC,MAAQoV,EAAAtV,SAASG,SACT2gC,EAAS,GAAI7wB,aAAeqF,EAAAvF,YAAYmB,OAM5D,OAJA08D,EAASluE,MACP0V,EAAAnY,eAAeylB,wBACfoe,EAAS,GAAGvjC,OAEPzE,EAAOksC,oBAEhB,IAAIirC,EAAsCnvC,EAAS,GAAIrmC,MACnD4lE,EAAQjrB,EAAUnsC,QAAUmsC,EAAUnsC,QAAQ5O,IAAI41E,GAAa,KACnE,IAAM5P,GAASA,EAAMngE,MAAQo0C,EAAAz8B,YAAY6R,MAKvC,OAJAkkD,EAASluE,MACP0V,EAAAnY,eAAeizE,yBACfpvC,EAAS,GAAGvjC,MAAO63C,EAAU15B,aAAcu0D,GAEtCn3E,EAAOksC,oBAEhB/G,EAAiBoiC,EAAO12C,kBAExBsU,EAASmX,EAAUtrB,oBAErB,OAAI8jD,EAASj0D,QAAQkB,SAEfo3C,EAAehxD,GAAE,IAAuBgxD,EAAephC,MAAQ,IACjE+8C,EAASllB,YAAcrzC,EAAAuE,KAAKQ,IACrBthB,EAAO8mC,UAAU3B,IAEjBnlC,EAAOknC,UAAU/B,GAItBg0B,EAAehxD,GAAE,IAA8C,IAAvBgxD,EAAephC,MACzD+8C,EAASllB,YAAcrzC,EAAAuE,KAAKS,IACrBvhB,EAAOknC,UAAU/B,IAEjBnlC,EAAO8mC,UAAU3B,GAO9B,IAAK,SACH,GAAuB,GAAnB6C,EAASriC,OAcX,OAbI6C,IACEA,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IACnC,GAAxBA,EAAc7C,QAChBmvE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,MAI3D4vE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAE3ClF,EAAOksC,oBAEhB,GAAI1jC,EAAe,CACjB,GAA4B,GAAxBA,EAAc7C,OAMhB,OALI6C,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IAC/DssE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,KAEhDlF,EAAOksC,oBAEhBxnC,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIx/B,EAAc,GAAE,UAE/D9D,EAAOowE,EAAS5hB,4BAA4BlrB,EAAS,GAAIzrB,EAAAuE,KAAKG,IAAG,GAE/DvY,EAAOosE,EAASllB,YAOpB,OANAjrD,EAAOmwE,EAASthB,kBAAkBxrB,EAAS,GAAIt/B,EAAI,KACnD9D,EAAOkwE,EAASne,cACdme,EAAS5hB,4BAA4BlrB,EAAS,GAAIzrB,EAAAuE,KAAKW,KAAI,GAC3DqzD,EAASllB,aAEXklB,EAASllB,YAAclnD,EACfosE,EAASllB,YAAYxoD,MAC3B,OACA,OACA,OACA,OACA,QAIA,QACEirC,EAAMryC,EAAOorC,aAAa1mC,EAAMC,EAAMC,GACtC,MAEF,QACEkwE,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAEb4tC,EAAMryC,EAAOksC,oBAIjB,OAAOmG,EAET,IAAK,cAaH,OAZuB,GAAnBrK,EAASriC,QACXmvE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAGhDsD,GACFssE,EAASluE,MACP0V,EAAAnY,eAAe2lD,sBACfgD,EAAWroD,MAAOnC,EAAUsgB,cAGzB5iB,EAAOksC,oBAKhB,IAAK,cAcH,OAbA4oC,EAASllB,YAAcrzC,EAAAuE,KAAKG,IACL,GAAnB+mB,EAASriC,QACXmvE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAGhDsD,GACFssE,EAASluE,MACP0V,EAAAnY,eAAe2lD,sBACfgD,EAAWroD,MAAOnC,EAAUsgB,cAGzB5iB,EAAO+nC,WAAWtrB,EAAA4nB,OAAOgzC,eAElC,IAAK,cAiBH,OAhBAvC,EAASllB,YAAcrzC,EAAAuE,KAAKG,IACL,GAAnB+mB,EAASriC,QACXmvE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAElDR,EAAO1E,EAAOksC,qBAEdxnC,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIzrB,EAAAuE,KAAKG,IAAG,KAErDzY,GACFssE,EAASluE,MACP0V,EAAAnY,eAAe2lD,sBACfgD,EAAWroD,MAAOnC,EAAUsgB,cAGzB5iB,EAAO+nC,WAAWtrB,EAAA4nB,OAAOizC,WAAY,MAAQ5yE,IAGtD,IAAK,cAOH,GANI8D,GACFssE,EAASluE,MACP0V,EAAAnY,eAAe2lD,sBACfgD,EAAWroD,MAAOnC,EAAUsgB,cAGT,GAAnBolB,EAASriC,OAMX,OALAmvE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAElD4vE,EAASllB,YAAcrzC,EAAAuE,KAAKc,KACrB5hB,EAAOksC,oBAqBhB,MAnBAxnC,EAAOowE,EAASthB,kBACdxrB,EAAS,GACT8sC,EAASj0D,QAAQW,UAAS,KAI5B7c,EAAOmwE,EAASthB,kBACdxrB,EAAS,GACT8sC,EAASj0D,QAAQW,UAAS,KAI5B5c,EAAOkwE,EAASthB,kBACdxrB,EAAS,GACT8sC,EAASj0D,QAAQW,UAAS,KAI5BszD,EAASllB,YAAcrzC,EAAAuE,KAAKc,KACtB,IAAI2D,MAAM,mBAGlB,IAAK,cAOH,GANI/c,GACFssE,EAASluE,MACP0V,EAAAnY,eAAe2lD,sBACfgD,EAAWroD,MAAOnC,EAAUsgB,cAGT,GAAnBolB,EAASriC,OAMX,OALAmvE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAElD4vE,EAASllB,YAAcrzC,EAAAuE,KAAKc,KACrB5hB,EAAOksC,oBAqBhB,MAnBAxnC,EAAOowE,EAASthB,kBACdxrB,EAAS,GACT8sC,EAASj0D,QAAQW,UAAS,KAI5B7c,EAAOmwE,EAASthB,kBACdxrB,EAAS,GACTzrB,EAAAuE,KAAKQ,IAAG,KAIV1c,EAAOkwE,EAASthB,kBACdxrB,EAAS,GACT8sC,EAASj0D,QAAQW,UAAS,KAI5BszD,EAASllB,YAAcrzC,EAAAuE,KAAKc,KACtB,IAAI2D,MAAM,mBAMlB,IAAK,aACH,OAAM/c,GAAyC,GAAxBA,EAAc7C,OAQd,GAAnBqiC,EAASriC,QACXmvE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAElD4vE,EAASllB,YAAcpnD,EAAc,GAC9BxI,EAAOksC,sBAEhBxnC,EAAOowE,EAAS5hB,4BACdlrB,EAAS,GACTx/B,EAAc,GAAE,GAGlBssE,EAASllB,YAAcpnD,EAAc,GACjCssE,EAASllB,YAAY73B,MAAQvvB,EAAc,GAAGuvB,MAChD+8C,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAENzE,EAAOksC,qBAITxnC,IA9BD8D,GAAiBA,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IAChFssE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAgBA,EAAc7C,OAAOT,SAAS,IAAM,KAEtElF,EAAOksC,qBA2BlB,IAAK,SACH,GAAIlE,EAASriC,OAAS,GAAKqiC,EAASriC,OAAS,EAqB3C,OApBI6C,IACEA,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,GAAGszC,iBACtC,GAAxBtzC,EAAc7C,QAChBmvE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,MAIvD8iC,EAASriC,OAAS,EACpBmvE,EAASluE,MACP0V,EAAAnY,eAAeo8D,wCACfzT,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAEzC8iC,EAASriC,OAAS,GAC3BmvE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAG7ClF,EAAOksC,oBAEhB,GAAI1jC,EAAe,CAEjB,GADIA,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,GAAGszC,iBACtC,GAAxBtzC,EAAc7C,OAKhB,OAJAmvE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,KAEhDlF,EAAOksC,oBAEhBxnC,EAAOowE,EAASthB,kBAAkBxrB,EAAS,GAAIx/B,EAAc,GAAE,UAE/D9D,EAAOowE,EAAS5hB,4BAA4BlrB,EAAS,GAAIzrB,EAAAuE,KAAKW,KAAI,GAGhE/Y,EAAOosE,EAASllB,YAIpB,GAHAklB,EAASllB,YAAclnD,EAAKozC,gBAGxBg5B,EAASj0D,QAAQoB,SACnB,OAAIk3C,GAAkB58C,EAAAuE,KAAKc,MACzBkzD,EAASllB,YAAcrzC,EAAAuE,KAAKc,KACrB5hB,EAAOgrC,aAETtmC,EAGT,IAAI6yE,EAAQ5e,EAAamc,EAA6B,GAAnB9sC,EAASriC,OAAcqiC,EAAS,GAAK,KAAM8kB,GAI9E,GAFAgoB,EAASllB,YAAclnD,EAAKozC,gBAExBqd,GAAkB58C,EAAAuE,KAAKc,KAAM,CAC/B,OAAQkzD,EAASllB,YAAYxoD,MAC3B,QACEirC,EAAMryC,EAAO8qC,SACX9qC,EAAO0nC,YAAYjrB,EAAA8b,QAAQC,OACzB9zB,GAEF6yE,GAEF,MAEF,OACA,OACEllC,EAAMryC,EAAO8qC,SACX9qC,EAAO0nC,YAAYjrB,EAAA8b,QAAQE,OACzB/zB,GAEF6yE,GAEF,MAEF,OACA,OACEllC,EAAMryC,EAAO8qC,SACX9qC,EAAO0nC,YACLotC,EAASj0D,QAAQkB,SACbtF,EAAA8b,QAAQE,OACRhc,EAAA8b,QAAQC,OACZ9zB,GAEF6yE,GAEF,MAGF,QACEllC,EAAMryC,EAAO8qC,SACX9qC,EAAO6nC,aAAaprB,EAAA4Y,SAASG,MAC3B9wB,EACA1E,EAAOsnC,UAAU,IAEnBiwC,GAEF,MAEF,QACEllC,EAAMryC,EAAO8qC,SACX9qC,EAAO6nC,aAAaprB,EAAA4Y,SAASI,MAC3B/wB,EACA1E,EAAOwnC,UAAU,IAEnB+vC,GAEF,MAEF,QACEzC,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAEb4tC,EAAMklC,EAIVzC,EAASllB,YAAcrzC,EAAAuE,KAAKc,UAE5B,OAAQkzD,EAASllB,YAAYxoD,MAC3B,OACA,OACA,OACA,OACA,QACM+nB,EAAO2lD,EAAS5iD,gBAAgB/C,KAChC2oC,EAAYgd,EAAS5iD,gBAAgBrC,oBACvCilD,EAASllB,aACRzgC,EAAKsF,YAAY/vB,EAAMowE,EAASllB,cAEnCvd,EAAMryC,EAAO8qC,SACX9qC,EAAOqoC,eAAeyvB,EAAU/qC,MAAOroB,GACvC1E,EAAOmoC,eAAe2vB,EAAU/qC,MAAK,GACrCwqD,GAEF,MAEF,OACA,OACA,QACMzf,EAAYgd,EAAS5iD,gBAAgBrC,oBAAoBtT,EAAAuE,KAAKG,KAAK,GACvEoxB,EAAMryC,EAAO8qC,SACX9qC,EAAOqoC,eAAeyvB,EAAU/qC,MAAOroB,GACvC1E,EAAOmoC,eAAe2vB,EAAU/qC,MAAK,GACrCwqD,GAEF,MAEF,OACA,OACMzf,EAAYgd,EAAS5iD,gBAAgBrC,oBAAoBtT,EAAAuE,KAAKI,KAAK,GACvEmxB,EAAMryC,EAAO8qC,SACX9qC,EAAO0nC,YAAYjrB,EAAA8b,QAAQE,OACzBz4B,EAAOqoC,eAAeyvB,EAAU/qC,MAAOroB,IAEzC6yE,EACAv3E,EAAOmoC,eAAe2vB,EAAU/qC,MAAK,IAEvC,MAEF,OACA,OACM+qC,EAAYgd,EAAS5iD,gBAAgBrC,oBAAoBilD,EAASj0D,QAAQW,WAAW,GACzF6wB,EAAMryC,EAAO8qC,SACX9qC,EAAO0nC,YACLotC,EAASj0D,QAAQkB,SACbtF,EAAA8b,QAAQE,OACRhc,EAAA8b,QAAQC,OACZx4B,EAAOqoC,eAAeyvB,EAAU/qC,MAAOroB,IAEzC6yE,EACAv3E,EAAOmoC,eAAe2vB,EAAU/qC,MAAO+nD,EAASj0D,QAAQ+wC,iBAE1D,MAEF,QACMkG,EAAYgd,EAAS5iD,gBAAgBrC,oBAAoBtT,EAAAuE,KAAKY,KAAK,GACvE2wB,EAAMryC,EAAO8qC,SACX9qC,EAAO6nC,aAAaprB,EAAA4Y,SAASG,MAC3Bx1B,EAAOqoC,eAAeyvB,EAAU/qC,MAAOroB,GACvC1E,EAAOsnC,UAAU,IAEnBiwC,EACAv3E,EAAOmoC,eAAe2vB,EAAU/qC,MAAK,IAEvC,MAEF,QACM+qC,EAAYgd,EAAS5iD,gBAAgBrC,oBAAoBtT,EAAAuE,KAAKa,KAAK,GACvE0wB,EAAMryC,EAAO8qC,SACX9qC,EAAO6nC,aAAaprB,EAAA4Y,SAASI,MAC3Bz1B,EAAOqoC,eAAeyvB,EAAU/qC,MAAOroB,GACvC1E,EAAOwnC,UAAU,IAEnB+vC,EACAv3E,EAAOmoC,eAAe2vB,EAAU/qC,MAAK,IAEvC,MAEF,QACE+nD,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfklC,EAAWroD,OAEb4tC,EAAMklC,EAKZ,OAAOllC,EAET,IAAK,YAOH,OANI7pC,GACFssE,EAASluE,MACP0V,EAAAnY,eAAe2lD,sBACfgD,EAAWroD,MAAOnC,EAAUsgB,cAGT,GAAnBolB,EAASriC,QACXmvE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAE3ClF,EAAOksC,uBAEZ/c,EAAO2lD,EAAS5iD,gBAAgB/C,MAC/B7mB,IAAG,MACR+pC,EAAMyiC,EAAS5hB,4BAA4BlrB,EAAS,GAAImxB,EAAc,GACtEhqC,EAAKsD,MAAK,MACH4f,GAET,IAAK,gBACH,GAAIrK,EAASriC,OAAS,EAcpB,OAbI6C,IACEA,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IACnC,GAAxBA,EAAc7C,QAChBmvE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,MAI3D4vE,EAASluE,MACP0V,EAAAnY,eAAeo8D,wCACfzT,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAE3ClF,EAAOksC,oBAEhB,IAAIziC,OAAU,EACd,GAAIjB,EAAe,CACjB,GAA4B,GAAxBA,EAAc7C,OAMhB,OALI6C,EAAc7C,SAAQmvE,EAASllB,YAAcpnD,EAAc,IAC/DssE,EAASluE,MACP0V,EAAAnY,eAAe0mD,oCACfiC,EAAWroD,MAAO,IAAK+D,EAAc7C,OAAOT,SAAS,KAEhDlF,EAAOksC,oBAEhBziC,EAAajB,EAAc,QAE3BiB,EAAa0vD,EAGf,GADAz0D,EAAOowE,EAAS5hB,4BAA4BlrB,EAAS,GAAIzrB,EAAAuE,KAAKQ,IAAG,GACpC,GAAzBwzD,EAASllB,YAAYxoD,KAKvB,OAJA0tE,EAASluE,MACP0V,EAAAnY,eAAeyjB,wBACfogB,EAAS,GAAGvjC,OAEPzE,EAAOksC,oBAOhB,IALA,IAAIk2B,EAAcp6B,EAASriC,OAAS,EAChC6xE,EAAe,IAAIhxE,MAAqB47D,GACxCqV,EAAiB,IAAIjxE,MAAc47D,EAAc,GACjDhD,EAAmB31D,EAAWgmB,eAC9BioD,EAAmB,IAAIlxE,MAAkB47D,GACpC1hE,EAAI,EAAGA,EAAI0hE,IAAe1hE,EAAG,CACpC82E,EAAa92E,GAAKo0E,EAAS5hB,4BAA4BlrB,EAAS,EAAItnC,GAAI6b,EAAAuE,KAAKG,IAAG,GAChF,IAAI02D,EAAc7C,EAASllB,YAC3B6nB,EAAe/2E,GAAKi3E,EAAYnnD,oBAChCknD,EAAiBh3E,GAAKi3E,EAAYloD,eAEpCgoD,EAAerV,GAAe34D,EAAW+mB,oBACzC,IAAIwb,EAAWyrC,EAAetxE,KAAK,IAC/B2mC,EAAU9sC,EAAO0mC,2BAA2B04B,EAAkBsY,GAKlE,OAJK5qC,IAASA,EAAU9sC,EAAOmmC,gBAAgB6F,EAAUozB,EAAkBsY,IAC3E5C,EAASllB,YAAcnmD,EAGhBzJ,EAAO+rC,mBAAmBrnC,EAAM8yE,EAAcxrC,GAKvD,IAAK,QAKH,OAJA8oC,EAASluE,MACP0V,EAAAnY,eAAeyzE,eACf9qB,EAAWroD,OAAQujC,EAASriC,OAASqiC,EAAS,GAAK8kB,GAAYroD,MAAMS,YAEhElF,EAAOksC,oBAEhB,IAAK,UAKH,OAJA4oC,EAASnuE,QACP2V,EAAAnY,eAAeyzE,eACf9qB,EAAWroD,OAAQujC,EAASriC,OAASqiC,EAAS,GAAK8kB,GAAYroD,MAAMS,YAEhElF,EAAOgrC,YAEhB,IAAK,OAKH,OAJA8pC,EAASpuE,KACP4V,EAAAnY,eAAeyzE,eACf9qB,EAAWroD,OAAQujC,EAASriC,OAASqiC,EAAS,GAAK8kB,GAAYroD,MAAMS,YAEhElF,EAAOgrC,YAKhB,IAAK,KAOH,OANIxiC,GACFssE,EAASluE,MACP0V,EAAAnY,eAAe2lD,sBACfgD,EAAWroD,MAAOnC,EAAUsgB,cAGT,GAAnBolB,EAASriC,QACXmvE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAElD4vE,EAASllB,YAAcrzC,EAAAuE,KAAKC,GACrB/gB,EAAOksC,qBAET4oC,EAASthB,kBACdxrB,EAAS,GACTzrB,EAAAuE,KAAKC,GAAE,KAKX,IAAK,MAOH,OANIvY,GACFssE,EAASluE,MACP0V,EAAAnY,eAAe2lD,sBACfgD,EAAWroD,MAAOnC,EAAUsgB,cAGT,GAAnBolB,EAASriC,QACXmvE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAElD4vE,EAASllB,YAAcrzC,EAAAuE,KAAKE,IACrBhhB,EAAOksC,qBAET4oC,EAASthB,kBACdxrB,EAAS,GACTzrB,EAAAuE,KAAKE,IAAG,KAKZ,IAAK,MAOH,OANIxY,GACFssE,EAASluE,MACP0V,EAAAnY,eAAe2lD,sBACfgD,EAAWroD,MAAOnC,EAAUsgB,cAGT,GAAnBolB,EAASriC,QACXmvE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAElD4vE,EAASllB,YAAcrzC,EAAAuE,KAAKG,IACrBjhB,EAAOksC,qBAET4oC,EAASthB,kBACdxrB,EAAS,GACTzrB,EAAAuE,KAAKG,IAAG,KAKZ,IAAK,MAOH,OANIzY,GACFssE,EAASluE,MACP0V,EAAAnY,eAAe2lD,sBACfgD,EAAWroD,MAAOnC,EAAUsgB,cAGT,GAAnBolB,EAASriC,QACXmvE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAElD4vE,EAASllB,YAAcrzC,EAAAuE,KAAKI,IACrBlhB,EAAOksC,qBAET4oC,EAASthB,kBACdxrB,EAAS,GACTzrB,EAAAuE,KAAKI,IAAG,KAKZ,IAAK,QAOH,OANI1Y,GACFssE,EAASluE,MACP0V,EAAAnY,eAAe2lD,sBACfgD,EAAWroD,MAAOnC,EAAUsgB,cAGT,GAAnBolB,EAASriC,QACXmvE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAElD4vE,EAASllB,YAAcklB,EAASj0D,QAAQkB,SACpCxF,EAAAuE,KAAKi7B,QACLx/B,EAAAuE,KAAKk7B,QACFh8C,EAAOksC,qBAET4oC,EAASthB,kBACdxrB,EAAS,GACT8sC,EAASj0D,QAAQkB,SACbxF,EAAAuE,KAAKi7B,QACLx/B,EAAAuE,KAAKk7B,QAAO,KAKpB,IAAK,KAOH,OANIxzC,GACFssE,EAASluE,MACP0V,EAAAnY,eAAe2lD,sBACfgD,EAAWroD,MAAOnC,EAAUsgB,cAGT,GAAnBolB,EAASriC,QACXmvE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAElD4vE,EAASllB,YAAcrzC,EAAAuE,KAAKM,GACrBphB,EAAOksC,qBAET4oC,EAASthB,kBACdxrB,EAAS,GACTzrB,EAAAuE,KAAKM,GAAE,KAKX,IAAK,MAOH,OANI5Y,GACFssE,EAASluE,MACP0V,EAAAnY,eAAe2lD,sBACfgD,EAAWroD,MAAOnC,EAAUsgB,cAGT,GAAnBolB,EAASriC,QACXmvE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAElD4vE,EAASllB,YAAcrzC,EAAAuE,KAAKO,IACrBrhB,EAAOksC,qBAET4oC,EAASthB,kBACdxrB,EAAS,GACTzrB,EAAAuE,KAAKO,IAAG,KAKZ,IAAK,MAOH,OANI7Y,GACFssE,EAASluE,MACP0V,EAAAnY,eAAe2lD,sBACfgD,EAAWroD,MAAOnC,EAAUsgB,cAGT,GAAnBolB,EAASriC,QACXmvE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAElD4vE,EAASllB,YAAcrzC,EAAAuE,KAAKQ,IACrBthB,EAAOksC,qBAET4oC,EAASthB,kBACdxrB,EAAS,GACTzrB,EAAAuE,KAAKQ,IAAG,KAKZ,IAAK,MAOH,OANI9Y,GACFssE,EAASluE,MACP0V,EAAAnY,eAAe2lD,sBACfgD,EAAWroD,MAAOnC,EAAUsgB,cAGT,GAAnBolB,EAASriC,QACXmvE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAElD4vE,EAASllB,YAAcrzC,EAAAuE,KAAKS,IACrBvhB,EAAOksC,qBAET4oC,EAASthB,kBACdxrB,EAAS,GACTzrB,EAAAuE,KAAKS,IAAG,KAKZ,IAAK,QAOH,OANI/Y,GACFssE,EAASluE,MACP0V,EAAAnY,eAAe2lD,sBACfgD,EAAWroD,MAAOnC,EAAUsgB,cAGT,GAAnBolB,EAASriC,QACXmvE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAElD4vE,EAASllB,YAAcklB,EAASj0D,QAAQW,UACjCxhB,EAAOksC,qBAET4oC,EAASthB,kBACdxrB,EAAS,GACT8sC,EAASj0D,QAAQW,UAAS,KAK9B,IAAK,OAOH,OANIhZ,GACFssE,EAASluE,MACP0V,EAAAnY,eAAe2lD,sBACfgD,EAAWroD,MAAOnC,EAAUsgB,cAGT,GAAnBolB,EAASriC,QACXmvE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAElD4vE,EAASllB,YAAcrzC,EAAAuE,KAAKW,KACrBzhB,EAAOksC,qBAET4oC,EAASthB,kBACdxrB,EAAS,GACTzrB,EAAAuE,KAAKW,KAAI,KAKb,IAAK,MAOH,OANIjZ,GACFssE,EAASluE,MACP0V,EAAAnY,eAAe2lD,sBACfgD,EAAWroD,MAAOnC,EAAUsgB,cAGT,GAAnBolB,EAASriC,QACXmvE,EAASluE,MACP0V,EAAAnY,eAAe0lB,+BACfijC,EAAWroD,MAAO,IAAKujC,EAASriC,OAAOT,SAAS,KAElD4vE,EAASllB,YAAcrzC,EAAAuE,KAAKY,IACrB1hB,EAAOksC,qBAET4oC,E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KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCE,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAG1D,SAASH,EAAmBt0E,EAAW+uB,GACrC,GAAI/uB,EAAO+uB,EAAI,GAAI,OAAO,EAM1B,IAJA,IAEI4lD,EAFAxN,EAAK,EACLC,EAAKr4C,EAAI3tB,OAGN+lE,EAAK,EAAIC,GAAI,CAGlB,GAFAuN,EAAMxN,GAAMC,EAAKD,GAAM,EAEnBp4C,EADJ4lD,GAAOA,EAAM,IACG30E,GAAQA,GAAQ+uB,EAAI4lD,EAAM,GACxC,OAAO,EAEL30E,EAAO+uB,EAAI4lD,GACbvN,EAAKuN,EAELxN,EAAKwN,EAAM,EAGf,OAAO,kFCtWT,IAAMC,EAAS,GAMf,SAAgB/nE,EAAcF,GAK5B,IAJA,IAiBI45C,EAjBAxxC,EAAM,EACN5T,EAAMwL,EAAKvL,OAGR2T,EAAM,EAAI5T,GACK,IAApBwL,EAAKnL,WAAWuT,IAChBpI,EAAKnL,WAAWuT,EAAM,IAAM6/D,GAE5B7/D,GAAO,EAUT,KAPIA,EAAM,GAAK5T,EAAMwL,EAAKvL,UACxBuL,EAAOA,EAAKjL,UAAUqT,EAAK5T,GAC3BA,GAAO4T,EACPA,EAAM,GAIDA,EAAM,EAAI5T,GAAK,CAIpB,GAHAolD,GAAQ,EAIN55C,EAAKnL,WAAWuT,IAAQ6/D,GACA,IAAxBjoE,EAAKnL,WAAWuT,EAAM,GACtB,CAGA,IADAwxC,EAAQxxC,EAAM,GAAK5T,IAEjB4T,EAAM,EAAI5T,GACVwL,EAAKnL,WAAWuT,EAAM,IAAM6/D,EAC5B,CACAjoE,EAAO45C,EACH55C,EAAKjL,UAAU,EAAGqT,GAClBpI,EAAKjL,UAAU,EAAGqT,GAAOpI,EAAKjL,UAAUqT,EAAM,GAClD5T,GAAO,EACP,SAKF,IADAolD,EAAQxxC,EAAM,GAAK5T,IACkB,IAAxBwL,EAAKnL,WAAWuT,EAAM,IACjCA,EAAM,EAAI5T,GACc,IAAxBwL,EAAKnL,WAAWuT,EAAM,IACtBpI,EAAKnL,WAAWuT,EAAM,IAAM6/D,EAC5B,CAGA,IADA,IAAIC,EAAO9/D,IACF8/D,GAAQ,GACf,GAAIloE,EAAKnL,WAAWqzE,IAASD,EAAW,CAClC7/D,EAAM8/D,GAAQ,GACS,IAAzBloE,EAAKnL,WAAWqzE,EAAO,IACE,IAAzBloE,EAAKnL,WAAWqzE,EAAO,KAEvBloE,EAAO45C,EACH55C,EAAKjL,UAAU,EAAGmzE,GAClBloE,EAAKjL,UAAU,EAAGmzE,GAAQloE,EAAKjL,UAAUqT,EAAM,GACnD5T,GAAO4T,EAAM,EAAI8/D,EACjB9/D,EAAM8/D,EAAO,GAEf,MAKJ,GAAIA,EAAO,GAAK9/D,EAAM,IACT,GAAPA,GACgB,IAAlBpI,EAAKnL,WAAW,IACE,IAAlBmL,EAAKnL,WAAW,IAChB,CAEAL,GADAwL,EAAOA,EAAKjL,UAAUqT,EAAM,IACjB3T,OACX,WAKR2T,IAEF,OAAO5T,EAAM,EAAIwL,EAAO,IAc1B,SAAgBmoE,EAAQj0E,GAEtB,IADA,IAAIkU,EAAMlU,EAAeO,SAChB2T,EAAM,GACb,GAAIlU,EAAeW,WAAWuT,IAAQ6/D,EACpC,OAAO/zE,EAAea,UAAU,EAAGqT,GAGvC,MAAO,IArGTvZ,EAAAqR,gBAoFArR,EAAAuR,YAAA,SAA4BlM,EAAwBk0E,GAClD,OAAIl0E,EAAeiM,WAAW,QACrBjM,EAEFgM,EACLioE,EAAQC,GAAUx+B,OAAOmM,aAAakyB,GAAa/zE,IAKvDrF,EAAAs5E,yFCxGA,IAAME,EAAW,KACXC,EAAW,OACXC,EAAW,WAGjB15E,EAAA25E,OAAA,SAAuB1zE,EAAcmqC,GACnC,KAAOA,GAAS,GACdnqC,EAAGE,KAAKuzE,GACRtpC,GAAS,EAEPA,GAAS,IACXnqC,EAAGE,KAAKszE,GACRrpC,GAAS,GAEPA,GACFnqC,EAAGE,KAAKqzE,kCCQZ,SAAgBI,EAAQz0C,EAAoBC,GAC1C,OAAOD,EAAOC,GACPD,EAAOC,EAAS,IAAM,EACtBD,EAAOC,EAAS,IAAM,GACtBD,EAAOC,EAAS,IAAM,GAI/B,SAAgBkgC,EAAS1jE,EAAYujC,EAAoBC,GACvDD,EAAOC,GAAcxjC,EACrBujC,EAAOC,EAAS,GAAKxjC,IAAU,EAC/BujC,EAAOC,EAAS,GAAKxjC,IAAU,GAC/BujC,EAAOC,EAAS,GAAKxjC,IAAU,GAIjC,SAAgBi4E,EAAQ10C,EAAoBC,GAC1C,IAAIumC,EAAKiO,EAAQz0C,EAAQC,GACrBwmC,EAAKgO,EAAQz0C,EAAQC,EAAS,GAClC,OAAOrjB,QAAQ4pD,EAAIC,oDAzCrB5rE,EAAA85E,OAAA,SAAuB30C,EAAoBC,GACzC,OAAOD,EAAOC,IAIhBplC,EAAAulE,QAAA,SAAwB3jE,EAAYujC,EAAoBC,GACtDD,EAAOC,GAAUxjC,GAInB5B,EAAA+5E,QAAA,SAAwB50C,EAAoBC,GAC1C,OAAOD,EAAOC,GACPD,EAAOC,EAAS,IAAM,GAI/BplC,EAAAwlE,SAAA,SAAyB5jE,EAAYujC,EAAoBC,GACvDD,EAAOC,GAAcxjC,EACrBujC,EAAOC,EAAS,GAAKxjC,IAAU,GAIjC5B,EAAA45E,UAQA55E,EAAAslE,WAQAtlE,EAAA65E,UAOA75E,EAAAqlE,SAAA,SAAyBzjE,EAAYujC,EAAoBC,GACvDkgC,EAASj2B,QAAQztC,GAAQujC,EAAQC,GACjCkgC,EAASh2B,SAAS1tC,GAAQujC,EAAQC,EAAS,IAI7CplC,EAAAg6E,QAAA,SAAwB70C,EAAoBC,GAC1C,OAAOimC,WAAWuO,EAAQz0C,EAAQC,KAIpCplC,EAAAylE,SAAA,SAAyB7jE,EAAYujC,EAAoBC,GACvDkgC,EAAS8F,WAAWxpE,GAAQujC,EAAQC,IAItCplC,EAAAi6E,QAAA,SAAwB90C,EAAoBC,GAC1C,OAAOmmC,WAAWsO,EAAQ10C,EAAQC,KAIpCplC,EAAA0lE,SAAA,SAAyB9jE,EAAYujC,EAAoBC,GACvD,IAAI80C,EAAW5O,WAAW1pE,GAC1B0jE,EAASj2B,QAAQ6qC,GAAW/0C,EAAQC,GACpCkgC,EAASh2B,SAAS4qC,GAAW/0C,EAAQC,EAAS,mFCnEhD,IAAA5K,EAAA/5B,EAAA,IAOA05E,EAAA15E,EAAA,IAIA25E,EAAA35E,EAAA,IAKA8b,EAAA9b,EAAA,GAyCoCT,EAAAq6E,iBAtClC99D,EAAAlW,wBAOF,IAAAi0E,EAAA75E,EAAA,IASAT,EAAAu6E,UAAA,SAA0B70E,EAAcyL,EAAc6W,EACpDwyD,GAIA,YALoD,IAAAxyD,OAAA,QACpD,IAAAwyD,MAAA,MAEKA,IAAQA,EAAS,IAAIF,EAAAG,QAC1BD,EAAOD,UAAU70E,EAAMyL,EAAM6W,GACtBwyD,GAITx6E,EAAA06E,SAAA,SAAyBF,GACvB,OAAOA,EAAOE,YAIhB16E,EAAA26E,eAAA,SAA+BH,GAC7B,IAAIruD,EAAUquD,EAAOruD,QACrB,OAAOA,EAAQ9M,kBAAoB8M,EAAQ3lB,YAAYZ,OACnDumB,EAAQ3lB,YAAY2lB,EAAQ9M,qBAC5B,MAONrf,EAAA46E,OAAA,SAAuBn2E,GACrB,OAAOA,EAAQd,UAAY4Y,EAAAjZ,mBAAmBM,MAIhD5D,EAAA66E,UAAA,SAA0Bp2E,GACxB,OAAOA,EAAQd,UAAY4Y,EAAAjZ,mBAAmBO,SAIhD7D,EAAA86E,QAAA,SAAwBr2E,GACtB,OAAOA,EAAQd,UAAY4Y,EAAAjZ,mBAAmBQ,OAIhD9D,EAAA+6E,cAAA,WACE,OAAO,IAAIvgD,EAAAs0B,SAIb9uD,EAAAg7E,UAAA,SAA0Bl6D,EAAkB2Q,GAC1C3Q,EAAQ2Q,OAASA,GAInBzxB,EAAAi7E,iBAAA,SAAiCn6D,EAAkBmB,GACjDnB,EAAQmB,cAAgBA,GAI1BjiB,EAAAk7E,YAAA,SAA4Bp6D,EAAkBoB,GAC5CpB,EAAQoB,SAAWA,GAIrBliB,EAAAm7E,gBAAA,SAAgCr6D,EAAkBkuC,GAChDluC,EAAQkuC,aAAeA,GAIzBhvD,EAAAo7E,eAAA,SAA+Bt6D,EAAkBmuC,GAC/CnuC,EAAQmuC,YAAcA,GAIxBjvD,EAAAq7E,aAAA,SAA6Bv6D,EAAkBqP,GAC7CrP,EAAQqP,UAAYA,GAItBnwB,EAAAs7E,cAAA,SAA8Bx6D,EAAkBqB,GAC9CrB,EAAQqB,WAAaA,GAIvBniB,EAAAu7E,eAAA,SAA+Bz6D,EAAkB5f,EAAcyT,GAC7D,IAAIyQ,EAAgBtE,EAAQsE,cACvBA,IAAetE,EAAQsE,cAAgBA,EAAgB,IAAIjG,KAChEiG,EAAc7c,IAAIrH,EAAMyT,IAIb3U,EAAAw7E,uBAAsB,EAEtBx7E,EAAAy7E,uBAAsB,EAGnCz7E,EAAA07E,cAAA,SAA8B56D,EAAkBquC,GAC9CruC,EAAQouC,UAAYC,GAItBnvD,EAAA27E,sBAAA,SAAsC76D,EAAkB86D,EAAoBC,GAC1E/6D,EAAQsB,kBAAoBw5D,EAC5B96D,EAAQuB,gBAAkBw5D,GAI5B77E,EAAA87E,cAAA,SAA8BtB,GAC5B,OAAOA,EAAOlxB,UAIhBtpD,EAAA+7E,eAAA,SAA+B5vD,EAAkBrL,GAC/C,YAD+C,IAAAA,MAAA,MACxC,IAAI0Z,EAAAi1B,SAAStjC,EAASrL,GAAS2vC,WAIxCzwD,EAAAg8E,gBAAA,SAAgC/7E,GAC9B,IAAIg8E,EAAa,IAAI9B,EAAA+B,WAErB,OADAD,EAAWE,UAAUl8E,GACdg8E,EAAW3yB,UAIpBtpD,EAAAo8E,SAAA,SAAyBjwD,GACvB,OAAOiuD,EAAAiC,WAAWC,MAAMnwD,IAI1BnsB,EAAAu8E,SAAA,SAAyBpwD,GACvB,OAAOiuD,EAAAoC,WAAWF,MAAMnwD,IAI1B,IAAAplB,EAAAtG,EAAA,GAAST,EAAAoD,eAAA2D,EAAA3D,8FCrKT,IAAAsZ,EAAAjc,EAAA,GAwDAy7E,EAAA,WAWE,SAAAA,IAHA57E,KAAAoF,QACApF,KAAAm8E,WAAkB,EAoyBpB,OA3yBSP,EAAAC,UAAP,SAAiBl8E,GACf,IAAIg8E,EAAa,IAAIC,EAErB,OADAD,EAAWE,UAAUl8E,GACdg8E,EAAW3yB,UASpB4yB,EAAA35E,UAAA45E,UAAA,SAAUl8E,GACR,MAAM,IAAIulB,MAAM,oBAGlB02D,EAAA35E,UAAAm6E,kBAAA,SAAkB3sC,GAChB,IAAI7uC,EAAOwb,EAAA47B,gBAAgBvI,IAAS,IAAMzvC,KAAKm8E,WAAWt3E,SAAS,IAC/DmO,EAAOoJ,EAAA27B,gBAAgBtI,GAC3BzvC,KAAK6F,KAAK,aACV7F,KAAK6F,KAAKjF,GACVZ,KAAK6F,KAAK,KACT,IAAK,IAAIxF,EAAW,EAAGsK,EAAWyR,EAAA87B,sBAAsBzI,GAAOpvC,EAAIsK,IAAKtK,EACnEA,EAAI,GAAGL,KAAK6F,KAAK,MACrB7F,KAAK6F,KAAK,KACV7F,KAAK6F,KAAKxF,EAAEwE,SAAS,KACrB7E,KAAK6F,KAAK,MACV7F,KAAK6F,KAAKw2E,EAAiBjgE,EAAAg8B,qBAAqB3I,EAAMpvC,KAExDL,KAAK6F,KAAK,OACV7F,KAAK6F,KAAKw2E,EAAiBjgE,EAAAk8B,sBAAsB7I,KACjDzvC,KAAK6F,KAAK,KACNuW,EAAAiY,gBAAgBrhB,IAASoJ,EAAAkY,aAAa4E,OACxCl5B,KAAK6F,KAAK,OAEZ7F,KAAKs8E,oBAAoBtpE,GACrBoJ,EAAAiY,gBAAgBrhB,IAASoJ,EAAAkY,aAAa4E,OACxCl5B,KAAK6F,KAAK,WAEV7F,KAAKm8E,YAGTP,EAAA35E,UAAAq6E,oBAAA,SAAoBnyE,GAClB,IAGIoyE,EACAC,EACAn8E,EAAUsK,EALV+kB,EAAKtT,EAAAiY,gBAAgBlqB,GACrB9B,EAAO+T,EAAAoc,kBAAkBruB,GAM7B,OAAQulB,GACN,KAAKtT,EAAAkY,aAAa4E,MAOhB,IANqC,OAAhCsjD,EAASpgE,EAAA+c,aAAahvB,MACzBnK,KAAK6F,KAAK22E,GACVx8E,KAAK6F,KAAK,OAEZ7F,KAAK6F,KAAK,OACV8E,EAAIyR,EAAAgd,mBAAmBjvB,GAClB9J,EAAI,EAAGA,EAAIsK,IAAKtK,EACnBL,KAAKs8E,oBAAoBlgE,EAAAkd,cAAcnvB,EAAM9J,IAG/C,YADAL,KAAK6F,KAAK,OAGZ,KAAKuW,EAAAkY,aAAaiF,GAiBhB,YAhBQ,GAAJlxB,GACFrI,KAAK6F,KAAK,QACV7F,KAAKs8E,oBAAoBlgE,EAAA85B,eAAe/rC,IACxCnK,KAAK6F,KAAK,MACV7F,KAAKs8E,oBAAoBlgE,EAAAod,UAAUrvB,KAC/BoyE,EAASngE,EAAAqd,WAAWtvB,MACtBnK,KAAK6F,KAAK,UACV7F,KAAKs8E,oBAAoBC,MAG3Bv8E,KAAKs8E,oBAAoBlgE,EAAA85B,eAAe/rC,IACxCnK,KAAK6F,KAAK,OACV7F,KAAKs8E,oBAAoBlgE,EAAAod,UAAUrvB,IACnCnK,KAAK6F,KAAK,OACV7F,KAAKs8E,oBAAoBlgE,EAAAqd,WAAWtvB,MAIxC,KAAKiS,EAAAkY,aAAamoD,KACoB,OAA/BD,EAASpgE,EAAAk6B,YAAYnsC,MACxBnK,KAAK6F,KAAK22E,GACVx8E,KAAK6F,KAAK,OAEZ7F,KAAK6F,KAAK,OACV7F,KAAKs8E,oBAAoBlgE,EAAAo6B,YAAYrsC,IACrCnK,KAAK6F,KAAK,gBAEZ,KAAKuW,EAAAkY,aAAaumB,MAahB,OAZI0hC,EAASngE,EAAAw6B,kBAAkBzsC,MAC7BnK,KAAK6F,KAAK,QACV7F,KAAKs8E,oBAAoBC,GACzBv8E,KAAK6F,KAAK,YAEyB,OAAhC22E,EAASpgE,EAAAs6B,aAAavsC,KACzBnK,KAAK6F,KAAK,UACV7F,KAAK6F,KAAK22E,GACVx8E,KAAK6F,KAAK,QAEV7F,KAAK6F,KAAK,aAId,KAAKuW,EAAAkY,aAAaooD,OAClB,KAAKtgE,EAAAkY,aAAauF,KAClB,KAAKzd,EAAAkY,aAAaqoD,WAClB,KAAKvgE,EAAAkY,aAAasoD,aAChB,MAAM,IAAI13D,MAAM,mBAElB,KAAK9I,EAAAkY,aAAaC,SAGhB,OAFAv0B,KAAK6F,KAAK,UACV7F,KAAK6F,KAAKuW,EAAAoY,iBAAiBrqB,GAAMtF,SAAS,KAG5C,KAAKuX,EAAAkY,aAAaI,SAKhB,OAJA10B,KAAK6F,KAAK,KACV7F,KAAK6F,KAAKuW,EAAA44B,iBAAiB7qC,GAAMtF,SAAS,KAC1C7E,KAAK6F,KAAK,YACV7F,KAAKs8E,oBAAoBlgE,EAAAwY,iBAAiBzqB,IAG5C,KAAKiS,EAAAkY,aAAaO,UAClB,KAAKzY,EAAAkY,aAAauoD,UAChB,MAAM,IAAI33D,MAAM,mBAElB,KAAK9I,EAAAkY,aAAawE,KAQhB,OAPA94B,KAAK6F,KAAK,SACV7F,KAAK6F,KAAKw2E,EAAiBh0E,IAC3BrI,KAAK6F,KAAK,MACV7F,KAAK6F,KAAKuW,EAAAi5B,cAAclrC,GAAMtF,SAAS,KACvC7E,KAAK6F,KAAK,OACV7F,KAAKs8E,oBAAoBlgE,EAAAk5B,WAAWnrC,SACpCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAAkY,aAAawoD,MAUhB,OATA98E,KAAK6F,KAAK,UACV7F,KAAK6F,KAAKw2E,EAAiBh0E,IAC3BrI,KAAK6F,KAAK,MACV7F,KAAK6F,KAAKuW,EAAAq5B,eAAetrC,GAAMtF,SAAS,KACxC7E,KAAK6F,KAAK,OACV7F,KAAKs8E,oBAAoBlgE,EAAAu5B,YAAYxrC,IACrCnK,KAAK6F,KAAK,MACV7F,KAAKs8E,oBAAoBlgE,EAAAy5B,cAAc1rC,SACvCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAAkY,aAAa6C,MAChB,OAAQ9uB,GACN,OAEE,YADArI,KAAK6F,KAAKuW,EAAAgb,iBAAiBjtB,GAAMtF,SAAS,KAG5C,OASE,YARA7E,KAAK6F,KACH4nE,cACEhsD,QACErF,EAAAqc,oBAAoBtuB,GACpBiS,EAAA24B,qBAAqB5qC,MAM7B,OAEE,YADAnK,KAAK6F,KAAKuW,EAAAsc,iBAAiBvuB,GAAMtF,SAAS,KAG5C,OAEE,YADA7E,KAAK6F,KAAKuW,EAAAuc,iBAAiBxuB,GAAMtF,SAAS,KAI9C,MAEF,KAAKuX,EAAAkY,aAAa0D,MAChB,OAAQ5b,EAAA6b,WAAW9tB,IACjB,KAAKiS,EAAA8b,QAAQG,OAIX,OAHAr4B,KAAK6F,KAAK,aACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,SACvCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA8b,QAAQI,OAIX,OAHAt4B,KAAK6F,KAAK,aACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,SACvCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA8b,QAAQK,UAIX,OAHAv4B,KAAK6F,KAAK,gBACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,SACvCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA8b,QAAQ2uC,OACb,KAAKzqD,EAAA8b,QAAQ4uC,OAGX,OAFA9mE,KAAK6F,KAAK,UACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,IAGzC,KAAKiS,EAAA8b,QAAQk9C,OAIX,OAHAp1E,KAAK6F,KAAK,aACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,SACvCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA8b,QAAQ09C,QAIX,OAHA51E,KAAK6F,KAAK,cACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,SACvCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA8b,QAAQ49C,SAIX,OAHA91E,KAAK6F,KAAK,eACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,SACvCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA8b,QAAQw+C,SAIX,OAHA12E,KAAK6F,KAAK,eACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,SACvCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA8b,QAAQg+C,WAIX,OAHAl2E,KAAK6F,KAAK,iBACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,SACvCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA8b,QAAQs+C,QAIX,OAHAx2E,KAAK6F,KAAK,cACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,SACvCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA8b,QAAQC,OACb,KAAK/b,EAAA8b,QAAQE,OAGX,OAFAp4B,KAAK6F,KAAK,UACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,IAGzC,KAAKiS,EAAA8b,QAAQ28C,OAIX,OAHA70E,KAAK6F,KAAK,aACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,SACvCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA8b,QAAQ48C,OAIX,OAHA90E,KAAK6F,KAAK,aACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,SACvCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA8b,QAAQ68C,UAIX,OAHA/0E,KAAK6F,KAAK,gBACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,SACvCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA8b,QAAQm9C,OAIX,OAHAr1E,KAAK6F,KAAK,aACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,SACvCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA8b,QAAQ29C,QAIX,OAHA71E,KAAK6F,KAAK,cACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,SACvCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA8b,QAAQ69C,SAIX,OAHA/1E,KAAK6F,KAAK,eACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,SACvCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA8b,QAAQy+C,SAIX,OAHA32E,KAAK6F,KAAK,eACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,SACvCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA8b,QAAQi+C,WAIX,OAHAn2E,KAAK6F,KAAK,iBACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,SACvCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA8b,QAAQu+C,QAIX,OAHAz2E,KAAK6F,KAAK,cACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,SACvCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA8b,QAAQsjC,UAGX,OAFAx7D,KAAK6F,KAAK,cACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,IAGzC,KAAKiS,EAAA8b,QAAQujC,UAGX,OAFAz7D,KAAK6F,KAAK,mBACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,IAGzC,KAAKiS,EAAA8b,QAAQqjC,QAKb,KAAKn/C,EAAA8b,QAAQsiC,cAGX,OAFAx6D,KAAK6F,KAAK,cACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,IAGzC,KAAKiS,EAAA8b,QAAQqiC,cAGX,OAFAv6D,KAAK6F,KAAK,cACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,IAGzC,KAAKiS,EAAA8b,QAAQwiC,cAGX,OAFA16D,KAAK6F,KAAK,mBACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,IAGzC,KAAKiS,EAAA8b,QAAQuiC,cAGX,OAFAz6D,KAAK6F,KAAK,mBACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,IAGzC,KAAKiS,EAAA8b,QAAQ0iC,cAGX,OAFA56D,KAAK6F,KAAK,cACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,IAGzC,KAAKiS,EAAA8b,QAAQyiC,cAGX,OAFA36D,KAAK6F,KAAK,cACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,IAGzC,KAAKiS,EAAA8b,QAAQ4iC,cAGX,OAFA96D,KAAK6F,KAAK,mBACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,IAGzC,KAAKiS,EAAA8b,QAAQ2iC,cAGX,OAFA76D,KAAK6F,KAAK,mBACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,IAGzC,KAAKiS,EAAA8b,QAAQk+C,eAIX,OAHAp2E,KAAK6F,KAAK,yBACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,SACvCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA8b,QAAQm+C,eAIX,OAHAr2E,KAAK6F,KAAK,yBACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,SACvCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA8b,QAAQ+iC,gBAGX,OAFAj7D,KAAK6F,KAAK,cACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,IAGzC,KAAKiS,EAAA8b,QAAQmjC,gBAGX,OAFAr7D,KAAK6F,KAAK,cACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,IAGzC,KAAKiS,EAAA8b,QAAQgjC,gBAGX,OAFAl7D,KAAK6F,KAAK,mBACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,IAGzC,KAAKiS,EAAA8b,QAAQojC,gBAGX,OAFAt7D,KAAK6F,KAAK,mBACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,IAGzC,KAAKiS,EAAA8b,QAAQ6iC,gBAGX,OAFA/6D,KAAK6F,KAAK,cACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,IAGzC,KAAKiS,EAAA8b,QAAQijC,gBAGX,OAFAn7D,KAAK6F,KAAK,cACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,IAGzC,KAAKiS,EAAA8b,QAAQ8iC,gBAGX,OAFAh7D,KAAK6F,KAAK,mBACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,IAGzC,KAAKiS,EAAA8b,QAAQkjC,gBAGX,OAFAp7D,KAAK6F,KAAK,mBACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,IAGzC,KAAKiS,EAAA8b,QAAQmiC,WAGX,OAFAr6D,KAAK6F,KAAK,cACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,IAGzC,KAAKiS,EAAA8b,QAAQoiC,UAGX,OAFAt6D,KAAK6F,KAAK,cACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,IAGzC,KAAKiS,EAAA8b,QAAQo+C,eAIX,OAHAt2E,KAAK6F,KAAK,yBACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,SACvCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA8b,QAAQq+C,eAIX,OAHAv2E,KAAK6F,KAAK,yBACV7F,KAAKs8E,oBAAoBlgE,EAAAg5B,cAAcjrC,SACvCnK,KAAK6F,KAAK,KAId,MAEF,KAAKuW,EAAAkY,aAAaQ,OAChB,OAAQ1Y,EAAA2Y,YAAY5qB,IAClB,KAAKiS,EAAA4Y,SAAS4+B,OACd,KAAKx3C,EAAA4Y,SAASmnC,OACd,KAAK//C,EAAA4Y,SAASonC,OACd,KAAKhgD,EAAA4Y,SAASqnC,OAIZ,OAHAr8D,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,YACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,IAG1C,KAAKiS,EAAA4Y,SAASsnC,OACd,KAAKlgD,EAAA4Y,SAASunC,OACd,KAAKngD,EAAA4Y,SAASwnC,OACd,KAAKpgD,EAAA4Y,SAASynC,OAIZ,OAHAz8D,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,YACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,IAG1C,KAAKiS,EAAA4Y,SAASiC,OACd,KAAK7a,EAAA4Y,SAAS0nC,OACd,KAAKtgD,EAAA4Y,SAAS2nC,OACd,KAAKvgD,EAAA4Y,SAAS4nC,OAIZ,OAHA58D,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,YACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,IAG1C,KAAKiS,EAAA4Y,SAAS8nC,OACd,KAAK1gD,EAAA4Y,SAAS+nC,OACd,KAAK3gD,EAAA4Y,SAASioC,OACd,KAAK7gD,EAAA4Y,SAASkoC,OAIZ,OAHAl9D,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,YACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,IAG1C,KAAKiS,EAAA4Y,SAAS6C,OAMZ,OALA73B,KAAK6F,KAAK,eACV7F,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,YACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,SACxCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA4Y,SAAS8C,OACd,KAAK1b,EAAA4Y,SAASmoC,OAIZ,OAHAn9D,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,YACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,IAG1C,KAAKiS,EAAA4Y,SAAS+C,OAMZ,OALA/3B,KAAK6F,KAAK,eACV7F,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,YACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,SACxCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA4Y,SAASsC,OACd,KAAKlb,EAAA4Y,SAAS0oC,OAIZ,OAHA19D,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,YACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,IAG1C,KAAKiS,EAAA4Y,SAAS2oC,MACd,KAAKvhD,EAAA4Y,SAAS4oC,MAIZ,OAHA59D,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,YACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,IAG1C,KAAKiS,EAAA4Y,SAAS6oC,OACd,KAAKzhD,EAAA4Y,SAAS8oC,OAIZ,OAHA99D,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,YACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,IAG1C,KAAKiS,EAAA4Y,SAASwC,OACd,KAAKpb,EAAA4Y,SAASsoC,OAIZ,OAHAt9D,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,aACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,IAG1C,KAAKiS,EAAA4Y,SAAS4C,OACd,KAAKxb,EAAA4Y,SAASyoC,OAIZ,OAHAz9D,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,cACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,IAG1C,KAAKiS,EAAA4Y,SAAS2C,OACd,KAAKvb,EAAA4Y,SAASwoC,OAIZ,OAHAx9D,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,aACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,IAG1C,KAAKiS,EAAA4Y,SAASggD,QAMZ,OALAh1E,KAAK6F,KAAK,cACV7F,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,MACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,SACxCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA4Y,SAASkgD,QAMZ,OALAl1E,KAAK6F,KAAK,cACV7F,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,MACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,SACxCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA4Y,SAASC,MACd,KAAK7Y,EAAA4Y,SAASE,MACd,KAAK9Y,EAAA4Y,SAASG,MACd,KAAK/Y,EAAA4Y,SAASI,MAIZ,OAHAp1B,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,aACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,IAG1C,KAAKiS,EAAA4Y,SAASK,MACd,KAAKjZ,EAAA4Y,SAASM,MACd,KAAKlZ,EAAA4Y,SAASO,MACd,KAAKnZ,EAAA4Y,SAASQ,MAIZ,OAHAx1B,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,aACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,IAG1C,KAAKiS,EAAA4Y,SAASS,MACd,KAAKrZ,EAAA4Y,SAASW,MACd,KAAKvZ,EAAA4Y,SAASa,MACd,KAAKzZ,EAAA4Y,SAASc,MAIZ,OAHA91B,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,YACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,IAG1C,KAAKiS,EAAA4Y,SAASU,MAKZ,OAJA11B,KAAK6F,KAAK,SACV7F,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,iBACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,IAG1C,KAAKiS,EAAA4Y,SAASe,MACd,KAAK3Z,EAAA4Y,SAASiB,MACd,KAAK7Z,EAAA4Y,SAASmB,MACd,KAAK/Z,EAAA4Y,SAASoB,MAIZ,OAHAp2B,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,aACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,IAG1C,KAAKiS,EAAA4Y,SAASgB,MAKZ,OAJAh2B,KAAK6F,KAAK,SACV7F,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,kBACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,IAG1C,KAAKiS,EAAA4Y,SAASqB,MACd,KAAKja,EAAA4Y,SAASuB,MACd,KAAKna,EAAA4Y,SAASyB,MACd,KAAKra,EAAA4Y,SAAS0B,MAIZ,OAHA12B,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,YACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,IAG1C,KAAKiS,EAAA4Y,SAASsB,MAKZ,OAJAt2B,KAAK6F,KAAK,SACV7F,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,iBACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,IAG1C,KAAKiS,EAAA4Y,SAAS2B,MACd,KAAKva,EAAA4Y,SAAS6B,MACd,KAAKza,EAAA4Y,SAAS+B,MACd,KAAK3a,EAAA4Y,SAASgC,MAIZ,OAHAh3B,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,aACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,IAG1C,KAAKiS,EAAA4Y,SAAS4B,MAKZ,OAJA52B,KAAK6F,KAAK,SACV7F,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,kBACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,IAG1C,KAAKiS,EAAA4Y,SAASgoC,OAKZ,OAJAh9D,KAAK6F,KAAK,SACV7F,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,iBACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,IAG1C,KAAKiS,EAAA4Y,SAASooC,OAKZ,OAJAp9D,KAAK6F,KAAK,SACV7F,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,iBACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,IAG1C,KAAKiS,EAAA4Y,SAASigD,QAMZ,OALAj1E,KAAK6F,KAAK,cACV7F,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,MACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,SACxCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA4Y,SAASmgD,QAMZ,OALAn1E,KAAK6F,KAAK,cACV7F,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,MACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,SACxCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA4Y,SAASY,MAKZ,OAJA51B,KAAK6F,KAAK,SACV7F,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,iBACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,IAG1C,KAAKiS,EAAA4Y,SAASkB,MAKZ,OAJAl2B,KAAK6F,KAAK,SACV7F,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,kBACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,IAG1C,KAAKiS,EAAA4Y,SAASwB,MAKZ,OAJAx2B,KAAK6F,KAAK,SACV7F,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,iBACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,IAG1C,KAAKiS,EAAA4Y,SAAS8B,MAKZ,OAJA92B,KAAK6F,KAAK,SACV7F,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,kBACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,IAG1C,KAAKiS,EAAA4Y,SAASghD,YAMZ,OALAh2E,KAAK6F,KAAK,kBACV7F,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,MACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,SACxCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA4Y,SAAS0gD,OAMZ,OALA11E,KAAK6F,KAAK,aACV7F,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,MACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,SACxCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA4Y,SAASwgD,OAMZ,OALAx1E,KAAK6F,KAAK,aACV7F,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,MACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,SACxCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA4Y,SAASihD,YAMZ,OALAj2E,KAAK6F,KAAK,kBACV7F,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,MACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,SACxCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA4Y,SAAS2gD,OAMZ,OALA31E,KAAK6F,KAAK,aACV7F,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,MACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,SACxCnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAA4Y,SAASygD,OAMZ,OALAz1E,KAAK6F,KAAK,aACV7F,KAAKs8E,oBAAoBlgE,EAAA8a,cAAc/sB,IACvCnK,KAAK6F,KAAK,MACV7F,KAAKs8E,oBAAoBlgE,EAAAib,eAAeltB,SACxCnK,KAAK6F,KAAK,KAId,OAEF,KAAKuW,EAAAkY,aAAaoF,OAUhB,OATA15B,KAAK6F,KAAK,WACV7F,KAAK6F,KAAKw2E,EAAiBh0E,IAC3BrI,KAAK6F,KAAK,MACV7F,KAAKs8E,oBAAoBlgE,EAAAud,cAAcxvB,IACvCnK,KAAK6F,KAAK,MACV7F,KAAKs8E,oBAAoBlgE,EAAAwd,cAAczvB,IACvCnK,KAAK6F,KAAK,MACV7F,KAAKs8E,oBAAoBlgE,EAAA46B,mBAAmB7sC,SAC5CnK,KAAK6F,KAAK,KAGZ,KAAKuW,EAAAkY,aAAayoD,KAGhB,OAFA/8E,KAAKs8E,oBAAoBlgE,EAAA86B,aAAa/sC,SACtCnK,KAAK6F,KAAK,OAGZ,KAAKuW,EAAAkY,aAAasmB,OAQhB,aAPI2hC,EAASngE,EAAAg7B,eAAejtC,KAC1BnK,KAAK6F,KAAK,WACV7F,KAAKs8E,oBAAoBC,GACzBv8E,KAAK6F,KAAK,QAEV7F,KAAK6F,KAAK,cAId,KAAKuW,EAAAkY,aAAa0oD,KAChB,OAAQ5gE,EAAAm7B,UAAUptC,IAChB,KAAKiS,EAAA4nB,OAAOgzC,cAEV,YADAh3E,KAAK6F,KAAK,iBAGZ,KAAKuW,EAAA4nB,OAAOizC,WAIV,OAHAj3E,KAAK6F,KAAK,gBACV7F,KAAKs8E,oBAAoBlgE,EAAAu7B,eAAextC,EAAM,SAC9CnK,KAAK6F,KAAK,KAId,MAEF,KAAKuW,EAAAkY,aAAa4hC,IAEhB,YADAl2D,KAAK6F,KAAK,OAGZ,KAAKuW,EAAAkY,aAAayF,YAEhB,YADA/5B,KAAK6F,KAAK,iBAGZ,KAAKuW,EAAAkY,aAAa2oD,cAClB,KAAK7gE,EAAAkY,aAAa4oD,UAClB,KAAK9gE,EAAAkY,aAAa6oD,WAClB,KAAK/gE,EAAAkY,aAAa8oD,YAEpB,MAAM,IAAIl4D,MAAM,oBAGV02D,EAAA35E,UAAA4D,KAAR,SAAaT,GAEXpF,KAAKoF,KAAKS,KAAKT,IAGjBw2E,EAAA35E,UAAA+mD,OAAA,WACE,IAAIhX,EAAMhyC,KAAKoF,KAAKU,KAAK,IAEzB,OADA9F,KAAKoF,QACE4sC,GAEX4pC,EA7yBA,GA+yBA,SAASS,EAAiBh0E,GACxB,OAAQA,GACN,OAAsB,MAAO,OAC7B,OAAqB,MAAO,MAC5B,OAAqB,MAAO,MAC5B,OAAqB,MAAO,MAC5B,OAAqB,MAAO,MAC5B,OAA6B,MAAM,IAAI6c,MAAM,oBAC7C,OAAsB,MAAM,IAAIA,MAAM,aACtC,QAAS,MAAM,IAAIA,MAAM,oBAxzBhBxlB,EAAAk8E,46BCxDb,IAAAn1E,EAAAtG,EAAA,GAIAg7C,EAAAh7C,EAAA,GAuBA+C,EAAA/C,EAAA,GAKAk9E,EAAA,WAYE,SAAAA,EAAYxxD,EAAkByxD,QAAA,IAAAA,OAAA,GAL9Bt9E,KAAAu9E,QAEAv9E,KAAAgrB,KAAqB,IAAIC,IAIvBjrB,KAAK6rB,QAAUA,EACf7rB,KAAKs9E,eA0ET,OAtEED,EAAAp7E,UAAAu7E,KAAA,uBACE,IAAyB,IAAAhvD,EAAA9K,EAAA1jB,KAAK6rB,QAAQxM,mBAAmB7R,UAAQsW,EAAA0K,EAAA5K,QAAAE,EAAAD,KAAAC,EAAA0K,EAAA5K,OAAE,CAA9D,IAAIitC,EAAY/sC,EAAAxiB,MAEnBtB,KAAKy9E,aAAa5sB,EAAa1kD,2GAGjC,IADA,IAAIoxE,EAAOv9E,KAAKu9E,KACH,EAAOA,EAAKj4E,QAAUtF,KAAKy9E,aAAaF,EAAxC,KAIfF,EAAAp7E,UAAAw7E,aAAA,SAAatxE,GACX,KAAIA,EAAQrE,GAAGrB,EAAApE,YAAYu9C,UAAa5/C,KAAKs9E,kBACzCt9E,KAAKgrB,KAAK7F,IAAIhZ,GAElB,OADAnM,KAAKgrB,KAAKE,IAAI/e,GACNA,EAAQpF,MACd,KAAKo0C,EAAAz8B,YAAY5I,OACX3J,EAAQrE,GAAGrB,EAAApE,YAAY+uD,WAAWpxD,KAAK09E,YAAoBvxE,GAC/D,MAEF,KAAKgvC,EAAAz8B,YAAYqN,KACX5f,EAAQrE,GAAGrB,EAAApE,YAAY+uD,WAAWpxD,KAAK29E,UAAgBxxE,GAC3D,MAEF,KAAKgvC,EAAAz8B,YAAY8G,mBACfxlB,KAAK49E,uBAA0CzxE,GAC/C,MAEF,KAAKgvC,EAAAz8B,YAAYiG,gBACf3kB,KAAK69E,oBAAoC1xE,GACzC,MAEF,KAAKgvC,EAAAz8B,YAAY6R,MACHpkB,EAASrE,GAAGrB,EAAApE,YAAY+uD,WAAWpxD,KAAK89E,WAAkB3xE,GACtE,MAEF,KAAKgvC,EAAAz8B,YAAYmL,SACf,IAAIk0D,EAAiB5xE,EACjBtL,EAASk9E,EAAKj0D,gBACdjpB,GAAQb,KAAK49E,uBAAuB/8E,GACxC,IAAIwwD,EAAS0sB,EAAKh0D,gBACdsnC,GAAQrxD,KAAK49E,uBAAuBvsB,GACxC,MAEF,KAAKlW,EAAAz8B,YAAYoN,WA8ZvB,SAASkyD,EAAkB7xE,mBACzB,IAAI2D,EAAU3D,EAAQ2D,QACtB,GAAIA,MACF,IAAmB,IAAAmV,EAAAvB,EAAA5T,EAAQtC,UAAQm/C,EAAA1nC,EAAArB,QAAA+oC,EAAA9oC,KAAA8oC,EAAA1nC,EAAArB,OAAE,CAAhC,IAAI3J,EAAM0yC,EAAArrD,MACb,OAAQ2Y,EAAOlT,MACb,KAAKo0C,EAAAz8B,YAAY8G,uBACf,IAAqB,IAAA0nC,EAAAxpC,EAAoBzJ,EAAQ4S,UAAUrf,UAAQ2/C,EAAAD,EAAAtpC,QAAAupC,EAAAtpC,KAAAspC,EAAAD,EAAAtpC,OAAE,CAAhE,IAAIwB,EAAQ+nC,EAAA7rD,MACf,GAAI8jB,EAAStd,GAAGrB,EAAApE,YAAY+uD,UAAW,OAAO,oGAEhD,MAEF,KAAKjW,EAAAz8B,YAAYiG,oBACf,IAAqB,IAAA2oC,EAAA5pC,EAAiBzJ,EAAQ4S,UAAUrf,UAAQ+/C,EAAAD,EAAA1pC,QAAA2pC,EAAA1pC,KAAA0pC,EAAAD,EAAA1pC,OAAE,CAA7D,IAAIwB,EAAQmoC,EAAAjsD,MACf,GAAI8jB,EAAStd,GAAGrB,EAAApE,YAAY+uD,UAAW,OAAO,oGAEhD,MAEF,QACE,GAAIn3C,EAAOnS,GAAGrB,EAAApE,YAAY+uD,WAAa4sB,EAAkB/jE,GAAS,OAAO,qGAMjF,OAAO,GArbG+jE,CAAkB7xE,IAAUnM,KAAKi+E,eAAe9xE,GACpD,MAEF,QAAS1I,QAAO,KAIZ45E,EAAAp7E,UAAA27E,uBAAR,SAA+BzxE,eAC7B,IAAqB,IAAAqiB,EAAA9K,EAAAvX,EAAQ0gB,UAAUrf,UAAQsW,EAAA0K,EAAA5K,QAAAE,EAAAD,KAAAC,EAAA0K,EAAA5K,OAAE,CAA5C,IAAIwB,EAAQtB,EAAAxiB,MACX8jB,EAAStd,GAAGrB,EAAApE,YAAY+uD,WAAWpxD,KAAKk+E,cAAwB94D,uGAIhEi4D,EAAAp7E,UAAA47E,oBAAR,SAA4B1xE,eAC1B,IAAqB,IAAAqiB,EAAA9K,EAAAvX,EAAQ0gB,UAAUrf,UAAQsW,EAAA0K,EAAA5K,QAAAE,EAAAD,KAAAC,EAAA0K,EAAA5K,OAAE,CAA5C,IAAIwB,EAAQtB,EAAAxiB,MACX8jB,EAAStd,GAAGrB,EAAApE,YAAY+uD,WAAWpxD,KAAKm+E,WAAkB/4D,uGAWpEi4D,EAxFA,GA2FAtB,EAAA,SAAA/mE,GAWE,SAAA+mE,EAAYlwD,EAAkByxD,QAAA,IAAAA,OAAA,GAA9B,IAAApoE,EACEF,EAAAxU,KAAAR,KAAM6rB,EAASyxD,IAAet9E,YALxBkV,EAAAvP,MACAuP,EAAAkpE,YAAmB,IAkK7B,OA1KgCnpE,EAAA8mE,EAAA/mE,GAGvB+mE,EAAAC,MAAP,SAAanwD,GACX,OAAO,IAAIkwD,EAAWlwD,GAASmwD,SAWjCD,EAAA95E,UAAAy7E,YAAA,SAAYvxE,GACV,IAAIxG,EAAK3F,KAAK2F,GACV4/D,EAAUp5D,EAAQrE,GAAGrB,EAAApE,YAAYiqB,SAMrC,GALAppB,EAAAm2E,OAAO1zE,EAAI3F,KAAKo+E,aACZ7Y,GAAS5/D,EAAGE,KAAK,UACrBF,EAAGE,KAAK7F,KAAKq+E,aAAalyE,EAAQ9D,OAClC1C,EAAGE,KAAK,KACRF,EAAGE,KAAKsG,EAAQgb,YACZo+C,EACF,OAAQp5D,EAAQigB,mBACd,OACEzmB,EAAGE,KAAK,OACRF,EAAGE,KAAK4nE,cAActhE,EAAQkgB,uBAC9B,MAEF,OACE1mB,EAAGE,KAAK,OACRF,EAAGE,KAAKsG,EAAQogB,mBAAmB1nB,YACnC,MAEF,QAASpB,QAAO,GAGpBkC,EAAGE,KAAK,QAGVk2E,EAAA95E,UAAA07E,UAAA,SAAUxxE,eACJxG,EAAK3F,KAAK2F,GACdzC,EAAAm2E,OAAO1zE,EAAI3F,KAAKo+E,eAChBz4E,EAAGE,KAAK,cACRF,EAAGE,KAAKsG,EAAQgb,YAChBxhB,EAAGE,KAAK,QACR,IAAIiK,EAAU3D,EAAQ2D,QACtB,GAAIA,EAAS,KACX,IAA2B,IAAAwuE,EAAA56D,EAAA5T,GAAOyuE,EAAAD,EAAA16D,QAAA26D,EAAA16D,KAAA06D,EAAAD,EAAA16D,OAAE,CAA3B,IAAAE,EAAAC,EAAAw6D,EAAAj9E,MAAA,GAACV,EAAAkjB,EAAA,GACR,IADc7J,EAAA6J,EAAA,IACH/c,MAAQo0C,EAAAz8B,YAAYsN,UAAW,CACxC,IAAIu5C,EAAsBtrD,EAAQnS,GAAGrB,EAAApE,YAAYiqB,SACjDppB,EAAAm2E,OAAO1zE,EAAI3F,KAAKo+E,aACZ7Y,EAAS5/D,EAAGE,KAAK,UAChBF,EAAGE,KAAK,aACbF,EAAGE,KAAK,kBACRF,EAAGE,KAAKjF,GACJ2kE,IACF5/D,EAAGE,KAAK,OACRF,EAAGE,KAAiBoU,EAAQgS,cAAcpnB,SAAS,MAErDc,EAAGE,KAAK,8GAGZ,IAAmB,IAAAof,EAAAvB,EAAA5T,EAAQtC,UAAQm/C,EAAA1nC,EAAArB,QAAA+oC,EAAA9oC,KAAA8oC,EAAA1nC,EAAArB,OAAE,CAAhC,IAAI3J,KAAM0yC,EAAArrD,OACFyF,MAAQo0C,EAAAz8B,YAAYsN,WAAWhsB,KAAKy9E,aAAaxjE,sGAGhE/W,EAAAm2E,OAAO1zE,IAAM3F,KAAKo+E,aAClBz4E,EAAGE,KAAK,QAGVk2E,EAAA95E,UAAAi8E,cAAA,SAAc/xE,WACRxG,EAAK3F,KAAK2F,GACVoN,EAAY5G,EAAQ4G,UACxB7P,EAAAm2E,OAAO1zE,EAAI3F,KAAKo+E,aAChBz4E,EAAGE,KAAK7F,KAAKq+E,aAAatrE,EAAU3J,aACpCzD,EAAGE,KAAK,KACRF,EAAGE,KAAKsG,EAAQgb,YAChBxhB,EAAGE,KAAK,KAIR,IAHA,IAAIsD,EAAa4J,EAAU+S,eACvB63B,EAAgBx0C,EAAW7D,OAEtBjF,EAAI,EAAGA,EAAIs9C,IAAiBt9C,EAC/BA,GAAGsF,EAAGE,KAAK,MAEfF,EAAGE,KAAK7F,KAAKq+E,aAAal1E,EAAW9I,KACrCsF,EAAGE,KAAK,KACRF,EAAGE,KAAKkN,EAAU8b,iBAAiBxuB,IAErCsF,EAAGE,KAAK,QACR,IAAIiK,EAAU3D,EAAQ2D,QACtB,GAAIA,GAAWA,EAAQ4nB,KAAM,CAC3Bx0B,EAAAm2E,OAAO1zE,EAAI3F,KAAKo+E,aAChBz4E,EAAGE,KAAK,cACRF,EAAGE,KAAKsG,EAAQgb,YAChBxhB,EAAGE,KAAK,YACR,IAAmB,IAAA2oB,EAAA9K,EAAA5T,EAAQtC,UAAQsW,EAAA0K,EAAA5K,QAAAE,EAAAD,KAAAC,EAAA0K,EAAA5K,OAAA,CAA9B,IAAI3J,EAAM6J,EAAAxiB,MAAsBtB,KAAKy9E,aAAaxjE,qGACvD/W,EAAAm2E,OAAO1zE,IAAM3F,KAAKo+E,aAClBz4E,EAAGE,KAAK,SAIZk2E,EAAA95E,UAAAk8E,WAAA,SAAWhyE,GACT,IAAIxG,EAAK3F,KAAK2F,GACdzC,EAAAm2E,OAAO1zE,EAAI3F,KAAKo+E,eAChBz4E,EAAGE,KAAK,cACRF,EAAGE,KAAKsG,EAAQgb,YAChBxhB,EAAGE,KAAK,QAER3C,EAAAm2E,OAAO1zE,IAAM3F,KAAKo+E,aAClBz4E,EAAGE,KAAK,QAGVk2E,EAAA95E,UAAAu8E,eAAA,SAAeryE,GACbnM,KAAKm+E,WAAWhyE,IAGlB4vE,EAAA95E,UAAA67E,WAAA,SAAW3xE,KAIX4vE,EAAA95E,UAAAg8E,eAAA,SAAe9xE,WACTxG,EAAK3F,KAAK2F,GACdzC,EAAAm2E,OAAO1zE,EAAI3F,KAAKo+E,eAChBz4E,EAAGE,KAAK,cACRF,EAAGE,KAAKsG,EAAQgb,YAChBxhB,EAAGE,KAAK,QACR,IAAIiK,EAAU3D,EAAQ2D,QACtB,GAAIA,MACF,IAAmB,IAAA0e,EAAA9K,EAAA5T,EAAQtC,UAAQsW,EAAA0K,EAAA5K,QAAAE,EAAAD,KAAAC,EAAA0K,EAAA5K,OAAA,CAA9B,IAAI3J,EAAM6J,EAAAxiB,MAAsBtB,KAAKy9E,aAAaxjE,qGAEzD/W,EAAAm2E,OAAO1zE,IAAM3F,KAAKo+E,aAClBz4E,EAAGE,KAAK,QAGVk2E,EAAA95E,UAAAo8E,aAAA,SAAah2E,GACX,OAAQA,EAAKtB,MACX,OAAkB,MAAO,OACzB,OAAmB,MAAO,QAC1B,OAAmB,MAAO,OAC1B,OAAmB,MAAO,YAC1B,OAAqB,OAAO/G,KAAK6rB,QAAQrL,QAAQkB,SAAW,YAAc,OAC1E,OAAkB,MAAO,QACzB,OAAmB,MAAO,iBAC1B,OAAmB,MAAO,gBAE1B,OAAmB,MAAO,qBAC1B,OAAqB,OAAO1hB,KAAK6rB,QAAQrL,QAAQkB,SAAW,qBAAuB,gBAEnF,QAAoB,MAAO,UAC3B,QAAmB,MAAO,qBAC1B,QAAmB,MAAO,sBAC1B,QAAoB,MAAO,OAC3B,QAEE,OADAje,QAAO,GACA,KAKbs4E,EAAA95E,UAAA+5E,MAAA,WACE,IAAIr2E,EAAK3F,KAAK2F,GAMd,OALAA,EAAGE,KAAK,4BACN7F,KAAKo+E,YACPp+E,KAAKw9E,SACHx9E,KAAKo+E,YACPz4E,EAAGE,KAAK,OACDF,EAAGG,KAAK,KAEnBi2E,EA1KA,CAAgCsB,GAAnB39E,EAAAq8E,aA6Kb,IAAAG,EAAA,SAAAlnE,GAWE,SAAAknE,EAAYrwD,EAAkByxD,QAAA,IAAAA,OAAA,GAA9B,IAAApoE,EACEF,EAAAxU,KAAAR,KAAM6rB,EAASyxD,IAAet9E,YALxBkV,EAAAvP,MACAuP,EAAAkpE,YAAmB,IAsM7B,OA9MgCnpE,EAAAinE,EAAAlnE,GAGvBknE,EAAAF,MAAP,SAAanwD,GACX,OAAO,IAAIqwD,EAAWrwD,GAASmwD,SAWjCE,EAAAj6E,UAAAy7E,YAAA,SAAYvxE,GACV,IAAIxG,EAAK3F,KAAK2F,GACV4/D,EAAUp5D,EAAQrE,GAAGrB,EAAApE,YAAYiqB,SACrCppB,EAAAm2E,OAAO1zE,EAAI3F,KAAKo+E,aACZjyE,EAAQrE,GAAGrB,EAAApE,YAAY0X,QACrBwrD,EAAS5/D,EAAGE,KAAK,oBAChBF,EAAGE,KAAK,WAET0/D,EAAS5/D,EAAGE,KAAK,UAChBF,EAAGE,KAAK,QAEfF,EAAGE,KAAKsG,EAAQgb,YAChBxhB,EAAGE,KAAK,MACRF,EAAGE,KAAK7F,KAAKq+E,aAAalyE,EAAQ9D,OAClC1C,EAAGE,KAAK,OACR7F,KAAKi+E,eAAe9xE,IAGtB+vE,EAAAj6E,UAAA07E,UAAA,SAAUxxE,WACJxG,EAAK3F,KAAK2F,GACdzC,EAAAm2E,OAAO1zE,EAAI3F,KAAKo+E,eAChBz4E,EAAGE,KAAK,SACRF,EAAGE,KAAKsG,EAAQgb,YAChBxhB,EAAGE,KAAK,QACR,IAAIiK,EAAU3D,EAAQ2D,QACtB,GAAIA,EAAS,CACX,IAAI2uE,EAAa3uE,EAAQ4nB,SACzB,IAA2B,IAAAgnD,EAAAh7D,EAAA5T,GAAO6uE,EAAAD,EAAA96D,QAAA+6D,EAAA96D,KAAA86D,EAAAD,EAAA96D,OAAE,CAA3B,IAAA4K,EAAAzK,EAAA46D,EAAAr9E,MAAA,GAACV,EAAA4tB,EAAA,GAAMvU,EAAAuU,EAAA,GACVvU,EAAOlT,MAAQo0C,EAAAz8B,YAAYsN,YAC7B9oB,EAAAm2E,OAAO1zE,EAAI3F,KAAKo+E,aAChBz4E,EAAGE,KAAKjF,GACJqZ,EAAOnS,GAAGrB,EAAApE,YAAYiqB,WACxB3mB,EAAGE,KAAK,OACRF,EAAGE,KAAiBoU,EAAQgS,cAAcpnB,SAAS,MAErDc,EAAGE,KAAK,SACN44E,qGAGFA,GAAYz+E,KAAKi+E,eAAe9xE,GAEtCjJ,EAAAm2E,OAAO1zE,IAAM3F,KAAKo+E,aAClBz4E,EAAGE,KAAK,QAGVq2E,EAAAj6E,UAAAi8E,cAAA,SAAc/xE,GACZ,IAAIA,EAAQnE,MAAMvB,EAAApE,YAAYu9C,QAAUn5C,EAAApE,YAAY2lB,KAApD,CACA,IAAIriB,EAAK3F,KAAK2F,GACVoN,EAAY5G,EAAQ4G,UAIxB,GAHA7P,EAAAm2E,OAAO1zE,EAAI3F,KAAKo+E,aACZjyE,EAAQrE,GAAGrB,EAAApE,YAAYw9C,YAAYl6C,EAAGE,KAAK,cAC3CsG,EAAQrE,GAAGrB,EAAApE,YAAY0X,SAASpU,EAAGE,KAAK,WACxCsG,EAAQrE,GAAGrB,EAAApE,YAAY0lB,KAKzB,OAJApiB,EAAGE,KAAKsG,EAAQlK,UAAU0J,YAAY/K,KAAKwE,MAC3CO,EAAGE,KAAK,MACRF,EAAGE,KAAK7F,KAAKq+E,aAAatrE,EAAU3J,kBACpCzD,EAAGE,KAAK,OAGHsG,EAAQnE,MAAMvB,EAAApE,YAAY0X,OAAStT,EAAApE,YAAY6rB,WAAWvoB,EAAGE,KAAK,aACvEF,EAAGE,KAAKsG,EAAQgb,YAElBxhB,EAAGE,KAAK,KAIR,IAHA,IAAIsD,EAAa4J,EAAU+S,eACvB63B,EAAgBx0C,EAAW7D,OAEtBjF,EAAI,EAAGA,EAAIs9C,IAAiBt9C,EAC/BA,GAAGsF,EAAGE,KAAK,MAEfF,EAAGE,KAAKkN,EAAU8b,iBAAiBxuB,IACnCsF,EAAGE,KAAK,MACRF,EAAGE,KAAK7F,KAAKq+E,aAAal1E,EAAW9I,KAEnC8L,EAAQnE,MAAMvB,EAAApE,YAAYgV,YAAc5Q,EAAApE,YAAY2lB,KACtDriB,EAAGE,KAAK,MAERF,EAAGE,KAAK,OACRF,EAAGE,KAAK7F,KAAKq+E,aAAatrE,EAAU3J,cAEtCzD,EAAGE,KAAK,OACR7F,KAAKi+E,eAAe9xE,KAGtB+vE,EAAAj6E,UAAAk8E,WAAA,SAAWhyE,eACLxG,EAAK3F,KAAK2F,GACVyiB,EAAcjc,EAAQpF,MAAQo0C,EAAAz8B,YAAYgT,UAC9CxuB,EAAAm2E,OAAO1zE,EAAI3F,KAAKo+E,eACZh2D,EACFziB,EAAGE,KAAK,eAEJsG,EAAQrE,GAAGrB,EAAApE,YAAYmmB,WAAW7iB,EAAGE,KAAK,aAC9CF,EAAGE,KAAK,WAEVF,EAAGE,KAAKsG,EAAQgb,YAChB,IAAIuJ,EAAOvkB,EAAQukB,KACfA,GAAQA,EAAK5oB,GAAGrB,EAAApE,YAAY+uD,SAAW3qD,EAAApE,YAAYmlB,iBACrD7hB,EAAGE,KAAK,aACRF,EAAGE,KAAK6qB,EAAKvJ,aAEfxhB,EAAGE,KAAK,QACR,IAAIiK,EAAU3D,EAAQlK,UAAU6N,QAChC,GAAIA,MACF,IAAmB,IAAAgU,EAAAJ,EAAA5T,EAAQtC,UAAQyX,EAAAnB,EAAAF,QAAAqB,EAAApB,KAAAoB,EAAAnB,EAAAF,OAAE,CAAhC,IAAI3J,EAAMgL,EAAA3jB,MACbtB,KAAKy9E,aAAaxjE,qGAGtB,IAAI03C,EAAOxlD,EAAQykB,oBAGnB,GAFI+gC,GAAM3xD,KAAKk+E,cAAcvsB,GAC7B7hD,EAAU3D,EAAQ2D,YAEhB,IAAmB,IAAA68C,EAAAjpC,EAAA5T,EAAQtC,UAAQ0/C,EAAAP,EAAA/oC,QAAAspC,EAAArpC,KAAAqpC,EAAAP,EAAA/oC,OAAA,CAA1B3J,EAAMizC,EAAA5rD,MAAsBtB,KAAKy9E,aAAaxjE,qGAEzD/W,EAAAm2E,OAAO1zE,IAAM3F,KAAKo+E,aAClBz4E,EAAGE,KAAK,QAGVq2E,EAAAj6E,UAAAu8E,eAAA,SAAeryE,GACbnM,KAAKm+E,WAAWhyE,IAGlB+vE,EAAAj6E,UAAA67E,WAAA,SAAW3xE,GACT,IAAIA,EAAQrE,GAAGrB,EAAApE,YAAYu9C,SAA3B,CACA,IAAIj6C,EAAK3F,KAAK2F,GACdzC,EAAAm2E,OAAO1zE,EAAI3F,KAAKo+E,aACZjyE,EAAQrE,GAAGrB,EAAApE,YAAYw9C,YAAYl6C,EAAGE,KAAK,cAC3CsG,EAAQrE,GAAGrB,EAAApE,YAAY0X,SAASpU,EAAGE,KAAK,WACxCsG,EAAQrE,GAAGrB,EAAApE,YAAYkmB,WAAW5iB,EAAGE,KAAK,aAC9CF,EAAGE,KAAKsG,EAAQgb,YAChBxhB,EAAGE,KAAK,MACRF,EAAGE,KAAK7F,KAAKq+E,aAAalyE,EAAQ9D,OAClC1C,EAAGE,KAAK,SAGVq2E,EAAAj6E,UAAAg8E,eAAA,SAAe9xE,WACT2D,EAAU3D,EAAQ2D,QACtB,GAAIA,GAAWA,EAAQ4nB,KAAM,CAC3B,IAAI/xB,EAAK3F,KAAK2F,GACdzC,EAAAm2E,OAAO1zE,EAAI3F,KAAKo+E,eAChBz4E,EAAGE,KAAK,cACRF,EAAGE,KAAKsG,EAAQgb,YAChBxhB,EAAGE,KAAK,YACR,IAAmB,IAAA2oB,EAAA9K,EAAA5T,EAAQtC,UAAQsW,EAAA0K,EAAA5K,QAAAE,EAAAD,KAAAC,EAAA0K,EAAA5K,OAAA,CAA9B,IAAI3J,EAAM6J,EAAAxiB,MAAsBtB,KAAKy9E,aAAaxjE,qGACvD/W,EAAAm2E,OAAO1zE,IAAM3F,KAAKo+E,aAClBz4E,EAAGE,KAAK,SAIZq2E,EAAAj6E,UAAAo8E,aAAA,SAAah2E,GACX,OAAQA,EAAKtB,MACX,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,OAAO/G,KAAK6rB,QAAQrL,QAAQkB,SAAW,MAAQ,MACpE,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAE1B,OAAmB,MAAO,MAC1B,OAAqB,OAAO1hB,KAAK6rB,QAAQrL,QAAQkB,SAAW,MAAQ,MAEpE,QAAoB,MAAO,OAC3B,QAAmB,MAAO,MAC1B,QAAmB,MAAO,MAC1B,QAAoB,MAAO,OAC3B,QAEE,OADAje,QAAO,GACA,KAKby4E,EAAAj6E,UAAA+5E,MAAA,WACE,IAAIr2E,EAAK3F,KAAK2F,GAgBd,OAfAA,EAAGE,KAAK,+BACRF,EAAGE,KAAK,yBACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,yBACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACN7F,KAAKo+E,YACPp+E,KAAKw9E,SACHx9E,KAAKo+E,YACPz4E,EAAGE,KAAK,OACRF,EAAGE,KAAK,8BACD7F,KAAK2F,GAAGG,KAAK,KAExBo2E,EA9MA,CAAgCmB,GAAnB39E,EAAAw8E,icCxSb,IAAAz1E,EAAAtG,EAAA,GAMAg7C,EAAAh7C,EAAA,GAIAuG,EAAAvG,EAAA,GAQA8b,EAAA9b,EAAA,GAKA+C,EAAA/C,EAAA,GAIAgc,EAAAhc,EAAA,GAyDAg6E,EAAA,SAAAnlE,GAcE,SAAAmlE,IAAA,IAAAjlE,EACEF,EAAAxU,KAAAR,OAAOA,YAVTkV,EAAA0pE,QAAoB,IAAIz4E,MAExB+O,EAAA2pE,QAAuB,IAAI5zD,IAE3B/V,EAAA4pE,QAAuB,IAAI7zD,IAE3B/V,EAAAiuC,UAAmC,KA4b3BjuC,EAAA6pE,8BAAqC,EAsbrC7pE,EAAA8pE,oBAAuC,KA72B7C9pE,EAAK2W,QAAU,IAAIsvB,EAAAr8B,QAAQ5J,EAAKhP,eAw0GpC,OAx1G4B+O,EAAAklE,EAAAnlE,GAoB1BmlE,EAAAl4E,UAAAg4E,UAAA,SACE70E,EACAyL,EACA6W,GAEA,IAAI3iB,EAAiB7B,EAAA6N,cAAcF,GAC/BK,EAAeiL,EAAAhL,mBAAmBpM,GAGtC,IAAI/E,KAAK8+E,QAAQ35D,IAAIjU,GAArB,CACAlR,KAAK8+E,QAAQ5zD,IAAIha,GACjBlR,KAAK6+E,QAAQ3zD,IAAIha,GAGjB,IAAIpM,EAAS,IAAIqX,EAAAxD,OACf5T,EACAK,EACAsiB,EACIvL,EAAA1D,WAAWW,MACXvI,EAAKG,WAAWvK,EAAA3D,iBAAmB+N,EAAKq+D,QAAQzoE,EAAAnE,eAAgBmE,EAAA3D,eAAewC,QAAU,EACvF6W,EAAA1D,WAAWY,QACX8C,EAAA1D,WAAWqmC,SAEfjzB,EAAU7rB,KAAK6rB,QACnBA,EAAQ3L,QAAQra,KAAKf,GAGrB,IAAIm6E,EAAK,IAAIv4E,EAAAo8C,UAAUh+C,EAAQ+mB,EAAQ3lB,aACvC+4E,EAAG97B,UAAYnjD,KAAKmjD,UACpBr+C,EAAO+T,UAAYomE,EAEnB,IADA,IAAI5vE,EAAavK,EAAOuK,YAChB4vE,EAAGp5B,KAAKn/C,EAAAC,MAAM2+C,YAAY,CAChC,IAAIl1C,EAAYpQ,KAAKk/E,uBAAuBD,GACxC7uE,IACFA,EAAUzI,OAAS7C,EACnBuK,EAAWxJ,KAAKuK,IAGpB6uE,EAAGj2B,WAILmxB,EAAAl4E,UAAAi9E,uBAAA,SACED,EACAh4D,QAAA,IAAAA,MAAA,MAOA,IALA,IAAIrf,EAAQnB,EAAApE,YAAYwF,KACpBs3E,GAAiB,EAGjBpvE,EAAqC,KAClCkvE,EAAGp5B,KAAKn/C,EAAAC,MAAMi+C,KAAK,CACpBu6B,EAAW,IAAGA,EAAWF,EAAGl8B,UAChC,IAAIhnC,EAAY/b,KAAKo/E,eAAeH,GAC/BljE,GAIAhM,IAAYA,MACjBA,EAAWlK,KAAKkW,IAJd/b,KAAKq/E,cAAcJ,GAQvB,IAAIK,EAAmB,EACnBC,EAAiB,EACjBN,EAAGp5B,KAAKn/C,EAAAC,MAAMiT,UACZqlE,EAAGp5B,KAAKn/C,EAAAC,MAAMm4C,UAChB9+C,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACf03D,EAAG76E,SAGH+6E,EAAW,IAAGA,EAAWF,EAAGl8B,UAChCn7C,GAASnB,EAAApE,YAAYuX,OACrB0lE,EAAcL,EAAGl8B,SACjBw8B,EAAYN,EAAGhmE,KAGjB,IAEIumE,EAAgC,MAAbv4D,GAAqBA,EAAUnf,GAAGrB,EAAApE,YAAYsjB,SACjEs5D,EAAGp5B,KAAKn/C,EAAAC,MAAMk4C,UACZsgC,EAAW,IAAGA,EAAWF,EAAGl8B,UAC5By8B,GACFx/E,KAAKuG,MACH0V,EAAAnY,eAAe27E,gEACfR,EAAG76E,SAGPwD,GAASnB,EAAApE,YAAYw8C,QAAUp4C,EAAApE,YAAYsjB,SAClC65D,IACT53E,GAASnB,EAAApE,YAAYsjB,SAIvB,IAAIvV,EAA8B,KAG9BsvE,EAAQT,EAAG15B,OAEf,OADI45B,EAAW,IAAGA,EAAWF,EAAGh8B,cACxBy8B,GACN,KAAKh5E,EAAAC,MAAMglB,MAGT,GAFAszD,EAAGr7D,OACHhc,GAASnB,EAAApE,YAAYspB,MACjBszD,EAAGp5B,KAAKn/C,EAAAC,MAAMolB,MAAO,CACvB3b,EAAYpQ,KAAK2/E,UAAUV,EAAIr3E,EAAOmI,EAAYovE,GAClD,MAEA/uE,EAAYpQ,KAAK4/E,cAAcX,EAAIr3E,EAAOmI,EAAYovE,GACtDpvE,EAAa,KAEf,MAEF,KAAKrJ,EAAAC,MAAM64C,IAAK53C,GAASnB,EAAApE,YAAYm9C,IACrC,KAAK94C,EAAAC,MAAMq5C,IACTi/B,EAAGr7D,OACHxT,EAAYpQ,KAAK4/E,cAAcX,EAAIr3E,EAAOmI,EAAYovE,GACtDpvE,EAAa,KACb,MAEF,KAAKrJ,EAAAC,MAAMolB,KACTkzD,EAAGr7D,OACHxT,EAAYpQ,KAAK2/E,UAAUV,EAAIr3E,EAAOmI,EAAYovE,GAClDpvE,EAAa,KACb,MAEF,KAAKrJ,EAAAC,MAAM4Q,SACT0nE,EAAGr7D,OACHxT,EAAYpQ,KAAK6/E,cAAcZ,EAAIr3E,EAAOmI,EAAYovE,GACtDpvE,EAAa,KACb,MAEF,KAAKrJ,EAAAC,MAAM6hB,SACT,IAAIw9B,EAAQi5B,EAAGl5B,OAEf,GADAk5B,EAAGr7D,QACEq7D,EAAGp5B,KAAKn/C,EAAAC,MAAMwQ,OAAQ,CACzB8nE,EAAG74B,MAAMJ,GACT51C,EAAYpQ,KAAK8/E,eAAeb,GAAI,GACpC,MAEAA,EAAG94B,QAAQH,GAEbp+C,GAASnB,EAAApE,YAAYmmB,SAGvB,KAAK9hB,EAAAC,MAAMwQ,MACX,KAAKzQ,EAAAC,MAAM+qB,UACTutD,EAAGr7D,OACHxT,EAAYpQ,KAAK+/E,sBAAsBd,EAAIr3E,EAAOmI,EAAYovE,GAC9DpvE,EAAa,KACb,MAEF,KAAKrJ,EAAAC,MAAMmlB,UACLk6B,EAAQi5B,EAAGl5B,OACfk5B,EAAGr7D,OACCq7D,EAAG15B,MAAK,EAAO7+C,EAAA23C,mBAAmB8G,SAAWz+C,EAAAC,MAAMU,YACrD43E,EAAG94B,QAAQH,GACX51C,EAAYpQ,KAAKggF,eAAef,EAAIr3E,EAAOmI,EAAYovE,GACvDpvE,EAAa,OAEbkvE,EAAG74B,MAAMJ,GACT51C,EAAYpQ,KAAK8/E,eAAeb,GAAI,IAEtC,MAEF,KAAKv4E,EAAAC,MAAMsU,OACTgkE,EAAGr7D,OAGDxT,GAFFxI,GAASnB,EAAApE,YAAY4Y,QACTxU,EAAApE,YAAYuX,OACV5Z,KAAKigF,kBAAkBhB,EAAIE,GAE3Bn/E,KAAKkgF,YAAYjB,GAE/B,MAEF,KAAKv4E,EAAAC,MAAMyO,KACL4wC,EAAQi5B,EAAGl5B,OACfk5B,EAAGr7D,OACCq7D,EAAG15B,MAAK,EAAO7+C,EAAA23C,mBAAmB8G,SAAWz+C,EAAAC,MAAMU,YACrD43E,EAAG94B,QAAQH,GACX51C,EAAYpQ,KAAKmgF,qBAAqBlB,EAAIr3E,EAAOmI,EAAYovE,GAC7DpvE,EAAa,OAEbkvE,EAAG74B,MAAMJ,GACT51C,EAAYpQ,KAAK8/E,eAAeb,GAAI,IAEtC,MAEF,QAGMr3E,EAAQnB,EAAApE,YAAYuX,OACtBxJ,EAAYpQ,KAAKogF,YAAYnB,EAAIr3E,EAAOu3E,IAIpCI,GACFv/E,KAAKuG,MACH0V,EAAAnY,eAAeu8E,gCACfpB,EAAG76E,MAAMk7E,EAAaC,GAAY,UASjCt4D,IACH7W,EAAYpQ,KAAK8/E,eAAeb,GAAI,KAQ5C,GAAIlvE,EACF,IAAK,IAAI1P,EAAI,EAAGsK,EAAIoF,EAAWzK,OAAQjF,EAAIsK,IAAKtK,EAC9CL,KAAKuG,MACH0V,EAAAnY,eAAew8E,8BACfvwE,EAAW1P,GAAG+D,OAIpB,OAAOgM,GAIT+pE,EAAAl4E,UAAAm4E,SAAA,WACE,IAAIwE,EAAU5+E,KAAK4+E,QACnB,OAAOA,EAAQt5E,OAASs5E,EAAQnnD,QAAU,MAI5C0iD,EAAAl4E,UAAA+mD,OAAA,WACE,GAAIhpD,KAAK4+E,QAAQt5E,OAAQ,MAAM,IAAI4f,MAAM,wBAIzC,OAHAllB,KAAK4+E,WACL5+E,KAAK6+E,QAAQ0B,QACbvgF,KAAK8+E,QAAQyB,QACNvgF,KAAK6rB,SAIdsuD,EAAAl4E,UAAAu+E,UAAA,SACEvB,EACAwB,EACAC,QADA,IAAAD,OAAA,QACA,IAAAC,OAAA,GAIA,IAGIr4E,EAHA+3C,EAAQ6+B,EAAGr7D,OACXu7D,EAAWF,EAAGl8B,SAKlB,GAAI3C,GAAS15C,EAAAC,MAAM68C,UAAW,CAG5B,IAAIm9B,EAAsB1B,EAAGp5B,KAAKn/C,EAAAC,MAAM68C,WAEpCzwC,EAAY/S,KAAK4gF,kBAAkB3B,GACvC,GAAIlsE,EAAW,CACb,GAAI4tE,EAAqB,CACvB,IAAK1B,EAAGp5B,KAAKn/C,EAAAC,MAAM88C,YAKjB,OAJAzjD,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAEP,KAET,IAAK66E,EAAGp5B,KAAKn/C,EAAAC,MAAM86C,KAKjB,OAJAzhD,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAEP,KAEJ66E,EAAGp5B,KAAKn/C,EAAAC,MAAMM,OACjBjH,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,QAGhB2O,EAAU3K,YAAa,EAEzB,OAAO2K,EACF,GAAI4tE,GAAuB3gF,KAAK++E,6BAKrC,OAJA/+E,KAAKuG,MACH0V,EAAAnY,eAAe+8E,iBACf5B,EAAG76E,SAEE,KAIT,IAAIq8E,EAoBF,OAJAzgF,KAAKuG,MACH0V,EAAAnY,eAAe+8E,iBACf5B,EAAG76E,SAEE,KAnBP,IAAI08E,EAAY9gF,KAAKwgF,UAAUvB,GAAI,EAAOyB,GAC1C,IAAKI,EAAW,OAAO,KACvB,IAAK7B,EAAGp5B,KAAKn/C,EAAAC,MAAM88C,YAOjB,OANKi9B,GACH1gF,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,MAAM66E,EAAGhmE,KAAM,KAGf,MAET5Q,EAAOy4E,GACF18E,MAAMmB,MAAQ45E,EACnB92E,EAAKjE,MAAMoB,IAAMy5E,EAAGhmE,SAUjB,GAAImnC,GAAS15C,EAAAC,MAAM+U,KACxBrT,EAAO8T,EAAAzU,KAAKQ,WACViU,EAAAzU,KAAKe,2BAA2B,OAAQw2E,EAAG76E,aAAc,EAAO66E,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,WAInF,GAAImnC,GAAS15C,EAAAC,MAAMsR,KACxB5P,EAAO8T,EAAAzU,KAAKQ,WACViU,EAAAzU,KAAKiH,qBAAqBswE,EAAG76E,aAAc,EAAO66E,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,WAIrE,GAAImnC,GAAS15C,EAAAC,MAAMO,MAAQk5C,GAAS15C,EAAAC,MAAMQ,MAC/CkB,EAAO8T,EAAAzU,KAAKQ,WACViU,EAAAzU,KAAKe,2BAA2B,OAAQw2E,EAAG76E,aAAc,EAAO66E,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,WAInF,GAAImnC,GAAS15C,EAAAC,MAAM48C,cACxB07B,EAAG3sC,aACHjqC,EAAO8T,EAAAzU,KAAKQ,WACViU,EAAAzU,KAAKe,2BAA2B,SAAUw2E,EAAG76E,aAAc,EAAO66E,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,UAIrF,IAAImnC,GAAS15C,EAAAC,MAAMU,WA6CxB,OANKq5E,GACH1gF,KAAKuG,MACH0V,EAAAnY,eAAei9E,oBACf9B,EAAG76E,SAGA,KA5CP,IAAIuL,EAAawM,EAAAzU,KAAKe,2BAA2Bw2E,EAAG54B,iBAAkB44B,EAAG76E,SACrE+E,EAAa,IAAIhD,MACjB66E,GAAW,EAGf,GAAI/B,EAAGp5B,KAAKn/C,EAAAC,MAAM45C,UAAW,CAC3B,EAAG,CACD,IAAI0gC,EAAYjhF,KAAKwgF,UAAUvB,GAAI,EAAMyB,GACzC,IAAKO,EAAW,OAAO,KACvB93E,EAAWtD,KAAeo7E,SACnBhC,EAAGp5B,KAAKn/C,EAAAC,MAAMyQ,QACvB,IAAK6nE,EAAGp5B,KAAKn/C,EAAAC,MAAM65C,aAOjB,OANKkgC,GACH1gF,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,MAAM66E,EAAGhmE,KAAM,KAGf,KAIX,GAAIgmE,EAAGp5B,KAAKn/C,EAAAC,MAAM86C,KAAM,CACtB,IAAIw9B,EAAGp5B,KAAKn/C,EAAAC,MAAMM,MAShB,OANKy5E,GACH1gF,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,MAAM66E,EAAGhmE,KAAM,QAGf,KARP+nE,GAAW,EAWf34E,EAAO8T,EAAAzU,KAAKQ,WAAWyH,EAAYxG,EAAY63E,EAAU/B,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAYjF,KAAOgmE,EAAGp5B,KAAKn/C,EAAAC,MAAM69C,cAAc,CACjC,IAAI08B,EAAejC,EAAGl8B,SACtB,IAAKk8B,EAAGp5B,KAAKn/C,EAAAC,MAAM89C,cAOjB,OANKi8B,GACH1gF,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAGT,KAET,IAAI+8E,EAAelC,EAAG76E,MAAM88E,EAAcjC,EAAGhmE,KAGzC+nE,GAAW,EACf,GAAI/B,EAAGp5B,KAAKn/C,EAAAC,MAAM86C,KAAM,CACtB,IAAIw9B,EAAGp5B,KAAKn/C,EAAAC,MAAMM,MAShB,OANKy5E,GACH1gF,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,QAGT,KARP48E,GAAW,EAiBf,GANA34E,EAAO8T,EAAAzU,KAAKQ,WACViU,EAAAzU,KAAKe,2BAA2B,QAAS04E,IACvC94E,GACF24E,EACA/B,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAEpB+nE,EAAU,MAGhB,OAAO34E,GAOT8xE,EAAAl4E,UAAA2+E,kBAAA,SACE3B,GAKA,IAuGI71E,EAvGA48C,EAAQi5B,EAAGl5B,OACXo5B,EAAWF,EAAGl8B,SACd55C,EAAqC,KACrCilB,EAA4B,KAC5BgzD,GAAoB,EAExB,GAAInC,EAAGp5B,KAAKn/C,EAAAC,MAAM88C,YAChB29B,GAAc,EACdnC,EAAG94B,QAAQH,GACX78C,SAEK,CACLi4E,GAAc,EACd,EAAG,CACD,IAAIr6E,EAAOoV,EAAA7G,cAAcwpC,QAMzB,GALImgC,EAAGp5B,KAAKn/C,EAAAC,MAAM25C,eAChB8gC,GAAc,EACdnC,EAAG94B,QAAQH,GACXj/C,EAAOoV,EAAA7G,cAAc40C,MAEnB+0B,EAAGp5B,KAAKn/C,EAAAC,MAAMsR,MAAO,CACvB,IAAIgnE,EAAGp5B,KAAKn/C,EAAAC,MAAMy9C,OAiBhB,OAFA66B,EAAG74B,MAAMJ,GACThmD,KAAK++E,8BAA+B,EAC7B,KAhBPqC,GAAc,EACdnC,EAAG94B,QAAQH,GACX,IAAIzkD,EAAIvB,KAAKwgF,UAAUvB,GAAI,GAC3B,IAAK19E,EAAG,OAAO,KACf,GAAIA,EAAEwF,MAAQoV,EAAAtV,SAASuO,KAMrB,OALApV,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfhmB,EAAE6C,OAEJpE,KAAK++E,8BAA+B,EAC7B,KAET3wD,EAAqB7sB,MAMlB,KAAI09E,EAAGr5B,iBA8CZ,OATIw7B,EACFphF,KAAKuG,MACH0V,EAAAnY,eAAei9E,oBACf9B,EAAG76E,SAGL66E,EAAG74B,MAAMJ,GAEXhmD,KAAK++E,6BAA+BqC,EAC7B,KA7CP,IAAIxgF,EAAOub,EAAAzU,KAAKe,2BAA2Bw2E,EAAG54B,iBAAkB44B,EAAG76E,MAAM66E,EAAGl8B,SAAUk8B,EAAGhmE,MAazF,GAZIgmE,EAAGp5B,KAAKn/C,EAAAC,MAAM49C,YAChB68B,GAAc,EACdnC,EAAG94B,QAAQH,GACPj/C,GAAQoV,EAAA7G,cAAc40C,KACxBlqD,KAAKuG,MACH0V,EAAAnY,eAAeu9E,oCACfpC,EAAG76E,SAGL2C,EAAOoV,EAAA7G,cAAcgsE,UAGrBrC,EAAGp5B,KAAKn/C,EAAAC,MAAMy9C,OAAQ,CACxBg9B,GAAc,EACdnC,EAAG94B,QAAQH,GACX,IAAI39C,EAAOrI,KAAKwgF,UAAUvB,GAC1B,IAAK52E,EAEH,OADArI,KAAK++E,6BAA+BqC,EAC7B,KAET,IAAIG,EAAQ,IAAIplE,EAAAnT,cAChBu4E,EAAMt4E,cAAgBlC,EACtBw6E,EAAM3gF,KAAOA,EACb2gF,EAAMl5E,KAAOA,EACRc,EACAA,EAAWtD,KAAK07E,GADJp4E,GAAeo4E,QAG5BH,GACFphF,KAAKuG,MACH0V,EAAAnY,eAAe6pD,cACfsxB,EAAG76E,gBAgBJ66E,EAAGp5B,KAAKn/C,EAAAC,MAAMyQ,QACvB,IAAK6nE,EAAGp5B,KAAKn/C,EAAAC,MAAM88C,YAUjB,OATI29B,EACFphF,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAGd66E,EAAG74B,MAAMJ,GAEXhmD,KAAK++E,6BAA+BqC,EAC7B,KAKX,OAAInC,EAAGp5B,KAAKn/C,EAAAC,MAAM29C,qBAChB88B,GAAc,EACdnC,EAAG94B,QAAQH,IACX58C,EAAapJ,KAAKwgF,UAAUvB,KAiB9Bj/E,KAAK++E,8BAA+B,EAC7B5iE,EAAAzU,KAAKwB,gBACVC,MACAC,EACAglB,GACA,EACA6wD,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,QArBpBjZ,KAAK++E,6BAA+BqC,EAC7B,QAGLA,EACFphF,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,MAGd66E,EAAG74B,MAAMJ,GAEXhmD,KAAK++E,6BAA+BqC,EAC7B,OAcXjH,EAAAl4E,UAAAm9E,eAAA,SACEH,GAKA,IAAIE,EAAWF,EAAGl8B,SAClB,GAAIk8B,EAAGr5B,iBAAkB,CAGvB,IAFA,IAAIhlD,EAAOq+E,EAAG54B,iBACVt7C,EAAyBoR,EAAAzU,KAAKe,2BAA2B7H,EAAMq+E,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAClFgmE,EAAGp5B,KAAKn/C,EAAAC,MAAMi9C,MAAM,CACzB,IAAIq7B,EAAGr5B,iBAYL,OAJA5lD,KAAKuG,MACH0V,EAAAnY,eAAei9E,oBACf9B,EAAG76E,SAEE,KAXPxD,EAAOq+E,EAAG54B,iBACVt7C,EAAaoR,EAAAzU,KAAKkG,+BAChB7C,EACAoR,EAAAzU,KAAKe,2BAA2B7H,EAAMq+E,EAAG76E,SACzC66E,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAU5B,IAAIxP,OAAI,EACR,IAAIw1E,EAAGp5B,KAAKn/C,EAAAC,MAAM68C,WAMhB,OAAOrnC,EAAAzU,KAAK8B,gBAAgBuB,EAAY,KAAMk0E,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAJpE,GADAxP,EAAOzJ,KAAKwhF,eAAevC,GAEzB,OAAO9iE,EAAAzU,KAAK8B,gBAAgBuB,EAAYtB,EAAMw1E,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,WAMxEjZ,KAAKuG,MACH0V,EAAAnY,eAAei9E,oBACf9B,EAAG76E,SAGP,OAAO,MAGT+1E,EAAAl4E,UAAA29E,cAAA,SACEX,EACAr3E,EACAmI,EACAovE,GAKA,IAAIrvE,EAAU,IAAI3J,MAClB,EAAG,CACD,IAAI8T,EAASja,KAAKyhF,yBAAyBxC,EAAIr3E,EAAOmI,GACtD,IAAKkK,EAAQ,OAAO,KACpBnK,EAAQjK,KAA0BoU,SAC3BglE,EAAGp5B,KAAKn/C,EAAAC,MAAMyQ,QAEvB,IAAI46B,EAAM71B,EAAAzU,KAAK6M,wBAAwBzE,EAASC,EAAYnI,EAAOq3E,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAEzF,OADAgmE,EAAGp5B,KAAKn/C,EAAAC,MAAM09C,WACPrS,GAGTmoC,EAAAl4E,UAAAw/E,yBAAA,SACExC,EACAyC,EACAC,GAKA,IAAK1C,EAAGr5B,iBAKN,OAJA5lD,KAAKuG,MACH0V,EAAAnY,eAAei9E,oBACf9B,EAAG76E,SAEE,KAET,IAAIuL,EAAawM,EAAAzU,KAAKe,2BAA2Bw2E,EAAG54B,iBAAkB44B,EAAG76E,SACrEwD,EAAQ85E,EAERr5E,EAA8B,KAC9B42E,EAAGp5B,KAAKn/C,EAAAC,MAAMy9C,SAChB/7C,EAAOrI,KAAKwgF,UAAUvB,IAGxB,IAAIl2E,EAAiC,KACrC,GAAIk2E,EAAGp5B,KAAKn/C,EAAAC,MAAMo7C,SAQhB,GAPIn6C,EAAQnB,EAAApE,YAAYsjB,SACtB3lB,KAAKuG,MACH0V,EAAAnY,eAAe89E,iDACf3C,EAAG76E,WAGP2E,EAAc/I,KAAK6hF,gBAAgB5C,EAAI,IACrB,OAAO,UAErBr3E,EAAQnB,EAAApE,YAAYspB,MAChB/jB,EAAQnB,EAAApE,YAAYsjB,SACxB3lB,KAAKuG,MACH0V,EAAAnY,eAAe60D,wCACfhpD,EAAWvL,OAGLiE,GACVrI,KAAKuG,MACH0V,EAAAnY,eAAe6pD,cACfsxB,EAAG76E,MAAM66E,EAAGhmE,MAIlB,OAAOkD,EAAAzU,KAAK+M,0BACV9E,EACAtH,EACAU,EACA44E,EACA/5E,EACAlB,EAAAE,MAAMd,KAAK6J,EAAWvL,MAAO66E,EAAG76E,WAIpC+1E,EAAAl4E,UAAA09E,UAAA,SACEV,EACAr3E,EACAmI,EACAovE,GAKA,GAAIF,EAAGr7D,QAAUld,EAAAC,MAAMU,WAKrB,OAJArH,KAAKuG,MACH0V,EAAAnY,eAAei9E,oBACf9B,EAAG76E,SAEE,KAET,IAAIuL,EAAawM,EAAAzU,KAAKe,2BAA2Bw2E,EAAG54B,iBAAkB44B,EAAG76E,SACzE,GAAI66E,EAAGr7D,QAAUld,EAAAC,MAAM+9C,UAKrB,OAJA1kD,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAEP,KAGT,IADA,IAAI0L,EAAU,IAAI3J,OACV84E,EAAGp5B,KAAKn/C,EAAAC,MAAMg+C,aAAa,CACjC,IAAI1qC,EAASja,KAAK8hF,eAAe7C,EAAIx4E,EAAApE,YAAYwF,MACjD,IAAKoS,EAAQ,OAAO,KAEpB,GADAnK,EAAQjK,KAA2BoU,IAC9BglE,EAAGp5B,KAAKn/C,EAAAC,MAAMyQ,OAAQ,CACzB,GAAI6nE,EAAGp5B,KAAKn/C,EAAAC,MAAMg+C,YAChB,MAMA,OAJA3kD,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAEP,MAIb,IAAI4tC,EAAM71B,EAAAzU,KAAK8I,sBACbb,EACAG,EACAC,EACAnI,EACAq3E,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAGxB,OADAgmE,EAAGp5B,KAAKn/C,EAAAC,MAAM09C,WACPrS,GAGTmoC,EAAAl4E,UAAA6/E,eAAA,SACE7C,EACAyC,GAKA,IAAKzC,EAAGr5B,iBAKN,OAJA5lD,KAAKuG,MACH0V,EAAAnY,eAAei9E,oBACf9B,EAAG76E,SAEE,KAET,IAAIuL,EAAawM,EAAAzU,KAAKe,2BAA2Bw2E,EAAG54B,iBAAkB44B,EAAG76E,SACrE9C,EAA2B,KAC/B,OAAI29E,EAAGp5B,KAAKn/C,EAAAC,MAAMo7C,WAChBzgD,EAAQtB,KAAK6hF,gBAAgB5C,EAAI,IACd,KAEd9iE,EAAAzU,KAAKgJ,2BACVf,EACArO,EACAogF,EACAh7E,EAAAE,MAAMd,KAAK6J,EAAWvL,MAAO66E,EAAG76E,WAIpC+1E,EAAAl4E,UAAA8/E,YAAA,SACE9C,GAKA,IAAI90E,EAA0B,KAC9B,GACE80E,EAAG15B,MAAK,IAAS7+C,EAAAC,MAAM09C,WACvB46B,EAAGj8B,WAAat8C,EAAAC,MAAMg+C,aACrBs6B,EAAG/7B,sBAEE/4C,EAAOnK,KAAK6hF,gBAAgB5C,IAAM,OAAO,KAGjD,IAAIjtC,EAAM71B,EAAAzU,KAAK4L,sBAAsBnJ,EAAM80E,EAAG76E,SAE9C,OADA66E,EAAGp5B,KAAKn/C,EAAAC,MAAM09C,WACPrS,GAGTmoC,EAAAl4E,UAAA+/E,oBAAA,SACE/C,GAMA,IADA,IAAIrvE,EAAiB,IAAIzJ,OACjB84E,EAAGp5B,KAAKn/C,EAAAC,MAAM65C,cAAc,CAClC,IAAIyhC,EAAgBjiF,KAAKkiF,mBAAmBjD,GAC5C,IAAKgD,EAAe,OAAO,KAE3B,GADAryE,EAAe/J,KAAwBo8E,IAClChD,EAAGp5B,KAAKn/C,EAAAC,MAAMyQ,OAAQ,CACzB,GAAI6nE,EAAGp5B,KAAKn/C,EAAAC,MAAM65C,aAChB,MAMA,OAJAxgD,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAEP,MAUb,OAN8B,IAA1BwL,EAAetK,QACjBtF,KAAKuG,MACH0V,EAAAnY,eAAeq+E,oCACflD,EAAG76E,SAGAwL,GAGTuqE,EAAAl4E,UAAAigF,mBAAA,SACEjD,GAKA,GAAIA,EAAGr7D,QAAUld,EAAAC,MAAMU,WAAY,CACjC,IAAIsI,EAAawM,EAAAzU,KAAKe,2BACpBw2E,EAAG54B,iBACH44B,EAAG76E,SAEDuE,EAA+B,KACnC,GAAIs2E,EAAGp5B,KAAKn/C,EAAAC,MAAMs4C,SAAU,CAC1B,IAAI19C,EAAIvB,KAAKwgF,UAAUvB,GACvB,IAAK19E,EAAG,OAAO,KACf,GAAIA,EAAEwF,MAAQoV,EAAAtV,SAASuO,KAKrB,OAJApV,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfhmB,EAAE6C,OAEG,KAETuE,EAAwBpH,EAE1B,OAAO4a,EAAAzU,KAAKgB,oBACViH,EACAhH,EACAjC,EAAAE,MAAMd,KAAK6J,EAAWvL,MAAO66E,EAAG76E,UAQpC,OALEpE,KAAKuG,MACH0V,EAAAnY,eAAei9E,oBACf9B,EAAG76E,SAGA,MAKT+1E,EAAAl4E,UAAAmgF,gBAAA,SACEnD,EACA/qB,QAAA,IAAAA,OAAA,GAKA,IAAI/qD,EAAa,IAAIhD,MACjBk8E,EAAiC,KACjCC,GAAe,EACfC,GAAe,EACfn0D,EAAkC,KAItC,GADApuB,KAAKg/E,oBAAsB,KACvBC,EAAGp5B,KAAKn/C,EAAAC,MAAMsR,MAAO,CACvB,IAAIgnE,EAAGp5B,KAAKn/C,EAAAC,MAAMy9C,OAgBhB,OAJApkD,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAEP,KAdP,KADAgqB,EAAWpuB,KAAKwgF,UAAUvB,IACX,OAAO,KAgBxB,GAfM7wD,EAASrnB,MAAQoV,EAAAtV,SAASuO,KAC5BpV,KAAKg/E,oBAAgC5wD,EAErCpuB,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACf6G,EAAShqB,QAUV66E,EAAGp5B,KAAKn/C,EAAAC,MAAMyQ,OACjB,OAAI6nE,EAAGp5B,KAAKn/C,EAAAC,MAAM88C,YACTt6C,GAEPnJ,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAEP,MAKb,MAAQ66E,EAAGp5B,KAAKn/C,EAAAC,MAAM88C,aAAa,CACjC,IAAI89B,EAAQvhF,KAAKwiF,eAAevD,EAAI/qB,GACpC,IAAKqtB,EAAO,OAAO,KAQnB,OAPIc,IAAaE,IACfviF,KAAKuG,MACH0V,EAAAnY,eAAe2+E,kDACfJ,EAASzhF,KAAKwD,OAEhBm+E,GAAe,GAEThB,EAAMt4E,eACZ,QACMq5E,GACFtiF,KAAKuG,MACH0V,EAAAnY,eAAe4+E,yDACfnB,EAAM3gF,KAAKwD,OAGf,MAEF,KAAK+X,EAAA7G,cAAcgsE,SACjBgB,GAAe,EACf,MAEF,KAAKnmE,EAAA7G,cAAc40C,KACjBm4B,EAAWd,EAKf,GADAp4E,EAAWtD,KAAK07E,IACXtC,EAAGp5B,KAAKn/C,EAAAC,MAAMyQ,OAAQ,CACzB,GAAI6nE,EAAGp5B,KAAKn/C,EAAAC,MAAM88C,YAChB,MAMA,OAJAzjD,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAEP,MAIb,OAAO+E,GAGTgxE,EAAAl4E,UAAAugF,eAAA,SACEvD,EACA/qB,QAAA,IAAAA,OAAA,GAKA,IAAIyuB,GAAS,EACTC,GAAa,EACbC,EAA2B,KAC3BC,EAA2Br8E,EAAApE,YAAYwF,KAC3C,GAAIqsD,IACE+qB,EAAGp5B,KAAKn/C,EAAAC,MAAMm5C,SAChB+iC,EAAa5D,EAAG76E,QAChB0+E,GAAer8E,EAAApE,YAAYy9C,QAClBm/B,EAAGp5B,KAAKn/C,EAAAC,MAAMk5C,YACvBgjC,EAAa5D,EAAG76E,QAChB0+E,GAAer8E,EAAApE,YAAYw9C,WAClBo/B,EAAGp5B,KAAKn/C,EAAAC,MAAMi5C,WACvBijC,EAAa5D,EAAG76E,QAChB0+E,GAAer8E,EAAApE,YAAYu9C,SAEzBq/B,EAAG15B,QAAU7+C,EAAAC,MAAM4hB,UAAU,CAC/B,IAAIy9B,EAAQi5B,EAAGl5B,OACfk5B,EAAGr7D,OACCq7D,EAAG15B,QAAU7+C,EAAAC,MAAMy9C,OACrB66B,EAAG94B,QAAQH,GACN68B,IAAYA,EAAa5D,EAAG76E,SACjC0+E,GAAer8E,EAAApE,YAAYkmB,UAE3B02D,EAAG74B,MAAMJ,GAef,GAXIi5B,EAAGp5B,KAAKn/C,EAAAC,MAAM25C,eACZwiC,EACF9iF,KAAKuG,MACH0V,EAAAnY,eAAei/E,+DACf9D,EAAG76E,SAGLy+E,EAAa5D,EAAG76E,QAElBu+E,GAAS,GAEP1D,EAAGr5B,iBAAkB,CAClB+8B,IAAQE,EAAa5D,EAAG76E,SAC7B,IAAIuL,EAAawM,EAAAzU,KAAKe,2BAA2Bw2E,EAAG54B,iBAAkB44B,EAAG76E,SACrEiE,EAA8B,KASlC,IARIu6E,EAAa3D,EAAGp5B,KAAKn/C,EAAAC,MAAM49C,YACzBo+B,GACF3iF,KAAKuG,MACH0V,EAAAnY,eAAeu9E,oCACf1xE,EAAWvL,OAIb66E,EAAGp5B,KAAKn/C,EAAAC,MAAMy9C,QAEhB,KADA/7C,EAAOrI,KAAKwgF,UAAUvB,IACX,OAAO,UAElB52E,EAAO8T,EAAAzU,KAAKc,kBAAkBy2E,EAAG76E,MAAM66E,EAAGhmE,MAE5C,IAAIlQ,EAAiC,KACrC,GAAIk2E,EAAGp5B,KAAKn/C,EAAAC,MAAMo7C,UACZ4gC,GACF3iF,KAAKuG,MACH0V,EAAAnY,eAAek/E,4CACfrzE,EAAWvL,OAGXw+E,EACF5iF,KAAKuG,MACH0V,EAAAnY,eAAem/E,oDACftzE,EAAWvL,OAGbw+E,GAAa,IAEf75E,EAAc/I,KAAK6hF,gBAAgB5C,EAAI,KACrB,OAAO,KAE3B,IAAIsC,EAAQplE,EAAAzU,KAAKoB,gBACf6G,EACAtH,EACAU,EACA45E,EACIxmE,EAAA7G,cAAc40C,KACd04B,EACEzmE,EAAA7G,cAAcgsE,SACdnlE,EAAA7G,cAAcwpC,QACpBp4C,EAAAE,MAAMd,KAAY+8E,EAAY5D,EAAG76E,UAGnC,OADAm9E,EAAM35E,OAASk7E,EACRvB,EAOT,OALEvhF,KAAKuG,MACH0V,EAAAnY,eAAei9E,oBACf9B,EAAG76E,SAGA,MAGT+1E,EAAAl4E,UAAA49E,cAAA,SACEZ,EACAr3E,EACAmI,EACAovE,GAUA,IAAKF,EAAGr5B,iBAKN,OAJA5lD,KAAKuG,MACH0V,EAAAnY,eAAei9E,oBACf9B,EAAG76E,MAAM66E,EAAGhmE,MAEP,KAGT,IAAIrY,EAAOub,EAAAzU,KAAKe,2BAA2Bw2E,EAAG54B,iBAAkB44B,EAAG76E,SAC/D8+E,GAAuB,EAEvBtzE,EAA6C,KACjD,GAAIqvE,EAAGp5B,KAAKn/C,EAAAC,MAAM45C,UAAW,CAG3B,GAFA2iC,EAAiBjE,EAAGl8B,WACpBnzC,EAAiB5P,KAAKgiF,oBAAoB/C,IACrB,OAAO,KAC5Br3E,GAASnB,EAAApE,YAAYqjB,QAGvB,IAAKu5D,EAAGp5B,KAAKn/C,EAAAC,MAAM68C,WAKjB,OAJAxjD,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,MAAM66E,EAAGhmE,KAAM,KAEb,KAGLiqE,EAAiB,IACnBA,EAAiBjE,EAAGl8B,UAGtB,IAAI55C,EAAanJ,KAAKoiF,gBAAgBnD,GACtC,IAAK91E,EAAY,OAAO,KACxB,IAAIilB,EAAWpuB,KAAKg/E,oBAEhBmE,EAAwC,IAA5Bv7E,EAAQnB,EAAApE,YAAY2lB,KAChCm7D,IACuB,GAArBh6E,EAAW7D,QACbtF,KAAKuG,MACH0V,EAAAnY,eAAes/E,+CACfxiF,EAAKwD,OAGL+E,EAAW7D,QAAU6D,EAAW,GAAGJ,aACrC/I,KAAKuG,MACH0V,EAAAnY,eAAeu/E,oDACfziF,EAAKwD,QAKPwD,EAAQnB,EAAApE,YAAY0lB,KAClB5e,EAAW7D,QACbtF,KAAKuG,MACH0V,EAAAnY,eAAew/E,sCACf1iF,EAAKwD,OAKX,IAAIgF,EAAoC,KACxC,GAAI61E,EAAGp5B,KAAKn/C,EAAAC,MAAMy9C,UAChBh7C,EAAapJ,KAAKwgF,UAAUvB,GAAI,EAAMkE,IACrB,OAAO,KAGrB/5E,IACHA,EAAa+S,EAAAzU,KAAKc,kBAChBy2E,EAAG76E,MAAM66E,EAAGhmE,MAETkqE,GACHnjF,KAAKuG,MACH0V,EAAAnY,eAAe6pD,cACfvkD,EAAWhF,QAKjB,IAAI2O,EAAYoJ,EAAAzU,KAAKwB,gBACnBC,EACAC,EACAglB,GACA,EACA6wD,EAAG76E,MAAM8+E,EAAgBjE,EAAGhmE,MAG1BjG,EAAyB,KAC7B,GAAIisE,EAAGp5B,KAAKn/C,EAAAC,MAAM+9C,YAShB,GARI98C,EAAQnB,EAAApE,YAAYsjB,SACtB3lB,KAAKuG,MACH0V,EAAAnY,eAAekwD,yDACfirB,EAAG76E,WAIP4O,EAAOhT,KAAKujF,oBAAoBtE,GAAI,IACzB,OAAO,UACPr3E,EAAQnB,EAAApE,YAAYsjB,SAC/B3lB,KAAKuG,MACH0V,EAAAnY,eAAemwD,gFACfgrB,EAAG76E,MAAM66E,EAAGhmE,MAIhB,IAAI+4B,EAAM71B,EAAAzU,KAAKoL,0BACblS,EACAgP,EACAmD,EACAC,EACAjD,EACAnI,EACAq3E,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAGxB,OADAgmE,EAAGp5B,KAAKn/C,EAAAC,MAAM09C,WACPrS,GAGTmoC,EAAAl4E,UAAAuhF,wBAAA,SAAwBvE,GACtB,IACIr+E,EADAu+E,EAAWF,EAAGl8B,SAEd0gC,GAAU,EAOd,GAAIxE,EAAG7+B,OAAS15C,EAAAC,MAAM4Q,UAMpB,GAJE3W,EADEq+E,EAAGr5B,iBACEzpC,EAAAzU,KAAKe,2BAA2Bw2E,EAAG54B,iBAAkB44B,EAAG76E,SAExD+X,EAAAzU,KAAK2C,gCAAgC40E,EAAG76E,MAAM66E,EAAGhmE,OAErDgmE,EAAGp5B,KAAKn/C,EAAAC,MAAM68C,WAKjB,OAJAxjD,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,MAAM66E,EAAGhmE,KAAM,KAEb,UAQTwqE,GAAU,EACVhgF,OAAOw7E,EAAG7+B,OAAS15C,EAAAC,MAAM68C,WACzB5iD,EAAOub,EAAAzU,KAAK2C,gCAAgC40E,EAAG76E,MAAM66E,EAAGl8B,WAK1D,IAAImgC,EAAiBjE,EAAGhmE,IACpB9P,EAAanJ,KAAKoiF,gBAAgBnD,GACtC,OAAK91E,EAEEnJ,KAAK0jF,8BAA8BzE,EAAIr+E,EAAMuI,EAAYs6E,EAAStE,EAAU+D,GAF3D,MAKlB/I,EAAAl4E,UAAAyhF,8BAAR,SACEzE,EACAr+E,EACAuI,EACAs6E,EACAtE,EACA+D,QADA,IAAA/D,OAAiB,QACjB,IAAA+D,OAAuB,GAEnB/D,EAAW,IAAGA,EAAWv+E,EAAKwD,MAAMmB,OACpC29E,EAAiB,IAAGA,EAAiB/D,GAEzC,IAAI/1E,EAAoC,KACxC,GAAI61E,EAAGp5B,KAAKn/C,EAAAC,MAAMy9C,QAEhB,KADAh7C,EAAapJ,KAAKwgF,UAAUvB,IACX,OAAO,UAExB71E,EAAa+S,EAAAzU,KAAKc,kBAAkBy2E,EAAG76E,MAAM66E,EAAGhmE,MAChDjZ,KAAKuG,MACH0V,EAAAnY,eAAe6pD,cACfvkD,EAAWhF,OAIf,GAAIq/E,IACGxE,EAAGp5B,KAAKn/C,EAAAC,MAAM29C,oBAKjB,OAJAtkD,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,MAAM66E,EAAGhmE,KAAM,MAEb,KAIX,IAQIjG,EARAD,EAAYoJ,EAAAzU,KAAKwB,gBACnBC,EACAC,EACA,MACA,EACA61E,EAAG76E,MAAM8+E,EAAgBjE,EAAGhmE,MAI9B,GAAIwqE,EACFzwE,EAAOhT,KAAK8/E,eAAeb,GAAI,OAC1B,CACL,IAAKA,EAAGp5B,KAAKn/C,EAAAC,MAAM+9C,WAKjB,OAJA1kD,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,MAAM66E,EAAGhmE,KAAM,KAEb,KAETjG,EAAOhT,KAAKujF,oBAAoBtE,GAAI,GAEtC,IAAKjsE,EAAM,OAAO,KAElB,IAAIrH,EAAcwQ,EAAAzU,KAAKoL,0BACrBlS,EACA,KACAmS,EACAC,EACA,KACAywE,EAAUh9E,EAAApE,YAAYuK,MAAQnG,EAAApE,YAAYwF,KAC1Co3E,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAExB,OAAOkD,EAAAzU,KAAKgF,yBAAyBf,IAGvCwuE,EAAAl4E,UAAA89E,sBAAA,SACEd,EACAr3E,EACAmI,EACAovE,GAUA,IAAI/2D,EAAc62D,EAAG7+B,OAAS15C,EAAAC,MAAM+qB,UAEpC,IAAKutD,EAAGr5B,iBAKN,OAJA5lD,KAAKuG,MACH0V,EAAAnY,eAAei9E,oBACf9B,EAAG76E,SAEE,KAGT,IAKIwL,EALAD,EAAawM,EAAAzU,KAAKe,2BACpBw2E,EAAG54B,iBACH44B,EAAG76E,SAIL,GAAI66E,EAAGp5B,KAAKn/C,EAAAC,MAAM45C,UAAW,CAE3B,KADA3wC,EAAiB5P,KAAKgiF,oBAAoB/C,IACrB,OAAO,KAC5Br3E,GAASnB,EAAApE,YAAYqjB,aAErB9V,KAGF,IAAIjH,EAA+B,KACnC,GAAIs2E,EAAGp5B,KAAKn/C,EAAAC,MAAMs4C,SAAU,CAC1B,IAAI19C,EAAIvB,KAAKwgF,UAAUvB,GACvB,IAAK19E,EAAG,OAAO,KACf,GAAIA,EAAEwF,MAAQoV,EAAAtV,SAASuO,KAKrB,OAJApV,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACfhmB,EAAE6C,OAEG,KAETuE,EAAwBpH,EAG1B,IAAIsO,EAAqC,KACzC,GAAIovE,EAAGp5B,KAAKn/C,EAAAC,MAAMy4C,YAAa,CACzBh3B,GACFpoB,KAAKuG,MACH0V,EAAAnY,eAAe6/E,oDACf1E,EAAG76E,SAGP,EAAG,CACD,IAAIiE,EAAOrI,KAAKwgF,UAAUvB,GAC1B,IAAK52E,EAAM,OAAO,KACb+f,IACEvY,IAAiBA,MACtBA,EAAgBhK,KAAewC,UAE1B42E,EAAGp5B,KAAKn/C,EAAAC,MAAMyQ,QAGzB,IAAK6nE,EAAGp5B,KAAKn/C,EAAAC,MAAM+9C,WAKjB,OAJA1kD,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAEP,KAGT,IACIuH,EADAmE,EAAU,IAAI3J,MAyBlB,GAvBIiiB,GACF3kB,QAAQoM,GACRlE,EAAcwQ,EAAAzU,KAAK6K,2BACjB5C,EACAC,EACAjH,EACAmH,EACAC,EACAnI,EACAq3E,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,OAGxBtN,EAAcwQ,EAAAzU,KAAKgI,uBACjBC,EACAC,EACAjH,EACAkH,EACAC,EACAC,EACAnI,EACAq3E,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,OAGrBgmE,EAAGp5B,KAAKn/C,EAAAC,MAAMg+C,YACjB,EAAG,CACD,IAAI1qC,EAASja,KAAK4jF,iBAAiB3E,EAAItzE,GACvC,IAAKsO,EAAQ,OAAO,KACpBA,EAAOtS,OAASgE,EAChBmE,EAAQjK,KAA2BoU,UAC3BglE,EAAGp5B,KAAKn/C,EAAAC,MAAMg+C,aAE1B,OAAOh5C,GAGTwuE,EAAAl4E,UAAA4hF,qBAAA,SAAqB5E,GAInB,IACIr+E,EADAu+E,EAAWF,EAAGl8B,SASlB,GALEniD,EADEq+E,EAAGr5B,iBACEzpC,EAAAzU,KAAKe,2BAA2Bw2E,EAAG54B,iBAAkB44B,EAAG76E,SAExD+X,EAAAzU,KAAK2C,gCAAgC40E,EAAG76E,MAAM66E,EAAGhmE,OAGrDgmE,EAAGp5B,KAAKn/C,EAAAC,MAAM+9C,WAKjB,OAJA1kD,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,MAAM66E,EAAGhmE,KAAM,KAEb,KAGT,IAAInJ,EAAU,IAAI3J,MACdwF,EAAcwQ,EAAAzU,KAAKgI,uBACrB9O,KAEA,KACA,KACAkP,EACA,KACArJ,EAAApE,YAAYwF,KACZo3E,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAExB,IAAKgmE,EAAGp5B,KAAKn/C,EAAAC,MAAMg+C,YACjB,EAAG,CACD,IAAI1qC,EAASja,KAAK4jF,iBAAiB3E,EAAItzE,GACvC,IAAKsO,EAAQ,OAAO,KACpBA,EAAOtS,OAASgE,EAChBmE,EAAQjK,KAA2BoU,UAC3BglE,EAAGp5B,KAAKn/C,EAAAC,MAAMg+C,aAE1B,OAAOxoC,EAAAzU,KAAKgE,sBAAsBC,IAGpCwuE,EAAAl4E,UAAA2hF,iBAAA,SACE3E,EACAt3E,GAcA,IAJA,IAAIw3E,EAAWF,EAAGhmE,IACdmP,EAAczgB,EAAOZ,MAAQoV,EAAAtV,SAASqU,qBAEtCnL,EAAa,IAAI5J,MACd84E,EAAGp5B,KAAKn/C,EAAAC,MAAMi+C,KAAK,CACxB,IAAI7oC,EAAY/b,KAAKo/E,eAAeH,GACpC,IAAKljE,EAAW,MACZqM,GACFpoB,KAAKuG,MACH0V,EAAAnY,eAAew8E,8BACfvkE,EAAU3X,OAGd2L,EAAWlK,KAAoBkW,GAIjC,IAAInU,EAAQD,EAAOC,MAAQnB,EAAApE,YAAYsjB,QAGnCyC,IAAaxgB,GAASnB,EAAApE,YAAY81E,SAElC8G,EAAGp5B,KAAKn/C,EAAAC,MAAMm5C,SACZ13B,GACFpoB,KAAKuG,MACH0V,EAAAnY,eAAeu8E,gCACfpB,EAAG76E,QAAS,UAGhBwD,GAASnB,EAAApE,YAAYy9C,QACZm/B,EAAGp5B,KAAKn/C,EAAAC,MAAMi5C,UACnBx3B,GACFpoB,KAAKuG,MACH0V,EAAAnY,eAAeu8E,gCACfpB,EAAG76E,QAAS,WAGhBwD,GAASnB,EAAApE,YAAYu9C,SACZq/B,EAAGp5B,KAAKn/C,EAAAC,MAAMk5C,aACnBz3B,GACFpoB,KAAKuG,MACH0V,EAAAnY,eAAeu8E,gCACfpB,EAAG76E,QAAS,aAGhBwD,GAASnB,EAAApE,YAAYw9C,WAGvB,IAAIikC,EAAmB,EACnBC,EAAiB,EACjBC,EAAqB,EACrBC,EAAmB,EACnBhF,EAAGp5B,KAAKn/C,EAAAC,MAAMoT,SACZqO,GACFpoB,KAAKuG,MACH0V,EAAAnY,eAAeu8E,gCACfpB,EAAG76E,QAAS,UAGhBwD,GAASnB,EAAApE,YAAY0X,OACrB+pE,EAAc7E,EAAGl8B,SACjBghC,EAAY9E,EAAGhmE,MAEfrR,GAASnB,EAAApE,YAAY6rB,SACjB+wD,EAAGp5B,KAAKn/C,EAAAC,MAAM6hB,YACZJ,GACFpoB,KAAKuG,MACH0V,EAAAnY,eAAeu8E,gCACfpB,EAAG76E,QAAS,YAGhBwD,GAASnB,EAAApE,YAAYmmB,SACrBw7D,EAAgB/E,EAAGl8B,SACnBkhC,EAAchF,EAAGhmE,KAEftR,EAAOC,MAAQnB,EAAApE,YAAYqjB,UAC7B9d,GAASnB,EAAApE,YAAY60D,kBAIzB,IAAIgtB,EAAqB,EACrBC,EAAmB,EACnBlF,EAAGp5B,KAAKn/C,EAAAC,MAAM4hB,YAChB3gB,GAASnB,EAAApE,YAAYkmB,SACrB27D,EAAgBjF,EAAGl8B,SACnBohC,EAAclF,EAAGhmE,KAInB,IAAI+sC,EAAQi5B,EAAGl5B,OACXmO,GAAgB,EAChBvqC,GAAW,EAGXw5D,GAAW,EACX3zC,EAAgB,EAChB40C,EAAc,EAwDlB,GAvDKh8D,IACC62D,EAAGp5B,KAAKn/C,EAAAC,MAAMohB,KACZk3D,EAAG15B,MAAK,EAAM7+C,EAAA23C,mBAAmB8G,SAAWz+C,EAAAC,MAAMU,YAAe43E,EAAG/7B,mBAYtE+7B,EAAG74B,MAAMJ,IAXTp+C,GAASnB,EAAApE,YAAY0lB,IACrB4B,GAAW,EACX6lB,EAAWyvC,EAAGl8B,SACdqhC,EAASnF,EAAGhmE,IACRrR,EAAQnB,EAAApE,YAAYkmB,UACtBvoB,KAAKuG,MACH0V,EAAAnY,eAAeu8E,gCACfpB,EAAG76E,MAAM8/E,EAAeC,GAAc,aAMnClF,EAAGp5B,KAAKn/C,EAAAC,MAAMqhB,KACnBi3D,EAAG15B,MAAK,EAAM7+C,EAAA23C,mBAAmB8G,SAAWz+C,EAAAC,MAAMU,YAAe43E,EAAG/7B,mBAYtE+7B,EAAG74B,MAAMJ,IAXTp+C,GAASnB,EAAApE,YAAY2lB,IAAMvhB,EAAApE,YAAY2lB,IACvCm7D,GAAW,EACX3zC,EAAWyvC,EAAGl8B,SACdqhC,EAASnF,EAAGhmE,IACRrR,EAAQnB,EAAApE,YAAYkmB,UACtBvoB,KAAKuG,MACH0V,EAAAnY,eAAeu8E,gCACfpB,EAAG76E,MAAM8/E,EAAeC,GAAc,aAMnClF,EAAGp5B,KAAKn/C,EAAAC,MAAM0Q,eAEvB68C,GAAgB,GADhBtsD,GAASnB,EAAApE,YAAYgV,aAET5Q,EAAApE,YAAY0X,QACtB/Z,KAAKuG,MACH0V,EAAAnY,eAAeu8E,gCACfpB,EAAG76E,MAAM0/E,EAAaC,GAAY,UAGlCn8E,EAAQnB,EAAApE,YAAYmmB,UACtBxoB,KAAKuG,MACH0V,EAAAnY,eAAeu8E,gCACfpB,EAAG76E,MAAM4/E,EAAeC,GAAc,YAGtCr8E,EAAQnB,EAAApE,YAAYkmB,UACtBvoB,KAAKuG,MACH0V,EAAAnY,eAAeu8E,gCACfpB,EAAG76E,MAAM8/E,EAAeC,GAAc,eAMzCjwB,IAAkB+qB,EAAGr5B,iBAKxB,OAJA5lD,KAAKuG,MACH0V,EAAAnY,eAAei9E,oBACf9B,EAAG76E,SAEE,KAGT,IAAIxD,EAAOszD,EACP/3C,EAAAzU,KAAKsE,4BAA4BizE,EAAG76E,SACpC+X,EAAAzU,KAAKe,2BAA2Bw2E,EAAG54B,iBAAkB44B,EAAG76E,SACxDwL,EAA6C,KACjD,GAAIqvE,EAAGp5B,KAAKn/C,EAAAC,MAAM45C,UAAW,CAC3B,IAAI8jC,EAAsBpF,EAAGl8B,SAE7B,KADAnzC,EAAiB5P,KAAKgiF,oBAAoB/C,IACrB,OAAO,KACxB/qB,EACFl0D,KAAKuG,MACH0V,EAAAnY,eAAewgF,2DACfrF,EAAG76E,MAAMigF,EAAqBpF,EAAGhmE,MAE1B0Q,GAAYw5D,EACrBnjF,KAAKuG,MACH0V,EAAAnY,eAAeygF,wCACftF,EAAG76E,MAAMigF,EAAqBpF,EAAGhmE,MAGnCrR,GAASnB,EAAApE,YAAYqjB,QAKzB,GAAIu5D,EAAGp5B,KAAKn/C,EAAAC,MAAM68C,WAAY,CAC5B,IAAI0/B,EAAiBjE,EAAGl8B,SACpB55C,EAAanJ,KAAKoiF,gBAAgBnD,EAAI/qB,GAC1C,IAAK/qD,EAAY,OAAO,KACxB,IAAIilB,EAAWpuB,KAAKg/E,oBACpB,GAAI9qB,EACF,IAAK,IAAI7zD,EAAI,EAAGsK,EAAIxB,EAAW7D,OAAQjF,EAAIsK,IAAKtK,EAAG,CACjD,IAAI4gF,EAAY93E,EAAW9I,GAC3B,GAAI4gF,EAAUj5E,MACZvB,EAAApE,YAAYy9C,OACZr5C,EAAApE,YAAYw9C,UACZp5C,EAAApE,YAAYu9C,QACZn5C,EAAApE,YAAYkmB,UACX,CACD,IAAI/S,EAA2B2G,EAAAzU,KAAK+K,uBAClCwuE,EAAUrgF,KACVqgF,EAAU54E,KACV,KACA,KACA44E,EAAUr5E,MAAQnB,EAAApE,YAAY6rB,SAC9B+yD,EAAU78E,OAEZoR,EAAyBqF,eAAiBxa,EAC1CmV,EAAyB7N,OAASA,EAClCs5E,EAAUzrE,yBAA2BA,EACrC7N,EAAOmI,QAAQjK,KAAK2P,SAGfmU,EACLxgB,EAAW7D,QACbtF,KAAKuG,MACH0V,EAAAnY,eAAew/E,sCACf1iF,EAAKwD,OAGA++E,IACgB,GAArBh6E,EAAW7D,QACbtF,KAAKuG,MACH0V,EAAAnY,eAAes/E,+CACfxiF,EAAKwD,OAGL+E,EAAW7D,QAAU6D,EAAW,GAAGJ,aACrC/I,KAAKuG,MACH0V,EAAAnY,eAAeu/E,oDACfziF,EAAKwD,QAKX,IAAIgF,EAAoC,KACxC,GAAI61E,EAAGp5B,KAAKn/C,EAAAC,MAAMy9C,QAahB,GAZIxjD,EAAKmG,MAAQoV,EAAAtV,SAASwQ,YACxBrX,KAAKuG,MACH0V,EAAAnY,eAAe0gF,2DACfvF,EAAG76E,SAEI++E,GACTnjF,KAAKuG,MACH0V,EAAAnY,eAAe2gF,oDACfxF,EAAG76E,WAGPgF,EAAapJ,KAAKwgF,UAAUvB,EAAIr+E,EAAKmG,MAAQoV,EAAAtV,SAASwQ,aAAe8rE,IACpD,OAAO,UAExB/5E,EAAa+S,EAAAzU,KAAKc,kBAAkBy2E,EAAG76E,MAAM66E,EAAGhmE,MAC3CkqE,GAAYviF,EAAKmG,MAAQoV,EAAAtV,SAASwQ,aACrCrX,KAAKuG,MACH0V,EAAAnY,eAAe6pD,cACfvkD,EAAWhF,OAKjB,IAAI2O,EAAYoJ,EAAAzU,KAAKwB,gBACnBC,EACAC,EACAglB,GACA,EACA6wD,EAAG76E,MAAM8+E,EAAgBjE,EAAGhmE,MAG1BjG,EAAyB,KAC7B,GAAIisE,EAAGp5B,KAAKn/C,EAAAC,MAAM+9C,YAahB,GAZI98C,EAAQnB,EAAApE,YAAYsjB,QACtB3lB,KAAKuG,MACH0V,EAAAnY,eAAekwD,yDACfirB,EAAG76E,SAEIwD,EAAQnB,EAAApE,YAAYmmB,UAC7BxoB,KAAKuG,MACH0V,EAAAnY,eAAe4gF,qEACfzF,EAAG76E,QAASxD,EAAKwE,QAGrB4N,EAAOhT,KAAKujF,oBAAoBtE,GAAI,IACzB,OAAO,UACPr3E,EAAQnB,EAAApE,YAAYsjB,SAAayC,GAC5CpoB,KAAKuG,MACH0V,EAAAnY,eAAemwD,gFACfgrB,EAAG76E,SAIP,IAAIugF,EAAYxoE,EAAAzU,KAAKwL,wBACnBtS,EACAgP,EACAmD,EACAC,EACAjD,EACAnI,EACAq3E,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAGxB,OADAgmE,EAAGp5B,KAAKn/C,EAAAC,MAAM09C,WACPsgC,EAEF,GAAIzwB,EACTl0D,KAAKuG,MACH0V,EAAAnY,eAAe8gF,sCACfhkF,EAAKwD,WAGF,KAAIulB,IAAYw5D,EAOhB,CACDv7E,EAAQnB,EAAApE,YAAYmmB,UACtBxoB,KAAKuG,MACH0V,EAAAnY,eAAeu8E,gCACfpB,EAAG76E,MAAM4/E,EAAeC,GAAc,YAItCr8E,EAAQnB,EAAApE,YAAY0lB,KACtB/nB,KAAKuG,MACH0V,EAAAnY,eAAeu8E,gCACfpB,EAAG76E,MAzOW,EACF,GAwOgB,OAI5BwD,EAAQnB,EAAApE,YAAY2lB,KACtBhoB,KAAKuG,MACH0V,EAAAnY,eAAeu8E,gCACfpB,EAAG76E,MAAMorC,EAAU40C,GAAS,OAIhC,IAAI/7E,EAA8B,KAClC,GAAI42E,EAAGp5B,KAAKn/C,EAAAC,MAAMy9C,QAEhB,KADA/7C,EAAOrI,KAAKwgF,UAAUvB,IACX,OAAO,UAElBj/E,KAAKuG,MACH0V,EAAAnY,eAAe6pD,cACfsxB,EAAG76E,SAGP,IAAI2E,EAAiC,KACrC,GAAIk2E,EAAGp5B,KAAKn/C,EAAAC,MAAMo7C,WAChBh5C,EAAc/I,KAAK6hF,gBAAgB5C,IACjB,OAAO,KAE3B,IAAI4F,EAAW1oE,EAAAzU,KAAK+K,uBAClB7R,EACAyH,EACAU,EACAgH,EACAnI,EACAq3E,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAGxB,OADAgmE,EAAGp5B,KAAKn/C,EAAAC,MAAM09C,WACPwgC,EApDP7kF,KAAKuG,MACH0V,EAAAnY,eAAemwD,gFACfrzD,EAAKwD,OAoDT,OAAO,MAGT+1E,EAAAl4E,UAAA+9E,eAAA,SACEf,EACAr3E,EACAmI,EACAovE,GAKA,GAAIF,EAAGr5B,iBAAkB,CACvB,IAAIj2C,EAAawM,EAAAzU,KAAKe,2BAA2Bw2E,EAAG54B,iBAAkB44B,EAAG76E,SACzE,GAAI66E,EAAGp5B,KAAKn/C,EAAAC,MAAM+9C,WAAY,CAS5B,IARA,IAAI50C,EAAU,IAAI3J,MACdzE,EAAKya,EAAAzU,KAAK0L,2BACZzD,EACAG,EACAC,EACAnI,EACAq3E,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,OAEhBgmE,EAAGp5B,KAAKn/C,EAAAC,MAAMg+C,aAAa,CACjC,IAAI1qC,EAASja,KAAKk/E,uBAAuBD,EAAIv9E,GAC7C,IAAKuY,EAAQ,OAAO,KACpBA,EAAOtS,OAASjG,EAChBoO,EAAQjK,KAAKoU,GAGf,OADAglE,EAAGp5B,KAAKn/C,EAAAC,MAAM09C,WACP3iD,EAEP1B,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,UAIhBpE,KAAKuG,MACH0V,EAAAnY,eAAei9E,oBACf9B,EAAG76E,SAGP,OAAO,MAGT+1E,EAAAl4E,UAAAm+E,YAAA,SACEnB,EACAr3E,EACAu3E,GAKA,IAAItuE,EAAuC,KAC3C,GAAIouE,EAAGp5B,KAAKn/C,EAAAC,MAAM+9C,WAAY,CAE5B,IADA,IAAI50C,EAAU,IAAI3J,OACV84E,EAAGp5B,KAAKn/C,EAAAC,MAAMg+C,aAAa,CAC/B,IAAI1qC,EAASja,KAAK8kF,kBAAkB7F,GACpC,IAAKhlE,EAAQ,OAAO,KAEtB,GADEnK,EAAQjK,KAAKoU,IACVglE,EAAGp5B,KAAKn/C,EAAAC,MAAMyQ,OAAQ,CACzB,GAAI6nE,EAAGp5B,KAAKn/C,EAAAC,MAAMg+C,YAChB,MAMA,OAJA3kD,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAEP,MAIb,GAAI66E,EAAGp5B,KAAKn/C,EAAAC,MAAMw4C,MAAO,CACvB,IAAI8/B,EAAGp5B,KAAKn/C,EAAAC,MAAM48C,eAOhB,OAJAvjD,KAAKuG,MACH0V,EAAAnY,eAAeylB,wBACf01D,EAAG76E,SAEE,KANPyM,EAAOsL,EAAAzU,KAAK6G,8BAA8B0wE,EAAG3sC,aAAc2sC,EAAG76E,SAgBlE,OALqB,QADjB8M,GADA8gC,EAAM71B,EAAAzU,KAAKkJ,sBAAsBd,EAASe,EAAMjJ,EAAOq3E,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,OAC1D/H,eACOlR,KAAK6+E,QAAQ15D,IAAIjU,KAC7ClR,KAAK4+E,QAAQ/4E,KAAKqL,GAClBlR,KAAK6+E,QAAQ3zD,IAAIha,IAEnB+tE,EAAGp5B,KAAKn/C,EAAAC,MAAM09C,WACPrS,EACF,GAAIitC,EAAGp5B,KAAKn/C,EAAAC,MAAMq6C,UACvB,GAAIi+B,EAAGp5B,KAAKn/C,EAAAC,MAAMw4C,MAAO,CACvB,GAAI8/B,EAAGp5B,KAAKn/C,EAAAC,MAAM48C,eAAgB,CAChC1yC,EAAOsL,EAAAzU,KAAK6G,8BAA8B0wE,EAAG3sC,aAAc2sC,EAAG76E,SAC9D,IAAI4tC,EAAM71B,EAAAzU,KAAKkJ,sBAAsB,KAAMC,EAAMjJ,EAAOq3E,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAC1E/H,EAAezN,OAAOuuC,EAAI9gC,cAC1BpM,EAASm6E,EAAGn6E,OAQhB,OAPKA,EAAOiU,cAAajU,EAAOiU,YAAc,IAAIkS,KAClDnmB,EAAOiU,YAAYmS,IAAIha,GAClBlR,KAAK6+E,QAAQ15D,IAAIjU,KACpBlR,KAAK4+E,QAAQ/4E,KAAKqL,GAClBlR,KAAK6+E,QAAQ3zD,IAAIha,IAEnB+tE,EAAGp5B,KAAKn/C,EAAAC,MAAM09C,WACPrS,EAEPhyC,KAAKuG,MACH0V,EAAAnY,eAAeylB,wBACf01D,EAAG76E,cAIPpE,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,aAIhBpE,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAGhB,OAAO,MAGT+1E,EAAAl4E,UAAA6iF,kBAAA,SACE7F,GAKA,GAAIA,EAAGr5B,iBAAkB,CACvB,IAAIj2C,EAAawM,EAAAzU,KAAKe,2BAA2Bw2E,EAAG54B,iBAAkB44B,EAAG76E,SACrE2gF,EAA4C,KAChD,GAAI9F,EAAGp5B,KAAKn/C,EAAAC,MAAM43C,IAAK,CACrB,IAAI0gC,EAAGn5B,qBAOL,OAJA9lD,KAAKuG,MACH0V,EAAAnY,eAAei9E,oBACf9B,EAAG76E,SAEE,KANP2gF,EAAe5oE,EAAAzU,KAAKe,2BAA2Bw2E,EAAG54B,iBAAkB44B,EAAG76E,SAS3E,OAAO+X,EAAAzU,KAAK6J,mBACV5B,EACAo1E,EACAA,EACIr+E,EAAAE,MAAMd,KAAK6J,EAAWvL,MAAO2gF,EAAa3gF,OAC1CuL,EAAWvL,OAQnB,OALEpE,KAAKuG,MACH0V,EAAAnY,eAAei9E,oBACf9B,EAAG76E,SAGA,MAGT+1E,EAAAl4E,UAAAi+E,YAAA,SACEjB,GAOA,IAAIE,EAAWF,EAAGl8B,SACdjzC,EAAsC,KACtCqC,EAA6C,KAC7C6yE,GAAW,EACf,GAAI/F,EAAGp5B,KAAKn/C,EAAAC,MAAM+9C,WAEhB,IADA50C,EAAU,IAAI3J,OACN84E,EAAGp5B,KAAKn/C,EAAAC,MAAMg+C,aAAa,CACjC,IAAI1qC,EAASja,KAAKilF,uBAAuBhG,GACzC,IAAKhlE,EAAQ,OAAO,KAEpB,GADAnK,EAAQjK,KAAKoU,IACRglE,EAAGp5B,KAAKn/C,EAAAC,MAAMyQ,OAAQ,CACzB,GAAI6nE,EAAGp5B,KAAKn/C,EAAAC,MAAMg+C,YAChB,MAMA,OAJA3kD,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAEP,WAIR,GAAI66E,EAAGp5B,KAAKn/C,EAAAC,MAAMq6C,UAAW,CAClC,IAAIi+B,EAAGp5B,KAAKn/C,EAAAC,MAAM43C,IAehB,OAJAv+C,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,MAEP,KAdP,IAAI66E,EAAGr5B,iBAOL,OAJA5lD,KAAKuG,MACH0V,EAAAnY,eAAei9E,oBACf9B,EAAG76E,SAEE,KANP+N,EAAgBgK,EAAAzU,KAAKe,2BAA2Bw2E,EAAG54B,iBAAkB44B,EAAG76E,cAgB5E4gF,GAAW,EAGb,GAAIA,GAAY/F,EAAGp5B,KAAKn/C,EAAAC,MAAMw4C,MAAO,CACnC,GAAI8/B,EAAGp5B,KAAKn/C,EAAAC,MAAM48C,eAAgB,CAChC,IAAI1yC,EAAOsL,EAAAzU,KAAK6G,8BAA8B0wE,EAAG3sC,aAAc2sC,EAAG76E,SAC9D4tC,OAAG,EACH7/B,GACF1O,QAAQqM,GACRkiC,EAAM71B,EAAAzU,KAAK0K,kCAAkCD,EAAetB,EAAMouE,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,OAExF+4B,EAAM71B,EAAAzU,KAAKqK,sBAAsBjC,EAASe,EAAMouE,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAExE,IAAI/H,EAAe8gC,EAAI9gC,aAMvB,OALKlR,KAAK6+E,QAAQ15D,IAAIjU,KACpBlR,KAAK4+E,QAAQ/4E,KAAKqL,GAClBlR,KAAK6+E,QAAQ3zD,IAAIha,IAEnB+tE,EAAGp5B,KAAKn/C,EAAAC,MAAM09C,WACPrS,EAEPhyC,KAAKuG,MACH0V,EAAAnY,eAAeylB,wBACf01D,EAAG76E,cAIPpE,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,QAGhB,OAAO,MAGT+1E,EAAAl4E,UAAAgjF,uBAAA,SACEhG,GAKA,GAAIA,EAAGn5B,qBAAsB,CAC3B,IAAIn2C,EAAawM,EAAAzU,KAAKe,2BAA2Bw2E,EAAG54B,iBAAkB44B,EAAG76E,SACrE2gF,EAA4C,KAChD,GAAI9F,EAAGp5B,KAAKn/C,EAAAC,MAAM43C,IAAK,CACrB,IAAI0gC,EAAGr5B,iBAOL,OAJA5lD,KAAKuG,MACH0V,EAAAnY,eAAei9E,oBACf9B,EAAG76E,SAEE,KANP2gF,EAAe5oE,EAAAzU,KAAKe,2BAA2Bw2E,EAAG54B,iBAAkB44B,EAAG76E,SAS3E,OAAO+X,EAAAzU,KAAK2K,wBACV1C,EACAo1E,EACAA,EACIr+E,EAAAE,MAAMd,KAAK6J,EAAWvL,MAAO2gF,EAAa3gF,OAC1CuL,EAAWvL,OAQnB,OALEpE,KAAKuG,MACH0V,EAAAnY,eAAei9E,oBACf9B,EAAG76E,SAGA,MAGT+1E,EAAAl4E,UAAAg+E,kBAAA,SACEhB,EACAE,GAKA,GAAIF,EAAGr5B,iBAAkB,CACvB,IAAIm/B,EAAe5oE,EAAAzU,KAAKe,2BAA2Bw2E,EAAG54B,iBAAkB44B,EAAG76E,SAC3E,GAAI66E,EAAGp5B,KAAKn/C,EAAAC,MAAMo7C,QAAS,CACzB,GAAIk9B,EAAGr5B,iBAAkB,CACvB,IAAIj2C,EAAawM,EAAAzU,KAAKe,2BAA2Bw2E,EAAG54B,iBAAkB44B,EAAG76E,SACrE4tC,EAAM71B,EAAAzU,KAAK0J,4BAA4BzB,EAAYo1E,EAAc9F,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAE3F,OADAgmE,EAAGp5B,KAAKn/C,EAAAC,MAAM09C,WACPrS,EAEPhyC,KAAKuG,MACH0V,EAAAnY,eAAei9E,oBACf9B,EAAG76E,cAIPpE,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,UAIhBpE,KAAKuG,MACH0V,EAAAnY,eAAei9E,oBACf9B,EAAG76E,SAGP,OAAO,MAGT+1E,EAAAl4E,UAAA69E,eAAA,SACEb,EACAiG,QAAA,IAAAA,OAAA,GAKA,IAAIl/B,EAAQi5B,EAAGl5B,OAEX31C,EAA8B,KAClC,OAFY6uE,EAAGr7D,QAGb,KAAKld,EAAAC,MAAMwT,MACT/J,EAAYpQ,KAAKmlF,WAAWlG,GAC5B,MAEF,KAAKv4E,EAAAC,MAAMglB,MACTvb,EAAYpQ,KAAK4/E,cAAcX,EAAIx4E,EAAApE,YAAYspB,MAAO,KAAMszD,EAAGl8B,UAC/D,MAEF,KAAKr8C,EAAAC,MAAMyT,SACThK,EAAYpQ,KAAKolF,cAAcnG,GAC/B,MAEF,KAAKv4E,EAAAC,MAAM0T,GACTjK,EAAYpQ,KAAKqlF,iBAAiBpG,GAClC,MAEF,KAAKv4E,EAAAC,MAAMmU,IACT1K,EAAYpQ,KAAKslF,kBAAkBrG,GACnC,MAEF,KAAKv4E,EAAAC,MAAMoU,GACT3K,EAAYpQ,KAAKulF,iBAAiBtG,GAClC,MAEF,KAAKv4E,EAAAC,MAAM64C,IACTpvC,EAAYpQ,KAAK4/E,cAAcX,EAAIx4E,EAAApE,YAAYm9C,IAAK,KAAMy/B,EAAGl8B,UAC7D,MAEF,KAAKr8C,EAAAC,MAAMq5C,IACT5vC,EAAYpQ,KAAK4/E,cAAcX,EAAIx4E,EAAApE,YAAYwF,KAAM,KAAMo3E,EAAGl8B,UAC9D,MAEF,KAAKr8C,EAAAC,MAAM+9C,UACTt0C,EAAYpQ,KAAKujF,oBAAoBtE,EAAIiG,GACzC,MAEF,KAAKx+E,EAAAC,MAAMwU,OACL+pE,GACFllF,KAAKuG,MACH0V,EAAAnY,eAAe0hF,2DACfvG,EAAG76E,SAGPgM,EAAYpQ,KAAK+hF,YAAY9C,GAC7B,MAEF,KAAKv4E,EAAAC,MAAM09C,UACT,OAAOloC,EAAAzU,KAAK4I,qBAAqB2uE,EAAG76E,MAAM66E,EAAGl8B,WAE/C,KAAKr8C,EAAAC,MAAM0U,OACTjL,EAAYpQ,KAAKylF,qBAAqBxG,GACtC,MAEF,KAAKv4E,EAAAC,MAAM2U,MACTlL,EAAYpQ,KAAK0lF,oBAAoBzG,GACrC,MAEF,KAAKv4E,EAAAC,MAAM4U,IACTnL,EAAYpQ,KAAK2lF,kBAAkB1G,GACnC,MAEF,KAAKv4E,EAAAC,MAAM+U,KACTtL,EAAYpQ,KAAK4lF,mBAAmB3G,GACpC,MAEF,KAAKv4E,EAAAC,MAAMgV,MACTvL,EAAYpQ,KAAK6lF,oBAAoB5G,GACrC,MAEF,KAAKv4E,EAAAC,MAAMyO,KACT,GAAI6pE,EAAG15B,MAAK,EAAO7+C,EAAA23C,mBAAmB8G,SAAWz+C,EAAAC,MAAMU,WAAY,CACjE+I,EAAYpQ,KAAKmgF,qBAAqBlB,EAAIx4E,EAAApE,YAAYwF,KAAM,KAAMo3E,EAAGl8B,UACrE,MAIJ,QACEk8B,EAAG74B,MAAMJ,GACT51C,EAAYpQ,KAAK8lF,yBAAyB7G,GAU9C,OANK7uE,EAIH6uE,EAAG94B,QAAQH,IAHXi5B,EAAG74B,MAAMJ,GACThmD,KAAKq/E,cAAcJ,IAId7uE,GAGT+pE,EAAAl4E,UAAAshF,oBAAA,SACEtE,EACAiG,GAOA,IAFA,IAAI/F,EAAWF,EAAGl8B,SACd1zC,EAAa,IAAIlJ,OACb84E,EAAGp5B,KAAKn/C,EAAAC,MAAMg+C,aAAa,CACjC,IAAIqB,EAAQi5B,EAAGl5B,OACX31C,EAAYpQ,KAAK8/E,eAAeb,EAAIiG,GACxC,GAAK90E,EAKH6uE,EAAG94B,QAAQH,GACX32C,EAAWxJ,KAAKuK,OANF,CACd,GAAI6uE,EAAG7+B,OAAS15C,EAAAC,MAAM2+C,UAAW,OAAO,KACxC25B,EAAG74B,MAAMJ,GACThmD,KAAKq/E,cAAcJ,IAMvB,IAAIjtC,EAAM71B,EAAAzU,KAAK0H,qBAAqBC,EAAY4vE,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAEtE,OADAgmE,EAAGp5B,KAAKn/C,EAAAC,MAAM09C,WACPrS,GAGTmoC,EAAAl4E,UAAAkjF,WAAA,SACElG,GAKA,IAAItvE,EAA0C,KAC1CsvE,EAAG15B,MAAK,IAAS7+C,EAAAC,MAAMU,YAAe43E,EAAG/7B,qBAC3C+7B,EAAGr7D,KAAKld,EAAA23C,mBAAmB8G,QAC3Bx1C,EAAawM,EAAAzU,KAAKe,2BAA2Bw2E,EAAG54B,iBAAkB44B,EAAG76E,UAEvE,IAAI4tC,EAAM71B,EAAAzU,KAAK6H,qBAAqBI,EAAYsvE,EAAG76E,SAEnD,OADA66E,EAAGp5B,KAAKn/C,EAAAC,MAAM09C,WACPrS,GAGTmoC,EAAAl4E,UAAAmjF,cAAA,SACEnG,GAKA,IAAItvE,EAA0C,KAC1CsvE,EAAG15B,MAAK,IAAS7+C,EAAAC,MAAMU,YAAe43E,EAAG/7B,qBAC3C+7B,EAAGr7D,KAAKld,EAAA23C,mBAAmB8G,QAC3Bx1C,EAAawM,EAAAzU,KAAKe,2BAA2Bw2E,EAAG54B,iBAAkB44B,EAAG76E,UAEvE,IAAI4tC,EAAM71B,EAAAzU,KAAKuI,wBAAwBN,EAAYsvE,EAAG76E,SAEtD,OADA66E,EAAGp5B,KAAKn/C,EAAAC,MAAM09C,WACPrS,GAGTmoC,EAAAl4E,UAAAojF,iBAAA,SACEpG,GAKA,IAAIE,EAAWF,EAAGl8B,SACd3yC,EAAYpQ,KAAK8/E,eAAeb,GACpC,IAAK7uE,EAAW,OAAO,KAEvB,GAAI6uE,EAAGp5B,KAAKn/C,EAAAC,MAAMgV,OAEhB,GAAIsjE,EAAGp5B,KAAKn/C,EAAAC,MAAM68C,WAAY,CAC5B,IAAIr1C,EAAYnO,KAAK6hF,gBAAgB5C,GACrC,IAAK9wE,EAAW,OAAO,KAEvB,GAAI8wE,EAAGp5B,KAAKn/C,EAAAC,MAAM88C,YAAa,CAC7B,IAAIzR,EAAM71B,EAAAzU,KAAKyI,kBAA6BC,EAAuBjC,EAAW8wE,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAEpG,OADAgmE,EAAGp5B,KAAKn/C,EAAAC,MAAM09C,WACPrS,EAEPhyC,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,UAIhBpE,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,UAIhBpE,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,SAGhB,OAAO,MAGT+1E,EAAAl4E,UAAA6jF,yBAAA,SACE7G,GAKA,IAAI90E,EAAOnK,KAAK6hF,gBAAgB5C,GAChC,IAAK90E,EAAM,OAAO,KAElB,IAAI6nC,EAAM71B,EAAAzU,KAAK+J,0BAA0BtH,GAEzC,OADA80E,EAAGp5B,KAAKn/C,EAAAC,MAAM09C,WACPrS,GAGTmoC,EAAAl4E,UAAAqjF,kBAAA,SACErG,GAKA,IAAIE,EAAWF,EAAGl8B,SAElB,GAAIk8B,EAAGp5B,KAAKn/C,EAAAC,MAAM68C,WAAY,CAC5B,IAAIz6C,EAAgC,KAEpC,GAAIk2E,EAAGp5B,KAAKn/C,EAAAC,MAAMglB,OAChB5iB,EAAc/I,KAAK4/E,cAAcX,EAAIx4E,EAAApE,YAAYspB,MAAO,KAAMszD,EAAGl8B,eAC5D,GAAIk8B,EAAGp5B,KAAKn/C,EAAAC,MAAM64C,KACvBz2C,EAAc/I,KAAK4/E,cAAcX,EAAIx4E,EAAApE,YAAYm9C,IAAK,KAAMy/B,EAAGl8B,eAC1D,GAAIk8B,EAAGp5B,KAAKn/C,EAAAC,MAAMq5C,KACvBj3C,EAAc/I,KAAK4/E,cAAcX,EAAIx4E,EAAApE,YAAYwF,KAAM,KAAMo3E,EAAGl8B,eAE3D,IAAKk8B,EAAGp5B,KAAKn/C,EAAAC,MAAM09C,cACxBt7C,EAAc/I,KAAK8lF,yBAAyB7G,IAC1B,OAAO,KAG3B,GAAIA,EAAG7+B,OAAS15C,EAAAC,MAAM09C,UAAW,CAC/B,IAAIl2C,EAAwC,KAC5C,IAAK8wE,EAAGp5B,KAAKn/C,EAAAC,MAAM09C,cACjBl2C,EAAYnO,KAAK8lF,yBAAyB7G,IAC1B,OAAO,KAGzB,GAAIA,EAAG7+B,OAAS15C,EAAAC,MAAM09C,UAAW,CAC/B,IAAIzxC,EAAiC,KACrC,IAAKqsE,EAAGp5B,KAAKn/C,EAAAC,MAAM88C,YAAa,CAE9B,KADA7wC,EAAc5S,KAAK6hF,gBAAgB5C,IACjB,OAAO,KAEzB,IAAKA,EAAGp5B,KAAKn/C,EAAAC,MAAM88C,YAKjB,OAJAzjD,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAEP,KAIX,IAAIgM,EAAYpQ,KAAK8/E,eAAeb,GACpC,OAAK7uE,EAEE+L,EAAAzU,KAAKiL,mBACV5J,EACAoF,EACIA,EAAUpD,WACV,KACJ6H,EACAxC,EACA6uE,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MATD,KAavBjZ,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,UAIhBpE,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,UAIhBpE,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAGhB,OAAO,MAGT+1E,EAAAl4E,UAAAsjF,iBAAA,SACEtG,GAKA,IAAIE,EAAWF,EAAGl8B,SAClB,GAAIk8B,EAAGp5B,KAAKn/C,EAAAC,MAAM68C,WAAY,CAC5B,IAAIr1C,EAAYnO,KAAK6hF,gBAAgB5C,GACrC,IAAK9wE,EAAW,OAAO,KACvB,GAAI8wE,EAAGp5B,KAAKn/C,EAAAC,MAAM88C,YAAa,CAC7B,IAAIrzC,EAAYpQ,KAAK8/E,eAAeb,GACpC,IAAK7uE,EAAW,OAAO,KACvB,IAAI21E,EAAkC,KACtC,OAAI9G,EAAGp5B,KAAKn/C,EAAAC,MAAMq4C,SAChB+mC,EAAgB/lF,KAAK8/E,eAAeb,IACT,KAEtB9iE,EAAAzU,KAAKiK,kBACVxD,EACAiC,EACA21E,EACA9G,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAGxBjZ,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,UAIhBpE,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAGhB,OAAO,MAGT+1E,EAAAl4E,UAAAwjF,qBAAA,SACExG,GAKA,IAAIE,EAAWF,EAAGl8B,SAClB,GAAIk8B,EAAGp5B,KAAKn/C,EAAAC,MAAM68C,WAAY,CAC5B,IAAIr1C,EAAYnO,KAAK6hF,gBAAgB5C,GACrC,IAAK9wE,EAAW,OAAO,KACvB,GAAI8wE,EAAGp5B,KAAKn/C,EAAAC,MAAM88C,YAAa,CAC7B,GAAIw7B,EAAGp5B,KAAKn/C,EAAAC,MAAM+9C,WAAY,CAE5B,IADA,IAAIjxC,EAAQ,IAAItN,OACR84E,EAAGp5B,KAAKn/C,EAAAC,MAAMg+C,aAAa,CACjC,IAAIqhC,EAAQhmF,KAAKimF,gBAAgBhH,GACjC,IAAK+G,EAAO,OAAO,KACnBvyE,EAAM5N,KAAiBmgF,GAEzB,IAAIh0C,EAAM71B,EAAAzU,KAAK8L,sBAAsBrF,EAAWsF,EAAOwrE,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAE7E,OADAgmE,EAAGp5B,KAAKn/C,EAAAC,MAAM09C,WACPrS,EAEPhyC,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,UAIhBpE,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,UAIhBpE,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAGhB,OAAO,MAGT+1E,EAAAl4E,UAAAgkF,gBAAA,SACEhH,GAGA,IACI5vE,EACAe,EAFA+uE,EAAWF,EAAGl8B,SAMlB,GAAIk8B,EAAGp5B,KAAKn/C,EAAAC,MAAM+3C,MAAO,CACvB,IAAIlvC,EAAQxP,KAAK6hF,gBAAgB5C,GACjC,IAAKzvE,EAAO,OAAO,KACnB,GAAIyvE,EAAGp5B,KAAKn/C,EAAAC,MAAMy9C,OAAQ,CAExB,IADA/0C,EAAa,IAAIlJ,MACV84E,EAAG15B,QAAU7+C,EAAAC,MAAM+3C,MAAQugC,EAAGj8B,WAAat8C,EAAAC,MAAMm4C,SAAWmgC,EAAGj8B,WAAat8C,EAAAC,MAAMg+C,YAAY,CAEnG,KADAv0C,EAAYpQ,KAAK8/E,eAAeb,IAChB,OAAO,KACvB5vE,EAAWxJ,KAAKuK,GAElB,OAAO+L,EAAAzU,KAAKiM,iBAAiBnE,EAAOH,EAAY4vE,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAEtEjZ,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,UAMX,GAAI66E,EAAGp5B,KAAKn/C,EAAAC,MAAMm4C,SAAU,CACjC,GAAImgC,EAAGp5B,KAAKn/C,EAAAC,MAAMy9C,OAAQ,CAExB,IADA/0C,EAAa,IAAIlJ,MACV84E,EAAG15B,QAAU7+C,EAAAC,MAAM+3C,MAAQugC,EAAGj8B,WAAat8C,EAAAC,MAAMm4C,SAAWmgC,EAAGj8B,WAAat8C,EAAAC,MAAMg+C,YAAY,CAEnG,KADAv0C,EAAYpQ,KAAK8/E,eAAeb,IAChB,OAAO,KACvB5vE,EAAWxJ,KAAKuK,GAElB,OAAO+L,EAAAzU,KAAKiM,iBAAiB,KAAMtE,EAAY4vE,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAErEjZ,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,UAIhBpE,KAAKuG,MACH0V,EAAAnY,eAAeoiF,0BACfjH,EAAG76E,SAGP,OAAO,MAGT+1E,EAAAl4E,UAAAyjF,oBAAA,SACEzG,GAKA,IAAIE,EAAWF,EAAGl8B,SACdh4C,EAAa/K,KAAK6hF,gBAAgB5C,GACtC,IAAKl0E,EAAY,OAAO,KACxB,IAAIinC,EAAM71B,EAAAzU,KAAKmM,qBAAiC9I,EAAYk0E,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAElF,OADAgmE,EAAGp5B,KAAKn/C,EAAAC,MAAM09C,WACPrS,GAGTmoC,EAAAl4E,UAAA0jF,kBAAA,SACE1G,GAQA,IACIv1E,EADAy1E,EAAWF,EAAGl8B,SAElB,GAAIk8B,EAAGp5B,KAAKn/C,EAAAC,MAAM+9C,WAAY,CAE5B,IADA,IAAIr1C,EAAa,IAAIlJ,OACb84E,EAAGp5B,KAAKn/C,EAAAC,MAAMg+C,aAAa,CAEjC,KADAj7C,EAAO1J,KAAK8/E,eAAeb,IAChB,OAAO,KAClB5vE,EAAWxJ,KAAgB6D,GAE7B,IAAIsK,EAA6C,KAC7CC,EAAsC,KACtCC,EAAwC,KAC5C,GAAI+qE,EAAGp5B,KAAKn/C,EAAAC,MAAMg4C,OAAQ,CACxB,IAAKsgC,EAAGp5B,KAAKn/C,EAAAC,MAAM68C,WAKjB,OAJAxjD,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAEP,KAET,IAAK66E,EAAGr5B,iBAKN,OAJA5lD,KAAKuG,MACH0V,EAAAnY,eAAei9E,oBACf9B,EAAG76E,SAEE,KAGT,GADA4P,EAAgBmI,EAAAzU,KAAKe,2BAA2Bw2E,EAAG54B,iBAAkB44B,EAAG76E,UACnE66E,EAAGp5B,KAAKn/C,EAAAC,MAAM88C,YAKjB,OAJAzjD,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAEP,KAET,IAAK66E,EAAGp5B,KAAKn/C,EAAAC,MAAM+9C,WAKjB,OAJA1kD,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAEP,KAGT,IADA6P,MACQgrE,EAAGp5B,KAAKn/C,EAAAC,MAAMg+C,aAAa,CAEjC,KADAj7C,EAAO1J,KAAK8/E,eAAeb,IAChB,OAAO,KAClBhrE,EAAgBpO,KAAgB6D,IAGpC,GAAIu1E,EAAGp5B,KAAKn/C,EAAAC,MAAMu4C,SAAU,CAC1B,IAAK+/B,EAAGp5B,KAAKn/C,EAAAC,MAAM+9C,WAKjB,OAJA1kD,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAEP,KAGT,IADA8P,MACQ+qE,EAAGp5B,KAAKn/C,EAAAC,MAAMg+C,aAAa,CAEjC,KADAj7C,EAAO1J,KAAK8/E,eAAeb,IAChB,OAAO,KAClB/qE,EAAkBrO,KAAgB6D,IAGtC,IAAMuK,IAAmBC,EAKvB,OAJAlU,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,SAEP,KAET,IAAI4tC,EAAM71B,EAAAzU,KAAKqM,mBACb1E,EACA2E,EACAC,EACAC,EACA+qE,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAGxB,OADAgmE,EAAGp5B,KAAKn/C,EAAAC,MAAM09C,WACPrS,EAOT,OALEhyC,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAGT,MAGT+1E,EAAAl4E,UAAAk+E,qBAAA,SACElB,EACAr3E,EACAmI,EACAovE,GAKA,GAAIF,EAAGr5B,iBAAkB,CACvB,IAAIhlD,EAAOub,EAAAzU,KAAKe,2BAA2Bw2E,EAAG54B,iBAAkB44B,EAAG76E,SAC/DwL,EAA6C,KACjD,GAAIqvE,EAAGp5B,KAAKn/C,EAAAC,MAAM45C,UAAW,CAE3B,KADA3wC,EAAiB5P,KAAKgiF,oBAAoB/C,IACrB,OAAO,KAC5Br3E,GAASnB,EAAApE,YAAYqjB,QAEvB,GAAIu5D,EAAGp5B,KAAKn/C,EAAAC,MAAMo7C,QAAS,CACzB,IAAI15C,EAAOrI,KAAKwgF,UAAUvB,GAC1B,IAAK52E,EAAM,OAAO,KAClB,IAAI2pC,EAAM71B,EAAAzU,KAAK0M,sBACbxT,EACAgP,EACAvH,EACA0H,EACAnI,EACAq3E,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAGxB,OADAgmE,EAAGp5B,KAAKn/C,EAAAC,MAAM09C,WACPrS,EAEPhyC,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,UAIhBpE,KAAKuG,MACH0V,EAAAnY,eAAei9E,oBACf9B,EAAG76E,SAGP,OAAO,MAGT+1E,EAAAl4E,UAAA2jF,mBAAA,SACE3G,GAKA,IAAIE,EAAWF,EAAGl8B,SACdh4C,EAAa/K,KAAK6hF,gBAAgB5C,EAAE,IACxC,IAAKl0E,EAAY,OAAO,KACxB,IAAIinC,EAAM71B,EAAAzU,KAAKiN,oBAAoB5J,EAAYk0E,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAErE,OADAgmE,EAAGp5B,KAAKn/C,EAAAC,MAAM09C,WACPrS,GAGTmoC,EAAAl4E,UAAA4jF,oBAAA,SACE5G,GAKA,IAAIE,EAAWF,EAAGl8B,SAClB,GAAIk8B,EAAGp5B,KAAKn/C,EAAAC,MAAM68C,WAAY,CAC5B,IAAIz4C,EAAa/K,KAAK6hF,gBAAgB5C,GACtC,IAAKl0E,EAAY,OAAO,KACxB,GAAIk0E,EAAGp5B,KAAKn/C,EAAAC,MAAM88C,YAAa,CAC7B,IAAIrzC,EAAYpQ,KAAK8/E,eAAeb,GACpC,IAAK7uE,EAAW,OAAO,KACvB,IAAI4hC,EAAM71B,EAAAzU,KAAKmN,qBAAqB9J,EAAYqF,EAAW6uE,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAEjF,OADAgmE,EAAGp5B,KAAKn/C,EAAAC,MAAM09C,WACPrS,EAEPhyC,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,UAIhBpE,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAGhB,OAAO,MAMT+1E,EAAAl4E,UAAAkkF,qBAAA,SACElH,GAGA,IAAI7+B,EAAQ6+B,EAAGr7D,KAAKld,EAAA23C,mBAAmB8G,QACnCg6B,EAAWF,EAAGl8B,SACdqjC,EA6mBR,SAAkCr/E,GAChC,OAAQA,GACN,KAAKL,EAAAC,MAAM25C,YAAa,SACxB,KAAK55C,EAAAC,MAAMu5C,MAAO,SAClB,KAAKx5C,EAAAC,MAAMg7C,YACX,KAAKj7C,EAAAC,MAAMi7C,MACX,KAAKl7C,EAAAC,MAAMsX,KACX,KAAKvX,EAAAC,MAAMwX,MACX,KAAKzX,EAAAC,MAAMw6C,UACX,KAAKz6C,EAAAC,MAAMy6C,YACX,KAAK16C,EAAAC,MAAMo5C,OACX,KAAKr5C,EAAAC,MAAM+U,KACX,KAAKhV,EAAAC,MAAMo4C,OAAQ,UACnB,KAAKr4C,EAAAC,MAAM+Q,IAAK,UAElB,SA5nBmB2uE,CAAyBjmC,GAC1C,GAAc,GAAVgmC,EAA+B,CACjC,IAAIp3E,OAAO,EAKX,OAAIoxC,GAAS15C,EAAAC,MAAM+Q,KACjB1I,EAAUhP,KAAK6hF,gBAAgB5C,EAAE,KAE7BjwE,EAAQjI,MAAQoV,EAAAtV,SAASS,KACpB6U,EAAAzU,KAAKwF,oBACO8B,EAASjE,WACTiE,EAAS7G,cACT6G,EAASpF,UAC1Bq1E,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,OAGxBjZ,KAAKuG,MACH0V,EAAAnY,eAAeyjB,wBACf03D,EAAG76E,SAGA,MAdc,MAgBrB4K,EAAUhP,KAAK6hF,gBAAgB5C,EAAImH,KAKjChmC,GAAS15C,EAAAC,MAAMw6C,WAAaf,GAAS15C,EAAAC,MAAMy6C,aAE3CpyC,EAAQjI,MAAQoV,EAAAtV,SAASQ,YACzB2H,EAAQjI,MAAQoV,EAAAtV,SAASU,eACzByH,EAAQjI,MAAQoV,EAAAtV,SAASW,gBAEzBxH,KAAKuG,MACH0V,EAAAnY,eAAewiF,0FACft3E,EAAQ5K,OAIP+X,EAAAzU,KAAKwH,4BAA4BkxC,EAAOpxC,EAASiwE,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,OAhBvD,KAmBzB,IAAI9O,EAA0B,KAC9B,OAAQi2C,GAEN,KAAK15C,EAAAC,MAAMM,KAAM,OAAOkV,EAAAzU,KAAK0F,qBAAqB6xE,EAAG76E,SACrD,KAAKsC,EAAAC,MAAMO,KAAM,OAAOiV,EAAAzU,KAAKmH,qBAAqBowE,EAAG76E,SACrD,KAAKsC,EAAAC,MAAMQ,MAAO,OAAOgV,EAAAzU,KAAK4E,sBAAsB2yE,EAAG76E,SAIvD,KAAKsC,EAAAC,MAAM68C,UAGT,GAAIy7B,EAAGp5B,KAAKn/C,EAAAC,MAAM88C,YAChB,OAAOzjD,KAAK0jF,8BACVzE,EACA9iE,EAAAzU,KAAK2C,gCAAgC40E,EAAG76E,MAAM+6E,QAE9C,GAGJ,IAAIn5B,EAAQi5B,EAAGl5B,OACXwgC,GAAQ,EACZ,GACE,OAAQtH,EAAGr7D,KAAKld,EAAA23C,mBAAmB8G,SAGjC,KAAKz+C,EAAAC,MAAM25C,YAET,OADA2+B,EAAG74B,MAAMJ,GACFhmD,KAAKwjF,wBAAwBvE,GAGtC,KAAKv4E,EAAAC,MAAMU,WAET,OADA43E,EAAG54B,iBACK44B,EAAGr7D,QAGT,KAAKld,EAAAC,MAAM88C,WACT,IAAKw7B,EAAGp5B,KAAKn/C,EAAAC,MAAM29C,oBAAqB,CACtCiiC,GAAQ,EACR,MAKJ,KAAK7/E,EAAAC,MAAMy9C,MAET,OADA66B,EAAG74B,MAAMJ,GACFhmD,KAAKwjF,wBAAwBvE,GAGtC,KAAKv4E,EAAAC,MAAM49C,SACX,KAAK79C,EAAAC,MAAMyQ,MACT,MAIF,QACEmvE,GAAQ,EAIZ,MAGF,QACEA,GAAQ,SAILA,GAKT,OAJAtH,EAAG74B,MAAMJ,IAGT77C,EAAOnK,KAAK6hF,gBAAgB5C,IAEvBA,EAAGp5B,KAAKn/C,EAAAC,MAAM88C,YAOZtnC,EAAAzU,KAAKgG,8BAA8BvD,EAAM80E,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,OANpEjZ,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAEP,MANS,KAWpB,KAAKsC,EAAAC,MAAM69C,YAET,IADA,IAAI/5C,EAAqB,IAAItE,OACrB84E,EAAGp5B,KAAKn/C,EAAAC,MAAM89C,eAAe,CACnC,GAAIw6B,EAAG15B,QAAU7+C,EAAAC,MAAMyQ,MACrBjN,EAAO,UAGP,KADAA,EAAOnK,KAAK6hF,gBAAgB5C,EAAI,IACrB,OAAO,KAGpB,GADAx0E,EAAmB5E,KAAKsE,IACnB80E,EAAGp5B,KAAKn/C,EAAAC,MAAMyQ,OAAQ,CACzB,GAAI6nE,EAAGp5B,KAAKn/C,EAAAC,MAAM89C,cAChB,MAMA,OAJAzkD,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAEP,MAIb,OAAO+X,EAAAzU,KAAK4C,6BAA6BG,EAAoBw0E,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAGrF,KAAKvS,EAAAC,MAAM+9C,UAKT,IAJA,IAAI8hC,EAAWvH,EAAGl8B,SACdx1C,EAAQ,IAAIpH,MACZqH,EAAS,IAAIrH,MACbvF,OAAI,GACAq+E,EAAGp5B,KAAKn/C,EAAAC,MAAMg+C,aAAa,CACjC,GAAKs6B,EAAGr5B,iBAWNhlD,EAAOub,EAAAzU,KAAKe,2BAA2Bw2E,EAAG54B,iBAAkB44B,EAAG76E,aAXvC,CACxB,IAAK66E,EAAGp5B,KAAKn/C,EAAAC,MAAM48C,eAKjB,OAJAvjD,KAAKuG,MACH0V,EAAAnY,eAAei9E,oBACf9B,EAAG76E,SAEE,MAETxD,EAAOub,EAAAzU,KAAKe,2BAA2Bw2E,EAAG3sC,aAAc2sC,EAAG76E,UACtD6D,IAAIxB,EAAApE,YAAYokF,QAKvB,GADAl5E,EAAM1H,KAAKjF,GACPq+E,EAAGp5B,KAAKn/C,EAAAC,MAAMy9C,OAAQ,CACxB,IAAI9iD,EAAQtB,KAAK6hF,gBAAgB5C,EAAI,GACrC,IAAK39E,EAAO,OAAO,KACnBkM,EAAO3H,KAAKvE,OACP,IAAKV,EAAKkH,GAAGrB,EAAApE,YAAYokF,QAO9B,OAJAzmF,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAEP,KANPoJ,EAAO3H,KAAKjF,GAQd,IAAKq+E,EAAGp5B,KAAKn/C,EAAAC,MAAMyQ,OAAQ,CACzB,GAAI6nE,EAAGp5B,KAAKn/C,EAAAC,MAAMg+C,YAChB,MAMA,OAJA3kD,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAEP,MAIb,OAAO+X,EAAAzU,KAAK4F,8BAA8BC,EAAOC,EAAQyxE,EAAG76E,MAAMoiF,EAAUvH,EAAGhmE,MAGjF,KAAKvS,EAAAC,MAAM45C,SACT,IAAIv1C,EAAShL,KAAKwgF,UAAUvB,GAC5B,OAAKj0E,EACAi0E,EAAGp5B,KAAKn/C,EAAAC,MAAM65C,cAOnBr2C,EAAOnK,KAAK6hF,gBAAgB5C,EAAE,KAEvB9iE,EAAAzU,KAAKmD,0BACVsR,EAAAnF,cAAc0vE,OACdv8E,EACAa,EACAi0E,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MALN,MAPhBjZ,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAEP,MANW,KAiBtB,KAAKsC,EAAAC,MAAMU,WACT,OAAO8U,EAAAzU,KAAKe,2BAA2Bw2E,EAAG54B,iBAAkB44B,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAEpF,KAAKvS,EAAAC,MAAMsR,KACT,OAAOkE,EAAAzU,KAAKiH,qBAAqBswE,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAEzD,KAAKvS,EAAAC,MAAM0Q,YACT,OAAO8E,EAAAzU,KAAKsE,4BAA4BizE,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAEhE,KAAKvS,EAAAC,MAAMqR,MACT,OAAOmE,EAAAzU,KAAK+G,sBAAsBwwE,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAE1D,KAAKvS,EAAAC,MAAM48C,cACT,OAAOpnC,EAAAzU,KAAK6G,8BAA8B0wE,EAAG3sC,aAAc2sC,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAEnF,KAAKvS,EAAAC,MAAMw9C,eACT,OAAOhoC,EAAAzU,KAAKsF,+BAA+BiyE,EAAG/3B,cAAe+3B,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAErF,KAAKvS,EAAAC,MAAMg9C,aACT,OAAOxnC,EAAAzU,KAAK8E,6BAA6ByyE,EAAG12B,YAAa02B,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAIjF,KAAKvS,EAAAC,MAAMs6C,MACT,IAAI0lC,EAAgB1H,EAAGp4B,oBACvB,OAAKo4B,EAAGp5B,KAAKn/C,EAAAC,MAAMs6C,OAOZ9kC,EAAAzU,KAAKoG,8BACV64E,EACA1H,EAAGj4B,kBACHi4B,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,OATtBjZ,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAEP,MAQX,KAAKsC,EAAAC,MAAM4Q,SACT,OAAOvX,KAAKwjF,wBAAwBvE,GAEtC,KAAKv4E,EAAAC,MAAMwQ,MACT,OAAOnX,KAAK6jF,qBAAqB5E,GAEnC,QAYE,OAXI7+B,GAAS15C,EAAAC,MAAM2+C,UACjBtlD,KAAKuG,MACH0V,EAAAnY,eAAe2iD,uBACfw4B,EAAG76E,MAAM+6E,IAGXn/E,KAAKuG,MACH0V,EAAAnY,eAAe8iF,oBACf3H,EAAG76E,SAGA,OAKb+1E,EAAAl4E,UAAA4kF,qCAAA,SACE5H,GAKA,IAAIj5B,EAAQi5B,EAAGl5B,OACf,IAAKk5B,EAAGp5B,KAAKn/C,EAAAC,MAAM45C,UAAW,OAAO,KACrC,IAAIp4C,EAAgB,IAAIhC,MACxB,EAAG,CACD,GAAI84E,EAAG15B,SAAW7+C,EAAAC,MAAM65C,YACtB,MAEF,IAAIn4C,EAAOrI,KAAKwgF,UAAUvB,GAAI,GAAM,GACpC,IAAK52E,EAEH,OADA42E,EAAG74B,MAAMJ,GACF,KAET79C,EAActC,KAAKwC,SACZ42E,EAAGp5B,KAAKn/C,EAAAC,MAAMyQ,QACvB,OAAI6nE,EAAGp5B,KAAKn/C,EAAAC,MAAM65C,cAAgBy+B,EAAGp5B,KAAKn/C,EAAAC,MAAM68C,WACvCr7C,GAET82E,EAAG74B,MAAMJ,GACF,OAGTm0B,EAAAl4E,UAAAu/E,eAAA,SACEvC,GAMA,IADA,IAAIx1E,EAAO,IAAItD,OACP84E,EAAGp5B,KAAKn/C,EAAAC,MAAM88C,aAAa,CACjC,IAAIt5C,EAAOnK,KAAK6hF,gBAAgB5C,EAAI,GACpC,IAAK90E,EAAM,OAAO,KAElB,GADAV,EAAK5D,KAAKsE,IACL80E,EAAGp5B,KAAKn/C,EAAAC,MAAMyQ,OAAQ,CACzB,GAAI6nE,EAAGp5B,KAAKn/C,EAAAC,MAAM88C,YAChB,MAMA,OAJAzjD,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAEP,MAIb,OAAOqF,GAGT0wE,EAAAl4E,UAAA4/E,gBAAA,SACE5C,EACAmH,QAAA,IAAAA,MAAA,GAEA3iF,OAAiB,GAAV2iF,GAEP,IAAIj8E,EAAOnK,KAAKmmF,qBAAqBlH,GACrC,IAAK90E,EAAM,OAAO,KAClB,IAgBIi2C,EAhBA++B,EAAWh1E,EAAK/F,MAAMmB,MAG1B,GAAI4W,EAAA/U,eAAe+C,EAAKpD,MAEtB,IADA,IAAIoB,EAAyC,KAE3C82E,EAAGp5B,KAAKn/C,EAAAC,MAAM68C,YAEdrnC,EAAA1U,sBAAsB0C,EAAKpD,OAA6E,QAAnEoB,EAAgBnI,KAAK6mF,qCAAqC5H,KAC/F,CACA,IAAIx1E,EAAOzJ,KAAKwhF,eAAevC,GAC/B,IAAKx1E,EAAM,OAAO,KAClBU,EAAOgS,EAAAzU,KAAK6D,qBAAqBpB,EAAMhC,EAAesB,EAAMw1E,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAOtF,IAFA,IACI6tE,EADAljE,EAA0B,MAG3BkjE,EAAiBC,EAAoB3mC,EAAQ6+B,EAAG15B,UAAY6gC,GAG7D,OADAnH,EAAGr7D,OACKw8B,GAEN,KAAK15C,EAAAC,MAAM43C,GACT,IAAIvzC,EAAShL,KAAKwgF,UAAUvB,GAC5B,IAAKj0E,EAAQ,OAAO,KACpBb,EAAOgS,EAAAzU,KAAKmD,0BACVsR,EAAAnF,cAAcunC,GACdp0C,EACAa,EACAi0E,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAExB,MAGF,KAAKvS,EAAAC,MAAM6Q,WACT,IAAI1K,EAAS9M,KAAKwgF,UAAUvB,GAC5B,IAAKnyE,EAAQ,OAAO,KACpB3C,EAAOgS,EAAAzU,KAAKmF,2BACV1C,EACA2C,EACAmyE,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAExB,MAGF,KAAKvS,EAAAC,MAAM69C,YAET,KADA5gC,EAAO5jB,KAAK6hF,gBAAgB5C,IACjB,OAAO,KAClB,IAAKA,EAAGp5B,KAAKn/C,EAAAC,MAAM89C,cAKjB,OAJAzkD,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAEP,KAET+F,EAAOgS,EAAAzU,KAAKwE,8BACV/B,EACAyZ,EACAq7D,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAExB,MAGF,KAAKvS,EAAAC,MAAMw6C,UACX,KAAKz6C,EAAAC,MAAMy6C,YAEPj3C,EAAKpD,MAAQoV,EAAAtV,SAASQ,YACtB8C,EAAKpD,MAAQoV,EAAAtV,SAASU,eACtB4C,EAAKpD,MAAQoV,EAAAtV,SAASW,gBAEtBxH,KAAKuG,MACH0V,EAAAnY,eAAewiF,0FACfn8E,EAAK/F,OAGT+F,EAAOgS,EAAAzU,KAAKqH,6BACVqxC,EACAj2C,EACA80E,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAExB,MAGF,KAAKvS,EAAAC,MAAM49C,SACT,IAAIn2C,EAASpO,KAAK6hF,gBAAgB5C,GAClC,IAAK7wE,EAAQ,OAAO,KACpB,IAAK6wE,EAAGp5B,KAAKn/C,EAAAC,MAAMy9C,OAKjB,OAJApkD,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAEP,KAET,IAAIiK,EAASrO,KAAK6hF,gBAAgB5C,EAAImH,EAAU,EAC5C,EACD,GAEH,IAAK/3E,EAAQ,OAAO,KACpBlE,EAAOgS,EAAAzU,KAAKwG,wBACV/D,EACAiE,EACAC,EACA4wE,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAExB,MAGF,KAAKvS,EAAAC,MAAMyQ,MACT,IAAI4vE,GAA6B78E,GACjC,EAAG,CAED,KADAA,EAAOnK,KAAK6hF,gBAAgB5C,EAAI,IACrB,OAAO,KAClB+H,EAAWnhF,KAAKsE,SACT80E,EAAGp5B,KAAKn/C,EAAAC,MAAMyQ,QACvBjN,EAAOgS,EAAAzU,KAAKmE,sBAAsBm7E,EAAY/H,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MACpE,MAEF,QAME,KALA2K,EAAO5jB,KAAK6hF,gBAAgB5C,EAC1BgI,EAAmB7mC,GACf0mC,EACAA,EAAiB,IAEZ,OAAO,KAGlB,GAAI1mC,GAAS15C,EAAAC,MAAMi9C,IACjB,GAAIhgC,EAAK7c,MAAQoV,EAAAtV,SAASQ,WACxB8C,EAAOgS,EAAAzU,KAAKkG,+BACVzD,EACsByZ,EACtBq7D,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,UAEnB,IAAI2K,EAAK7c,MAAQoV,EAAAtV,SAASS,KAqB/B,OAJAtH,KAAKuG,MACH0V,EAAAnY,eAAei9E,oBACfn9D,EAAKxf,OAEA,KApBP,IAAI8iF,EAA+BtjE,EACnC,GAAIsjE,EAAan8E,WAAWhE,MAAQoV,EAAAtV,SAASQ,WAW3C,OAJArH,KAAKuG,MACH0V,EAAAnY,eAAei9E,oBACfmG,EAAan8E,WAAW3G,OAEnB,KAVP8iF,EAAan8E,WAAaoR,EAAAzU,KAAKkG,+BAC7BzD,EACsB+8E,EAAan8E,WACnCk0E,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAS1B9O,EAAO+8E,OAWT/8E,EAAOgS,EAAAzU,KAAKwD,uBAAuBk1C,EAAOj2C,EAAMyZ,EAAMq7D,EAAG76E,MAAM+6E,EAAUF,EAAGhmE,MAMpF,OAAO9O,GAITgwE,EAAAl4E,UAAAo9E,cAAA,SAAcJ,GAGZ,IAFAA,EAAG15B,MAAK,GACJ05B,EAAG/7B,oBAAoB+7B,EAAGr7D,SAC3B,CACD,IAAIo/B,EAAYi8B,EAAG15B,MAAK,GACxB,GACEvC,GAAat8C,EAAAC,MAAM2+C,WACnBtC,GAAat8C,EAAAC,MAAM09C,UACnB,CACA46B,EAAGr7D,OACH,MAEF,GAAIq7D,EAAG/7B,mBAAoB,MAC3B,OAAQ+7B,EAAGr7D,QACT,KAAKld,EAAAC,MAAMU,WACT43E,EAAG54B,iBACH,MAEF,KAAK3/C,EAAAC,MAAM48C,cACT07B,EAAG3sC,aACH,MAEF,KAAK5rC,EAAAC,MAAMw9C,eACT86B,EAAG/3B,cACH,MAEF,KAAKxgD,EAAAC,MAAMg9C,aACTs7B,EAAG12B,eAQX4xB,EAAAl4E,UAAAklF,UAAA,SAAUlI,GAER,IAAImI,EAAQ,EACRb,GAAQ,EACZ,GACE,OAAQtH,EAAGr7D,QACT,KAAKld,EAAAC,MAAM2+C,UACTtlD,KAAKuG,MACH0V,EAAAnY,eAAemgD,YACfg7B,EAAG76E,QAAS,KAEdmiF,GAAQ,EACR,MAEF,KAAK7/E,EAAAC,MAAM+9C,YACP0iC,EACF,MAEF,KAAK1gF,EAAAC,MAAMg+C,aACPyiC,IACUb,GAAQ,GACpB,MAEF,KAAK7/E,EAAAC,MAAMU,WACT43E,EAAG54B,iBACH,MAEF,KAAK3/C,EAAAC,MAAM48C,cACT07B,EAAG3sC,aACH,MAEF,KAAK5rC,EAAAC,MAAMw9C,eACT86B,EAAG/3B,cACH,MAEF,KAAKxgD,EAAAC,MAAMg9C,aACTs7B,EAAG12B,mBAIAg+B,IAEbpM,EAx1GA,CAA4Bl+D,EAAAhW,mBAw4G5B,SAAS8gF,EAAoBhgF,GAC3B,OAAQA,GACN,KAAKL,EAAAC,MAAMyQ,MAAO,SAClB,KAAK1Q,EAAAC,MAAMo7C,OACX,KAAKr7C,EAAAC,MAAMq7C,YACX,KAAKt7C,EAAAC,MAAMs7C,aACX,KAAKv7C,EAAAC,MAAMw7C,yBACX,KAAKz7C,EAAAC,MAAMu7C,gBACX,KAAKx7C,EAAAC,MAAMy7C,aACX,KAAK17C,EAAAC,MAAM07C,eACX,KAAK37C,EAAAC,MAAM27C,yBACX,KAAK57C,EAAAC,MAAM47C,+BACX,KAAK77C,EAAAC,MAAM67C,2CACX,KAAK97C,EAAAC,MAAM87C,iBACX,KAAK/7C,EAAAC,MAAMg8C,aACX,KAAKj8C,EAAAC,MAAM+7C,WAAY,SACvB,KAAKh8C,EAAAC,MAAM49C,SAAU,SACrB,KAAK79C,EAAAC,MAAMm7C,QAAS,SACpB,KAAKp7C,EAAAC,MAAMk7C,oBAAqB,SAChC,KAAKn7C,EAAAC,MAAM86C,IAAK,SAChB,KAAK/6C,EAAAC,MAAM+6C,MAAO,SAClB,KAAKh7C,EAAAC,MAAM66C,UAAW,UACtB,KAAK96C,EAAAC,MAAMg6C,cACX,KAAKj6C,EAAAC,MAAMi6C,mBACX,KAAKl6C,EAAAC,MAAMk6C,qBACX,KAAKn6C,EAAAC,MAAMm6C,0BAA2B,UACtC,KAAKp6C,EAAAC,MAAM43C,GACX,KAAK73C,EAAAC,MAAM04C,GACX,KAAK34C,EAAAC,MAAM6Q,WACX,KAAK9Q,EAAAC,MAAM45C,SACX,KAAK75C,EAAAC,MAAM65C,YACX,KAAK95C,EAAAC,MAAM85C,gBACX,KAAK/5C,EAAAC,MAAM+5C,mBAAoB,UAC/B,KAAKh6C,EAAAC,MAAM06C,kBACX,KAAK36C,EAAAC,MAAM26C,wBACX,KAAK56C,EAAAC,MAAM46C,oCAAqC,UAChD,KAAK76C,EAAAC,MAAMsX,KACX,KAAKvX,EAAAC,MAAMwX,MAAO,UAClB,KAAKzX,EAAAC,MAAMq6C,SACX,KAAKt6C,EAAAC,MAAMs6C,MACX,KAAKv6C,EAAAC,MAAMu6C,QAAS,UACpB,KAAKx6C,EAAAC,MAAMo6C,kBAAmB,UAC9B,KAAKr6C,EAAAC,MAAMw6C,UACX,KAAKz6C,EAAAC,MAAMy6C,YAAa,UACxB,KAAK16C,EAAAC,MAAMi9C,IACX,KAAKl9C,EAAAC,MAAM+Q,IACX,KAAKhR,EAAAC,MAAM69C,YAAa,UAE1B,SAIF,SAASyiC,EAAmBlgF,GAC1B,OAAQA,GACN,KAAKL,EAAAC,MAAMo7C,OACX,KAAKr7C,EAAAC,MAAMq7C,YACX,KAAKt7C,EAAAC,MAAMs7C,aACX,KAAKv7C,EAAAC,MAAMw7C,yBACX,KAAKz7C,EAAAC,MAAMu7C,gBACX,KAAKx7C,EAAAC,MAAMy7C,aACX,KAAK17C,EAAAC,MAAM07C,eACX,KAAK37C,EAAAC,MAAM27C,yBACX,KAAK57C,EAAAC,MAAM47C,+BACX,KAAK77C,EAAAC,MAAM67C,2CACX,KAAK97C,EAAAC,MAAM87C,iBACX,KAAK/7C,EAAAC,MAAMg8C,aACX,KAAKj8C,EAAAC,MAAM+7C,WACX,KAAKh8C,EAAAC,MAAM49C,SACX,KAAK79C,EAAAC,MAAMo6C,kBAAmB,OAAO,EACrC,QAAS,OAAO,GA78GPrhD,EAAAy6E,SA21Gb,SAAkBkN,GAChBA,IAAA,eACAA,IAAA,iBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,8BACAA,IAAA,wBACAA,IAAA,4BACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,oCACAA,IAAA,kCACAA,IAAA,gCACAA,IAAA,kCACAA,IAAA,gBACAA,IAAA,gCACAA,IAAA,wBAtBF,CAAkB3nF,EAAA2nF,aAAA3nF,EAAA2nF","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__15__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n","/**\r\n * Common constants.\r\n * @module common\r\n *//***/\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n\r\n  // Extended modifiers usually derived from basic modifiers\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 13,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 14,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 15,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 16,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 17,\r\n  /** Is an arrow function. */\r\n  ARROW = 1 << 18,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 19,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 20,\r\n\r\n  // Compilation states\r\n\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 21,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 22,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 23,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 24,\r\n  /** Is a virtual method. */\r\n  VIRTUAL = 1 << 25,\r\n  /** Is the main function. */\r\n  MAIN = 1 << 26,\r\n\r\n  // Other\r\n\r\n  QUOTED = 1 << 27\r\n}\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Delimiter used between a function and its inner elements. */\r\nexport const INNER_DELIMITER = \"~\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"~lib\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n/** Prefix used to indicate a filespace element. */\r\nexport const FILESPACE_PREFIX = \"file:\";\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(message.range, useColors));\r\n    }\r\n\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) sb.push(\"~\");\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./charcode\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath,\r\n  CharCode\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  TYPE,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n  SIGNATURE,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  CLASS,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  INSTANCEOF,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Checks if a node represents a constant value. */\r\nexport function nodeIsConstantValue(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.LITERAL:\r\n    case NodeKind.NULL:\r\n    case NodeKind.TRUE:\r\n    case NodeKind.FALSE: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable. */\r\nexport function nodeIsCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.CALL:\r\n    case NodeKind.ELEMENTACCESS:\r\n    case NodeKind.PROPERTYACCESS: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable with generic arguments. */\r\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.PROPERTYACCESS: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n  /** Parent node. */\r\n  parent: Node | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n\r\n  // types\r\n\r\n  static createType(\r\n    name: IdentifierExpression,\r\n    typeArguments: CommonTypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): TypeNode {\r\n    var type = new TypeNode();\r\n    type.range = range;\r\n    type.name = name; name.parent = type;\r\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): TypeNode {\r\n    return Node.createType(\r\n      Node.createIdentifierExpression(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createSignature(\r\n    parameters: ParameterNode[],\r\n    returnType: CommonTypeNode,\r\n    explicitThisType: TypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): SignatureNode {\r\n    var sig = new SignatureNode();\r\n    sig.range = range;\r\n    sig.parameters = parameters; setParent(parameters, sig);\r\n    sig.returnType = returnType; returnType.parent = sig;\r\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\r\n    sig.isNullable = isNullable;\r\n    return sig;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    name: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.arguments = args; if (args) setParent(args, stmt);\r\n    stmt.decoratorKind = decoratorNameToKind(name);\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: CommonTypeNode,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.toType = toType; toType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left; left.parent = expr;\r\n    expr.right = right; right.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createClassExpression(\r\n    declaration: ClassDeclaration\r\n  ): ClassExpression {\r\n    var expr = new ClassExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions; setParent(expressions, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.elementExpression = element; element.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.flags = declaration.flags & CommonFlags.ARROW;\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createInstanceOfExpression(\r\n    expression: Expression,\r\n    isType: CommonTypeNode,\r\n    range: Range\r\n  ): InstanceOfExpression {\r\n    var expr = new InstanceOfExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.isType = isType; isType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createObjectLiteralExpression(\r\n    names: IdentifierExpression[],\r\n    values: Expression[],\r\n    range: Range\r\n  ): ObjectLiteralExpression {\r\n    var expr = new ObjectLiteralExpression();\r\n    expr.range = range;\r\n    expr.names = names;\r\n    expr.values = values;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.property = property; property.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition; condition.parent = expr;\r\n    expr.ifThen = ifThen; ifThen.parent = expr;\r\n    expr.ifElse = ifElse; ifElse.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    implementsTypes: TypeNode[] | null, // can't be functions\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier; identifier.parent = stmt;\r\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.values = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[] | null,\r\n    path: StringLiteralExpression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.members = members; if (members) setParent(members, stmt);\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.externalName = externalName; externalName.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    if (!externalName) {\r\n      externalName = name;\r\n    } else {\r\n      externalName.parent = elem;\r\n    }\r\n    elem.externalName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression; expression.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\r\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    stmt.normalizedPath = resolvePath(\r\n      normalizePath(path.value),\r\n      range.source.normalizedPath\r\n    );\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    externalName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.externalName = externalName; externalName.parent = elem;\r\n    if (!name) {\r\n      name = externalName;\r\n    } else {\r\n      name.parent = elem;\r\n    }\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.type = type; if (type) type.parent = stmt;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.condition = condition; if (condition) condition.parent = stmt;\r\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.cases = cases; setParent(cases, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label; if (label) label.parent = elem;\r\n    elem.statements = statements; setParent(statements, elem);\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    stmt.catchVariable = catchVariable;\r\n    if (catchVariable) catchVariable.parent = stmt;\r\n    stmt.catchStatements = catchStatements;\r\n    if (catchStatements) setParent(catchStatements, stmt);\r\n    stmt.finallyStatements = finallyStatements;\r\n    if (finallyStatements) setParent(finallyStatements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: CommonTypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.type = alias; alias.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.declarations = declarations; setParent(declarations, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class CommonTypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type annotation. */\r\nexport class TypeNode extends CommonTypeNode {\r\n  kind = NodeKind.TYPE;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Type argument references. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: CommonTypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n}\r\n\r\n/** Represents a function signature. */\r\nexport class SignatureNode extends CommonTypeNode {\r\n  kind = NodeKind.SIGNATURE;\r\n\r\n  /** Accepted parameters. */\r\n  parameters: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: CommonTypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: TypeNode | null; // can't be a function\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  OPERATOR_BINARY,\r\n  OPERATOR_PREFIX,\r\n  OPERATOR_POSTFIX,\r\n  UNMANAGED,\r\n  SEALED,\r\n  INLINE,\r\n  EXTERNAL,\r\n  BUILTIN\r\n}\r\n\r\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\r\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\r\n  // @global, @inline, @operator, @sealed, @unmanaged\r\n  if (name.kind == NodeKind.IDENTIFIER) {\r\n    let nameStr = (<IdentifierExpression>name).text;\r\n    assert(nameStr.length);\r\n    switch (nameStr.charCodeAt(0)) {\r\n      case CharCode.b: {\r\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\r\n        break;\r\n      }\r\n      case CharCode.e: {\r\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\r\n        break;\r\n      }\r\n      case CharCode.g: {\r\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\r\n        break;\r\n      }\r\n      case CharCode.i: {\r\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\r\n        break;\r\n      }\r\n      case CharCode.o: {\r\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\r\n        break;\r\n      }\r\n      case CharCode.s: {\r\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\r\n        break;\r\n      }\r\n      case CharCode.u: {\r\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\r\n        break;\r\n      }\r\n    }\r\n  } else if (\r\n    name.kind == NodeKind.PROPERTYACCESS &&\r\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\r\n  ) {\r\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\r\n    assert(nameStr.length);\r\n    let propStr = (<PropertyAccessExpression>name).property.text;\r\n    assert(propStr.length);\r\n    // @operator.binary, @operator.prefix, @operator.postfix\r\n    if (nameStr == \"operator\") {\r\n      switch (propStr.charCodeAt(0)) {\r\n        case CharCode.b: {\r\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\r\n          break;\r\n        }\r\n        case CharCode.p: {\r\n          switch (propStr) {\r\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\r\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return DecoratorKind.CUSTOM;\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: CommonTypeNode;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n}\r\n\r\n/** Represents a class expression using the 'class' keyword. */\r\nexport class ClassExpression extends Expression {\r\n  kind = NodeKind.CLASS;\r\n\r\n  /** Inline class declaration. */\r\n  declaration: ClassDeclaration;\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an `instanceof` expression. */\r\nexport class InstanceOfExpression extends Expression {\r\n  kind = NodeKind.INSTANCEOF;\r\n\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Type to test for. */\r\n  isType: CommonTypeNode;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n}\r\n\r\n/** Represents an object literal expression. */\r\nexport class ObjectLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.OBJECT;\r\n\r\n  /** Field names. */\r\n  names: IdentifierExpression[];\r\n  /** Field values. */\r\n  values: Expression[];\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\nexport function isLastStatement(statement: Statement): bool {\r\n  var parent = assert(statement.parent);\r\n  if (parent.kind == NodeKind.BLOCK) {\r\n    let statements = (<BlockStatement>parent).statements;\r\n    if (statements[statements.length - 1] === statement) {\r\n      switch (assert(parent.parent).kind) {\r\n        case NodeKind.FUNCTIONDECLARATION:\r\n        case NodeKind.METHODDECLARATION: return true;\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Simple path (last part without extension). */\r\n  simplePath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n  /** Re-exported sources. */\r\n  exportPaths: Set<string> | null = null;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    var internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.internalPath = internalPath;\r\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\r\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n\r\n  protected cachedProgramLevelInternalName: string | null = null;\r\n  protected cachedFileLevelInternalName: string | null = null;\r\n\r\n  /** Gets the mangled program-level internal name of this declaration. */\r\n  get programLevelInternalName(): string {\r\n    if (!this.cachedProgramLevelInternalName) {\r\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\r\n    }\r\n    return this.cachedProgramLevelInternalName;\r\n  }\r\n\r\n  /** Gets the mangled file-level internal name of this declaration. */\r\n  get fileLevelInternalName(): string {\r\n    if (!this.cachedFileLevelInternalName) {\r\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\r\n    }\r\n    return this.cachedFileLevelInternalName;\r\n  }\r\n\r\n  /** Tests if this is a top-level declaration within its source file. */\r\n  get isTopLevel(): bool {\r\n    var parent = this.parent;\r\n    if (!parent) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\r\n      return false;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE;\r\n  }\r\n\r\n  /** Tests if this declaration is a top-level export within its source file. */\r\n  get isTopLevelExport(): bool {\r\n    var parent = this.parent;\r\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\r\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\r\n    }\r\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\r\n  }\r\n\r\n  /** Tests if this declaration needs an explicit export. */\r\n  needsExplicitExport(member: ExportMember): bool {\r\n    // This is necessary because module-level exports are automatically created\r\n    // for top level declarations of all sorts. This function essentially tests\r\n    // that there isn't a otherwise duplicate top-level export already.\r\n    return (\r\n      member.name.text != member.externalName.text || // if aliased\r\n      this.range.source != member.range.source ||     // if a re-export\r\n      !this.isTopLevelExport                          // if not top-level\r\n    );\r\n  }\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: CommonTypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[];\r\n  /** Base class type being extended, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Interface types being implemented, if any. */\r\n  implementsTypes: TypeNode[] | null; // can't be functions\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Identifier being exported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier seen when imported again. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members if a set of named exports, or `null` if a filespace export. */\r\n  members: ExportMember[] | null;\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index within the constructor, if applicable. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: SignatureNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Finds the first decorator matching the specified kind. */\r\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      if (decorator.decoratorKind == kind) return decorator;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/** Mangles a declaration's name to an internal name. */\r\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\r\n  var name = declaration.name.text;\r\n  var parent = declaration.parent;\r\n  if (!parent) return name;\r\n  if (\r\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\r\n    parent.kind == NodeKind.VARIABLE\r\n  ) { // skip over\r\n    if (!(parent = parent.parent)) return name;\r\n  }\r\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\r\n      declaration.is(CommonFlags.STATIC)\r\n        ? STATIC_DELIMITER\r\n        : INSTANCE_DELIMITER\r\n    ) + name;\r\n  }\r\n  if (\r\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\r\n    parent.kind == NodeKind.ENUMDECLARATION\r\n  ) {\r\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\r\n           STATIC_DELIMITER + name;\r\n  }\r\n  return asGlobal\r\n    ? name\r\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n// Helpers\r\n\r\n/** Sets the parent node on an array of nodes. */\r\nfunction setParent(nodes: Node[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    nodes[i].parent = parent;\r\n  }\r\n}\r\n\r\n/** Sets the parent node on an array of nullable nodes. */\r\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    let node = nodes[i];\r\n    if (node) node.parent = parent;\r\n  }\r\n}\r\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  LIBRARY_PREFIX,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  FILESPACE_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Options,\r\n  Feature\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  Range,\r\n  CommonTypeNode,\r\n  TypeParameterNode,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n\r\n  Expression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  StringLiteralExpression,\r\n\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  decoratorNameToKind,\r\n  findDecorator\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  BinaryOp,\r\n  UnaryOp,\r\n\r\n  getExpressionId,\r\n  getGetLocalIndex,\r\n  isTeeLocal,\r\n  getSetLocalValue,\r\n  getBinaryOp,\r\n  getConstValueI32,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getUnaryOp,\r\n  getExpressionType,\r\n  getLoadBytes,\r\n  isLoadSigned,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getCallTarget,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getConstValueI64Low\r\n} from \"./module\";\r\n\r\nimport {\r\n  CharCode\r\n} from \"./util\";\r\n\r\nimport {\r\n  Resolver\r\n} from \"./resolver\";\r\n\r\n/** Represents a yet unresolved import. */\r\nclass QueuedImport {\r\n  localName: string;\r\n  externalName: string;\r\n  externalNameAlt: string;\r\n  declaration: ImportDeclaration | null; // not set if a filespace\r\n}\r\n\r\n/** Represents a yet unresolved export. */\r\nclass QueuedExport {\r\n  externalName: string;\r\n  isReExport: bool;\r\n  member: ExportMember;\r\n}\r\n\r\n/** Represents a type alias. */\r\nclass TypeAlias {\r\n  typeParameters: TypeParameterNode[] | null;\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a module-level export. */\r\nclass ModuleExport {\r\n  element: Element;\r\n  identifier: IdentifierExpression;\r\n}\r\n\r\n/** Represents the kind of an operator overload. */\r\nexport enum OperatorKind {\r\n  INVALID,\r\n\r\n  // indexed access\r\n  INDEXED_GET,            // a[]\r\n  INDEXED_SET,            // a[]=b\r\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\r\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\r\n\r\n  // binary\r\n  ADD,                    // a + b\r\n  SUB,                    // a - b\r\n  MUL,                    // a * b\r\n  DIV,                    // a / b\r\n  REM,                    // a % b\r\n  POW,                    // a ** b\r\n  BITWISE_AND,            // a & b\r\n  BITWISE_OR,             // a | b\r\n  BITWISE_XOR,            // a ^ b\r\n  BITWISE_SHL,            // a << b\r\n  BITWISE_SHR,            // a >> b\r\n  BITWISE_SHR_U,          // a >>> b\r\n  EQ,                     // a == b\r\n  NE,                     // a != b\r\n  GT,                     // a > b\r\n  GE,                     // a >= b\r\n  LT,                     // a < b\r\n  LE,                     // a <= b\r\n\r\n  // unary prefix\r\n  PLUS,                   // +a\r\n  MINUS,                  // -a\r\n  NOT,                    // !a\r\n  BITWISE_NOT,            // ~a\r\n  PREFIX_INC,             // ++a\r\n  PREFIX_DEC,             // --a\r\n\r\n  // unary postfix\r\n  POSTFIX_INC,            // a++\r\n  POSTFIX_DEC             // a--\r\n\r\n  // not overridable:\r\n  // IDENTITY             // a === b\r\n  // LOGICAL_AND          // a && b\r\n  // LOGICAL_OR           // a || b\r\n}\r\n\r\n/** Returns the operator kind represented by the specified decorator and string argument. */\r\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\r\n  assert(arg.length);\r\n  switch (decoratorKind) {\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.OPENBRACKET: {\r\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\r\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\r\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.ADD;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.SUB;\r\n          break;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          if (arg == \"*\") return OperatorKind.MUL;\r\n          if (arg == \"**\") return OperatorKind.POW;\r\n          break;\r\n        }\r\n        case CharCode.SLASH: {\r\n          if (arg == \"/\") return OperatorKind.DIV;\r\n          break;\r\n        }\r\n        case CharCode.PERCENT: {\r\n          if (arg == \"%\") return OperatorKind.REM;\r\n          break;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\r\n          break;\r\n        }\r\n        case CharCode.BAR: {\r\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\r\n          break;\r\n        }\r\n        case CharCode.CARET: {\r\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\r\n          break;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          if (arg == \"==\") return OperatorKind.EQ;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!=\") return OperatorKind.NE;\r\n          break;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          if (arg == \">\") return OperatorKind.GT;\r\n          if (arg == \">=\") return OperatorKind.GE;\r\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\r\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\r\n          break;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          if (arg == \"<\") return OperatorKind.LT;\r\n          if (arg == \"<=\") return OperatorKind.LE;\r\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_PREFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.PLUS;\r\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.MINUS;\r\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!\") return OperatorKind.NOT;\r\n          break;\r\n        }\r\n        case CharCode.TILDE: {\r\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_POSTFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return OperatorKind.INVALID;\r\n}\r\n\r\nconst noTypesYet = new Map<string,Type>();\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Array of source files. */\r\n  sources: Source[];\r\n  /** Resolver instance. */\r\n  resolver: Resolver;\r\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n\r\n  /** Elements by internal name. */\r\n  elementsLookup: Map<string,Element> = new Map();\r\n  /** Class and function instances by internal name. */\r\n  instancesLookup: Map<string,Element> = new Map();\r\n  /** Types by internal name. */\r\n  typesLookup: Map<string,Type> = noTypesYet;\r\n  /** Declared type aliases. */\r\n  typeAliases: Map<string,TypeAlias> = new Map();\r\n  /** File-level exports by exported name. */\r\n  fileLevelExports: Map<string,Element> = new Map();\r\n  /** Module-level exports by exported name. */\r\n  moduleLevelExports: Map<string,ModuleExport> = new Map();\r\n\r\n  /** Array prototype reference. */\r\n  arrayPrototype: ClassPrototype | null = null;\r\n  /** String instance reference. */\r\n  stringInstance: Class | null = null;\r\n  /** Start function reference. */\r\n  startFunction: FunctionPrototype;\r\n  /** Main function reference, if present. */\r\n  mainFunction: FunctionPrototype | null = null;\r\n  /** Abort function reference, if present. */\r\n  abortInstance: Function | null = null;\r\n  /** Memory allocation function. */\r\n  memoryAllocateInstance: Function | null = null;\r\n\r\n  /** Whether a garbage collector is present or not. */\r\n  hasGC: bool = false;\r\n  /** Garbage collector allocation function. */\r\n  gcAllocateInstance: Function | null = null;\r\n  /** Garbage collector link function called when a managed object is referenced from a parent. */\r\n  gcLinkInstance: Function | null = null;\r\n  /** Garbage collector mark function called to on reachable managed objects. */\r\n  gcMarkInstance: Function | null = null;\r\n  /** Size of a managed object header. */\r\n  gcHeaderSize: u32 = 0;\r\n\r\n  /** Currently processing filespace. */\r\n  currentFilespace: Filespace;\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.resolver = new Resolver(this);\r\n    this.sources = [];\r\n  }\r\n\r\n  /** Gets a source by its exact path. */\r\n  getSource(normalizedPath: string): Source | null {\r\n    var sources = this.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == normalizedPath) return source;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the source for the specified possibly ambiguous path. */\r\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\r\n    var tmp: string;\r\n    return (\r\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\r\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\r\n      this.getSource((tmp = LIBRARY_PREFIX + normalizedPathWithoutExtension) + \".ts\") ||\r\n      this.getSource( tmp                                                    + \"/index.ts\")\r\n    );\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n\r\n    // add built-in types\r\n    this.typesLookup = new Map([\r\n      [\"i8\", Type.i8],\r\n      [\"i16\", Type.i16],\r\n      [\"i32\", Type.i32],\r\n      [\"i64\", Type.i64],\r\n      [\"isize\", options.isizeType],\r\n      [\"u8\", Type.u8],\r\n      [\"u16\", Type.u16],\r\n      [\"u32\", Type.u32],\r\n      [\"u64\", Type.u64],\r\n      [\"usize\", options.usizeType],\r\n      [\"bool\", Type.bool],\r\n      [\"f32\", Type.f32],\r\n      [\"f64\", Type.f64],\r\n      [\"void\", Type.void],\r\n      [\"number\", Type.f64],\r\n      [\"boolean\", Type.bool]\r\n    ]);\r\n\r\n    // add compiler hints\r\n    this.setConstantInteger(\"ASC_TARGET\", Type.i32,\r\n      i64_new(options.isWasm64 ? 2 : 1));\r\n    this.setConstantInteger(\"ASC_NO_TREESHAKING\", Type.bool,\r\n      i64_new(options.noTreeShaking ? 1 : 0, 0));\r\n    this.setConstantInteger(\"ASC_NO_ASSERT\", Type.bool,\r\n      i64_new(options.noAssert ? 1 : 0, 0));\r\n    this.setConstantInteger(\"ASC_MEMORY_BASE\", Type.i32,\r\n      i64_new(options.memoryBase, 0));\r\n    this.setConstantInteger(\"ASC_OPTIMIZE_LEVEL\", Type.i32,\r\n      i64_new(options.optimizeLevelHint, 0));\r\n    this.setConstantInteger(\"ASC_SHRINK_LEVEL\", Type.i32,\r\n      i64_new(options.shrinkLevelHint, 0));\r\n    this.setConstantInteger(\"ASC_FEATURE_MUTABLE_GLOBAL\", Type.bool,\r\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\r\n    this.setConstantInteger(\"ASC_FEATURE_SIGN_EXTENSION\", Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\r\n\r\n    // remember deferred elements\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedExports = new Map<string,QueuedExport>();\r\n    var queuedExtends = new Array<ClassPrototype>();\r\n    var queuedImplements = new Array<ClassPrototype>();\r\n\r\n    // build initial lookup maps of internal names to declarations\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n\r\n      // create one filespace per source\r\n      let filespace = new Filespace(this, source);\r\n      this.elementsLookup.set(filespace.internalName, filespace);\r\n      this.currentFilespace = filespace;\r\n\r\n      // process this source's statements\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeAlias(<TypeDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0; i < queuedImports.length;) {\r\n      let queuedImport = queuedImports[i];\r\n      let declaration = queuedImport.declaration;\r\n      if (declaration) { // named\r\n        let element = this.tryLocateImport(queuedImport.externalName, queuedExports);\r\n        if (element) {\r\n          this.elementsLookup.set(queuedImport.localName, element);\r\n          queuedImports.splice(i, 1);\r\n        } else {\r\n          if (element = this.tryLocateImport(queuedImport.externalNameAlt, queuedExports)) {\r\n            this.elementsLookup.set(queuedImport.localName, element);\r\n            queuedImports.splice(i, 1);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              declaration.range,\r\n              (<ImportStatement>declaration.parent).path.value,\r\n              declaration.externalName.text\r\n            );\r\n            ++i;\r\n          }\r\n        }\r\n      } else { // filespace\r\n        let element = this.elementsLookup.get(queuedImport.externalName);\r\n        if (element) {\r\n          this.elementsLookup.set(queuedImport.localName, element);\r\n          queuedImports.splice(i, 1);\r\n        } else {\r\n          if (element = this.elementsLookup.get(queuedImport.externalNameAlt)) {\r\n            this.elementsLookup.set(queuedImport.localName, element);\r\n            queuedImports.splice(i, 1);\r\n          } else {\r\n            assert(false); // already reported by the parser not finding the file\r\n            ++i;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [exportName, queuedExport] of queuedExports) {\r\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\r\n      let element: Element | null;\r\n      do {\r\n        if (currentExport.isReExport) {\r\n          if (element = this.fileLevelExports.get(currentExport.externalName)) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n            break;\r\n          }\r\n          currentExport = queuedExports.get(currentExport.externalName);\r\n          if (!currentExport) {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.member.externalName.range,\r\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\r\n              queuedExport.member.externalName.text\r\n            );\r\n          }\r\n        } else {\r\n          if (\r\n            // normal export\r\n            (element = this.elementsLookup.get(currentExport.externalName)) ||\r\n            // library re-export\r\n            (element = this.elementsLookup.get(currentExport.member.name.text))\r\n          ) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Cannot_find_name_0,\r\n              queuedExport.member.range, queuedExport.member.name.text\r\n            );\r\n          }\r\n          break;\r\n        }\r\n      } while (currentExport);\r\n    }\r\n\r\n    // resolve base prototypes of derived classes\r\n    var resolver = this.resolver;\r\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\r\n      let derivedPrototype = queuedExtends[i];\r\n      let derivedDeclaration = derivedPrototype.declaration;\r\n      let derivedType = assert(derivedDeclaration.extendsType);\r\n      let baseElement = resolver.resolveIdentifier(derivedType.name, null); // reports\r\n      if (!baseElement) continue;\r\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let basePrototype = <ClassPrototype>baseElement;\r\n        derivedPrototype.basePrototype = basePrototype;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          derivedType.range\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    {\r\n      let globalAliases = options.globalAliases;\r\n      if (globalAliases) {\r\n        for (let [alias, name] of globalAliases) {\r\n          if (!name.length) continue; // explicitly disabled\r\n          let element = this.elementsLookup.get(name);\r\n          if (element) this.elementsLookup.set(alias, element);\r\n          else throw new Error(\"element not found: \" + name);\r\n        }\r\n      }\r\n    }\r\n\r\n    // register 'Array'\r\n    if (this.elementsLookup.has(\"Array\")) {\r\n      let element = assert(this.elementsLookup.get(\"Array\"));\r\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n      this.arrayPrototype = <ClassPrototype>element;\r\n    }\r\n\r\n    // register 'String'\r\n    if (this.elementsLookup.has(\"String\")) {\r\n      let element = assert(this.elementsLookup.get(\"String\"));\r\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n      let instance = resolver.resolveClass(<ClassPrototype>element, null);\r\n      if (instance) {\r\n        if (this.typesLookup.has(\"string\")) {\r\n          let declaration = (<ClassPrototype>element).declaration;\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, declaration.programLevelInternalName\r\n          );\r\n        } else {\r\n          this.stringInstance = instance;\r\n          this.typesLookup.set(\"string\", instance.type);\r\n        }\r\n      }\r\n    }\r\n\r\n    // register 'start'\r\n    {\r\n      let element = assert(this.elementsLookup.get(\"start\"));\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      this.startFunction = <FunctionPrototype>element;\r\n    }\r\n\r\n    // register 'main' if present\r\n    if (this.moduleLevelExports.has(\"main\")) {\r\n      let element = (<ModuleExport>this.moduleLevelExports.get(\"main\")).element;\r\n      if (\r\n        element.kind == ElementKind.FUNCTION_PROTOTYPE &&\r\n        !(<FunctionPrototype>element).isAny(CommonFlags.GENERIC | CommonFlags.AMBIENT)\r\n      ) {\r\n        (<FunctionPrototype>element).set(CommonFlags.MAIN);\r\n        this.mainFunction = <FunctionPrototype>element;\r\n      }\r\n    }\r\n\r\n    // register 'abort' if present\r\n    if (this.elementsLookup.has(\"abort\")) {\r\n      let element = <Element>this.elementsLookup.get(\"abort\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\r\n      if (instance) this.abortInstance = instance;\r\n    }\r\n\r\n    // register 'memory.allocate' if present\r\n    if (this.elementsLookup.has(\"memory\")) {\r\n      let element = <Element>this.elementsLookup.get(\"memory\");\r\n      let members = element.members;\r\n      if (members) {\r\n        if (members.has(\"allocate\")) {\r\n          element = assert(members.get(\"allocate\"));\r\n          assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n          let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\r\n          if (instance) this.memoryAllocateInstance = instance;\r\n        }\r\n      }\r\n    }\r\n\r\n    // register GC hooks if present\r\n    if (\r\n      this.elementsLookup.has(\"__gc_allocate\") &&\r\n      this.elementsLookup.has(\"__gc_link\") &&\r\n      this.elementsLookup.has(\"__gc_mark\")\r\n    ) {\r\n      // __gc_allocate(usize, (ref: usize) => void): usize\r\n      let element = <Element>this.elementsLookup.get(\"__gc_allocate\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcAllocateInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\r\n      let signature = gcAllocateInstance.signature;\r\n      assert(signature.parameterTypes.length == 2);\r\n      assert(signature.parameterTypes[0] == this.options.usizeType);\r\n      assert(signature.parameterTypes[1].signatureReference);\r\n      assert(signature.returnType == this.options.usizeType);\r\n\r\n      // __gc_link(usize, usize): void\r\n      element = <Element>this.elementsLookup.get(\"__gc_link\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcLinkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\r\n      signature = gcLinkInstance.signature;\r\n      assert(signature.parameterTypes.length == 2);\r\n      assert(signature.parameterTypes[0] == this.options.usizeType);\r\n      assert(signature.parameterTypes[1] == this.options.usizeType);\r\n      assert(signature.returnType == Type.void);\r\n\r\n      // __gc_mark(usize): void\r\n      element = <Element>this.elementsLookup.get(\"__gc_mark\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcMarkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\r\n      signature = gcMarkInstance.signature;\r\n      assert(signature.parameterTypes.length == 1);\r\n      assert(signature.parameterTypes[0] == this.options.usizeType);\r\n      assert(signature.returnType == Type.void);\r\n\r\n      this.gcAllocateInstance = gcAllocateInstance;\r\n      this.gcLinkInstance = gcLinkInstance;\r\n      this.gcMarkInstance = gcMarkInstance;\r\n      this.gcHeaderSize = (2 * options.usizeType.byteSize + 4 + 7) & ~7; // TODO: hardcoded atm\r\n      this.hasGC = true;\r\n    }\r\n  }\r\n\r\n  /** Sets a constant integer value. */\r\n  setConstantInteger(globalName: string, type: Type, value: I64): void {\r\n    assert(type.is(TypeFlags.INTEGER));\r\n    this.elementsLookup.set(globalName,\r\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\r\n        .withConstantIntegerValue(value)\r\n    );\r\n  }\r\n\r\n  /** Sets a constant float value. */\r\n  setConstantFloat(globalName: string, type: Type, value: f64): void {\r\n    assert(type.is(TypeFlags.FLOAT));\r\n    this.elementsLookup.set(globalName,\r\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\r\n        .withConstantFloatValue(value)\r\n    );\r\n  }\r\n\r\n  /** Tries to locate an import by traversing exports and queued exports. */\r\n  private tryLocateImport(\r\n    externalName: string,\r\n    queuedNamedExports: Map<string,QueuedExport>\r\n  ): Element | null {\r\n    var element: Element | null;\r\n    var fileLevelExports = this.fileLevelExports;\r\n    do {\r\n      if (element = fileLevelExports.get(externalName)) return element;\r\n      let queuedExport = queuedNamedExports.get(externalName);\r\n      if (!queuedExport) break;\r\n      if (queuedExport.isReExport) {\r\n        externalName = queuedExport.externalName;\r\n        continue;\r\n      }\r\n      return this.elementsLookup.get(queuedExport.externalName);\r\n    } while (true);\r\n    return null;\r\n  }\r\n\r\n  /** Checks that only supported decorators are present. */\r\n  private checkDecorators(\r\n    decorators: DecoratorNode[],\r\n    acceptedFlags: DecoratorFlags\r\n  ): DecoratorFlags {\r\n    var presentFlags = DecoratorFlags.NONE;\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      let kind = decoratorNameToKind(decorator.name);\r\n      let flag = decoratorKindToFlag(kind);\r\n      if (flag) {\r\n        if (flag == DecoratorFlags.BUILTIN) {\r\n          if (decorator.range.source.isLibrary) {\r\n            presentFlags |= flag;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Decorator_0_is_not_valid_here,\r\n              decorator.range, decorator.name.range.toString()\r\n            );\r\n          }\r\n        } else if (!(acceptedFlags & flag)) {\r\n          this.error(\r\n            DiagnosticCode.Decorator_0_is_not_valid_here,\r\n            decorator.range, decorator.name.range.toString()\r\n          );\r\n        } else if (presentFlags & flag) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_decorator,\r\n            decorator.range, decorator.name.range.toString()\r\n          );\r\n        } else {\r\n          presentFlags |= flag;\r\n        }\r\n      }\r\n    }\r\n    return presentFlags;\r\n  }\r\n\r\n  /** Checks and sets up global options of an element. */\r\n  private checkGlobal(\r\n    element: Element,\r\n    declaration: DeclarationStatement\r\n  ): void {\r\n    var parentNode = declaration.parent;\r\n    // alias globally if explicitly annotated @global or exported from a top-level library file\r\n    if (\r\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\r\n      (\r\n        declaration.range.source.isLibrary &&\r\n        element.is(CommonFlags.EXPORT) &&\r\n        (\r\n          assert(parentNode).kind == NodeKind.SOURCE ||\r\n          (\r\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\r\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\r\n          )\r\n        )\r\n    ) {\r\n      let globalName = declaration.programLevelInternalName;\r\n      if (this.elementsLookup.has(globalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, element.internalName\r\n        );\r\n      } else {\r\n        this.elementsLookup.set(globalName, element);\r\n      }\r\n    }\r\n    // builtins use the global name directly\r\n    if (element.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n      element.internalName = declaration.programLevelInternalName;\r\n    }\r\n  }\r\n\r\n  /** Initializes a class declaration. */\r\n  private initializeClass(\r\n    declaration: ClassDeclaration,\r\n    queuedExtends: ClassPrototype[],\r\n    queuedImplements: ClassPrototype[],\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new ClassPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      decorators\r\n        ? this.checkDecorators(decorators,\r\n            DecoratorFlags.GLOBAL |\r\n            DecoratorFlags.SEALED |\r\n            DecoratorFlags.UNMANAGED\r\n          )\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    if (implementsTypes) {\r\n      let numImplementsTypes = implementsTypes.length;\r\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (numImplementsTypes) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\r\n            Range.join(\r\n              declaration.name.range,\r\n              implementsTypes[numImplementsTypes - 1].range\r\n            )\r\n          );\r\n        }\r\n\r\n      // remember classes that implement interfaces\r\n      } else if (numImplementsTypes) {\r\n        for (let i = 0; i < numImplementsTypes; ++i) {\r\n          this.warning( // TODO\r\n            DiagnosticCode.Operation_not_supported,\r\n            implementsTypes[i].range\r\n          );\r\n        }\r\n        queuedImplements.push(prototype);\r\n      }\r\n    }\r\n\r\n    // remember classes that extend another one\r\n    if (declaration.extendsType) queuedExtends.push(prototype);\r\n\r\n    // add as namespace member if applicable\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // otherwise add to file-level exports if exported\r\n    } else if (prototype.is(CommonFlags.EXPORT)) {\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      this.currentFilespace.members.set(simpleName, prototype);\r\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, existingExport.element.internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n          element: prototype,\r\n          identifier: declaration.name\r\n        });\r\n      }\r\n    }\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          assert(false); // should have been reported while parsing\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobal(prototype, declaration);\r\n  }\r\n\r\n  /** Initializes a field of a class or interface. */\r\n  private initializeField(\r\n    declaration: FieldDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var decorators = declaration.decorators;\r\n    var isInterface = classPrototype.kind == ElementKind.INTERFACE_PROTOTYPE;\r\n\r\n    // static fields become global variables\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      if (isInterface) {\r\n        // should have been reported while parsing\r\n        assert(false);\r\n      }\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      let staticField = new Global(\r\n        this,\r\n        name,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration,\r\n        decorators\r\n          ? this.checkDecorators(decorators, DecoratorFlags.INLINE)\r\n          : DecoratorFlags.NONE\r\n      );\r\n      staticField.parent = classPrototype;\r\n      classPrototype.members.set(name, staticField);\r\n      this.elementsLookup.set(internalName, staticField);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        staticField.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n      if (staticField.hasDecorator(DecoratorFlags.INLINE) && !staticField.is(CommonFlags.READONLY)) {\r\n        this.error(\r\n          DiagnosticCode.Decorator_0_is_not_valid_here,\r\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\r\n        );\r\n      }\r\n\r\n    // instance fields are remembered until resolved\r\n    } else {\r\n      if (isInterface) {\r\n        // should have been reported while parsing\r\n        assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\r\n      }\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instanceField = new FieldPrototype(\r\n        classPrototype,\r\n        name,\r\n        internalName,\r\n        declaration\r\n      );\r\n      if (decorators) this.checkDecorators(decorators, DecoratorFlags.NONE);\r\n      classPrototype.instanceMembers.set(name, instanceField);\r\n    }\r\n  }\r\n\r\n  /** Initializes a method of a class or interface. */\r\n  private initializeMethod(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var prototype: FunctionPrototype | null = null;\r\n\r\n    var decorators = declaration.decorators;\r\n    var decoratorFlags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      decoratorFlags = this.checkDecorators(decorators,\r\n        DecoratorFlags.OPERATOR_BINARY  |\r\n        DecoratorFlags.OPERATOR_PREFIX  |\r\n        DecoratorFlags.OPERATOR_POSTFIX |\r\n        DecoratorFlags.INLINE\r\n      );\r\n    }\r\n\r\n    // static methods become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      classPrototype.members.set(simpleName, prototype);\r\n      this.elementsLookup.set(internalName, prototype);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance methods are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\r\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\r\n      // }\r\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\r\n        if (classPrototype.constructorPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\r\n            declaration.name.range\r\n          );\r\n        } else {\r\n          prototype.set(CommonFlags.CONSTRUCTOR);\r\n          classPrototype.constructorPrototype = prototype;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers.set(simpleName, prototype);\r\n      }\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n\r\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\r\n  }\r\n\r\n  private checkOperatorOverloads(\r\n    decorators: DecoratorNode[] | null,\r\n    prototype: FunctionPrototype,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        switch (decorator.decoratorKind) {\r\n          case DecoratorKind.OPERATOR:\r\n          case DecoratorKind.OPERATOR_BINARY:\r\n          case DecoratorKind.OPERATOR_PREFIX:\r\n          case DecoratorKind.OPERATOR_POSTFIX: {\r\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n            if (numArgs == 1) {\r\n              let firstArg = (<Expression[]>decorator.arguments)[0];\r\n              if (\r\n                firstArg.kind == NodeKind.LITERAL &&\r\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n              ) {\r\n                let kind = operatorKindFromDecorator(\r\n                  decorator.decoratorKind,\r\n                  (<StringLiteralExpression>firstArg).value\r\n                );\r\n                if (kind == OperatorKind.INVALID) {\r\n                  this.error(\r\n                    DiagnosticCode.Operation_not_supported,\r\n                    firstArg.range\r\n                  );\r\n                } else {\r\n                  let overloads = classPrototype.overloadPrototypes;\r\n                  if (overloads.has(kind)) {\r\n                    this.error(\r\n                      DiagnosticCode.Duplicate_function_implementation,\r\n                      firstArg.range\r\n                    );\r\n                  } else {\r\n                    prototype.operatorKind = kind;\r\n                    overloads.set(kind, prototype);\r\n                  }\r\n                }\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.String_literal_expected,\r\n                  firstArg.range\r\n                );\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                decorator.range, \"1\", numArgs.toString(0)\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeAccessor(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalPropertyName = declaration.fileLevelInternalName;\r\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    var isNew = false;\r\n    if (propertyElement) {\r\n      if (\r\n        propertyElement.kind != ElementKind.PROPERTY ||\r\n        (isGetter\r\n          ? (<Property>propertyElement).getterPrototype\r\n          : (<Property>propertyElement).setterPrototype\r\n        ) != null\r\n      ) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalPropertyName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      propertyElement = new Property(\r\n        this,\r\n        simpleName,\r\n        internalPropertyName,\r\n        classPrototype\r\n      );\r\n      isNew = true;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var decoratorFlags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      decoratorFlags = this.checkDecorators(decorators,\r\n        DecoratorFlags.INLINE\r\n      );\r\n    }\r\n\r\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\r\n\r\n    // static accessors become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\r\n      if (this.elementsLookup.has(staticName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, staticName\r\n        );\r\n        return;\r\n      }\r\n      let staticPrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        staticName,\r\n        declaration,\r\n        null,\r\n        decoratorFlags\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = staticPrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = staticPrototype;\r\n      }\r\n      if (isNew) {\r\n        if (classPrototype.members) {\r\n          if (classPrototype.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, staticName\r\n            );\r\n            return;\r\n          }\r\n        } else {\r\n          classPrototype.members = new Map();\r\n        }\r\n        classPrototype.members.set(simpleName, propertyElement); // check above\r\n      } else {\r\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\r\n      }\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance accessors are remembered until resolved\r\n    } else {\r\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(baseName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalPropertyName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instancePrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        instanceName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = instancePrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = instancePrototype;\r\n      }\r\n      classPrototype.instanceMembers.set(baseName, propertyElement);\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeEnum(\r\n    declaration: EnumDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var element = new Enum(this, simpleName, internalName, declaration);\r\n    element.parent = namespace;\r\n    this.elementsLookup.set(internalName, element);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, element);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, element);\r\n      this.currentFilespace.members.set(simpleName, element);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, existingExport.element.internalName\r\n          );\r\n          return;\r\n        }\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n          element,\r\n          identifier: declaration.name\r\n        });\r\n      }\r\n    }\r\n\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n\r\n    this.checkGlobal(element, declaration);\r\n  }\r\n\r\n  private initializeEnumValue(\r\n    declaration: EnumValueDeclaration,\r\n    enm: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (enm.members) {\r\n      if (enm.members.has(name)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      enm.members = new Map();\r\n    }\r\n    var value = new EnumValue(enm, this, name, internalName, declaration);\r\n    enm.members.set(name, value);\r\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\r\n      value.set(CommonFlags.MODULE_EXPORT);\r\n    }\r\n  }\r\n\r\n  private initializeExports(\r\n    statement: ExportStatement,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var members = statement.members;\r\n    if (members) { // named\r\n      for (let i = 0, k = members.length; i < k; ++i) {\r\n        this.initializeExport(members[i], statement.internalPath, queuedExports);\r\n      }\r\n    } else { // TODO: filespace\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.range\r\n      );\r\n    }\r\n  }\r\n\r\n  private setExportAndCheckLibrary(\r\n    internalName: string,\r\n    element: Element,\r\n    externalIdentifier: IdentifierExpression\r\n  ): void {\r\n    // add to file-level exports\r\n    this.fileLevelExports.set(internalName, element);\r\n\r\n    // add to filespace\r\n    var internalPath = externalIdentifier.range.source.internalPath;\r\n    var prefix = FILESPACE_PREFIX + internalPath;\r\n    var filespace = this.elementsLookup.get(prefix);\r\n    if (!filespace) filespace = assert(this.elementsLookup.get(prefix + PATH_DELIMITER + \"index\"));\r\n    assert(filespace.kind == ElementKind.FILESPACE);\r\n    var simpleName = externalIdentifier.text;\r\n    (<Filespace>filespace).members.set(simpleName, element);\r\n\r\n    // add global alias if a top-level export of a library file\r\n    var source = externalIdentifier.range.source;\r\n    if (source.isLibrary) {\r\n      if (this.elementsLookup.has(simpleName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          externalIdentifier.range, simpleName\r\n        );\r\n      } else {\r\n        element.internalName = simpleName;\r\n        this.elementsLookup.set(simpleName, element);\r\n      }\r\n\r\n    // add module level export if a top-level export of an entry file\r\n    } else if (source.isEntry) {\r\n      this.moduleLevelExports.set(externalIdentifier.text, <ModuleExport>{\r\n        element,\r\n        identifier: externalIdentifier\r\n      });\r\n    }\r\n  }\r\n\r\n  private initializeExport(\r\n    member: ExportMember,\r\n    internalPath: string | null,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\r\n    if (this.fileLevelExports.has(externalName)) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.externalName.range, externalName\r\n      );\r\n      return;\r\n    }\r\n    var referencedName: string;\r\n    var referencedElement: Element | null;\r\n    var queuedExport: QueuedExport | null;\r\n\r\n    // export local element\r\n    if (internalPath == null) {\r\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the element exists\r\n      if (this.elementsLookup.has(referencedName)) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          <Element>this.elementsLookup.get(referencedName),\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = false;\r\n      queuedExport.externalName = referencedName; // -> here: local name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n\r\n    // export external element\r\n    } else {\r\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the export exists\r\n      referencedElement = this.elementsLookup.get(referencedName);\r\n      if (referencedElement) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // walk already known queued exports\r\n      let seen = new Set<QueuedExport>();\r\n      while (queuedExport = queuedExports.get(referencedName)) {\r\n        if (queuedExport.isReExport) {\r\n          referencedElement = this.fileLevelExports.get(queuedExport.externalName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          referencedName = queuedExport.externalName;\r\n          if (seen.has(queuedExport)) break;\r\n          seen.add(queuedExport);\r\n        } else {\r\n          referencedElement = this.elementsLookup.get(queuedExport.externalName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = true;\r\n      queuedExport.externalName = referencedName; // -> here: external name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n    }\r\n  }\r\n\r\n  private initializeFunction(\r\n    declaration: FunctionDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var decorators = declaration.decorators;\r\n    var prototype = new FunctionPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      null,\r\n      decorators\r\n        ? this.checkDecorators(decorators,\r\n            DecoratorFlags.GLOBAL |\r\n            DecoratorFlags.INLINE |\r\n            DecoratorFlags.EXTERNAL\r\n          )\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.parent = namespace;\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      this.currentFilespace.members.set(simpleName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, existingExport.element.internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n          element: prototype,\r\n          identifier: declaration.name\r\n        });\r\n      }\r\n    }\r\n\r\n    this.checkGlobal(prototype, declaration);\r\n  }\r\n\r\n  private initializeImports(\r\n    statement: ImportStatement,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) {\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          statement.internalPath,\r\n          queuedExports, queuedImports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\r\n      let simpleName = statement.namespaceName.text;\r\n      let internalName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        simpleName\r\n      );\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          statement.namespaceName.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // resolve right away if the exact filespace exists\r\n      let filespace = this.elementsLookup.get(statement.internalPath);\r\n      if (filespace) {\r\n        this.elementsLookup.set(internalName, filespace);\r\n        return;\r\n      }\r\n\r\n      // otherwise queue it\r\n      let queuedImport = new QueuedImport();\r\n      queuedImport.localName = internalName;\r\n      let externalName = FILESPACE_PREFIX + statement.internalPath;\r\n      queuedImport.externalName = externalName;\r\n      queuedImport.externalNameAlt = externalName + PATH_DELIMITER + \"index\";\r\n      queuedImport.declaration = null; // filespace\r\n      queuedImports.push(queuedImport);\r\n    }\r\n  }\r\n\r\n  private initializeImport(\r\n    declaration: ImportDeclaration,\r\n    internalPath: string,\r\n    queuedNamedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var localName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(localName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, localName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var externalName = internalPath + PATH_DELIMITER + declaration.externalName.text;\r\n\r\n    // resolve right away if the exact export exists\r\n    var element: Element | null;\r\n    if (element = this.fileLevelExports.get(externalName)) {\r\n      this.elementsLookup.set(localName, element);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    const indexPart = PATH_DELIMITER + \"index\";\r\n    var queuedImport = new QueuedImport();\r\n    queuedImport.localName = localName;\r\n    if (internalPath.endsWith(indexPart)) {\r\n      queuedImport.externalName = externalName; // try exact first\r\n      queuedImport.externalNameAlt = (\r\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\r\n        declaration.externalName.text\r\n      );\r\n    } else {\r\n      queuedImport.externalName = externalName; // try exact first\r\n      queuedImport.externalNameAlt = (\r\n        internalPath +\r\n        indexPart +\r\n        PATH_DELIMITER +\r\n        declaration.externalName.text\r\n      );\r\n    }\r\n    queuedImport.declaration = declaration; // named\r\n    queuedImports.push(queuedImport);\r\n  }\r\n\r\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new InterfacePrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      decorators\r\n        ? this.checkDecorators(decorators, DecoratorFlags.GLOBAL)\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(prototype.internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(prototype.internalName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      this.currentFilespace.members.set(simpleName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, existingExport.element.internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n          element: prototype,\r\n          identifier: declaration.name\r\n        });\r\n      }\r\n    }\r\n\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"interface member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobal(prototype, declaration);\r\n  }\r\n\r\n  private initializeNamespace(\r\n    declaration: NamespaceDeclaration,\r\n    queuedExtends: ClassPrototype[],\r\n    queuedImplements: ClassPrototype[],\r\n    parentNamespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var simpleName = declaration.name.text;\r\n    var namespace = this.elementsLookup.get(internalName);\r\n    if (!namespace) {\r\n      namespace = new Namespace(this, simpleName, internalName, declaration);\r\n      namespace.parent = parentNamespace;\r\n      this.elementsLookup.set(internalName, namespace);\r\n      this.checkGlobal(namespace, declaration);\r\n    }\r\n\r\n    if (parentNamespace) {\r\n      if (parentNamespace.members) {\r\n        if (parentNamespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        parentNamespace.members = new Map();\r\n      }\r\n      parentNamespace.members.set(simpleName, namespace);\r\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\r\n      let existingExport = this.fileLevelExports.get(internalName);\r\n      if (existingExport) {\r\n        if (!existingExport.is(CommonFlags.EXPORT)) {\r\n          this.error(\r\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n            declaration.name.range, namespace.internalName\r\n          ); // recoverable\r\n        }\r\n        namespace = existingExport; // join\r\n      } else {\r\n        this.fileLevelExports.set(internalName, namespace);\r\n      }\r\n      this.currentFilespace.members.set(simpleName, namespace);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n          if (existingExport.element !== namespace) { // not merged\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, existingExport.element.internalName\r\n            );\r\n            return;\r\n          }\r\n        } else {\r\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n            element: namespace,\r\n            identifier: declaration.name\r\n          });\r\n        }\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      switch (members[i].kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\r\n          // TODO: what about namespaced types?\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            members[i].range\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>members[i], namespace);\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"namespace member expected\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\r\n    // type aliases are program globals\r\n    // TODO: what about namespaced types?\r\n    var name = declaration.name.text;\r\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, name\r\n      );\r\n      return;\r\n    }\r\n    var alias = new TypeAlias();\r\n    alias.typeParameters = declaration.typeParameters;\r\n    alias.type = declaration.type;\r\n    this.typeAliases.set(name, alias);\r\n  }\r\n\r\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let decorators = declaration.decorators;\r\n      let internalName = declaration.fileLevelInternalName;\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        continue;\r\n      }\r\n      let simpleName = declaration.name.text;\r\n      let global = new Global(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration,\r\n        decorators\r\n          ? this.checkDecorators(decorators,\r\n              DecoratorFlags.GLOBAL |\r\n              DecoratorFlags.INLINE |\r\n              DecoratorFlags.EXTERNAL\r\n            )\r\n          : DecoratorFlags.NONE\r\n      );\r\n      global.parent = namespace;\r\n      this.elementsLookup.set(internalName, global);\r\n\r\n      if (global.hasDecorator(DecoratorFlags.INLINE) && !global.is(CommonFlags.CONST)) {\r\n        this.error(\r\n          DiagnosticCode.Decorator_0_is_not_valid_here,\r\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\r\n        );\r\n      }\r\n\r\n      if (namespace) {\r\n        if (namespace.members) {\r\n          if (namespace.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n        } else {\r\n          namespace.members = new Map();\r\n        }\r\n        namespace.members.set(simpleName, global);\r\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n        }\r\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\r\n        if (this.fileLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n        } else {\r\n          this.fileLevelExports.set(internalName, global);\r\n        }\r\n        this.currentFilespace.members.set(simpleName, global);\r\n        if (declaration.range.source.isEntry) {\r\n          if (this.moduleLevelExports.has(simpleName)) {\r\n            let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, existingExport.element.internalName\r\n            );\r\n            continue;\r\n          }\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\r\n            element: global,\r\n            identifier: declaration.name\r\n          });\r\n        }\r\n      }\r\n      this.checkGlobal(global, declaration);\r\n    }\r\n  }\r\n}\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE,\r\n  /** A {@link Filespace}. */\r\n  FILESPACE,\r\n}\r\n\r\nexport enum DecoratorFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n  /** Is a program global. */\r\n  GLOBAL = 1 << 0,\r\n  /** Is a binary operator overload. */\r\n  OPERATOR_BINARY = 1 << 1,\r\n  /** Is a unary prefix operator overload. */\r\n  OPERATOR_PREFIX = 1 << 2,\r\n  /** Is a unary postfix operator overload. */\r\n  OPERATOR_POSTFIX = 1 << 3,\r\n  /** Is an unmanaged class. */\r\n  UNMANAGED = 1 << 4,\r\n  /** Is a sealed class. */\r\n  SEALED = 1 << 5,\r\n  /** Is always inlined. */\r\n  INLINE = 1 << 6,\r\n  /** Is using a different external name. */\r\n  EXTERNAL = 1 << 7,\r\n  /** Is a builtin. */\r\n  BUILTIN = 1 << 8\r\n}\r\n\r\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\r\n  switch (kind) {\r\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\r\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\r\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\r\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\r\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\r\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\r\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\r\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\r\n    default: return DecoratorFlags.NONE;\r\n  }\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Specific element kind. */\r\n  kind: ElementKind;\r\n  /** Containing {@link Program}. */\r\n  program: Program;\r\n  /** Simple name. */\r\n  simpleName: string;\r\n  /** Internal name referring to this element. */\r\n  internalName: string;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Decorator flags indicating annotated traits. */\r\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\r\n  /** Namespaced member elements. */\r\n  members: Map<string,Element> | null = null;\r\n  /** Parent element, if applicable. */\r\n  parent: Element | null = null;\r\n\r\n  /** Constructs a new element, linking it to its containing {@link Program}. */\r\n  protected constructor(program: Program, simpleName: string, internalName: string) {\r\n    this.program = program;\r\n    this.simpleName = simpleName;\r\n    this.internalName = internalName;\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n  /** Tests if this element has a specific decorator flag or flags. */\r\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\r\n}\r\n\r\n/** A filespace representing the implicit top-level namespace of a source. */\r\nexport class Filespace extends Element {\r\n\r\n  kind = ElementKind.FILESPACE;\r\n\r\n  /** File members (externally visible only). */\r\n  members: Map<string,Element>; // more specific\r\n\r\n  /** Constructs a new filespace. */\r\n  constructor(\r\n    program: Program,\r\n    source: Source\r\n  ) {\r\n    super(program, source.internalPath, FILESPACE_PREFIX + source.internalPath);\r\n    this.members = new Map();\r\n  }\r\n}\r\n\r\n/** A namespace that differs from a filespace in being user-declared with a name. */\r\nexport class Namespace extends Element {\r\n\r\n  // All elements have namespace semantics. This is an explicitly declared one.\r\n  kind = ElementKind.NAMESPACE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: NamespaceDeclaration; // more specific\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: NamespaceDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends Element {\r\n\r\n  kind = ElementKind.ENUM;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumDeclaration;\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends Element {\r\n\r\n  kind = ElementKind.ENUMVALUE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumValueDeclaration;\r\n  /** Constant value, if applicable. */\r\n  constantValue: i32 = 0;\r\n\r\n  constructor(\r\n    enm: Enum,\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumValueDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = enm;\r\n    this.declaration = declaration;\r\n  }\r\n}\r\n\r\nexport const enum ConstantValueKind {\r\n  NONE,\r\n  INTEGER,\r\n  FLOAT\r\n}\r\n\r\nexport class VariableLikeElement extends Element {\r\n\r\n  // kind varies\r\n\r\n  /** Declaration reference. */\r\n  declaration: VariableLikeDeclarationStatement | null;\r\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\r\n  type: Type;\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  protected constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.type = type;\r\n    this.declaration = declaration;\r\n  }\r\n\r\n  withConstantIntegerValue(value: I64): this {\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n\r\n  withConstantFloatValue(value: f64): this {\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  kind = ElementKind.GLOBAL;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName, type, declaration);\r\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.type = type; // resolved later if `void`\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n\r\n  // not an Element on its own\r\n\r\n  /** Parameter name. */\r\n  name: string;\r\n  /** Parameter type. */\r\n  type: Type;\r\n  /** Parameter initializer. */\r\n  initializer: Expression | null;\r\n\r\n  /** Constructs a new function parameter. */\r\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.initializer = initializer;\r\n  }\r\n}\r\n\r\n/** A function local. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  kind = ElementKind.LOCAL;\r\n\r\n  /** Local index. */\r\n  index: i32;\r\n  /** Respective scoped global, if any. */\r\n  scopedGlobal: Global | null = null;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    index: i32,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null = null\r\n  ) {\r\n    super(program, simpleName, simpleName, type, declaration);\r\n    this.index = index;\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FunctionDeclaration;\r\n  /** If an instance method, the class prototype reference. */\r\n  classPrototype: ClassPrototype | null;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Function> = new Map();\r\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\r\n  classTypeArguments: Type[] | null = null;\r\n  /** Operator kind, if an overload. */\r\n  operatorKind: OperatorKind = OperatorKind.INVALID;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FunctionDeclaration,\r\n    classPrototype: ClassPrototype | null = null,\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.classPrototype = classPrototype;\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  toString(): string { return this.simpleName; }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends Element {\r\n\r\n  kind = ElementKind.FUNCTION;\r\n\r\n  /** Prototype reference. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** Map of locals by name. */\r\n  localsByName: Map<string,Local> = new Map();\r\n  /** Array of locals by index. */\r\n  localsByIndex: Local[] = [];\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Current break context label. */\r\n  breakContext: string | null = null;\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Current control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] = [];\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n  /** The outer scope, if a function expression. */\r\n  outerScope: Flow | null = null;\r\n\r\n  private nextBreakId: i32 = 0;\r\n  private breakStack: i32[] | null = null;\r\n  nextInlineId: i32 = 0;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    prototype: FunctionPrototype,\r\n    internalName: string,\r\n    signature: Signature,\r\n    parent: Element | null = null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.parent = parent;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.contextualTypeArguments = contextualTypeArguments;\r\n    if (!(prototype.is(CommonFlags.AMBIENT))) {\r\n      let localIndex = 0;\r\n      if (parent && parent.kind == ElementKind.CLASS) {\r\n        assert(this.is(CommonFlags.INSTANCE));\r\n        let local = new Local(\r\n          prototype.program,\r\n          \"this\",\r\n          localIndex++,\r\n          assert(signature.thisType)\r\n        );\r\n        this.localsByName.set(\"this\", local);\r\n        this.localsByIndex[local.index] = local;\r\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\r\n        if (inheritedTypeArguments) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n            if (!this.contextualTypeArguments.has(inheritedName)) {\r\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        let local = new Local(\r\n          prototype.program,\r\n          parameterName,\r\n          localIndex++,\r\n          parameterType\r\n          // FIXME: declaration?\r\n        );\r\n        this.localsByName.set(parameterName, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var local = new Local(\r\n      this.prototype.program,\r\n      name\r\n        ? name\r\n        : \"var$\" + localIndex.toString(10),\r\n      localIndex,\r\n      type,\r\n      declaration\r\n    );\r\n    if (name) {\r\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\r\n      this.localsByName.set(name, local);\r\n    }\r\n    this.localsByIndex[local.index] = local;\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  private tempI32s: Local[] | null = null;\r\n  private tempI64s: Local[] | null = null;\r\n  private tempF32s: Local[] | null = null;\r\n  private tempF64s: Local[] | null = null;\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type, wrapped: bool = false): Local {\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s;\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s;\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s;\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s;\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps && temps.length) {\r\n      local = temps.pop();\r\n      local.type = type;\r\n      local.flags = CommonFlags.NONE;\r\n    } else {\r\n      local = this.addLocal(type);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.flow.setLocalWrapped(local.index, wrapped);\r\n    }\r\n    return local;\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    if (local.is(CommonFlags.INLINED)) return;\r\n    assert(local.index >= 0);\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    assert(local.index >= 0);\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\r\n    var temps: Local[];\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps.length) {\r\n      local = temps[temps.length - 1];\r\n      local.type = type;\r\n    } else {\r\n      local = this.addLocal(type);\r\n      temps.push(local);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.flow.setLocalWrapped(local.index, wrapped);\r\n    }\r\n    return local;\r\n  }\r\n\r\n  /** Enters a(nother) break context. */\r\n  enterBreakContext(): string {\r\n    var id = this.nextBreakId++;\r\n    if (!this.breakStack) this.breakStack = [ id ];\r\n    else this.breakStack.push(id);\r\n    return this.breakContext = id.toString(10);\r\n  }\r\n\r\n  /** Leaves the current break context. */\r\n  leaveBreakContext(): void {\r\n    assert(this.breakStack != null);\r\n    var length = (<i32[]>this.breakStack).length;\r\n    assert(length > 0);\r\n    (<i32[]>this.breakStack).pop();\r\n    if (length > 1) {\r\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\r\n    } else {\r\n      this.breakContext = null;\r\n      this.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakContext = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n        let debugLocation = debugLocations[i];\r\n        module.setDebugLocation(\r\n          ref,\r\n          debugLocation.debugInfoRef,\r\n          debugLocation.source.debugInfoIndex,\r\n          debugLocation.line,\r\n          debugLocation.column\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Returns the TypeScript representation of this function. */\r\n  toString(): string { return this.prototype.simpleName; }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_TARGET;\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(program: Program, signature: Signature) {\r\n    super(program, \"\", \"\");\r\n    var simpleName = signature.toSignatureString();\r\n    this.simpleName = simpleName;\r\n    this.internalName = simpleName;\r\n    this.signature = signature;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends Element {\r\n\r\n  kind = ElementKind.FIELD_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FieldDeclaration;\r\n  /** Parent class prototype. */\r\n  classPrototype: ClassPrototype;\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    classPrototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FieldDeclaration\r\n  ) {\r\n    super(classPrototype.program, simpleName, internalName);\r\n    this.classPrototype = classPrototype;\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  kind = ElementKind.FIELD;\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(\r\n    prototype: FieldPrototype,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: FieldDeclaration,\r\n    parent: Class\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.type = type;\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class Property extends Element {\r\n\r\n  kind = ElementKind.PROPERTY;\r\n\r\n  /** Parent class prototype. */\r\n  parent: ClassPrototype;\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    parent: ClassPrototype\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends Element {\r\n\r\n  kind = ElementKind.CLASS_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: ClassDeclaration;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Class> = new Map();\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n  /** Operator overload prototypes. */\r\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: ClassDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends Element {\r\n\r\n  kind = ElementKind.CLASS;\r\n\r\n  /** Prototype reference. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Resolved class type. */\r\n  type: Type;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n  /** Operator overloads. */\r\n  overloads: Map<OperatorKind,Function> | null = null;\r\n  /** Function index of the GC hook. */\r\n  gcHookIndex: u32 = <u32>-1;\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    prototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] | null = null,\r\n    base: Class | null = null\r\n  ) {\r\n    super(prototype.program, simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.typeArguments = typeArguments;\r\n    this.type = prototype.program.options.usizeType.asClass(this);\r\n    this.base = base;\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      let inheritedTypeArguments = base.contextualTypeArguments;\r\n      if (inheritedTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let [baseName, baseType] of inheritedTypeArguments) {\r\n          this.contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply instance-specific contextual type arguments\r\n    var declaration = this.prototype.declaration;\r\n    var i: i32, k: i32;\r\n    if (declaration) { // irrelevant for built-ins\r\n      let typeParameters = declaration.typeParameters;\r\n      if (typeArguments) {\r\n        if ((k = typeArguments.length) != typeParameters.length) {\r\n          throw new Error(\"type argument count mismatch\");\r\n        }\r\n        if (k) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (i = 0; i < k; ++i) {\r\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n          }\r\n        }\r\n      } else if (typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do if (current == target) return true;\r\n    while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  /** Looks up the operator overload of the specified kind. */\r\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\r\n    if (unchecked) {\r\n      switch (kind) {\r\n        case OperatorKind.INDEXED_GET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        case OperatorKind.INDEXED_SET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    var instance: Class | null = this;\r\n    do {\r\n      let overloads = instance.overloads;\r\n      if (overloads) {\r\n        let overload = overloads.get(kind);\r\n        if (overload) return overload;\r\n      }\r\n    } while (instance = instance.base);\r\n    return null;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype {\r\n\r\n  kind = ElementKind.INTERFACE_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: InterfaceDeclaration; // more specific\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: InterfaceDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName, declaration, decoratorFlags);\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class {\r\n\r\n  kind = ElementKind.INTERFACE;\r\n\r\n  /** Prototype reference. */\r\n  prototype: InterfacePrototype; // more specific\r\n  /** Base interface, if applcable. */\r\n  base: Interface | null; // more specific\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    prototype: InterfacePrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(prototype, simpleName, internalName, typeArguments, base);\r\n  }\r\n}\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  // categorical\r\n\r\n  /** This branch always returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This branch always returns a wrapped value. */\r\n  RETURNS_WRAPPED = 1 << 1,\r\n  /** This branch always throws. */\r\n  THROWS = 1 << 2,\r\n  /** This branch always breaks. */\r\n  BREAKS = 1 << 3,\r\n  /** This branch always continues. */\r\n  CONTINUES = 1 << 4,\r\n  /** This branch always allocates. Constructors only. */\r\n  ALLOCATES = 1 << 5,\r\n\r\n  // conditional\r\n\r\n  /** This branch conditionally returns in a child branch. */\r\n  CONDITIONALLY_RETURNS = 1 << 6,\r\n  /** This branch conditionally throws in a child branch. */\r\n  CONDITIONALLY_THROWS = 1 << 7,\r\n  /** This branch conditionally breaks in a child branch. */\r\n  CONDITIONALLY_BREAKS = 1 << 8,\r\n  /** This branch conditionally continues in a child branch. */\r\n  CONDITIONALLY_CONTINUES = 1 << 9,\r\n  /** This branch conditionally allocates in a child branch. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 10,\r\n\r\n  // special\r\n\r\n  /** This branch is part of inlining a function. */\r\n  INLINE_CONTEXT = 1 << 11,\r\n  /** This branch explicitly requests no bounds checking. */\r\n  UNCHECKED_CONTEXT = 1 << 12,\r\n\r\n  // masks\r\n\r\n  /** Any terminating flag. */\r\n  ANY_TERMINATING = FlowFlags.RETURNS\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = FlowFlags.RETURNS\r\n                  | FlowFlags.RETURNS_WRAPPED\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES\r\n                  | FlowFlags.ALLOCATES,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\r\n                  | FlowFlags.CONDITIONALLY_THROWS\r\n                  | FlowFlags.CONDITIONALLY_BREAKS\r\n                  | FlowFlags.CONDITIONALLY_CONTINUES\r\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  currentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** The label we break to when encountering a return statement, when inlining. */\r\n  returnLabel: string | null;\r\n  /** The current return type. */\r\n  returnType: Type;\r\n  /** The current contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n  /** Local variable wrap states for the first 64 locals. */\r\n  wrappedLocals: I64;\r\n  /** Local variable wrap states for locals with index >= 64. */\r\n  wrappedLocalsExt: I64[] | null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(currentFunction: Function): Flow {\r\n    var parentFlow = new Flow();\r\n    parentFlow.parent = null;\r\n    parentFlow.flags = FlowFlags.NONE;\r\n    parentFlow.currentFunction = currentFunction;\r\n    parentFlow.continueLabel = null;\r\n    parentFlow.breakLabel = null;\r\n    parentFlow.returnLabel = null;\r\n    parentFlow.returnType = currentFunction.signature.returnType;\r\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\r\n    parentFlow.wrappedLocals = i64_new(0);\r\n    parentFlow.wrappedLocalsExt = null;\r\n    return parentFlow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this flow has one of the specified flags. */\r\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Forks this flow to a child flow. */\r\n  fork(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.currentFunction = this.currentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    branch.returnLabel = this.returnLabel;\r\n    branch.returnType = this.returnType;\r\n    branch.contextualTypeArguments = this.contextualTypeArguments;\r\n    branch.wrappedLocals = this.wrappedLocals;\r\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\r\n    return branch;\r\n  }\r\n\r\n  /** Frees this flow's scoped variables. */\r\n  free(): Flow {\r\n    var parent = assert(this.parent);\r\n    if (this.scopedLocals) { // free block-scoped locals\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          this.currentFunction.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n    return parent;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(type: Type, name: string, wrapped: bool, declaration?: VariableDeclaration): Local {\r\n    var scopedLocal = this.currentFunction.getTempLocal(type, false);\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (declaration) {\r\n          this.currentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range\r\n          );\r\n        } else assert(false);\r\n        return existingLocal;\r\n      }\r\n    }\r\n    scopedLocal.set(CommonFlags.SCOPED);\r\n    this.scopedLocals.set(name, scopedLocal);\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.setLocalWrapped(scopedLocal.index, wrapped);\r\n    }\r\n    return scopedLocal;\r\n  }\r\n\r\n  /** Adds a new scoped alias for the specified local. */\r\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        let declaration = existingLocal.declaration;\r\n        if (declaration) {\r\n          this.currentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range\r\n          );\r\n        } else assert(false);\r\n        return existingLocal;\r\n      }\r\n    }\r\n    assert(index < this.currentFunction.localsByIndex.length);\r\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\r\n      this.currentFunction.program,\r\n      name,\r\n      index,\r\n      type,\r\n      null\r\n    );\r\n    this.scopedLocals.set(name, scopedAlias);\r\n    return scopedAlias;\r\n  }\r\n\r\n  /** Gets the local of the specified name in the current scope. */\r\n  getScopedLocal(name: string): Local | null {\r\n    var local: Local | null;\r\n    var current: Flow | null = this;\r\n    do {\r\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\r\n        return local;\r\n      }\r\n    } while (current = current.parent);\r\n    return this.currentFunction.localsByName.get(name);\r\n  }\r\n\r\n  /** Tests if the local with the specified index is considered wrapped. */\r\n  isLocalWrapped(index: i32): bool {\r\n    var map: I64;\r\n    var ext: I64[] | null;\r\n    if (index < 64) {\r\n      if (index < 0) return true; // inlined constant\r\n      map = this.wrappedLocals;\r\n    } else if (ext = this.wrappedLocalsExt) {\r\n      let i = ((index - 64) / 64) | 0;\r\n      if (i >= ext.length) return false;\r\n      map = ext[i];\r\n      index -= (i + 1) * 64;\r\n    } else {\r\n      return false;\r\n    }\r\n    return i64_ne(\r\n      i64_and(\r\n        map,\r\n        i64_shl(\r\n          i64_one,\r\n          i64_new(index)\r\n        )\r\n      ),\r\n      i64_zero\r\n    );\r\n  }\r\n\r\n  /** Sets if the local with the specified index is considered wrapped. */\r\n  setLocalWrapped(index: i32, wrapped: bool): void {\r\n    var map: I64;\r\n    var off: i32 = -1;\r\n    if (index < 64) {\r\n      if (index < 0) return; // inlined constant\r\n      map = this.wrappedLocals;\r\n    } else {\r\n      let ext = this.wrappedLocalsExt;\r\n      off = ((index - 64) / 64) | 0;\r\n      if (!ext) {\r\n        this.wrappedLocalsExt = ext = new Array(off + 1);\r\n        ext.length = 0;\r\n      }\r\n      while (ext.length <= off) ext.push(i64_new(0));\r\n      map = ext[off];\r\n      index -= (off + 1) * 64;\r\n    }\r\n    map = wrapped\r\n      ? i64_or(\r\n          map,\r\n          i64_shl(\r\n            i64_one,\r\n            i64_new(index)\r\n          )\r\n        )\r\n      : i64_and(\r\n          map,\r\n          i64_not(\r\n            i64_shl(\r\n              i64_one,\r\n              i64_new(index)\r\n            )\r\n          )\r\n        );\r\n    if (off >= 0) (<I64[]>this.wrappedLocalsExt)[off] = map;\r\n    else this.wrappedLocals = map;\r\n  }\r\n\r\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\r\n  inherit(other: Flow): void {\r\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\r\n    this.wrappedLocals = other.wrappedLocals;\r\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\r\n  }\r\n\r\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\r\n  inheritConditional(other: Flow): void {\r\n    if (other.is(FlowFlags.RETURNS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n    }\r\n    if (other.is(FlowFlags.THROWS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\r\n    }\r\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n    }\r\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n    }\r\n    if (other.is(FlowFlags.ALLOCATES)) {\r\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n    }\r\n  }\r\n\r\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\r\n  inheritMutual(left: Flow, right: Flow): void {\r\n    // categorical flags set in both arms\r\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\r\n\r\n    // conditional flags set in at least one arm\r\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\r\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\r\n\r\n    // locals wrapped in both arms\r\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\r\n    var leftExt = left.wrappedLocalsExt;\r\n    var rightExt = right.wrappedLocalsExt;\r\n    if (leftExt != null && rightExt != null) {\r\n      let thisExt = this.wrappedLocalsExt;\r\n      let minLength = min(leftExt.length, rightExt.length);\r\n      if (minLength) {\r\n        if (!thisExt) thisExt = new Array(minLength);\r\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\r\n        for (let i = 0; i < minLength; ++i) {\r\n          thisExt[i] = i64_and(\r\n            leftExt[i],\r\n            rightExt[i]\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\r\n   * expression might already have overflown and returns `false` only if the operation neglects\r\n   * any possibly combination of garbage bits being present.\r\n   */\r\n  canOverflow(expr: ExpressionRef, type: Type): bool {\r\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\r\n    // opportunities here, obviously.\r\n    assert(type != Type.void);\r\n\r\n    // types other than i8, u8, i16, u16 and bool do not overflow\r\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\r\n\r\n    var operand: ExpressionRef;\r\n    switch (getExpressionId(expr)) {\r\n\r\n      // overflows if the local isn't wrapped or the conversion does\r\n      case ExpressionId.GetLocal: {\r\n        let currentFunction = this.currentFunction;\r\n        let local = currentFunction.localsByIndex[getGetLocalIndex(expr)];\r\n        return !currentFunction.flow.isLocalWrapped(local.index)\r\n            || canConversionOverflow(local.type, type);\r\n      }\r\n\r\n      // overflows if the value does\r\n      case ExpressionId.SetLocal: {\r\n        assert(isTeeLocal(expr));\r\n        return this.canOverflow(getSetLocalValue(expr), type);\r\n      }\r\n\r\n      // never overflows because globals are wrapped on set\r\n      case ExpressionId.GetGlobal: return false;\r\n\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64:\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64:\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtU32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtU64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64:\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeU32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeU64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64:\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtU32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtU64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64:\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeU32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeU64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: return false;\r\n\r\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\r\n          case BinaryOp.MulI32: {\r\n            return !(\r\n              (\r\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryRight(expr), type)\r\n                  )\r\n                )\r\n              ) || (\r\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryLeft(expr), type)\r\n                  )\r\n                )\r\n              )\r\n            );\r\n          }\r\n\r\n          // result won't overflow if one side is a constant less than this type's mask or one side\r\n          // is wrapped\r\n          case BinaryOp.AndI32: {\r\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\r\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\r\n            return !(\r\n              (\r\n                (\r\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              ) || (\r\n                (\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              )\r\n            );\r\n          }\r\n\r\n          // overflows if the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShlI32: {\r\n            let shift = 32 - type.size;\r\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\r\n                || getConstValueI32(operand) < shift;\r\n          }\r\n\r\n          // overflows if the value does and the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShrI32: {\r\n            let shift = 32 - type.size;\r\n            return this.canOverflow(getBinaryLeft(expr), type) && (\r\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\r\n              getConstValueI32(operand) < shift\r\n            );\r\n          }\r\n\r\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\r\n          // wrapped, it can't overflow.\r\n          case BinaryOp.ShrU32: {\r\n            let shift = 32 - type.size;\r\n            return type.is(TypeFlags.SIGNED)\r\n              ? !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) > shift // must clear MSB\r\n                )\r\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) >= shift // can leave MSB\r\n                );\r\n          }\r\n\r\n          // overflows if any side does\r\n          case BinaryOp.DivU32:\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemU32: {\r\n            return this.canOverflow(getBinaryLeft(expr), type)\r\n                || this.canOverflow(getBinaryRight(expr), type);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: return false;\r\n\r\n          // overflow if the maximum result (32) cannot be represented in the target type\r\n          case UnaryOp.ClzI32:\r\n          case UnaryOp.CtzI32:\r\n          case UnaryOp.PopcntI32: return type.size < 7;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the value cannot be represented in the target type\r\n      case ExpressionId.Const: {\r\n        let value: i32 = 0;\r\n        switch (getExpressionType(expr)) {\r\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\r\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\r\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\r\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\r\n          default: assert(false);\r\n        }\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\r\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\r\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\r\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\r\n          case TypeKind.BOOL: return (value & ~1) != 0;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the conversion does\r\n      case ExpressionId.Load: {\r\n        let fromType: Type;\r\n        switch (getLoadBytes(expr)) {\r\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\r\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\r\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\r\n        }\r\n        return canConversionOverflow(fromType, type);\r\n      }\r\n\r\n      // overflows if the result does, which is either\r\n      // - the last expression of the block, by contract, if the block doesn't have a label\r\n      // - the last expression or the value of an inner br if the block has a label (TODO)\r\n      case ExpressionId.Block: {\r\n        if (!getBlockName(expr)) {\r\n          let size = assert(getBlockChildCount(expr));\r\n          let last = getBlockChild(expr, size - 1);\r\n          return this.canOverflow(last, type);\r\n        }\r\n        // actually, brs with a value that'd be handled here is not emitted atm\r\n        break;\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.If: {\r\n        return this.canOverflow(getIfTrue(expr), type)\r\n            || this.canOverflow(assert(getIfFalse(expr)), type);\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.Select: {\r\n        return this.canOverflow(getSelectThen(expr), type)\r\n            || this.canOverflow(getSelectElse(expr), type);\r\n      }\r\n\r\n      // overflows if the call does not return a wrapped value or the conversion does\r\n      case ExpressionId.Call: {\r\n        let program = this.currentFunction.program;\r\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\r\n        assert(instance.kind == ElementKind.FUNCTION);\r\n        let returnType = (<Function>instance).signature.returnType;\r\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\r\n            || canConversionOverflow(returnType, type);\r\n      }\r\n\r\n      // doesn't technically overflow\r\n      case ExpressionId.Unreachable: return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\r\n  finalize(): void {\r\n    assert(this.parent == null); // must be the topmost parent flow\r\n    this.continueLabel = null;\r\n    this.breakLabel = null;\r\n    this.returnLabel = null;\r\n    this.contextualTypeArguments = null;\r\n  }\r\n}\r\n\r\n/** Tests if a conversion from one type to another can technically overflow. */\r\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\r\n  var fromSize = fromType.byteSize;\r\n  var toSize = toType.byteSize;\r\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\r\n      || fromSize > toSize\r\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport {\r\n  Target\r\n} from \"./compiler\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type Index = u32;\r\n\r\nexport const enum NativeType {\r\n  None = 0,        // _BinaryenTypeNone(),\r\n  I32  = 1,        // _BinaryenTypeInt32(),\r\n  I64  = 2,        // _BinaryenTypeInt64(),\r\n  F32  = 3,        // _BinaryenTypeFloat32(),\r\n  F64  = 4,        // _BinaryenTypeFloat64(),\r\n  Unreachable = 5, // _BinaryenTypeUnreachable(),\r\n  Auto = -1        // _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallImport = _BinaryenCallImportId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  GetLocal = _BinaryenGetLocalId(),\r\n  SetLocal = _BinaryenSetLocalId(),\r\n  GetGlobal = _BinaryenGetGlobalId(),\r\n  SetGlobal = _BinaryenSetGlobalId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicWake = _BinaryenAtomicWakeId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\r\n\r\n  // see: https://github.com/WebAssembly/sign-extension-ops\r\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\r\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\r\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\r\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\r\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64()\r\n}\r\n\r\nexport enum HostOp {\r\n  PageSize = _BinaryenPageSize(),\r\n  CurrentMemory = _BinaryenCurrentMemory(),\r\n  GrowMemory = _BinaryenGrowMemory(),\r\n  HasFeature = _BinaryenHasFeature(),\r\n\r\n  // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  // MoveMemory\r\n  // SetMemory\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n\r\n  private cachedByValue: usize;\r\n\r\n  /** Maximum number of pages when targeting WASM32. */\r\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\r\n\r\n  /** Maximum number of pages when targeting WASM64. */\r\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.cachedByValue = memory.allocate(16);\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.cachedByValue = memory.allocate(3 * 8); // LLVM C-ABI, max used is 3 * usize\r\n      return module;\r\n    } finally {\r\n      memory.free(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunctionType(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunctionType(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  // constants\r\n\r\n  createI32(value: i32): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF32(value: f32): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF64(value: f64): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  createUnary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  createBinary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  createHost(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createGetLocal(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenGetLocal(this.ref, index, type);\r\n  }\r\n\r\n  createTeeLocal(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenTeeLocal(this.ref, index, value);\r\n  }\r\n\r\n  createGetGlobal(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenGetGlobal(this.ref, cStr, type);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createLoad(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\r\n  }\r\n\r\n  createStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\r\n  }\r\n\r\n  createAtomicLoad(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  createAtomicStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicRMW(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicCmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  createAtomicWait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  createAtomicWake(\r\n    ptr: ExpressionRef,\r\n    wakeCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  createSetLocal(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSetLocal(this.ref, index, value);\r\n  }\r\n\r\n  createSetGlobal(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenSetGlobal(this.ref, cStr, value);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createBlock(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    var cArr = allocPtrArray(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      memory.free(cArr);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createBreak(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenBreak(this.ref, cStr, condition, value);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createDrop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  createLoop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenLoop(this.ref, cStr, body);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createIf(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createNop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  createReturn(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  createSelect(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createSwitch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = allocString(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = allocString(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      memory.free(cStr);\r\n      memory.free(cArr);\r\n      for (let i = numNames - 1; i >= 0; --i) memory.free(strs[i]);\r\n    }\r\n  }\r\n\r\n  createCall(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      memory.free(cArr);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createCallImport(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      memory.free(cArr);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  createCallIndirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cArr = allocPtrArray(operands);\r\n    var cStr = allocString(typeName);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createUnreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunction(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  private cachedTemporaryName: usize = 0;\r\n  private hasTemporaryFunction: bool = false;\r\n\r\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\r\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\r\n    var tempName = this.cachedTemporaryName;\r\n    if (!tempName) this.cachedTemporaryName = tempName = allocString(\"\"); // works because strings are interned\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\r\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeTemporaryFunction(): void {\r\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\r\n    var tempName = assert(this.cachedTemporaryName);\r\n    _BinaryenRemoveFunction(this.ref, tempName);\r\n    _BinaryenRemoveFunctionType(this.ref, tempName);\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = allocString(externalName);\r\n    try {\r\n      _BinaryenRemoveExport(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n    } finally {\r\n      memory.free(cStr3);\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      memory.free(cStr3);\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      memory.free(cStr3);\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n    } finally {\r\n      memory.free(cStr3);\r\n      memory.free(cStr2);\r\n      memory.free(cStr1);\r\n    }\r\n  }\r\n\r\n  removeImport(internalName: string): void {\r\n    var cStr = allocString(internalName);\r\n    try {\r\n      _BinaryenRemoveImport(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null\r\n  ): void {\r\n    var cStr = allocString(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      offs[i] = target == Target.WASM64\r\n        ? this.createI64(i64_low(offset), i64_high(offset))\r\n        : this.createI32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocI32Array(offs);\r\n    var cArr3 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\r\n    } finally {\r\n      memory.free(cArr3);\r\n      memory.free(cArr2);\r\n      memory.free(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(funcs: FunctionRef[]): void {\r\n    var cArr = allocPtrArray(funcs);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  getOptimizeLevel(): i32 {\r\n    return _BinaryenGetOptimizeLevel();\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  getShrinkLevel(): i32 {\r\n    return _BinaryenGetShrinkLevel();\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      memory.free(cArr);\r\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\r\n    }\r\n  }\r\n\r\n  private cachedPrecomputeName: usize = 0; // for free'ing\r\n  private cachedPrecomputeNames: usize = 0;\r\n\r\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\r\n    // remember the previous optimize levels and set to max instead, to be sure\r\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\r\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\r\n    var previousDebugInfo = _BinaryenGetDebugInfo();\r\n    _BinaryenSetOptimizeLevel(4);\r\n    _BinaryenSetShrinkLevel(0);\r\n    _BinaryenSetDebugInfo(false);\r\n\r\n    // wrap the expression in a temp. function and run the precompute pass on it\r\n    var type = _BinaryenExpressionGetType(expr);\r\n    var func = this.addTemporaryFunction(type, null, expr);\r\n    var names = this.cachedPrecomputeNames;\r\n    if (!names) {\r\n      let name = allocString(\"precompute\");\r\n      this.cachedPrecomputeName = name;\r\n      this.cachedPrecomputeNames = names = allocI32Array([ name ]);\r\n    }\r\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\r\n    expr = _BinaryenFunctionGetBody(func);\r\n    this.removeTemporaryFunction();\r\n\r\n    // reset optimize levels to previous\r\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\r\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\r\n    _BinaryenSetDebugInfo(previousDebugInfo);\r\n    return expr;\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.cachedByValue;\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) memory.free(cStr);\r\n      if (binaryPtr) memory.free(binaryPtr);\r\n      if (sourceMapPtr) memory.free(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  dispose(): void {\r\n    assert(this.ref);\r\n    memory.free(this.cachedByValue);\r\n    memory.free(this.cachedTemporaryName);\r\n    memory.free(this.cachedPrecomputeName);\r\n    memory.free(this.cachedPrecomputeNames);\r\n    _BinaryenModuleDispose(this.ref);\r\n    this.ref = 0;\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(\r\n    expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n        switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.createI32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.createI64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.createF32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.createF64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        return _BinaryenGetLocal(this.ref,\r\n          _BinaryenGetLocalGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GetGlobal: {\r\n        let globalName = _BinaryenGetGlobalGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return (\r\n          _BinaryenLoadIsAtomic(expr)\r\n            ? _BinaryenAtomicLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n            : _BinaryenLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenLoadGetAlign(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n        );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\n// expressions\r\n\r\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\r\n  return _BinaryenExpressionGetId(expr);\r\n}\r\n\r\nexport function getExpressionType(expr: ExpressionRef): NativeType {\r\n  return _BinaryenExpressionGetType(expr);\r\n}\r\n\r\nexport function getConstValueI32(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI32(expr);\r\n}\r\n\r\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64Low(expr);\r\n}\r\n\r\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64High(expr);\r\n}\r\n\r\nexport function getConstValueF32(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF32(expr);\r\n}\r\n\r\nexport function getConstValueF64(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF64(expr);\r\n}\r\n\r\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenGetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenSetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSetLocalGetValue(expr);\r\n}\r\n\r\nexport function isTeeLocal(expr: ExpressionRef): bool {\r\n  return _BinaryenSetLocalIsTee(expr);\r\n}\r\n\r\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\r\n  return _BinaryenBinaryGetOp(expr);\r\n}\r\n\r\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetLeft(expr);\r\n}\r\n\r\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetRight(expr);\r\n}\r\n\r\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\r\n  return _BinaryenUnaryGetOp(expr);\r\n}\r\n\r\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenUnaryGetValue(expr);\r\n}\r\n\r\nexport function getLoadBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetBytes(expr);\r\n}\r\n\r\nexport function getLoadOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetOffset(expr);\r\n}\r\n\r\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoadGetPtr(expr);\r\n}\r\n\r\nexport function isLoadSigned(expr: ExpressionRef): bool {\r\n  return _BinaryenLoadIsSigned(expr);\r\n}\r\n\r\nexport function getStoreBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetBytes(expr);\r\n}\r\n\r\nexport function getStoreOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetOffset(expr);\r\n}\r\n\r\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetPtr(expr);\r\n}\r\n\r\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetValue(expr);\r\n}\r\n\r\nexport function getBlockName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBlockGetName(expr));\r\n}\r\n\r\nexport function getBlockChildCount(expr: ExpressionRef): Index {\r\n  return _BinaryenBlockGetNumChildren(expr);\r\n}\r\n\r\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenBlockGetChild(expr, index);\r\n}\r\n\r\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetCondition(expr);\r\n}\r\n\r\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfTrue(expr);\r\n}\r\n\r\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfFalse(expr);\r\n}\r\n\r\nexport function getLoopName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenLoopGetName(expr));\r\n}\r\n\r\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoopGetBody(expr);\r\n}\r\n\r\nexport function getBreakName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBreakGetName(expr));\r\n}\r\n\r\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBreakGetCondition(expr);\r\n}\r\n\r\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfTrue(expr);\r\n}\r\n\r\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfFalse(expr);\r\n}\r\n\r\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetCondition(expr);\r\n}\r\n\r\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenDropGetValue(expr);\r\n}\r\n\r\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenReturnGetValue(expr);\r\n}\r\n\r\nexport function getCallTarget(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenCallGetTarget(expr));\r\n}\r\n\r\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenHostGetOp(expr);\r\n}\r\n\r\nexport function getHostOperandCount(expr: ExpressionRef): Index {\r\n  return _BinaryenHostGetNumOperands(expr);\r\n}\r\n\r\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenHostGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenHostGetNameOperand(expr));\r\n}\r\n\r\n// functions\r\n\r\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\r\n  return _BinaryenFunctionGetBody(func);\r\n}\r\n\r\nexport function getFunctionName(func: FunctionRef): string | null {\r\n  return readString(_BinaryenFunctionGetName(func));\r\n}\r\n\r\nexport function getFunctionParamCount(func: FunctionRef): Index {\r\n  return _BinaryenFunctionGetNumParams(func);\r\n}\r\n\r\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\r\n  return _BinaryenFunctionGetParam(func, index);\r\n}\r\n\r\nexport function getFunctionResultType(func: FunctionRef): NativeType {\r\n  return _BinaryenFunctionGetResult(func);\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate();\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\r\n  }\r\n}\r\n\r\n// export function hasSideEffects(expr: ExpressionRef): bool {\r\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\r\n//     case ExpressionId.GetLocal:\r\n//     case ExpressionId.GetGlobal:\r\n//     case ExpressionId.Const:\r\n//     case ExpressionId.Nop:\r\n//     case ExpressionId.Unreachable: {\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.Block: {\r\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\r\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\r\n//       }\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.If: {\r\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\r\n//     }\r\n//     case ExpressionId.Unary: {\r\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Binary: {\r\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\r\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\r\n//     }\r\n//     case ExpressionId.Drop: {\r\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Select: {\r\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\r\n//     }\r\n//   }\r\n//   return true;\r\n// }\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = memory.allocate(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = memory.allocate(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocPtrArray(ptrs: usize[] | null): usize {\r\n  return allocI32Array(ptrs); // TODO: WASM64 one day\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\r\n  // the following is based on Emscripten's stringToUTF8Array\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    arr.push(cp);\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n\r\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\r\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\r\n  // not applicable if pushing a value to the stack\r\n  switch (_BinaryenExpressionGetType(expr)) {\r\n    case NativeType.I32:\r\n    case NativeType.I64:\r\n    case NativeType.F32:\r\n    case NativeType.F64: return false;\r\n  }\r\n  switch (_BinaryenExpressionGetId(expr)) {\r\n    case ExpressionId.Unreachable:\r\n    case ExpressionId.Return: return false;\r\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\r\n    case ExpressionId.Block: {\r\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\r\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\r\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget,\r\n  Program,\r\n  DecoratorFlags\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a pointer type. */\r\n  POINTER = 1 << 4,\r\n  /** Is smaller than 32-bits. */\r\n  SHORT = 1 << 5,\r\n  /** Is larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9\r\n}\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying signature reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n  /** Cached nullable type, if non-nullable. */\r\n  private cachedNullableType: Type | null = null;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Returns the closest int type representing this type. */\r\n  get intType(): Type {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return Type.i8;\r\n      case TypeKind.I16: return Type.i16;\r\n      case TypeKind.F32:\r\n      case TypeKind.I32: return Type.i32;\r\n      case TypeKind.F64:\r\n      case TypeKind.I64: return Type.i64;\r\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\r\n      case TypeKind.U8: return Type.u8;\r\n      case TypeKind.U16: return Type.u16;\r\n      case TypeKind.U32: return Type.u32;\r\n      case TypeKind.U64: return Type.u64;\r\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\r\n      case TypeKind.BOOL:\r\n      default: return Type.i32;\r\n    }\r\n  }\r\n\r\n  /** Tests if this is a managed type that needs GC hooks. */\r\n  isManaged(program: Program): bool {\r\n    if (program.hasGC) {\r\n      let classReference = this.classReference;\r\n      return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\r\n    return ~0 >>> (targetType.size - size);\r\n  }\r\n\r\n  /** Tests if this type has (all of) the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.cachedNullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.cachedNullableType.nonNullableType = this;\r\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\r\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.cachedNullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to a target of the specified type. */\r\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\r\n          if (currentClass = this.classReference) {\r\n            if (targetClass = target.classReference) {\r\n              return currentClass.isAssignableTo(targetClass);\r\n            }\r\n          } else if (currentFunction = this.signatureReference) {\r\n            if (targetFunction = target.signatureReference) {\r\n              return currentFunction.isAssignableTo(targetFunction);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (!signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Determines the common compatible type of two types, if any. */\r\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\r\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to its TypeScript representation. */\r\n  toString(kindOnly: bool = false): string {\r\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\r\n      let classReference = this.classReference;\r\n      if (classReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? classReference.toString() + \" | null\"\r\n          : classReference.toString();\r\n      }\r\n      let signatureReference = this.signatureReference;\r\n      if (signatureReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\r\n          : signatureReference.toString(true);\r\n      }\r\n      assert(false);\r\n    }\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: return \"usize\";\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      default: assert(false);\r\n      case TypeKind.VOID: return \"void\";\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(0);\r\n      case TypeKind.F32: return module.createF32(0);\r\n      case TypeKind.F64: return module.createF64(0);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(1);\r\n      case TypeKind.F32: return module.createF32(1);\r\n      case TypeKind.F64: return module.createF64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(-1, -1);\r\n      case TypeKind.F32: return module.createF32(-1);\r\n      case TypeKind.F64: return module.createF64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      default: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"I\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"F\";\r\n      case TypeKind.VOID: return \"v\";\r\n    }\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\r\n  return sb.join(\",\");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getDefaultParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) return false; // TODO\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) return false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = target.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts a signature to a function type string. */\r\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\r\n    var sb = [];\r\n    if (thisType) sb.push(thisType.toSignatureString());\r\n    if (parameterTypes) {\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    sb.push(returnType.toSignatureString());\r\n    return sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(includeThis: bool = false): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      if (includeThis) {\r\n        sb.push(\"this: \");\r\n        sb.push(thisType.toString());\r\n        index = 1;\r\n      }\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) sb.push((<string[]>names)[i]);\r\n        else sb.push(getDefaultParameterName(i));\r\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\r\n        else sb.push(\": \");\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached default parameter names used where names are unknown.\r\nvar cachedDefaultParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached default parameter name for the specified index. */\r\nexport function getDefaultParameterName(index: i32): string {\r\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\r\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\r\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedDefaultParameterNames[index - 1];\r\n}\r\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport enum IdentifierHandling {\r\n  DEFAULT,\r\n  PREFER,\r\n  ALWAYS\r\n}\r\n\r\nexport function tokenFromKeyword(text: string): Token {\r\n  assert(text.length);\r\n  switch (text.charCodeAt(0)) {\r\n    case CharCode.a: {\r\n      switch (text) {\r\n        case \"abstract\": return Token.ABSTRACT;\r\n        case \"as\": return Token.AS;\r\n        case \"async\": return Token.ASYNC;\r\n        case \"await\": return Token.AWAIT;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.b: {\r\n      switch (text) {\r\n        case \"break\": return Token.BREAK;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.c: {\r\n      switch (text) {\r\n        case \"case\": return Token.CASE;\r\n        case \"catch\": return Token.CATCH;\r\n        case \"class\": return Token.CLASS;\r\n        case \"continue\": return Token.CONTINUE;\r\n        case \"const\": return Token.CONST;\r\n        case \"constructor\": return Token.CONSTRUCTOR;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.d: {\r\n      switch (text) {\r\n        case \"debugger\": return Token.DEBUGGER;\r\n        case \"declare\": return Token.DECLARE;\r\n        case \"default\": return Token.DEFAULT;\r\n        case \"delete\": return Token.DELETE;\r\n        case \"do\": return Token.DO;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.e: {\r\n      switch (text) {\r\n        case \"else\": return Token.ELSE;\r\n        case \"enum\": return Token.ENUM;\r\n        case \"export\": return Token.EXPORT;\r\n        case \"extends\": return Token.EXTENDS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.f: {\r\n      switch (text) {\r\n        case \"false\": return Token.FALSE;\r\n        case \"finally\": return Token.FINALLY;\r\n        case \"for\": return Token.FOR;\r\n        case \"from\": return Token.FROM;\r\n        case \"function\": return Token.FUNCTION;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.g: {\r\n      switch (text) {\r\n        case \"get\": return Token.GET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.i: {\r\n      switch (text) {\r\n        case \"if\": return Token.IF;\r\n        case \"implements\": return Token.IMPLEMENTS;\r\n        case \"import\": return Token.IMPORT;\r\n        case \"in\": return Token.IN;\r\n        case \"instanceof\": return Token.INSTANCEOF;\r\n        case \"interface\": return Token.INTERFACE;\r\n        case \"is\": return Token.IS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.k: {\r\n      switch (text) {\r\n        case \"keyof\": return Token.KEYOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.l: {\r\n      switch (text) {\r\n        case \"let\": return Token.LET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.m: {\r\n      switch (text) {\r\n        case \"module\": return Token.MODULE;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.n: {\r\n      switch (text) {\r\n        case \"namespace\": return Token.NAMESPACE;\r\n        case \"new\": return Token.NEW;\r\n        case \"null\": return Token.NULL;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.o: {\r\n      switch (text) {\r\n        case \"of\": return Token.OF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.p: {\r\n      switch (text) {\r\n        case \"package\": return Token.PACKAGE;\r\n        case \"private\": return Token.PRIVATE;\r\n        case \"protected\": return Token.PROTECTED;\r\n        case \"public\": return Token.PUBLIC;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.r: {\r\n      switch (text) {\r\n        case \"readonly\": return Token.READONLY;\r\n        case \"return\": return Token.RETURN;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.s: {\r\n      switch (text) {\r\n        case \"set\": return Token.SET;\r\n        case \"static\": return Token.STATIC;\r\n        case \"super\": return Token.SUPER;\r\n        case \"switch\": return Token.SWITCH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.t: {\r\n      switch (text) {\r\n        case \"this\": return Token.THIS;\r\n        case \"throw\": return Token.THROW;\r\n        case \"true\": return Token.TRUE;\r\n        case \"try\": return Token.TRY;\r\n        case \"type\": return Token.TYPE;\r\n        case \"typeof\": return Token.TYPEOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.v: {\r\n      switch (text) {\r\n        case \"var\": return Token.VAR;\r\n        case \"void\": return Token.VOID;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.w: {\r\n      switch (text) {\r\n        case \"while\": return Token.WHILE;\r\n        case \"with\": return Token.WITH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.y: {\r\n      switch (text) {\r\n        case \"yield\": return Token.YIELD;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return Token.INVALID;\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.FOR:\r\n    case Token.GET:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics ? diagnostics : new Array();\r\n\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < this.end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(identifierHandling);\r\n  }\r\n\r\n  private unsafeNext(\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxTokenLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (!(\r\n            ++this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          )) break;\r\n          // otherwise fall-through\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < this.end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < this.end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < this.end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < this.end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < this.end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFromKeyword(keywordText);\r\n              if (\r\n                keywordToken != Token.INVALID &&\r\n                identifierHandling !== IdentifierHandling.ALWAYS &&\r\n                !(\r\n                  identifierHandling === IdentifierHandling.PREFER &&\r\n                  tokenIsAlsoIdentifier(keywordToken)\r\n                )\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\r\n          if (isLineBreak(text.charCodeAt(pos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skipIdentifier(): bool {\r\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.PREFER);\r\n  }\r\n\r\n  skipIdentifierName(): bool {\r\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.ALWAYS);\r\n  }\r\n\r\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    while (\r\n      ++this.pos < this.end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c)) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    if (++this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.SLASH && !escaped) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var flags = 0;\r\n    while (this.pos < this.end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.X:\r\n        case CharCode.x:\r\n        case CharCode.B:\r\n        case CharCode.b:\r\n        case CharCode.O:\r\n        case CharCode.o: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < this.end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\r\n        return false;\r\n      }\r\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\r\n      // does not validate separator placement (this is done in readXYInteger)\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.X:\r\n        case CharCode.x: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.B:\r\n        case CharCode.b: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.O:\r\n        case CharCode.o: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_16 = i64_new(16, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 16 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = value * 16 + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.A, 0)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = value * 16 + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.a, 0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_10 = i64_new(10, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_8 = i64_new(8, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = value * 8 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_8),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_2 = i64_new(2, 0);\r\n    var i64_1 = i64_new(1, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode._0) {\r\n        // value = value * 2;\r\n        value = i64_mul(\r\n          value,\r\n          i64_2\r\n        );\r\n      } else if (c == CharCode._1) {\r\n        // value = value * 2 + 1;\r\n        value = i64_add(\r\n          i64_mul(value, i64_2),\r\n          i64_1\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    // TODO: numeric separators (parseFloat can't handle these)\r\n    var start = this.pos;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.E || c == CharCode.e) {\r\n        if (\r\n          ++this.pos < this.end && (\r\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\r\n            text.charCodeAt(this.pos) == CharCode.PLUS\r\n          ) &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = value * 16 + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = value * 16 + 10 + c - CharCode.A;\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = value * 16 + 10 + c - CharCode.a;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var text = this.source.text;\r\n    if (this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, this.end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\r\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","/**\r\n * Resolve infrastructure to obtain types and elements.\r\n * @module resolver\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticEmitter,\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Program,\r\n  ElementKind,\r\n  OperatorKind,\r\n  FlowFlags,\r\n\r\n  Element,\r\n  Class,\r\n  ClassPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  FunctionPrototype,\r\n  VariableLikeElement,\r\n  Property,\r\n  DecoratorFlags,\r\n  FieldPrototype,\r\n  Field\r\n} from \"./program\";\r\n\r\nimport {\r\n  SignatureNode,\r\n  ParameterKind,\r\n  CommonTypeNode,\r\n  NodeKind,\r\n  TypeNode,\r\n  TypeParameterNode,\r\n  Node,\r\n  Range,\r\n  IdentifierExpression,\r\n  CallExpression,\r\n  ElementAccessExpression,\r\n  PropertyAccessExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  AssertionExpression,\r\n  Expression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  Signature,\r\n  typesToString\r\n} from \"./types\";\r\n\r\nimport {\r\n  PATH_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\n/** Indicates whether errors are reported or not. */\r\nexport enum ReportMode {\r\n  /** Report errors. */\r\n  REPORT,\r\n  /** Swallow errors. */\r\n  SWALLOW\r\n}\r\n\r\n/** Provides tools to resolve types and expressions. */\r\nexport class Resolver extends DiagnosticEmitter {\r\n\r\n  /** The program this resolver belongs to. */\r\n  program: Program;\r\n\r\n  /** Target expression of the previously resolved property or element access. */\r\n  currentThisExpression: Expression | null = null;\r\n  /** Element expression of the previously resolved element access. */\r\n  currentElementExpression : Expression | null = null;\r\n\r\n  /** Constructs the resolver for the specified program. */\r\n  constructor(program: Program) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n  }\r\n\r\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    node: CommonTypeNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n\r\n    // handle signatures specifically\r\n    if (node.kind == NodeKind.SIGNATURE) {\r\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportMode);\r\n      if (!signature) return null;\r\n      return node.isNullable ? signature.type.asNullable() : signature.type;\r\n    }\r\n\r\n    // now dealing with TypeNode\r\n    assert(node.kind == NodeKind.TYPE);\r\n    var typeNode = <TypeNode>node;\r\n    var simpleName = typeNode.name.text;\r\n    var globalName = simpleName;\r\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName; // TODO cache\r\n\r\n    // check file-global / program-global enum or class\r\n    {\r\n      let elementsLookup = this.program.elementsLookup;\r\n      let element: Element | null;\r\n      if (\r\n        (element = elementsLookup.get(localName)) || // file-global\r\n        (element = elementsLookup.get(globalName))   // program-global\r\n      ) {\r\n        switch (element.kind) {\r\n          case ElementKind.ENUM: {\r\n            if (typeNode.typeArguments !== null && typeNode.typeArguments.length) {\r\n              if (reportMode == ReportMode.REPORT) {\r\n                this.error(\r\n                  DiagnosticCode.Type_0_is_not_generic,\r\n                  node.range, element.internalName\r\n                );\r\n              }\r\n              return null;\r\n            }\r\n            return Type.i32;\r\n          }\r\n          case ElementKind.CLASS_PROTOTYPE: {\r\n            let instance = this.resolveClassInclTypeArguments(\r\n              <ClassPrototype>element,\r\n              typeNode.typeArguments,\r\n              contextualTypeArguments,\r\n              node\r\n            ); // reports\r\n            if (!instance) return null;\r\n            return node.isNullable ? instance.type.asNullable() : instance.type;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // check (global) type alias\r\n    {\r\n      let alias = this.program.typeAliases.get(simpleName);\r\n      if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportMode);\r\n    }\r\n\r\n    // resolve parameters\r\n    {\r\n      let typeArgumentNodes = typeNode.typeArguments;\r\n      if (typeArgumentNodes) {\r\n        let numTypeArguments = typeArgumentNodes.length;\r\n        let paramTypes = new Array<Type>(numTypeArguments);\r\n        for (let i = 0; i < numTypeArguments; ++i) {\r\n          let paramType = this.resolveType( // reports\r\n            typeArgumentNodes[i],\r\n            contextualTypeArguments,\r\n            reportMode\r\n          );\r\n          if (!paramType) return null;\r\n          paramTypes[i] = paramType;\r\n        }\r\n        if (numTypeArguments) { // can't be a placeholder if it has parameters\r\n          let instanceKey = typesToString(paramTypes);\r\n          if (instanceKey.length) {\r\n            localName += \"<\" + instanceKey + \">\";\r\n            globalName += \"<\" + instanceKey + \">\";\r\n          }\r\n        } else if (contextualTypeArguments) {\r\n          let placeholderType = contextualTypeArguments.get(globalName);\r\n          if (placeholderType) return placeholderType;\r\n        }\r\n      }\r\n    }\r\n\r\n    // check file-global / program-global type\r\n    {\r\n      let typesLookup = this.program.typesLookup;\r\n      let type: Type | null;\r\n      if (\r\n        (type = typesLookup.get(localName)) ||\r\n        (type = typesLookup.get(globalName))\r\n      ) {\r\n        return type;\r\n      }\r\n    }\r\n\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        typeNode.name.range, globalName\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\r\n  resolveSignature(\r\n    node: SignatureNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Signature | null {\r\n    var explicitThisType = node.explicitThisType;\r\n    var thisType: Type | null = null;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(explicitThisType, contextualTypeArguments, reportMode);\r\n      if (!thisType) return null;\r\n    }\r\n    var parameterTypeNodes = node.parameters;\r\n    var numParameters = parameterTypeNodes.length;\r\n    var parameterTypes = new Array<Type>(numParameters);\r\n    var parameterNames = new Array<string>(numParameters);\r\n    var requiredParameters = 0;\r\n    var hasRest = false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let parameterTypeNode = parameterTypeNodes[i];\r\n      switch (parameterTypeNode.parameterKind) {\r\n        case ParameterKind.DEFAULT: {\r\n          requiredParameters = i + 1;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          assert(i == numParameters);\r\n          hasRest = true;\r\n          break;\r\n        }\r\n      }\r\n      let parameterType = this.resolveType(\r\n        assert(parameterTypeNode.type),\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterTypeNode.name.text;\r\n    }\r\n    var returnTypeNode = node.returnType;\r\n    var returnType: Type | null;\r\n    if (returnTypeNode) {\r\n      returnType = this.resolveType(returnTypeNode, contextualTypeArguments, reportMode);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Type.void;\r\n    }\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n    signature.hasRest = hasRest;\r\n    return signature;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    typeParameters: TypeParameterNode[],\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type[] | null {\r\n    var parameterCount = typeParameters.length;\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (parameterCount != argumentCount) {\r\n      if (argumentCount) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          Range.join(\r\n            (<TypeNode[]>typeArgumentNodes)[0].range,\r\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n          ),\r\n          parameterCount.toString(10), argumentCount.toString(10)\r\n        );\r\n      } else if (alternativeReportNode) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(parameterCount);\r\n    for (let i = 0; i < parameterCount; ++i) {\r\n      let type = this.resolveType( // reports\r\n        (<TypeNode[]>typeArgumentNodes)[i],\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves an identifier to the element it refers to. */\r\n  resolveIdentifier(\r\n    identifier: IdentifierExpression,\r\n    context: Element | null,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var name = identifier.text;\r\n    var element: Element | null;\r\n\r\n    if (context) {\r\n\r\n      switch (context.kind) {\r\n        case ElementKind.FUNCTION: { // search locals, use prototype\r\n          element = (<Function>context).flow.getScopedLocal(name);\r\n          if (element) {\r\n            this.currentThisExpression = null;\r\n            this.currentElementExpression = null;\r\n            return element;\r\n          }\r\n          context = (<Function>context).prototype.parent;\r\n          break;\r\n        }\r\n        case ElementKind.CLASS: { // use prototype\r\n          context = (<Class>context).prototype.parent;\r\n          break;\r\n        }\r\n      }\r\n\r\n      // search context\r\n      while (context) {\r\n        let members = context.members;\r\n        if (members) {\r\n          if (element = members.get(name)) {\r\n            this.currentThisExpression = null;\r\n            this.currentElementExpression = null;\r\n            return element;\r\n          }\r\n        }\r\n        context = context.parent;\r\n      }\r\n    }\r\n\r\n    // search current file\r\n    var elementsLookup = this.program.elementsLookup;\r\n    if (element = elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    // search global scope\r\n    if (element = elementsLookup.get(name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        identifier.range, name\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a property access to the element it refers to. */\r\n  resolvePropertyAccess(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualFunction: Function,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    // start by resolving the lhs target (expression before the last dot)\r\n    var targetExpression = propertyAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode); // reports\r\n    if (!target) return null;\r\n\r\n    // at this point we know exactly what the target is, so look up the element within\r\n    var propertyName = propertyAccess.property.text;\r\n\r\n    // Resolve variable-likes to the class type they reference first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        assert(type != Type.void);\r\n        let classReference = type.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = this.resolveFunction(\r\n          assert((<Property>target).getterPrototype),\r\n          null,\r\n          null,\r\n          reportMode\r\n        );\r\n        if (!getter) return null;\r\n        let classReference = getter.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.currentElementExpression;\r\n        if (elementExpression) {\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementExpression.range, (<Class>target).internalName\r\n            );\r\n            return null;\r\n          }\r\n          let returnType = indexedGet.signature.returnType;\r\n          if (!(target = returnType.classReference)) {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, returnType.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          let members = target.members;\r\n          let member: Element | null;\r\n          if (members && (member = members.get(propertyName))) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = null;\r\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\r\n          }\r\n          // traverse inherited static members on the base prototype if target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // traverse inherited instance members on the base class if target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        let members = target.members;\r\n        if (members) {\r\n          let member = members.get(propertyName);\r\n          if (member) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = null;\r\n            return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      propertyAccess.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveElementAccess(\r\n    elementAccess: ElementAccessExpression,\r\n    contextualFunction: Function,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = elementAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\r\n    if (!target) return null;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (target = type.classReference) {\r\n          this.currentThisExpression = targetExpression;\r\n          this.currentElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: { // element access on element access\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n        if (!indexedGet) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementAccess.range, (<Class>target).internalName\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        let returnType = indexedGet.signature.returnType;\r\n        if (target = returnType.classReference) {\r\n          this.currentThisExpression = targetExpression;\r\n          this.currentElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        targetExpression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  resolveExpression(\r\n    expression: Expression,\r\n    contextualFunction: Function,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) {\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        let type = this.resolveType(\r\n          (<AssertionExpression>expression).toType,\r\n          contextualFunction.flow.contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (type) {\r\n          let classType = type.classReference;\r\n          if (classType) {\r\n            this.currentThisExpression = null;\r\n            this.currentElementExpression = null;\r\n            return classType;\r\n          }\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case NodeKind.THIS: { // -> Class / ClassPrototype\r\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\r\n          if (explicitLocal) {\r\n            this.currentThisExpression = null;\r\n            this.currentElementExpression = null;\r\n            return explicitLocal;\r\n          }\r\n        }\r\n        let parent = contextualFunction.parent;\r\n        if (parent) {\r\n          this.currentThisExpression = null;\r\n          this.currentElementExpression = null;\r\n          return parent;\r\n        }\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n            expression.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.SUPER: { // -> Class\r\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\r\n          if (explicitLocal) {\r\n            this.currentThisExpression = null;\r\n            this.currentElementExpression = null;\r\n            return explicitLocal;\r\n          }\r\n        }\r\n        let parent = contextualFunction.parent;\r\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n          this.currentThisExpression = null;\r\n          this.currentElementExpression = null;\r\n          return parent;\r\n        }\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n            expression.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction, reportMode);\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        switch ((<LiteralExpression>expression).literalKind) {\r\n          case LiteralKind.STRING: {\r\n            this.currentThisExpression = expression;\r\n            this.currentElementExpression = null;\r\n            return this.program.stringInstance;\r\n          }\r\n          // case LiteralKind.ARRAY: // TODO\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccess(\r\n          <PropertyAccessExpression>expression,\r\n          contextualFunction,\r\n          reportMode\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccess(\r\n          <ElementAccessExpression>expression,\r\n          contextualFunction,\r\n          reportMode\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        let targetExpression = (<CallExpression>expression).expression;\r\n        let target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\r\n        if (!target) return null;\r\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n          let instance = this.resolveFunctionInclTypeArguments(\r\n            <FunctionPrototype>target,\r\n            (<CallExpression>expression).typeArguments,\r\n            contextualFunction.flow.contextualTypeArguments,\r\n            expression,\r\n            reportMode\r\n          );\r\n          if (!instance) return null;\r\n          let returnType = instance.signature.returnType;\r\n          let classType = returnType.classReference;\r\n          if (classType) {\r\n            // reuse resolvedThisExpression (might be property access)\r\n            // reuse resolvedElementExpression (might be element access)\r\n            return classType;\r\n          } else {\r\n            let signature = returnType.signatureReference;\r\n            if (signature) {\r\n              let functionTarget = signature.cachedFunctionTarget;\r\n              if (!functionTarget) {\r\n                functionTarget = new FunctionTarget(this.program, signature);\r\n                signature.cachedFunctionTarget = functionTarget;\r\n              }\r\n              // reuse resolvedThisExpression (might be property access)\r\n              // reuse resolvedElementExpression (might be element access)\r\n              return functionTarget;\r\n            }\r\n          }\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n              targetExpression.range, target.internalName\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a function prototype to an instance using the specified concrete type arguments. */\r\n  resolveFunction(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: Type[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n    var instance = prototype.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    var declaration = prototype.declaration;\r\n    var isInstance = prototype.is(CommonFlags.INSTANCE);\r\n    var classPrototype = prototype.classPrototype;\r\n\r\n    // inherit contextual type arguments as provided. might be overridden.\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(\r\n          inheritedName,\r\n          inheritedType\r\n        );\r\n      }\r\n    }\r\n\r\n    // override with class type arguments if a partially resolved instance method\r\n    var classTypeArguments = prototype.classTypeArguments;\r\n    if (classTypeArguments) { // set only if partially resolved\r\n      assert(prototype.is(CommonFlags.INSTANCE));\r\n      let classDeclaration = assert(classPrototype).declaration;\r\n      let classTypeParameters = classDeclaration.typeParameters;\r\n      let numClassTypeParameters = classTypeParameters.length;\r\n      assert(numClassTypeParameters == classTypeArguments.length);\r\n      for (let i = 0; i < numClassTypeParameters; ++i) {\r\n        contextualTypeArguments.set(\r\n          classTypeParameters[i].name.text,\r\n          classTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!classTypeArguments);\r\n    }\r\n\r\n    // override with function specific type arguments\r\n    var signatureNode = declaration.signature;\r\n    var functionTypeParameters = declaration.typeParameters;\r\n    var numFunctionTypeArguments: i32;\r\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\r\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        contextualTypeArguments.set(\r\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\r\n          typeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\r\n    }\r\n\r\n    // resolve class if an instance method\r\n    var classInstance: Class | null = null;\r\n    var thisType: Type | null = null;\r\n    if (isInstance) {\r\n      classInstance = this.resolveClass(\r\n        assert(classPrototype),\r\n        classTypeArguments,\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!classInstance) return null;\r\n      thisType = classInstance.type;\r\n      contextualTypeArguments.set(\"this\", thisType);\r\n    }\r\n\r\n    // resolve signature node\r\n    var signatureParameters = signatureNode.parameters;\r\n    var signatureParameterCount = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(signatureParameterCount);\r\n    var parameterNames = new Array<string>(signatureParameterCount);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < signatureParameterCount; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = assert(parameterDeclaration.type);\r\n      let parameterType = this.resolveType(typeNode, contextualTypeArguments, reportMode);\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    var returnType: Type;\r\n    if (prototype.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = assert(signatureNode.returnType);\r\n      let type = this.resolveType(typeNode, contextualTypeArguments, reportMode);\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var internalName = prototype.internalName;\r\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\r\n    instance = new Function(\r\n      prototype,\r\n      internalName,\r\n      signature,\r\n      classInstance\r\n        ? classInstance\r\n        : classPrototype,\r\n      contextualTypeArguments\r\n    );\r\n    prototype.instances.set(instanceKey, instance);\r\n    this.program.instancesLookup.set(internalName, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a function prototype partially by applying the specified type arguments. */\r\n  resolveFunctionPartially(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: Type[] | null,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): FunctionPrototype | null {\r\n    assert(prototype.is(CommonFlags.INSTANCE));\r\n    var classPrototype = assert(prototype.classPrototype);\r\n\r\n    if (!(typeArguments && typeArguments.length)) return prototype; // no need to clone\r\n\r\n    var simpleName = prototype.simpleName;\r\n    var partialKey = typesToString(typeArguments);\r\n    var partialPrototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\r\n      prototype.declaration,\r\n      classPrototype,\r\n      prototype.decoratorFlags\r\n    );\r\n    partialPrototype.flags = prototype.flags;\r\n    partialPrototype.operatorKind = prototype.operatorKind;\r\n    partialPrototype.classTypeArguments = typeArguments;\r\n    return partialPrototype;\r\n  }\r\n\r\n  /** Resolves a function prototype to an instance by first resolving the specified type arguments. */\r\n  resolveFunctionInclTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    reportNode: Node,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.declaration.typeParameters),\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    }\r\n    return this.resolveFunction(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      contextualTypeArguments,\r\n      reportMode\r\n    );\r\n  }\r\n\r\n  /** Resolves a class prototype using the specified concrete type arguments. */\r\n  resolveClass(\r\n    prototype: ClassPrototype,\r\n    typeArguments: Type[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Check if this exact instance has already been resolved\r\n    var instance = prototype.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // Copy contextual type arguments so we don't pollute the original map\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(inheritedName, inheritedType);\r\n      }\r\n    }\r\n\r\n    // Insert contextual type arguments for this operation. Internally, this method is always\r\n    // called with matching type parameter / argument counts.\r\n    var declaration = prototype.declaration;\r\n    if (typeArguments) {\r\n      let typeParameters = declaration.typeParameters;\r\n      let expectedTypeArguments = typeParameters.length;\r\n      let actualTypeArguments = typeArguments.length;\r\n      assert(actualTypeArguments == expectedTypeArguments);\r\n      for (let i = 0; i < actualTypeArguments; ++i) {\r\n        contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n      }\r\n    } else {\r\n      assert(declaration.typeParameters.length == 0);\r\n    }\r\n\r\n    // Resolve base class if applicable\r\n    var baseClass: Class | null = null;\r\n    if (declaration.extendsType) {\r\n      let baseClassType = this.resolveType(\r\n        declaration.extendsType,\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!baseClassType) return null;\r\n      if (!(baseClass = baseClassType.classReference)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.program.error(\r\n            DiagnosticCode.A_class_may_only_extend_another_class,\r\n            declaration.extendsType.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.program.error(\r\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n            declaration.extendsType.range, baseClass.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.program.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\r\n            Range.join(declaration.name.range, declaration.extendsType.range)\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Construct the instance and remember that it has been resolved already\r\n    var simpleName = prototype.simpleName;\r\n    var internalName = prototype.internalName;\r\n    if (instanceKey.length) {\r\n      simpleName += \"<\" + instanceKey + \">\";\r\n      internalName += \"<\" + instanceKey + \">\";\r\n    }\r\n    instance = new Class(prototype, simpleName, internalName, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    prototype.instances.set(instanceKey, instance);\r\n    this.program.instancesLookup.set(internalName, instance);\r\n\r\n    // Inherit base class members and set up the initial memory offset for own fields\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      if (baseClass.members) {\r\n        if (!instance.members) instance.members = new Map();\r\n        for (let inheritedMember of baseClass.members.values()) {\r\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\r\n        }\r\n      }\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n    }\r\n\r\n    // Resolve constructor by first applying the class type arguments\r\n    if (prototype.constructorPrototype) {\r\n      let constructorPartial = this.resolveFunctionPartially(\r\n        prototype.constructorPrototype,\r\n        typeArguments,\r\n        reportMode\r\n      );\r\n      if (!constructorPartial) return null;\r\n      instance.constructorInstance = this.resolveFunction(constructorPartial, null, null, reportMode);\r\n    }\r\n\r\n    // Resolve instance members\r\n    if (prototype.instanceMembers) {\r\n      for (let member of prototype.instanceMembers.values()) {\r\n        switch (member.kind) {\r\n\r\n          // Lay out fields in advance\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\r\n            let fieldType: Type | null = null;\r\n            // TODO: handle duplicate non-private fields\r\n            if (!fieldDeclaration.type) {\r\n              if (baseClass !== null && baseClass.members !== null) {\r\n                let baseField = baseClass.members.get((<FieldPrototype>member).simpleName);\r\n                if (baseField && !baseField.is(CommonFlags.PRIVATE)) {\r\n                  assert(baseField.kind == ElementKind.FIELD);\r\n                  fieldType = (<Field>baseField).type;\r\n                }\r\n              }\r\n              if (!fieldType) {\r\n                if (reportMode == ReportMode.REPORT) {\r\n                  this.error(\r\n                    DiagnosticCode.Type_expected,\r\n                    fieldDeclaration.name.range.atEnd\r\n                  );\r\n                }\r\n              }\r\n            } else {\r\n              fieldType = this.resolveType(\r\n                fieldDeclaration.type,\r\n                instance.contextualTypeArguments,\r\n                reportMode\r\n              );\r\n            }\r\n            if (!fieldType) break;\r\n            let fieldInstance = new Field(\r\n              <FieldPrototype>member,\r\n              internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\r\n              fieldType,\r\n              fieldDeclaration,\r\n              instance\r\n            );\r\n            switch (fieldType.byteSize) { // align\r\n              case 1: break;\r\n              case 2: { if (memoryOffset & 1) ++memoryOffset; break; }\r\n              case 4: { if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1; break; }\r\n              case 8: { if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1; break; }\r\n              default: assert(false);\r\n            }\r\n            fieldInstance.memoryOffset = memoryOffset;\r\n            memoryOffset += fieldType.byteSize;\r\n            instance.members.set(member.simpleName, fieldInstance);\r\n            break;\r\n          }\r\n\r\n          // Partially resolve methods as these might have type arguments on their own\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let partialPrototype = this.resolveFunctionPartially(\r\n              <FunctionPrototype>member,\r\n              typeArguments,\r\n              reportMode\r\n            );\r\n            if (!partialPrototype) return null;\r\n            partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\r\n            instance.members.set(member.simpleName, partialPrototype);\r\n            break;\r\n          }\r\n\r\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\r\n          case ElementKind.PROPERTY: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let getterPrototype = assert((<Property>member).getterPrototype); // must be present\r\n            let setterPrototype = (<Property>member).setterPrototype;         // might be present\r\n            let instanceProperty = new Property(\r\n              this.program,\r\n              member.simpleName,\r\n              internalName + INSTANCE_DELIMITER + member.simpleName,\r\n              prototype\r\n            );\r\n            let partialGetterPrototype = this.resolveFunctionPartially(\r\n              getterPrototype,\r\n              typeArguments,\r\n              reportMode\r\n            );\r\n            if (!partialGetterPrototype) return null;\r\n            partialGetterPrototype\r\n              .internalName = internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName;\r\n            instanceProperty.getterPrototype = partialGetterPrototype;\r\n            if (setterPrototype) {\r\n              let partialSetterPrototype = this.resolveFunctionPartially(\r\n                setterPrototype,\r\n                typeArguments,\r\n                reportMode\r\n              );\r\n              if (!partialSetterPrototype) return null;\r\n              partialSetterPrototype\r\n                .internalName = internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName;\r\n              instanceProperty.setterPrototype = partialSetterPrototype;\r\n            }\r\n            instance.members.set(member.simpleName, instanceProperty);\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Finalize memory offset\r\n    instance.currentMemoryOffset = memoryOffset;\r\n\r\n    // Fully resolve operator overloads (don't have type parameters on their own)\r\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\r\n      assert(kind != OperatorKind.INVALID);\r\n      let operatorInstance: Function | null;\r\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\r\n        let operatorPartial = this.resolveFunctionPartially(\r\n          overloadPrototype,\r\n          typeArguments,\r\n          reportMode\r\n        );\r\n        if (!operatorPartial) continue;\r\n        operatorInstance = this.resolveFunction(operatorPartial, null, null, reportMode);\r\n      } else {\r\n        operatorInstance = this.resolveFunction(overloadPrototype, null, null, reportMode);\r\n      }\r\n      if (!operatorInstance) continue;\r\n      let overloads = instance.overloads;\r\n      if (!overloads) instance.overloads = overloads = new Map();\r\n      overloads.set(kind, operatorInstance);\r\n    }\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a class prototype by first resolving the specified type arguments. */\r\n  resolveClassInclTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    reportNode: Node,\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n      let typeParameterNodes = prototype.declaration.typeParameters;\r\n      let expectedTypeArguments = typeParameterNodes.length;\r\n      assert(expectedTypeArguments > 0);\r\n      let actualTypeArguments = typeArgumentNodes !== null ? typeArgumentNodes.length : 0;\r\n      if (expectedTypeArguments != actualTypeArguments) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, expectedTypeArguments.toString(10), actualTypeArguments.toString(10)\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      resolvedTypeArguments = this.resolveTypeArguments(\r\n        typeParameterNodes,\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveClass(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      contextualTypeArguments,\r\n      reportMode\r\n    );\r\n  }\r\n}\r\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  compileCall as compileBuiltinCall,\r\n  compileAllocate,\r\n  compileAbort,\r\n  compileIterateRoots\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getGetLocalIndex,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName,\r\n  needsExplicitUnreachable\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  INNER_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  Namespace,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  FlowFlags,\r\n  ConstantValueKind,\r\n  Flow,\r\n  OperatorKind,\r\n  DecoratorFlags\r\n} from \"./program\";\r\n\r\nimport {\r\n  Resolver, ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  TypeNode,\r\n  Source,\r\n  Range,\r\n  DecoratorKind,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FunctionDeclaration,\r\n  ForStatement,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InstanceOfExpression,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableDeclaration,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ObjectLiteralExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n  FieldDeclaration,\r\n\r\n  nodeIsConstantValue,\r\n  isLastStatement,\r\n  findDecorator\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64\r\n} from \"./util\";\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64\r\n}\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, compiles everything instead of just reachable code. */\r\n  noTreeShaking: bool = false;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: i32 = 0;\r\n  /** Global aliases. */\r\n  globalAliases: Map<string,string> | null = null;\r\n  /** Additional features to activate. */\r\n  features: Feature = Feature.NONE;\r\n\r\n  /** Hinted optimize level. Not applied by the compiler itself. */\r\n  optimizeLevelHint: i32 = 0;\r\n  /** Hinted shrink level. Not applied by the compiler itself. */\r\n  shrinkLevelHint: i32 = 0;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n\r\n  /** Tests if a specific feature is activated. */\r\n  hasFeature(feature: Feature): bool {\r\n    return (this.features & feature) != 0;\r\n  }\r\n}\r\n\r\n/** Indicates specific features to activate. */\r\nexport const enum Feature {\r\n  /** No additional features. */\r\n  NONE = 0,\r\n  /** Sign extension operations. */\r\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\r\n  /** Mutable global imports and exports. */\r\n  MUTABLE_GLOBAL = 1 << 1  // see: https://github.com/WebAssembly/mutable-global\r\n}\r\n\r\n/** Indicates the desired kind of a conversion. */\r\nexport const enum ConversionKind {\r\n  /** No conversion. */\r\n  NONE,\r\n  /** Implicit conversion. */\r\n  IMPLICIT,\r\n  /** Explicit conversion. */\r\n  EXPLICIT\r\n}\r\n\r\n/** Indicates the desired wrap mode of a conversion. */\r\nexport const enum WrapMode {\r\n  /** No wrapping. */\r\n  NONE,\r\n  /** Wrap small integer values. */\r\n  WRAP\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Resolver reference. */\r\n  resolver: Resolver;\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current function in compilation. */\r\n  currentFunction: Function;\r\n  /** Current outer function in compilation, if compiling a function expression. */\r\n  currentOuterFunction: Function | null = null;\r\n  /** Current inline functions stack. */\r\n  currentInlineFunctions: Function[] = [];\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function being compiled. */\r\n  startFunctionInstance: Function;\r\n  /** Start function statements. */\r\n  startFunctionBody: ExpressionRef[];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = [];\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: FunctionRef[] = [];\r\n  /** Argument count helper global. */\r\n  argcVar: GlobalRef = 0;\r\n  /** Argument count helper setter. */\r\n  argcSet: FunctionRef = 0;\r\n  /** Indicates whether the iterateRoots function must be generated. */\r\n  needsIterateRoots: bool = false;\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    this.resolver = program.resolver;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\r\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\r\n      max(options.memoryBase, 8)\r\n    );\r\n    this.module = Module.create();\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the start function\r\n    var startFunctionInstance = new Function(program.startFunction, \"start\", new Signature([], Type.void));\r\n    this.startFunctionInstance = startFunctionInstance;\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.startFunctionBody = startFunctionBody;\r\n    this.currentFunction = startFunctionInstance;\r\n\r\n    // compile entry file(s) while traversing reachable elements\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].isEntry) this.compileSource(sources[i]);\r\n    }\r\n\r\n    // compile the start function if not empty or called by main\r\n    if (startFunctionBody.length || program.mainFunction !== null) {\r\n      let signature = startFunctionInstance.signature;\r\n      let funcRef = module.addFunction(\r\n        startFunctionInstance.internalName,\r\n        this.ensureFunctionType(\r\n          signature.parameterTypes,\r\n          signature.returnType,\r\n          signature.thisType\r\n        ),\r\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n        module.createBlock(null, startFunctionBody)\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n      if (!program.mainFunction) module.setStart(funcRef);\r\n    }\r\n\r\n    // set up static memory segments and the heap base pointer\r\n    var memoryOffset = this.memoryOffset;\r\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n    this.memoryOffset = memoryOffset;\r\n    if (options.isWasm64) {\r\n      module.addGlobal(\r\n        \"HEAP_BASE\",\r\n        NativeType.I64,\r\n        false,\r\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n      );\r\n    } else {\r\n      module.addGlobal(\r\n        \"HEAP_BASE\",\r\n        NativeType.I32,\r\n        false,\r\n        module.createI32(i64_low(memoryOffset))\r\n      );\r\n    }\r\n\r\n    // determine initial page size\r\n    var numPages = this.memorySegments.length\r\n      ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\r\n      : 0;\r\n    module.setMemory(\r\n      numPages,\r\n      this.options.isWasm64\r\n        ? Module.MAX_MEMORY_WASM64\r\n        : Module.MAX_MEMORY_WASM32,\r\n      this.memorySegments,\r\n      options.target,\r\n      \"memory\"\r\n    );\r\n\r\n    // import memory if requested (default memory is named '0' by Binaryen)\r\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    var functionTableSize = functionTable.length;\r\n    var functionTableExported = false;\r\n    if (functionTableSize) {\r\n      module.setFunctionTable(functionTable);\r\n      module.addTableExport(\"0\", \"table\");\r\n      functionTableExported = true;\r\n    }\r\n\r\n    // import table if requested (default table is named '0' by Binaryen)\r\n    if (options.importTable) {\r\n      module.addTableImport(\"0\", \"env\", \"table\");\r\n      if (!functionTableExported) module.addTableExport(\"0\", \"table\");\r\n    }\r\n\r\n    // set up module exports\r\n    for (let [name, moduleExport] of program.moduleLevelExports) {\r\n      this.makeModuleExport(name, moduleExport.element);\r\n    }\r\n\r\n    // set up gc\r\n    if (this.needsIterateRoots) compileIterateRoots(this);\r\n\r\n    return module;\r\n  }\r\n\r\n  /** Applies the respective module export(s) for the specified element. */\r\n  private makeModuleExport(name: string, element: Element, prefix: string = \"\"): void {\r\n\r\n    // traverse members\r\n    var members = element.members;\r\n    if (members) {\r\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\r\n        ? INSTANCE_DELIMITER\r\n        : STATIC_DELIMITER\r\n      );\r\n      if (element.kind == ElementKind.NAMESPACE) {\r\n        for (let member of members.values()) {\r\n          if (!member.is(CommonFlags.EXPORT)) continue;\r\n          this.makeModuleExport(member.simpleName, member, subPrefix);\r\n        }\r\n      } else {\r\n        for (let member of members.values()) {\r\n          if (member.is(CommonFlags.PRIVATE)) continue;\r\n          this.makeModuleExport(member.simpleName, member, subPrefix);\r\n        }\r\n      }\r\n    }\r\n\r\n    switch (element.kind) {\r\n\r\n      // export global\r\n      case ElementKind.GLOBAL: {\r\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          let declaration = (<Global>element).declaration;\r\n          if (declaration) {\r\n            this.error(\r\n              DiagnosticCode.Cannot_export_a_mutable_global,\r\n              declaration.name.range\r\n            );\r\n          }\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.ENUMVALUE: {\r\n        if (!assert(element.parent).is(CommonFlags.CONST) && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          let declaration = (<EnumValue>element).declaration;\r\n          if (declaration) {\r\n            this.error(\r\n              DiagnosticCode.Cannot_export_a_mutable_global,\r\n              declaration.name.range\r\n            );\r\n          }\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // export function\r\n      case ElementKind.FUNCTION: {\r\n        let instance = <Function>element;\r\n        let signature = instance.signature;\r\n        if (signature.requiredParameters < signature.parameterTypes.length) {\r\n          // utilize trampoline to fill in omitted arguments\r\n          instance = this.ensureTrampoline(instance);\r\n          this.ensureArgcSet();\r\n        }\r\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\r\n        break;\r\n      }\r\n\r\n      // export getter and setter\r\n      case ElementKind.PROPERTY: {\r\n        let getter = assert((<Property>element).getterPrototype);\r\n        this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        let setter = (<Property>element).setterPrototype;\r\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n\r\n      // export a getter and a setter\r\n      case ElementKind.FIELD: {\r\n        let module = this.module;\r\n        let type = (<Field>element).type;\r\n        let nativeType = type.toNativeType();\r\n        let offset = (<Field>element).memoryOffset;\r\n        let usizeType = this.options.usizeType;\r\n        let nativeSizeType = this.options.nativeSizeType;\r\n\r\n        // make a getter\r\n        let getterName = prefix + GETTER_PREFIX + name;\r\n        module.addFunction(\r\n          getterName,\r\n          this.ensureFunctionType(null, type, usizeType),\r\n          null,\r\n          module.createLoad(\r\n            type.byteSize,\r\n            type.is(TypeFlags.SIGNED),\r\n            module.createGetLocal(0, nativeSizeType),\r\n            nativeType,\r\n            offset\r\n          )\r\n        );\r\n        module.addFunctionExport(getterName, getterName);\r\n\r\n        // make a setter\r\n        if (!element.is(CommonFlags.READONLY)) {\r\n          let setterName = prefix + SETTER_PREFIX + name;\r\n          module.addFunction(\r\n            setterName,\r\n            this.ensureFunctionType([ type ], Type.void, usizeType),\r\n            null,\r\n            module.createStore(\r\n              type.byteSize,\r\n              module.createGetLocal(0, nativeSizeType),\r\n              module.createGetLocal(1, nativeType),\r\n              nativeType,\r\n              offset\r\n            )\r\n          );\r\n          module.addFunctionExport(setterName, setterName);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // skip prototype and export instances\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        for (let instance of (<FunctionPrototype>element).instances.values()) {\r\n          let instanceName = name;\r\n          if (instance.is(CommonFlags.GENERIC)) {\r\n            let fullName = instance.internalName;\r\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n          }\r\n          this.makeModuleExport(instanceName, instance, prefix);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        for (let instance of (<ClassPrototype>element).instances.values()) {\r\n          let instanceName = name;\r\n          if (instance.is(CommonFlags.GENERIC)) {\r\n            let fullName = instance.internalName;\r\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n          }\r\n          let ctor = instance.constructorInstance;\r\n          if (ctor) this.makeModuleExport(instanceName + INSTANCE_DELIMITER + ctor.simpleName, ctor, prefix);\r\n          this.makeModuleExport(instanceName, instance, prefix);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // all possible members already handled above\r\n      case ElementKind.ENUM:\r\n      case ElementKind.CLASS:\r\n      case ElementKind.NAMESPACE: break;\r\n\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  // sources\r\n\r\n  /** Compiles a source by looking it up by path first. */\r\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\r\n    if (source) this.compileSource(source);\r\n    else {\r\n      this.error(\r\n        DiagnosticCode.File_0_not_found,\r\n        reportNode.range, normalizedPathWithoutExtension\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Compiles a source. */\r\n  compileSource(source: Source): void {\r\n    if (source.is(CommonFlags.COMPILED)) return;\r\n    source.set(CommonFlags.COMPILED);\r\n\r\n    // compile top-level statements\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    var isEntry = source.isEntry;\r\n    var startFunctionInstance = this.startFunctionInstance;\r\n    var startFunctionBody = this.startFunctionBody;\r\n    var statements = source.statements;\r\n    for (let i = 0, k = statements.length; i < k; ++i) {\r\n      let statement = statements[i];\r\n      switch (statement.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<ClassDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>statement, [], null);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: break;\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<FunctionDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.IMPORT: {\r\n          this.compileSourceByPath(\r\n            (<ImportStatement>statement).normalizedPath,\r\n            (<ImportStatement>statement).path\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\r\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\r\n          if (variableInit) startFunctionBody.push(variableInit);\r\n          break;\r\n        }\r\n        case NodeKind.EXPORT: {\r\n          if ((<ExportStatement>statement).normalizedPath != null) {\r\n            this.compileSourceByPath(\r\n              <string>(<ExportStatement>statement).normalizedPath,\r\n              <StringLiteralExpression>(<ExportStatement>statement).path\r\n            );\r\n          }\r\n          if (noTreeShaking || isEntry) {\r\n            this.compileExportStatement(<ExportStatement>statement);\r\n          }\r\n          break;\r\n        }\r\n        default: { // otherwise a top-level statement that is part of the start function's body\r\n          let previousFunction = this.currentFunction;\r\n          this.currentFunction = startFunctionInstance;\r\n          startFunctionBody.push(this.compileStatement(statement));\r\n          this.currentFunction = previousFunction;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // globals\r\n\r\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\r\n    // look up the initialized program element\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.GLOBAL);\r\n    if (!this.compileGlobal(<Global>element)) return null; // reports\r\n    return <Global>element;\r\n  }\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED)) return true;\r\n    global.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var declaration = global.declaration;\r\n    var initExpr: ExpressionRef = 0;\r\n\r\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\r\n      if (declaration) {\r\n\r\n        // resolve now if annotated\r\n        if (declaration.type) {\r\n          let resolvedType = this.resolver.resolveType(declaration.type); // reports\r\n          if (!resolvedType) return false;\r\n          if (resolvedType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              declaration.type.range\r\n            );\r\n            return false;\r\n          }\r\n          global.type = resolvedType;\r\n\r\n        // infer from initializer if not annotated\r\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\r\n          initExpr = this.compileExpressionRetainType( // reports\r\n            declaration.initializer,\r\n            Type.void,\r\n            WrapMode.WRAP\r\n          );\r\n          if (this.currentType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\r\n            );\r\n            return false;\r\n          }\r\n          global.type = this.currentType;\r\n\r\n        // must either be annotated or have an initializer\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            declaration.name.range.atEnd\r\n          );\r\n          return false;\r\n        }\r\n      } else {\r\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\r\n      }\r\n    }\r\n\r\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\r\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) return true;\r\n\r\n    var nativeType = global.type.toNativeType();\r\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n\r\n    // handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // constant global\r\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        if (declaration) {\r\n          mangleImportName(global, declaration, global.parent);\r\n        } else {\r\n          mangleImportName_moduleName = \"env\";\r\n          mangleImportName_elementName = global.simpleName;\r\n        }\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          mangleImportName_moduleName,\r\n          mangleImportName_elementName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          assert(declaration).range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // the MVP does not yet support initializer expressions other than constant values (and constant\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // evaluate initializer if present\r\n    if (declaration !== null && declaration.initializer !== null) {\r\n      if (!initExpr) {\r\n        initExpr = this.compileExpression(\r\n          declaration.initializer,\r\n          global.type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.WRAP\r\n        );\r\n      }\r\n\r\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n        if (isDeclaredConstant) {\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n            initializeInStart = true;\r\n          }\r\n        } else {\r\n          initializeInStart = true;\r\n        }\r\n      }\r\n\r\n      // explicitly inline if annotated\r\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\r\n        if (!initializeInStart) { // reported above\r\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\r\n          let exprType = getExpressionType(initExpr);\r\n          switch (exprType) {\r\n            case NativeType.I32: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\r\n              break;\r\n            }\r\n            case NativeType.I64: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(\r\n                getConstValueI64Low(initExpr),\r\n                getConstValueI64High(initExpr)\r\n              );\r\n              break;\r\n            }\r\n            case NativeType.F32: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF32(initExpr);\r\n              break;\r\n            }\r\n            case NativeType.F64: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF64(initExpr);\r\n              break;\r\n            }\r\n            default: {\r\n              assert(false);\r\n              return false;\r\n            }\r\n          }\r\n          global.set(CommonFlags.INLINED); // inline the value from now on\r\n        }\r\n      }\r\n\r\n    // initialize to zero if there's no initializer\r\n    } else {\r\n      initExpr = global.type.toNativeZero(module);\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\r\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\r\n\r\n    } else { // compile normally\r\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // enums\r\n\r\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.ENUM);\r\n    if (!this.compileEnum(<Enum>element)) return null;\r\n    return <Enum>element;\r\n  }\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n    var previousValueIsMut = false;\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueDeclaration = val.declaration;\r\n        val.set(CommonFlags.COMPILED);\r\n        let initExpr: ExpressionRef;\r\n        if (valueDeclaration.value) {\r\n          initExpr = this.compileExpression(\r\n            <Expression>valueDeclaration.value,\r\n            Type.i32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            if (element.is(CommonFlags.CONST)) {\r\n              initExpr = module.precomputeExpression(initExpr);\r\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n                this.error(\r\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                  valueDeclaration.value.range\r\n                );\r\n                initInStart = true;\r\n              }\r\n            } else {\r\n              initInStart = true;\r\n            }\r\n          }\r\n        } else if (previousValue == null) {\r\n          initExpr = module.createI32(0);\r\n        } else {\r\n          if (previousValueIsMut) {\r\n            this.error(\r\n              DiagnosticCode.Enum_member_must_have_initializer,\r\n              valueDeclaration.range\r\n            );\r\n          }\r\n          initExpr = module.createBinary(BinaryOp.AddI32,\r\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\r\n            module.createI32(1)\r\n          );\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.error(\r\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                valueDeclaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n        }\r\n        if (initInStart) {\r\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\r\n          this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\r\n          previousValueIsMut = true;\r\n        } else {\r\n          module.addGlobal(val.internalName, NativeType.I32, !element.is(CommonFlags.CONST), initExpr);\r\n          previousValueIsMut = false;\r\n        }\r\n        previousValue = <EnumValue>val;\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // functions\r\n\r\n  /** Compiles a top-level function given its declaration. */\r\n  compileFunctionDeclaration(\r\n    declaration: FunctionDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    return this.compileFunctionUsingTypeArguments( // reports\r\n      <FunctionPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      null, // no outer scope (is top level)\r\n      (<FunctionPrototype>element).declaration.name\r\n    );\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    outerScope: Flow | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      reportNode\r\n    );\r\n    if (!instance) return null;\r\n    instance.outerScope = outerScope;\r\n    if (!this.compileFunction(instance)) return null; // reports\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  ensureFunctionType(\r\n    parameterTypes: Type[] | null,\r\n    returnType: Type,\r\n    thisType: Type | null = null\r\n  ): FunctionTypeRef {\r\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    if (parameterTypes) {\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        paramTypes[index] = parameterTypes[i].toNativeType();\r\n      }\r\n    }\r\n    var resultType = returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\r\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    // check that modifiers are matching\r\n    var declaration = instance.prototype.declaration;\r\n    var body = declaration.body;\r\n    if (body) {\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    }\r\n\r\n    var ref: FunctionRef;\r\n    var signature = instance.signature;\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n    if (body) {\r\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\r\n      let returnType = instance.signature.returnType;\r\n\r\n      // compile body\r\n      let previousFunction = this.currentFunction;\r\n      this.currentFunction = instance;\r\n      let flow = instance.flow;\r\n      let stmt: ExpressionRef;\r\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\r\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\r\n        assert(instance.is(CommonFlags.ARROW));\r\n        stmt = this.compileExpression(\r\n          (<ExpressionStatement>body).expression,\r\n          returnType,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        flow.set(FlowFlags.RETURNS);\r\n        if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n        flow.finalize();\r\n      } else {\r\n        assert(body.kind == NodeKind.BLOCK);\r\n        let stmts = this.compileStatements((<BlockStatement>body).statements);\r\n        if (instance.is(CommonFlags.MAIN)) {\r\n          module.addGlobal(\"~started\", NativeType.I32, true, module.createI32(0));\r\n          stmts.unshift(\r\n            module.createIf(\r\n              module.createUnary(\r\n                UnaryOp.EqzI32,\r\n                module.createGetGlobal(\"~started\", NativeType.I32)\r\n              ),\r\n              module.createBlock(null, [\r\n                module.createCall(\"start\", null, NativeType.None),\r\n                module.createSetGlobal(\"~started\", module.createI32(1))\r\n              ])\r\n            )\r\n          );\r\n        }\r\n        flow.finalize();\r\n        if (isConstructor) {\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          assert(instance.is(CommonFlags.INSTANCE));\r\n\r\n          // implicitly return `this` if the constructor doesn't always return on its own\r\n          if (!flow.is(FlowFlags.RETURNS)) {\r\n\r\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\r\n            if (flow.is(FlowFlags.ALLOCATES)) {\r\n              stmts.push(module.createGetLocal(0, nativeSizeType));\r\n\r\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\r\n            } else {\r\n              let parent = assert(instance.parent);\r\n              assert(parent.kind == ElementKind.CLASS);\r\n              stmts.push(module.createTeeLocal(0,\r\n                this.makeConditionalAllocate(<Class>parent, declaration.name)\r\n              ));\r\n            }\r\n          }\r\n\r\n        // make sure all branches return\r\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\r\n          this.error(\r\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n            declaration.signature.returnType.range\r\n          );\r\n        }\r\n        stmt = !stmts.length\r\n          ? module.createNop()\r\n          : stmts.length == 1\r\n            ? stmts[0]\r\n            : module.createBlock(null, stmts, returnType.toNativeType());\r\n      }\r\n      this.currentFunction = previousFunction;\r\n\r\n      // create the function\r\n      ref = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        stmt\r\n      );\r\n\r\n      // concrete functions cannot have an annotated external name\r\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\r\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          decorator.range\r\n        );\r\n      }\r\n\r\n    } else {\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n      mangleImportName(instance, declaration, instance.prototype.parent); // TODO: check for duplicates\r\n\r\n      // create the function import\r\n      ref = module.addFunctionImport(\r\n        instance.internalName,\r\n        mangleImportName_moduleName,\r\n        mangleImportName_elementName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    instance.finalize(module, ref);\r\n    return true;\r\n  }\r\n\r\n  // namespaces\r\n\r\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\r\n    var members = declaration.members;\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<ClassDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<InterfaceDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<FunctionDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\r\n            if (variableInit) this.startFunctionBody.push(variableInit);\r\n          }\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n  }\r\n\r\n  compileNamespace(ns: Namespace): void {\r\n    if (!ns.members) return;\r\n\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let element of ns.members.values()) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking ||\r\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            if (element.hasDecorator(DecoratorFlags.BUILTIN)) break;\r\n            this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null, // no contextual type arguments\r\n              null, // no outer scope\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          this.compileGlobal(<Global>element);\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // exports\r\n\r\n  compileExportStatement(statement: ExportStatement): void {\r\n    var fileLevelExports = this.program.fileLevelExports;\r\n    var members = statement.members;\r\n    if (!members) return; // filespace\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      let element = fileLevelExports.get(\r\n        statement.range.source.internalPath + PATH_DELIMITER + member.externalName.text\r\n      );\r\n      if (!element) continue; // reported in Program#initialize\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\r\n            statement.range.source.isEntry\r\n          ) {\r\n            this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null, // no contextual type arguments\r\n              null, // no outer scope\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          this.compileGlobal(<Global>element);\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // classes\r\n\r\n  compileClassDeclaration(\r\n    declaration: ClassDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): void {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n    this.compileClassUsingTypeArguments(\r\n      <ClassPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      declaration\r\n    );\r\n  }\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = this.resolver.resolveClassInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    var staticMembers = instance.prototype.members;\r\n    if (staticMembers) {\r\n      for (let element of staticMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.GLOBAL: {\r\n            this.compileGlobal(<Global>element);\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [], null, null,\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [], null, null,\r\n                getter.declaration.name\r\n              );\r\n            }\r\n            let setter = (<Property>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [], null, null,\r\n                setter.declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    var ctorInstance = instance.constructorInstance;\r\n    if (ctorInstance) this.compileFunction(ctorInstance);\r\n    var instanceMembers = instance.members;\r\n    if (instanceMembers) {\r\n      for (let element of instanceMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                instance.contextualTypeArguments,\r\n                null, // no outer scope\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FIELD: {\r\n            element.set(CommonFlags.COMPILED);\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [], instance.contextualTypeArguments, null,\r\n                getter.declaration.name\r\n              );\r\n            }\r\n            let setter = (<Property>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [], instance.contextualTypeArguments, null,\r\n                setter.declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // memory\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  // function table\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func.ref);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // statements\r\n\r\n  compileStatement(statement: Statement): ExpressionRef {\r\n    var module = this.module;\r\n    var stmt: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        stmt = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        stmt = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        stmt = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        stmt = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!stmt) stmt = module.createNop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // type declarations must be top-level because function bodies are evaluated when\r\n        // reachaable only.\r\n        if (this.currentFunction == this.startFunctionInstance) {\r\n          return module.createNop();\r\n        }\r\n        // otherwise fall-through\r\n      }\r\n      default: {\r\n        assert(false);\r\n        stmt = module.createUnreachable();\r\n      }\r\n    }\r\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\r\n    return stmt;\r\n  }\r\n\r\n  compileStatements(statements: Statement[]): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    var stmts = new Array<ExpressionRef>(numStatements);\r\n    stmts.length = 0;\r\n    var flow = this.currentFunction.flow;\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      let stmt = this.compileStatement(statements[i]);\r\n      switch (getExpressionId(stmt)) {\r\n        case ExpressionId.Block: {\r\n          if (!getBlockName(stmt)) {\r\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: stmts.push(stmt);\r\n        case ExpressionId.Nop:\r\n      }\r\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.createUnreachable());\r\n        break;\r\n      }\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\r\n    var statements = statement.statements;\r\n    var parentFlow = this.currentFunction.flow;\r\n    var flow = parentFlow.fork();\r\n    this.currentFunction.flow = flow;\r\n\r\n    var stmts = this.compileStatements(statements);\r\n    var stmt = stmts.length == 0\r\n      ? this.module.createNop()\r\n      : stmts.length == 1\r\n        ? stmts[0]\r\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\r\n\r\n    this.currentFunction.flow = flow.free();\r\n    parentFlow.inherit(flow);\r\n    return stmt;\r\n  }\r\n\r\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var flow = this.currentFunction.flow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.BREAKS);\r\n    return module.createBreak(breakLabel);\r\n  }\r\n\r\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFunction.flow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES);\r\n    return module.createBreak(continueLabel);\r\n  }\r\n\r\n  compileDoStatement(statement: DoStatement): ExpressionRef {\r\n    var currentFunction = this.currentFunction;\r\n    var module = this.module;\r\n\r\n    var label = currentFunction.enterBreakContext();\r\n    var parentFlow = currentFunction.flow;\r\n    var flow = parentFlow.fork();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n    // TODO: check if condition is always false and if so, omit it (just a block)\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.free();\r\n    currentFunction.leaveBreakContext();\r\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\r\n    flow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    parentFlow.inherit(flow);\r\n\r\n    var block: ExpressionRef[] = [\r\n      module.createLoop(continueLabel,\r\n        terminated\r\n          ? body // skip trailing continue if unnecessary\r\n          : module.createBlock(null, [\r\n              body,\r\n              module.createBreak(continueLabel, condExpr)\r\n            ], NativeType.None)\r\n      )\r\n    ];\r\n    if (terminated) block.push(module.createUnreachable());\r\n    return module.createBlock(breakLabel, block);\r\n  }\r\n\r\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\r\n    return this.module.createNop();\r\n  }\r\n\r\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\r\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\r\n    if (this.currentType != Type.void) {\r\n      expr = this.module.createDrop(expr);\r\n      this.currentType = Type.void;\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileForStatement(statement: ForStatement): ExpressionRef {\r\n    // A for statement initiates a new branch with its own scoped variables\r\n    // possibly declared in its initializer, and break context.\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var parentFlow = currentFunction.flow;\r\n    var flow = parentFlow.fork();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = flow.breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n    var repeatLabel = \"repeat|\" + label;\r\n\r\n    // Compile in correct order\r\n    var module = this.module;\r\n    var initExpr = statement.initializer\r\n      ? this.compileStatement(<Statement>statement.initializer)\r\n      : 0;\r\n    var condExpr: ExpressionRef = 0;\r\n    var alwaysTrue = false;\r\n    if (statement.condition) {\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n      // check if the condition is always true\r\n      let condPre = module.precomputeExpression(condExpr);\r\n      if (getExpressionId(condPre) == ExpressionId.Const) {\r\n        assert(getExpressionType(condPre) == NativeType.I32);\r\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\r\n        // TODO: could skip compilation if the condition is always false here, but beware that the\r\n        // initializer could still declare new 'var's that are used later on.\r\n      }\r\n      // recompile to original\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n    } else {\r\n      // omitted condition is always true\r\n      condExpr = module.createI32(1);\r\n      alwaysTrue = true;\r\n    }\r\n    var incrExpr = statement.incrementor\r\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n      : 0;\r\n    var bodyStatement = statement.statement;\r\n    var bodyExpr = bodyStatement.kind == NodeKind.BLOCK && (<BlockStatement>bodyStatement).statements.length == 1\r\n      ? this.compileStatement((<BlockStatement>bodyStatement).statements[0])\r\n      : this.compileStatement(bodyStatement);\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.free();\r\n    currentFunction.leaveBreakContext();\r\n    var usesContinue = flow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\r\n    flow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) parentFlow.inherit(flow);\r\n    else parentFlow.inheritConditional(flow);\r\n\r\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\r\n    if (initExpr) breakBlock.push(initExpr);\r\n\r\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\r\n    if (usesContinue) {\r\n      repeatBlock.push(\r\n        module.createBlock(continueLabel, [ // inner 'continue' block\r\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\r\n          bodyExpr\r\n        ], NativeType.None)\r\n      );\r\n    } else { // can omit the 'continue' block\r\n      repeatBlock.push(\r\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\r\n      );\r\n      repeatBlock.push(bodyExpr);\r\n    }\r\n    if (incrExpr) repeatBlock.push(incrExpr);\r\n    repeatBlock.push(\r\n      module.createBreak(repeatLabel)\r\n    );\r\n\r\n    breakBlock.push(\r\n      module.createLoop(repeatLabel, module.createBlock(null, repeatBlock, NativeType.None))\r\n    );\r\n\r\n    return module.createBlock(breakLabel, breakBlock);\r\n  }\r\n\r\n  compileIfStatement(statement: IfStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary branches if the condition is constant\r\n      let condExprPrecomp = module.precomputeExpression(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        return getConstValueI32(condExprPrecomp)\r\n          ? this.compileStatement(ifTrue)\r\n          : ifFalse\r\n            ? this.compileStatement(ifFalse)\r\n            : module.createNop();\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var parentFlow = currentFunction.flow;\r\n    var ifTrueFlow = parentFlow.fork();\r\n    currentFunction.flow = ifTrueFlow;\r\n    var ifTrueExpr = this.compileStatement(ifTrue);\r\n    currentFunction.flow = ifTrueFlow.free();\r\n\r\n    var ifFalseExpr: ExpressionRef = 0;\r\n    if (ifFalse) {\r\n      let ifFalseFlow = parentFlow.fork();\r\n      currentFunction.flow = ifFalseFlow;\r\n      ifFalseExpr = this.compileStatement(ifFalse);\r\n      currentFunction.flow = ifFalseFlow.free();\r\n      parentFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\r\n    } else {\r\n      parentFlow.inheritConditional(ifTrueFlow);\r\n    }\r\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\r\n  }\r\n\r\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var expr: ExpressionRef = 0;\r\n    var flow = currentFunction.flow;\r\n\r\n    // Remember that this flow returns\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    if (statement.value) {\r\n      let returnType = flow.returnType;\r\n      if (returnType == Type.void) {\r\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n          statement.value.range, this.currentType.toString(), returnType.toString()\r\n        );\r\n        this.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      expr = this.compileExpression(\r\n        statement.value,\r\n        returnType,\r\n        ConversionKind.IMPLICIT,\r\n        currentFunction.is(CommonFlags.MODULE_EXPORT)\r\n          ? WrapMode.WRAP\r\n          : WrapMode.NONE\r\n      );\r\n\r\n      // Remember whether returning a properly wrapped value\r\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n    }\r\n\r\n    // If the last statement anyway, make it the block's return value\r\n    if (isLastStatement(statement)) return expr ? expr : module.createNop();\r\n\r\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\r\n    return flow.is(FlowFlags.INLINE_CONTEXT)\r\n      ? module.createBreak(assert(flow.returnLabel), 0, expr)\r\n      : module.createReturn(expr);\r\n  }\r\n\r\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n    if (!numCases) {\r\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    }\r\n\r\n    // Everything within a switch uses the same break context\r\n    var context = currentFunction.enterBreakContext();\r\n    var parentFlow = currentFunction.flow;\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = currentFunction.getTempLocal(Type.u32, false);\r\n    var tempLocalIndex = tempLocal.index;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.createSetLocal( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.createBinary(BinaryOp.EqI32,\r\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\r\n    var alwaysReturns = true;\r\n    var alwaysReturnsWrapped = true;\r\n    var alwaysThrows = true;\r\n    var alwaysAllocates = true;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n\r\n      // Each switch case initiates a new branch\r\n      let flow = parentFlow.fork();\r\n      currentFunction.flow = flow;\r\n      let breakLabel = \"break|\" + context;\r\n      flow.breakLabel = breakLabel;\r\n\r\n      let isLast = i == numCases - 1;\r\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\r\n      stmts[0] = currentBlock;\r\n      let count = 1;\r\n      let terminated = false;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        let stmt = this.compileStatement(statements[j]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          stmts[count++] = stmt;\r\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n            terminated = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      stmts.length = count;\r\n      if (terminated || isLast) {\r\n        if (!flow.is(FlowFlags.RETURNS)) alwaysReturns = false;\r\n        if (!flow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\r\n        if (!flow.is(FlowFlags.THROWS)) alwaysThrows = false;\r\n        if (!flow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\r\n      }\r\n\r\n      // Switch back to the parent flow\r\n      flow.unset(\r\n        FlowFlags.BREAKS |\r\n        FlowFlags.CONDITIONALLY_BREAKS\r\n      );\r\n      currentFunction.flow = flow.free();\r\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\r\n    }\r\n    currentFunction.leaveBreakContext();\r\n\r\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\r\n    if (defaultIndex >= 0) {\r\n      if (alwaysReturns) parentFlow.set(FlowFlags.RETURNS);\r\n      if (alwaysReturnsWrapped) parentFlow.set(FlowFlags.RETURNS_WRAPPED);\r\n      if (alwaysThrows) parentFlow.set(FlowFlags.THROWS);\r\n      if (alwaysAllocates) parentFlow.set(FlowFlags.ALLOCATES);\r\n    }\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\r\n    var flow = this.currentFunction.flow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS);\r\n\r\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    return compileAbort(this, null, statement);\r\n  }\r\n\r\n  compileTryStatement(statement: TryStatement): ExpressionRef {\r\n    // TODO\r\n    // can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  /**\r\n   * Compiles a variable statement. Returns `0` if an initializer is not\r\n   * necessary.\r\n   */\r\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\r\n    var program = this.program;\r\n    var currentFunction = this.currentFunction;\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n\r\n    // top-level variables and constants become globals\r\n    if (isKnownGlobal || (\r\n      currentFunction == this.startFunctionInstance &&\r\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\r\n    )) {\r\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\r\n      // though such variables could also become start function locals if, and only if, not used\r\n      // within any function declared in the same source, which is unknown at this point. the only\r\n      // efficient way to deal with this would be to keep track of all occasions it is used and\r\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\r\n      for (let i = 0; i < numDeclarations; ++i) {\r\n        this.compileGlobalDeclaration(declarations[i]);\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    // other variables become locals\r\n    var initializers = new Array<ExpressionRef>();\r\n    var flow = this.currentFunction.flow;\r\n    var resolver = this.resolver;\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let initExpr: ExpressionRef = 0;\r\n      if (declaration.type) {\r\n        type = resolver.resolveType( // reports\r\n          declaration.type,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          initExpr = this.compileExpression( // reports\r\n            declaration.initializer,\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\r\n        initExpr = this.compileExpressionRetainType( // reports\r\n          declaration.initializer,\r\n          Type.void,\r\n          WrapMode.NONE\r\n        );\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n      let isInlined = false;\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        if (initExpr) {\r\n          initExpr = this.module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\r\n            let local = new Local(program, name, -1, type);\r\n            switch (getExpressionType(initExpr)) {\r\n              case NativeType.I32: {\r\n                local = local.withConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI32(initExpr),\r\n                    0\r\n                  )\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local = local.withConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI64Low(initExpr),\r\n                    getConstValueI64High(initExpr)\r\n                  )\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                return this.module.createUnreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = currentFunction.flow.scopedLocals;\r\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return this.module.createUnreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isInlined = true;\r\n          } else {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n      if (!isInlined) {\r\n        let local: Local;\r\n        if (\r\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\r\n          flow.is(FlowFlags.INLINE_CONTEXT)\r\n        ) { // here: not top-level\r\n          local = flow.addScopedLocal(type, name, false, declaration); // reports\r\n        } else {\r\n          local = currentFunction.addLocal(type, name, declaration); // reports\r\n        }\r\n        if (initExpr) {\r\n          initializers.push(this.compileAssignmentWithValue(declaration.name, initExpr));\r\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\r\n          }\r\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped(local.index, true); // zero\r\n        }\r\n      }\r\n    }\r\n    return initializers.length   // we can unwrap these here because the\r\n      ? initializers.length == 1 // source didn't tell us exactly what to do\r\n        ? initializers[0]\r\n        : this.module.createBlock(null, initializers, NativeType.None)\r\n      : 0;\r\n  }\r\n\r\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n  }\r\n\r\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // The condition does not yet initialize a branch\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary loops if the condition is constant\r\n      let condExprPrecomp = module.precomputeExpression(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    // Statements initiate a new branch with its own break context\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var parentFlow = currentFunction.flow;\r\n    var flow = parentFlow.fork();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var alwaysTrue = false; // TODO\r\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.free();\r\n    currentFunction.leaveBreakContext();\r\n    flow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) parentFlow.inherit(flow);\r\n    else parentFlow.inheritConditional(flow);\r\n\r\n    return module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createIf(condExpr,\r\n          terminated\r\n            ? body // skip trailing continue if unnecessary\r\n            : module.createBlock(null, [\r\n                body,\r\n                module.createBreak(continueLabel)\r\n              ], NativeType.None)\r\n        )\r\n      )\r\n    ]);\r\n  }\r\n\r\n  // expressions\r\n\r\n  /**\r\n   * Compiles the value of an inlined constant element.\r\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\r\n   *  is precomputed according to context.\r\n   */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    retainType: bool\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !retainType &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.createI32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.createI64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.createI64(0);\r\n      }\r\n      case TypeKind.F64: {\r\n        // monkey-patch for converting built-in floats to f32 implicitly\r\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\r\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\r\n        }\r\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\r\n        this.currentType = Type.f32;\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n\r\n    var expr: ExpressionRef;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.SUPER:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(\r\n          <IdentifierExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.INSTANCEOF: {\r\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    var currentType = this.currentType;\r\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\r\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\r\n      this.currentType = contextualType;\r\n    } else if (wrapMode == WrapMode.WRAP) {\r\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\r\n    }\r\n\r\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n    return expr;\r\n  }\r\n\r\n  compileExpressionRetainType(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.compileExpression(\r\n      expression,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      wrapMode\r\n    );\r\n  }\r\n\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.module.precomputeExpression(\r\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\r\n    );\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    fromType: Type,\r\n    toType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    assert(conversionKind != ConversionKind.NONE);\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\r\n\r\n    if (!fromType.isAssignableTo(toType)) {\r\n      if (conversionKind == ConversionKind.IMPLICIT) {\r\n        this.error(\r\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n          reportNode.range, fromType.toString(), toType.toString()\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.createDrop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      // i64 to ...\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32 or smaller\r\n        if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\r\n        }\r\n\r\n      // i32 or smaller to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.createUnary(\r\n          toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\r\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\r\n        );\r\n        wrapMode = WrapMode.NONE;\r\n\r\n      // i32 to i32\r\n      } else {\r\n        // small i32 to ...\r\n        if (fromType.is(TypeFlags.SHORT)) {\r\n          // small i32 to larger i32\r\n          if (fromType.size < toType.size) {\r\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\r\n            wrapMode = WrapMode.NONE;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return wrapMode == WrapMode.WRAP\r\n      ? this.ensureSmallIntegerWrap(expr, toType)\r\n      : expr;\r\n  }\r\n\r\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\r\n    var toType = this.resolver.resolveType( // reports\r\n      expression.toType,\r\n      this.currentFunction.flow.contextualTypeArguments\r\n    );\r\n    if (!toType) return this.module.createUnreachable();\r\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n  }\r\n\r\n  private f32ModInstance: Function | null = null;\r\n  private f64ModInstance: Function | null = null;\r\n  private f32PowInstance: Function | null = null;\r\n  private f64PowInstance: Function | null = null;\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n\r\n    var operator = expression.operator;\r\n    switch (operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '==' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '!=' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // addition might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // subtraction might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK_ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.POW);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        let instance: Function | null;\r\n\r\n        // Mathf.pow if lhs is f32 (result is f32)\r\n        if (this.currentType.kind == TypeKind.F32) {\r\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f32PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n\r\n        // Math.pow otherwise (result is f64)\r\n        // TODO: should the result be converted back?\r\n        } else {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            this.currentType,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE,\r\n            left\r\n          );\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f64PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Math\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n        }\r\n        if (!(instance && this.compileFunction(instance))) {\r\n          expr = module.createUnreachable();\r\n        } else {\r\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\r\n          case TypeKind.I16: // ^\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.REM);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let instance = this.f32ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let instance = this.f64ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Math\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n          }\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overloadd\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n          this.makeIsTrueish(leftExpr, this.currentType);\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            rightExpr,\r\n            expr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFunction.flow;\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            rightExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            )\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\r\n          expr = this.module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            expr,\r\n            rightExpr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFunction.flow;\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            ),\r\n            rightExpr\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  compileUnaryOverload(\r\n    operatorInstance: Function,\r\n    value: Expression,\r\n    valueExpr: ExpressionRef,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\r\n      argumentExpressions = [];\r\n    } else {\r\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\r\n    }\r\n    return this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg,\r\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\r\n    );\r\n  }\r\n\r\n  compileBinaryOverload(\r\n    operatorInstance: Function,\r\n    left: Expression,\r\n    leftExpr: ExpressionRef,\r\n    right: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      let parent = assert(operatorInstance.parent);\r\n      assert(parent.kind == ElementKind.CLASS);\r\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\r\n      argumentExpressions = [ right ];\r\n    } else {\r\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\r\n    }\r\n    var ret = this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg,\r\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\r\n    );\r\n    return ret;\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var program = this.program;\r\n    var resolver = program.resolver;\r\n    var currentFunction = this.currentFunction;\r\n    var target = resolver.resolveExpression(expression, currentFunction); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var targetType: Type;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\r\n        // fall-through\r\n      }\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        targetType = (<VariableLikeElement>target).type;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let setterPrototype = (<Property>target).setterPrototype;\r\n        if (setterPrototype) {\r\n          let instance = this.resolver.resolveFunction(setterPrototype, null);\r\n          if (!instance) return this.module.createUnreachable();\r\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n          targetType = instance.signature.parameterTypes[0];\r\n          break;\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n          expression.range, (<Property>target).internalName\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (resolver.currentElementExpression) { // indexed access\r\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n            if (!indexedGet) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            }\r\n            return this.module.createUnreachable();\r\n          }\r\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\r\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    assert(targetType != Type.void);\r\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    return this.compileAssignmentWithValue(\r\n      expression,\r\n      valueExpr,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileAssignmentWithValue(\r\n    expression: Expression,\r\n    valueWithCorrectType: ExpressionRef,\r\n    tee: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var target = this.resolver.resolveExpression(expression, this.currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let type = (<Local>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let flow = this.currentFunction.flow;\r\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\r\n        }\r\n        return tee\r\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\r\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\r\n        let type = (<Global>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range,\r\n            target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\r\n        if (tee) {\r\n          let nativeType = type.toNativeType();\r\n          let internalName = target.internalName;\r\n          return module.createBlock(null, [ // emulated teeGlobal\r\n            module.createSetGlobal(internalName, valueWithCorrectType),\r\n            module.createGetGlobal(internalName, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        const declaration = (<Field>target).declaration;\r\n        if (\r\n          (<Field>target).is(CommonFlags.READONLY) &&\r\n          !(\r\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\r\n            declaration == null ||\r\n            declaration.initializer != null\r\n          )\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Field>target).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let thisExpression = assert(this.resolver.currentThisExpression);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        let type = (<Field>target).type;\r\n        this.currentType = tee ? type : Type.void;\r\n        let nativeType = type.toNativeType();\r\n        if (type.kind == TypeKind.BOOL) {\r\n          // make sure bools are wrapped (usually are) when storing as 8 bits\r\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\r\n        }\r\n        if (tee) {\r\n          let currentFunction = this.currentFunction;\r\n          let flow = currentFunction.flow;\r\n          let tempLocal = currentFunction.getAndFreeTempLocal(\r\n            type,\r\n            !flow.canOverflow(valueWithCorrectType, type)\r\n          );\r\n          let tempLocalIndex = tempLocal.index;\r\n          // TODO: simplify if valueWithCorrectType has no side effects\r\n          // TODO: call __gc_link here if a GC is present\r\n          return module.createBlock(null, [\r\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\r\n            module.createStore(\r\n              type.byteSize,\r\n              thisExpr,\r\n              module.createGetLocal(tempLocalIndex, nativeType),\r\n              nativeType,\r\n              (<Field>target).memoryOffset\r\n            ),\r\n            module.createGetLocal(tempLocalIndex, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          // TODO: call __gc_link here if a GC is present\r\n          return module.createStore(\r\n            type.byteSize,\r\n            thisExpr,\r\n            valueWithCorrectType,\r\n            nativeType,\r\n            (<Field>target).memoryOffset\r\n          );\r\n        }\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let setterPrototype = (<Property>target).setterPrototype;\r\n        if (setterPrototype) {\r\n          let setterInstance = this.resolver.resolveFunction(setterPrototype, null);\r\n          if (!setterInstance) return module.createUnreachable();\r\n\r\n          // call just the setter if the return value isn't of interest\r\n          if (!tee) {\r\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n              let thisExpression = assert(this.resolver.currentThisExpression);\r\n              let thisExpr = this.compileExpressionRetainType(\r\n                thisExpression,\r\n                this.options.usizeType,\r\n                WrapMode.NONE\r\n              );\r\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\r\n            } else {\r\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\r\n            }\r\n          }\r\n\r\n          // otherwise call the setter first, then the getter\r\n          let getterPrototype = (<Property>target).getterPrototype;\r\n          assert(getterPrototype != null); // must have one if there is a setter\r\n          let getterInstance = this.resolver.resolveFunction(<FunctionPrototype>getterPrototype, null);\r\n          if (!getterInstance) return module.createUnreachable();\r\n          let returnType = getterInstance.signature.returnType;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n            let thisExpression = assert(this.resolver.currentThisExpression);\r\n            let thisExpr = this.compileExpressionRetainType(\r\n              thisExpression,\r\n              this.options.usizeType,\r\n              WrapMode.NONE\r\n            );\r\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType, false);\r\n            let tempLocalIndex = tempLocal.index;\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ // set and remember the target\r\n                module.createTeeLocal(tempLocalIndex, thisExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(getterInstance, [ // get from remembered target\r\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\r\n              ])\r\n            ], nativeReturnType);\r\n          } else {\r\n            // note that this must be performed here because `resolved` is shared\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\r\n              this.makeCallDirect(getterInstance)\r\n            ], nativeReturnType);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.resolver.currentElementExpression;\r\n        if (elementExpression) {\r\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              expression.range, target.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              expression.range, target.internalName\r\n            );\r\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\r\n            return module.createUnreachable();\r\n          }\r\n          let targetType = (<Class>target).type;\r\n          let thisExpression = assert(this.resolver.currentThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          let elementExpr = this.compileExpression(\r\n            elementExpression,\r\n            Type.i32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          if (tee) {\r\n            let currentFunction = this.currentFunction;\r\n            let tempLocalTarget = currentFunction.getTempLocal(targetType, false);\r\n            let tempLocalElement = currentFunction.getAndFreeTempLocal(this.currentType, false);\r\n            let returnType = indexedGet.signature.returnType;\r\n            this.currentFunction.freeTempLocal(tempLocalTarget);\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(indexedSet, [\r\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\r\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(indexedGet, [\r\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n              ])\r\n            ], returnType.toNativeType());\r\n          } else {\r\n            return this.makeCallDirect(indexedSet, [\r\n              thisExpr,\r\n              elementExpr,\r\n              valueWithCorrectType\r\n            ]);\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var target = this.resolver.resolveExpression(expression.expression, currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (target.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n        let typeArguments = expression.typeArguments;\r\n\r\n        // builtins handle present respectively omitted type arguments on their own\r\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\r\n        }\r\n\r\n        let instance: Function | null = null;\r\n\r\n        // resolve generic call if type arguments have been provided\r\n        if (typeArguments) {\r\n          if (!prototype.is(CommonFlags.GENERIC)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              expression.expression.range, prototype.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          instance = this.resolver.resolveFunctionInclTypeArguments(\r\n            prototype,\r\n            typeArguments,\r\n            this.currentFunction.flow.contextualTypeArguments,\r\n            expression\r\n          );\r\n\r\n        // infer generic call if type arguments have been omitted\r\n        } else if (prototype.is(CommonFlags.GENERIC)) {\r\n          let inferredTypes = new Map<string,Type | null>();\r\n          let typeParameters = assert(prototype.declaration.typeParameters);\r\n          let numTypeParameters = typeParameters.length;\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            inferredTypes.set(typeParameters[i].name.text, null);\r\n          }\r\n          // let numInferred = 0;\r\n          let parameterTypes = prototype.declaration.signature.parameters;\r\n          let numParameterTypes = parameterTypes.length;\r\n          let argumentExpressions = expression.arguments;\r\n          let numArguments = argumentExpressions.length;\r\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\r\n          for (let i = 0; i < numParameterTypes; ++i) {\r\n            let typeNode = parameterTypes[i].type;\r\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\r\n            let argumentExpression = i < numArguments\r\n              ? argumentExpressions[i]\r\n              : prototype.declaration.signature.parameters[i].initializer;\r\n            if (!argumentExpression) { // missing initializer -> too few arguments\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            if (name !== null && inferredTypes.has(name)) {\r\n              let inferredType = inferredTypes.get(name);\r\n              if (inferredType) {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\r\n                let commonType: Type | null;\r\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\r\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\r\n                    this.error(\r\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\r\n                    );\r\n                    return module.createUnreachable();\r\n                  }\r\n                }\r\n                inferredType = commonType;\r\n              } else {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\r\n                inferredType = this.currentType;\r\n                // ++numInferred;\r\n              }\r\n              inferredTypes.set(name, inferredType);\r\n            } else {\r\n              let concreteType = this.resolver.resolveType(\r\n                parameterTypes[i].type,\r\n                this.currentFunction.flow.contextualTypeArguments\r\n              );\r\n              if (!concreteType) return module.createUnreachable();\r\n              argumentExprs[i] = this.compileExpression(\r\n                argumentExpression,\r\n                concreteType,\r\n                ConversionKind.IMPLICIT,\r\n                WrapMode.NONE\r\n              );\r\n            }\r\n          }\r\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\r\n            resolvedTypeArguments[i] = inferredType;\r\n          }\r\n          instance = this.resolver.resolveFunction(\r\n            prototype,\r\n            resolvedTypeArguments,\r\n            this.currentFunction.flow.contextualTypeArguments\r\n          );\r\n          if (!instance) return this.module.createUnreachable();\r\n          return this.makeCallDirect(instance, argumentExprs);\r\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\r\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\r\n          // so inlining can be performed in `makeCallDirect` instead?\r\n\r\n        // otherwise resolve the non-generic call as usual\r\n        } else {\r\n          instance = this.resolver.resolveFunction(\r\n            prototype,\r\n            null,\r\n            this.currentFunction.flow.contextualTypeArguments\r\n          );\r\n        }\r\n        if (!instance) return this.module.createUnreachable();\r\n\r\n        // compile 'this' expression if an instance method\r\n        let thisExpr: ExpressionRef = 0;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          thisExpr = this.compileExpressionRetainType(\r\n            assert(this.resolver.currentThisExpression),\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n\r\n        return this.compileCallDirect(\r\n          instance,\r\n          expression.arguments,\r\n          expression,\r\n          thisExpr,\r\n          instance.hasDecorator(DecoratorFlags.INLINE)\r\n        );\r\n      }\r\n\r\n      // indirect call: index argument with signature (non-generic, can't be inlined)\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>target).type.signatureReference) {\r\n          if ((<Local>target).is(CommonFlags.INLINED)) {\r\n            indexArg = module.createI32(i64_low((<Local>target).constantIntegerValue));\r\n          } else {\r\n            indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\r\n          }\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>target).type.signatureReference) {\r\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>target).type;\r\n        if (signature = type.signatureReference) {\r\n          let thisExpression = assert(this.resolver.currentThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          indexArg = module.createLoad(\r\n            4,\r\n            false,\r\n            thisExpr,\r\n            NativeType.I32,\r\n            (<Field>target).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Field>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>target).signature;\r\n        indexArg = this.compileExpression(\r\n          expression.expression,\r\n          (<FunctionTarget>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: // TODO\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression\r\n    );\r\n  }\r\n\r\n  private compileCallExpressionBuiltin(\r\n    prototype: FunctionPrototype,\r\n    expression: CallExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var typeArguments: Type[] | null = null;\r\n\r\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\r\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\r\n    var typeArgumentNodes = expression.typeArguments;\r\n    if (expression.typeArguments) {\r\n      if (!prototype.is(CommonFlags.GENERIC)) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          expression.range, prototype.internalName\r\n        );\r\n      }\r\n      typeArguments = this.resolver.resolveTypeArguments(\r\n        assert(prototype.declaration.typeParameters),\r\n        typeArgumentNodes,\r\n        this.currentFunction.flow.contextualTypeArguments,\r\n        expression\r\n      );\r\n    }\r\n\r\n    // now compile the builtin, which usually returns a block of code that replaces the call.\r\n    var expr = compileBuiltinCall(\r\n      this,\r\n      prototype,\r\n      typeArguments,\r\n      expression.arguments,\r\n      contextualType,\r\n      expression\r\n    );\r\n    if (!expr) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    inline: bool = false\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    // Inline if explicitly requested\r\n    if (inline) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      if (this.currentInlineFunctions.includes(instance)) {\r\n        this.warning(\r\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\r\n          reportNode.range, instance.internalName\r\n        );\r\n      } else {\r\n        this.currentInlineFunctions.push(instance);\r\n        let expr = this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\r\n        this.currentInlineFunctions.pop();\r\n        return expr;\r\n      }\r\n    }\r\n\r\n    // Otherwise compile to just a call\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallDirect(instance, operands);\r\n  }\r\n\r\n  // Depends on being pre-checked in compileCallDirect\r\n  private compileCallInlineUnchecked(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    var currentFunction = this.currentFunction;\r\n    var module = this.module;\r\n    var declaration = instance.prototype.declaration;\r\n\r\n    // Create an empty child flow with its own scope and mark it for inlining\r\n    var previousFlow = currentFunction.flow;\r\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\r\n    var returnType = instance.signature.returnType;\r\n    var flow = Flow.create(currentFunction);\r\n    flow.set(FlowFlags.INLINE_CONTEXT);\r\n    flow.returnLabel = returnLabel;\r\n    flow.returnType = returnType;\r\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\r\n\r\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\r\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\r\n    var body = [];\r\n    if (thisArg) {\r\n      let parent = assert(instance.parent);\r\n      assert(parent.kind == ElementKind.CLASS);\r\n      if (getExpressionId(thisArg) == ExpressionId.GetLocal) {\r\n        flow.addScopedLocalAlias(\r\n          getGetLocalIndex(thisArg),\r\n          (<Class>parent).type,\r\n          \"this\"\r\n        );\r\n      } else {\r\n        let thisLocal = flow.addScopedLocal((<Class>parent).type, \"this\", false);\r\n        body.push(\r\n          module.createSetLocal(thisLocal.index, thisArg)\r\n        );\r\n      }\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i) {\r\n      let paramExpr = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      if (getExpressionId(paramExpr) == ExpressionId.GetLocal) {\r\n        flow.addScopedLocalAlias(\r\n          getGetLocalIndex(paramExpr),\r\n          parameterTypes[i],\r\n          signature.getParameterName(i)\r\n        );\r\n        // inherits wrap status\r\n      } else {\r\n        let argumentLocal = flow.addScopedLocal(\r\n          parameterTypes[i],\r\n          signature.getParameterName(i),\r\n          !flow.canOverflow(paramExpr, parameterTypes[i])\r\n        );\r\n        body.push(\r\n          module.createSetLocal(argumentLocal.index, paramExpr)\r\n        );\r\n      }\r\n    }\r\n\r\n    // Compile optional parameter initializers in the scope of the inlined flow\r\n    currentFunction.flow = flow;\r\n    var numParameters = signature.parameterTypes.length;\r\n    for (let i = numArguments; i < numParameters; ++i) {\r\n      let initExpr = this.compileExpression(\r\n        assert(declaration.signature.parameters[i].initializer),\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.WRAP\r\n      );\r\n      let argumentLocal = flow.addScopedLocal(\r\n        parameterTypes[i],\r\n        signature.getParameterName(i),\r\n        !flow.canOverflow(initExpr, parameterTypes[i])\r\n      );\r\n      body.push(\r\n        module.createSetLocal(argumentLocal.index, initExpr)\r\n      );\r\n    }\r\n\r\n    // Compile the called function's body in the scope of the inlined flow\r\n    var bodyStatement = assert(declaration.body);\r\n    if (bodyStatement.kind == NodeKind.BLOCK) {\r\n      let statements = (<BlockStatement>bodyStatement).statements;\r\n      for (let i = 0, k = statements.length; i < k; ++i) {\r\n        let stmt = this.compileStatement(statements[i]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          body.push(stmt);\r\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) break;\r\n        }\r\n      }\r\n    } else {\r\n      body.push(this.compileStatement(bodyStatement));\r\n    }\r\n\r\n    // Free any new scoped locals and reset to the original flow\r\n    var scopedLocals = flow.scopedLocals;\r\n    if (scopedLocals) {\r\n      for (let scopedLocal of scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          currentFunction.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      flow.scopedLocals = null;\r\n    }\r\n    flow.finalize();\r\n    this.currentFunction.flow = previousFlow;\r\n    this.currentType = returnType;\r\n\r\n    // Check that all branches are terminated\r\n    if (returnType != Type.void && !flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n      this.error(\r\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n        declaration.signature.returnType.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    return module.createBlock(returnLabel, body, returnType.toNativeType());\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameters;\r\n    var commonReturnType = originalSignature.returnType;\r\n    var commonThisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\r\n    var trampolineName = originalName + \"|trampoline\";\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampoline = new Function(\r\n      original.prototype,\r\n      trampolineName,\r\n      trampolineSignature,\r\n      original.parent,\r\n      original.contextualTypeArguments\r\n    );\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFunction = this.currentFunction;\r\n    this.currentFunction = trampoline;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.createBlock(names[0], [\r\n      module.createBlock(\"outOfRange\", [\r\n        module.createSwitch(names, \"outOfRange\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.createBinary(\r\n                BinaryOp.SubI32,\r\n                module.createGetGlobal(\"~argc\", NativeType.I32),\r\n                module.createI32(minArguments)\r\n              )\r\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\r\n        )\r\n      ]),\r\n      module.createUnreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      let declaration = originalParameterDeclarations[minArguments + i];\r\n      let initializer = declaration.initializer;\r\n      let initExpr: ExpressionRef;\r\n      if (initializer) {\r\n        initExpr = module.createSetLocal(operandIndex,\r\n          this.compileExpression(\r\n            initializer,\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP\r\n          )\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\r\n          declaration.range\r\n        );\r\n        initExpr = module.createUnreachable();\r\n      }\r\n      body = module.createBlock(names[i + 1], [\r\n        body,\r\n        initExpr,\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\r\n    }\r\n    this.currentFunction = previousFunction;\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var funcRef = module.addFunction(\r\n      trampolineName,\r\n      this.ensureFunctionType(\r\n        trampolineSignature.parameterTypes,\r\n        trampolineSignature.returnType,\r\n        trampolineSignature.thisType\r\n      ),\r\n      typesToNativeTypes(trampoline.additionalLocals),\r\n      module.createBlock(null, [\r\n        body,\r\n        module.createCall(\r\n          originalName,\r\n          forwardedOperands,\r\n          commonReturnType.toNativeType()\r\n        )\r\n      ], commonReturnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper global is present and returns its name. */\r\n  private ensureArgcVar(): string {\r\n    var internalName = \"~argc\";\r\n    if (!this.argcVar) {\r\n      let module = this.module;\r\n      this.argcVar = module.addGlobal(\r\n        internalName,\r\n        NativeType.I32,\r\n        true,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper setter is present and returns its name. */\r\n  private ensureArgcSet(): string {\r\n    var internalName = \"~setargc\";\r\n    if (!this.argcSet) {\r\n      let module = this.module;\r\n      this.argcSet = module.addFunction(internalName,\r\n        this.ensureFunctionType([ Type.u32 ], Type.void),\r\n        null,\r\n        module.createSetGlobal(this.ensureArgcVar(),\r\n          module.createGetLocal(0, NativeType.I32)\r\n        )\r\n      );\r\n      module.addFunctionExport(internalName, \"_setargc\");\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.createUnreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      let parameterNodes = instance.prototype.declaration.signature.parameters;\r\n      let allOptionalsAreConstant = true;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        let initializer = parameterNodes[i].initializer;\r\n        if (!(initializer !== null && nodeIsConstantValue(initializer.kind))) {\r\n          allOptionalsAreConstant = false;\r\n          break;\r\n        }\r\n      }\r\n      if (allOptionalsAreConstant) { // inline into the call\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(\r\n            this.compileExpression(\r\n              <Expression>parameterNodes[i].initializer,\r\n              parameterTypes[i],\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE\r\n            )\r\n          );\r\n        }\r\n      } else { // otherwise fill up with zeroes and call the trampoline\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(parameterTypes[i].toNativeZero(module));\r\n        }\r\n        if (!isCallImport) {\r\n          let original = instance;\r\n          instance = this.ensureTrampoline(instance);\r\n          if (!this.compileFunction(instance)) return module.createUnreachable();\r\n          instance.flow.flags = original.flow.flags;\r\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\r\n          let nativeReturnType = returnType.toNativeType();\r\n          this.currentType = returnType;\r\n          return module.createBlock(null, [\r\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\r\n            module.createCall(instance.internalName, operands, nativeReturnType)\r\n          ], nativeReturnType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // otherwise just call through\r\n    this.currentType = returnType;\r\n    if (isCallImport) return module.createCallImport(instance.internalName, operands, returnType.toNativeType());\r\n    var ret = module.createCall(instance.internalName, operands, returnType.toNativeType());\r\n    return ret;\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    this.currentType = returnType;\r\n    return module.createBlock(null, [\r\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\r\n        module.createI32(numArguments)\r\n      ),\r\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\r\n    ], returnType.toNativeType()); // not necessarily wrapped\r\n  }\r\n\r\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(\r\n        expressions[i],\r\n        Type.void, // drop all\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(\r\n      expressions[numExpressions],\r\n      contextualType, // except last\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE\r\n    );\r\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\r\n    var target = this.resolver.resolveElementAccess(expression, this.currentFunction); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS: {\r\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            expression.expression.range, (<Class>target).internalName\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        let thisArg = this.compileExpression(\r\n          expression.expression,\r\n          (<Class>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        return this.compileCallDirect(indexedGet, [\r\n          expression.elementExpression\r\n        ], expression, thisArg);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\r\n    var declaration = expression.declaration;\r\n    var name = declaration.name;\r\n    var simpleName = (name.text.length\r\n      ? name.text\r\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\r\n    var currentFunction = this.currentFunction;\r\n    var prototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\r\n      declaration,\r\n      null,\r\n      DecoratorFlags.NONE\r\n    );\r\n    var flow = currentFunction.flow;\r\n    var instance = this.compileFunctionUsingTypeArguments(\r\n      prototype,\r\n      [],\r\n      flow.contextualTypeArguments,\r\n      flow,\r\n      declaration\r\n    );\r\n    if (!instance) return this.module.createUnreachable();\r\n    this.currentType = instance.signature.type; // TODO: get cached type?\r\n    // NOTE that, in order to make this work in every case, the function must be represented by a\r\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.createUnreachable()\r\n      : this.module.createI32(index);\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (!contextualType.classReference) {\r\n          this.currentType = options.usizeType;\r\n        }\r\n        return options.isWasm64\r\n          ? module.createI64(0)\r\n          : module.createI32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        let flow = currentFunction.flow;\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.getScopedLocal(\"this\");\r\n          if (scopedThis) {\r\n            this.currentType = scopedThis.type;\r\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\r\n          }\r\n        }\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.parent);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let thisType = (<Class>parent).type;\r\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // must be conditional because `this` could have been provided by a derived class\r\n              this.currentType = thisType;\r\n              return module.createTeeLocal(0,\r\n                this.makeConditionalAllocate(<Class>parent, expression)\r\n              );\r\n            }\r\n          }\r\n          this.currentType = thisType;\r\n          return module.createGetLocal(0, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let flow = currentFunction.flow;\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.getScopedLocal(\"this\");\r\n          if (scopedThis) {\r\n            let scopedThisClass = assert(scopedThis.type.classReference);\r\n            let base = scopedThisClass.base;\r\n            if (base) {\r\n              this.currentType = base.type;\r\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\r\n            }\r\n          }\r\n        }\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.parent);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let base = (<Class>parent).base;\r\n          if (base) {\r\n            let superType = base.type;\r\n            this.currentType = superType;\r\n            return module.createGetLocal(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // otherwise resolve\r\n    var target = this.resolver.resolveIdentifier( // reports\r\n      expression,\r\n      this.currentEnum || currentFunction\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let localType = (<Local>target).type;\r\n        assert(localType != Type.void);\r\n        if ((<Local>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\r\n        }\r\n        let localIndex = (<Local>target).index;\r\n        assert(localIndex >= 0);\r\n        this.currentType = localType;\r\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return this.module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!target.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return this.module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = this.resolver.resolveFunction(\r\n          <FunctionPrototype>target,\r\n          null,\r\n          currentFunction.flow.contextualTypeArguments\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.createI32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileInstanceOfExpression(\r\n    expression: InstanceOfExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\r\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\r\n    // possible in AS anyway.\r\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\r\n    var type = this.currentType;\r\n    var isType = this.resolver.resolveType(expression.isType);\r\n    this.currentType = Type.bool;\r\n    if (!isType) return module.createUnreachable();\r\n    return type.is(TypeFlags.NULLABLE) && !isType.is(TypeFlags.NULLABLE)\r\n      ? type.nonNullableType.isAssignableTo(isType)\r\n        ? module.createBinary( // not precomputeable\r\n            type.is(TypeFlags.LONG)\r\n              ? BinaryOp.NeI64\r\n              : BinaryOp.NeI32,\r\n            expr,\r\n            type.toNativeZero(module)\r\n          )\r\n        : module.createI32(0)\r\n      : module.createI32(type.isAssignableTo(isType, true) ? 1 : 0);\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    implicitNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitNegate);\r\n        let classType = contextualType.classReference;\r\n        if (\r\n          classType &&\r\n          classType.prototype == this.program.arrayPrototype\r\n        ) {\r\n          return this.compileArrayLiteral(\r\n            assert(classType.typeArguments)[0],\r\n            (<ArrayLiteralExpression>expression).elementExpressions,\r\n            false, // TODO: isConst?\r\n            expression\r\n          );\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.createF32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.createF64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        switch (contextualType.kind) {\r\n\r\n          // compile to contextualType if matching\r\n\r\n          case TypeKind.I8: {\r\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U8: {\r\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I16: {\r\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U16: {\r\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.BOOL: {\r\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.F32: {\r\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            break; // compiles to best fitting type below, being dropped\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n\r\n        // otherwise compile to best fitting native type\r\n\r\n        if (i64_is_i32(intValue)) {\r\n          this.currentType = Type.i32;\r\n          return module.createI32(i64_low(intValue));\r\n        } else if (i64_is_u32(intValue)) {\r\n          this.currentType = Type.u32;\r\n          return module.createI32(i64_low(intValue));\r\n        } else {\r\n          this.currentType = Type.i64;\r\n          return module.createI64(i64_low(intValue), i64_high(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitNegate);\r\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\r\n      }\r\n      case LiteralKind.OBJECT: {\r\n        assert(!implicitNegate);\r\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\r\n      }\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\r\n  ensureStaticString(stringValue: string): ExpressionRef {\r\n    var program = this.program;\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var stringSegments = this.stringSegments;\r\n    var needsGCHeader = program.hasGC;\r\n\r\n    var stringSegment: MemorySegment;\r\n    var stringOffset: I64;\r\n    if (!stringSegments.has(stringValue)) {\r\n      let stringLength = stringValue.length;\r\n      let stringSize = 4 + stringLength * 2;\r\n      let offset = 0;\r\n      let gcHeaderSize = program.gcHeaderSize;\r\n      if (needsGCHeader) {\r\n        stringSize += gcHeaderSize;\r\n        offset += gcHeaderSize;\r\n      }\r\n      let stringBuffer = new Uint8Array(stringSize);\r\n      stringBuffer[offset    ] =  stringLength         & 0xff;\r\n      stringBuffer[offset + 1] = (stringLength >>>  8) & 0xff;\r\n      stringBuffer[offset + 2] = (stringLength >>> 16) & 0xff;\r\n      stringBuffer[offset + 3] = (stringLength >>> 24) & 0xff;\r\n      for (let i = 0; i < stringLength; ++i) {\r\n        stringBuffer[offset + 4 + i * 2] =  stringValue.charCodeAt(i)        & 0xff;\r\n        stringBuffer[offset + 5 + i * 2] = (stringValue.charCodeAt(i) >>> 8) & 0xff;\r\n      }\r\n      stringSegment = this.addMemorySegment(stringBuffer, options.usizeType.byteSize);\r\n      stringSegments.set(stringValue, stringSegment);\r\n      if (needsGCHeader) {\r\n        stringOffset = i64_add(stringSegment.offset, i64_new(gcHeaderSize, 0));\r\n      } else {\r\n        stringOffset = stringSegment.offset;\r\n      }\r\n    } else {\r\n      stringSegment = <MemorySegment>stringSegments.get(stringValue);\r\n      stringOffset = stringSegment.offset;\r\n    }\r\n    if (program.typesLookup.has(\"string\")) {\r\n      let stringType = <Type>program.typesLookup.get(\"string\");\r\n      this.currentType = stringType;\r\n    } else {\r\n      this.currentType = options.usizeType;\r\n    }\r\n    if (options.isWasm64) {\r\n      return module.createI64(i64_low(stringOffset), i64_high(stringOffset));\r\n    } else {\r\n      assert(i64_is_i32(stringOffset));\r\n      return module.createI32(i64_low(stringOffset));\r\n    }\r\n  }\r\n\r\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\r\n    return this.ensureStaticString(expression.value);\r\n  }\r\n\r\n  /** Ensures that the specified array exists in static memory and returns a pointer to it. */\r\n  ensureStaticArray(elementType: Type, values: ExpressionRef[]): ExpressionRef {\r\n    var length = values.length;\r\n    var byteSize = elementType.byteSize;\r\n    var byteLength = length * byteSize;\r\n    var usizeTypeSize = this.options.usizeType.byteSize;\r\n\r\n    // determine the size of the Array header\r\n    var arrayHeaderSize = (usizeTypeSize + 4 + 7) & ~7; // .buffer_ + .length_ + alignment\r\n    var arrayTotalSize = arrayHeaderSize;\r\n\r\n    // determine the size of the ArrayBuffer\r\n    var bufferHeaderSize = (4 + 7) & ~7; // .byteLength + alignment\r\n    var bufferTotalSize = 1 << (32 - clz(byteLength + bufferHeaderSize - 1)); // see internals\r\n\r\n    var program = this.program;\r\n    var needsGC = program.hasGC;\r\n    var gcHeaderSize = program.gcHeaderSize;\r\n\r\n    var offset = 0;\r\n    if (needsGC) {\r\n      offset += gcHeaderSize; // start writing after GC header\r\n      arrayTotalSize += gcHeaderSize;\r\n      bufferTotalSize += gcHeaderSize;\r\n    }\r\n\r\n    // create a compound segment holding both the the Array header and the ArrayBuffer\r\n    var buffer = new Uint8Array(arrayHeaderSize + bufferTotalSize);\r\n    var segment = this.addMemorySegment(buffer);\r\n\r\n    // write the Array header first\r\n    if (usizeTypeSize == 8) {\r\n      writeI64(i64_add(segment.offset, i64_new(arrayHeaderSize)), buffer, offset); // .buffer_\r\n      offset += 8;\r\n    } else {\r\n      assert(i64_is_u32(segment.offset));\r\n      writeI32(i64_low(segment.offset) + arrayHeaderSize, buffer,  offset); // .buffer_\r\n      offset += 4;\r\n    }\r\n    writeI32(length, buffer, offset); // .length_\r\n    offset += 4;\r\n    assert(((offset + 7) & ~7) == arrayTotalSize); // incl. GC header if applicable\r\n\r\n    // append the ArrayBuffer\r\n    offset = arrayTotalSize;\r\n    if (needsGC) offset += gcHeaderSize;\r\n    writeI32(byteLength, buffer, offset); // .byteLength\r\n    offset += bufferHeaderSize; // align\r\n    var nativeType = elementType.toNativeType();\r\n    switch (nativeType) {\r\n      case NativeType.I32: {\r\n        switch (byteSize) {\r\n          case 1: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI8(getConstValueI32(value), buffer, offset);\r\n              offset += 1;\r\n            }\r\n            break;\r\n          }\r\n          case 2: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI16(getConstValueI32(value), buffer, offset);\r\n              offset += 2;\r\n            }\r\n            break;\r\n          }\r\n          case 4: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI32(getConstValueI32(value), buffer, offset);\r\n              offset += 4;\r\n            }\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buffer, offset);\r\n          offset += 8;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF32(getConstValueF32(value), buffer, offset);\r\n          offset += 4;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF64(getConstValueF64(value), buffer, offset);\r\n          offset += 8;\r\n        }\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    assert(offset <= arrayTotalSize + bufferTotalSize); // might have empty trailing space\r\n\r\n    var arrayPrototype = this.program.arrayPrototype;\r\n    if (arrayPrototype) {\r\n      let arrayInstance = this.resolver.resolveClass(arrayPrototype, [ elementType ], null, ReportMode.REPORT);\r\n      if (!arrayInstance) {\r\n        this.currentType = this.options.usizeType;\r\n        return this.module.createUnreachable();\r\n      }\r\n      this.currentType = arrayInstance.type;\r\n    } else {\r\n      this.currentType = this.options.usizeType;\r\n    }\r\n\r\n    // return a pointer at the array header (skip GC header if present)\r\n    var address = segment.offset;\r\n    if (needsGC) address = i64_add(address, i64_new(gcHeaderSize, 0));\r\n    if (usizeTypeSize == 8) {\r\n      return this.module.createI64(i64_low(address), i64_high(address));\r\n    } else {\r\n      assert(i64_is_u32(address));\r\n      return this.module.createI32(i64_low(address));\r\n    }\r\n  }\r\n\r\n  compileArrayLiteral(\r\n    elementType: Type,\r\n    expressions: (Expression | null)[],\r\n    isConst: bool,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // find out whether all elements are constant (array is static)\r\n    var length = expressions.length;\r\n    var values = new Array<ExpressionRef>(length);\r\n    var nativeElementType = elementType.toNativeType();\r\n    var isStatic = true;\r\n    for (let i = 0; i < length; ++i) {\r\n      values[i] = expressions[i]\r\n        ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n        : elementType.toNativeZero(module);\r\n      if (isStatic) {\r\n        let expr = module.precomputeExpression(values[i]);\r\n        if (getExpressionId(expr) == ExpressionId.Const) {\r\n          assert(getExpressionType(expr) == nativeElementType);\r\n        } else {\r\n          if (isConst) {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              reportNode.range\r\n            );\r\n          }\r\n          isStatic = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    // make a static array if possible\r\n    if (isStatic) return this.ensureStaticArray(elementType, values);\r\n\r\n    // otherwise obtain the array type\r\n    var arrayPrototype = assert(this.program.arrayPrototype);\r\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\r\n    var arrayInstance = this.resolver.resolveClass(<ClassPrototype>arrayPrototype, [ elementType ]);\r\n    if (!arrayInstance) return module.createUnreachable();\r\n    var arrayType = arrayInstance.type;\r\n\r\n    // and compile an explicit instantiation\r\n    this.currentType = arrayType;\r\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\r\n    if (!setter) {\r\n      this.error(\r\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n        reportNode.range, arrayInstance.internalName\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var nativeArrayType = arrayType.toNativeType();\r\n    var currentFunction = this.currentFunction;\r\n    var tempLocal = currentFunction.getTempLocal(arrayType, false);\r\n    var stmts = new Array<ExpressionRef>(2 + length);\r\n    var index = 0;\r\n    stmts[index++] = module.createSetLocal(tempLocal.index,\r\n      this.makeCallDirect(assert(arrayInstance.constructorInstance), [\r\n        module.createI32(0), // this\r\n        module.createI32(length)\r\n      ])\r\n    );\r\n    for (let i = 0; i < length; ++i) {\r\n      stmts[index++] = this.makeCallDirect(setter, [\r\n        module.createGetLocal(tempLocal.index, nativeArrayType), // this\r\n        module.createI32(i),\r\n        values[i]\r\n      ]);\r\n    }\r\n    assert(index + 1 == stmts.length);\r\n    stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\r\n    currentFunction.freeTempLocal(tempLocal);\r\n    this.currentType = arrayType;\r\n    return module.createBlock(null, stmts, nativeArrayType);\r\n  }\r\n\r\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // contextual type must be a class\r\n    var classReference = contextualType.classReference;\r\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, \"<object>\", contextualType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // if present, check that the constructor is compatible with object literals\r\n    var ctor = classReference.constructorInstance;\r\n    if (ctor) {\r\n      if (ctor.signature.requiredParameters) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PRIVATE)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PROTECTED)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // check and compile field values\r\n    var names = expression.names;\r\n    var numNames = names.length;\r\n    var values = expression.values;\r\n    var members = classReference.members;\r\n    var hasErrors = false;\r\n    var exprs = new Array<ExpressionRef>(numNames + 2);\r\n    var tempLocal = this.currentFunction.getTempLocal(this.options.usizeType);\r\n    assert(numNames == values.length);\r\n    for (let i = 0, k = numNames; i < k; ++i) {\r\n      let member = members ? members.get(names[i].text) : null;\r\n      if (!member || member.kind != ElementKind.FIELD) {\r\n        this.error(\r\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n          names[i].range, names[i].text, classReference.toString()\r\n        );\r\n        hasErrors = true;\r\n        continue;\r\n      }\r\n      let type = (<Field>member).type;\r\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\r\n        type.byteSize,\r\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\r\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\r\n        type.toNativeType(),\r\n        (<Field>member).memoryOffset\r\n      );\r\n    }\r\n    this.currentType = classReference.type.nonNullableType;\r\n    if (hasErrors) return module.createUnreachable();\r\n\r\n    // allocate a new instance first and assign 'this' to the temp. local\r\n    exprs[0] = module.createSetLocal(\r\n      tempLocal.index,\r\n      compileAllocate(this, classReference, expression)\r\n    );\r\n\r\n    // once all field values have been set, return 'this'\r\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\r\n\r\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\r\n  }\r\n\r\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // obtain the class being instantiated\r\n    var target = this.resolver.resolveExpression( // reports\r\n      expression.expression,\r\n      currentFunction\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        expression.expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>target;\r\n    var classInstance: Class | null = null;\r\n    var typeArguments = expression.typeArguments;\r\n    var classReference: Class | null;\r\n    if (\r\n      !typeArguments &&\r\n      (classReference = contextualType.classReference) !== null &&\r\n      classReference.is(CommonFlags.GENERIC)\r\n    ) {\r\n      classInstance = this.resolver.resolveClass(\r\n        classPrototype,\r\n        classReference.typeArguments,\r\n        currentFunction.flow.contextualTypeArguments\r\n      );\r\n    } else {\r\n      classInstance = this.resolver.resolveClassInclTypeArguments(\r\n        classPrototype,\r\n        typeArguments,\r\n        currentFunction.flow.contextualTypeArguments,\r\n        expression\r\n      );\r\n    }\r\n    if (!classInstance) return module.createUnreachable();\r\n\r\n    var expr: ExpressionRef;\r\n\r\n    // traverse to the top-most visible constructor\r\n    var currentClassInstance: Class | null = classInstance;\r\n    var constructorInstance: Function | null = null;\r\n    do {\r\n      constructorInstance = currentClassInstance.constructorInstance;\r\n      if (constructorInstance) break; // TODO: check visibility\r\n    } while (currentClassInstance = currentClassInstance.base);\r\n\r\n    // if a constructor is present, call it with a zero `this`\r\n    if (constructorInstance) {\r\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\r\n        options.usizeType.toNativeZero(module)\r\n      );\r\n\r\n    // otherwise simply allocate a new instance and initialize its fields\r\n    } else {\r\n      expr = this.makeAllocate(classInstance, expression);\r\n    }\r\n\r\n    this.currentType = classInstance.type;\r\n    return expr;\r\n  }\r\n\r\n  compileParenthesizedExpression(\r\n    expression: ParenthesizedExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    // does not change types, just order\r\n    return this.compileExpression(\r\n      expression.expression,\r\n      contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var target = this.resolver.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: { // static property\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        let parent = (<EnumValue>target).parent;\r\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\r\n        if (!this.compileEnum(<Enum>parent)) {\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        let thisExpression = assert(this.resolver.currentThisExpression);\r\n        assert((<Field>target).memoryOffset >= 0);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        this.currentType = (<Field>target).type;\r\n        return module.createLoad(\r\n          (<Field>target).type.byteSize,\r\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          thisExpr,\r\n          (<Field>target).type.toNativeType(),\r\n          (<Field>target).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property (here: getter)\r\n        let prototype = (<Property>target).getterPrototype;\r\n        if (prototype) {\r\n          let instance = this.resolver.resolveFunction(prototype, null);\r\n          if (!instance) return module.createUnreachable();\r\n          let signature = instance.signature;\r\n          if (!this.checkCallSignature( // reports\r\n            signature,\r\n            0,\r\n            instance.is(CommonFlags.INSTANCE),\r\n            propertyAccess\r\n          )) {\r\n            return module.createUnreachable();\r\n          }\r\n          let inline = (instance.decoratorFlags & DecoratorFlags.INLINE) != 0;\r\n          if (instance.is(CommonFlags.INSTANCE)) {\r\n            let parent = assert(instance.parent);\r\n            assert(parent.kind == ElementKind.CLASS);\r\n            let thisExpression = assert(this.resolver.currentThisExpression);\r\n            let thisExpr = this.compileExpressionRetainType(\r\n              thisExpression,\r\n              this.options.usizeType,\r\n              WrapMode.NONE\r\n            );\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess, thisExpr, inline);\r\n          } else {\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess, 0, inline);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.range, (<Property>target).simpleName, (<Property>target).parent.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n    var currentFunction = this.currentFunction;\r\n    var parentFlow = currentFunction.flow;\r\n\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary branches if the condition is constant\r\n      let condExprPrecomp = this.module.precomputeExpression(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        return getConstValueI32(condExprPrecomp)\r\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\r\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    var ifThenFlow = parentFlow.fork();\r\n    currentFunction.flow = ifThenFlow;\r\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\r\n    var ifThenType = this.currentType;\r\n    ifThenFlow.free();\r\n\r\n    var ifElseFlow = parentFlow.fork();\r\n    currentFunction.flow = ifElseFlow;\r\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n    var ifElseType = this.currentType;\r\n    currentFunction.flow = ifElseFlow.free();\r\n\r\n    parentFlow.inheritMutual(ifThenFlow, ifElseFlow);\r\n\r\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\r\n    if (!commonType) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, ifThenType.toString(), ifElseType.toString()\r\n      );\r\n      this.currentType = contextualType;\r\n      return this.module.createUnreachable();\r\n    }\r\n    ifThenExpr = this.convertExpression(\r\n      ifThenExpr,\r\n      ifThenType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifThen\r\n    );\r\n    ifElseExpr = this.convertExpression(\r\n      ifElseExpr,\r\n      ifElseType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifElse\r\n    );\r\n    this.currentType = commonType;\r\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\r\n  }\r\n\r\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression( // reports\r\n      expression.operand,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n    // shortcut if compiling the getter already failed\r\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\r\n    var currentType = this.currentType;\r\n\r\n    var op: BinaryOp;\r\n    var nativeType: NativeType;\r\n    var nativeOne: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n\r\n        // TODO: check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            op = BinaryOp.AddI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.AddI64\r\n              : BinaryOp.AddI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.AddI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.AddF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.AddF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n\r\n        // TODO: check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            op = BinaryOp.SubI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.SubI64\r\n              : BinaryOp.SubI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.SubI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.SubF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.SubF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // simplify if dropped anyway\r\n    if (contextualType == Type.void) {\r\n      return this.compileAssignmentWithValue(expression.operand,\r\n        module.createBinary(op,\r\n          getValue,\r\n          nativeOne\r\n        ),\r\n        false\r\n      );\r\n    }\r\n\r\n    // otherwise use a temp local for the intermediate value (always possibly overflows)\r\n    var tempLocal = currentFunction.getTempLocal(currentType, false);\r\n    var setValue = this.compileAssignmentWithValue(expression.operand,\r\n      module.createBinary(op,\r\n        this.module.createGetLocal(tempLocal.index, nativeType),\r\n        nativeOne\r\n      ),\r\n      false\r\n    );\r\n    this.currentType = assert(tempLocal).type;\r\n    currentFunction.freeTempLocal(<Local>tempLocal);\r\n\r\n    var localIndex = (<Local>tempLocal).index;\r\n    return module.createBlock(null, [\r\n      module.createSetLocal(localIndex, getValue),\r\n      setValue,\r\n      module.createGetLocal(localIndex, nativeType)\r\n    ], nativeType); // result of 'x++' / 'x--' might overflow\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        // nop\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\r\n          // compileExpression normally does this:\r\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n          break;\r\n        }\r\n\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              this.currentType.toNativeZero(module),\r\n              expr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createUnary(UnaryOp.NegF32, expr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createUnary(UnaryOp.NegF64, expr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          // allow '!' for references even without an overload\r\n        }\r\n\r\n        expr = this.makeIsFalseish(expr, this.currentType);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        } else {\r\n          expr = this.convertExpression(\r\n            expr,\r\n            this.currentType, this.currentType.intType,\r\n            ConversionKind.IMPLICIT, WrapMode.NONE,\r\n            expression.operand\r\n          );\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              this.currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\r\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFunction.flow;\r\n    switch (type.kind) {\r\n      case TypeKind.I8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(24)\r\n                ),\r\n                module.createI32(24)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.I16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(16)\r\n                ),\r\n                module.createI32(16)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xffff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.BOOL: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0x1)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\r\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return module.createUnary(UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createUnary(UnaryOp.EqzI64, expr);\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\r\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return expr;\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return type.size == 64\r\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\r\n          : expr;\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(0);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an allocation expression for an instance of the specified class. */\r\n  makeAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n\r\n    // allocate the necessary memory and tee the pointer to a temp. local for reuse\r\n    var tempLocal = currentFunction.getTempLocal(classInstance.type, false);\r\n    var initializers = new Array<ExpressionRef>();\r\n    initializers.push(\r\n      module.createSetLocal(tempLocal.index,\r\n        compileAllocate(this, classInstance, reportNode)\r\n      )\r\n    );\r\n\r\n    // apply field initializers\r\n    if (classInstance.members) {\r\n      for (let member of classInstance.members.values()) {\r\n        if (member.kind == ElementKind.FIELD) {\r\n          let field = <Field>member;\r\n          let fieldType = field.type;\r\n          let nativeFieldType = fieldType.toNativeType();\r\n          let fieldDeclaration = field.prototype.declaration;\r\n          assert(!field.isAny(CommonFlags.CONST));\r\n          if (fieldDeclaration.initializer) { // use initializer\r\n            initializers.push(module.createStore(fieldType.byteSize,\r\n              module.createGetLocal(tempLocal.index, nativeSizeType),\r\n              this.compileExpression( // reports\r\n                fieldDeclaration.initializer,\r\n                fieldType,\r\n                ConversionKind.IMPLICIT,\r\n                WrapMode.NONE\r\n              ),\r\n              nativeFieldType,\r\n              field.memoryOffset\r\n            ));\r\n          } else { // initialize with zero\r\n            // TODO: might be unnecessary if the ctor initializes the field\r\n            let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\r\n            initializers.push(module.createStore(fieldType.byteSize,\r\n              module.createGetLocal(tempLocal.index, nativeSizeType),\r\n              parameterIndex >= 0 // initialized via parameter\r\n                ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\r\n                : fieldType.toNativeZero(module),\r\n                nativeFieldType,\r\n              field.memoryOffset\r\n            ));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // return `this`\r\n    initializers.push(\r\n      module.createGetLocal(tempLocal.index, nativeSizeType)\r\n    );\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n    this.currentType = classInstance.type;\r\n    return module.createBlock(null, initializers, nativeSizeType);\r\n  }\r\n\r\n  /** Makes a conditional allocation expression inside of the constructor of the specified class. */\r\n  makeConditionalAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\r\n    // requires that `this` is the first local\r\n    var module = this.module;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    this.currentType = classInstance.type;\r\n    return module.createIf(\r\n      nativeSizeType == NativeType.I64\r\n        ? module.createBinary(\r\n            BinaryOp.NeI64,\r\n            module.createGetLocal(0, NativeType.I64),\r\n            module.createI64(0)\r\n          )\r\n        : module.createGetLocal(0, NativeType.I32),\r\n      module.createGetLocal(0, nativeSizeType),\r\n      module.createTeeLocal(0,\r\n        this.makeAllocate(classInstance, reportNode)\r\n      )\r\n    );\r\n  }\r\n\r\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\r\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\r\n    var currentFunction = this.currentFunction;\r\n    var source = range.source;\r\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\r\n    range.debugInfoRef = expr;\r\n    currentFunction.debugLocations.push(range);\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\nfunction mangleImportName(\r\n  element: Element,\r\n  declaration: DeclarationStatement,\r\n  parentElement: Element | null = null\r\n): void {\r\n  mangleImportName_moduleName = parentElement ? parentElement.simpleName : declaration.range.source.simplePath;\r\n  mangleImportName_elementName = element.simpleName;\r\n\r\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\r\n\r\n  var program = element.program;\r\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\r\n  var args = decorator.arguments;\r\n  if (args && args.length) {\r\n    let arg = args[0];\r\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n      if (args.length >= 2) {\r\n        arg = args[1];\r\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n          mangleImportName_moduleName = mangleImportName_elementName;\r\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n          if (args.length > 2) {\r\n            program.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              decorator.range, \"2\", args.length.toString()\r\n            );\r\n          }\r\n        } else {\r\n          program.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            arg.range\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      program.error(\r\n        DiagnosticCode.String_literal_expected,\r\n        arg.range\r\n      );\r\n    }\r\n  } else {\r\n    program.error(\r\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n      decorator.range, \"1\", \"0\"\r\n    );\r\n  }\r\n}\r\n\r\nvar mangleImportName_moduleName: string;\r\nvar mangleImportName_elementName: string;\r\n","/**\r\n * Generated from diagnosticsMessages.json. Do not edit.\r\n * @module diagnostics\r\n *//***/\r\n\r\n/* tslint:disable:max-line-length */\r\n\r\n/** Enum of available diagnostic codes. */\r\nexport enum DiagnosticCode {\r\n  Operation_not_supported = 100,\r\n  Operation_is_unsafe = 101,\r\n  User_defined_0 = 102,\r\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\r\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\r\n  Type_0_cannot_be_changed_to_type_1 = 202,\r\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\r\n  Basic_type_0_cannot_be_nullable = 204,\r\n  Cannot_export_a_mutable_global = 205,\r\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\r\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\r\n  Unmanaged_classes_cannot_implement_interfaces = 208,\r\n  Invalid_regular_expression_flags = 209,\r\n  Implementation_0_must_match_the_signature_1 = 210,\r\n  Class_0_is_sealed_and_cannot_be_extended = 211,\r\n  Decorator_0_is_not_valid_here = 212,\r\n  Duplicate_decorator = 213,\r\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\r\n  Optional_parameter_must_have_an_initializer = 215,\r\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\r\n  Function_0_cannot_be_inlined_into_itself = 217,\r\n  Unterminated_string_literal = 1002,\r\n  Identifier_expected = 1003,\r\n  _0_expected = 1005,\r\n  A_file_cannot_have_a_reference_to_itself = 1006,\r\n  Trailing_comma_not_allowed = 1009,\r\n  Unexpected_token = 1012,\r\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\r\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\r\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\r\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\r\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\r\n  _0_modifier_cannot_be_used_here = 1042,\r\n  A_rest_parameter_cannot_be_optional = 1047,\r\n  A_rest_parameter_cannot_have_an_initializer = 1048,\r\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\r\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\r\n  A_get_accessor_cannot_have_parameters = 1054,\r\n  Enum_member_must_have_initializer = 1061,\r\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\r\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\r\n  An_accessor_cannot_have_type_parameters = 1094,\r\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\r\n  Type_parameter_list_cannot_be_empty = 1098,\r\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\r\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\r\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\r\n  Expression_expected = 1109,\r\n  Type_expected = 1110,\r\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\r\n  Duplicate_label_0 = 1114,\r\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\r\n  Digit_expected = 1124,\r\n  Hexadecimal_digit_expected = 1125,\r\n  Unexpected_end_of_text = 1126,\r\n  Invalid_character = 1127,\r\n  _case_or_default_expected = 1130,\r\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\r\n  Type_argument_expected = 1140,\r\n  String_literal_expected = 1141,\r\n  Line_break_not_permitted_here = 1142,\r\n  Declaration_expected = 1146,\r\n  _const_declarations_must_be_initialized = 1155,\r\n  Unterminated_regular_expression_literal = 1161,\r\n  Interface_declaration_cannot_have_implements_clause = 1176,\r\n  Binary_digit_expected = 1177,\r\n  Octal_digit_expected = 1178,\r\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\r\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\r\n  Unterminated_Unicode_escape_sequence = 1199,\r\n  Decorators_are_not_valid_here = 1206,\r\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\r\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\r\n  A_class_may_only_extend_another_class = 1311,\r\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\r\n  Duplicate_identifier_0 = 2300,\r\n  Cannot_find_name_0 = 2304,\r\n  Module_0_has_no_exported_member_1 = 2305,\r\n  Generic_type_0_requires_1_type_argument_s = 2314,\r\n  Type_0_is_not_generic = 2315,\r\n  Type_0_is_not_assignable_to_type_1 = 2322,\r\n  Index_signature_is_missing_in_type_0 = 2329,\r\n  _this_cannot_be_referenced_in_current_location = 2332,\r\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\r\n  Property_0_does_not_exist_on_type_1 = 2339,\r\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\r\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\r\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\r\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\r\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\r\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\r\n  _get_and_set_accessor_must_have_the_same_type = 2380,\r\n  Constructor_implementation_is_missing = 2390,\r\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\r\n  Multiple_constructor_implementations_are_not_allowed = 2392,\r\n  Duplicate_function_implementation = 2393,\r\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\r\n  Type_0_has_no_property_1 = 2460,\r\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\r\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\r\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\r\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\r\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\r\n  Index_signature_in_type_0_only_permits_reading = 2542,\r\n  Expected_0_arguments_but_got_1 = 2554,\r\n  Expected_at_least_0_arguments_but_got_1 = 2555,\r\n  Expected_0_type_arguments_but_got_1 = 2558,\r\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\r\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\r\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\r\n  Namespace_0_has_no_exported_member_1 = 2694,\r\n  File_0_not_found = 6054,\r\n  Numeric_separators_are_not_allowed_here = 6188,\r\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189\r\n}\r\n\r\n/** Translates a diagnostic code to its respective string. */\r\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\r\n  switch (code) {\r\n    case 100: return \"Operation not supported.\";\r\n    case 101: return \"Operation is unsafe.\";\r\n    case 102: return \"User-defined: {0}\";\r\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\r\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\r\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\r\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\r\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\r\n    case 205: return \"Cannot export a mutable global.\";\r\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\r\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\r\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\r\n    case 209: return \"Invalid regular expression flags.\";\r\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\r\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\r\n    case 212: return \"Decorator '{0}' is not valid here.\";\r\n    case 213: return \"Duplicate decorator.\";\r\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\r\n    case 215: return \"Optional parameter must have an initializer.\";\r\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\r\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\r\n    case 1002: return \"Unterminated string literal.\";\r\n    case 1003: return \"Identifier expected.\";\r\n    case 1005: return \"'{0}' expected.\";\r\n    case 1006: return \"A file cannot have a reference to itself.\";\r\n    case 1009: return \"Trailing comma not allowed.\";\r\n    case 1012: return \"Unexpected token.\";\r\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\r\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\r\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\r\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\r\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\r\n    case 1042: return \"'{0}' modifier cannot be used here.\";\r\n    case 1047: return \"A rest parameter cannot be optional.\";\r\n    case 1048: return \"A rest parameter cannot have an initializer.\";\r\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\r\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\r\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\r\n    case 1061: return \"Enum member must have initializer.\";\r\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\r\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\r\n    case 1094: return \"An accessor cannot have type parameters.\";\r\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\r\n    case 1098: return \"Type parameter list cannot be empty.\";\r\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\r\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\r\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\r\n    case 1109: return \"Expression expected.\";\r\n    case 1110: return \"Type expected.\";\r\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\r\n    case 1114: return \"Duplicate label '{0}'.\";\r\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\r\n    case 1124: return \"Digit expected.\";\r\n    case 1125: return \"Hexadecimal digit expected.\";\r\n    case 1126: return \"Unexpected end of text.\";\r\n    case 1127: return \"Invalid character.\";\r\n    case 1130: return \"'case' or 'default' expected.\";\r\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\r\n    case 1140: return \"Type argument expected.\";\r\n    case 1141: return \"String literal expected.\";\r\n    case 1142: return \"Line break not permitted here.\";\r\n    case 1146: return \"Declaration expected.\";\r\n    case 1155: return \"'const' declarations must be initialized.\";\r\n    case 1161: return \"Unterminated regular expression literal.\";\r\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\r\n    case 1177: return \"Binary digit expected.\";\r\n    case 1178: return \"Octal digit expected.\";\r\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\r\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\r\n    case 1199: return \"Unterminated Unicode escape sequence.\";\r\n    case 1206: return \"Decorators are not valid here.\";\r\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\r\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\r\n    case 1311: return \"A class may only extend another class.\";\r\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\r\n    case 2300: return \"Duplicate identifier '{0}'.\";\r\n    case 2304: return \"Cannot find name '{0}'.\";\r\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\r\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\r\n    case 2315: return \"Type '{0}' is not generic.\";\r\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\r\n    case 2329: return \"Index signature is missing in type '{0}'.\";\r\n    case 2332: return \"'this' cannot be referenced in current location.\";\r\n    case 2335: return \"'super' can only be referenced in a derived class.\";\r\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\r\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\r\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\r\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\r\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\r\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\r\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\r\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\r\n    case 2390: return \"Constructor implementation is missing.\";\r\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\r\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\r\n    case 2393: return \"Duplicate function implementation.\";\r\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\r\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\r\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\r\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\r\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\r\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\r\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\r\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\r\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\r\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\r\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\r\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\r\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\r\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\r\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\r\n    case 6054: return \"File '{0}' not found.\";\r\n    case 6188: return \"Numeric separators are not allowed here.\";\r\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\r\n    default: return \"\";\r\n  }\r\n}\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\n/// <reference path=\"./node.d.ts\" />\r\n\r\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\r\nimport \"../../../std/portable/index\";\r\nimport \"./float\";\r\nimport \"./i64\";\r\n\r\nimport { Module } from \"../../module\";\r\n\r\nModule.prototype.toText = function(this: Module) {\r\n  return new binaryen.Module(this.ref).emitText();\r\n};\r\n\r\nModule.prototype.toAsmjs = function(this: Module) {\r\n  return new binaryen.Module(this.ref).emitAsmjs();\r\n};\r\n","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\nglobal.binaryen = binaryen;\r\n\r\nfor (var key in binaryen) {\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\r\n}\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.__memory_allocate = binaryen._malloc;\r\nglobal.__memory_free = binaryen._free;\r\nglobal.__memory_copy = binaryen._memmove;\r\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\r\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__15__;","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nglobalScope.ASC_TARGET = 0;\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value: 127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value: 32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 1, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\r\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\r\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"ctz\"] = function ctz(value) {\r\n  var c = Math.clz32(value & -value);\r\n  return value ? 31 - c : c;\r\n};\r\n\r\nglobalScope[\"popcnt\"] = function popcnt(value) {\r\n  value -= value >>> 1 & 0x55555555;\r\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\r\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\r\n};\r\n\r\nglobalScope[\"rotl\"] = function rotl(value, shift) {\r\n  shift &= 31;\r\n  return (value << shift) | (value >>> (32 - shift));\r\n};\r\n\r\nglobalScope[\"rotr\"] = function rotr(value, shift) {\r\n  shift &= 31;\r\n  return (value >>> shift) | (value << (32 - shift));\r\n};\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\n// Adopt code from https://github.com/rfk/wasm-polyfill\r\nglobalScope[\"nearest\"] = function nearest(value) {\r\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\r\n    return 2.0 * Math.round(value * 0.5);\r\n  }\r\n  return Math.round(value);\r\n};\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"copysign\"] = function copysign(x, y) {\r\n  return Math.abs(x) * Math.sign(y);\r\n};\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\r\n  return parseInt(str, undefined) | 0;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isReference\"] = function isClass(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\n\r\nglobalScope[\"unchecked\"] = function(expr) {\r\n  return expr;\r\n};\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nglobalScope[\"JSMath\"] = Math;\r\n\r\nglobalScope[\"memory\"] = (() => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n  return {\r\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\r\n      if (!(size >>>= 0)) return 0;\r\n      if (HEAP_OFFSET + size > HEAP.length) {\r\n        var oldHeap = HEAP;\r\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n        HEAP.set(oldHeap);\r\n      }\r\n      var ptr = HEAP_OFFSET;\r\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n      return ptr;\r\n    },\r\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\r\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\r\n      HEAP.copyWithin(dest, src, src + size);\r\n    }\r\n  };\r\n})();\r\n\r\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\r\n  HEAP[ptr + (offset | 0)] = value;\r\n};\r\n\r\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\r\n  return HEAP[ptr + (offset | 0)];\r\n};\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_zero = Long.ZERO;\r\n\r\nglobal.i64_one = Long.ONE;\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_eq = function(left, right) {\r\n  return left.eq(right);\r\n};\r\n\r\nglobal.i64_ne = function(left, right) {\r\n  return left.ne(right);\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\n import {\r\n  Compiler,\r\n  ConversionKind,\r\n  WrapMode\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI64High,\r\n  getConstValueI64Low,\r\n  getConstValueI32\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  FunctionPrototype,\r\n  Class,\r\n  Field,\r\n  OperatorKind,\r\n  FlowFlags,\r\n  Global,\r\n  DecoratorFlags\r\n} from \"./program\";\r\n\r\nimport {\r\n  ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  var arg0: ExpressionRef,\r\n      arg1: ExpressionRef,\r\n      arg2: ExpressionRef,\r\n      ret: ExpressionRef;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // types\r\n\r\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.SIGNED)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      if (classType) {\r\n        let stringInstance = compiler.program.stringInstance;\r\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\r\n      }\r\n      return module.createI32(0);\r\n    }\r\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      return classType !== null && classType.lookupOverload(OperatorKind.INDEXED_GET) !== null\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isDefined\": { // isDefined(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let element = compiler.resolver.resolveExpression(operands[0], compiler.currentFunction, ReportMode.SWALLOW);\r\n      return module.createI32(element ? 1 : 0);\r\n    }\r\n    case \"isConstant\": { // isConstant(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      compiler.currentType = Type.bool;\r\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\r\n    }\r\n    case \"isManaged\": { // isManaged<T>() -> bool\r\n      if (!compiler.program.hasGC) {\r\n        compiler.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      return classType !== null && !classType.hasDecorator(DecoratorFlags.UNMANAGED)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n\r\n    // math\r\n\r\n    case \"clz\": { // clz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ClzI64\r\n              : UnaryOp.ClzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ctz\": { // ctz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.CtzI64\r\n              : UnaryOp.CtzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.PopcntI64\r\n              : UnaryOp.PopcntI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\r\n            compiler.currentType\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret; // possibly overflows\r\n    }\r\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\r\n            compiler.currentType\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret; // possibly overflowws\r\n    }\r\n    case \"abs\": { // abs<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          // possibly overflows, e.g. abs<i8>(-128) == 128\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\r\n          ret = module.createSelect( // x > 0 ? x : 0-x\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI32, // ifFalse\r\n              module.createI32(0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32)\r\n            ),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              module.createI32(0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              compiler.options.usizeType.toNativeZero(module),\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            ),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\r\n              compiler.options.usizeType.toNativeZero(module)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI64,\r\n              module.createI64(0, 0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n            ),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n              module.createI64(0, 0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"max\": { // max<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"min\": { // min<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ceil\": { // ceil<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"floor\": { // floor<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"nearest\": { // nearest<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\r\n      if (operands.length != 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      switch (typeArguments[0].kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            compiler.currentType = typeArguments[0];\r\n            return module.createUnreachable();\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          arg0 = compiler.compileExpression(\r\n            operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: { // small integers and void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return ret;\r\n    }\r\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        // case TypeKind.VOID:\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"trunc\": { // trunc<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments && typeArguments.length) {\r\n        compiler.currentType = typeArguments[0];\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // memory access\r\n\r\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return module.createLoad(\r\n        typeArguments[0].byteSize,\r\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > typeArguments[0].size\r\n          ? (compiler.currentType = contextualType).toNativeType()\r\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\r\n        offset\r\n      );\r\n    }\r\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (operands.length < 2 || operands.length > 3) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n          : ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let type: Type;\r\n      if (\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        (\r\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\r\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\r\n    }\r\n    case \"sizeof\": { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(byteSize);\r\n        } else {\r\n          ret = module.createI64(byteSize, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(byteSize, 0);\r\n        } else {\r\n          ret = module.createI32(byteSize);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"alignof\": { // alignof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      let alignLog2: i32;\r\n      switch (byteSize) {\r\n        case 1: { alignLog2 = 0; break; }\r\n        case 2: { alignLog2 = 1; break; }\r\n        case 4: { alignLog2 = 2; break; }\r\n        case 8: { alignLog2 = 3; break; }\r\n        default: { assert(false); return module.createUnreachable(); }\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(alignLog2);\r\n        } else {\r\n          ret = module.createI64(alignLog2, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(alignLog2, 0);\r\n        } else {\r\n          ret = module.createI32(alignLog2);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length > 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let classType = typeArguments[0].classReference;\r\n      if (!classType) {\r\n        compiler.error( // TODO: better error\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.createI32(offset);\r\n        } else {\r\n          return module.createI64(offset);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.createI64(offset);\r\n        } else {\r\n          return module.createI32(offset);\r\n        }\r\n      }\r\n    }\r\n\r\n    // control flow\r\n\r\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (operands.length != 3) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      }\r\n      let type = compiler.currentType;\r\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg2 = compiler.makeIsTrueish(\r\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\r\n        compiler.currentType\r\n      );\r\n      compiler.currentType = type;\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        default: { // any other value type\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unreachable\": { // unreachable() -> *\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // host operations\r\n\r\n    case \"memory.size\": { // memory.size() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.CurrentMemory);\r\n    }\r\n    case \"memory.grow\": { // memory.grow(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        arg0 = module.createUnreachable();\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\r\n    }\r\n    // see: https://github.com/WebAssembly/bulk-memory-operations\r\n    case \"memory.copy\": { // memory.copy(dest: usize, src: usize: n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n    case \"memory.fill\": { // memory.fill(dest: usize, value: u8, n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        Type.u32,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n\r\n    // other\r\n\r\n    case \"changetype\": { // changetype<T!>(value: *) -> T\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpressionRetainType(\r\n        operands[0],\r\n        typeArguments[0],\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = typeArguments[0];\r\n      if (compiler.currentType.size != typeArguments[0].size) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\r\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\r\n      return arg0; // any usize to any usize\r\n    }\r\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else if (operands.length > 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\r\n      }\r\n\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) {\r\n          compiler.currentType = Type.void;\r\n          return module.createNop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.createF32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.createF64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n        compiler.currentType = Type.void;\r\n      } else {\r\n        switch (compiler.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            let flow = compiler.currentFunction.flow;\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(\r\n              compiler.currentType,\r\n              !flow.canOverflow(arg0, compiler.currentType)\r\n            );\r\n            ret = module.createIf(\r\n              module.createTeeLocal(tempLocal.index, arg0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32:\r\n          default: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\r\n            ret = module.createIf(\r\n              module.createTeeLocal(tempLocal.index, arg0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32, false);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF32(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64, false);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF64(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unchecked\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let flow = compiler.currentFunction.flow;\r\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\r\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\r\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\r\n      return ret;\r\n    }\r\n    case \"call_indirect\": { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\r\n      if (operands.length < 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let returnType: Type;\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        returnType = typeArguments[0];\r\n      } else {\r\n        returnType = contextualType;\r\n      }\r\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\r\n      if (compiler.currentType.kind != TypeKind.U32) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          operands[0].range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let numOperands = operands.length - 1;\r\n      let operandExprs = new Array<ExpressionRef>(numOperands);\r\n      let signatureParts = new Array<string>(numOperands + 1);\r\n      let nativeReturnType = returnType.toNativeType();\r\n      let nativeParamTypes = new Array<NativeType>(numOperands);\r\n      for (let i = 0; i < numOperands; ++i) {\r\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\r\n        let operandType = compiler.currentType;\r\n        signatureParts[i] = operandType.toSignatureString();\r\n        nativeParamTypes[i] = operandType.toNativeType();\r\n      }\r\n      signatureParts[numOperands] = returnType.toSignatureString();\r\n      let typeName = signatureParts.join(\"\");\r\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\r\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\r\n      compiler.currentType = returnType;\r\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\r\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\r\n      return module.createCallIndirect(arg0, operandExprs, typeName);\r\n    }\r\n\r\n    // user-defined diagnostic macros\r\n\r\n    case \"ERROR\": {\r\n      compiler.error(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    case \"WARNING\": {\r\n      compiler.warning(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createNop();\r\n    }\r\n    case \"INFO\": {\r\n      compiler.info(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createNop();\r\n    }\r\n\r\n    // conversions\r\n\r\n    case \"i8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i8,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i16,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"isize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u8,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u16,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"usize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"bool\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.bool,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"f32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.f32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"f64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.f64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n\r\n    // gc\r\n\r\n    case \"iterateRoots\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\r\n      let type = compiler.currentType;\r\n      let signatureReference = type.signatureReference;\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        !type.is(TypeFlags.REFERENCE) ||\r\n        !signatureReference ||\r\n        signatureReference.parameterTypes.length != 1 ||\r\n        signatureReference.parameterTypes[0] != compiler.options.usizeType\r\n       ) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n          reportNode.range, type.toString(), \"(ref: usize) => void\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      // just emit a call even if the function doesn't yet exist\r\n      compiler.needsIterateRoots = true;\r\n      return module.createCall(\"~iterateRoots\", [ expr ], NativeType.None);\r\n    }\r\n  }\r\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\r\n  if (expr) {\r\n    if (typeArguments && typeArguments.length) {\r\n      compiler.error(\r\n        DiagnosticCode.Type_0_is_not_generic,\r\n        reportNode.range, prototype.internalName\r\n      );\r\n    }\r\n    return expr;\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Operation_not_supported,\r\n    reportNode.range\r\n  );\r\n  return module.createUnreachable();\r\n}\r\n\r\n/** Defers an inline-assembler-like call to a built-in function. */\r\nfunction deferASMCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  switch (prototype.internalName) {\r\n\r\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\r\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\r\n    //   and, or, xor, shl, shr_u, shr_s\r\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\r\n\r\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\r\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\r\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\r\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\r\n\r\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\r\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\r\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\r\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\r\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\r\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\r\nfunction deferASM(\r\n  name: string,\r\n  compiler: Compiler,\r\n  typeArgument: Type,\r\n  operands: Expression[],\r\n  valueType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var prototype = assert(compiler.program.elementsLookup.get(name));\r\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\r\n}\r\n\r\n/** Evaluates the constant type of a type argument *or* expression. */\r\nfunction evaluateConstantType(\r\n  compiler: Compiler,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  reportNode: Node\r\n): Type | null {\r\n  if (operands.length == 0) { // requires type argument\r\n    if (!typeArguments || typeArguments.length != 1) {\r\n      compiler.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n      );\r\n      return null;\r\n    }\r\n    return typeArguments[0];\r\n  }\r\n  if (operands.length == 1) { // optional type argument\r\n    if (typeArguments) {\r\n      if (typeArguments.length == 1) {\r\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        if (typeArguments.length) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return null;\r\n        }\r\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      }\r\n    } else {\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n    }\r\n    return compiler.currentType;\r\n  }\r\n  if (typeArguments && typeArguments.length > 1) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.range, \"1\", typeArguments.length.toString(10)\r\n    );\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Expected_0_arguments_but_got_1,\r\n    reportNode.range, \"1\", operands.length.toString(10)\r\n  );\r\n  return null;\r\n}\r\n\r\n/** Evaluates a `constantOffset` argument.*/\r\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I64 ||\r\n      getConstValueI64High(expr) != 0 ||\r\n      (value = getConstValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I32 ||\r\n      (value = getConstValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\n/** Compiles a memory allocation for an instance of the specified class. */\r\nexport function compileAllocate(\r\n  compiler: Compiler,\r\n  classInstance: Class,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  assert(classInstance.program == program);\r\n  var module = compiler.module;\r\n  var options = compiler.options;\r\n\r\n  // __gc_allocate(size, markFn)\r\n  if (program.hasGC && classInstance.type.isManaged(program)) {\r\n    let allocateInstance = assert(program.gcAllocateInstance);\r\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\r\n    compiler.currentType = classInstance.type;\r\n    return module.createCall(\r\n      allocateInstance.internalName, [\r\n        options.isWasm64\r\n          ? module.createI64(classInstance.currentMemoryOffset)\r\n          : module.createI32(classInstance.currentMemoryOffset),\r\n        module.createI32(\r\n          ensureGCHook(compiler, classInstance)\r\n        )\r\n      ],\r\n      options.nativeSizeType\r\n    );\r\n\r\n  // memory.allocate(size)\r\n  } else {\r\n    let allocateInstance = program.memoryAllocateInstance;\r\n    if (!allocateInstance) {\r\n      program.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        reportNode.range, \"memory.allocate\"\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\r\n\r\n    compiler.currentType = classInstance.type;\r\n    return module.createCall(\r\n      allocateInstance.internalName, [\r\n        options.isWasm64\r\n          ? module.createI64(classInstance.currentMemoryOffset)\r\n          : module.createI32(classInstance.currentMemoryOffset)\r\n      ],\r\n      options.nativeSizeType\r\n    );\r\n  }\r\n}\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringType = program.typesLookup.get(\"string\");\r\n  if (!stringType) return module.createUnreachable();\r\n\r\n  var abortInstance = program.abortInstance;\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\r\n\r\n  var messageArg = message != null\r\n    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    : stringType.toNativeZero(module);\r\n\r\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.createBlock(null, [\r\n    module.createCallImport(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.createI32(reportNode.range.line),\r\n        module.createI32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.createUnreachable()\r\n  ]);\r\n}\r\n\r\n/** Compiles the iterateRoots function if requires. */\r\nexport function compileIterateRoots(compiler: Compiler): void {\r\n  var module = compiler.module;\r\n  var exprs = new Array<ExpressionRef>();\r\n\r\n  for (let element of compiler.program.elementsLookup.values()) {\r\n    if (element.kind != ElementKind.GLOBAL) continue;\r\n    let global = <Global>element;\r\n    let classReference = global.type.classReference;\r\n    if (\r\n      global.is(CommonFlags.COMPILED) &&\r\n      classReference !== null &&\r\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\r\n    ) {\r\n      if (global.is(CommonFlags.INLINED)) {\r\n        let value = global.constantIntegerValue;\r\n        exprs.push(\r\n          module.createCallIndirect(\r\n            module.createGetLocal(0, NativeType.I32),\r\n            [\r\n              compiler.options.isWasm64\r\n                ? module.createI64(i64_low(value), i64_high(value))\r\n                : module.createI32(i64_low(value))\r\n            ],\r\n            \"iv\"\r\n          )\r\n        );\r\n      } else {\r\n        exprs.push(\r\n          module.createCallIndirect(\r\n            module.createGetLocal(0, NativeType.I32),\r\n            [\r\n              module.createGetGlobal(\r\n                global.internalName,\r\n                compiler.options.nativeSizeType\r\n              )\r\n            ],\r\n            \"iv\"\r\n          )\r\n        );\r\n      }\r\n    }\r\n  }\r\n  var typeRef = compiler.ensureFunctionType([ Type.i32 ], Type.void);\r\n  module.addFunction(\"~iterateRoots\", typeRef, [],\r\n    exprs.length\r\n      ? module.createBlock(null, exprs)\r\n      : module.createNop()\r\n  );\r\n}\r\n\r\n/** Ensures that the specified class's GC hook exists and returns its function table index. */\r\nexport function ensureGCHook(\r\n  compiler: Compiler,\r\n  classInstance: Class\r\n): u32 {\r\n  var program = compiler.program;\r\n  assert(classInstance.type.isManaged(program));\r\n\r\n  // check if the GC hook has already been created\r\n  {\r\n    let existingIndex = classInstance.gcHookIndex;\r\n    if (existingIndex != <u32>-1) return existingIndex;\r\n  }\r\n\r\n  // check if the class implements a custom GC function (only valid for internals)\r\n  var members = classInstance.members;\r\n  if (classInstance.prototype.declaration.range.source.isLibrary) {\r\n    if (members !== null && members.has(\"__gc\")) {\r\n      let gcPrototype = assert(members.get(\"__gc\"));\r\n      assert(gcPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcInstance = assert(program.resolver.resolveFunction(<FunctionPrototype>gcPrototype, null));\r\n      assert(gcInstance.is(CommonFlags.PRIVATE | CommonFlags.INSTANCE));\r\n      assert(!gcInstance.isAny(CommonFlags.AMBIENT | CommonFlags.VIRTUAL));\r\n      assert(gcInstance.signature.parameterTypes.length == 0);\r\n      assert(gcInstance.signature.returnType == Type.void);\r\n      gcInstance.internalName = classInstance.internalName + \"~gc\";\r\n      assert(compiler.compileFunction(gcInstance));\r\n      let index = compiler.ensureFunctionTableEntry(gcInstance);\r\n      classInstance.gcHookIndex = index;\r\n      return index;\r\n    }\r\n  }\r\n\r\n  var module = compiler.module;\r\n  var options = compiler.options;\r\n  var nativeSizeType = options.nativeSizeType;\r\n  var nativeSizeSize = options.usizeType.byteSize;\r\n  var body = new Array<ExpressionRef>();\r\n\r\n  // nothing to mark if 'this' is null\r\n  body.push(\r\n    module.createIf(\r\n      module.createUnary(\r\n        options.isWasm64\r\n          ? UnaryOp.EqzI64\r\n          : UnaryOp.EqzI32,\r\n        module.createGetLocal(0, nativeSizeType)\r\n      ),\r\n      module.createReturn()\r\n    )\r\n  );\r\n\r\n  // remember the function index so we don't recurse infinitely\r\n  var functionTable = compiler.functionTable;\r\n  var gcHookIndex = functionTable.length;\r\n  functionTable.push(0);\r\n  classInstance.gcHookIndex = gcHookIndex;\r\n\r\n  // if the class extends a base class, call its hook first (calls mark)\r\n  var baseInstance = classInstance.base;\r\n  if (baseInstance) {\r\n    assert(baseInstance.type.isManaged(program));\r\n    body.push(\r\n      module.createCallIndirect(\r\n        module.createI32(\r\n          ensureGCHook(compiler, <Class>baseInstance.type.classReference)\r\n        ),\r\n        [\r\n          module.createGetLocal(0, nativeSizeType)\r\n        ],\r\n        nativeSizeType == NativeType.I64 ? \"Iv\" : \"iv\"\r\n      )\r\n    );\r\n\r\n  // if this class is the top-most base class, mark the instance\r\n  } else {\r\n    body.push(\r\n      module.createCall(assert(program.gcMarkInstance).internalName, [\r\n        module.createGetLocal(0, nativeSizeType)\r\n      ], NativeType.None)\r\n    );\r\n  }\r\n\r\n  // mark instances assigned to own fields that are again references\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      if (member.kind == ElementKind.FIELD) {\r\n        if ((<Field>member).parent === classInstance) {\r\n          let type = (<Field>member).type;\r\n          if (type.isManaged(program)) {\r\n            let offset = (<Field>member).memoryOffset;\r\n            assert(offset >= 0);\r\n            body.push(\r\n              module.createCall(assert(program.gcMarkInstance).internalName, [\r\n                module.createLoad(\r\n                  nativeSizeSize,\r\n                  false,\r\n                  module.createGetLocal(0, nativeSizeType),\r\n                  nativeSizeType,\r\n                  offset\r\n                )\r\n              ], NativeType.None)\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // add the function to the module and return its table index\r\n  functionTable[gcHookIndex] = module.addFunction(\r\n    classInstance.internalName + \"~gc\",\r\n    compiler.ensureFunctionType(null, Type.void, options.usizeType),\r\n    null,\r\n    module.createBlock(null, body)\r\n  );\r\n  return gcHookIndex;\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + (hi - lo) / 2;\r\n    mid -= mid % 2;\r\n    if (map[mid] <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < map[mid]) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\n/** Reads an 8-bit integer from the specified buffer. */\r\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset];\r\n}\r\n\r\n/** Writes an 8-bit integer to the specified buffer. */\r\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset] = value;\r\n}\r\n\r\n/** Reads a 16-bit integer from the specified buffer. */\r\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8;\r\n}\r\n\r\n/** Writes a 16-bit integer to the specified buffer. */\r\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n}\r\n\r\n/** Reads a 32-bit integer from the specified buffer. */\r\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8\r\n       | buffer[offset + 2] << 16\r\n       | buffer[offset + 3] << 24;\r\n}\r\n\r\n/** Writes a 32-bit integer to the specified buffer. */\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\n/** Reads a 64-bit integer from the specified buffer. */\r\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\r\n  var lo = readI32(buffer, offset);\r\n  var hi = readI32(buffer, offset + 4);\r\n  return i64_new(lo, hi);\r\n}\r\n\r\n/** Writes a 64-bit integer to the specified buffer. */\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\n/** Reads a 32-bit float from the specified buffer. */\r\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\r\n  return i32_as_f32(readI32(buffer, offset));\r\n}\r\n\r\n/** Writes a 32-bit float to the specified buffer. */\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\n/** Reads a 64-bit float from the specified buffer. */\r\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\r\n  return i64_as_f64(readI64(buffer, offset));\r\n}\r\n\r\n/** Writes a 64-bit float to the specified buffer. */\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport {\r\n  Compiler,\r\n  Options,\r\n  Target,\r\n  Feature\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  Decompiler\r\n} from \"./decompiler\";\r\n\r\nimport {\r\n  IDLBuilder,\r\n  TSDBuilder\r\n} from \"./definitions\";\r\n\r\nimport {\r\n  DiagnosticMessage,\r\n  DiagnosticCategory,\r\n  formatDiagnosticMessage\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module\r\n} from \"./module\";\r\n\r\nimport {\r\n  Parser\r\n} from \"./parser\";\r\n\r\nimport {\r\n  Program\r\n} from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) parser = new Parser();\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noTreeShaking` option. */\r\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\r\n  options.noTreeShaking = noTreeShaking;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(name, alias);\r\n}\r\n\r\n/** Sign extension operations. */\r\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\r\n/** Mutable global imports and exports. */\r\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\r\n\r\n/** Enables a specific feature. */\r\nexport function enableFeature(options: Options, feature: Feature): void {\r\n  options.features |= feature;\r\n}\r\n\r\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\r\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\r\n  options.optimizeLevelHint = optimizeLevel;\r\n  options.shrinkLevelHint = shrinkLevel;\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX } from \"./common\";\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  getFunctionName,\r\n  getFunctionBody,\r\n  getFunctionParamCount,\r\n  getFunctionParamType,\r\n  getFunctionResultType,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfCondition,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getLoopName,\r\n  getLoopBody,\r\n  getBreakName,\r\n  getBreakCondition,\r\n  getGetLocalIndex,\r\n  getSetLocalIndex,\r\n  getSetLocalValue,\r\n  getLoadOffset,\r\n  getLoadPtr,\r\n  getStoreOffset,\r\n  getStorePtr,\r\n  getStoreValue,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getUnaryOp,\r\n  getUnaryValue,\r\n  getBinaryOp,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getSelectCondition,\r\n  getDropValue,\r\n  getReturnValue,\r\n  getHostOp,\r\n  getHostOperand\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\r\n    var body = getFunctionBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(getFunctionResultType(func)));\r\n    this.push(\" \");\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = getExpressionId(expr);\r\n    var type = getExpressionType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = getBlockName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = getBlockChildCount(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(getBlockChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          if (nested = getIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(getIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = getLoopName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(getLoopBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = getBreakCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = getBreakName(expr)) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallImport:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getGetLocalIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.SetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getSetLocalIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(getSetLocalValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GetGlobal:\r\n      case ExpressionId.SetGlobal: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getLoadOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getLoadPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getStoreOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getStorePtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getStoreValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(getConstValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(getConstValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(getConstValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(getSelectThen(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectElse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(getDropValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = getReturnValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (getHostOp(expr)) {\r\n          case HostOp.CurrentMemory: {\r\n            this.push(\"memory.size()\");\r\n            return;\r\n          }\r\n          case HostOp.GrowMemory: {\r\n            this.push(\"memory.grow(\");\r\n            this.decompileExpression(getHostOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicWake:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Field,\r\n  Function,\r\n  FunctionPrototype,\r\n  Class,\r\n  ClassPrototype,\r\n  Namespace,\r\n  ConstantValueKind,\r\n  Interface,\r\n  Property\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Whether to include private members */\r\n  includePrivate: bool;\r\n  /** Elements still to do. */\r\n  todo: Element[] = [];\r\n  /** Already seen elements. */\r\n  seen: Set<Element> = new Set();\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    this.program = program;\r\n    this.includePrivate;\r\n  }\r\n\r\n  /** Walks all exports and calls the respective handlers. */\r\n  walk(): void {\r\n    for (let moduleExport of this.program.moduleLevelExports.values()) {\r\n      // FIXME: doesn't honor the actual externally visible name\r\n      this.visitElement(moduleExport.element);\r\n    }\r\n    var todo = this.todo;\r\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\r\n  }\r\n\r\n  /** Visits an element.*/\r\n  visitElement(element: Element): void {\r\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.visitFunctionInstances(<FunctionPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        this.visitClassInstances(<ClassPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prop = <Property>element;\r\n        let getter = prop.getterPrototype;\r\n        if (getter) this.visitFunctionInstances(getter);\r\n        let setter = prop.setterPrototype;\r\n        if (setter) this.visitFunctionInstances(setter);\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if (hasCompiledMember(element)) this.visitNamespace(element);\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  private visitFunctionInstances(element: FunctionPrototype): void {\r\n    for (let instance of element.instances.values()) {\r\n      if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\r\n    }\r\n  }\r\n\r\n  private visitClassInstances(element: ClassPrototype): void {\r\n    for (let instance of element.instances.values()) {\r\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\r\n    }\r\n  }\r\n\r\n  abstract visitGlobal(element: Global): void;\r\n  abstract visitEnum(element: Enum): void;\r\n  abstract visitFunction(element: Function): void;\r\n  abstract visitClass(element: Class): void;\r\n  abstract visitInterface(element: Interface): void;\r\n  abstract visitField(element: Field): void;\r\n  abstract visitNamespace(element: Element): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) sb.push(\"const \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) sb.push(\"const \");\r\n          else sb.push(\"readonly \");\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    // TODO\r\n  }\r\n\r\n  visitNamespace(element: Namespace): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.STATIC)) {\r\n      if (isConst) sb.push(\"static readonly \");\r\n      else sb.push(\"static \");\r\n    } else {\r\n      if (isConst) sb.push(\"const \");\r\n      else sb.push(\"var \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"enum \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) this.visitNamespace(element);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.GET)) {\r\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n      sb.push(\";\\n\");\r\n      return;\r\n    } else {\r\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\r\n      sb.push(element.simpleName);\r\n    }\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\r\n      sb.push(\")\");\r\n    } else {\r\n      sb.push(\"): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n    }\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\r\n      sb.push(\"class \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    var base = element.base;\r\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\r\n      sb.push(\" extends \");\r\n      sb.push(base.simpleName); // TODO: fqn\r\n    }\r\n    sb.push(\" {\\n\");\r\n    var members = element.prototype.members; // static\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    var ctor = element.constructorInstance;\r\n    if (ctor) this.visitFunction(ctor);\r\n    members = element.members; // instance\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitNamespace(element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"namespace \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    sb.push(\"export default ASModule;\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Tests if a namespace-like element has at least one compiled member. */\r\nfunction hasCompiledMember(element: Element): bool {\r\n  var members = element.members;\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      switch (member.kind) {\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          for (let instance of (<FunctionPrototype>member).instances.values()) {\r\n            if (instance.is(CommonFlags.COMPILED)) return true;\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          for (let instance of (<ClassPrototype>member).instances.values()) {\r\n            if (instance.is(CommonFlags.COMPILED)) return true;\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler,\r\n  IdentifierHandling\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  SignatureNode,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  ClassExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath,\r\n  nodeIsCallable,\r\n  nodeIsGenericCallable\r\n} from \"./ast\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Source file names to be requested next. */\r\n  backlog: string[] = new Array();\r\n  /** Source file names already seen, that is processed or backlogged. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Source file names already completely processed. */\r\n  donelog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n\r\n    // check if already processed\r\n    if (this.donelog.has(internalPath)) return;\r\n    this.donelog.add(internalPath); // do not parse again\r\n    this.seenlog.add(internalPath); // do not request again\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n          ? SourceKind.LIBRARY\r\n          : SourceKind.DEFAULT\r\n    );\r\n    var program = this.program;\r\n    program.sources.push(source);\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn);\r\n      if (statement) {\r\n        statement.parent = source;\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: Node | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) {\r\n        this.skipStatement(tn);\r\n        continue;\r\n      }\r\n      if (!decorators) decorators = [];\r\n      decorators.push(decorator);\r\n    }\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (tn.skip(Token.DEFAULT)) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          tn.range()\r\n        );\r\n      }\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n          break;\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        }\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (!tn.skip(Token.CLASS)) {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n          break;\r\n        } else {\r\n          tn.discard(state);\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        // fall through\r\n      }\r\n      case Token.CLASS:\r\n      case Token.INTERFACE: {\r\n        tn.next();\r\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExport(tn, flags, startPos);\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    this.donelog.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): CommonTypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    var type: CommonTypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseSignature(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'void'\r\n    } else if (token == Token.VOID) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createType(\r\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let parameters = new Array<TypeNode>();\r\n      let nullable = false;\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          parameters.push(<TypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\r\n\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function signature, as used in type declarations. */\r\n  tryParseSignature(\r\n    tn: Tokenizer\r\n  ): SignatureNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: TypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.TYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <TypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skipIdentifier()) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        if (isSignature) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createSignature(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skipIdentifier()) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var flags = parentFlags;\r\n\r\n    var type: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n      if (!member) return null;\r\n      members.push(<EnumValueDeclaration>member);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEBRACE)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters = new Array<TypeParameterNode>();\r\n    while (!tn.skip(Token.GREATERTHAN)) {\r\n      let typeParameter = this.parseTypeParameter(tn);\r\n      if (!typeParameter) return null;\r\n      typeParameters.push(<TypeParameterNode>typeParameter);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.GREATERTHAN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    if (typeParameters.length === 0) {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <TypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private parseParametersThis: TypeNode | null = null;\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n    var thisType: CommonTypeNode | null = null;\r\n\r\n    // check if there is a leading `this` parameter\r\n    this.parseParametersThis = null;\r\n    if (tn.skip(Token.THIS)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        thisType = this.parseType(tn); // reports\r\n        if (!thisType) return null;\r\n        if (thisType.kind == NodeKind.TYPE) {\r\n          this.parseParametersThis = <TypeNode>thisType;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            thisType.range\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n        return null;\r\n      }\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          return parameters;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let param = this.parseParameter(tn, isConstructor); // reports\r\n      if (!param) return null;\r\n      if (seenRest && !reportedRest) {\r\n        this.error(\r\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n          seenRest.name.range\r\n        );\r\n        reportedRest = true;\r\n      }\r\n      switch (param.parameterKind) {\r\n        default: {\r\n          if (seenOptional) {\r\n            this.error(\r\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n              param.name.range\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ParameterKind.OPTIONAL: {\r\n          seenOptional = true;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          seenRest = param;\r\n          break;\r\n        }\r\n      }\r\n      parameters.push(param);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (isConstructor) {\r\n      if (tn.skip(Token.PUBLIC)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PUBLIC;\r\n      } else if (tn.skip(Token.PROTECTED)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PROTECTED;\r\n      } else if (tn.skip(Token.PRIVATE)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PRIVATE;\r\n      }\r\n      if (tn.peek() == Token.READONLY) {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek() != Token.COLON) { // modifier\r\n          tn.discard(state);\r\n          if (!startRange) startRange = tn.range();\r\n          accessFlags |= CommonFlags.READONLY;\r\n        } else { // identifier\r\n          tn.reset(state);\r\n        }\r\n      }\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skipIdentifier()) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: CommonTypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n    var thisType = this.parseParametersThis;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var isArrow = false;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skipIdentifier()) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      isArrow = true;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    isArrow: bool,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n      this.error(\r\n        DiagnosticCode.Type_expected,\r\n        returnType.range\r\n      ); // recoverable\r\n    }\r\n\r\n    if (isArrow) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null, // TODO?\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null;\r\n    if (isArrow) {\r\n      body = this.parseStatement(tn, false);\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClassOrInterface(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at ('class' | 'interface'):\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    var isInterface = tn.token == Token.INTERFACE;\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    } else {\r\n      typeParameters = [];\r\n    }\r\n\r\n    var extendsType: TypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.TYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <TypeNode>t;\r\n    }\r\n\r\n    var implementsTypes: TypeNode[] | null = null;\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        if (!isInterface) {\r\n          if (!implementsTypes) implementsTypes = [];\r\n          implementsTypes.push(<TypeNode>type);\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration: ClassDeclaration;\r\n    if (isInterface) {\r\n      assert(!implementsTypes);\r\n      declaration = Node.createInterfaceDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    } else {\r\n      declaration = Node.createClassDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        implementsTypes,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (!member) return null;\r\n        member.parent = declaration;\r\n        members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return declaration;\r\n  }\r\n\r\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\r\n\r\n    // at 'class': Identifier? '{' ... '}'\r\n\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n\r\n    if (tn.skipIdentifier()) {\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    } else {\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration = Node.createClassDeclaration(\r\n      name,\r\n      [],\r\n      null,\r\n      null,\r\n      members,\r\n      null,\r\n      CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (!member) return null;\r\n        member.parent = declaration;\r\n        members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return Node.createClassExpression(declaration);\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\r\n\r\n    var decorators = new Array<DecoratorNode>();\r\n    while (tn.skip(Token.AT)) {\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) break;\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorator.range\r\n        );\r\n      }\r\n      decorators.push(<DecoratorNode>decorator);\r\n    }\r\n\r\n    // inherit ambient status\r\n    var flags = parent.flags & CommonFlags.AMBIENT;\r\n\r\n    // implemented methods are virtual\r\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\r\n\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"public\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PUBLIC;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"private\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PRIVATE;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"protected\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PROTECTED;\r\n    }\r\n\r\n    var staticStart: i32 = 0;\r\n    var staticEnd: i32 = 0;\r\n    var abstractStart: i32 = 0;\r\n    var abstractEnd: i32 = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"static\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      flags |= CommonFlags.INSTANCE;\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        if (isInterface) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(), \"abstract\"\r\n          );\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) {\r\n        flags |= CommonFlags.GENERIC_CONTEXT;\r\n      }\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.skip(Token.READONLY)) {\r\n      flags |= CommonFlags.READONLY;\r\n      readonlyStart = tn.tokenPos;\r\n      readonlyEnd = tn.pos;\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (!isInterface) {\r\n      if (tn.skip(Token.GET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.GET;\r\n          isGetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.SET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.SET | CommonFlags.SET;\r\n          isSetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n        flags |= CommonFlags.CONSTRUCTOR;\r\n        isConstructor = true;\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!isConstructor && !tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = isConstructor\r\n      ? Node.createConstructorExpression(tn.range())\r\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      let thisType = this.parseParametersThis;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            implicitFieldDeclaration.parent = parent;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createSignature(\r\n        parameters,\r\n        returnType,\r\n        thisType,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\r\n            tn.range(), name.text\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let ns = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, ns);\r\n          if (!member) return null;\r\n          member.parent = ns;\r\n          members.push(member);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ns;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    startPos: i32\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    var path: StringLiteralExpression | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseExportMember(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n          let ret = Node.createExportStatement(null, path, flags, tn.range(startPos, tn.pos));\r\n          let internalPath = assert(ret.internalPath);\r\n          let source = tn.source;\r\n          if (!source.exportPaths) source.exportPaths = new Set();\r\n          source.exportPaths.add(internalPath);\r\n          if (!this.seenlog.has(internalPath)) {\r\n            this.backlog.push(internalPath);\r\n            this.seenlog.add(internalPath);\r\n          }\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"from\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifierName()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      members = new Array();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseImportDeclaration(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.backlog.push(internalPath);\r\n          this.seenlog.add(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifierName()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skipIdentifier()) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        if (tn.token == Token.ENDOFFILE) return null;\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skipIdentifier()) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(IdentifierHandling.PREFER);\r\n    var startPos = tn.tokenPos;\r\n    var precedence = determinePrecedenceStart(token);\r\n    if (precedence != Precedence.NONE) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, precedence);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var expr: Expression | null = null;\r\n    switch (token) {\r\n\r\n      case Token.NULL: return Node.createNullExpression(tn.range());\r\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\r\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            true\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(IdentifierHandling.PREFER)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // can be both\r\n                case Token.QUESTION:   // optional parameter or ternary\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        while (!tn.skip(Token.CLOSEBRACKET)) {\r\n          if (tn.peek() == Token.COMMA) {\r\n            expr = null; // omitted\r\n          } else {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n          }\r\n          elementExpressions.push(expr);\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACKET)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"]\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // ObjectLiteralExpression\r\n      case Token.OPENBRACE: {\r\n        let startPos = tn.tokenPos;\r\n        let names = new Array<IdentifierExpression>();\r\n        let values = new Array<Expression>();\r\n        let name: IdentifierExpression;\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          if (!tn.skipIdentifier()) {\r\n            if (!tn.skip(Token.STRINGLITERAL)) {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                tn.range(),\r\n              );\r\n              return null;\r\n            }\r\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\r\n            name.set(CommonFlags.QUOTED);\r\n          } else {\r\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          }\r\n          names.push(name);\r\n          if (tn.skip(Token.COLON)) {\r\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!value) return null;\r\n            values.push(value);\r\n          } else if (!name.is(CommonFlags.QUOTED)) {\r\n            values.push(name);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACE)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"}\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      case Token.CLASS: {\r\n        return this.parseClassExpression(tn);\r\n      }\r\n      default: {\r\n        if (token == Token.ENDOFFILE) {\r\n          this.error(\r\n            DiagnosticCode.Unexpected_end_of_text,\r\n            tn.range(startPos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Expression_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): CommonTypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments = new Array<CommonTypeNode>();\r\n    do {\r\n      if (tn.peek() === Token.GREATERTHAN) {\r\n        break;\r\n      }\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!expr) return null;\r\n      args.push(expr);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = Precedence.COMMA\r\n  ): Expression | null {\r\n    assert(precedence != Precedence.NONE);\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    var startPos = expr.range.start;\r\n\r\n    // CallExpression?\r\n    if (nodeIsCallable(expr.kind)) {\r\n      let typeArguments: CommonTypeNode[] | null = null;\r\n      while (\r\n        tn.skip(Token.OPENPAREN)\r\n        ||\r\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\r\n      ) {\r\n        let args = this.parseArguments(tn);\r\n        if (!args) return null;\r\n        expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos)); // is again callable\r\n      }\r\n    }\r\n\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn); // reports\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // InstanceOfExpression\r\n        case Token.INSTANCEOF: {\r\n          let isType = this.parseType(tn); // reports\r\n          if (!isType) return null;\r\n          expr = Node.createInstanceOfExpression(\r\n            expr,\r\n            isType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn); // reports\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\r\n            ? Precedence.COMMA + 1\r\n            : Precedence.COMMA\r\n          );\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n          next = this.parseExpression(tn,\r\n            isRightAssociative(token)\r\n              ? nextPrecedence\r\n              : nextPrecedence + 1\r\n          );\r\n          if (!next) return null;\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (next.kind == NodeKind.IDENTIFIER) {\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // join\r\n              let propertyCall = <CallExpression>next;\r\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\r\n                propertyCall.expression = Node.createPropertyAccessExpression(\r\n                  expr,\r\n                  <IdentifierExpression>propertyCall.expression,\r\n                  tn.range(startPos, tn.pos)\r\n                );\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.Identifier_expected,\r\n                  propertyCall.expression.range\r\n                );\r\n                return null;\r\n              }\r\n              expr = propertyCall;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.SEMICOLON      // end of the statement for sure\r\n      ) {\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipBlock(tn: Tokenizer): void {\r\n    // at '{': ... '}'\r\n    var depth = 1;\r\n    var again = true;\r\n    do {\r\n      switch (tn.next()) {\r\n        case Token.ENDOFFILE: {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          again = false;\r\n          break;\r\n        }\r\n        case Token.OPENBRACE: {\r\n          ++depth;\r\n          break;\r\n        }\r\n        case Token.CLOSEBRACE: {\r\n          --depth;\r\n          if (!depth) again = false;\r\n          break;\r\n        }\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (again);\r\n  }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  NONE,\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n"],"sourceRoot":""}