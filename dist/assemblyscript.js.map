{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/./std/portable/memory.js","webpack://assemblyscript/./std/portable/math.js","webpack://assemblyscript/./std/portable.js","webpack://assemblyscript/./src/glue/js/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__23__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","FILESPACE_PREFIX","__export","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","Array","emitDiagnostic","info","warning","error","NativeType","ExpressionId","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","cachedTemporaryName","hasTemporaryFunction","cachedPrecomputeName","cachedPrecomputeNames","ref","_BinaryenModuleCreate","cachedByValue","allocate_memory","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free_memory","changetype","addFunctionType","result","paramTypes","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","expr","_BinaryenUnary","createBinary","left","right","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","index","type","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","label","children","None","_BinaryenBlock","createBreak","condition","_BinaryenBreak","createDrop","expression","_BinaryenDrop","createLoop","body","_BinaryenLoop","createIf","ifTrue","ifFalse","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","target","returnType","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","initializer","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","internalName","externalName","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","exportName","k","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeFunction","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","sourceMap","readString","toText","Error","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","i32","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenExpressionGetType","I32","_BinaryenConstGetValueI32","I64","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","F32","_BinaryenConstGetValueF32","F64","_BinaryenConstGetValueF64","GetLocal","_BinaryenGetLocalGetIndex","GetGlobal","globalName","_BinaryenGetGlobalGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","setDebugLocation","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getGetLocalIndex","getSetLocalIndex","_BinaryenSetLocalGetIndex","getSetLocalValue","_BinaryenSetLocalGetValue","isTeeLocal","_BinaryenSetLocalIsTee","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","getCallTarget","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","_BinaryenFunctionGetBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","ptrs","str","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","common_1","tokenizer_1","Token","Range","NodeKind","nodeIsConstantValue","kind","LITERAL","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","CALL","ELEMENTACCESS","PROPERTYACCESS","nodeIsGenericCallable","Node","parent","flags","NONE","is","flag","isAny","set","createType","typeArguments","isNullable","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","extendsType","elem","TypeParameterNode","createParameter","ParameterNode","parameterKind","createSignature","parameters","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","decoratorNameToKind","createComment","node","CommentNode","commentKind","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","setParentIfNotNull","createAssertionExpression","assertionKind","toType","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","declaration","FunctionExpression","ARROW","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","identifier","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","values","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","_super","__extends","_this","apply","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","DecoratorKind","SIGNATURE","nameStr","GLOBAL","INLINE","OPERATOR","SEALED","UNMANAGED","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","ASSERTION","BINARY","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","PARENTHESIZED","REGEXP","TERNARY","STRING","SUPER","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","isLastStatement","BLOCK","FUNCTIONDECLARATION","METHODDECLARATION","SourceKind","Statement","Source","SOURCE","tokenizer","debugInfoIndex","exportPaths","sourceKind","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","VARIABLE","NAMESPACEDECLARATION","EXPORT","isTopLevelExport","CLASSDECLARATION","STATIC","needsExplicitExport","member","VariableLikeDeclarationStatement","BREAK","CONTINUE","DO","EMPTY","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VOID","WHILE","asGlobal","endsWith","hasDecorator","OperatorKind","diagnostics_1","types_1","ast_1","module_1","QueuedImport","QueuedExport","TypeAlias","operatorKindFromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","noTypesYet","Map","Program","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayPrototype","arrayBufferViewPrototype","stringInstance","mainFunction","resolvedThisExpression","resolvedElementExpression","sources","getSource","lookupSourceByPath","normalizedPathWithoutExtension","tmp","initialize","options","Type","i8","i16","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","queuedImports","queuedExports","queuedExtends","queuedImplements","filespace","Filespace","currentFilespace","j","initializeClass","initializeEnum","initializeExports","initializeFunction","initializeImports","initializeInterface","initializeNamespace","initializeTypeAlias","initializeVariables","queuedImport","tryResolveImport","localName","splice","externalNameAlt","Module_0_has_no_exported_member_1","queuedExports_1","__values","queuedExports_1_1","next","done","_c","__read","queuedExport","currentExport","isReExport","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_d","INTERFACE_PROTOTYPE","stringPrototype","resolve","has","Duplicate_identifier_0","programLevelInternalName","FUNCTION_PROTOTYPE","startFunction","GENERIC","AMBIENT","MAIN","queuedNamedExports","filterDecorators","acceptedFlags","presentFlags","decorator","decoratorKindToFlag","Duplicate_decorator","Decorator_0_is_not_valid_here","checkGlobalOptions","parentNode","BUILTIN","isLibrary","namespace","fileLevelInternalName","simpleName","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeAccessor","initializeMethod","classPrototype","staticField","Global","instanceMembers","instanceField","FieldPrototype","decoratorFlags","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","numArgs","firstArg","Operation_not_supported","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","initializeEnumValue","enm","EnumValue","initializeExport","prefix","FILESPACE","referencedName","referencedElement","seen","Set","add","initializeImport","indexPart","InterfacePrototype","parentNamespace","Namespace","existingExport","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","global_1","resolveSignature","contextualTypeArguments","reportNotFound","thisType","resolveType","parameterTypeNodes","numParameters","parameterTypes","parameterNames","requiredParameters","hasRest","parameterTypeNode","DEFAULT","REST","parameterType","returnTypeNode","Signature","asNullable","typeNode","ENUM","instance","resolveUsingTypeArguments","paramType","instanceKey","typesToString","placeholderType","resolveTypeArguments","typeArgumentNodes","alternativeReportNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","atEnd","contextualFunction","contextualEnum","ENUMVALUE","flow","getScopedLocal","resolvePropertyAccess","propertyAccess","targetExpression","resolveExpression","propertyName","LOCAL","FIELD","classReference","Property_0_does_not_exist_on_type_1","CLASS","indexedGet","lookupOverload","Index_signature_is_missing_in_type_0","base","resolveElementAccess","elementAccess","classType","explicitLocal","_this_cannot_be_referenced_in_current_location","_super_can_only_be_referenced_in_a_derived_class","signatureReference","functionTarget","cachedFunctionTarget","FunctionTarget","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","Element","program","NAMESPACE","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","withConstantIntegerValue","lo","hi","constantIntegerValue","i64_new","CONST","INLINED","withConstantFloatValue","constantFloatValue","Parameter","Local","scopedGlobal","instances","classTypeArguments","functionTypeArguments","isInstance","INSTANCE","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","_b","inheritedName","inheritedType","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","classInstance","signatureParameters","signatureParameterCount","parameterDeclaration","Function","resolvePartial","partialKey","partialPrototype","reportNode","resolvedTypeArguments","resolveBuiltinTypeArguments","resolvedType","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","DECLARE","localIndex","local","inheritedTypeArguments_2","inheritedTypeArguments_2_1","parameterName","getParameterName","Flow","addLocal","getTempLocal","wrapped","temps","toNativeType","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","debugLocation","debugInfoRef","FUNCTION_TARGET","toSignatureString","asFunction","FIELD_PROTOTYPE","Field","memoryOffset","inheritedTypeArguments_3","inheritedTypeArguments_3_1","_e","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Class","currentMemoryOffset","_f","_g","inheritedMember","partialConstructor","constructorInstance","_h","_j","fieldDeclaration","fieldType","fieldInstance","byteSize","instanceProperty","partialGetterPrototype","partialSetterPrototype","_k","_l","_m","operatorInstance","operatorPartial","asClass","inheritedTypeArguments_4","inheritedTypeArguments_4_1","baseType","isAssignableTo","current","unchecked","uncheckedOverload","overload","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","wrappedLocals","wrappedLocalsExt","unset","fork","branch","slice","free","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","isLocalWrapped","map","ext","i64_ne","i64_and","i64_shl","i64_one","i64_zero","off","i64_or","i64_not","inherit","other","inheritConditional","inheritMutual","leftExt","rightExt","thisExt","minLength","min","canOverflow","canConversionOverflow","SetLocal","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","computeSmallIntegerMask","ShlI32","shift","size","ShrI32","ShrU32","DivU32","RemI32","RemU32","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","MIN_VALUE","fromType","Block","last","If","Select","Call","Unreachable","fromSize","toSize","g","eval","e","window","TypeKind","TypeFlags","cachedNullableType","ceil","nonNullableType","isize64","isize32","usize64","usize32","computeSmallIntegerShift","targetType","signednessIsRelevant","currentClass","targetClass","targetFunction","commonCompatible","signednessIsImportant","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","ABSTRACT","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","pos","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","skipIdentifierName","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","sepEnd","i64_add","i64_mul","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","builtins_1","program_1","Options","WASM32","noTreeShaking","noAssert","importMemory","importTable","memoryBase","features","hasFeature","feature","Feature","ConversionKind","WrapMode","Compiler","outerFunction","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","compileSource","funcRef","ensureFunctionType","i64_align","isWasm64","pages","i64_shr_u","functionTableSize","functionTableExported","entries","compileSourceByPath","File_0_not_found","COMPILED","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","initExpr","Type_expected","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","nativeType","isConstant","MODULE_IMPORT","initializeInStart","compileInlineConstant","compileExpression","precomputeExpressionRef","Compiling_constant_with_non_constant_initializer_as_mutable","mangleExportName","isTopLevel","compileEnum","previousValue","initInStart","valueDeclaration","AddI32","Cannot_export_a_mutable_global","compileFunctionUsingTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","stmts","compileStatements","unshift","nativeSizeType","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","ensureTrampoline","ensureArgcSet","compileInterfaceDeclaration","compileNamespace","compileClassUsingTypeArguments","internalExportName","functionInstance","functionDeclaration","globalDeclaration","compileClass","staticMembers","setter","ctorInstance","getterName","setterName","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","numStatements","Nop","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","terminated","repeatLabel","alwaysTrue","condPre","incrExpr","bodyExpr","usesContinue","breakBlock","repeatBlock","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","precomputeExpression","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","valueWithCorrectType","tee","thisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","Type_0_is_not_generic","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","compileCallInlineUnchecked","numArgumentsInclThis","previousFlow","thisLocal","paramExpr","argumentLocal","bodyStatement","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","Optional_parameter_must_have_an_initializer","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","retainConstantType","scopedThis","superType","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStaticString","stringValue","stringSegment","stringLength","stringBuffer","stringOffset","stringType","elementType","isStatic","arrayInstance","arrayType","elementCount","nativeElementType","byteLength","Int32Array","Float32Array","Float64Array","usizeTypeSize","arraySize","bufferTotalSize","clz","data","writeI64","writeI32","writeF32","writeF64","nativeArrayType","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","currentClassInstance","makeAllocate","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","nativeOne","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","compileAllocate","field","nativeFieldType","builtinsFile","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","typeParameter","parseTypeParameter","Type_parameter_list_cannot_be_empty","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","isInterface","Interface_declaration_cannot_have_implements_clause","parseClassMember","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","Precedence","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","IDLBuilder","indentLevel","build","isConst","indent","typeToString","i64_to_string","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","ctor","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Break","Switch","CallImport","CallIndirect","SetGlobal","Store","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Return","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","enableFeature","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","wasm","WebAssembly","Instance","low","high","unsigned","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","radix","RangeError","radixToPower","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","floor","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","i64_div","i64_div_u","i64_rem","i64_rem_u","i64_xor","i64_shr","i64_eq","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","minSafeF64","maxSafeF64","fround","readI32","readI64","readF32","readF64","valueI64","indentX1","indentX2","indentX4","separator","ipos","dirname","origin","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","compiler","evaluateConstantType","tempLocal0","tempLocal1","evaluateConstantOffset","alignLog2","fieldName","Type_0_has_no_property_1","abort","operandExprs","signatureParts","nativeParamTypes","operandType","deferASM","deferASMCall","typeArgument","valueType","allocateInternalName","allocatePrototype","An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf","allocateInstance","abortInternalName","abortPrototype","abortInstance","messageArg","filenameArg","binaryen","Binaryen","_malloc","_free","move_memory","dest","src","_memmove","HEAPU8","previousPrint","print","x","_BinaryenModulePrint","_BinaryenModulePrintAsmjs","globalScope","HEAP","HEAP_OFFSET","oldHeap","copyWithin","UnreachableError","captureStackTrace","stack","AssertionError","defineProperties","writable","MIN_POSITIVE_VALUE","EPSILON","clz32","abs","trunc","round","sqrt","y","sign","isTrueish","undefined","fromCodePoint","Number","isInteger","isArray"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,EAAAG,QAAA,aACA,mBAAAC,eAAAC,IACAD,QAAA,YAAAJ,GACA,iBAAAC,QACAA,QAAA,eAAAD,EAAAG,QAAA,aAEAJ,EAAA,eAAAC,EAAAD,EAAA,UARA,CASC,oBAAAO,UAAAC,KAAA,SAAAC,GACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAV,QAGA,IAAAC,EAAAO,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAZ,YAUA,OANAa,EAAAH,GAAAI,KAAAb,EAAAD,QAAAC,IAAAD,QAAAS,GAGAR,EAAAW,GAAA,EAGAX,EAAAD,QA0DA,OArDAS,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAjB,EAAAkB,EAAAC,GACAV,EAAAW,EAAApB,EAAAkB,IACAG,OAAAC,eAAAtB,EAAAkB,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAzB,GACA,oBAAA0B,eAAAC,aACAN,OAAAC,eAAAtB,EAAA0B,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAtB,EAAA,cAAiD4B,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAnC,GACA,IAAAkB,EAAAlB,KAAA8B,WACA,WAA2B,OAAA9B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAQ,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,oFC5EA,SAAYC,GAEVA,IAAA,eAKAA,IAAA,mBAEAA,IAAA,mBAEAA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,cAEAA,IAAA,oBAEAA,IAAA,wBAEAA,IAAA,yBAEAA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,4BAEAA,IAAA,gBAEAA,IAAA,gBAKAA,IAAA,wBAEAA,IAAA,yBAEAA,IAAA,yCAEAA,IAAA,2BAEAA,IAAA,kCAEAA,IAAA,sBAEAA,IAAA,sCAEAA,IAAA,uCAKAA,IAAA,2BAEAA,IAAA,6BAEAA,IAAA,2BAEAA,IAAA,0BAEAA,IAAA,kCAEAA,IAAA,4BAEAA,IAAA,uBAnEF,CAAY3C,EAAA2C,cAAA3C,EAAA2C,iBAuEC3C,EAAA4C,eAAiB,IAEjB5C,EAAA6C,aAAe,KAEf7C,EAAA8C,cAAgB,OAEhB9C,EAAA+C,cAAgB,OAEhB/C,EAAAgD,mBAAqB,IAErBhD,EAAAiD,iBAAmB,IAEnBjD,EAAAkD,gBAAkB,IAElBlD,EAAAmD,cAAgB,OAEhBnD,EAAAoD,eAAiBpD,EAAAmD,cAAgBnD,EAAA4C,eAEjC5C,EAAAqD,iBAAmB,qJCzFhCC,EAAA7C,EAAA,KACA6C,EAAA7C,EAAA,KACA6C,EAAA7C,EAAA,KACA6C,EAAA7C,EAAA,oFCCA,IAeY8C,EAfZC,EAAA/C,EAAA,GAKAgD,EAAAhD,EAAA,GAIAiD,EAAAjD,EAAA,GAgBA,SAAAkD,EAA2CC,GACzC,OAAQA,GACN,KAAKL,EAAmBM,KAAM,MAAO,OACrC,KAAKN,EAAmBO,QAAS,MAAO,UACxC,KAAKP,EAAmBQ,MAAO,MAAO,QACtC,QAEE,OADAC,QAAO,GACA,IAeb,SAAAC,EAA0CL,GACxC,OAAQA,GACN,KAAKL,EAAmBM,KAAM,OAAO7D,EAAAkE,WACrC,KAAKX,EAAmBO,QAAS,OAAO9D,EAAAmE,aACxC,KAAKZ,EAAmBQ,MAAO,OAAO/D,EAAAoE,UACtC,QAEE,OADAJ,QAAO,GACA,IA5CXhE,EAAAqE,eAAAX,EAAAW,eACArE,EAAAsE,uBAAAZ,EAAAY,uBAIF,SAAYf,GAEVA,IAAA,eAEAA,IAAA,qBAEAA,IAAA,iBANF,CAAYA,EAAAvD,EAAAuD,qBAAAvD,EAAAuD,wBAUZvD,EAAA2D,6BAaa3D,EAAAkE,WAAqB,QAErBlE,EAAAmE,aAAuB,QAEvBnE,EAAAoE,UAAoB,QAEpBpE,EAAAuE,YAAsB,OAGnCvE,EAAAiE,4BAaA,IAAAO,EAAA,WAYE,SAAAA,EAAoBC,EAAWb,EAA8Bc,GAH7DpE,KAAAqE,MAAsB,KAIpBrE,KAAKmE,KAAOA,EACZnE,KAAKsD,SAAWA,EAChBtD,KAAKoE,QAAUA,EA4EnB,OAxESF,EAAAvC,OAAP,SACEwC,EACAb,EACAgB,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEA,IAAIJ,EAAUlB,EAAAc,uBAAuBG,GAIrC,OAHY,MAARG,IAAcF,EAAUA,EAAQK,QAAQ,MAAOH,IACvC,MAARC,IAAcH,EAAUA,EAAQK,QAAQ,MAAOF,IACvC,MAARC,IAAcJ,EAAUA,EAAQK,QAAQ,MAAOD,IAC5C,IAAIN,EAAkBC,EAAMb,EAAUc,IAIxCF,EAAAQ,WAAP,SACEP,EACAG,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEOL,EAAkBvC,OAAOwC,EAAMlB,EAAmBM,KAAMe,EAAMC,IAIhEL,EAAAS,cAAP,SACER,EACAG,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEOL,EAAkBvC,OAAOwC,EAAMlB,EAAmBO,QAASc,EAAMC,IAInEL,EAAAU,YAAP,SACET,EACAG,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEOL,EAAkBvC,OAAOwC,EAAMlB,EAAmBQ,MAAOa,EAAMC,IAIxEL,EAAAjC,UAAA4C,UAAA,SAAUR,GAER,OADArE,KAAKqE,MAAQA,EACNrE,MAITkE,EAAAjC,UAAA6C,SAAA,WACE,OAAI9E,KAAKqE,MAELhB,EAA2BrD,KAAKsD,UAChC,IACAtD,KAAKmE,KAAKW,SAAS,IACnB,MACA9E,KAAKoE,QACL,QACApE,KAAKqE,MAAMU,OAAOC,eAClB,IACAhF,KAAKqE,MAAMY,KAAKH,SAAS,IACzB,IACA9E,KAAKqE,MAAMa,OAAOJ,SAAS,IAI7BzB,EAA2BrD,KAAKsD,UAChC,IACAtD,KAAKmE,KAAKW,SAAS,IACnB,KACA9E,KAAKoE,SAGXF,EA3FA,GAqIA,SAAAiB,EAAwCd,EAAce,QAAA,IAAAA,OAAA,GAKpD,IAJA,IAAIC,EAAOhB,EAAMU,OAAOM,KACpBC,EAAMD,EAAKE,OACXC,EAAQnB,EAAMmB,MACdC,EAAMpB,EAAMoB,IACTD,EAAQ,IAAMrC,EAAAuC,YAAYL,EAAKM,WAAWH,EAAQ,KAAKA,IAC9D,KAAOC,EAAMH,IAAQnC,EAAAuC,YAAYL,EAAKM,WAAWF,KAAOA,IAMxD,IALA,IAAIG,GACF,MACAP,EAAKQ,UAAUL,EAAOC,GACtB,OAEKD,EAAQnB,EAAMmB,OACnBI,EAAGE,KAAK,KACRN,IAGF,GADIJ,GAAWQ,EAAGE,KAAKpG,EAAAoE,WACnBO,EAAMmB,OAASnB,EAAMoB,IACvBG,EAAGE,KAAK,UAER,KAAON,IAAUnB,EAAMoB,KAAKG,EAAGE,KAAK,KAGtC,OADIV,GAAWQ,EAAGE,KAAKpG,EAAAuE,aAChB2B,EAAGG,KAAK,IA5JJrG,EAAAwE,oBA8FbxE,EAAAsG,wBAAA,SACE5B,EACAgB,EACAa,QADA,IAAAb,OAAA,QACA,IAAAa,OAAA,GAIA,IAAIL,KAUJ,GATIR,GAAWQ,EAAGE,KAAKnC,EAA0BS,EAAQd,WACzDsC,EAAGE,KAAKzC,EAA2Be,EAAQd,WACvC8B,GAAWQ,EAAGE,KAAKpG,EAAAuE,aACvB2B,EAAGE,KAAK1B,EAAQD,KAAO,IAAO,MAAQ,OACtCyB,EAAGE,KAAK1B,EAAQD,KAAKW,SAAS,KAC9Bc,EAAGE,KAAK,MACRF,EAAGE,KAAK1B,EAAQA,SAGZA,EAAQC,MAAO,CAGjB,IAAIA,EAAQD,EAAQC,MAChB4B,IACFL,EAAGE,KAAK,MACRF,EAAGE,KAAKX,EAAwBf,EAAQC,MAAOe,KAGjDQ,EAAGE,KAAK,MACRF,EAAGE,KAAK,QACRF,EAAGE,KAAKzB,EAAMU,OAAOC,gBACrBY,EAAGE,KAAK,KACRF,EAAGE,KAAKzB,EAAMY,KAAKH,SAAS,KAC5Bc,EAAGE,KAAK,KACRF,EAAGE,KAAKzB,EAAMa,OAAOJ,SAAS,KAC9Bc,EAAGE,KAAK,KAEV,OAAOF,EAAGG,KAAK,KAIjBrG,EAAAyF,0BA2BA,IAAAe,EAAA,WAME,SAAAA,EAAsBC,QAAA,IAAAA,MAAA,MACpBnG,KAAKmG,YAAcA,GAAiD,IAAIC,MAkD5E,OA9CEF,EAAAjE,UAAAoE,eAAA,SACElC,EACAb,EACAe,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEA,IAAIJ,EAAUF,EAAkBvC,OAAOwC,EAAMb,EAAUgB,EAAMC,EAAMC,GAAMK,UAAUR,GACnFrE,KAAKmG,YAAYL,KAAK1B,IAMxB8B,EAAAjE,UAAAqE,KAAA,SACEnC,EACAE,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAxE,KAAKqG,eAAelC,EAAMlB,EAAmBM,KAAMc,EAAOC,EAAMC,EAAMC,IAIxE0B,EAAAjE,UAAAsE,QAAA,SACEpC,EACAE,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAxE,KAAKqG,eAAelC,EAAMlB,EAAmBO,QAASa,EAAOC,EAAMC,EAAMC,IAI3E0B,EAAAjE,UAAAuE,MAAA,SACErC,EACAE,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAxE,KAAKqG,eAAelC,EAAMlB,EAAmBQ,MAAOY,EAAOC,EAAMC,EAAMC,IAE3E0B,EAzDA,GAAsBxG,EAAAwG,mGCjOtB,IAaYO,EAUAC,EAvBZC,EAAAxG,EAAA,KAaA,SAAYsG,GACVA,IAAA,KAAOG,qBAAmB,OAC1BH,IAAA,IAAMI,sBAAoB,MAC1BJ,IAAA,IAAMK,sBAAoB,MAC1BL,IAAA,IAAMM,wBAAsB,MAC5BN,IAAA,IAAOO,wBAAsB,MAC7BP,IAAA,YAAcQ,4BAA0B,cACxCR,IAAA,KAAOS,qBAAmB,OAP5B,CAAYT,EAAA/G,EAAA+G,aAAA/G,EAAA+G,gBAUZ,SAAYC,GACVA,IAAA,QAAUS,sBAAoB,UAC9BT,IAAA,MAAQU,oBAAkB,QAC1BV,IAAA,GAAKW,iBAAe,KACpBX,IAAA,KAAOY,mBAAiB,OACxBZ,IAAA,MAAQa,oBAAkB,QAC1Bb,IAAA,OAASc,qBAAmB,SAC5Bd,IAAA,KAAOe,mBAAiB,OACxBf,IAAA,WAAagB,yBAAuB,aACpChB,IAAA,aAAeiB,2BAAyB,eACxCjB,IAAA,SAAWkB,uBAAqB,WAChClB,IAAA,SAAWmB,uBAAqB,WAChCnB,IAAA,UAAYoB,wBAAsB,YAClCpB,IAAA,UAAYqB,wBAAsB,YAClCrB,IAAA,KAAOsB,mBAAiB,OACxBtB,IAAA,MAAQuB,oBAAkB,QAC1BvB,IAAA,MAAQwB,oBAAkB,QAC1BxB,IAAA,MAAQyB,oBAAkB,QAC1BzB,IAAA,OAAS0B,qBAAmB,SAC5B1B,IAAA,OAAS2B,qBAAmB,SAC5B3B,IAAA,KAAO4B,mBAAiB,OACxB5B,IAAA,OAAS6B,qBAAmB,SAC5B7B,IAAA,KAAO8B,mBAAiB,OACxB9B,IAAA,IAAM+B,kBAAgB,MACtB/B,IAAA,YAAcgC,0BAAwB,cACtChC,IAAA,cAAgBiC,4BAA0B,gBAC1CjC,IAAA,UAAYkC,wBAAsB,YAClClC,IAAA,WAAamC,yBAAuB,aACpCnC,IAAA,WAAaoC,yBAAuB,aA5BtC,CAAYpC,EAAAhH,EAAAgH,eAAAhH,EAAAgH,kBA+BZ,SAAYqC,GACVA,IAAA,OAASC,qBAAmB,SAC5BD,IAAA,OAASE,qBAAmB,SAC5BF,IAAA,UAAYG,wBAAsB,YAClCH,IAAA,OAASI,uBAAqB,SAC9BJ,IAAA,OAASK,uBAAqB,SAC9BL,IAAA,QAAUM,wBAAsB,UAChCN,IAAA,SAAWO,yBAAuB,WAClCP,IAAA,SAAWQ,yBAAuB,WAClCR,IAAA,WAAaS,2BAAyB,aACtCT,IAAA,QAAUU,wBAAsB,UAChCV,IAAA,OAASW,qBAAmB,SAC5BX,IAAA,OAASY,qBAAmB,SAC5BZ,IAAA,OAASa,qBAAmB,SAC5Bb,IAAA,UAAYc,wBAAsB,YAClCd,IAAA,OAASe,uBAAqB,SAC9Bf,IAAA,OAASgB,uBAAqB,SAC9BhB,IAAA,QAAUiB,wBAAsB,UAChCjB,IAAA,SAAWkB,yBAAuB,WAClClB,IAAA,SAAWmB,yBAAuB,WAClCnB,IAAA,WAAaoB,2BAAyB,aACtCpB,IAAA,QAAUqB,wBAAsB,UAChCrB,IAAA,OAASsB,qBAAmB,SAC5BtB,IAAA,UAAYuB,yBAAuB,YACnCvB,IAAA,UAAYwB,yBAAuB,YACnCxB,IAAA,QAAUyB,sBAAoB,UAC9BzB,IAAA,cAAgB0B,iCAA+B,gBAC/C1B,IAAA,cAAgB2B,iCAA+B,gBAC/C3B,IAAA,cAAgB4B,iCAA+B,gBAC/C5B,IAAA,cAAgB6B,iCAA+B,gBAC/C7B,IAAA,cAAgB8B,iCAA+B,gBAC/C9B,IAAA,cAAgB+B,iCAA+B,gBAC/C/B,IAAA,cAAgBgC,iCAA+B,gBAC/ChC,IAAA,cAAgBiC,iCAA+B,gBAC/CjC,IAAA,eAAiBkC,+BAA6B,iBAC9ClC,IAAA,eAAiBmC,+BAA6B,iBAC9CnC,IAAA,gBAAkBoC,mCAAiC,kBACnDpC,IAAA,gBAAkBqC,mCAAiC,kBACnDrC,IAAA,gBAAkBsC,mCAAiC,kBACnDtC,IAAA,gBAAkBuC,mCAAiC,kBACnDvC,IAAA,gBAAkBwC,mCAAiC,kBACnDxC,IAAA,gBAAkByC,mCAAiC,kBACnDzC,IAAA,gBAAkB0C,mCAAiC,kBACnD1C,IAAA,gBAAkB2C,mCAAiC,kBACnD3C,IAAA,WAAa4C,2BAAyB,aACtC5C,IAAA,UAAY6C,0BAAwB,YACpC7C,IAAA,eAAiB8C,6BAA2B,iBAC5C9C,IAAA,eAAiB+C,6BAA2B,iBAG5C/C,IAAA,cAAgBgD,0BAAwB,gBACxChD,IAAA,eAAiBiD,2BAAyB,iBAC1CjD,IAAA,cAAgBkD,0BAAwB,gBACxClD,IAAA,eAAiBmD,2BAAyB,iBAC1CnD,IAAA,eAAiBoD,2BAAyB,iBAtD5C,CAAYzM,EAAAqJ,UAAArJ,EAAAqJ,aAmEZ,SAAYqD,GACVA,IAAA,OAASC,qBAAmB,SAC5BD,IAAA,OAASE,qBAAmB,SAC5BF,IAAA,OAASG,qBAAmB,SAC5BH,IAAA,OAASI,sBAAoB,SAC7BJ,IAAA,OAASK,sBAAoB,SAC7BL,IAAA,OAASM,sBAAoB,SAC7BN,IAAA,OAASO,sBAAoB,SAC7BP,IAAA,OAASQ,qBAAmB,SAC5BR,IAAA,MAAQS,oBAAkB,QAC1BT,IAAA,OAASU,qBAAmB,SAC5BV,IAAA,OAASW,qBAAmB,SAC5BX,IAAA,OAASY,sBAAoB,SAC7BZ,IAAA,OAASa,sBAAoB,SAC7Bb,IAAA,QAAUc,sBAAoB,UAC9Bd,IAAA,QAAUe,sBAAoB,UAC9Bf,IAAA,MAAQgB,oBAAkB,QAC1BhB,IAAA,MAAQiB,oBAAkB,QAC1BjB,IAAA,MAAQkB,qBAAmB,QAC3BlB,IAAA,MAAQmB,qBAAmB,QAC3BnB,IAAA,MAAQoB,qBAAmB,QAC3BpB,IAAA,MAAQqB,qBAAmB,QAC3BrB,IAAA,MAAQsB,qBAAmB,QAC3BtB,IAAA,MAAQuB,qBAAmB,QAC3BvB,IAAA,MAAQwB,qBAAmB,QAC3BxB,IAAA,MAAQyB,qBAAmB,QAC3BzB,IAAA,OAAS0B,qBAAmB,SAC5B1B,IAAA,OAAS2B,qBAAmB,SAC5B3B,IAAA,OAAS4B,qBAAmB,SAC5B5B,IAAA,OAAS6B,sBAAoB,SAC7B7B,IAAA,OAAS8B,sBAAoB,SAC7B9B,IAAA,OAAS+B,sBAAoB,SAC7B/B,IAAA,OAASgC,sBAAoB,SAC7BhC,IAAA,OAASiC,qBAAmB,SAC5BjC,IAAA,MAAQkC,oBAAkB,QAC1BlC,IAAA,OAASmC,qBAAmB,SAC5BnC,IAAA,OAASoC,qBAAmB,SAC5BpC,IAAA,OAASqC,sBAAoB,SAC7BrC,IAAA,OAASsC,sBAAoB,SAC7BtC,IAAA,QAAUuC,sBAAoB,UAC9BvC,IAAA,QAAUwC,sBAAoB,UAC9BxC,IAAA,MAAQyC,oBAAkB,QAC1BzC,IAAA,MAAQ0C,oBAAkB,QAC1B1C,IAAA,MAAQ2C,qBAAmB,QAC3B3C,IAAA,MAAQ4C,qBAAmB,QAC3B5C,IAAA,MAAQ6C,qBAAmB,QAC3B7C,IAAA,MAAQ8C,qBAAmB,QAC3B9C,IAAA,MAAQ+C,qBAAmB,QAC3B/C,IAAA,MAAQgD,qBAAmB,QAC3BhD,IAAA,MAAQiD,qBAAmB,QAC3BjD,IAAA,MAAQkD,qBAAmB,QAC3BlD,IAAA,OAASmD,uBAAqB,SAC9BnD,IAAA,OAASoD,uBAAqB,SAC9BpD,IAAA,OAASqD,uBAAqB,SAC9BrD,IAAA,OAASsD,uBAAqB,SAC9BtD,IAAA,YAAcuD,4BAA0B,cACxCvD,IAAA,OAASwD,uBAAqB,SAC9BxD,IAAA,OAASyD,uBAAqB,SAC9BzD,IAAA,MAAQ0D,sBAAoB,QAC5B1D,IAAA,MAAQ2D,sBAAoB,QAC5B3D,IAAA,MAAQ4D,sBAAoB,QAC5B5D,IAAA,MAAQ6D,sBAAoB,QAC5B7D,IAAA,MAAQ8D,sBAAoB,QAC5B9D,IAAA,MAAQ+D,sBAAoB,QAC5B/D,IAAA,OAASgE,uBAAqB,SAC9BhE,IAAA,OAASiE,uBAAqB,SAC9BjE,IAAA,OAASkE,uBAAqB,SAC9BlE,IAAA,OAASmE,uBAAqB,SAC9BnE,IAAA,YAAcoE,4BAA0B,cACxCpE,IAAA,OAASqE,uBAAqB,SAC9BrE,IAAA,OAASsE,uBAAqB,SAC9BtE,IAAA,MAAQuE,sBAAoB,QAC5BvE,IAAA,MAAQwE,sBAAoB,QAC5BxE,IAAA,MAAQyE,sBAAoB,QAC5BzE,IAAA,MAAQ0E,sBAAoB,QAC5B1E,IAAA,MAAQ2E,sBAAoB,QAC5B3E,IAAA,MAAQ4E,sBAAoB,QA5E9B,CAAYtR,EAAA0M,WAAA1M,EAAA0M,cA+EZ,SAAY6E,GACVA,IAAA,SAAWC,qBAAmB,WAC9BD,IAAA,cAAgBE,0BAAwB,gBACxCF,IAAA,WAAaG,uBAAqB,aAClCH,IAAA,WAAaI,uBAAqB,aAJpC,CAAY3R,EAAAuR,SAAAvR,EAAAuR,YAWZ,SAAYK,GACVA,IAAA,IAAMC,yBAAuB,MAC7BD,IAAA,IAAME,yBAAuB,MAC7BF,IAAA,IAAMG,yBAAuB,MAC7BH,IAAA,GAAKI,wBAAsB,KAC3BJ,IAAA,IAAMK,yBAAuB,MAC7BL,IAAA,KAAOM,0BAAwB,OANjC,CAAYlS,EAAA4R,cAAA5R,EAAA4R,iBASZ,IAAAO,EAAA,oBAAAA,KAWA,OANSA,EAAAlQ,OAAP,SAAcmQ,EAAoBC,GAChC,IAAIC,EAAU,IAAIH,EAGlB,OAFAG,EAAQF,OAASA,EACjBE,EAAQD,OAASA,EACVC,GAEXH,EAXA,GAAanS,EAAAmS,gBAab,IAAAI,EAAA,WA+BE,SAAAA,IAsZQjS,KAAAkS,oBAA6B,EAC7BlS,KAAAmS,sBAA6B,EA+P7BnS,KAAAoS,qBAA8B,EAC9BpS,KAAAqS,sBAA+B,EA6KzC,OAv1BSJ,EAAAtQ,OAAP,WACE,IAAIhC,EAAS,IAAIsS,EAGjB,OAFAtS,EAAO2S,IAAMC,wBACb5S,EAAO6S,cAAgBC,gBAAgB,IAChC9S,GAGFsS,EAAAS,WAAP,SAAkBZ,GAChB,IAAIa,EAAOC,EAAad,GACxB,IACE,IAAInS,EAAS,IAAIsS,EAGjB,OAFAtS,EAAO2S,IAAMO,oBAAoBF,EAAMb,EAAOvM,QAC9C5F,EAAO6S,cAAgBC,gBAAgB,IAChC9S,UAEPmT,YAAYC,WAAkBJ,MAQlCV,EAAAhQ,UAAA+Q,gBAAA,SACEpS,EACAqS,EACAC,GAEA,IAAIC,EAAOC,EAAYxS,GACnB+R,EAAOU,EAAcH,GACzB,IACE,OAAOI,yBAAyBtT,KAAKsS,IAAKa,EAAMF,EAAQN,EAAMO,EAAaA,EAAW3N,OAAS,WAE/FuN,YAAYH,GACZG,YAAYK,KAIhBlB,EAAAhQ,UAAAsR,2BAAA,SACEN,EACAC,GAEA,IAAIP,EAAOU,EAAcH,GACzB,IACE,OAAOM,oCAAoCxT,KAAKsS,IAAKW,EAAQN,EAAMO,EAAaA,EAAW3N,OAAS,WAEpGuN,YAAYH,KAIhBV,EAAAhQ,UAAAwR,mBAAA,SAAmB7S,GACjB,IAAIuS,EAAOC,EAAYxS,GACvB,IACE8S,4BAA4B1T,KAAKsS,IAAKa,WAEtCL,YAAYK,KAMhBlB,EAAAhQ,UAAA0R,UAAA,SAAUrS,GACR,IAAIsS,EAAM5T,KAAKwS,cAEf,OADAqB,sBAAsBD,EAAKtS,GACpBwS,eAAe9T,KAAKsS,IAAKsB,IAGlC3B,EAAAhQ,UAAA8R,UAAA,SAAUC,EAAeC,QAAA,IAAAA,MAAA,GACvB,IAAIL,EAAM5T,KAAKwS,cAEf,OADA0B,sBAAsBN,EAAKI,EAAUC,GAC9BH,eAAe9T,KAAKsS,IAAKsB,IAGlC3B,EAAAhQ,UAAAkS,UAAA,SAAU7S,GACR,IAAIsS,EAAM5T,KAAKwS,cAEf,OADA4B,wBAAwBR,EAAKtS,GACtBwS,eAAe9T,KAAKsS,IAAKsB,IAGlC3B,EAAAhQ,UAAAoS,UAAA,SAAU/S,GACR,IAAIsS,EAAM5T,KAAKwS,cAEf,OADA8B,wBAAwBV,EAAKtS,GACtBwS,eAAe9T,KAAKsS,IAAKsB,IAKlC3B,EAAAhQ,UAAAsS,YAAA,SACEC,EACAC,GAEA,OAAOC,eAAe1U,KAAKsS,IAAKkC,EAAIC,IAGtCxC,EAAAhQ,UAAA0S,aAAA,SACEH,EACAI,EACAC,GAEA,OAAOC,gBAAgB9U,KAAKsS,IAAKkC,EAAII,EAAMC,IAG7C5C,EAAAhQ,UAAA8S,WAAA,SACEP,EACA5T,EACAoU,QADA,IAAApU,MAAA,WACA,IAAAoU,MAAA,MAEA,IAAI7B,EAAOC,EAAYxS,GACnB+R,EAAOsC,EAAcD,GACzB,IACE,OAAOE,cAAclV,KAAKsS,IAAKkC,EAAIrB,EAAMR,EAAMqC,EAA6BA,EAAUzP,OAAS,WAE/FuN,YAAYH,GACZG,YAAYK,KAIhBlB,EAAAhQ,UAAAkT,eAAA,SACEC,EACAC,GAEA,OAAOC,kBAAkBtV,KAAKsS,IAAK8C,EAAOC,IAG5CpD,EAAAhQ,UAAAsT,eAAA,SACEH,EACA9T,GAEA,OAAOkU,kBAAkBxV,KAAKsS,IAAK8C,EAAO9T,IAG5C2Q,EAAAhQ,UAAAwT,gBAAA,SACE7U,EACAyU,GAEA,IAAIlC,EAAOC,EAAYxS,GACvB,IACE,OAAO8U,mBAAmB1V,KAAKsS,IAAKa,EAAMkC,WAE1CvC,YAAYK,KAIhBlB,EAAAhQ,UAAA0T,WAAA,SACEC,EACAC,EACAC,EACAT,EACAtD,GAEA,YAFA,IAAAA,MAAA,GAEOgE,cAAc/V,KAAKsS,IAAKsD,EAAOC,EAAS,EAAI,EAAG9D,EAA6B6D,EAAOP,EAAMS,IAGlG7D,EAAAhQ,UAAA+T,YAAA,SACEJ,EACAE,EACAxU,EACA+T,EACAtD,GAEA,YAFA,IAAAA,MAAA,GAEOkE,eAAejW,KAAKsS,IAAKsD,EAAO7D,EAA6B6D,EAAOE,EAAKxU,EAAO+T,IAGzFpD,EAAAhQ,UAAAiU,iBAAA,SACEN,EACAE,EACAT,EACAtD,GAEA,YAFA,IAAAA,MAAA,GAEOoE,oBAAoBnW,KAAKsS,IAAKsD,EAAO7D,EAAQsD,EAAMS,IAG5D7D,EAAAhQ,UAAAmU,kBAAA,SACER,EACAE,EACAxU,EACA+T,EACAtD,GAEA,YAFA,IAAAA,MAAA,GAEOsE,qBAAqBrW,KAAKsS,IAAKsD,EAAO7D,EAAQ+D,EAAKxU,EAAO+T,IAGnEpD,EAAAhQ,UAAAqU,gBAAA,SACE9B,EACAoB,EACA7D,EACA+D,EACAxU,EACA+T,GAEA,OAAOkB,mBAAmBvW,KAAKsS,IAAKkC,EAAIoB,EAAO7D,EAAQ+D,EAAKxU,EAAO+T,IAGrEpD,EAAAhQ,UAAAuU,oBAAA,SACEZ,EACA7D,EACA+D,EACAW,EACAC,EACArB,GAEA,OAAOsB,uBAAuB3W,KAAKsS,IAAKsD,EAAO7D,EAAQ+D,EAAKW,EAAUC,EAAarB,IAGrFpD,EAAAhQ,UAAA2U,iBAAA,SACEd,EACAW,EACAI,EACAC,GAEA,OAAOC,oBAAoB/W,KAAKsS,IAAKwD,EAAKW,EAAUI,EAASC,IAG/D7E,EAAAhQ,UAAA+U,iBAAA,SACElB,EACAmB,GAEA,OAAOC,oBAAoBlX,KAAKsS,IAAKwD,EAAKmB,IAK5ChF,EAAAhQ,UAAAkV,eAAA,SACE/B,EACA9T,GAEA,OAAO8V,kBAAkBpX,KAAKsS,IAAK8C,EAAO9T,IAG5C2Q,EAAAhQ,UAAAoV,gBAAA,SACEzW,EACAU,GAEA,IAAI6R,EAAOC,EAAYxS,GACvB,IACE,OAAO0W,mBAAmBtX,KAAKsS,IAAKa,EAAM7R,WAE1CwR,YAAYK,KAIhBlB,EAAAhQ,UAAAsV,YAAA,SACEC,EACAC,EACApC,QAAA,IAAAA,MAAmB5O,EAAWiR,MAE9B,IAAIvE,EAAOC,EAAYoE,GACnB7E,EAAOsC,EAAcwC,GACzB,IACE,OAAOE,eAAe3X,KAAKsS,IAAKa,EAAMR,EAAM8E,EAASlS,OAAQ8P,WAE7DvC,YAAYH,GACZG,YAAYK,KAIhBlB,EAAAhQ,UAAA2V,YAAA,SACEJ,EACAK,EACAvW,QADA,IAAAuW,MAAA,QACA,IAAAvW,MAAA,GAEA,IAAI6R,EAAOC,EAAYoE,GACvB,IACE,OAAOM,eAAe9X,KAAKsS,IAAKa,EAAM0E,EAAWvW,WAEjDwR,YAAYK,KAIhBlB,EAAAhQ,UAAA8V,WAAA,SACEC,GAEA,OAAOC,cAAcjY,KAAKsS,IAAK0F,IAGjC/F,EAAAhQ,UAAAiW,WAAA,SACEV,EACAW,GAEA,IAAIhF,EAAOC,EAAYoE,GACvB,IACE,OAAOY,cAAcpY,KAAKsS,IAAKa,EAAMgF,WAErCrF,YAAYK,KAIhBlB,EAAAhQ,UAAAoW,SAAA,SACER,EACAS,EACAC,GAEA,YAFA,IAAAA,MAAA,GAEOC,YAAYxY,KAAKsS,IAAKuF,EAAWS,EAAQC,IAGlDtG,EAAAhQ,UAAAwW,UAAA,WACE,OAAOC,aAAa1Y,KAAKsS,MAG3BL,EAAAhQ,UAAA0W,aAAA,SACEX,GAEA,YAFA,IAAAA,MAAA,GAEOY,gBAAgB5Y,KAAKsS,IAAK0F,IAGnC/F,EAAAhQ,UAAA4W,aAAA,SACEP,EACAC,EACAV,GAEA,OAAOiB,gBAAgB9Y,KAAKsS,IAAKuF,EAAWS,EAAQC,IAGtDtG,EAAAhQ,UAAA8W,aAAA,SACEC,EACAC,EACApB,EACAvW,QAAA,IAAAA,MAAA,GAIA,IAFA,IAAI4X,EAAWF,EAAMzT,OACjB4T,EAAO,IAAI/S,MAAa8S,GACnB7Y,EAAI,EAAGA,EAAI6Y,IAAY7Y,EAC9B8Y,EAAK9Y,GAAK+S,EAAY4F,EAAM3Y,IAE9B,IAAIsS,EAAOU,EAAc8F,GACrBhG,EAAOC,EAAY6F,GACvB,IACE,OAAOG,gBAAgBpZ,KAAKsS,IAAKK,EAAMuG,EAAU/F,EAAM0E,EAAWvW,WAElEwR,YAAYK,GACZL,YAAYH,GACZ,IAAStS,EAAI6Y,EAAW,EAAG7Y,GAAK,IAAKA,EAAGyS,YAAYqG,EAAK9Y,MAI7D4R,EAAAhQ,UAAAoX,WAAA,SACEC,EACAtE,EACAuE,GAEA,IAAIpG,EAAOC,EAAYkG,GACnB3G,EAAOsC,EAAcD,GACzB,IACE,OAAOwE,cAAcxZ,KAAKsS,IAAKa,EAAMR,EAAMqC,GAAYA,EAASzP,QAAU,EAAGgU,WAE7EzG,YAAYH,GACZG,YAAYK,KAIhBlB,EAAAhQ,UAAAwX,iBAAA,SACEH,EACAtE,EACAuE,GAEA,IAAIpG,EAAOC,EAAYkG,GACnB3G,EAAOsC,EAAcD,GACzB,IACE,OAAO0E,oBAAoB1Z,KAAKsS,IAAKa,EAAMR,EAAMqC,GAAYA,EAASzP,QAAU,EAAGgU,WAEnFzG,YAAYH,GACZG,YAAYK,KAIhBlB,EAAAhQ,UAAA0X,mBAAA,SACEvE,EACAJ,EACA4E,GAEA,IAAIjH,EAAOsC,EAAcD,GACrB7B,EAAOC,EAAYwG,GACvB,IACE,OAAOC,sBAAsB7Z,KAAKsS,IAAK8C,EAAOzC,EAAMqC,GAAYA,EAASzP,QAAU,EAAG4N,WAEtFL,YAAYK,GACZL,YAAYH,KAIhBV,EAAAhQ,UAAA6X,kBAAA,WACE,OAAOC,qBAAqB/Z,KAAKsS,MAKnCL,EAAAhQ,UAAA+X,UAAA,SACEpZ,EACAyU,EACA4E,EACAC,GAEA,IAAI/G,EAAOC,EAAYxS,GACvB,IACE,OAAOuZ,mBAAmBna,KAAKsS,IAAKa,EAAMkC,EAAM4E,EAAU,EAAI,EAAGC,WAEjEpH,YAAYK,KAIhBlB,EAAAhQ,UAAAmY,YAAA,SACExZ,EACAyU,EACAgF,EACAlC,GAEA,IAAIhF,EAAOC,EAAYxS,GACnB+R,EAAOU,EAAcgH,GACzB,IACE,OAAOC,qBAAqBta,KAAKsS,IAAKa,EAAMkC,EAAM1C,EAAM0H,EAAWA,EAAS9U,OAAS,EAAG4S,WAExFrF,YAAYH,GACZG,YAAYK,KAIhBlB,EAAAhQ,UAAAsY,eAAA,SAAe3Z,GACb,IAAIuS,EAAOC,EAAYxS,GACvB,IACE4Z,wBAAwBxa,KAAKsS,IAAKa,WAElCL,YAAYK,KAOhBlB,EAAAhQ,UAAAwY,qBAAA,SAAqBxH,EAAoBC,EAAiCiF,GACxEnY,KAAKmS,qBAAuBzO,QAAQ1D,KAAKmS,sBACzC,IAAIuI,EAAW1a,KAAKkS,oBACfwI,IAAU1a,KAAKkS,oBAAsBwI,EAAWtH,EAAY,KACjE,IAAIT,EAAOU,EAAcH,GACzB,IACE,IAAIyH,EAAUrH,yBAAyBtT,KAAKsS,IAAKoI,EAAUzH,EAAQN,EAAMO,EAAaA,EAAW3N,OAAS,GAC1G,OAAO+U,qBAAqBta,KAAKsS,IAAKoI,EAAUC,EAAS,EAAG,EAAGxC,WAE/DrF,YAAYH,KAIhBV,EAAAhQ,UAAA2Y,wBAAA,WACE5a,KAAKmS,sBAAwBzO,OAAO1D,KAAKmS,sBACzC,IAAIuI,EAAWhX,OAAO1D,KAAKkS,qBAC3BsI,wBAAwBxa,KAAKsS,IAAKoI,GAClChH,4BAA4B1T,KAAKsS,IAAKoI,IAGxCzI,EAAAhQ,UAAA4Y,kBAAA,SACEC,EACAC,GAEA,IAAIC,EAAQ5H,EAAY0H,GACpBG,EAAQ7H,EAAY2H,GACxB,IACE,OAAOG,2BAA2Blb,KAAKsS,IAAK0I,EAAOC,WAEnDnI,YAAYmI,GACZnI,YAAYkI,KAIhB/I,EAAAhQ,UAAAkZ,eAAA,SACEL,EACAC,GAEA,IAAIC,EAAQ5H,EAAY0H,GACpBG,EAAQ7H,EAAY2H,GACxB,IACE,OAAOK,wBAAwBpb,KAAKsS,IAAK0I,EAAOC,WAEhDnI,YAAYmI,GACZnI,YAAYkI,KAIhB/I,EAAAhQ,UAAAoZ,gBAAA,SACEP,EACAC,GAEA,IAAIC,EAAQ5H,EAAY0H,GACpBG,EAAQ7H,EAAY2H,GACxB,IACE,OAAOO,yBAAyBtb,KAAKsS,IAAK0I,EAAOC,WAEjDnI,YAAYmI,GACZnI,YAAYkI,KAIhB/I,EAAAhQ,UAAAsZ,gBAAA,SACET,EACAC,GAEA,IAAIC,EAAQ5H,EAAY0H,GACpBG,EAAQ7H,EAAY2H,GACxB,IACE,OAAOS,yBAAyBxb,KAAKsS,IAAK0I,EAAOC,WAEjDnI,YAAYmI,GACZnI,YAAYkI,KAIhB/I,EAAAhQ,UAAAwZ,aAAA,SAAaV,GACX,IAAI5H,EAAOC,EAAY2H,GACvB,IACEW,sBAAsB1b,KAAKsS,IAAKa,WAEhCL,YAAYK,KAIhBlB,EAAAhQ,UAAA0Z,kBAAA,SACEb,EACAc,EACAC,EACAC,GAEA,IAAId,EAAQ5H,EAAY0H,GACpBG,EAAQ7H,EAAYwI,GACpBG,EAAQ3I,EAAYyI,GACxB,IACE,OAAOG,2BAA2Bhc,KAAKsS,IAAK0I,EAAOC,EAAOc,EAAOD,WAEjEhJ,YAAYiJ,GACZjJ,YAAYmI,GACZnI,YAAYkI,KAIhB/I,EAAAhQ,UAAAga,eAAA,SACEnB,EACAc,EACAC,GAEA,IAAIb,EAAQ5H,EAAY0H,GACpBG,EAAQ7H,EAAYwI,GACpBG,EAAQ3I,EAAYyI,GACxB,IACE,OAAOK,wBAAwBlc,KAAKsS,IAAK0I,EAAOC,EAAOc,WAEvDjJ,YAAYiJ,GACZjJ,YAAYmI,GACZnI,YAAYkI,KAIhB/I,EAAAhQ,UAAAka,gBAAA,SACErB,EACAc,EACAC,GAEA,IAAIb,EAAQ5H,EAAY0H,GACpBG,EAAQ7H,EAAYwI,GACpBG,EAAQ3I,EAAYyI,GACxB,IACE,OAAOO,yBAAyBpc,KAAKsS,IAAK0I,EAAOC,EAAOc,WAExDjJ,YAAYiJ,GACZjJ,YAAYmI,GACZnI,YAAYkI,KAIhB/I,EAAAhQ,UAAAoa,gBAAA,SACEvB,EACAc,EACAC,EACAS,GAEA,IAAItB,EAAQ5H,EAAY0H,GACpBG,EAAQ7H,EAAYwI,GACpBG,EAAQ3I,EAAYyI,GACxB,IACE,OAAOU,yBAAyBvc,KAAKsS,IAAK0I,EAAOC,EAAOc,EAAOO,WAE/DxJ,YAAYiJ,GACZjJ,YAAYmI,GACZnI,YAAYkI,KAIhB/I,EAAAhQ,UAAAua,aAAA,SAAa1B,GACX,IAAI3H,EAAOC,EAAY0H,GACvB,IACE2B,sBAAsBzc,KAAKsS,IAAKa,WAEhCL,YAAYK,KAIhBlB,EAAAhQ,UAAAya,UAAA,SACEC,EACAC,EACAC,EACAvD,EACAwD,QAAA,IAAAA,MAAA,MAOA,IALA,IAAI3J,EAAOC,EAAY0J,GACnBC,EAAIF,EAAStX,OACbyX,EAAO,IAAI5W,MAAa2W,GACxBE,EAAO,IAAI7W,MAAqB2W,GAChCG,EAAO,IAAI9W,MAAa2W,GACnB1c,EAAI,EAAGA,EAAI0c,IAAK1c,EAAG,CAC1B,IAAIyR,EAAS+K,EAASxc,GAAGyR,OACrBC,EAAS8K,EAASxc,GAAG0R,OACzBiL,EAAK3c,GAAKuS,EAAad,GACvBmL,EAAK5c,GAAKiZ,GAAU3S,EAAAwW,OAAOC,OACvBpd,KAAK+T,UAAUsJ,QAAQtL,GAASuL,SAASvL,IACzC/R,KAAK2T,UAAU0J,QAAQtL,IAC3BmL,EAAK7c,GAAKyR,EAAOvM,OAEnB,IAAIgY,EAAQlK,EAAc2J,GACtBQ,EAAQnK,EAAc4J,GACtBQ,EAAQpK,EAAc6J,GAC1B,IACEQ,mBAAmB1d,KAAKsS,IAAKqK,EAASC,EAASzJ,EAAMoK,EAAOC,EAAOC,EAAOV,WAE1EjK,YAAY2K,GACZ3K,YAAY0K,GACZ1K,YAAYyK,GACZ,IAASld,EAAI0c,EAAI,EAAG1c,GAAK,IAAKA,EAAGyS,YAAYkK,EAAK3c,IAClDyS,YAAYK,KAIhBlB,EAAAhQ,UAAA0b,iBAAA,SAAiBC,GACf,IAAIjL,EAAOsC,EAAc2I,GACzB,IACEC,0BAA0B7d,KAAKsS,IAAKK,EAAMiL,EAAMrY,gBAEhDuN,YAAYH,KAIhBV,EAAAhQ,UAAA6b,SAAA,SAASC,GACPC,kBAAkBhe,KAAKsS,IAAKyL,IAG9B9L,EAAAhQ,UAAAgc,iBAAA,SAAiBC,QAAA,IAAAA,MAAA,GACfC,0BAA0BD,IAG5BjM,EAAAhQ,UAAAmc,eAAA,SAAeF,QAAA,IAAAA,MAAA,GACbG,wBAAwBH,IAG1BjM,EAAAhQ,UAAAqc,aAAA,SAAaC,QAAA,IAAAA,OAAA,GACXC,sBAAsBD,IAGxBtM,EAAAhQ,UAAAwc,SAAA,SAASV,QAAA,IAAAA,MAAA,GACHA,EACFW,0BAA0BX,EAAM/d,KAAKsS,KAErCqM,wBAAwB3e,KAAKsS,MAIjCL,EAAAhQ,UAAA2c,UAAA,SAAUC,EAAkBd,QAAA,IAAAA,MAAA,GAG1B,IAFA,IAAI7E,EAAW2F,EAAOtZ,OAClByT,EAAQ,IAAI5S,MAAa8S,GACpB7Y,EAAI,EAAGA,EAAI6Y,IAAY7Y,EAC9B2Y,EAAM3Y,GAAK+S,EAAYyL,EAAOxe,IAEhC,IAAIsS,EAAOU,EAAc2F,GACzB,IACM+E,EACFe,2BAA2Bf,EAAM/d,KAAKsS,IAAKK,EAAMuG,GAEjD6F,yBAAyB/e,KAAKsS,IAAKK,EAAMuG,WAG3CpG,YAAYH,GACZ,IAAStS,EAAI6Y,EAAU7Y,GAAK,IAAKA,EAC/ByS,YAAYkG,EAAM3Y,MAQxB4R,EAAAhQ,UAAA+c,mBAAA,SAAmBjB,GACjB,IAAI/E,EAAQhZ,KAAKqS,sBACjB,IAAK2G,EAAO,CACV,IAAIpY,EAAOwS,EAAY,cACvBpT,KAAKoS,qBAAuBxR,EAC5BZ,KAAKqS,sBAAwB2G,EAAQ3F,GAAgBzS,IAEvDke,2BAA2Bf,EAAM/d,KAAKsS,IAAK0G,EAAO,IAGpD/G,EAAAhQ,UAAAgd,SAAA,WACE,OAA4C,GAArCC,wBAAwBlf,KAAKsS,MAGtCL,EAAAhQ,UAAAkd,UAAA,WACEC,yBAAyBpf,KAAKsS,MAGhCL,EAAAhQ,UAAAod,SAAA,SAASC,GACP,IAAI1L,EAAM5T,KAAKwS,cACXW,EAAOC,EAAYkM,GACnBC,EAAmB,EACnBC,EAAsB,EAC1B,IACEC,gCAAgC7L,EAAK5T,KAAKsS,IAAKa,GAC/CoM,EAAYG,EAAQ9L,GACpB,IAAI+L,EAAcD,EAAQ9L,EAAM,GAChC4L,EAAeE,EAAQ9L,EAAM,GAC7B,IAAIgM,EAAM,IAAIC,EAGd,OAFAD,EAAIE,OAqhBV,SAAoBhK,EAAYvQ,GAE9B,IADA,IAAIqa,EAAM,IAAIG,WAAWxa,GAChBlF,EAAW,EAAGA,EAAIkF,IAAUlF,EACnCuf,EAAIvf,GAAK2f,KAASlK,EAAMzV,GAE1B,OAAOuf,EA1hBUK,CAAWV,EAAWI,GACnCC,EAAIM,UAAYC,EAAWX,GACpBI,UAEHzM,GAAML,YAAYK,GAClBoM,GAAWzM,YAAYyM,GACvBC,GAAc1M,YAAY0M,KAIlCvN,EAAAhQ,UAAAme,OAAA,WACE,MAAM,IAAIC,MAAM,oBAGlBpO,EAAAhQ,UAAAqe,QAAA,WACE,MAAM,IAAID,MAAM,oBAGlBpO,EAAAhQ,UAAAse,QAAA,WACE7c,OAAO1D,KAAKsS,KACZQ,YAAY9S,KAAKwS,eACjBM,YAAY9S,KAAKkS,qBACjBY,YAAY9S,KAAKoS,sBACjBU,YAAY9S,KAAKqS,uBACjBmO,uBAAuBxgB,KAAKsS,KAC5BtS,KAAKsS,IAAM,GAGbL,EAAAhQ,UAAAwe,eAAA,WACE,OAAOC,EAAS/e,OAAO3B,OAGzBiS,EAAAhQ,UAAA0e,gBAAA,SACElM,EACAmM,EACAC,GAEA,QAHA,IAAAD,OAAA,QACA,IAAAC,MAAgBC,IAAIC,WAEhBF,EAAW,EAAG,OAAO,EAGzB,IAAIG,EACAC,EAEA,OALJJ,GAAY,EAKAK,yBAAyBzM,IACnC,KAAK/N,EAAaya,MAChB,OAAQC,2BAA2B3M,IACjC,KAAKhO,EAAW4a,IACd,OAAOrhB,KAAK2T,UAAU2N,0BAA0B7M,IAElD,KAAKhO,EAAW8a,IACd,OAAOvhB,KAAK+T,UACVyN,6BAA6B/M,GAC7BgN,8BAA8BhN,IAGlC,KAAKhO,EAAWib,IACd,OAAO1hB,KAAKmU,UAAUwN,0BAA0BlN,IAElD,KAAKhO,EAAWmb,IACd,OAAO5hB,KAAKqU,UAAUwN,0BAA0BpN,IAElD,QACE,MAAM,IAAI4L,MAAM,0BAItB,KAAK3Z,EAAaob,SAChB,OAAOxM,kBAAkBtV,KAAKsS,IAC5ByP,0BAA0BtN,GAC1B2M,2BAA2B3M,IAG/B,KAAK/N,EAAasb,UAChB,IAAIC,EAAaC,0BAA0BzN,GAC3C,IAAKwN,EAAY,MACjB,OAAOvM,mBAAmB1V,KAAKsS,IAAK2P,EAAYb,2BAA2B3M,IAE7E,KAAK/N,EAAayb,KAChB,KAAMnB,EAAUhhB,KAAK2gB,gBAAgByB,oBAAoB3N,GAAOmM,EAAeC,IAC7E,MAEF,OACEwB,sBAAsB5N,GAClB0B,oBAAoBnW,KAAKsS,IACvBgQ,sBAAsB7N,GACtB8N,uBAAuB9N,GACvB2M,2BAA2B3M,GAC3BuM,GAEFjL,cAAc/V,KAAKsS,IACjBgQ,sBAAsB7N,GACtB+N,sBAAsB/N,GAAQ,EAAI,EAClC8N,uBAAuB9N,GACvBgO,sBAAsBhO,GACtB2M,2BAA2B3M,GAC3BuM,GAIV,KAAKta,EAAagc,MAChB,KAAM1B,EAAUhhB,KAAK2gB,gBAAgBgC,uBAAuBlO,GAAOmM,EAAeC,IAChF,MAEF,OAAOnM,eAAe1U,KAAKsS,IAAKsQ,oBAAoBnO,GAAOuM,GAE7D,KAAKta,EAAamc,OAChB,KAAM7B,EAAUhhB,KAAK2gB,gBAAgBmC,uBAAuBrO,GAAOmM,EAAeC,IAChF,MAEF,KAAMI,EAAUjhB,KAAK2gB,gBAAgBoC,wBAAwBtO,GAAOmM,EAAeC,IACjF,MAEF,OAAO/L,gBAAgB9U,KAAKsS,IAAK0Q,qBAAqBvO,GAAOuM,EAASC,GAG1E,OAAO,GAKThP,EAAAhQ,UAAAghB,iBAAA,SAAiBriB,GACf,IAAIuS,EAAOC,EAAYxS,GACvB,IACE,OAAOsiB,oCAAoCljB,KAAKsS,IAAKa,WAErDL,YAAYK,KAIhBlB,EAAAhQ,UAAAkhB,iBAAA,SAAiB/N,GACf,OAAO+K,EAAWiD,oCAAoCpjB,KAAKsS,IAAK8C,KAGlEnD,EAAAhQ,UAAAohB,iBAAA,SACEtF,EACAtJ,EACA6O,EACAC,EACAC,GAEAC,kCAAkC1F,EAAMtJ,EAAM6O,EAAWC,EAAYC,IA11BvDvR,EAAAyR,kBAA2B,MAG3BzR,EAAA0R,kBAA2B,MAy1B7C1R,EAn2BA,GAAavS,EAAAuS,SAu2BbvS,EAAAkkB,gBAAA,SAAgCnP,GAC9B,OAAOyM,yBAAyBzM,IAGlC/U,EAAAmkB,kBAAA,SAAkCpP,GAChC,OAAO2M,2BAA2B3M,IAGpC/U,EAAAokB,iBAAA,SAAiCrP,GAC/B,OAAO6M,0BAA0B7M,IAGnC/U,EAAAqkB,oBAAA,SAAoCtP,GAClC,OAAO+M,6BAA6B/M,IAGtC/U,EAAAskB,qBAAA,SAAqCvP,GACnC,OAAOgN,8BAA8BhN,IAGvC/U,EAAAukB,iBAAA,SAAiCxP,GAC/B,OAAOkN,0BAA0BlN,IAGnC/U,EAAAwkB,iBAAA,SAAiCzP,GAC/B,OAAOoN,0BAA0BpN,IAGnC/U,EAAAykB,iBAAA,SAAiC1P,GAC/B,OAAOsN,0BAA0BtN,IAGnC/U,EAAA0kB,iBAAA,SAAiC3P,GAC/B,OAAO4P,0BAA0B5P,IAGnC/U,EAAA4kB,iBAAA,SAAiC7P,GAC/B,OAAO8P,0BAA0B9P,IAGnC/U,EAAA8kB,WAAA,SAA2B/P,GACzB,OAAOgQ,uBAAuBhQ,IAGhC/U,EAAAglB,YAAA,SAA4BjQ,GAC1B,OAAOuO,qBAAqBvO,IAG9B/U,EAAAilB,cAAA,SAA8BlQ,GAC5B,OAAOqO,uBAAuBrO,IAGhC/U,EAAAklB,eAAA,SAA+BnQ,GAC7B,OAAOsO,wBAAwBtO,IAGjC/U,EAAAmlB,WAAA,SAA2BpQ,GACzB,OAAOmO,oBAAoBnO,IAG7B/U,EAAAolB,cAAA,SAA8BrQ,GAC5B,OAAOkO,uBAAuBlO,IAGhC/U,EAAAqlB,aAAA,SAA6BtQ,GAC3B,OAAO6N,sBAAsB7N,IAG/B/U,EAAAslB,cAAA,SAA8BvQ,GAC5B,OAAO8N,uBAAuB9N,IAGhC/U,EAAAulB,WAAA,SAA2BxQ,GACzB,OAAO2N,oBAAoB3N,IAG7B/U,EAAAwlB,aAAA,SAA6BzQ,GAC3B,OAAO+N,sBAAsB/N,IAG/B/U,EAAAylB,cAAA,SAA8B1Q,GAC5B,OAAO2Q,uBAAuB3Q,IAGhC/U,EAAA2lB,eAAA,SAA+B5Q,GAC7B,OAAO6Q,wBAAwB7Q,IAGjC/U,EAAA6lB,YAAA,SAA4B9Q,GAC1B,OAAO+Q,qBAAqB/Q,IAG9B/U,EAAA+lB,cAAA,SAA8BhR,GAC5B,OAAOiR,uBAAuBjR,IAGhC/U,EAAAimB,aAAA,SAA6BlR,GAC3B,OAAO0L,EAAWyF,sBAAsBnR,KAG1C/U,EAAAmmB,mBAAA,SAAmCpR,GACjC,OAAOqR,6BAA6BrR,IAGtC/U,EAAAqmB,cAAA,SAA8BtR,EAAqBW,GACjD,OAAO4Q,uBAAuBvR,EAAMW,IAGtC1V,EAAAumB,eAAA,SAA+BxR,GAC7B,OAAOyR,wBAAwBzR,IAGjC/U,EAAAymB,UAAA,SAA0B1R,GACxB,OAAO2R,qBAAqB3R,IAG9B/U,EAAA2mB,WAAA,SAA2B5R,GACzB,OAAO6R,sBAAsB7R,IAG/B/U,EAAA6mB,YAAA,SAA4B9R,GAC1B,OAAO0L,EAAWqG,qBAAqB/R,KAGzC/U,EAAA+mB,YAAA,SAA4BhS,GAC1B,OAAOiS,qBAAqBjS,IAG9B/U,EAAAinB,aAAA,SAA6BlS,GAC3B,OAAO0L,EAAWyG,sBAAsBnS,KAG1C/U,EAAAmnB,kBAAA,SAAkCpS,GAChC,OAAOqS,2BAA2BrS,IAGpC/U,EAAAqnB,cAAA,SAA8BtS,GAC5B,OAAOuS,yBAAyBvS,IAGlC/U,EAAAunB,cAAA,SAA8BxS,GAC5B,OAAOyS,0BAA0BzS,IAGnC/U,EAAAynB,mBAAA,SAAmC1S,GACjC,OAAO2S,4BAA4B3S,IAGrC/U,EAAA2nB,aAAA,SAA6B5S,GAC3B,OAAO6S,sBAAsB7S,IAG/B/U,EAAA6nB,eAAA,SAA+B9S,GAC7B,OAAO+S,wBAAwB/S,IAGjC/U,EAAA+nB,cAAA,SAA8BhT,GAC5B,OAAO0L,EAAWuH,uBAAuBjT,KAG3C/U,EAAAioB,UAAA,SAA0BlT,GACxB,OAAOmT,mBAAmBnT,IAG5B/U,EAAAmoB,oBAAA,SAAoCpT,GAClC,OAAOqT,4BAA4BrT,IAGrC/U,EAAAqoB,eAAA,SAA+BtT,EAAqBW,GAClD,OAAO4S,wBAAwBvT,EAAMW,IAGvC1V,EAAAuoB,YAAA,SAA4BxT,GAC1B,OAAO0L,EAAW+H,4BAA4BzT,KAKhD/U,EAAAyoB,gBAAA,SAAgCpK,GAC9B,OAAOqK,yBAAyBrK,IAGlCre,EAAA2oB,gBAAA,SAAgCtK,GAC9B,OAAOoC,EAAWmI,yBAAyBvK,KAG7Cre,EAAA6oB,sBAAA,SAAsCxK,GACpC,OAAOyK,8BAA8BzK,IAGvCre,EAAA+oB,qBAAA,SAAqC1K,EAAmB3I,GACtD,OAAOsT,0BAA0B3K,EAAM3I,IAGzC1V,EAAAipB,sBAAA,SAAsC5K,GACpC,OAAO6K,2BAA2B7K,IAGpC,IAAA2C,EAAA,WAYE,SAAAA,KA0BF,OAjCSA,EAAA/e,OAAP,SAAchC,GACZ,IAAIkpB,EAAW,IAAInI,EAGnB,OAFAmI,EAASlpB,OAASA,EAClBkpB,EAASvW,IAAMwW,kBACRD,GAKTnI,EAAAze,UAAA8mB,SAAA,SAAS5kB,GACP,OAAO6kB,kBAAkBhpB,KAAKsS,IAAKnO,IAGrCuc,EAAAze,UAAAgnB,UAAA,SAAUC,EAAwBC,EAAsBtR,EAA8B1T,QAA9B,IAAA0T,MAAA,QAA8B,IAAA1T,MAAA,GACpFilB,mBAAmBF,EAAMC,EAAItR,EAAW1T,IAG1Cuc,EAAAze,UAAAonB,mBAAA,SAAmBllB,EAAqB0T,GACtC,OAAOyR,4BAA4BtpB,KAAKsS,IAAKnO,EAAM0T,IAGrD6I,EAAAze,UAAAsnB,mBAAA,SAAmBL,EAAwBC,EAAsBK,EAAgBrlB,QAAA,IAAAA,MAAA,GAC/E,IAAIwO,EAAOU,EAAcmW,GACzB,IACEC,4BAA4BP,EAAMC,EAAIxW,EAAM6W,EAAQjkB,OAAQpB,WAE5D2O,YAAYH,KAIhB+N,EAAAze,UAAAynB,iBAAA,SAAiBC,EAAyBC,GACxC,OAAOC,0BAA0B7pB,KAAKsS,IAAKqX,EAAOC,EAAa5pB,KAAKL,OAAO2S,MAE/EoO,EAtCA,GAkFA,SAAA9N,EAAsBkX,GACpB,IAAKA,EAAK,OAAO,EAIjB,IAHA,IAAIC,EAAYD,EAAIvkB,OAChBuQ,EAAMrD,gBAAgBsX,GACtBC,EAAMlU,EACDzV,EAAI,EAAGA,EAAI0pB,IAAa1pB,EAC/B4pB,MAAUD,IAAOF,EAAIzpB,IAEvB,OAAOyV,EAGT,SAAAzC,EAAuB6W,GACrB,IAAKA,EAAM,OAAO,EAGlB,IAFA,IAAIpU,EAAMrD,gBAAgByX,EAAK3kB,QAAU,GACrCykB,EAAMlU,EACDzV,EAAI,EAAG0c,EAAImN,EAAK3kB,OAAQlF,EAAI0c,IAAK1c,EAAG,CAC3C,IAAI8pB,EAAMD,EAAK7pB,GAEf4pB,MAAUD,EAAyB,IAAdG,GACrBF,MAAUD,EAAM,EAAKG,GAAS,EAAK,KACnCF,MAAUD,EAAM,EAAKG,GAAQ,GAAM,KACnCF,MAAUD,EAAM,EAAKG,IAAQ,IAC7BH,GAAO,EAET,OAAOlU,EAGT,SAAAb,EAAuBmV,GACrB,OAAO/W,EAAc+W,GA2BvB,SAAAhX,EAAqBiX,GACnB,GAAW,MAAPA,EAAa,OAAO,EAIxB,IAHA,IAAIvU,EAAMrD,gBA1BZ,SAA0B4X,GAExB,IADA,IAAI/kB,EAAM,EACDjF,EAAI,EAAG0c,EAAIsN,EAAI9kB,OAAQlF,EAAI0c,IAAK1c,EAAG,CAC1C,IAAIiqB,EAAID,EAAI1kB,WAAWtF,GACnBiqB,GAAK,OAAUA,GAAK,OAAUjqB,EAAI,EAAI0c,IACxCuN,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBD,EAAI1kB,aAAatF,IAEpDiqB,GAAK,MACLhlB,EAEFA,GADSglB,GAAK,KACP,EACEA,GAAK,MACP,EACEA,GAAK,QACP,EACEA,GAAK,SACP,EAEA,EAGX,OAAOhlB,EAKmBilB,CAAiBF,GAAO,GAE9CL,EAAMlU,EACDzV,EAAI,EAAG0c,EAAIsN,EAAI9kB,OAAQlF,EAAI0c,IAAK1c,EAAG,CAC1C,IAAIiqB,EAAID,EAAI1kB,WAAWtF,GACnBiqB,GAAK,OAAUA,GAAK,OAAUjqB,EAAI,EAAI0c,IACxCuN,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBD,EAAI1kB,aAAatF,IAEpDiqB,GAAK,IACPL,MAAUD,IAAOM,GACRA,GAAK,MACdL,MAAUD,IAAQ,IAASM,IAAM,GACjCL,MAAUD,IAAQ,IAAqB,GAAZM,IAClBA,GAAK,OACdL,MAAUD,IAAQ,IAASM,IAAM,IACjCL,MAAUD,IAAQ,IAASM,IAAO,EAAK,IACvCL,MAAUD,IAAQ,IAAqB,GAAZM,IAClBA,GAAK,SACdL,MAAUD,IAAQ,IAASM,IAAM,IACjCL,MAAUD,IAAQ,IAASM,IAAM,GAAM,IACvCL,MAAUD,IAAQ,IAASM,IAAO,EAAK,IACvCL,MAAUD,IAAQ,IAAqB,GAAZM,IAClBA,GAAK,UACdL,MAAUD,IAAQ,IAASM,IAAM,IACjCL,MAAUD,IAAQ,IAASM,IAAM,GAAM,IACvCL,MAAUD,IAAQ,IAASM,IAAM,GAAM,IACvCL,MAAUD,IAAQ,IAASM,IAAO,EAAK,IACvCL,MAAUD,IAAQ,IAAqB,GAAZM,KAE3BL,MAAUD,IAAQ,IAASM,IAAM,IACjCL,MAAUD,IAAQ,IAASM,IAAM,GAAM,IACvCL,MAAUD,IAAQ,IAASM,IAAM,GAAM,IACvCL,MAAUD,IAAQ,IAASM,IAAM,GAAM,IACvCL,MAAUD,IAAQ,IAASM,IAAO,EAAK,IACvCL,MAAUD,IAAQ,IAAqB,GAAZM,IAI/B,OADAL,MAAUD,EAAK,GACRlU,EAGT,SAAA4J,EAAiB5J,GACf,OACGkK,KAASlK,GACTkK,KAASlK,EAAM,IAAO,EACtBkK,KAASlK,EAAM,IAAM,GACrBkK,KAASlK,EAAM,IAAM,GAY1B,SAAAqK,EAA2BrK,GACzB,IAAKA,EAAK,OAAO,KAKjB,IAJA,IAEI0U,EACAC,EAASC,EAASC,EAASC,EAH3BC,EAAM,IAAIzkB,MAIPokB,EAAKxK,KAASlK,MACR,IAAL0U,GAINC,EAAuB,GAAlBzK,KAASlK,KACK,MAAT,IAAL0U,IAILE,EAAuB,GAAlB1K,KAASlK,KACK,MAAT,IAAL0U,GACHA,GAAY,GAALA,IAAY,GAAOC,GAAM,EAAKC,GAErCC,EAAuB,GAAlB3K,KAASlK,KACK,MAAT,IAAL0U,GACHA,GAAY,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAEjDC,EAAuB,GAAlB5K,KAASlK,KAEZ0U,EADiB,MAAT,IAALA,IACS,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAGlD,EAALJ,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EAD/C,GAAlB5K,KAASlK,OAKpB+U,EAAI/kB,KAAK0kB,IApBPK,EAAI/kB,MAAY,GAAL0kB,IAAY,EAAKC,IAL5BI,EAAI/kB,KAAK0kB,GAmCb,OAAOM,OAAOC,eAAeF,GAhPlBnrB,EAAAghB,WAqMbhhB,EAAAygB,aA+CA,IAAAN,EAAA,WAKA,OALA,gBAAangB,EAAAmgB,gZC1gDb,IAAAmL,EAAA7qB,EAAA,GAQA8qB,EAAA9qB,EAAA,GAYST,EAAAwrB,MAXPD,EAAAC,MAWcxrB,EAAAyrB,MATdF,EAAAE,MAGF,IASYC,EATZjoB,EAAAhD,EAAA,IASA,SAAYirB,GAEVA,IAAA,mBAGAA,IAAA,eACAA,IAAA,iCACAA,IAAA,yBACAA,IAAA,yBAGAA,IAAA,2BACAA,IAAA,yBACAA,IAAA,mBACAA,IAAA,eACAA,IAAA,iBACAA,IAAA,kCACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,4BACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,kCACAA,IAAA,oCACAA,IAAA,sBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,8BACAA,IAAA,gCACAA,IAAA,8BAGAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,cACAA,IAAA,YACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,wBACAA,IAAA,gBACAA,IAAA,kBAGAA,IAAA,wCACAA,IAAA,sCACAA,IAAA,gDACAA,IAAA,wCACAA,IAAA,8CACAA,IAAA,0CACAA,IAAA,gDACAA,IAAA,0CACAA,IAAA,gDACAA,IAAA,sCACAA,IAAA,8CAGAA,IAAA,0BACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,sBAtEF,CAAYA,EAAA1rB,EAAA0rB,WAAA1rB,EAAA0rB,cA0EZ1rB,EAAA2rB,oBAAA,SAAoCC,GAClC,OAAQA,GACN,KAAKF,EAASG,QACd,KAAKH,EAASI,KACd,KAAKJ,EAASK,KACd,KAAKL,EAASM,MAAO,OAAO,EAE9B,OAAO,GAIThsB,EAAAisB,eAAA,SAA+BL,GAC7B,OAAQA,GACN,KAAKF,EAASQ,WACd,KAAKR,EAASS,KACd,KAAKT,EAASU,cACd,KAAKV,EAASW,eAAgB,OAAO,EAEvC,OAAO,GAITrsB,EAAAssB,sBAAA,SAAsCV,GACpC,OAAQA,GACN,KAAKF,EAASQ,WACd,KAAKR,EAASW,eAAgB,OAAO,EAEvC,OAAO,GAIT,IAAAE,EAAA,oBAAAA,IAOEjsB,KAAAksB,OAAsB,KAEtBlsB,KAAAmsB,MAAqBnB,EAAA3oB,YAAY+pB,KA82BnC,OA32BEH,EAAAhqB,UAAAoqB,GAAA,SAAGC,GAA2B,OAAQtsB,KAAKmsB,MAAQG,IAASA,GAE5DL,EAAAhqB,UAAAsqB,MAAA,SAAMD,GAA2B,OAA8B,IAAtBtsB,KAAKmsB,MAAQG,IAEtDL,EAAAhqB,UAAAuqB,IAAA,SAAIF,GAA2BtsB,KAAKmsB,OAASG,GAItCL,EAAAQ,WAAP,SACE7rB,EACA8rB,EACAC,EACAtoB,GAEA,IAAIgR,EAAO,IAAIuX,EAKf,OAJAvX,EAAKhR,MAAQA,EACbgR,EAAKzU,KAAOA,EAAMA,EAAKsrB,OAAS7W,EAChCA,EAAKqX,cAAgBA,EAAmBA,GAAeG,GAAUH,EAAerX,GAChFA,EAAKsX,WAAaA,EACXtX,GAGF4W,EAAAa,kBAAP,SACEzoB,GAEA,OAAO4nB,EAAKQ,WACVR,EAAKc,2BAA2B,GAAI1oB,GACpC,MACA,EACAA,IAIG4nB,EAAAe,oBAAP,SACEpsB,EACAqsB,EACA5oB,GAEA,IAAI6oB,EAAO,IAAIC,EAIf,OAHAD,EAAK7oB,MAAQA,EACb6oB,EAAKtsB,KAAOA,EAAMA,EAAKsrB,OAASgB,EAChCA,EAAKD,YAAcA,EAAiBA,IAAaA,EAAYf,OAASgB,GAC/DA,GAGFjB,EAAAmB,gBAAP,SACExsB,EACAyU,EACA6E,EACAoR,EACAjnB,GAEA,IAAI6oB,EAAO,IAAIG,EAMf,OALAH,EAAK7oB,MAAQA,EACb6oB,EAAKtsB,KAAOA,EAAMA,EAAKsrB,OAASgB,EAChCA,EAAK7X,KAAOA,EAAUA,IAAMA,EAAK6W,OAASgB,GAC1CA,EAAKhT,YAAcA,EAAiBA,IAAaA,EAAYgS,OAASgB,GACtEA,EAAKI,cAAgBhC,EACd4B,GAGFjB,EAAAsB,gBAAP,SACEC,EACAjU,EACAkU,EACAd,EACAtoB,GAEA,IAAIqpB,EAAM,IAAIC,EAMd,OALAD,EAAIrpB,MAAQA,EACZqpB,EAAIF,WAAaA,EAAYX,GAAUW,EAAYE,GACnDA,EAAInU,WAAaA,EAAYA,EAAW2S,OAASwB,EACjDA,EAAID,iBAAmBA,EAAsBA,IAAkBA,EAAiBvB,OAASwB,GACzFA,EAAIf,WAAaA,EACVe,GAKFzB,EAAA2B,gBAAP,SACEhtB,EACAitB,EACAxpB,GAEA,IAAIypB,EAAO,IAAIC,EAKf,OAJAD,EAAKzpB,MAAQA,EACbypB,EAAKltB,KAAOA,EAAMA,EAAKsrB,OAAS4B,EAChCA,EAAKE,UAAYH,EAAUA,GAAMhB,GAAUgB,EAAMC,GACjDA,EAAKG,cAAgBC,EAAoBttB,GAClCktB,GAGF7B,EAAAkC,cAAP,SACE9oB,EACAimB,EACAjnB,GAEA,IAAI+pB,EAAO,IAAIC,EAIf,OAHAD,EAAK/pB,MAAQA,EACb+pB,EAAKE,YAAchD,EACnB8C,EAAK/oB,KAAOA,EACL+oB,GAKFnC,EAAAc,2BAAP,SACEnsB,EACAyD,GAEA,IAAIoQ,EAAO,IAAI8Z,EAGf,OAFA9Z,EAAKpQ,MAAQA,EACboQ,EAAKpP,KAAOzE,EACL6T,GAGFwX,EAAAuC,gCAAP,SACEnqB,GAEA,IAAIoQ,EAAO,IAAI8Z,EAGf,OAFA9Z,EAAKpQ,MAAQA,EACboQ,EAAKpP,KAAO,GACLoP,GAGFwX,EAAAwC,6BAAP,SACEC,EACArqB,GAEA,IAAIoQ,EAAO,IAAIka,EAGf,OAFAla,EAAKpQ,MAAQA,EACboQ,EAAKma,mBAAqBF,EAkoD9B,SAA4BG,EAAwB3C,GAClD,IAAK,IAAI7rB,EAAI,EAAG0c,EAAI8R,EAAMtpB,OAAQlF,EAAI0c,IAAK1c,EAAG,CAC5C,IAAI+tB,EAAOS,EAAMxuB,GACb+tB,IAAMA,EAAKlC,OAASA,IAroDY4C,CAAmBJ,EAAUja,GAC1DA,GAGFwX,EAAA8C,0BAAP,SACEC,EACAhX,EACAiX,EACA5qB,GAEA,IAAIoQ,EAAO,IAAIya,EAKf,OAJAza,EAAKpQ,MAAQA,EACboQ,EAAKua,cAAgBA,EACrBva,EAAKuD,WAAaA,EAAYA,EAAWkU,OAASzX,EAClDA,EAAKwa,OAASA,EAAQA,EAAO/C,OAASzX,EAC/BA,GAGFwX,EAAAkD,uBAAP,SACEC,EACAxa,EACAC,EACAxQ,GAEA,IAAIoQ,EAAO,IAAI4a,EAKf,OAJA5a,EAAKpQ,MAAQA,EACboQ,EAAK2a,SAAWA,EAChB3a,EAAKG,KAAOA,EAAMA,EAAKsX,OAASzX,EAChCA,EAAKI,MAAQA,EAAOA,EAAMqX,OAASzX,EAC5BA,GAGFwX,EAAAqD,qBAAP,SACEtX,EACAuX,EACA1B,EACAxpB,GAEA,IAAIoQ,EAAO,IAAI+a,EAKf,OAJA/a,EAAKpQ,MAAQA,EACboQ,EAAKuD,WAAaA,EAAYA,EAAWkU,OAASzX,EAClDA,EAAKiY,cAAgB6C,EAAcA,GAAU1C,GAAU0C,EAAU9a,GACjEA,EAAKuZ,UAAYH,EAAMhB,GAAUgB,EAAMpZ,GAChCA,GAGFwX,EAAAwD,sBAAP,SACEC,EACArrB,GAEA,IAAIoQ,EAAO,IAAIkb,EAGf,OAFAlb,EAAKpQ,MAAQA,EACboQ,EAAKib,YAAcA,EAAa7C,GAAU6C,EAAajb,GAChDA,GAGFwX,EAAA2D,4BAAP,SACEvrB,GAEA,IAAIoQ,EAAO,IAAIob,EAEf,OADApb,EAAKpQ,MAAQA,EACNoQ,GAGFwX,EAAA6D,8BAAP,SACE9X,EACA+X,EACA1rB,GAEA,IAAIoQ,EAAO,IAAIub,EAIf,OAHAvb,EAAKpQ,MAAQA,EACboQ,EAAKuD,WAAaA,EAAYA,EAAWkU,OAASzX,EAClDA,EAAKwb,kBAAoBF,EAASA,EAAQ7D,OAASzX,EAC5CA,GAGFwX,EAAAiE,sBAAP,SACE7rB,GAEA,IAAIoQ,EAAO,IAAI0b,EAEf,OADA1b,EAAKpQ,MAAQA,EACNoQ,GAGFwX,EAAAmE,6BAAP,SACE9uB,EACA+C,GAEA,IAAIoQ,EAAO,IAAI4b,EAGf,OAFA5b,EAAKpQ,MAAQA,EACboQ,EAAKnT,MAAQA,EACNmT,GAGFwX,EAAAqE,yBAAP,SACEC,GAEA,IAAI9b,EAAO,IAAI+b,EAIf,OAHA/b,EAAK0X,MAAQoE,EAAYpE,MAAQnB,EAAA3oB,YAAYouB,MAC7Chc,EAAKpQ,MAAQksB,EAAYlsB,MACzBoQ,EAAK8b,YAAcA,EACZ9b,GAGFwX,EAAAyE,2BAAP,SACE1Y,EACA2Y,EACAtsB,GAEA,IAAIoQ,EAAO,IAAImc,EAIf,OAHAnc,EAAKpQ,MAAQA,EACboQ,EAAKuD,WAAaA,EAAYA,EAAWkU,OAASzX,EAClDA,EAAKkc,OAASA,EAAQA,EAAOzE,OAASzX,EAC/BA,GAGFwX,EAAA4E,+BAAP,SACEvvB,EACA+C,GAEA,IAAIoQ,EAAO,IAAIqc,EAGf,OAFArc,EAAKpQ,MAAQA,EACboQ,EAAKnT,MAAQA,EACNmT,GAGFwX,EAAA8E,oBAAP,SACE/Y,EACAuX,EACA1B,EACAxpB,GAEA,IAAIoQ,EAAO,IAAIuc,EAKf,OAJAvc,EAAKpQ,MAAQA,EACboQ,EAAKuD,WAAaA,EAAYA,EAAWkU,OAASzX,EAClDA,EAAKiY,cAAgB6C,EAAcA,GAAU1C,GAAU0C,EAAU9a,GACjEA,EAAKuZ,UAAYH,EAAMhB,GAAUgB,EAAMpZ,GAChCA,GAGFwX,EAAAgF,qBAAP,SACE5sB,GAEA,IAAIoQ,EAAO,IAAIyc,EAEf,OADAzc,EAAKpQ,MAAQA,EACNoQ,GAGFwX,EAAAkF,8BAAP,SACEnZ,EACA3T,GAEA,IAAIoQ,EAAO,IAAI2c,EAGf,OAFA3c,EAAKpQ,MAAQA,EACboQ,EAAKuD,WAAaA,EAAYA,EAAWkU,OAASzX,EAC3CA,GAGFwX,EAAAoF,+BAAP,SACErZ,EACAhW,EACAqC,GAEA,IAAIoQ,EAAO,IAAI6c,EAIf,OAHA7c,EAAKpQ,MAAQA,EACboQ,EAAKuD,WAAaA,EAAYA,EAAWkU,OAASzX,EAClDA,EAAKzS,SAAWA,EAAUA,EAASkqB,OAASzX,EACrCA,GAGFwX,EAAAsF,8BAAP,SACEC,EACArF,EACA9nB,GAEA,IAAIoQ,EAAO,IAAIgd,EAIf,OAHAhd,EAAKpQ,MAAQA,EACboQ,EAAK+c,QAAUA,EACf/c,EAAKid,aAAevF,EACb1X,GAGFwX,EAAA0F,wBAAP,SACE9Z,EACA+Z,EACAC,EACAxtB,GAEA,IAAIoQ,EAAO,IAAIqd,EAKf,OAJArd,EAAKpQ,MAAQA,EACboQ,EAAKoD,UAAYA,EAAWA,EAAUqU,OAASzX,EAC/CA,EAAKmd,OAASA,EAAQA,EAAO1F,OAASzX,EACtCA,EAAKod,OAASA,EAAQA,EAAO3F,OAASzX,EAC/BA,GAGFwX,EAAA8F,8BAAP,SACEzwB,EACA+C,GAEA,IAAIoQ,EAAO,IAAIud,EAGf,OAFAvd,EAAKpQ,MAAQA,EACboQ,EAAKnT,MAAQA,EACNmT,GAGFwX,EAAAgG,sBAAP,SACE5tB,GAEA,IAAIoQ,EAAO,IAAIyd,EAEf,OADAzd,EAAKpQ,MAAQA,EACNoQ,GAGFwX,EAAAkG,qBAAP,SACE9tB,GAEA,IAAIoQ,EAAO,IAAI2d,EAEf,OADA3d,EAAKpQ,MAAQA,EACNoQ,GAGFwX,EAAAoG,qBAAP,SACEhuB,GAEA,IAAIoQ,EAAO,IAAI6d,EAEf,OADA7d,EAAKpQ,MAAQA,EACNoQ,GAGFwX,EAAAsG,6BAAP,SACEnD,EACAoD,EACAnuB,GAEA,IAAIoQ,EAAO,IAAIge,EAIf,OAHAhe,EAAKpQ,MAAQA,EACboQ,EAAK2a,SAAWA,EAChB3a,EAAK+d,QAAUA,EAASA,EAAQtG,OAASzX,EAClCA,GAGFwX,EAAAyG,4BAAP,SACEtD,EACAoD,EACAnuB,GAEA,IAAIoQ,EAAO,IAAIke,EAIf,OAHAle,EAAKpQ,MAAQA,EACboQ,EAAK2a,SAAWA,EAChB3a,EAAK+d,QAAUA,EAASA,EAAQtG,OAASzX,EAClCA,GAKFwX,EAAA2G,qBAAP,SACEC,EACAxuB,GAEA,IAAIypB,EAAO,IAAIgF,EAGf,OAFAhF,EAAKzpB,MAAQA,EACbypB,EAAK+E,WAAaA,EAAYhG,GAAUgG,EAAY/E,GAC7CA,GAGF7B,EAAA8G,qBAAP,SACEvb,EACAnT,GAEA,IAAIypB,EAAO,IAAIkF,GAGf,OAFAlF,EAAKzpB,MAAQA,EACbypB,EAAKtW,MAAQA,EAAWA,IAAOA,EAAM0U,OAAS4B,GACvCA,GAGF7B,EAAAgH,uBAAP,SACEC,EACAC,EACAlG,EACAmG,EACAC,EACAC,EACAnH,EACA9nB,GAEA,IAAIypB,EAAO,IAAIyF,GASf,OARAzF,EAAKzpB,MAAQA,EACbypB,EAAK3B,MAAQA,EACb2B,EAAKltB,KAAOsyB,EAAYA,EAAWhH,OAAS4B,EAC5CA,EAAKqF,eAAiBA,EAAgBtG,GAAUsG,EAAgBrF,GAChEA,EAAKb,YAAcA,EAAiBA,IAAaA,EAAYf,OAAS4B,GACtEA,EAAKsF,gBAAkBA,EAAqBA,GAAiBvG,GAAUuG,EAAiBtF,GACxFA,EAAKuF,QAAUA,EAASxG,GAAUwG,EAASvF,GAC3CA,EAAKwF,WAAaA,EAAgBA,GAAYzG,GAAUyG,EAAYxF,GAC7DA,GAGF7B,EAAAuH,wBAAP,SACEhc,EACAnT,GAEA,IAAIypB,EAAO,IAAI2F,GAGf,OAFA3F,EAAKzpB,MAAQA,EACbypB,EAAKtW,MAAQA,EAAWA,IAAOA,EAAM0U,OAAS4B,GACvCA,GAGF7B,EAAAyH,kBAAP,SACEC,EACA9b,EACAxT,GAEA,IAAIypB,EAAO,IAAI8F,GAIf,OAHA9F,EAAKzpB,MAAQA,EACbypB,EAAK6F,UAAYA,EAAWA,EAAUzH,OAAS4B,EAC/CA,EAAKjW,UAAYA,EAAWA,EAAUqU,OAAS4B,EACxCA,GAGF7B,EAAA4H,qBAAP,SACExvB,GAEA,IAAIypB,EAAO,IAAIgG,GAEf,OADAhG,EAAKzpB,MAAQA,EACNypB,GAGF7B,EAAA8H,sBAAP,SACEnzB,EACAyyB,EACAC,EACAnH,EACA9nB,GAEA,IAAIypB,EAAO,IAAIkG,GAMf,OALAlG,EAAKzpB,MAAQA,EACbypB,EAAK3B,MAAQA,EACb2B,EAAKltB,KAAOA,EAAMA,EAAKsrB,OAAS4B,EAChCA,EAAKmG,OAASZ,EAASxG,GAAUwG,EAASvF,GAC1CA,EAAKwF,WAAaA,EAAgBA,GAAYzG,GAAUyG,EAAYxF,GAC7DA,GAGF7B,EAAAiI,2BAAP,SACEtzB,EACAU,EACA6qB,EACA9nB,GAEA,IAAIypB,EAAO,IAAIqG,GAKf,OAJArG,EAAKzpB,MAAQA,EACbypB,EAAK3B,MAAQA,EACb2B,EAAKltB,KAAOA,EAAMA,EAAKsrB,OAAS4B,EAChCA,EAAKxsB,MAAQA,EAAWA,IAAOA,EAAM4qB,OAAS4B,GACvCA,GAGF7B,EAAAmI,sBAAP,SACEf,EACAgB,EACAlI,EACA9nB,GAEA,IAAIypB,EAAO,IAAIwG,GAKf,GAJAxG,EAAKzpB,MAAQA,EACbypB,EAAK3B,MAAQA,EACb2B,EAAKuF,QAAUA,EAAaA,GAASxG,GAAUwG,EAASvF,GACxDA,EAAKuG,KAAOA,EACRA,EAAM,CACR,IAAIrvB,EAAiB7B,EAAAoxB,cAAcF,EAAK/yB,OACpC+yB,EAAK/yB,MAAMkzB,WAAW,KACxB1G,EAAK9oB,eAAiB7B,EAAAsxB,YACpBzvB,EACAX,EAAMU,OAAOC,gBAGf8oB,EAAK9oB,eAAiBA,EAExB8oB,EAAK4G,aAAeC,GAAmB7G,EAAK9oB,qBAE5C8oB,EAAK9oB,eAAiB,KACtB8oB,EAAK4G,aAAe,KAEtB,OAAO5G,GAGF7B,EAAA2I,4BAAP,SACEh0B,EACAma,EACA1W,GAEA,IAAIypB,EAAO,IAAI+G,GAIf,OAHA/G,EAAKzpB,MAAQA,EACbypB,EAAKltB,KAAOA,EAAMA,EAAKsrB,OAAS4B,EAChCA,EAAK/S,aAAeA,EAAcA,EAAamR,OAAS4B,EACjDA,GAGF7B,EAAA6I,mBAAP,SACEl0B,EACAma,EACA1W,GAEA,IAAI6oB,EAAO,IAAI6H,GASf,OARA7H,EAAK7oB,MAAQA,EACb6oB,EAAKtsB,KAAOA,EAAMA,EAAKsrB,OAASgB,EAC3BnS,EAGHA,EAAamR,OAASgB,EAFtBnS,EAAena,EAIjBssB,EAAKnS,aAAeA,EACbmS,GAGFjB,EAAA+I,0BAAP,SACEhd,GAEA,IAAI8V,EAAO,IAAImH,GAGf,OAFAnH,EAAKzpB,MAAQ2T,EAAW3T,MACxBypB,EAAK9V,WAAaA,EAAYA,EAAWkU,OAAS4B,EAC3CA,GAGF7B,EAAAiJ,kBAAP,SACErd,EACAS,EACAC,EACAlU,GAEA,IAAIypB,EAAO,IAAIqH,GAKf,OAJArH,EAAKzpB,MAAQA,EACbypB,EAAKjW,UAAYA,EAAWA,EAAUqU,OAAS4B,EAC/CA,EAAKxV,OAASA,EAAQA,EAAO4T,OAAS4B,EACtCA,EAAKvV,QAAUA,EAAaA,IAASA,EAAQ2T,OAAS4B,GAC/CA,GAGF7B,EAAAmJ,sBAAP,SACEC,EACAhB,EACAhwB,GAEA,IAAIypB,EAAO,IAAIwH,GACfxH,EAAKzpB,MAAQA,EACbypB,EAAKyH,aAAeF,EAAWA,GAAOxI,GAAUwI,EAAOvH,GACvDA,EAAK0H,cAAgB,KACrB1H,EAAKuG,KAAOA,EACZ,IAAIrvB,EAAiB7B,EAAAoxB,cAAcF,EAAK/yB,OAaxC,OAZI+yB,EAAK/yB,MAAMkzB,WAAW,KACxB1G,EAAK9oB,eAAiB7B,EAAAsxB,YACpBzvB,EACAX,EAAMU,OAAOC,iBAGVA,EAAewvB,WAAWxJ,EAAAloB,kBAC7BkC,EAAiBgmB,EAAAloB,eAAiBkC,GAEpC8oB,EAAK9oB,eAAiBA,GAExB8oB,EAAK4G,aAAeC,GAAmB7G,EAAK9oB,gBACrC8oB,GAGF7B,EAAAwJ,kCAAP,SACEvC,EACAmB,EACAhwB,GAEA,IAAIypB,EAAO,IAAIwH,GAUf,OATAxH,EAAKzpB,MAAQA,EACbypB,EAAKyH,aAAe,KACpBzH,EAAK0H,cAAgBtC,EACrBpF,EAAKuG,KAAOA,EACZvG,EAAK9oB,eAAiB7B,EAAAsxB,YACpBtxB,EAAAoxB,cAAcF,EAAK/yB,OACnB+C,EAAMU,OAAOC,gBAEf8oB,EAAK4G,aAAeC,GAAmB7G,EAAK9oB,gBACrC8oB,GAGF7B,EAAAyJ,wBAAP,SACE3a,EACAna,EACAyD,GAEA,IAAI6oB,EAAO,IAAIyI,GASf,OARAzI,EAAK7oB,MAAQA,EACb6oB,EAAKnS,aAAeA,EAAcA,EAAamR,OAASgB,EACnDtsB,EAGHA,EAAKsrB,OAASgB,EAFdtsB,EAAOma,EAITmS,EAAKtsB,KAAOA,EACLssB,GAGFjB,EAAA2J,2BAAP,SACEh1B,EACAuyB,EACAlG,EACAoG,EACAC,EACAnH,EACA9nB,GAEA,IAAIypB,EAAO,IAAI+H,GAQf,OAPA/H,EAAKzpB,MAAQA,EACbypB,EAAK3B,MAAQA,EACb2B,EAAKltB,KAAOA,EAAMA,EAAKsrB,OAAS4B,EAChCA,EAAKqF,eAAiBA,EAAoBA,GAAgBtG,GAAUsG,EAAgBrF,GACpFA,EAAKb,YAAcA,EAAiBA,IAAaA,EAAYf,OAAS4B,GACtEA,EAAKuF,QAAUA,EAASxG,GAAUwG,EAASvF,GAC3CA,EAAKwF,WAAaA,EAAgBA,GAAYzG,GAAUyG,EAAYxF,GAC7DA,GAGF7B,EAAA6J,uBAAP,SACEl1B,EACAyU,EACA6E,EACAoZ,EACAnH,EACA9nB,GAEA,IAAIypB,EAAO,IAAIiI,GAOf,OANAjI,EAAKzpB,MAAQA,EACbypB,EAAK3B,MAAQA,EACb2B,EAAKltB,KAAOA,EAAMA,EAAKsrB,OAAS4B,EAChCA,EAAKzY,KAAOA,EAAUA,IAAMA,EAAK6W,OAAS4B,GAC1CA,EAAK5T,YAAcA,EAAiBA,IAAaA,EAAYgS,OAAS4B,GACtEA,EAAKwF,WAAaA,EAAgBA,GAAYzG,GAAUyG,EAAYxF,GAC7DA,GAGF7B,EAAA+J,mBAAP,SACE9b,EACArC,EACAoe,EACAtC,EACAtvB,GAEA,IAAIypB,EAAO,IAAIoI,GAMf,OALApI,EAAKzpB,MAAQA,EACbypB,EAAK5T,YAAcA,EAAiBA,IAAaA,EAAYgS,OAAS4B,GACtEA,EAAKjW,UAAYA,EAAeA,IAAWA,EAAUqU,OAAS4B,GAC9DA,EAAKmI,YAAcA,EAAiBA,IAAaA,EAAY/J,OAAS4B,GACtEA,EAAK6F,UAAYA,EAAWA,EAAUzH,OAAS4B,EACxCA,GAGF7B,EAAAkK,0BAAP,SACEv1B,EACAuyB,EACAiD,EACAje,EACAmb,EACAnH,EACA9nB,GAEA,IAAIypB,EAAO,IAAIuI,GAQf,OAPAvI,EAAKzpB,MAAQA,EACbypB,EAAK3B,MAAQA,EACb2B,EAAKltB,KAAOA,EAAMA,EAAKsrB,OAAS4B,EAChCA,EAAKqF,eAAiBA,EAAoBA,GAAgBtG,GAAUsG,EAAgBrF,GACpFA,EAAKsI,UAAYA,EAAWA,EAAUlK,OAAS4B,EAC/CA,EAAK3V,KAAOA,EAAUA,IAAMA,EAAK+T,OAAS4B,GAC1CA,EAAKwF,WAAaA,EAAgBA,GAAYzG,GAAUyG,EAAYxF,GAC7DA,GAGF7B,EAAAqK,wBAAP,SACE11B,EACAuyB,EACAiD,EACAje,EACAmb,EACAnH,EACA9nB,GAEA,IAAIypB,EAAO,IAAIyI,GAQf,OAPAzI,EAAKzpB,MAAQA,EACbypB,EAAK3B,MAAQA,EACb2B,EAAKltB,KAAOA,EAAMA,EAAKsrB,OAAS4B,EAChCA,EAAKqF,eAAiBA,EAAoBA,GAAgBtG,GAAUsG,EAAgBrF,GACpFA,EAAKsI,UAAYA,EAAWA,EAAUlK,OAAS4B,EAC/CA,EAAK3V,KAAOA,EAAUA,IAAMA,EAAK+T,OAAS4B,GAC1CA,EAAKwF,WAAaA,EAAgBA,GAAYzG,GAAUyG,EAAYxF,GAC7DA,GAGF7B,EAAAuK,2BAAP,SACE51B,EACAyyB,EACAC,EACAnH,EACA9nB,GAEA,IAAIypB,EAAO,IAAI2I,GAMf,OALA3I,EAAKzpB,MAAQA,EACbypB,EAAK3B,MAAQA,EACb2B,EAAKltB,KAAOA,EAAMA,EAAKsrB,OAAS4B,EAChCA,EAAKuF,QAAUA,EAASxG,GAAUwG,EAASvF,GAC3CA,EAAKwF,WAAaA,EAAgBA,GAAYzG,GAAUyG,EAAYxF,GAC7DA,GAGF7B,EAAAyK,sBAAP,SACEp1B,EACA+C,GAEA,IAAIypB,EAAO,IAAI6I,GAGf,OAFA7I,EAAKzpB,MAAQA,EACbypB,EAAKxsB,MAAQA,EAAWA,IAAOA,EAAM4qB,OAAS4B,GACvCA,GAGF7B,EAAA2K,sBAAP,SACE/e,EACAgf,EACAxyB,GAEA,IAAIypB,EAAO,IAAIgJ,GAIf,OAHAhJ,EAAKzpB,MAAQA,EACbypB,EAAKjW,UAAYA,EAAWA,EAAUqU,OAAS4B,EAC/CA,EAAK+I,MAAQA,EAAOhK,GAAUgK,EAAO/I,GAC9BA,GAGF7B,EAAA8K,iBAAP,SACEvf,EACAqb,EACAxuB,GAEA,IAAI6oB,EAAO,IAAI8J,GAIf,OAHA9J,EAAK7oB,MAAQA,EACb6oB,EAAK1V,MAAQA,EAAWA,IAAOA,EAAM0U,OAASgB,GAC9CA,EAAK2F,WAAaA,EAAYhG,GAAUgG,EAAY3F,GAC7CA,GAGFjB,EAAAgL,qBAAP,SACE31B,EACA+C,GAEA,IAAIypB,EAAO,IAAIoJ,GAGf,OAFApJ,EAAKzpB,MAAQA,EACbypB,EAAKxsB,MAAQA,EAAOA,EAAM4qB,OAAS4B,EAC5BA,GAGF7B,EAAAkL,mBAAP,SACEtE,EACAuE,EACAC,EACAC,EACAjzB,GAEA,IAAIypB,EAAO,IAAIyJ,GASf,OARAzJ,EAAKzpB,MAAQA,EACbypB,EAAK+E,WAAaA,EAAYhG,GAAUgG,EAAY/E,GACpDA,EAAKsJ,cAAgBA,EACjBA,IAAeA,EAAclL,OAAS4B,GAC1CA,EAAKuJ,gBAAkBA,EACnBA,GAAiBxK,GAAUwK,EAAiBvJ,GAChDA,EAAKwJ,kBAAoBA,EACrBA,GAAmBzK,GAAUyK,EAAmBxJ,GAC7CA,GAGF7B,EAAAuL,sBAAP,SACE52B,EACAuyB,EACAsE,EACAnE,EACAnH,EACA9nB,GAEA,IAAIypB,EAAO,IAAI4J,GAOf,OANA5J,EAAKzpB,MAAQA,EACbypB,EAAK3B,MAAQA,EACb2B,EAAKltB,KAAOA,EAAMA,EAAKsrB,OAAS4B,EAChCA,EAAKqF,eAAiBA,EAAoBA,GAAgBtG,GAAUsG,EAAgBrF,GACpFA,EAAKzY,KAAOoiB,EAAOA,EAAMvL,OAAS4B,EAClCA,EAAKwF,WAAaA,EAAgBA,GAAYzG,GAAUyG,EAAYxF,GAC7DA,GAGF7B,EAAA0L,wBAAP,SACEpC,EACAjC,EACAnH,EACA9nB,GAEA,IAAIypB,EAAO,IAAI8J,GAKf,OAJA9J,EAAKzpB,MAAQA,EACbypB,EAAK3B,MAAQA,EACb2B,EAAKyH,aAAeA,EAAc1I,GAAU0I,EAAczH,GAC1DA,EAAKwF,WAAaA,EAAgBA,GAAYzG,GAAUyG,EAAYxF,GAC7DA,GAGF7B,EAAA4L,0BAAP,SACEj3B,EACAyU,EACA6E,EACAoZ,EACAnH,EACA9nB,GAEA,IAAI6oB,EAAO,IAAI4K,GAOf,OANA5K,EAAK7oB,MAAQA,EACb6oB,EAAKf,MAAQA,EACbe,EAAKtsB,KAAOA,EAAMA,EAAKsrB,OAASgB,EAChCA,EAAK7X,KAAOA,EAAUA,IAAMA,EAAK6W,OAASgB,GAC1CA,EAAKhT,YAAcA,EAAiBA,IAAaA,EAAYgS,OAASgB,GACtEA,EAAKoG,WAAaA,EACXpG,GAGFjB,EAAA8L,oBAAP,SACE/f,EACA3T,GAEA,IAAIypB,EAAO,IAAIkK,GAGf,OAFAlK,EAAKzpB,MAAQA,EACbypB,EAAK9V,WAAaA,EACX8V,GAGF7B,EAAAgM,qBAAP,SACEpgB,EACA8b,EACAtvB,GAEA,IAAIypB,EAAO,IAAIoK,GAIf,OAHApK,EAAKzpB,MAAQA,EACbypB,EAAKjW,UAAYA,EAAWA,EAAUqU,OAAS4B,EAC/CA,EAAK6F,UAAYA,EAAWA,EAAUzH,OAAS4B,EACxCA,GAEX7B,EAv3BA,GAAsBvsB,EAAAusB,OA23BtB,IAAAkM,EAAA,SAAAC,GAAA,SAAAD,mDAKA,OAL6CE,EAAAF,EAAAC,GAK7CD,EALA,CAA6ClM,GAAvBvsB,EAAAy4B,iBAQtB,IAAAvL,EAAA,SAAAwL,GAAA,SAAAxL,IAAA,IAAA0L,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASoN,OAMlB,OAP8BH,EAAAzL,EAAAwL,GAO9BxL,EAPA,CAA8BuL,GAAjBz4B,EAAAktB,WAUb,IAAAO,EAAA,SAAAiL,GAAA,SAAAjL,IAAA,IAAAmL,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASqN,gBAMlB,OAPuCJ,EAAAlL,EAAAiL,GAOvCjL,EAPA,CAAuClB,GAA1BvsB,EAAAytB,oBAUb,SAAYuL,GAEVA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,eANF,CAAYh5B,EAAAg5B,gBAAAh5B,EAAAg5B,mBAUZ,IAAArL,EAAA,SAAA+K,GAAA,SAAA/K,IAAA,IAAAiL,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASuN,UAWhBL,EAAAM,yBAAoD,OACtD,OAbmCP,EAAAhL,EAAA+K,GAanC/K,EAbA,CAAmCpB,GAAtBvsB,EAAA2tB,gBAgBb,IAcYwL,EAdZlL,EAAA,SAAAyK,GAAA,SAAAzK,IAAA,IAAA2K,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAAS0N,YAQlB,OATmCT,EAAA1K,EAAAyK,GASnCzK,EATA,CAAmCwK,GA2BnC,SAAAjK,EAAoCttB,GAElC,GAAIA,EAAK0qB,MAAQF,EAASQ,WAAY,CACpC,IAAImN,EAAiCn4B,EAAMyE,KAE3C,OADA3B,OAAOq1B,EAAQxzB,QACPwzB,EAAQpzB,WAAW,IACzB,SACE,GAAe,UAAXozB,EAAqB,OAAOF,EAAcG,OAC9C,MAEF,SACE,GAAe,UAAXD,EAAqB,OAAOF,EAAcI,OAC9C,MAEF,SACE,GAAe,YAAXF,EAAuB,OAAOF,EAAcK,SAChD,MAEF,SACE,GAAe,UAAXH,EAAqB,OAAOF,EAAcM,OAC9C,MAEF,SACE,GAAe,aAAXJ,EAAwB,OAAOF,EAAcO,gBAIhD,GACLx4B,EAAK0qB,MAAQF,EAASW,gBACKnrB,EAAMoX,WAAWsT,MAAQF,EAASQ,WAC7D,CACImN,EAA4Dn4B,EAAMoX,WAAY3S,KAClF3B,OAAOq1B,EAAQxzB,QACf,IAAI8zB,EAAqCz4B,EAAMoB,SAASqD,KAGxD,GAFA3B,OAAO21B,EAAQ9zB,QAEA,YAAXwzB,EACF,OAAQM,EAAQ1zB,WAAW,IACzB,QACE,GAAe,UAAX0zB,EAAqB,OAAOR,EAAcS,gBAC9C,MAEF,SACE,OAAQD,GACN,IAAK,SAAU,OAAOR,EAAcU,gBACpC,IAAK,UAAW,OAAOV,EAAcW,mBAO/C,OAAOX,EAAcY,OA/EV/5B,EAAAiuB,gBAcb,SAAYkL,GACVA,IAAA,mBACAA,IAAA,mBACAA,IAAA,uBACAA,IAAA,qCACAA,IAAA,qCACAA,IAAA,uCACAA,IAAA,yBACAA,IAAA,mBACAA,IAAA,mBATF,CAAYA,EAAAn5B,EAAAm5B,gBAAAn5B,EAAAm5B,mBAaZn5B,EAAAwuB,sBAwDA,IAAAH,EAAA,SAAAqK,GAAA,SAAArK,IAAA,IAAAuK,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASsO,YAQlB,OATmCrB,EAAAtK,EAAAqK,GASnCrK,EATA,CAAmC9B,GAAtBvsB,EAAAquB,gBAYb,SAAY4L,GAEVA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,iBANF,CAAYj6B,EAAAi6B,cAAAj6B,EAAAi6B,iBAUZ,IAAAtL,EAAA,SAAA+J,GAAA,SAAA/J,IAAA,IAAAiK,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASwO,UAMlB,OAPiCvB,EAAAhK,EAAA+J,GAOjC/J,EAPA,CAAiCpC,GAApBvsB,EAAA2uB,cAYb,IAAAwL,EAAA,SAAAzB,GAAA,SAAAyB,mDAAgD,OAAPxB,EAAAwB,EAAAzB,GAAOyB,EAAhD,CAAyC5N,GAAnBvsB,EAAAm6B,aAGtB,IAQYC,EARZvL,EAAA,SAAA6J,GAAA,SAAA7J,IAAA,IAAA+J,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASQ,aAIlB,OAL0CyM,EAAA9J,EAAA6J,GAK1C7J,EALA,CAA0CsL,GAA7Bn6B,EAAA6uB,uBAQb,SAAYuL,GACVA,IAAA,iBACAA,IAAA,qBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,mBANF,CAAYA,EAAAp6B,EAAAo6B,cAAAp6B,EAAAo6B,iBAUZ,IAAAC,EAAA,SAAA3B,GAAA,SAAA2B,IAAA,IAAAzB,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASG,UAIlB,OALgD8M,EAAA0B,EAAA3B,GAKhD2B,EALA,CAAgDF,GAA1Bn6B,EAAAq6B,oBAQtB,IAAApL,EAAA,SAAAyJ,GAAA,SAAAzJ,IAAA,IAAA2J,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAA0B,YAAcF,EAAYG,QAI5B,OAL4C5B,EAAA1J,EAAAyJ,GAK5CzJ,EALA,CAA4CoL,GAA/Br6B,EAAAivB,yBAQb,SAAYuL,GACVA,IAAA,mBACAA,IAAA,WAFF,CAAYx6B,EAAAw6B,gBAAAx6B,EAAAw6B,mBAMZ,IAAAhL,EAAA,SAAAkJ,GAAA,SAAAlJ,IAAA,IAAAoJ,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAAS+O,YAQlB,OATyC9B,EAAAnJ,EAAAkJ,GASzClJ,EATA,CAAyC2K,GAA5Bn6B,EAAAwvB,sBAYb,IAAAG,EAAA,SAAA+I,GAAA,SAAA/I,IAAA,IAAAiJ,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASgP,SAQlB,OATsC/B,EAAAhJ,EAAA+I,GAStC/I,EATA,CAAsCwK,GAAzBn6B,EAAA2vB,mBAYb,IAAAG,EAAA,SAAA4I,GAAA,SAAA5I,IAAA,IAAA8I,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASS,OAQlB,OAToCwM,EAAA7I,EAAA4I,GASpC5I,EATA,CAAoCqK,GAAvBn6B,EAAA8vB,iBAYb,IAAAG,EAAA,SAAAyI,GAAA,SAAAzI,IAAA,IAAA2I,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASiP,QAIlB,OALqChC,EAAA1I,EAAAyI,GAKrCzI,EALA,CAAqCkK,GAAxBn6B,EAAAiwB,kBAQb,IAAAE,EAAA,SAAAuI,GAAA,SAAAvI,IAAA,IAAAyI,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASkP,YAChBhC,EAAAjzB,KAAO,gBACT,OAH2CgzB,EAAAxI,EAAAuI,GAG3CvI,EAHA,CAA2CtB,GAA9B7uB,EAAAmwB,wBAMb,IAAAG,EAAA,SAAAoI,GAAA,SAAApI,IAAA,IAAAsI,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASU,gBAMlB,OAP6CuM,EAAArI,EAAAoI,GAO7CpI,EAPA,CAA6C6J,GAAhCn6B,EAAAswB,0BAUb,IAAAK,EAAA,SAAA+H,GAAA,SAAA/H,IAAA,IAAAiI,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAA0B,YAAcF,EAAYS,QAI5B,OAL4ClC,EAAAhI,EAAA+H,GAK5C/H,EALA,CAA4C0J,GAA/Br6B,EAAA2wB,yBAQb,IAAAG,EAAA,SAAA4H,GAAA,SAAA5H,IAAA,IAAA8H,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASoP,WAIlB,OALwCnC,EAAA7H,EAAA4H,GAKxC5H,EALA,CAAwCqJ,GAA3Bn6B,EAAA8wB,qBAQb,IAAAI,EAAA,SAAAwH,GAAA,SAAAxH,IAAA,IAAA0H,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASqP,aAMlB,OAP0CpC,EAAAzH,EAAAwH,GAO1CxH,EAPA,CAA0CiJ,GAA7Bn6B,EAAAkxB,uBAUb,IAAAE,EAAA,SAAAsH,GAAA,SAAAtH,IAAA,IAAAwH,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAA0B,YAAcF,EAAYY,UAI5B,OAL8CrC,EAAAvH,EAAAsH,GAK9CtH,EALA,CAA8CiJ,GAAjCr6B,EAAAoxB,2BAQb,IAAAE,EAAA,SAAAoH,GAAA,SAAApH,IAAA,IAAAsH,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASuP,MAClB,OAFmCtC,EAAArH,EAAAoH,GAEnCpH,EAFA,CAAmCxB,GAAtB9vB,EAAAsxB,gBAKb,IAAAE,EAAA,SAAAkH,GAAA,SAAAlH,IAAA,IAAAoH,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASI,KAChB8M,EAAAjzB,KAAO,SACT,OAHoCgzB,EAAAnH,EAAAkH,GAGpClH,EAHA,CAAoC3C,GAAvB7uB,EAAAwxB,iBAMb,IAAAE,EAAA,SAAAgH,GAAA,SAAAhH,IAAA,IAAAkH,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASwP,gBAIlB,OAL6CvC,EAAAjH,EAAAgH,GAK7ChH,EALA,CAA6CyI,GAAhCn6B,EAAA0xB,0BAQb,IAAAE,EAAA,SAAA8G,GAAA,SAAA9G,IAAA,IAAAgH,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASW,iBAMlB,OAP8CsM,EAAA/G,EAAA8G,GAO9C9G,EAPA,CAA8CuI,GAAjCn6B,EAAA4xB,2BAUb,IAAAG,EAAA,SAAA2G,GAAA,SAAA3G,IAAA,IAAA6G,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAA0B,YAAcF,EAAYe,SAM5B,OAP6CxC,EAAA5G,EAAA2G,GAO7C3G,EAPA,CAA6CsI,GAAhCr6B,EAAA+xB,0BAUb,IAAAK,EAAA,SAAAsG,GAAA,SAAAtG,IAAA,IAAAwG,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAAS0P,UAQlB,OATuCzC,EAAAvG,EAAAsG,GASvCtG,EATA,CAAuC+H,GAA1Bn6B,EAAAoyB,oBAYb,IAAAE,EAAA,SAAAoG,GAAA,SAAApG,IAAA,IAAAsG,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAA0B,YAAcF,EAAYiB,SAI5B,OAL6C1C,EAAArG,EAAAoG,GAK7CpG,EALA,CAA6C+H,GAAhCr6B,EAAAsyB,0BAQb,IAAAE,EAAA,SAAAkG,GAAA,SAAAlG,IAAA,IAAAoG,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAAS4P,MAChB1C,EAAAjzB,KAAO,UACT,OAHqCgzB,EAAAnG,EAAAkG,GAGrClG,EAHA,CAAqC3D,GAAxB7uB,EAAAwyB,kBAMb,IAAAE,EAAA,SAAAgG,GAAA,SAAAhG,IAAA,IAAAkG,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAAS6P,KAChB3C,EAAAjzB,KAAO,SACT,OAHoCgzB,EAAAjG,EAAAgG,GAGpChG,EAHA,CAAoC7D,GAAvB7uB,EAAA0yB,iBAMb,IAAAE,EAAA,SAAA8F,GAAA,SAAA9F,IAAA,IAAAgG,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASK,KAChB6M,EAAAjzB,KAAO,SACT,OAHoCgzB,EAAA/F,EAAA8F,GAGpC9F,EAHA,CAAoC/D,GAAvB7uB,EAAA4yB,iBAMb,IAAAnC,EAAA,SAAAiI,GAAA,SAAAjI,IAAA,IAAAmI,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASM,MAChB4M,EAAAjzB,KAAO,UACT,OAHqCgzB,EAAAlI,EAAAiI,GAGrCjI,EAHA,CAAqC5B,GAAxB7uB,EAAAywB,kBAMb,IAAA+K,EAAA,SAAA9C,GAAA,SAAA8C,mDAMA,OAN8C7C,EAAA6C,EAAA9C,GAM9C8C,EANA,CAA8CrB,GAAxBn6B,EAAAw7B,kBAStB,IAAAzI,EAAA,SAAA2F,GAAA,SAAA3F,IAAA,IAAA6F,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAAS+P,eAClB,OAF4C9C,EAAA5F,EAAA2F,GAE5C3F,EAFA,CAA4CyI,GAA/Bx7B,EAAA+yB,yBAKb,IAAAE,EAAA,SAAAyF,GAAA,SAAAzF,IAAA,IAAA2F,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASgQ,cAClB,OAF2C/C,EAAA1F,EAAAyF,GAE3CzF,EAFA,CAA2CuI,GAA9Bx7B,EAAAizB,wBAMbjzB,EAAA27B,gBAAA,SAAgC1H,GAC9B,IAAIzH,EAASxoB,OAAOiwB,EAAUzH,QAC9B,GAAIA,EAAOZ,MAAQF,EAASkQ,MAAO,CACjC,IAAIzI,EAA8B3G,EAAQ2G,WAC1C,GAAIA,EAAWA,EAAWttB,OAAS,KAAOouB,EACxC,OAAQjwB,OAAOwoB,EAAOA,QAAQZ,MAC5B,KAAKF,EAASmQ,oBACd,KAAKnQ,EAASoQ,kBAAmB,OAAO,GAI9C,OAAO,GAIT,IAGYC,EAHZC,EAAA,SAAAtD,GAAA,SAAAsD,mDAA+C,OAAPrD,EAAAqD,EAAAtD,GAAOsD,EAA/C,CAAwCzP,GAAlBvsB,EAAAg8B,YAGtB,SAAYD,GAEVA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,qBANF,CAAYA,EAAA/7B,EAAA+7B,aAAA/7B,EAAA+7B,gBAUZ,IAAAE,EAAA,SAAAvD,GAsBE,SAAAuD,EAAY32B,EAAwBK,EAAcimB,GAAlD,IAAAgN,EACEF,EAAA53B,KAAAR,OAAOA,YAtBTs4B,EAAAhN,KAAOF,EAASwQ,OAChBtD,EAAApM,OAAS,KAaToM,EAAAuD,UAA8B,KAE9BvD,EAAAwD,gBAAuB,EAEvBxD,EAAAyD,YAAkC,KAKhCzD,EAAK0D,WAAa1Q,EAClBgN,EAAKtzB,eAAiBA,EACtBszB,EAAK5D,aAAeC,GAAmB2D,EAAKtzB,gBAC5CszB,EAAKzF,WAAa,IAAIzsB,MACtBkyB,EAAKj0B,MAAQ,IAAI4mB,EAAAE,MAAMmN,EAAM,EAAGjzB,EAAKE,QACrC+yB,EAAKjzB,KAAOA,IAOhB,OApC4BgzB,EAAAsD,EAAAvD,GAiC1Br3B,OAAAC,eAAI26B,EAAA15B,UAAA,eAAJ,WAAsB,OAAOjC,KAAKg8B,YAAcP,EAAWQ,uCAE3Dl7B,OAAAC,eAAI26B,EAAA15B,UAAA,iBAAJ,WAAwB,OAAOjC,KAAKg8B,YAAcP,EAAWS,yCAC/DP,EApCA,CAA4B1P,GAAfvsB,EAAAi8B,SAuCb,IAAAQ,EAAA,SAAA/D,GAAA,SAAA+D,IAAA,IAAA7D,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YAKEs4B,EAAAhF,WAAqC,KAE3BgF,EAAA8D,+BAAgD,KAChD9D,EAAA+D,4BAA6C,OAwDzD,OAhEmDhE,EAAA8D,EAAA/D,GAWjDr3B,OAAAC,eAAIm7B,EAAAl6B,UAAA,gCAAJ,WAIE,OAHKjC,KAAKo8B,iCACRp8B,KAAKo8B,+BAAiCE,GAAmBt8B,MAAM,IAE1DA,KAAKo8B,gEAIdr7B,OAAAC,eAAIm7B,EAAAl6B,UAAA,6BAAJ,WAIE,OAHKjC,KAAKq8B,8BACRr8B,KAAKq8B,4BAA8BC,GAAmBt8B,MAAM,IAEvDA,KAAKq8B,6DAIdt7B,OAAAC,eAAIm7B,EAAAl6B,UAAA,kBAAJ,WACE,IAAIiqB,EAASlsB,KAAKksB,OAClB,QAAKA,MAGDA,EAAOZ,MAAQF,EAASmR,YAAcrQ,EAASA,EAAOA,UAGnDA,EAAOZ,MAAQF,EAASwQ,yCAIjC76B,OAAAC,eAAIm7B,EAAAl6B,UAAA,wBAAJ,WACE,IAAIiqB,EAASlsB,KAAKksB,OAClB,SAAKA,GAAWA,EAAOZ,MAAQF,EAASmR,YAAcrQ,EAASA,EAAOA,WAGlEA,EAAOZ,MAAQF,EAASoR,qBACnBx8B,KAAKqsB,GAAGrB,EAAA3oB,YAAYo6B,SAAkCvQ,EAAQwQ,iBAEnExQ,EAAOZ,MAAQF,EAASuR,iBACnB38B,KAAKqsB,GAAGrB,EAAA3oB,YAAYu6B,SAA8B1Q,EAAQwQ,iBAE5DxQ,EAAOZ,MAAQF,EAASwQ,QAAU57B,KAAKqsB,GAAGrB,EAAA3oB,YAAYo6B,0CAI/DN,EAAAl6B,UAAA46B,oBAAA,SAAoBC,GAIlB,OACEA,EAAOl8B,KAAKyE,MAAQy3B,EAAO/hB,aAAa1V,MACxCrF,KAAKqE,MAAMU,QAAU+3B,EAAOz4B,MAAMU,SACjC/E,KAAK08B,kBAGZP,EAhEA,CAAmDT,GAA7Bh8B,EAAAy8B,uBAmEtB,IAAAY,EAAA,SAAA3E,GAAA,SAAA2E,mDAMA,OAN+D1E,EAAA0E,EAAA3E,GAM/D2E,EANA,CAA+DZ,GAAzCz8B,EAAAq9B,mCAStB,IAAAjK,EAAA,SAAAsF,GAAA,SAAAtF,IAAA,IAAAwF,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASkQ,QAIlB,OALoCjD,EAAAvF,EAAAsF,GAKpCtF,EALA,CAAoC4I,GAAvBh8B,EAAAozB,iBAQb,IAAAE,GAAA,SAAAoF,GAAA,SAAApF,IAAA,IAAAsF,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAAS4R,QAIlB,OALoC3E,EAAArF,EAAAoF,GAKpCpF,EALA,CAAoC0I,GAAvBh8B,EAAAszB,kBAQb,IAAAO,GAAA,SAAA6E,GAAA,SAAA7E,IAAA,IAAA+E,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASuR,mBAelB,OAhBsCtE,EAAA9E,EAAA6E,GAYpCr3B,OAAAC,eAAIuyB,EAAAtxB,UAAA,iBAAJ,WACE,IAAIkxB,EAAiBnzB,KAAKmzB,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAe5tB,OAAS,mCAE7DguB,EAhBA,CAAsC4I,GAAzBz8B,EAAA6zB,oBAmBb,IAAAE,GAAA,SAAA2E,GAAA,SAAA3E,IAAA,IAAA6E,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAAS6R,WAIlB,OALuC5E,EAAA5E,EAAA2E,GAKvC3E,EALA,CAAuCiI,GAA1Bh8B,EAAA+zB,qBAQb,IAAAG,GAAA,SAAAwE,GAAA,SAAAxE,IAAA,IAAA0E,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAAS8R,KAMlB,OAPiC7E,EAAAzE,EAAAwE,GAOjCxE,EAPA,CAAiC8H,GAApBh8B,EAAAk0B,eAUb,IAAAE,GAAA,SAAAsE,GAAA,SAAAtE,IAAA,IAAAwE,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAAS+R,QAClB,OAFoC9E,EAAAvE,EAAAsE,GAEpCtE,EAFA,CAAoC4H,GAAvBh8B,EAAAo0B,kBAKb,IAAAE,GAAA,SAAAoE,GAAA,SAAApE,IAAA,IAAAsE,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASgS,kBAIlB,OALqC/E,EAAArE,EAAAoE,GAKrCpE,EALA,CAAqCmI,GAAxBz8B,EAAAs0B,mBAQb,IAAAG,GAAA,SAAAiE,GAAA,SAAAjE,IAAA,IAAAmE,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASiS,uBAKlB,OAN0ChF,EAAAlE,EAAAiE,GAM1CjE,EANA,CAA0CgI,GAA7Bz8B,EAAAy0B,wBASb,IAAAU,GAAA,SAAAuD,GAAA,SAAAvD,IAAA,IAAAyD,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASkS,eAMlB,OAP2CjF,EAAAxD,EAAAuD,GAO3CvD,EAPA,CAA2C5I,GAA9BvsB,EAAAm1B,yBAUb,IAAAE,GAAA,SAAAqD,GAAA,SAAArD,IAAA,IAAAuD,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASmS,eAMlB,OAPkClF,EAAAtD,EAAAqD,GAOlCrD,EAPA,CAAkC9I,GAArBvsB,EAAAq1B,gBAUb,IAAAT,GAAA,SAAA8D,GAAA,SAAA9D,IAAA,IAAAgE,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASqR,SAUlB,OAXqCpE,EAAA/D,EAAA8D,GAWrC9D,EAXA,CAAqCoH,GAAxBh8B,EAAA40B,mBAcb,IAAAW,GAAA,SAAAmD,GAAA,SAAAnD,IAAA,IAAAqD,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASoS,aAIlB,OALyCnF,EAAApD,EAAAmD,GAKzCnD,EALA,CAAyCyG,GAA5Bh8B,EAAAu1B,uBAQb,IAAAc,GAAA,SAAAqC,GAAA,SAAArC,IAAA,IAAAuC,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASqS,iBAGhBnF,EAAAoF,gBAAuB,IACzB,OALsCrF,EAAAtC,EAAAqC,GAKtCrC,EALA,CAAsCgH,GAAzBr9B,EAAAq2B,oBAQb,IAAAG,GAAA,SAAAkC,GAAA,SAAAlC,IAAA,IAAAoC,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASuS,MAalB,OAdkCtF,EAAAnC,EAAAkC,GAclClC,EAdA,CAAkCwF,GAArBh8B,EAAAw2B,gBAiBb,IAAAG,GAAA,SAAA+B,GAAA,SAAA/B,IAAA,IAAAiC,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASmQ,sBAalB,OAdyClD,EAAAhC,EAAA+B,GAUvCr3B,OAAAC,eAAIq1B,EAAAp0B,UAAA,iBAAJ,WACE,IAAIkxB,EAAiBnzB,KAAKmzB,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAe5tB,OAAS,mCAE7D8wB,EAdA,CAAyC8F,GAA5Bz8B,EAAA22B,uBAiBb,IAAAlB,GAAA,SAAAiD,GAAA,SAAAjD,IAAA,IAAAmD,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASwS,KAQlB,OATiCvF,EAAAlD,EAAAiD,GASjCjD,EATA,CAAiCuG,GAApBh8B,EAAAy1B,eAYb,IAAAQ,GAAA,SAAAyC,GAAA,SAAAzC,IAAA,IAAA2C,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASyS,oBAIlB,OALuCxF,EAAA1C,EAAAyC,GAKvCzC,EALA,CAAuCwG,GAA1Bz8B,EAAAi2B,qBAQb,IAAAL,GAAA,SAAA8C,GAAA,SAAA9C,IAAA,IAAAgD,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAAS0S,SAYlB,OAbqCzF,EAAA/C,EAAA8C,GAarC9C,EAbA,CAAqCoG,GAAxBh8B,EAAA41B,mBAgBb,IAAAO,GAAA,SAAAuC,GAAA,SAAAvC,IAAA,IAAAyC,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAAS2S,uBAClB,OAF0C1F,EAAAxC,EAAAuC,GAE1CvC,EAFA,CAA0CtC,IAA7B7zB,EAAAm2B,wBAKb,IAAAU,GAAA,SAAA6B,GAAA,SAAA7B,IAAA,IAAA+B,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASoQ,oBAClB,OAFuCnD,EAAA9B,EAAA6B,GAEvC7B,EAFA,CAAuCF,IAA1B32B,EAAA62B,qBAKb,IAAAE,GAAA,SAAA2B,GAAA,SAAA3B,IAAA,IAAA6B,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASoR,uBAIlB,OAL0CnE,EAAA5B,EAAA2B,GAK1C3B,EALA,CAA0C0F,GAA7Bz8B,EAAA+2B,wBAQb,IAAAE,GAAA,SAAAyB,GAAA,SAAAzB,IAAA,IAAA2B,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAAS4S,SAIlB,OALqC3F,EAAA1B,EAAAyB,GAKrCzB,EALA,CAAqC+E,GAAxBh8B,EAAAi3B,mBAQb,IAAAK,GAAA,SAAAoB,GAAA,SAAApB,IAAA,IAAAsB,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAAS6S,aAMlB,OAPgC5F,EAAArB,EAAAoB,GAOhCpB,EAPA,CAAgC/K,GAAnBvsB,EAAAs3B,cAUb,IAAAF,GAAA,SAAAsB,GAAA,SAAAtB,IAAA,IAAAwB,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAAS8S,SAMlB,OAPqC7F,EAAAvB,EAAAsB,GAOrCtB,EAPA,CAAqC4E,GAAxBh8B,EAAAo3B,mBAUb,IAAAI,GAAA,SAAAkB,GAAA,SAAAlB,IAAA,IAAAoB,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAAS+S,QAIlB,OALoC9F,EAAAnB,EAAAkB,GAKpClB,EALA,CAAoCwE,GAAvBh8B,EAAAw3B,kBAQb,IAAAK,GAAA,SAAAa,GAAA,SAAAb,IAAA,IAAAe,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASgT,MAUlB,OAXkC/F,EAAAd,EAAAa,GAWlCb,EAXA,CAAkCmE,GAArBh8B,EAAA63B,gBAcb,IAAAG,GAAA,SAAAU,GAAA,SAAAV,IAAA,IAAAY,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASiT,kBAMlB,OAPqChG,EAAAX,EAAAU,GAOrCV,EAPA,CAAqCyE,GAAxBz8B,EAAAg4B,mBAUb,IAAAI,GAAA,SAAAM,GAAA,SAAAN,IAAA,IAAAQ,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASkT,sBAClB,OAFyCjG,EAAAP,EAAAM,GAEzCN,EAFA,CAAyCiF,GAA5Br9B,EAAAo4B,uBAKb,IAAAF,GAAA,SAAAQ,GAAA,SAAAR,IAAA,IAAAU,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASmR,WAMlB,OAPuClE,EAAAT,EAAAQ,GAOvCR,EAPA,CAAuC8D,GAA1Bh8B,EAAAk4B,qBAUb,IAAAI,GAAA,SAAAI,GAAA,SAAAJ,IAAA,IAAAM,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASmT,OAIlB,OALmClG,EAAAL,EAAAI,GAKnCJ,EALA,CAAmC0D,GAAtBh8B,EAAAs4B,iBAQb,IAAAE,GAAA,SAAAE,GAAA,SAAAF,IAAA,IAAAI,EAAA,OAAAF,KAAAG,MAAAv4B,KAAAguB,YAAAhuB,YACEs4B,EAAAhN,KAAOF,EAASoT,QAMlB,OAPoCnG,EAAAH,EAAAE,GAOpCF,EAPA,CAAoCwD,GAuBpC,SAAAY,GAAmC/L,EAAmCkO,QAAA,IAAAA,OAAA,GACpE,IAAI79B,EAAO2vB,EAAY3vB,KAAKyE,KACxB6mB,EAASqE,EAAYrE,OACzB,OAAKA,IAEHqE,EAAYjF,MAAQF,EAASkT,qBAC7BpS,EAAOZ,MAAQF,EAASmR,WAElBrQ,EAASA,EAAOA,SAEpBA,EAAOZ,MAAQF,EAASuR,iBACnBL,GAAqCpQ,EAAQuS,IAClDlO,EAAYlE,GAAGrB,EAAA3oB,YAAYu6B,QACvB5R,EAAAroB,iBACAqoB,EAAAtoB,oBACF9B,EAGJsrB,EAAOZ,MAAQF,EAASoR,sBACxBtQ,EAAOZ,MAAQF,EAASgS,gBAEjBd,GAAyCpQ,EAAQuS,GACjDzT,EAAAroB,iBAAmB/B,EAErB69B,EACH79B,EACA2vB,EAAYlsB,MAAMU,OAAO2vB,aAAe1J,EAAA1oB,eAAiB1B,EAvBzCA,EA2BtB,SAAA+zB,GAAmCN,GAEjC,OADIA,EAAKqK,SAAS,SAAQrK,EAAOA,EAAKxuB,UAAU,EAAGwuB,EAAK9uB,OAAS,IAC1D8uB,EAMT,SAAAxH,GAAmBgC,EAAe3C,GAChC,IAAK,IAAI7rB,EAAI,EAAG0c,EAAI8R,EAAMtpB,OAAQlF,EAAI0c,IAAK1c,EACzCwuB,EAAMxuB,GAAG6rB,OAASA,EA/DTxsB,EAAAw4B,kBAUbx4B,EAAAi/B,aAAA,SAA6B/9B,EAAc0yB,GACzC,GAAIA,EACF,IAAK,IAAIjzB,EAAI,EAAG0c,EAAIuW,EAAW/tB,OAAQlF,EAAI0c,IAAK1c,EAAG,CACjD,IAAI2X,EAAasb,EAAWjzB,GAAGO,KAC/B,GAAIoX,EAAWsT,MAAQF,EAASQ,YAAqC5T,EAAY3S,MAAQzE,EACvF,OAAO,EAIb,OAAO,GAITlB,EAAA48B,sBA8BA58B,EAAAi1B,k4BCl4DA,IAsIYiK,EAtIZ5T,EAAA7qB,EAAA,GAeA0+B,EAAA1+B,EAAA,GAMA2+B,EAAA3+B,EAAA,GAQA4+B,EAAA5+B,EAAA,GA6CA6+B,EAAA7+B,EAAA,GAuCA8+B,EAAA,WAKA,OALA,gBAQAC,EAAA,WAIA,OAJA,gBAOAC,EAAA,WAGA,OAHA,gBAsDA,SAAAC,EAAmCnR,EAA8BoR,GAE/D,OADA37B,OAAO27B,EAAI95B,QACH0oB,GACN,KAAK8Q,EAAAlG,cAAcK,SACnB,KAAK6F,EAAAlG,cAAcS,gBACjB,OAAQ+F,EAAI15B,WAAW,IACrB,QACE,GAAW,MAAP05B,EAAa,OAAOT,EAAaU,YACrC,GAAW,OAAPD,EAAc,OAAOT,EAAaW,YACtC,MAEF,SACE,GAAW,MAAPF,EAAa,OAAOT,EAAaY,sBACrC,GAAW,OAAPH,EAAc,OAAOT,EAAaa,sBACtC,MAEF,QACE,GAAW,KAAPJ,EAAY,OAAOT,EAAac,IACpC,MAEF,QACE,GAAW,KAAPL,EAAY,OAAOT,EAAae,IACpC,MAEF,QACE,GAAW,KAAPN,EAAY,OAAOT,EAAagB,IACpC,GAAW,MAAPP,EAAa,OAAOT,EAAaiB,IACrC,MAEF,QACE,GAAW,KAAPR,EAAY,OAAOT,EAAakB,IACpC,MAEF,QACE,GAAW,KAAPT,EAAY,OAAOT,EAAamB,IACpC,MAEF,QACE,GAAW,KAAPV,EAAY,OAAOT,EAAaoB,YACpC,MAEF,SACE,GAAW,KAAPX,EAAY,OAAOT,EAAaqB,WACpC,MAEF,QACE,GAAW,KAAPZ,EAAY,OAAOT,EAAasB,YACpC,MAEF,QACE,GAAW,MAAPb,EAAa,OAAOT,EAAauB,GACrC,MAEF,QACE,GAAW,MAAPd,EAAa,OAAOT,EAAawB,GACrC,MAEF,QACE,GAAW,KAAPf,EAAY,OAAOT,EAAayB,GACpC,GAAW,MAAPhB,EAAa,OAAOT,EAAa0B,GACrC,GAAW,MAAPjB,EAAa,OAAOT,EAAa2B,YACrC,GAAW,OAAPlB,EAAc,OAAOT,EAAa4B,cACtC,MAEF,QACE,GAAW,KAAPnB,EAAY,OAAOT,EAAa6B,GACpC,GAAW,MAAPpB,EAAa,OAAOT,EAAa8B,GACrC,GAAW,MAAPrB,EAAa,OAAOT,EAAa+B,YAIzC,MAEF,KAAK5B,EAAAlG,cAAcU,gBACjB,OAAQ8F,EAAI15B,WAAW,IACrB,QACE,GAAW,KAAP05B,EAAY,OAAOT,EAAagC,KACpC,GAAW,MAAPvB,EAAa,OAAOT,EAAaiC,WACrC,MAEF,QACE,GAAW,KAAPxB,EAAY,OAAOT,EAAakC,MACpC,GAAW,MAAPzB,EAAa,OAAOT,EAAamC,WACrC,MAEF,QACE,GAAW,KAAP1B,EAAY,OAAOT,EAAaoC,IACpC,MAEF,SACE,GAAW,KAAP3B,EAAY,OAAOT,EAAaqC,YAIxC,MAEF,KAAKlC,EAAAlG,cAAcW,iBACjB,OAAQ6F,EAAI15B,WAAW,IACrB,QACE,GAAW,MAAP05B,EAAa,OAAOT,EAAasC,YACrC,MAEF,QACE,GAAW,MAAP7B,EAAa,OAAOT,EAAauC,aAO7C,OAAOvC,EAAawC,SA9JtB,SAAYxC,GACVA,IAAA,qBAGAA,IAAA,6BACAA,IAAA,6BACAA,IAAA,iDACAA,IAAA,iDAGAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,4BACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,kCACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YAGAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,4BACAA,IAAA,4BAGAA,IAAA,8BACAA,IAAA,8BAvCF,CAAYA,EAAAl/B,EAAAk/B,eAAAl/B,EAAAk/B,kBAiKZ,IA8lEYyC,EAmCAC,EAjoENC,EAAa,IAAIC,IAGvBC,EAAA,SAAArJ,GAyCE,SAAAqJ,EAAYt7B,QAAA,IAAAA,MAAA,MAAZ,IAAAmyB,EACEF,EAAA53B,KAAAR,KAAMmG,IAAYnG,YArCpBs4B,EAAAoJ,kBAAyB,EAKzBpJ,EAAAqJ,eAAsC,IAAIH,IAE1ClJ,EAAAsJ,gBAAuC,IAAIJ,IAE3ClJ,EAAAuJ,YAAgCN,EAEhCjJ,EAAAwJ,YAAqC,IAAIN,IAEzClJ,EAAAyJ,iBAAwC,IAAIP,IAE5ClJ,EAAA0J,mBAA0C,IAAIR,IAG9ClJ,EAAA2J,eAAwC,KAExC3J,EAAA4J,yBAAsD,KAEtD5J,EAAA6J,eAA+B,KAI/B7J,EAAA8J,aAAyC,KAGzC9J,EAAA+J,uBAA4C,KAE5C/J,EAAAgK,0BAAgD,KAO9ChK,EAAKiK,aA6iET,OAxlE6BlK,EAAAoJ,EAAArJ,GA+C3BqJ,EAAAx/B,UAAAugC,UAAA,SAAUx9B,GAER,IADA,IAAIu9B,EAAUviC,KAAKuiC,QACVliC,EAAI,EAAG0c,EAAIwlB,EAAQh9B,OAAQlF,EAAI0c,IAAK1c,EAAG,CAC9C,IAAI0E,EAASw9B,EAAQliC,GACrB,GAAI0E,EAAOC,gBAAkBA,EAAgB,OAAOD,EAEtD,OAAO,MAIT08B,EAAAx/B,UAAAwgC,mBAAA,SAAmBC,GACjB,IAAIC,EACJ,OACE3iC,KAAKwiC,UAAUE,EAAiC,QAChD1iC,KAAKwiC,UAAUE,EAAiC,cAChD1iC,KAAKwiC,WAAWG,EAAM3X,EAAAloB,eAAiB4/B,GAAkC,QACzE1iC,KAAKwiC,UAAWG,EAAyD,cAK7ElB,EAAAx/B,UAAA2gC,WAAA,SAAWC,eACT7iC,KAAK6iC,QAAUA,EACf7iC,KAAK6hC,YAAc,IAAIL,MACpB,KAAM1C,EAAAgE,KAAKC,KACX,MAAOjE,EAAAgE,KAAKE,MACZ,MAAOlE,EAAAgE,KAAKhiB,MACZ,MAAOge,EAAAgE,KAAKG,MACZ,QAASJ,EAAQK,YACjB,KAAMpE,EAAAgE,KAAKK,KACX,MAAOrE,EAAAgE,KAAKM,MACZ,MAAOtE,EAAAgE,KAAKO,MACZ,MAAOvE,EAAAgE,KAAKQ,MACZ,QAAST,EAAQU,YACjB,OAAQzE,EAAAgE,KAAKU,OACb,MAAO1E,EAAAgE,KAAKW,MACZ,MAAO3E,EAAAgE,KAAKY,MACZ,OAAQ5E,EAAAgE,KAAKa,OACb,SAAU7E,EAAAgE,KAAKY,MACf,UAAW5E,EAAAgE,KAAKU,QASnB,IANA,IAAII,EAAgB,IAAIx9B,MACpBy9B,EAAgB,IAAIrC,IACpBsC,EAAgB,IAAI19B,MACpB29B,EAAmB,IAAI39B,MAGlB/F,EAAI,EAAG0c,EAAI/c,KAAKuiC,QAAQh9B,OAAQlF,EAAI0c,IAAK1c,EAAG,CACnD,IAAI0E,EAAS/E,KAAKuiC,QAAQliC,GAGtB2jC,EAAY,IAAIC,EAAUjkC,KAAM+E,GACpC/E,KAAK2hC,eAAenV,IAAIwX,EAAUlpB,aAAckpB,GAChDhkC,KAAKkkC,iBAAmBF,EAIxB,IADA,IAAInR,EAAa9tB,EAAO8tB,WACfsR,EAAI,EAAG7jC,EAAIuyB,EAAWttB,OAAQ4+B,EAAI7jC,IAAK6jC,EAAG,CACjD,IAAIxQ,EAAYd,EAAWsR,GAC3B,OAAQxQ,EAAUrI,MAChB,KAAKyT,EAAA3T,SAASuR,iBACZ38B,KAAKokC,gBAAkCzQ,EAAWmQ,EAAeC,GACjE,MAEF,KAAKhF,EAAA3T,SAASgS,gBACZp9B,KAAKqkC,eAAgC1Q,GACrC,MAEF,KAAKoL,EAAA3T,SAASqR,OACZz8B,KAAKskC,kBAAmC3Q,EAAWkQ,GACnD,MAEF,KAAK9E,EAAA3T,SAASmQ,oBACZv7B,KAAKukC,mBAAwC5Q,GAC7C,MAEF,KAAKoL,EAAA3T,SAAS0S,OACZ99B,KAAKwkC,kBAAmC7Q,EAAWkQ,EAAeD,GAClE,MAEF,KAAK7E,EAAA3T,SAAS2S,qBACZ/9B,KAAKykC,oBAA0C9Q,GAC/C,MAEF,KAAKoL,EAAA3T,SAASoR,qBACZx8B,KAAK0kC,oBAA0C/Q,EAAWmQ,EAAeC,GACzE,MAEF,KAAKhF,EAAA3T,SAASiT,gBACZr+B,KAAK2kC,oBAAqChR,GAC1C,MAEF,KAAKoL,EAAA3T,SAASmR,SACZv8B,KAAK4kC,oBAAuCjR,KAQpD,IAAStzB,EAAI,EAAGA,EAAIujC,EAAcr+B,QAAS,CACzC,IAAIs/B,EAAejB,EAAcvjC,GAEjC,GADIkwB,EAAcsU,EAAatU,aAEzBR,EAAU/vB,KAAK8kC,iBAAiBD,EAAa9pB,aAAc8oB,KAE7D7jC,KAAK2hC,eAAenV,IAAIqY,EAAaE,UAAWhV,GAChD6T,EAAcoB,OAAO3kC,EAAG,KAEpB0vB,EAAU/vB,KAAK8kC,iBAAiBD,EAAaI,gBAAiBpB,KAChE7jC,KAAK2hC,eAAenV,IAAIqY,EAAaE,UAAWhV,GAChD6T,EAAcoB,OAAO3kC,EAAG,KAExBL,KAAKwG,MACHq4B,EAAA96B,eAAemhC,kCACf3U,EAAYlsB,MACMksB,EAAYrE,OAAQmI,KAAK/yB,MAC3CivB,EAAYxV,aAAa1V,QAEzBhF,QAIF0vB,EAAU/vB,KAAK2hC,eAAezgC,IAAI2jC,EAAa9pB,gBAEjD/a,KAAK2hC,eAAenV,IAAIqY,EAAaE,UAAWhV,GAChD6T,EAAcoB,OAAO3kC,EAAG,KAEpB0vB,EAAU/vB,KAAK2hC,eAAezgC,IAAI2jC,EAAaI,mBACjDjlC,KAAK2hC,eAAenV,IAAIqY,EAAaE,UAAWhV,GAChD6T,EAAcoB,OAAO3kC,EAAG,KAExBqD,QAAO,KACLrD,OAOV,IAAuC,IAAA8kC,EAAAC,EAAAvB,GAAawB,EAAAF,EAAAG,QAAAD,EAAAE,KAAAF,EAAAF,EAAAG,OAAE,CAA7C,IAAAE,EAAAC,EAAAJ,EAAA/jC,MAAA,GAACwb,EAAA0oB,EAAA,GAAYE,EAAAF,EAAA,GAChBG,EAAqCD,EACrC3V,OAAO,EACX,EAAG,CACD,IAAI4V,EAAcC,WAkBX,EAGF7V,EAAU/vB,KAAK2hC,eAAezgC,IAAIykC,EAAc5qB,iBAEhDgV,EAAU/vB,KAAK2hC,eAAezgC,IAAIykC,EAAc7I,OAAOl8B,KAAKyE,OAE7DrF,KAAK6lC,yBACH/oB,EACAiT,EACA4V,EAAc7I,OAAO/hB,cAGvB/a,KAAKwG,MACHq4B,EAAA96B,eAAe+hC,mBACfJ,EAAa5I,OAAOz4B,MAAOqhC,EAAa5I,OAAOl8B,KAAKyE,MAGxD,MAnCA,GAAI0qB,EAAU/vB,KAAK+hC,iBAAiB7gC,IAAIykC,EAAc5qB,cAAe,CACnE/a,KAAK6lC,yBACH/oB,EACAiT,EACA4V,EAAc7I,OAAO/hB,cAEvB,OAEF4qB,EAAgB9B,EAAc3iC,IAAIykC,EAAc5qB,gBAE9C/a,KAAKwG,MACHq4B,EAAA96B,eAAemhC,kCACfQ,EAAa5I,OAAO/hB,aAAa1W,MACWqhC,EAAa5I,OAAO5Q,OAAQmI,KAAM/yB,MAC9EokC,EAAa5I,OAAO/hB,aAAa1V,YAuBhCsgC,qGAIX,IAAStlC,EAAI,EAAG0c,EAAI+mB,EAAcv+B,OAAQlF,EAAI0c,IAAK1c,EAAG,CACpD,IAAI0lC,EAAmBjC,EAAczjC,GACjC2lC,EAAqBD,EAAiBxV,YACtC0V,EAAcviC,OAAOsiC,EAAmB/Y,aACxCiZ,EAAclmC,KAAKmmC,kBAAkBF,EAAYrlC,KAAM,MAC3D,GAAKslC,EACL,GAAIA,EAAY5a,MAAQ+V,EAAY+E,gBAAiB,CACnD,IAAIC,EAAgCH,EACpCH,EAAiBM,cAAgBA,OAEjCrmC,KAAKwG,MACHq4B,EAAA96B,eAAeuiC,sCACfL,EAAY5hC,OAMlB,IAAIkiC,EAAgB1D,EAAQ0D,cAC5B,GAAIA,MACF,IAA0B,IAAAC,EAAApB,EAAAmB,GAAaE,EAAAD,EAAAlB,QAAAmB,EAAAlB,KAAAkB,EAAAD,EAAAlB,OAAE,CAAhC,IAAAoB,EAAAjB,EAAAgB,EAAAnlC,MAAA,GAACm2B,EAAAiP,EAAA,GAAO9lC,EAAA8lC,EAAA,GACf,GAAK9lC,EAAK2E,OAAV,CAEA,KADIwqB,EAAU/vB,KAAK2hC,eAAezgC,IAAIN,IAEjC,MAAM,IAAIyf,MAAM,sBAAwBzf,GADhCZ,KAAK2hC,eAAenV,IAAIiL,EAAO1H,sGAMhD,IAAIkS,EAAiBjiC,KAAK2hC,eAAezgC,IAAI,SACzC+gC,IACFv+B,OAAOu+B,EAAe3W,MAAQ+V,EAAY+E,iBAC1CpmC,KAAKiiC,eAAiCA,GAIxC,IAAIC,EAA2BliC,KAAK2hC,eAAezgC,IAAI,mBACnDghC,IACFx+B,OAAOw+B,EAAyB5W,MAAQ+V,EAAYsF,qBACpD3mC,KAAKkiC,yBAA+CA,GAItD,IAAI0E,EAAkB5mC,KAAK2hC,eAAezgC,IAAI,UAC9C,GAAI0lC,EAAiB,CACnBljC,OAAOkjC,EAAgBtb,MAAQ+V,EAAY+E,iBAC3C,IAAIjE,EAAkCyE,EAAiBC,QAAQ,MAC/D,GAAI1E,EACF,GAAIniC,KAAK6hC,YAAYiF,IAAI,UAAW,CAClC,IAAIvW,EAA+BqW,EAAiBrW,YACpDvwB,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,MAAOksB,EAAYyW,+BAGtChnC,KAAKmiC,eAAiBA,EACtBniC,KAAK6hC,YAAYrV,IAAI,SAAU2V,EAAe9sB,MAO9C0a,EAAmBrsB,OAAO1D,KAAK2hC,eAAezgC,IAAI,WACtDwC,OAAOqsB,EAAQzE,MAAQ+V,EAAY4F,oBACnCjnC,KAAKknC,cAAmCnX,EAItC/vB,KAAKgiC,mBAAmB8E,IAAI,YAC1B/W,EAAmB/vB,KAAKgiC,mBAAmB9gC,IAAI,SAEzCoqB,MAAQ+V,EAAY4F,oBACPlX,EAASxD,MAAMvB,EAAA3oB,YAAY8kC,QAAUnc,EAAA3oB,YAAY+kC,WAElDrX,EAASvD,IAAIxB,EAAA3oB,YAAYglC,MAC7CrnC,KAAKoiC,aAAkCrS,KAMrC0R,EAAAx/B,UAAA6iC,iBAAR,SACE/pB,EACAusB,GAIA,IAFA,IAAIvX,EACAgS,EAAmB/hC,KAAK+hC,mBACzB,CACD,GAAIhS,EAAUgS,EAAiB7gC,IAAI6Z,GAAe,OAAOgV,EACzD,IAAI2V,EAAe4B,EAAmBpmC,IAAI6Z,GAC1C,IAAK2qB,EAAc,MACnB,IAAIA,EAAaE,WAIjB,OAAO5lC,KAAK2hC,eAAezgC,IAAIwkC,EAAa3qB,cAH1CA,EAAe2qB,EAAa3qB,aAKhC,OAAO,MAGD0mB,EAAAx/B,UAAAslC,iBAAR,SAAyBjU,EAA6BkU,GAEpD,IADA,IAAIC,EAAenG,EAAelV,KACzB/rB,EAAI,EAAG0c,EAAIuW,EAAW/tB,OAAQlF,EAAI0c,IAAK1c,EAAG,CACjD,IAAIqnC,EAAYpU,EAAWjzB,GAEvBisB,EAAOqb,EADA5I,EAAA7Q,oBAAoBwZ,EAAU9mC,OAErC0rB,IACIkb,EAAgBlb,EAKXmb,EAAenb,EACxBtsB,KAAKwG,MACHq4B,EAAA96B,eAAe6jC,oBACfF,EAAUrjC,MAAOqjC,EAAU9mC,KAAKyD,MAAMS,YAGxC2iC,GAAgBnb,EAVhBtsB,KAAKwG,MACHq4B,EAAA96B,eAAe8jC,8BACfH,EAAUrjC,MAAOqjC,EAAU9mC,KAAKyD,MAAMS,aAY9C,OAAO2iC,GAIDhG,EAAAx/B,UAAA6lC,mBAAR,SACE/X,EACAQ,GAEA,IAAIwX,EAAaxX,EAAYrE,OAC7B,GACG6D,EAAQ4O,aAAa2C,EAAetI,SACpCzI,EAAYlsB,MAAMU,OAAOsnB,GAAGrB,EAAA3oB,YAAY2lC,UAEvCzX,EAAYlsB,MAAMU,OAAOkjC,WACzBlY,EAAQ1D,GAAGrB,EAAA3oB,YAAYo6B,UAErB/4B,OAAOqkC,GAAYzc,MAAQyT,EAAA3T,SAASwQ,QAE5BmM,EAAYzc,MAAQyT,EAAA3T,SAASmR,UACnC74B,OAAcqkC,EAAY7b,QAAQZ,MAAQyT,EAAA3T,SAASwQ,QAGzD,CACA,IAAI3Z,EAAasO,EAAYyW,yBACzBhnC,KAAK2hC,eAAemF,IAAI7kB,GAC1BjiB,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,MAAO0rB,EAAQjV,eAGlC9a,KAAK2hC,eAAenV,IAAIvK,EAAY8N,GAChCA,EAAQ1D,GAAGrB,EAAA3oB,YAAY2lC,WAAUjY,EAAQjV,aAAemH,MAK1Dwf,EAAAx/B,UAAAmiC,gBAAR,SACE7T,EACAuT,EACAC,EACAmE,QAAA,IAAAA,MAAA,MAEA,IAAIptB,EAAeyV,EAAY4X,sBAC/B,GAAInoC,KAAK2hC,eAAemF,IAAIhsB,GAC1B9a,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,MAAOyW,OAH5B,CAQA,IAAIwY,EAAa/C,EAAY+C,WACzB8U,EAAa7X,EAAY3vB,KAAKyE,KAC9BpD,EAAY,IAAIomC,EAClBroC,KACAooC,EACAttB,EACAyV,EACA+C,EACItzB,KAAKunC,iBAAiBjU,EACpBgO,EAAetI,OACfsI,EAAenI,OACfmI,EAAelI,WAEjBkI,EAAelV,MAErBnqB,EAAUiqB,OAASgc,EACnBloC,KAAK2hC,eAAenV,IAAI1R,EAAc7Y,GAEtC,IAAImxB,EAAkB7C,EAAY6C,gBAClC,GAAIA,EAAiB,CACnB,IAAIkV,EAAqBlV,EAAgB7tB,OACrCtD,EAAU08B,aAAa2C,EAAelI,WACpCkP,GACFtoC,KAAKwG,MACHq4B,EAAA96B,eAAewkC,8CACfxJ,EAAA5T,MAAMplB,KACJwqB,EAAY3vB,KAAKyD,MACjB+uB,EAAgBkV,EAAqB,GAAGjkC,QAMrCikC,GACTvE,EAAiBj+B,KAAK7D,GAQ1B,GAHIsuB,EAAYtD,aAAa6W,EAAch+B,KAAK7D,GAG5CimC,EAAW,CACb,GAAIA,EAAU7U,SACZ,GAAI6U,EAAU7U,QAAQyT,IAAIsB,GAKxB,YAJApoC,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,MAAOyW,QAK5BotB,EAAU7U,QAAU,IAAImO,IAE1B0G,EAAU7U,QAAQ7G,IAAI4b,EAAYnmC,GAC9BimC,EAAU7b,GAAGrB,EAAA3oB,YAAYmmC,gBAAkBvmC,EAAUoqB,GAAGrB,EAAA3oB,YAAYo6B,SACtEx6B,EAAUuqB,IAAIxB,EAAA3oB,YAAYmmC,oBAIvB,GAAIvmC,EAAUoqB,GAAGrB,EAAA3oB,YAAYo6B,QAAS,CAC3C,GAAIz8B,KAAK+hC,iBAAiB+E,IAAIhsB,GAK5B,YAJA9a,KAAKwG,MACHq4B,EAAA96B,eAAe0kC,4DACflY,EAAY3vB,KAAKyD,MAAOyW,GAM5B,GAFA9a,KAAK+hC,iBAAiBvV,IAAI1R,EAAc7Y,GACxCjC,KAAKkkC,iBAAiB7Q,QAAQ7G,IAAI4b,EAAYnmC,GAC1CA,EAAUoqB,GAAGrB,EAAA3oB,YAAYo6B,SAAWlM,EAAYlsB,MAAMU,OAAO2jC,QAAS,CACxE,GAAI1oC,KAAKgiC,mBAAmB8E,IAAIsB,GAK9B,YAJApoC,KAAKwG,MACHq4B,EAAA96B,eAAe0kC,4DACflY,EAAY3vB,KAAKyD,MAAiBrE,KAAKgiC,mBAAmB9gC,IAAIknC,GAAattB,cAI/E7Y,EAAUuqB,IAAIxB,EAAA3oB,YAAYmmC,eAC1BxoC,KAAKgiC,mBAAmBxV,IAAI4b,EAAYnmC,IAM5C,IADA,IAAI0mC,EAAqBpY,EAAY8C,QAC5BhzB,EAAI,EAAG0c,EAAI4rB,EAAmBpjC,OAAQlF,EAAI0c,IAAK1c,EAAG,CACzD,IAAIuoC,EAAoBD,EAAmBtoC,GAC3C,OAAQuoC,EAAkBtd,MACxB,KAAKyT,EAAA3T,SAASqS,iBACZz9B,KAAK6oC,gBAAkCD,EAAmB3mC,GAC1D,MAEF,KAAK88B,EAAA3T,SAASoQ,kBACRoN,EAAkBrc,MAAMvB,EAAA3oB,YAAYymC,IAAM9d,EAAA3oB,YAAY0mC,KACxD/oC,KAAKgpC,mBAAsCJ,EAAmB3mC,GAE9DjC,KAAKipC,iBAAoCL,EAAmB3mC,GAE9D,MAEF,QACE,MAAM,IAAIoe,MAAM,0BAKtBrgB,KAAK8nC,mBAAmB7lC,EAAWsuB,KAG7BkR,EAAAx/B,UAAA4mC,gBAAR,SACEtY,EACA2Y,GAEA,IAAItoC,EAAO2vB,EAAY3vB,KAAKyE,KACxByV,EAAeyV,EAAY4X,sBAC3B7U,EAAa/C,EAAY+C,WAG7B,GAAI/C,EAAYlE,GAAGrB,EAAA3oB,YAAYu6B,QAAS,CACtC,GAAI58B,KAAK2hC,eAAemF,IAAIhsB,GAK1B,YAJA9a,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,MAAOyW,GAI5B,GAAIouB,EAAe7V,SACjB,GAAI6V,EAAe7V,QAAQyT,IAAIlmC,GAK7B,YAJAZ,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,MAAOyW,QAK5BouB,EAAe7V,QAAU,IAAImO,IAE/B,IAAI2H,EAAc,IAAIC,EACpBppC,KACAY,EACAka,EACAgkB,EAAAgE,KAAKa,KACLpT,EACA+C,EACItzB,KAAKunC,iBAAiBjU,EAAYgO,EAAelV,MACjDkV,EAAelV,MAErB+c,EAAYjd,OAASgd,EACrBA,EAAe7V,QAAQ7G,IAAI5rB,EAAMuoC,GACjCnpC,KAAK2hC,eAAenV,IAAI1R,EAAcquB,GAClCD,EAAe7c,GAAGrB,EAAA3oB,YAAYmmC,gBAChCW,EAAY3c,IAAIxB,EAAA3oB,YAAYmmC,mBAIzB,CACL,GAAIU,EAAeG,iBACjB,GAAIH,EAAeG,gBAAgBvC,IAAIlmC,GAKrC,YAJAZ,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,MAAOyW,QAK5BouB,EAAeG,gBAAkB,IAAI7H,IAEvC,IAAI8H,EAAgB,IAAIC,EACtBL,EACAtoC,EACAka,EACAyV,GAEE+C,GAAYtzB,KAAKunC,iBAAiBjU,EAAYgO,EAAelV,MACjE8c,EAAeG,gBAAgB7c,IAAI5rB,EAAM0oC,KAKrC7H,EAAAx/B,UAAAgnC,iBAAR,SACE1Y,EACA2Y,GAEA,IAAId,EAAa7X,EAAY3vB,KAAKyE,KAC9ByV,EAAeyV,EAAY4X,sBAC3BlmC,EAAsC,KAEtCqxB,EAAa/C,EAAY+C,WACzBkW,EAAiBlI,EAAelV,KAWpC,GAVIkH,IACFkW,EAAiBxpC,KAAKunC,iBAAiBjU,EACrCgO,EAAehI,gBACfgI,EAAe/H,gBACf+H,EAAe9H,iBACf8H,EAAerI,SAKf1I,EAAYlE,GAAGrB,EAAA3oB,YAAYu6B,QAAS,CAGtC,GAFAl5B,OAAO6sB,EAAY3vB,KAAK0qB,MAAQyT,EAAA3T,SAASkP,aAErCt6B,KAAK2hC,eAAemF,IAAIhsB,GAK1B,YAJA9a,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBAAwBxW,EAAY3vB,KAAKyD,MACxDyW,GAIJ,GAAIouB,EAAe7V,SACjB,GAAI6V,EAAe7V,QAAQyT,IAAIsB,GAK7B,YAJApoC,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,MAAOyW,QAK5BouB,EAAe7V,QAAU,IAAImO,IAE/Bv/B,EAAY,IAAIwnC,EACdzpC,KACAooC,EACAttB,EACAyV,EACA2Y,EACAM,GAEFN,EAAe7V,QAAQ7G,IAAI4b,EAAYnmC,GACvCjC,KAAK2hC,eAAenV,IAAI1R,EAAc7Y,GAClCinC,EAAe7c,GAAGrB,EAAA3oB,YAAYmmC,gBAChCvmC,EAAUuqB,IAAIxB,EAAA3oB,YAAYmmC,mBAIvB,CACL,GAAIU,EAAeG,iBACjB,GAAIH,EAAeG,gBAAgBvC,IAAIsB,GAKrC,YAJApoC,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,MAAOyW,QAK5BouB,EAAeG,gBAAkB,IAAI7H,IAEvCv/B,EAAY,IAAIwnC,EACdzpC,KACAooC,EACAttB,EACAyV,EACA2Y,EACAM,GAKEjZ,EAAY3vB,KAAK0qB,MAAQyT,EAAA3T,SAASkP,YAChC4O,EAAeQ,qBACjB1pC,KAAKwG,MACHq4B,EAAA96B,eAAe4lC,qDACfpZ,EAAY3vB,KAAKyD,QAGnBpC,EAAUuqB,IAAIxB,EAAA3oB,YAAYi4B,aAC1B4O,EAAeQ,qBAAuBznC,GAGxCinC,EAAeG,gBAAgB7c,IAAI4b,EAAYnmC,GAE7CinC,EAAe7c,GAAGrB,EAAA3oB,YAAYmmC,gBAChCvmC,EAAUuqB,IAAIxB,EAAA3oB,YAAYmmC,eAI9BxoC,KAAK4pC,uBAAuBrZ,EAAY+C,WAAYrxB,EAAWinC,IAGzDzH,EAAAx/B,UAAA2nC,uBAAR,SACEtW,EACArxB,EACAinC,GAEA,GAAI5V,EACF,IAAK,IAAIjzB,EAAI,EAAG0c,EAAIuW,EAAW/tB,OAAQlF,EAAI0c,IAAK1c,EAAG,CACjD,IAAIqnC,EAAYpU,EAAWjzB,GAC3B,OAAQqnC,EAAUzZ,eAChB,KAAK8Q,EAAAlG,cAAcK,SACnB,KAAK6F,EAAAlG,cAAcS,gBACnB,KAAKyF,EAAAlG,cAAcU,gBACnB,KAAKwF,EAAAlG,cAAcW,iBACjB,IAAIqQ,EAAUnC,EAAU1Z,WAAa0Z,EAAU1Z,UAAUzoB,QAAU,EACnE,GAAe,GAAXskC,EAAc,CAChB,IAAIC,EAA0BpC,EAAU1Z,UAAW,GACnD,GACE8b,EAASxe,MAAQyT,EAAA3T,SAASG,SACNue,EAAU9P,aAAe+E,EAAAjF,YAAYiB,OACzD,CACA,IAAIzP,EAAO8T,EACTsI,EAAUzZ,cACgB6b,EAAUxoC,OAEtC,GAAIgqB,GAAQsT,EAAawC,QACvBphC,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACfD,EAASzlC,WAEN,CACL,IAAI2lC,EAAYd,EAAee,mBAC3BD,EAAUlD,IAAIxb,GAChBtrB,KAAKwG,MACHq4B,EAAA96B,eAAemmC,kCACfJ,EAASzlC,QAGXpC,EAAUkoC,aAAe7e,EACzB0e,EAAUxd,IAAIlB,EAAMrpB,UAIxBjC,KAAKwG,MACHq4B,EAAA96B,eAAeqmC,wBACfN,EAASzlC,YAIbrE,KAAKwG,MACHq4B,EAAA96B,eAAesmC,+BACf3C,EAAUrjC,MAAO,IAAKwlC,EAAQ/kC,SAAS,OAS7C28B,EAAAx/B,UAAA+mC,mBAAR,SACEzY,EACA2Y,GAEA,IAAId,EAAa7X,EAAY3vB,KAAKyE,KAC9BilC,EAAuB/Z,EAAY4X,sBACnCoC,EAAkBvqC,KAAK2hC,eAAezgC,IAAIopC,GAC1CE,EAAWja,EAAYlE,GAAGrB,EAAA3oB,YAAYymC,KACtC2B,GAAQ,EACZ,GAAIF,GACF,GACEA,EAAgBjf,MAAQ+V,EAAYqJ,UAI/B,OAHJF,EACcD,EAAiBI,gBACjBJ,EAAiBK,iBAOhC,YAJA5qC,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,MAAOimC,QAK5BC,EAAkB,IAAIM,EACpB7qC,KACAooC,EACAkC,EACApB,GAEFuB,GAAQ,EAGV,IAAInX,EAAa/C,EAAY+C,WACzBkW,EAAiBlI,EAAelV,KAChCkH,IACFkW,EAAiBxpC,KAAKunC,iBAAiBjU,EACrCgO,EAAerI,SAInB,IAAI6R,GAAYN,EAAWxf,EAAAxoB,cAAgBwoB,EAAAvoB,eAAiB2lC,EAG5D,GAAI7X,EAAYlE,GAAGrB,EAAA3oB,YAAYu6B,QAAS,CACtC,IAAImO,EAAa7B,EAAepuB,aAAekQ,EAAAroB,iBAAmBmoC,EAClE,GAAI9qC,KAAK2hC,eAAemF,IAAIiE,GAK1B,YAJA/qC,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,MAAO0mC,GAI5B,IAAIC,EAAkB,IAAIvB,EACxBzpC,KACA8qC,EACAC,EACAxa,EACA,KACAiZ,GAOF,GALIgB,EACSD,EAAiBI,gBAAkBK,EAEnCT,EAAiBK,gBAAkBI,EAE5CP,EAAO,CACT,GAAIvB,EAAe7V,SACjB,GAAI6V,EAAe7V,QAAQyT,IAAIsB,GAK7B,YAJApoC,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,MAAO0mC,QAK5B7B,EAAe7V,QAAU,IAAImO,IAE/B0H,EAAe7V,QAAQ7G,IAAI4b,EAAYmC,QAEvC7mC,OAAOwlC,EAAe7V,SAAW6V,EAAe7V,QAAQyT,IAAIsB,IAE9DpoC,KAAK2hC,eAAenV,IAAI8d,EAAsBC,GAC1CrB,EAAe7c,GAAGrB,EAAA3oB,YAAYmmC,gBAChC+B,EAAgB/d,IAAIxB,EAAA3oB,YAAYmmC,mBAI7B,CACL,IAAIyC,EAAe/B,EAAepuB,aAAekQ,EAAAtoB,mBAAqBooC,EACtE,GAAI5B,EAAeG,iBACjB,GAAIH,EAAeG,gBAAgBvC,IAAIgE,GAKrC,YAJA9qC,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,MAAOimC,QAK5BpB,EAAeG,gBAAkB,IAAI7H,IAEvC,IAAI0J,EAAoB,IAAIzB,EAC1BzpC,KACA8qC,EACAG,EACA1a,EACA2Y,EACAM,GAEEgB,EACSD,EAAiBI,gBAAkBO,EAEnCX,EAAiBK,gBAAkBM,EAEhDhC,EAAeG,gBAAgB7c,IAAIse,EAAUP,GAC7CvqC,KAAK2hC,eAAenV,IAAI8d,EAAsBC,GAC1CrB,EAAe7c,GAAGrB,EAAA3oB,YAAYmmC,iBAChC+B,EAAgB/d,IAAIxB,EAAA3oB,YAAYmmC,eAChC0C,EAAkB1e,IAAIxB,EAAA3oB,YAAYmmC,kBAKhC/G,EAAAx/B,UAAAoiC,eAAR,SACE9T,EACA2X,QAAA,IAAAA,MAAA,MAEA,IAAIptB,EAAeyV,EAAY4X,sBAC/B,GAAInoC,KAAK2hC,eAAemF,IAAIhsB,GAC1B9a,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,MAAOyW,OAH5B,CAOA,IAAIstB,EAAa7X,EAAY3vB,KAAKyE,KAC9B0qB,EAAU,IAAIob,EAAKnrC,KAAMooC,EAAYttB,EAAcyV,GAIvD,GAHAR,EAAQ7D,OAASgc,EACjBloC,KAAK2hC,eAAenV,IAAI1R,EAAciV,GAElCmY,EAAW,CACb,GAAIA,EAAU7U,SACZ,GAAI6U,EAAU7U,QAAQyT,IAAIsB,GAKxB,YAJApoC,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,MAAOyW,QAK5BotB,EAAU7U,QAAU,IAAImO,IAE1B0G,EAAU7U,QAAQ7G,IAAI4b,EAAYrY,GAC9BmY,EAAU7b,GAAGrB,EAAA3oB,YAAYmmC,gBAAkBzY,EAAQ1D,GAAGrB,EAAA3oB,YAAYo6B,SACpE1M,EAAQvD,IAAIxB,EAAA3oB,YAAYmmC,oBAErB,GAAIzY,EAAQ1D,GAAGrB,EAAA3oB,YAAYo6B,QAAS,CACzC,GAAIz8B,KAAK+hC,iBAAiB+E,IAAIhsB,GAK5B,YAJA9a,KAAKwG,MACHq4B,EAAA96B,eAAe0kC,4DACflY,EAAY3vB,KAAKyD,MAAOyW,GAM5B,GAFA9a,KAAK+hC,iBAAiBvV,IAAI1R,EAAciV,GACxC/vB,KAAKkkC,iBAAiB7Q,QAAQ7G,IAAI4b,EAAYrY,GAC1CQ,EAAYlsB,MAAMU,OAAO2jC,QAAS,CACpC,GAAI1oC,KAAKgiC,mBAAmB8E,IAAIsB,GAK9B,YAJApoC,KAAKwG,MACHq4B,EAAA96B,eAAe0kC,4DACflY,EAAY3vB,KAAKyD,MAAiBrE,KAAKgiC,mBAAmB9gC,IAAIknC,GAAattB,cAI/EiV,EAAQvD,IAAIxB,EAAA3oB,YAAYmmC,eACxBxoC,KAAKgiC,mBAAmBxV,IAAI4b,EAAYrY,IAK5C,IADA,IAAIkE,EAAS1D,EAAY0D,OAChB5zB,EAAI,EAAG0c,EAAIkX,EAAO1uB,OAAQlF,EAAI0c,IAAK1c,EAC1CL,KAAKorC,oBAAoBnX,EAAO5zB,GAAI0vB,GAGtC/vB,KAAK8nC,mBAAmB/X,EAASQ,KAG3BkR,EAAAx/B,UAAAmpC,oBAAR,SACE7a,EACA8a,GAEA,IAAIzqC,EAAO2vB,EAAY3vB,KAAKyE,KACxByV,EAAeyV,EAAY4X,sBAC/B,GAAIkD,EAAIhY,SACN,GAAIgY,EAAIhY,QAAQyT,IAAIlmC,GAKlB,YAJAZ,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,MAAOyW,QAK5BuwB,EAAIhY,QAAU,IAAImO,IAEpB,IAAIlgC,EAAQ,IAAIgqC,EAAUD,EAAKrrC,KAAMY,EAAMka,EAAcyV,GACzD8a,EAAIhY,QAAQ7G,IAAI5rB,EAAMU,GAClB+pC,EAAIhf,GAAGrB,EAAA3oB,YAAYmmC,gBACrBlnC,EAAMkrB,IAAIxB,EAAA3oB,YAAYmmC,gBAIlB/G,EAAAx/B,UAAAqiC,kBAAR,SACE3Q,EACAkQ,GAEA,IAAIxQ,EAAUM,EAAUN,QACxB,GAAIA,EACF,IAAK,IAAIhzB,EAAI,EAAG0c,EAAIsW,EAAQ9tB,OAAQlF,EAAI0c,IAAK1c,EAC3CL,KAAKurC,iBAAiBlY,EAAQhzB,GAAIszB,EAAUe,aAAcmP,QAG5D7jC,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACfpW,EAAUtvB,QAKRo9B,EAAAx/B,UAAA4jC,yBAAR,SACE/qB,EACAiV,EACAmD,GAGAlzB,KAAK+hC,iBAAiBvV,IAAI1R,EAAciV,GAGxC,IAAI2E,EAAexB,EAAW7uB,MAAMU,OAAO2vB,aACvC8W,EAASxgB,EAAAjoB,iBAAmB2xB,EAC5BsP,EAAYhkC,KAAK2hC,eAAezgC,IAAIsqC,GACnCxH,IAAWA,EAAYtgC,OAAO1D,KAAK2hC,eAAezgC,IAAIsqC,EAASxgB,EAAA1oB,eAAiB,WACrFoB,OAAOsgC,EAAU1Y,MAAQ+V,EAAYoK,WACrC,IAAIrD,EAAalV,EAAW7tB,KAChB2+B,EAAW3Q,QAAQ7G,IAAI4b,EAAYrY,GAG3CmD,EAAW7uB,MAAMU,OAAOkjC,YACtBjoC,KAAK2hC,eAAemF,IAAIsB,GAC1BpoC,KAAKwG,MACHq4B,EAAA96B,eAAe0kC,4DACfvV,EAAW7uB,MAAO+jC,IAGpBrY,EAAQjV,aAAestB,EACvBpoC,KAAK2hC,eAAenV,IAAI4b,EAAYrY,MAKlC0R,EAAAx/B,UAAAspC,iBAAR,SACEzO,EACApI,EACAmP,GAEA,IAQI6H,EACAC,EACAjG,EAVA3qB,EAAe+hB,EAAOz4B,MAAMU,OAAO2vB,aAAe1J,EAAA1oB,eAAiBw6B,EAAO/hB,aAAa1V,KAC3F,GAAIrF,KAAK+hC,iBAAiB+E,IAAI/rB,GAC5B/a,KAAKwG,MACHq4B,EAAA96B,eAAe0kC,4DACf3L,EAAO/hB,aAAa1W,MAAO0W,QAS/B,GAAoB,MAAhB2Z,EAAsB,CAIxB,GAHAgX,EAAiB5O,EAAOz4B,MAAMU,OAAO2vB,aAAe1J,EAAA1oB,eAAiBw6B,EAAOl8B,KAAKyE,KAG7EsmC,EAAoB3rC,KAAK2hC,eAAezgC,IAAIwqC,GAM9C,YALA1rC,KAAK6lC,yBACH9qB,EACA4wB,EACA7O,EAAO/hB,cAMX,GAAI8oB,EAAciD,IAAI/rB,GAKpB,YAJA/a,KAAKwG,MACHq4B,EAAA96B,eAAe0kC,4DACf3L,EAAO/hB,aAAa1W,MAAO0W,IAI/B2qB,EAAe,IAAIxG,GACN0G,YAAa,EAC1BF,EAAa3qB,aAAe2wB,EAC5BhG,EAAa5I,OAASA,EACtB+G,EAAcrX,IAAIzR,EAAc2qB,OAG3B,CAKL,GAJAgG,EAAiBhX,EAAe1J,EAAA1oB,eAAiBw6B,EAAOl8B,KAAKyE,KAG7DsmC,EAAoB3rC,KAAK2hC,eAAezgC,IAAIwqC,GAO1C,YALA1rC,KAAK6lC,yBACH9qB,EACA4wB,EACA7O,EAAO/hB,cAOX,IADA,IAAI6wB,EAAO,IAAIC,IACRnG,EAAe7B,EAAc3iC,IAAIwqC,IAAiB,CACvD,IAAIhG,EAAaE,WAaV,CAEL,GADA+F,EAAoB3rC,KAAK2hC,eAAezgC,IAAIwkC,EAAa3qB,cAOvD,YALA/a,KAAK6lC,yBACH9qB,EACA4wB,EACA7O,EAAO/hB,cAIX,MArBA,GADA4wB,EAAoB3rC,KAAK+hC,iBAAiB7gC,IAAIwkC,EAAa3qB,cAOzD,YALA/a,KAAK6lC,yBACH9qB,EACA4wB,EACA7O,EAAO/hB,cAKX,GADA2wB,EAAiBhG,EAAa3qB,aAC1B6wB,EAAK9E,IAAIpB,GAAe,MAC5BkG,EAAKE,IAAIpG,GAgBb,GAAI7B,EAAciD,IAAI/rB,GAKpB,YAJA/a,KAAKwG,MACHq4B,EAAA96B,eAAe0kC,4DACf3L,EAAO/hB,aAAa1W,MAAO0W,IAI/B2qB,EAAe,IAAIxG,GACN0G,YAAa,EAC1BF,EAAa3qB,aAAe2wB,EAC5BhG,EAAa5I,OAASA,EACtB+G,EAAcrX,IAAIzR,EAAc2qB,KAI5BjE,EAAAx/B,UAAAsiC,mBAAR,SACEhU,EACA2X,QAAA,IAAAA,MAAA,MAEA,IAAIptB,EAAeyV,EAAY4X,sBAC/B,GAAInoC,KAAK2hC,eAAemF,IAAIhsB,GAC1B9a,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,MAAOyW,OAH5B,CAOA,IAAIstB,EAAa7X,EAAY3vB,KAAKyE,KAC9BiuB,EAAa/C,EAAY+C,WACzBrxB,EAAY,IAAIwnC,EAClBzpC,KACAooC,EACAttB,EACAyV,EACA,KACA+C,EACItzB,KAAKunC,iBAAiBjU,EACpBgO,EAAetI,OACfsI,EAAerI,QAEjBqI,EAAelV,MAKrB,GAHAnqB,EAAUiqB,OAASgc,EACnBloC,KAAK2hC,eAAenV,IAAI1R,EAAc7Y,GAElCimC,EAAW,CACb,GAAIA,EAAU7U,SACZ,GAAI6U,EAAU7U,QAAQyT,IAAIsB,GAKxB,YAJApoC,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,MAAOyW,QAK5BotB,EAAU7U,QAAU,IAAImO,IAE1B0G,EAAU7U,QAAQ7G,IAAI4b,EAAYnmC,GAC9BimC,EAAU7b,GAAGrB,EAAA3oB,YAAYmmC,gBAAkBvmC,EAAUoqB,GAAGrB,EAAA3oB,YAAYo6B,UACtEx6B,EAAUiqB,OAASgc,EACnBjmC,EAAUuqB,IAAIxB,EAAA3oB,YAAYmmC,qBAEvB,GAAIvmC,EAAUoqB,GAAGrB,EAAA3oB,YAAYo6B,QAAS,CAC3C,GAAIz8B,KAAK+hC,iBAAiB+E,IAAIhsB,GAK5B,YAJA9a,KAAKwG,MACHq4B,EAAA96B,eAAe0kC,4DACflY,EAAY3vB,KAAKyD,MAAOyW,GAM5B,GAFA9a,KAAK+hC,iBAAiBvV,IAAI1R,EAAc7Y,GACxCjC,KAAKkkC,iBAAiB7Q,QAAQ7G,IAAI4b,EAAYnmC,GAC1CsuB,EAAYlsB,MAAMU,OAAO2jC,QAAS,CACpC,GAAI1oC,KAAKgiC,mBAAmB8E,IAAIsB,GAK9B,YAJApoC,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,MAAiBrE,KAAKgiC,mBAAmB9gC,IAAIknC,GAAattB,cAI/E7Y,EAAUuqB,IAAIxB,EAAA3oB,YAAYmmC,eAC1BxoC,KAAKgiC,mBAAmBxV,IAAI4b,EAAYnmC,IAI5CjC,KAAK8nC,mBAAmB7lC,EAAWsuB,KAG7BkR,EAAAx/B,UAAAuiC,kBAAR,SACE7Q,EACAkQ,EACAD,GAEA,IAAIrO,EAAe5B,EAAU4B,aAC7B,GAAIA,EACF,IAAK,IAAIl1B,EAAI,EAAG0c,EAAIwY,EAAahwB,OAAQlF,EAAI0c,IAAK1c,EAChDL,KAAK+rC,iBACHxW,EAAal1B,GACbszB,EAAUe,aACVmP,EAAeD,QAGd,GAAIjQ,EAAU6B,cAAe,CAClC,IAAI4S,EAAazU,EAAU6B,cAAcnwB,KACrCyV,EACF6Y,EAAUtvB,MAAMU,OAAO2vB,aACvB1J,EAAA1oB,eACA8lC,EAEF,GAAIpoC,KAAK2hC,eAAemF,IAAIhsB,GAM1B,YALA9a,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfpT,EAAU6B,cAAcnxB,MACxByW,GAMJ,IAAIkpB,EAAYhkC,KAAK2hC,eAAezgC,IAAIyyB,EAAUe,cAClD,GAAIsP,EAEF,YADAhkC,KAAK2hC,eAAenV,IAAI1R,EAAckpB,GAKxC,IAAIa,EAAe,IAAI5F,EACvB4F,EAAaE,UAAYjqB,EACzB,IAAIC,EAAeiQ,EAAAjoB,iBAAmB4wB,EAAUe,aAChDmQ,EAAa9pB,aAAeA,EAC5B8pB,EAAaI,gBAAkBlqB,EAAeiQ,EAAA1oB,eAAiB,QAC/DuiC,EAAatU,YAAc,KAC3BqT,EAAc99B,KAAK++B,KAIfpD,EAAAx/B,UAAA8pC,iBAAR,SACExb,EACAmE,EACA4S,EACA1D,GAEA,IAAImB,EAAYxU,EAAY4X,sBAC5B,GAAInoC,KAAK2hC,eAAemF,IAAI/B,GAC1B/kC,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,MAAO0gC,OAH5B,CAQA,IAGIhV,EAHAhV,EAAe2Z,EAAe1J,EAAA1oB,eAAiBiuB,EAAYxV,aAAa1V,KAI5E,GAAI0qB,EAAU/vB,KAAK+hC,iBAAiB7gC,IAAI6Z,GACtC/a,KAAK2hC,eAAenV,IAAIuY,EAAWhV,OADrC,CAMA,IAAMic,EAAYhhB,EAAA1oB,eAAiB,QAC/BuiC,EAAe,IAAI5F,EACvB4F,EAAaE,UAAYA,EACrBrQ,EAAagK,SAASsN,IACxBnH,EAAa9pB,aAAeA,EAC5B8pB,EAAaI,gBACXvQ,EAAa7uB,UAAU,EAAG6uB,EAAanvB,OAASymC,EAAUzmC,OAAS,GACnEgrB,EAAYxV,aAAa1V,OAG3Bw/B,EAAa9pB,aAAeA,EAC5B8pB,EAAaI,gBACXvQ,EACAsX,EACAhhB,EAAA1oB,eACAiuB,EAAYxV,aAAa1V,MAG7Bw/B,EAAatU,YAAcA,EAC3BqT,EAAc99B,KAAK++B,MAGbpD,EAAAx/B,UAAAwiC,oBAAR,SAA4BlU,EAAmC2X,QAAA,IAAAA,MAAA,MAC7D,IAAIptB,EAAeyV,EAAY4X,sBAC/B,GAAInoC,KAAK2hC,eAAemF,IAAIhsB,GAC1B9a,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,MAAOyW,OAH5B,CAQA,IAAIwY,EAAa/C,EAAY+C,WACzB8U,EAAa7X,EAAY3vB,KAAKyE,KAC9BpD,EAAY,IAAIgqC,EAClBjsC,KACAooC,EACAttB,EACAyV,EACA+C,EACItzB,KAAKunC,iBAAiBjU,EAAYgO,EAAetI,QACjDsI,EAAelV,MAKrB,GAHAnqB,EAAUiqB,OAASgc,EACnBloC,KAAK2hC,eAAenV,IAAI1R,EAAc7Y,GAElCimC,EAAW,CACb,GAAIA,EAAU7U,SACZ,GAAI6U,EAAU7U,QAAQyT,IAAI7kC,EAAU6Y,cAKlC,YAJA9a,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,MAAOyW,QAK5BotB,EAAU7U,QAAU,IAAImO,IAE1B0G,EAAU7U,QAAQ7G,IAAIvqB,EAAU6Y,aAAc7Y,GAC1CimC,EAAU7b,GAAGrB,EAAA3oB,YAAYmmC,gBAAkBvmC,EAAUoqB,GAAGrB,EAAA3oB,YAAYo6B,SACtEx6B,EAAUuqB,IAAIxB,EAAA3oB,YAAYmmC,oBAEvB,GAAIvmC,EAAUoqB,GAAGrB,EAAA3oB,YAAYo6B,QAAS,CAC3C,GAAIz8B,KAAK+hC,iBAAiB+E,IAAIhsB,GAK5B,YAJA9a,KAAKwG,MACHq4B,EAAA96B,eAAe0kC,4DACflY,EAAY3vB,KAAKyD,MAAOyW,GAM5B,GAFA9a,KAAK+hC,iBAAiBvV,IAAI1R,EAAc7Y,GACxCjC,KAAKkkC,iBAAiB7Q,QAAQ7G,IAAI4b,EAAYnmC,GAC1CsuB,EAAYlsB,MAAMU,OAAO2jC,QAAS,CACpC,GAAI1oC,KAAKgiC,mBAAmB8E,IAAIsB,GAK9B,YAJApoC,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,MAAiBrE,KAAKgiC,mBAAmB9gC,IAAIknC,GAAattB,cAI/E7Y,EAAUuqB,IAAIxB,EAAA3oB,YAAYmmC,eAC1BxoC,KAAKgiC,mBAAmBxV,IAAI4b,EAAYnmC,IAK5C,IADA,IAAI0mC,EAAqBpY,EAAY8C,QAC5BhzB,EAAI,EAAG0c,EAAI4rB,EAAmBpjC,OAAQlF,EAAI0c,IAAK1c,EAAG,CACzD,IAAIuoC,EAAoBD,EAAmBtoC,GAC3C,OAAQuoC,EAAkBtd,MAExB,KAAKyT,EAAA3T,SAASqS,iBACZz9B,KAAK6oC,gBAAkCD,EAAmB3mC,GAC1D,MAEF,KAAK88B,EAAA3T,SAASoQ,kBACRoN,EAAkBrc,MAAMvB,EAAA3oB,YAAYymC,IAAM9d,EAAA3oB,YAAY0mC,KACxD/oC,KAAKgpC,mBAAsCJ,EAAmB3mC,GAE9DjC,KAAKipC,iBAAoCL,EAAmB3mC,GAE9D,MAEF,QACE,MAAM,IAAIoe,MAAM,8BAKtBrgB,KAAK8nC,mBAAmB7lC,EAAWsuB,KAG7BkR,EAAAx/B,UAAAyiC,oBAAR,SACEnU,EACAuT,EACAC,EACAmI,QAAA,IAAAA,MAAA,MAEA,IAAIpxB,EAAeyV,EAAY4X,sBAC3BC,EAAa7X,EAAY3vB,KAAKyE,KAC9B6iC,EAAYloC,KAAK2hC,eAAezgC,IAAI4Z,GAQxC,GAPKotB,KACHA,EAAY,IAAIiE,EAAUnsC,KAAMooC,EAAYttB,EAAcyV,IAChDrE,OAASggB,EACnBlsC,KAAK2hC,eAAenV,IAAI1R,EAAcotB,GACtCloC,KAAK8nC,mBAAmBI,EAAW3X,IAGjC2b,EAAiB,CACnB,GAAIA,EAAgB7Y,SAClB,GAAI6Y,EAAgB7Y,QAAQyT,IAAIsB,GAK9B,YAJApoC,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,MAAOyW,QAK5BoxB,EAAgB7Y,QAAU,IAAImO,IAEhC0K,EAAgB7Y,QAAQ7G,IAAI4b,EAAYF,GACpCgE,EAAgB7f,GAAGrB,EAAA3oB,YAAYmmC,gBAAkBN,EAAU7b,GAAGrB,EAAA3oB,YAAYo6B,SAC5EyL,EAAU1b,IAAIxB,EAAA3oB,YAAYmmC,oBAEvB,GAAIN,EAAU7b,GAAGrB,EAAA3oB,YAAYo6B,QAAS,CAC3C,IAAI2P,EAAiBpsC,KAAK+hC,iBAAiB7gC,IAAI4Z,GAa/C,GAZIsxB,GACGA,EAAe/f,GAAGrB,EAAA3oB,YAAYo6B,SACjCz8B,KAAKwG,MACHq4B,EAAA96B,eAAesoC,kFACf9b,EAAY3vB,KAAKyD,MAAO6jC,EAAUptB,cAGtCotB,EAAYkE,GAEZpsC,KAAK+hC,iBAAiBvV,IAAI1R,EAAcotB,GAE1CloC,KAAKkkC,iBAAiB7Q,QAAQ7G,IAAI4b,EAAYF,GAC1C3X,EAAYlsB,MAAMU,OAAO2jC,QAAS,CACpC,GAAI1oC,KAAKgiC,mBAAmB8E,IAAIsB,GAK9B,YAJApoC,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,MAAiBrE,KAAKgiC,mBAAmB9gC,IAAIknC,GAAattB,cAI/EotB,EAAU1b,IAAIxB,EAAA3oB,YAAYmmC,eAC1BxoC,KAAKgiC,mBAAmBxV,IAAI4b,EAAYF,IAK5C,IADA,IAAI7U,EAAU9C,EAAY8C,QACjBhzB,EAAI,EAAG0c,EAAIsW,EAAQ9tB,OAAQlF,EAAI0c,IAAK1c,EAC3C,OAAQgzB,EAAQhzB,GAAGirB,MACjB,KAAKyT,EAAA3T,SAASuR,iBACZ38B,KAAKokC,gBAAkC/Q,EAAQhzB,GAAIyjC,EAAeC,EAAkBmE,GACpF,MAEF,KAAKnJ,EAAA3T,SAASgS,gBACZp9B,KAAKqkC,eAAgChR,EAAQhzB,GAAI6nC,GACjD,MAEF,KAAKnJ,EAAA3T,SAASmQ,oBACZv7B,KAAKukC,mBAAwClR,EAAQhzB,GAAI6nC,GACzD,MAEF,KAAKnJ,EAAA3T,SAAS2S,qBACZ/9B,KAAKykC,oBAA0CpR,EAAQhzB,GAAI6nC,GAC3D,MAEF,KAAKnJ,EAAA3T,SAASoR,qBACZx8B,KAAK0kC,oBAA0CrR,EAAQhzB,GAAIyjC,EAAeC,EAAkBmE,GAC5F,MAEF,KAAKnJ,EAAA3T,SAASiT,gBAGZr+B,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf1W,EAAQhzB,GAAGgE,OAEb,MAEF,KAAK06B,EAAA3T,SAASmR,SACZv8B,KAAK4kC,oBAAuCvR,EAAQhzB,GAAI6nC,GACxD,MAEF,QACE,MAAM,IAAI7nB,MAAM,+BAMhBohB,EAAAx/B,UAAA0iC,oBAAR,SAA4BpU,EAA8B2X,QAAA,IAAAA,MAAA,MAGxD,IAAItnC,EAAO2vB,EAAY3vB,KAAKyE,KAC5B,GAAIrF,KAAK6hC,YAAYiF,IAAIlmC,IAASZ,KAAK8hC,YAAYgF,IAAIlmC,GACrDZ,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,MAAOzD,OAH5B,CAOA,IAAI62B,EAAQ,IAAI0H,EAChB1H,EAAMtE,eAAiB5C,EAAY4C,eACnCsE,EAAMpiB,KAAOkb,EAAYlb,KACzBrV,KAAK8hC,YAAYtV,IAAI5rB,EAAM62B,KAGrBgK,EAAAx/B,UAAA2iC,oBAAR,SAA4BjR,EAA8BuU,QAAA,IAAAA,MAAA,MAExD,IADA,IAAI3S,EAAe5B,EAAU4B,aACpBl1B,EAAI,EAAG0c,EAAIwY,EAAahwB,OAAQlF,EAAI0c,IAAK1c,EAAG,CACnD,IAAIkwB,EAAcgF,EAAal1B,GAC3BizB,EAAa/C,EAAY+C,WACzBxY,EAAeyV,EAAY4X,sBAC/B,GAAInoC,KAAK2hC,eAAemF,IAAIhsB,GAC1B9a,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,MAAOyW,OAH5B,CAOA,IAAIstB,EAAa7X,EAAY3vB,KAAKyE,KAC9BinC,EAAS,IAAIlD,EACfppC,KACAooC,EACAttB,EACAgkB,EAAAgE,KAAKa,KACLpT,EACA+C,EACItzB,KAAKunC,iBAAiBjU,EACpBgO,EAAetI,QAEjBsI,EAAelV,MAKrB,GAHAkgB,EAAOpgB,OAASgc,EAChBloC,KAAK2hC,eAAenV,IAAI1R,EAAcwxB,GAElCpE,EAAW,CACb,GAAIA,EAAU7U,SACZ,GAAI6U,EAAU7U,QAAQyT,IAAIsB,GAAa,CACrCpoC,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,MAAOyW,GAE1B,eAGFotB,EAAU7U,QAAU,IAAImO,IAE1B0G,EAAU7U,QAAQ7G,IAAI4b,EAAYkE,GAC9BpE,EAAU7b,GAAGrB,EAAA3oB,YAAYmmC,gBAAkB8D,EAAOjgB,GAAGrB,EAAA3oB,YAAYo6B,SACnE6P,EAAO9f,IAAIxB,EAAA3oB,YAAYmmC,oBAEpB,GAAI8D,EAAOjgB,GAAGrB,EAAA3oB,YAAYo6B,UAC3Bz8B,KAAK+hC,iBAAiB+E,IAAIhsB,GAC5B9a,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,MAAOyW,GAG1B9a,KAAK+hC,iBAAiBvV,IAAI1R,EAAcwxB,GAE1CtsC,KAAKkkC,iBAAiB7Q,QAAQ7G,IAAI4b,EAAYkE,GAC1C/b,EAAYlsB,MAAMU,OAAO2jC,SAAS,CACpC,GAAI1oC,KAAKgiC,mBAAmB8E,IAAIsB,GAAa,CAC3CpoC,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,MAAiBrE,KAAKgiC,mBAAmB9gC,IAAIknC,GAAattB,cAE7E,SAEFwxB,EAAO9f,IAAIxB,EAAA3oB,YAAYmmC,eACvBxoC,KAAKgiC,mBAAmBxV,IAAI4b,EAAYkE,GAG5CtsC,KAAK8nC,mBAAmBwE,EAAQ/b,MAKpCkR,EAAAx/B,UAAAsqC,iBAAA,SACEne,EACAoe,EACAC,QADA,IAAAD,MAAA,WACA,IAAAC,OAAA,GAEA,IAAIhf,EAAmBW,EAAKX,iBACxBif,EAAwB,KAC5B,GAAIjf,KACFif,EAAW1sC,KAAK2sC,YACdlf,EACA+e,EACAC,IAEa,OAAO,KAQxB,IANA,IAAIG,EAAqBxe,EAAKZ,WAC1Bqf,EAAgBD,EAAmBrnC,OACnCunC,EAAiB,IAAI1mC,MAAYymC,GACjCE,EAAiB,IAAI3mC,MAAcymC,GACnCG,EAAqB,EACrBC,GAAU,EACL5sC,EAAI,EAAGA,EAAIwsC,IAAiBxsC,EAAG,CACtC,IAAI6sC,EAAoBN,EAAmBvsC,GAC3C,OAAQ6sC,EAAkB5f,eACxB,KAAKyR,EAAArG,cAAcyU,QACjBH,EAAqB3sC,EAAI,EACzB,MAEF,KAAK0+B,EAAArG,cAAc0U,KACjB1pC,OAAOrD,GAAKwsC,GACZI,GAAU,EAId,IAAII,EAAgBrtC,KAAK2sC,YACvBjpC,OAAOwpC,EAAkB73B,MACzBm3B,EACAC,GAEF,IAAKY,EAAe,OAAO,KAC3BP,EAAezsC,GAAKgtC,EACpBN,EAAe1sC,GAAK6sC,EAAkBtsC,KAAKyE,KAE7C,IACIkU,EADA+zB,EAAiBlf,EAAK7U,WAE1B,GAAI+zB,GAMF,KALA/zB,EAAavZ,KAAK2sC,YAChBW,EACAd,EACAC,IAEe,OAAO,UAExBlzB,EAAaulB,EAAAgE,KAAKa,KAEpB,IAAIvN,EAAY,IAAI0I,EAAAyO,UAAUT,EAAgBvzB,EAAYmzB,GAI1D,OAHAtW,EAAU2W,eAAiBA,EAC3B3W,EAAU4W,mBAAqBA,EAC/B5W,EAAU6W,QAAUA,EACb7W,GAITqL,EAAAx/B,UAAA0qC,YAAA,SACEve,EACAoe,EACAC,GAEA,QAHA,IAAAD,MAAA,WACA,IAAAC,OAAA,GAEIre,EAAK9C,MAAQyT,EAAA3T,SAAS0N,UAAW,CACnC,IAAI1C,EAAYp2B,KAAKusC,iBAAgCne,EAAMoe,EAAyBC,GACpF,OAAKrW,EACEhI,EAAKzB,WACRyJ,EAAU/gB,KAAKm4B,aACfpX,EAAU/gB,KAHS,KAKzB,IAKI0a,EALA0d,EAAqBrf,EACrBga,EAAaqF,EAAS7sC,KAAKyE,KAC3B4c,EAAammB,EACbrD,EAAY0I,EAASppC,MAAMU,OAAO2vB,aAAe1J,EAAA1oB,eAAiB8lC,EAGtE,IACGrY,EAAU/vB,KAAK2hC,eAAezgC,IAAI6jC,MAClChV,EAAU/vB,KAAK2hC,eAAezgC,IAAI+gB,IAEnC,OAAQ8N,EAAQzE,MACd,KAAK+V,EAAYqM,KAAM,OAAO5O,EAAAgE,KAAKhiB,IACnC,KAAKugB,EAAY+E,gBACf,IAAIuH,EAA4B5d,EAAS6d,0BACvCH,EAAS/gB,cACT8f,EACA,MAEF,OAAKmB,EACEvf,EAAKzB,WACRghB,EAASt4B,KAAKm4B,aACdG,EAASt4B,KAHS,KAS5B,IA6BIA,EA7BAoiB,EAAQz3B,KAAK8hC,YAAY5gC,IAAIknC,GACjC,GAAI3Q,EAAO,OAAOz3B,KAAK2sC,YAAYlV,EAAMpiB,KAAMm3B,EAAyBC,GAGxE,GAAIgB,EAAS/gB,cAAe,CAG1B,IAFA,IAAI3P,EAAI0wB,EAAS/gB,cAAcnnB,OAC3B2N,EAAa,IAAI9M,MAAY2W,GACxB1c,EAAI,EAAGA,EAAI0c,IAAK1c,EAAG,CAC1B,IAAIwtC,EAAY7tC,KAAK2sC,YACnBc,EAAS/gB,cAAcrsB,GACvBmsC,EACAC,GAEF,IAAKoB,EAAW,OAAO,KACvB36B,EAAW7S,GAAKwtC,EAGlB,GAAI9wB,EAAG,CACL,IAAI+wB,EAAchP,EAAAiP,cAAc76B,GAC5B46B,EAAYvoC,SACdw/B,GAAa,IAAM+I,EAAc,IACjC7rB,GAAc,IAAM6rB,EAAc,UAE/B,GAAItB,EAAyB,CAClC,IAAIwB,EAAkBxB,EAAwBtrC,IAAI+gB,GAClD,GAAI+rB,EAAiB,OAAOA,GAOhC,OAAK34B,EAAOrV,KAAK6hC,YAAY3gC,IAAI6jC,MAAgB1vB,EAAOrV,KAAK6hC,YAAY3gC,IAAI+gB,IACpE5M,GAGLo3B,GACFzsC,KAAKwG,MACHq4B,EAAA96B,eAAe+hC,mBACf2H,EAAS7sC,KAAKyD,MAAO4d,GAGlB,OAITwf,EAAAx/B,UAAAgsC,qBAAA,SACE9a,EACA+a,EACA1B,EACA2B,QADA,IAAA3B,MAAA,WACA,IAAA2B,MAAA,MAEA,IAAIC,EAAiBjb,EAAe5tB,OAChC8oC,EAAgBH,EAAoBA,EAAkB3oC,OAAS,EACnE,GAAI6oC,GAAkBC,EAgBpB,OAfIA,EACFruC,KAAKwG,MACHq4B,EAAA96B,eAAeuqC,oCACfvP,EAAA5T,MAAMplB,KACSmoC,EAAmB,GAAG7pC,MACtB6pC,EAAmBG,EAAgB,GAAGhqC,OAErD+pC,EAAetpC,SAAS,IAAKupC,EAAcvpC,SAAS,KAE7CqpC,GACTnuC,KAAKwG,MACHq4B,EAAA96B,eAAeuqC,oCACfH,EAAsB9pC,MAAMkqC,MAAOH,EAAetpC,SAAS,IAAK,KAG7D,KAGT,IADA,IAAI4nB,EAAgB,IAAItmB,MAAYgoC,GAC3B/tC,EAAI,EAAGA,EAAI+tC,IAAkB/tC,EAAG,CACvC,IAAIgV,EAAOrV,KAAK2sC,YACDuB,EAAmB7tC,GAChCmsC,GACA,GAEF,IAAKn3B,EAAM,OAAO,KAElBqX,EAAcrsB,GAAKgV,EAErB,OAAOqX,GAIT+U,EAAAx/B,UAAAkkC,kBAAA,SACEjT,EACAsb,EACAC,QAAA,IAAAA,MAAA,MAEA,IAEI1e,EACAmY,EAHAtnC,EAAOsyB,EAAW7tB,KAMtB,GAAIopC,GAEF,GACEA,EAAepb,UACdtD,EAAU0e,EAAepb,QAAQnyB,IAAIN,KACtCmvB,EAAQzE,MAAQ+V,EAAYqN,UAI5B,OAFA1uC,KAAKqiC,uBAAyB,KAC9BriC,KAAKsiC,0BAA4B,KAC1BvS,OAGJ,GAAIye,EAAoB,CAG7B,GAAIze,EAAUye,EAAmBG,KAAKC,eAAehuC,GAGnD,OAFAZ,KAAKqiC,uBAAyB,KAC9BriC,KAAKsiC,0BAA4B,KAC1BvS,EAiBT,GAAImY,EAAYsG,EAAmBvsC,UAAUiqB,OAC3C,GACE,GAAI6D,EAAU/vB,KAAK2hC,eAAezgC,IAAIgnC,EAAUptB,aAAekQ,EAAAroB,iBAAmB/B,GAGhF,OAFAZ,KAAKqiC,uBAAyB,KAC9BriC,KAAKsiC,0BAA4B,KAC1BvS,QAEFmY,EAAYA,EAAUhc,QAKnC,OAAI6D,EAAU/vB,KAAK2hC,eAAezgC,IAAIgyB,EAAW7uB,MAAMU,OAAO2vB,aAAe1J,EAAA1oB,eAAiB1B,KAC5FZ,KAAKqiC,uBAAyB,KAC9BriC,KAAKsiC,0BAA4B,KAC1BvS,IAILA,EAAU/vB,KAAK2hC,eAAezgC,IAAIN,KACpCZ,KAAKqiC,uBAAyB,KAC9BriC,KAAKsiC,0BAA4B,KAC1BvS,IAGT/vB,KAAKwG,MACHq4B,EAAA96B,eAAe+hC,mBACf5S,EAAW7uB,MAAOzD,GAEb,OAIT6gC,EAAAx/B,UAAA4sC,sBAAA,SACEC,EACAN,GAGA,IAAIO,EAAmBD,EAAe92B,WAClCsB,EAAStZ,KAAKgvC,kBAAkBD,EAAkBP,GACtD,IAAKl1B,EAAQ,OAAO,KAGpB,IAAI21B,EAAeH,EAAe9sC,SAASqD,KAG3C,OAAQiU,EAAOgS,MACb,KAAK+V,EAAYrI,OACjB,KAAKqI,EAAY6N,MACjB,KAAK7N,EAAY8N,MAEf,KADIC,EAAuC91B,EAAQjE,KAAK+5B,gBAMtD,OAJApvC,KAAKwG,MACHq4B,EAAA96B,eAAesrC,oCACfP,EAAe9sC,SAASqC,MAAO4qC,EAAoC31B,EAAQjE,KAAKvQ,YAE3E,KAETwU,EAAS81B,EACT,MAEF,KAAK/N,EAAYqJ,SACf,IAEI0E,EAFAvuC,EAAS6C,OAAkB4V,EAAQqxB,iBAAiB9D,UACxD,IAAKhmC,EAAQ,OAAO,KAEpB,KADIuuC,EAAiBvuC,EAAOu1B,UAAU7c,WAAW61B,gBAM/C,OAJApvC,KAAKwG,MACHq4B,EAAA96B,eAAesrC,oCACfP,EAAe9sC,SAASqC,MAAO4qC,EAAcpuC,EAAOu1B,UAAU7c,WAAWzU,YAEpE,KAETwU,EAAS81B,EACT,MAEF,KAAK/N,EAAYiO,MACf,IAAIrf,EAAoBjwB,KAAKsiC,0BAC7B,GAAIrS,EAAmB,CACrB,IAAIsf,EAAqBj2B,EAAQk2B,eAAe5Q,EAAaU,aAC7D,IAAKiQ,EAKH,OAJAvvC,KAAKwG,MACHq4B,EAAA96B,eAAe0rC,qCACfxf,EAAkB5rB,MAAeiV,EAAQwB,cAEpC,KAET,IAAIvB,EAAag2B,EAAWnZ,UAAU7c,WACtC,KAAMD,EAASC,EAAW61B,gBAKxB,OAJApvC,KAAKwG,MACHq4B,EAAA96B,eAAesrC,oCACfP,EAAe9sC,SAASqC,MAAO4qC,EAAc11B,EAAWzU,YAEnD,MAQf,OAAQwU,EAAOgS,MACb,KAAK+V,EAAY+E,gBACjB,KAAK/E,EAAYiO,MACf,OAAG,CACD,IACIxS,OAAM,EACV,IAFIzJ,EAAU/Z,EAAO+Z,WAELyJ,EAASzJ,EAAQnyB,IAAI+tC,IAGnC,OAFAjvC,KAAKqiC,uBAAyB0M,EAC9B/uC,KAAKsiC,0BAA4B,KAC1BxF,EAGT,GAAIxjB,EAAOgS,MAAQ+V,EAAY+E,gBAAiB,CAC9C,IAAqB9sB,EAAQ+sB,cAG3B,MAFA/sB,EAA0CA,EAAQ+sB,kBAK/C,IAAI/sB,EAAOgS,MAAQ+V,EAAYiO,MAOpC,MANA,IAAYh2B,EAAQo2B,KAGlB,MAFAp2B,EAAwBA,EAAQo2B,MAQtC,MAEF,QACE,IAAIrc,EACJ,GADIA,EAAU/Z,EAAO+Z,QAGnB,GADIyJ,EAASzJ,EAAQnyB,IAAI+tC,GAIvB,OAFAjvC,KAAKqiC,uBAAyB0M,EAC9B/uC,KAAKsiC,0BAA4B,KAC1BxF,EAUf,OAJA98B,KAAKwG,MACHq4B,EAAA96B,eAAesrC,oCACfP,EAAe9sC,SAASqC,MAAO4qC,EAAc31B,EAAOwB,cAE/C,MAGT2mB,EAAAx/B,UAAA0tC,qBAAA,SACEC,EACApB,GAEA,IAAIO,EAAmBa,EAAc53B,WACjCsB,EAAStZ,KAAKgvC,kBAAkBD,EAAkBP,GACtD,IAAKl1B,EAAQ,OAAO,KACpB,OAAQA,EAAOgS,MACb,KAAK+V,EAAYrI,OACjB,KAAKqI,EAAY6N,MACjB,KAAK7N,EAAY8N,MAEf,GAAI71B,EAD6BA,EAAQjE,KACvB+5B,eAGhB,OAFApvC,KAAKqiC,uBAAyB0M,EAC9B/uC,KAAKsiC,0BAA4BsN,EAAc3f,kBACxC3W,EAET,MAEF,KAAK+nB,EAAYiO,MACf,IAAIC,EAAqBj2B,EAAQk2B,eAAe5Q,EAAaU,aAC7D,IAAKiQ,EAKH,OAJAvvC,KAAKwG,MACHq4B,EAAA96B,eAAe0rC,qCACfG,EAAcvrC,MAAeiV,EAAQwB,cAEhC,KAGT,GAAIxB,EADai2B,EAAWnZ,UAAU7c,WACd61B,eAGtB,OAFApvC,KAAKqiC,uBAAyB0M,EAC9B/uC,KAAKsiC,0BAA4BsN,EAAc3f,kBACxC3W,EASb,OAJAtZ,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACfgF,EAAiB1qC,OAEZ,MAGTo9B,EAAAx/B,UAAA+sC,kBAAA,SACEh3B,EACAw2B,GAEA,KAAOx2B,EAAWsT,MAAQyT,EAAA3T,SAASwP,eACjC5iB,EAAuCA,EAAYA,WAErD,OAAQA,EAAWsT,MACjB,KAAKyT,EAAA3T,SAAS+O,UACZ,IAAI9kB,EAAOrV,KAAK2sC,YAAkC30B,EAAYiX,QAC9D,GAAI5Z,EAEF,GADIw6B,EAAYx6B,EAAK+5B,eAInB,OAFApvC,KAAKqiC,uBAAyB,KAC9BriC,KAAKsiC,0BAA4B,KAC1BuN,EAGX,OAAO,KAET,KAAK9Q,EAAA3T,SAASgP,OACZ,MAAM,IAAI/Z,MAAM,mBAElB,KAAK0e,EAAA3T,SAAS6P,KACZ,GAAIuT,EAAmBG,KAAKtiB,GAAE,MAE5B,GADIyjB,EAAgBtB,EAAmBG,KAAKC,eAAe,QAIzD,OAFA5uC,KAAKqiC,uBAAyB,KAC9BriC,KAAKsiC,0BAA4B,KAC1BwN,EAIX,OADI5jB,EAASsiB,EAAmBtiB,SAE9BlsB,KAAKqiC,uBAAyB,KAC9BriC,KAAKsiC,0BAA4B,KAC1BpW,IAETlsB,KAAKwG,MACHq4B,EAAA96B,eAAegsC,+CACf/3B,EAAW3T,OAEN,MAET,KAAK06B,EAAA3T,SAAS4P,MAEV,IAAI8U,EAOF5jB,EARJ,GAAIsiB,EAAmBG,KAAKtiB,GAAE,MAE5B,GADIyjB,EAAgBtB,EAAmBG,KAAKC,eAAe,SAIzD,OAFA5uC,KAAKqiC,uBAAyB,KAC9BriC,KAAKsiC,0BAA4B,KAC1BwN,EAIX,OADI5jB,EAASsiB,EAAmBtiB,SAClBA,EAAOZ,MAAQ+V,EAAYiO,QAAUpjB,EAAiBA,EAAQwjB,OAC1E1vC,KAAKqiC,uBAAyB,KAC9BriC,KAAKsiC,0BAA4B,KAC1BpW,IAETlsB,KAAKwG,MACHq4B,EAAA96B,eAAeisC,iDACfh4B,EAAW3T,OAEN,MAET,KAAK06B,EAAA3T,SAASQ,WACZ,OAAO5rB,KAAKmmC,kBAAwCnuB,EAAYw2B,GAElE,KAAKzP,EAAA3T,SAASG,QACZ,OAA4BvT,EAAYgiB,aACtC,KAAK+E,EAAAjF,YAAYiB,OAGf,OAFA/6B,KAAKqiC,uBAAyBrqB,EAC9BhY,KAAKsiC,0BAA4B,KAC1BtiC,KAAKmiC,eAIhB,MAEF,KAAKpD,EAAA3T,SAASW,eACZ,OAAO/rB,KAAK6uC,sBACgB72B,EAC1Bw2B,GAGJ,KAAKzP,EAAA3T,SAASU,cACZ,OAAO9rB,KAAK2vC,qBACe33B,EACzBw2B,GAGJ,KAAKzP,EAAA3T,SAASS,KACZ,IAAIkjB,EAAoC/2B,EAAYA,WAChDsB,EAAStZ,KAAKgvC,kBAAkBD,EAAkBP,GACtD,IAAKl1B,EAAQ,OAAO,KACpB,GAAIA,EAAOgS,MAAQ+V,EAAY4F,mBAAoB,CACjD,IAAI0G,EAA+Br0B,EAAQs0B,0BACxB51B,EAAY0U,cAC7B8hB,EAAmBG,KAAKnC,wBACxBx0B,GAEF,IAAK21B,EAAU,OAAO,KACtB,IACIkC,EADAt2B,EAAao0B,EAASvX,UAAU7c,WAEpC,GADIs2B,EAAYt2B,EAAW61B,eAIzB,OAAOS,EAEP,IAAIzZ,EAAY7c,EAAW02B,mBAC3B,GAAI7Z,EAAW,CACb,IAAI8Z,EAAiB9Z,EAAU+Z,qBAO/B,OANKD,IACHA,EAAiB,IAAIE,EAAepwC,KAAMo2B,GAC1CA,EAAU+Z,qBAAuBD,GAI5BA,EAOX,OAJAlwC,KAAKwG,MACHq4B,EAAA96B,eAAessC,uGACftB,EAAiB1qC,MAAOiV,EAAOwB,cAE1B,MASb,OAJA9a,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAEN,MAYXo9B,EAxlEA,CAA6B5C,EAAA34B,mBAipE7B,SAAAyhC,EAAoCrc,GAClC,OAAQA,GACN,KAAKyT,EAAAlG,cAAcG,OAAQ,OAAOsI,EAAetI,OACjD,KAAK+F,EAAAlG,cAAcK,SACnB,KAAK6F,EAAAlG,cAAcS,gBAAiB,OAAOgI,EAAehI,gBAC1D,KAAKyF,EAAAlG,cAAcU,gBAAiB,OAAO+H,EAAe/H,gBAC1D,KAAKwF,EAAAlG,cAAcW,iBAAkB,OAAO8H,EAAe9H,iBAC3D,KAAKuF,EAAAlG,cAAcO,UAAW,OAAOkI,EAAelI,UACpD,KAAK2F,EAAAlG,cAAcM,OAAQ,OAAOmI,EAAenI,OACjD,KAAK4F,EAAAlG,cAAcI,OAAQ,OAAOqI,EAAerI,OACjD,QAAS,OAAOqI,EAAelV,MA3pEtB1sB,EAAA+hC,UA2lEb,SAAYJ,GAEVA,IAAA,mBAEAA,IAAA,iBAEAA,IAAA,eAEAA,IAAA,yBAEAA,IAAA,2CAEAA,IAAA,uBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,iBAEAA,IAAA,6CAEAA,IAAA,0BAEAA,IAAA,sCAEAA,IAAA,kBAEAA,IAAA,wBAEAA,IAAA,0BAEAA,IAAA,0BAhCF,CAAYA,EAAA3hC,EAAA2hC,cAAA3hC,EAAA2hC,iBAmCZ,SAAYC,GAEVA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,uCAEAA,IAAA,0BAEAA,IAAA,oBAEAA,IAAA,oBAhBF,CAAYA,EAAA5hC,EAAA4hC,iBAAA5hC,EAAA4hC,oBAmBZ5hC,EAAAioC,sBAeA,IAAA2I,EAAA,WAoBE,SAAAA,EAAsBC,EAAkBnI,EAAoBttB,GAT5D9a,KAAAmsB,MAAqBnB,EAAA3oB,YAAY+pB,KAEjCpsB,KAAAwpC,eAAiClI,EAAelV,KAEhDpsB,KAAAqzB,QAAsC,KAEtCrzB,KAAAksB,OAAyB,KAIvBlsB,KAAKuwC,QAAUA,EACfvwC,KAAKooC,WAAaA,EAClBpoC,KAAK8a,aAAeA,EAWxB,OAPEw1B,EAAAruC,UAAAoqB,GAAA,SAAGC,GAA2B,OAAQtsB,KAAKmsB,MAAQG,IAASA,GAE5DgkB,EAAAruC,UAAAsqB,MAAA,SAAMJ,GAA4B,OAA+B,IAAvBnsB,KAAKmsB,MAAQA,IAEvDmkB,EAAAruC,UAAAuqB,IAAA,SAAIF,GAA2BtsB,KAAKmsB,OAASG,GAE7CgkB,EAAAruC,UAAA08B,aAAA,SAAarS,GAA8B,OAAQtsB,KAAKwpC,eAAiBld,IAASA,GACpFgkB,EAlCA,GAAsB5wC,EAAA4wC,UAqCtB,IAAArM,EAAA,SAAA7L,GAQE,SAAA6L,EACEsM,EACAxrC,GAFF,IAAAuzB,EAIEF,EAAA53B,KAAAR,KAAMuwC,EAASxrC,EAAO2vB,aAAc1J,EAAAjoB,iBAAmBgC,EAAO2vB,eAAa10B,YAV7Es4B,EAAAhN,KAAO+V,EAAYoK,UAWjBnT,EAAKjF,QAAU,IAAImO,MAEvB,OAf+BnJ,EAAA4L,EAAA7L,GAe/B6L,EAfA,CAA+BqM,GAAlB5wC,EAAAukC,YAkBb,IAAAkI,EAAA,SAAA/T,GASE,SAAA+T,EACEoE,EACAnI,EACAttB,EACAyV,GAJF,IAAA+H,EAMEF,EAAA53B,KAAAR,KAAMuwC,EAASnI,EAAYttB,IAAa9a,YAZ1Cs4B,EAAAhN,KAAO+V,EAAYmP,UAajBlY,EAAK/H,YAAcA,EACnB+H,EAAKnM,MAAQoE,EAAYpE,QAE7B,OAnB+BkM,EAAA8T,EAAA/T,GAmB/B+T,EAnBA,CAA+BmE,GAAlB5wC,EAAAysC,YAsBb,IAAAhB,EAAA,SAAA/S,GAQE,SAAA+S,EACEoF,EACAnI,EACAttB,EACAyV,GAJF,IAAA+H,EAMEF,EAAA53B,KAAAR,KAAMuwC,EAASnI,EAAYttB,IAAa9a,YAZ1Cs4B,EAAAhN,KAAO+V,EAAYqM,KAajBpV,EAAK/H,YAAcA,EACnB+H,EAAKnM,MAAQoE,EAAYpE,QAE7B,OAlB0BkM,EAAA8S,EAAA/S,GAkB1B+S,EAlBA,CAA0BmF,GAAb5wC,EAAAyrC,OAqBb,IAAAG,EAAA,SAAAlT,GASE,SAAAkT,EACED,EACAkF,EACAnI,EACAttB,EACAyV,GALF,IAAA+H,EAOEF,EAAA53B,KAAAR,KAAMuwC,EAASnI,EAAYttB,IAAa9a,YAd1Cs4B,EAAAhN,KAAO+V,EAAYqN,UAKnBpW,EAAAmY,cAAqB,EAUnBnY,EAAKpM,OAASmf,EACd/S,EAAK/H,YAAcA,IAEvB,OApB+B8H,EAAAiT,EAAAlT,GAoB/BkT,EApBA,CAA+BgF,GAAlB5wC,EAAA4rC,YAsBb,SAAkBoF,GAChBA,IAAA,eACAA,IAAA,qBACAA,IAAA,iBAHF,CAAkBhxC,EAAAgxC,oBAAAhxC,EAAAgxC,uBAMlB,IAAAC,EAAA,SAAAvY,GAeE,SAAAuY,EACEJ,EACAnI,EACAttB,EACAzF,EACAkb,GALF,IAAA+H,EAOEF,EAAA53B,KAAAR,KAAMuwC,EAASnI,EAAYttB,IAAa9a,YAb1Cs4B,EAAAsY,kBAAiB,EAcftY,EAAKjjB,KAAOA,EACZijB,EAAK/H,YAAcA,IAgBvB,OAxCyC8H,EAAAsY,EAAAvY,GA2BvCuY,EAAA1uC,UAAA4uC,yBAAA,SAAyBC,EAASC,GAIhC,OAHA/wC,KAAK4wC,kBAAiB,EACtB5wC,KAAKgxC,qBAAuBC,QAAQH,EAAIC,GACxC/wC,KAAKwsB,IAAIxB,EAAA3oB,YAAY6uC,MAAQlmB,EAAA3oB,YAAY8uC,SAClCnxC,MAGT2wC,EAAA1uC,UAAAmvC,uBAAA,SAAuB9vC,GAIrB,OAHAtB,KAAK4wC,kBAAiB,EACtB5wC,KAAKqxC,mBAAqB/vC,EAC1BtB,KAAKwsB,IAAIxB,EAAA3oB,YAAY6uC,MAAQlmB,EAAA3oB,YAAY8uC,SAClCnxC,MAEX2wC,EAxCA,CAAyCL,GAA5B5wC,EAAAixC,sBA2Cb,IAAAvH,EAAA,SAAAhR,GAIE,SAAAgR,EACEmH,EACAnI,EACAttB,EACAzF,EACAkb,EACAiZ,GANF,IAAAlR,EAQEF,EAAA53B,KAAAR,KAAMuwC,EAASnI,EAAYttB,EAAczF,EAAMkb,IAAYvwB,YAV7Ds4B,EAAAhN,KAAO+V,EAAYrI,OAWjBV,EAAKnM,MAAQoE,EAAcA,EAAYpE,MAAQnB,EAAA3oB,YAAY+pB,KAC3DkM,EAAKkR,eAAiBA,EACtBlR,EAAKjjB,KAAOA,IAEhB,OAjB4BgjB,EAAA+Q,EAAAhR,GAiB5BgR,EAjBA,CAA4BuH,GAAfjxC,EAAA0pC,SAoBb,IAAAkI,EAAA,WAiBA,OALE,SAAY1wC,EAAcyU,EAAY6E,QAAA,IAAAA,MAAA,MACpCla,KAAKY,KAAOA,EACZZ,KAAKqV,KAAOA,EACZrV,KAAKka,YAAcA,GAfvB,GAAaxa,EAAA4xC,YAoBb,IAAAC,EAAA,SAAAnZ,GASE,SAAAmZ,EACEhB,EACAnI,EACAhzB,EACAC,EACAkb,QAAA,IAAAA,MAAA,MALF,IAAA+H,EAOEF,EAAA53B,KAAAR,KAAMuwC,EAASnI,EAAYA,EAAY/yB,EAAMkb,IAAYvwB,YAd3Ds4B,EAAAhN,KAAO+V,EAAY6N,MAKnB5W,EAAAkZ,aAA8B,KAU5BlZ,EAAKljB,MAAQA,IAEjB,OAnB2BijB,EAAAkZ,EAAAnZ,GAmB3BmZ,EAnBA,CAA2BZ,GAAdjxC,EAAA6xC,QAsBb,IAAA9H,EAAA,SAAArR,GAgBE,SAAAqR,EACE8G,EACAnI,EACAttB,EACAyV,EACA2Y,EACAM,QADA,IAAAN,MAAA,WACA,IAAAM,MAAiClI,EAAelV,MANlD,IAAAkM,EAQEF,EAAA53B,KAAAR,KAAMuwC,EAASnI,EAAYttB,IAAa9a,YAtB1Cs4B,EAAAhN,KAAO+V,EAAY4F,mBAOnB3O,EAAAmZ,UAAkC,IAAIjQ,IAEtClJ,EAAAoZ,mBAAoC,KAEpCpZ,EAAA6R,aAA6BvL,EAAawC,QAYxC9I,EAAK/H,YAAcA,EACnB+H,EAAKnM,MAAQoE,EAAYpE,MACzBmM,EAAK4Q,eAAiBA,EACtB5Q,EAAKkR,eAAiBA,IA6L1B,OAzNuCnR,EAAAoR,EAAArR,GAgCrCqR,EAAAxnC,UAAA4kC,QAAA,SACE8K,EACAnF,gBADA,IAAAmF,MAAA,WACA,IAAAnF,MAAA,MAEA,IAAIsB,EAAc6D,EAAwB7S,EAAAiP,cAAc4D,GAAyB,GAC7EhE,EAAW3tC,KAAKyxC,UAAUvwC,IAAI4sC,GAClC,GAAIH,EAAU,OAAOA,EAErB,IAAIpd,EAAcvwB,KAAKuwB,YACnBqhB,EAAa5xC,KAAKqsB,GAAGrB,EAAA3oB,YAAYwvC,UACjC3I,EAAiBlpC,KAAKkpC,eAGtB4I,EAAyBtF,EAE7B,GADAA,EAA0B,IAAIhL,IAC1BsQ,MACF,IAA2C,IAAAC,EAAA3M,EAAA0M,GAAsBE,EAAAD,EAAAzM,QAAA0M,EAAAzM,KAAAyM,EAAAD,EAAAzM,OAAE,CAA1D,IAAA2M,EAAAxM,EAAAuM,EAAA1wC,MAAA,GAAC4wC,EAAAD,EAAA,GAAeE,EAAAF,EAAA,GACvBzF,EAAwBhgB,IACtB0lB,EACAC,qGAMN,IAAIT,EAAqB1xC,KAAK0xC,mBAC9B,GAAIA,EAAoB,CACtBhuC,OAAO1D,KAAKqsB,GAAGrB,EAAA3oB,YAAYwvC,WAC3B,IACIO,EADmB1uC,OAAOwlC,GAAgB3Y,YACH4C,eACvCkf,EAAyBD,EAAoB7sC,OACjD7B,OAAO2uC,GAA0BX,EAAmBnsC,QACpD,IAAK,IAAIlF,EAAI,EAAGA,EAAIgyC,IAA0BhyC,EAC5CmsC,EAAwBhgB,IACtB4lB,EAAoB/xC,GAAGO,KAAKyE,KAC5BqsC,EAAmBrxC,SAIvBqD,QAAQguC,GAIV,IAEIY,EAFAC,EAAgBhiB,EAAY6F,UAC5Boc,EAAyBjiB,EAAY4C,eAEzC,GAAIwe,IAA0BW,EAA2BX,EAAsBpsC,QAAS,CACtF7B,OAAO8uC,GAA0BF,GAA4BE,EAAuBjtC,QACpF,IAASlF,EAAI,EAAGA,EAAIiyC,IAA4BjyC,EAC9CmsC,EAAwBhgB,IACAgmB,EAAwBnyC,GAAGO,KAAKyE,KACtDssC,EAAsBtxC,SAI1BqD,QAAQ8uC,GAA2D,GAAjCA,EAAuBjtC,QAI3D,IAAIktC,EAA8B,KAC9B/F,EAAwB,KAC5B,GAAIkF,EAAY,CAEd,KADAa,EAAgB/uC,OAAOwlC,GAAgBrC,QAAQ6K,EAAoBlF,IAC/C,OAAO,KAC3BE,EAAW+F,EAAcp9B,KACzBm3B,EAAwBhgB,IAAI,OAAQkgB,GAItC,IAiBInzB,EAjBAm5B,EAAsBH,EAAc/kB,WACpCmlB,EAA0BD,EAAoBntC,OAC9CunC,EAAiB,IAAI1mC,MAAYusC,GACjC5F,EAAiB,IAAI3mC,MAAcusC,GACnC3F,EAAqB,EACzB,IAAS3sC,EAAI,EAAGA,EAAIsyC,IAA2BtyC,EAAG,CAChD,IAAIuyC,EAAuBF,EAAoBryC,GAC3CuyC,EAAqBtlB,eAAiByR,EAAArG,cAAcyU,UACtDH,EAAqB3sC,EAAI,GAE3B,IAAIotC,EAAW/pC,OAAOkvC,EAAqBv9B,MACvCg4B,EAAgBrtC,KAAKuwC,QAAQ5D,YAAYc,EAAUjB,GAAyB,GAChF,IAAKa,EAAe,OAAO,KAC3BP,EAAezsC,GAAKgtC,EACpBN,EAAe1sC,GAAKuyC,EAAqBhyC,KAAKyE,KAIhD,GAAIrF,KAAKqsB,GAAGrB,EAAA3oB,YAAY0mC,KACtBxvB,EAAaulB,EAAAgE,KAAKa,UACb,GAAI3jC,KAAKqsB,GAAGrB,EAAA3oB,YAAYi4B,aAC7B/gB,EAAa7V,OAAO+uC,GAAep9B,SAC9B,CACDo4B,EAAW/pC,OAAO6uC,EAAch5B,YAApC,IACIlE,EAAOrV,KAAKuwC,QAAQ5D,YAAYc,EAAUjB,GAAyB,GACvE,IAAKn3B,EAAM,OAAO,KAClBkE,EAAalE,EAGf,IAAI+gB,EAAY,IAAI0I,EAAAyO,UAAUT,EAAgBvzB,EAAYmzB,GAC1DtW,EAAU2W,eAAiBA,EAC3B3W,EAAU4W,mBAAqBA,EAE/B,IAAIlyB,EAAe9a,KAAK8a,aAaxB,OAZIgzB,EAAYvoC,SAAQuV,GAAgB,IAAMgzB,EAAc,KAC5DH,EAAW,IAAIkF,EACb7yC,KACA8a,EACAsb,EACAqc,GAEIvJ,EACJsD,GAEFxsC,KAAKyxC,UAAUjlB,IAAIshB,EAAaH,GAChC3tC,KAAKuwC,QAAQ3O,gBAAgBpV,IAAI1R,EAAc6yB,GACxCA,GAITlE,EAAAxnC,UAAA6wC,eAAA,SAAepB,GACbhuC,OAAO1D,KAAKqsB,GAAGrB,EAAA3oB,YAAYwvC,WAC3B,IAAI3I,EAAiBxlC,OAAO1D,KAAKkpC,gBAEjC,IAAMwI,IAAsBA,EAAmBnsC,OAAS,OAAOvF,KAE/D,IAAIooC,EAAapoC,KAAKooC,WAClB2K,EAAajU,EAAAiP,cAAc2D,GAC3BsB,EAAmB,IAAIvJ,EACzBzpC,KAAKuwC,QACLnI,EACAc,EAAepuB,aAAe,IAAMi4B,EAAa,IAAM/nB,EAAAtoB,mBAAqB0lC,EAC5EpoC,KAAKuwB,YACL2Y,EACAlpC,KAAKwpC,gBAKP,OAHAwJ,EAAiB7mB,MAAQnsB,KAAKmsB,MAC9B6mB,EAAiB7I,aAAenqC,KAAKmqC,aACrC6I,EAAiBtB,mBAAqBA,EAC/BsB,GAITvJ,EAAAxnC,UAAA2rC,0BAAA,SACEM,EACA1B,EACAyG,GAEA,IAAIC,EAAuC,KAC3C,OAAIlzC,KAAKqsB,GAAGrB,EAAA3oB,YAAY8kC,WACtBzjC,OAA4B,MAArBwqC,GAAyD,GAA5BA,EAAkB3oC,QACtD2tC,EAAwBlzC,KAAKuwC,QAAQtC,qBACnCvqC,OAAO1D,KAAKuwB,YAAY4C,gBACxB+a,EACA1B,EACAyG,IAIGjzC,KAAK6mC,QAAQqM,EAAuB1G,GAFN,MAMvC/C,EAAAxnC,UAAAkxC,4BAAA,SACEjF,EACA1B,GAEA9oC,OAAO1D,KAAKqsB,GAAGrB,EAAA3oB,YAAY2lC,UAC3B,IAAIkL,EAAuC,KAC3C,GAAIhF,EAAmB,CACrB,IAAInxB,EAAImxB,EAAkB3oC,OAC1B2tC,EAAwB,IAAI9sC,MAAY2W,GACxC,IAAK,IAAI1c,EAAI,EAAGA,EAAI0c,IAAK1c,EAAG,CAC1B,IAAI+yC,EAAepzC,KAAKuwC,QAAQ5D,YAC9BuB,EAAkB7tC,GAClBmsC,GACA,GAEF,IAAK4G,EAAc,OAAO,KAC1BF,EAAsB7yC,GAAK+yC,GAG/B,OAAOF,GAGTzJ,EAAAxnC,UAAA6C,SAAA,WAAqB,OAAO9E,KAAKooC,YACnCqB,EAzNA,CAAuC6G,GAA1B5wC,EAAA+pC,oBA4Nb,IAAAoJ,EAAA,SAAAza,GAoCE,SAAAya,EACE5wC,EACA6Y,EACAsb,EACAlK,EACAsgB,gBADA,IAAAtgB,MAAA,WACA,IAAAsgB,MAAA,MALF,IAAAlU,EAOEF,EAAA53B,KAAAR,KAAMiC,EAAUsuC,QAAStuC,EAAUmmC,WAAYttB,IAAa9a,KAO5D,GAhDFs4B,EAAAhN,KAAO+V,EAAY7G,SAOnBlC,EAAA+a,aAAkC,IAAI7R,IAEtClJ,EAAAgb,iBAEAhb,EAAAib,oBAEAjb,EAAAkb,aAA8B,KAM9Blb,EAAAmb,kBAEAnb,EAAAhmB,IAAmB,EAEnBgmB,EAAAob,oBAA2B,EAE3Bpb,EAAAqb,WAA8B,KAE9Brb,EAAAsb,WAA0B,KAElBtb,EAAAub,YAAmB,EACnBvb,EAAAwb,WAA2B,KACnCxb,EAAAyb,aAAoB,EAkFZzb,EAAA0b,SAA2B,KAC3B1b,EAAA2b,SAA2B,KAC3B3b,EAAA4b,SAA2B,KAC3B5b,EAAA6b,SAA2B,KA1EjC7b,EAAKr2B,UAAYA,EACjBq2B,EAAKlC,UAAYA,EACjBkC,EAAKpM,OAASA,EACdoM,EAAKnM,MAAQlqB,EAAUkqB,MACvBmM,EAAKkR,eAAiBvnC,EAAUunC,eAChClR,EAAKkU,wBAA0BA,GACzBvqC,EAAUoqB,GAAGrB,EAAA3oB,YAAY+kC,QAAUpc,EAAA3oB,YAAY2lC,WAAY/lC,EAAUoqB,GAAGrB,EAAA3oB,YAAY+xC,SAAW,CACnG,IAAIC,EAAa,EACjB,GAAInoB,GAAUA,EAAOZ,MAAQ+V,EAAYiO,MAAO,CAC9C5rC,OAAO40B,EAAKjM,GAAGrB,EAAA3oB,YAAYwvC,WAC3B,IAAIyC,EAAQ,IAAI/C,EACdtvC,EAAUsuC,QACV,OACA8D,IACA3wC,OAAO0yB,EAAUsW,WAEnBpU,EAAK+a,aAAa7mB,IAAI,OAAQ8nB,GAC9Bhc,EAAKgb,cAAcgB,EAAMl/B,OAASk/B,EAClC,IAAIxC,EAAiC5lB,EAAQsgB,wBAC7C,GAAIsF,EAAwB,CACrBxZ,EAAKkU,0BAAyBlU,EAAKkU,wBAA0B,IAAIhL,SACtE,IAA2C,IAAA+S,EAAAnP,EAAA0M,GAAsB0C,EAAAD,EAAAjP,QAAAkP,EAAAjP,KAAAiP,EAAAD,EAAAjP,OAAE,CAA1D,IAAA2M,EAAAxM,EAAA+O,EAAAlzC,MAAA,GAAC4wC,EAAAD,EAAA,GAAeE,EAAAF,EAAA,GAClB3Z,EAAKkU,wBAAwB1F,IAAIoL,IACpC5Z,EAAKkU,wBAAwBhgB,IAAI0lB,EAAeC,4GAKtDzuC,QAAQ40B,EAAKjM,GAAGrB,EAAA3oB,YAAYwvC,WAG9B,IADA,IAAI/E,EAAiB1W,EAAU0W,eACtBzsC,EAAI,EAAG0c,EAAI+vB,EAAevnC,OAAQlF,EAAI0c,IAAK1c,EAAG,CACrD,IAAIgtC,EAAgBP,EAAezsC,GAC/Bo0C,EAAgBre,EAAUse,iBAAiBr0C,GAC3Ci0C,EAAQ,IAAI/C,EACdtvC,EAAUsuC,QACVkE,EACAJ,IACAhH,GAGF/U,EAAK+a,aAAa7mB,IAAIioB,EAAeH,GACrChc,EAAKgb,cAAcgB,EAAMl/B,OAASk/B,UAGtChc,EAAKqW,KAAOgG,EAAKhzC,OAAO22B,KAkL5B,OA3Q8BD,EAAAwa,EAAAza,GA6F5Bya,EAAA5wC,UAAA2yC,SAAA,SAASv/B,EAAYzU,EAA4B2vB,QAA5B,IAAA3vB,MAAA,WAA4B,IAAA2vB,MAAA,MAE/C,IAAI8jB,EAAar0C,KAAKo2B,UAAU0W,eAAevnC,OAASvF,KAAKuzC,iBAAiBhuC,OAC1EvF,KAAKqsB,GAAGrB,EAAA3oB,YAAYwvC,aAAawC,EACrC,IAAIC,EAAQ,IAAI/C,EACdvxC,KAAKiC,UAAUsuC,QACf3vC,GAEI,OAASyzC,EAAWvvC,SAAS,IACjCuvC,EACAh/B,EACAkb,GAEF,GAAI3vB,EAAM,CACR,GAAIZ,KAAKqzC,aAAavM,IAAIlmC,GAAO,MAAM,IAAIyf,MAAM,wBACjDrgB,KAAKqzC,aAAa7mB,IAAI5rB,EAAM0zC,GAI9B,OAFAt0C,KAAKszC,cAAcgB,EAAMl/B,OAASk/B,EAClCt0C,KAAKuzC,iBAAiBztC,KAAKuP,GACpBi/B,GASTzB,EAAA5wC,UAAA4yC,aAAA,SAAax/B,EAAYy/B,GACvB,IAAIC,EAoBAT,EAnBJ,YAFuB,IAAAQ,OAAA,GAEfz/B,EAAK2/B,gBACX,KAAKhW,EAAAv4B,WAAW4a,IACd0zB,EAAQ/0C,KAAKg0C,SACb,MAEF,KAAKhV,EAAAv4B,WAAW8a,IACdwzB,EAAQ/0C,KAAKi0C,SACb,MAEF,KAAKjV,EAAAv4B,WAAWib,IACdqzB,EAAQ/0C,KAAKk0C,SACb,MAEF,KAAKlV,EAAAv4B,WAAWmb,IACdmzB,EAAQ/0C,KAAKm0C,SACb,MAEF,QAAS,MAAM,IAAI9zB,MAAM,0BAa3B,OAVI00B,GAASA,EAAMxvC,SACjB+uC,EAAQS,EAAME,OACR5/B,KAAOA,EACbi/B,EAAMnoB,MAAQnB,EAAA3oB,YAAY+pB,MAE1BkoB,EAAQt0C,KAAK40C,SAASv/B,GAEpBA,EAAKgX,GAAG,KACVrsB,KAAK2uC,KAAKuG,gBAAgBZ,EAAMl/B,MAAO0/B,GAElCR,GAITzB,EAAA5wC,UAAAkzC,cAAA,SAAcb,GACZ,IAAIA,EAAMjoB,GAAGrB,EAAA3oB,YAAY8uC,SAAzB,CAEA,IAAI4D,EAEJ,OAHArxC,OAAO4wC,EAAMl/B,OAAS,GAEtB1R,OAAqB,MAAd4wC,EAAMj/B,MACEi/B,EAAMj/B,KAAM2/B,gBACzB,KAAKhW,EAAAv4B,WAAW4a,IACd0zB,EAAQ/0C,KAAKg0C,WAAah0C,KAAKg0C,aAC/B,MAEF,KAAKhV,EAAAv4B,WAAW8a,IACdwzB,EAAQ/0C,KAAKi0C,WAAaj0C,KAAKi0C,aAC/B,MAEF,KAAKjV,EAAAv4B,WAAWib,IACdqzB,EAAQ/0C,KAAKk0C,WAAal0C,KAAKk0C,aAC/B,MAEF,KAAKlV,EAAAv4B,WAAWmb,IACdmzB,EAAQ/0C,KAAKm0C,WAAan0C,KAAKm0C,aAC/B,MAEF,QAAS,MAAM,IAAI9zB,MAAM,0BAE3B3c,OAAO4wC,EAAMl/B,OAAS,GACtB2/B,EAAMjvC,KAAKwuC,KAIbzB,EAAA5wC,UAAAmzC,oBAAA,SAAoB//B,EAAYy/B,GAC9B,IAAIC,EAoBAT,EAnBJ,OAAQj/B,EAAK2/B,gBACX,KAAKhW,EAAAv4B,WAAW4a,IACd0zB,EAAQ/0C,KAAKg0C,WAAah0C,KAAKg0C,aAC/B,MAEF,KAAKhV,EAAAv4B,WAAW8a,IACdwzB,EAAQ/0C,KAAKi0C,WAAaj0C,KAAKi0C,aAC/B,MAEF,KAAKjV,EAAAv4B,WAAWib,IACdqzB,EAAQ/0C,KAAKk0C,WAAal0C,KAAKk0C,aAC/B,MAEF,KAAKlV,EAAAv4B,WAAWmb,IACdmzB,EAAQ/0C,KAAKm0C,WAAan0C,KAAKm0C,aAC/B,MAEF,QAAS,MAAM,IAAI9zB,MAAM,0BAa3B,OAVI00B,EAAMxvC,QACR+uC,EAAQS,EAAMA,EAAMxvC,OAAS,IACvB8P,KAAOA,GAEbi/B,EAAQt0C,KAAK40C,SAASv/B,GACtB0/B,EAAMjvC,KAAKwuC,IAETj/B,EAAKgX,GAAG,KACVrsB,KAAK2uC,KAAKuG,gBAAgBZ,EAAMl/B,MAAO0/B,GAElCR,GAITzB,EAAA5wC,UAAAozC,kBAAA,WACE,IAAIC,EAAKt1C,KAAK6zC,cAGd,OAFK7zC,KAAK8zC,WACL9zC,KAAK8zC,WAAWhuC,KAAKwvC,GADJt1C,KAAK8zC,YAAewB,GAEnCt1C,KAAKwzC,aAAe8B,EAAGxwC,SAAS,KAIzC+tC,EAAA5wC,UAAAszC,kBAAA,WACE7xC,OAA0B,MAAnB1D,KAAK8zC,YACZ,IAAIvuC,EAAiBvF,KAAK8zC,WAAYvuC,OACtC7B,OAAO6B,EAAS,GACRvF,KAAK8zC,WAAYmB,MACrB1vC,EAAS,EACXvF,KAAKwzC,aAAuBxzC,KAAK8zC,WAAYvuC,EAAS,GAAGT,SAAS,KAElE9E,KAAKwzC,aAAe,KACpBxzC,KAAK8zC,WAAa,OAKtBjB,EAAA5wC,UAAAuzC,SAAA,SAAS71C,EAAgB2S,GAMvB,GALAtS,KAAKsS,IAAMA,EACX5O,QAAQ1D,KAAK8zC,aAAe9zC,KAAK8zC,WAAWvuC,QAC5CvF,KAAK8zC,WAAa,KAClB9zC,KAAKwzC,aAAe,KACpBxzC,KAAKg0C,SAAWh0C,KAAKi0C,SAAWj0C,KAAKk0C,SAAWl0C,KAAKm0C,SAAW,KAC5Dn0C,KAAKuwC,QAAQ1N,QAAQ3iB,UAEvB,IADA,IAAIuzB,EAAiBzzC,KAAKyzC,eACjBpzC,EAAI,EAAG0c,EAAI02B,EAAeluC,OAAQlF,EAAI0c,IAAK1c,EAAG,CACrD,IAAIo1C,EAAgBhC,EAAepzC,GACnCV,EAAO0jB,iBACL/Q,EACAmjC,EAAcC,aACdD,EAAc1wC,OAAO+2B,eACrB2Z,EAAcxwC,KACdwwC,EAAcvwC,UAOtB2tC,EAAA5wC,UAAA6C,SAAA,WAAqB,OAAO9E,KAAKiC,UAAUmmC,YAC7CyK,EA3QA,CAA8BvC,GAAjB5wC,EAAAmzC,WA8Qb,IAAAzC,EAAA,SAAAhY,GAUE,SAAAgY,EAAYG,EAAkBna,GAA9B,IAAAkC,EACEF,EAAA53B,KAAAR,KAAMuwC,EAAS,GAAI,KAAGvwC,KATxBs4B,EAAAhN,KAAO+V,EAAYsU,gBAUjB,IAAIvN,EAAahS,EAAUwf,2BAC3Btd,EAAK8P,WAAaA,EAClB9P,EAAKxd,aAAestB,EACpB9P,EAAKlC,UAAYA,EACjBkC,EAAKjjB,KAAOypB,EAAAgE,KAAKO,IAAIwS,WAAWzf,KAEpC,OAlBoCiC,EAAA+X,EAAAhY,GAkBpCgY,EAlBA,CAAoCE,GAAvB5wC,EAAA0wC,iBAqBb,IAAA7G,EAAA,SAAAnR,GAUE,SAAAmR,EACEL,EACAd,EACAttB,EACAyV,GAJF,IAAA+H,EAMEF,EAAA53B,KAAAR,KAAMkpC,EAAeqH,QAASnI,EAAYttB,IAAa9a,YAdzDs4B,EAAAhN,KAAO+V,EAAYyU,gBAejBxd,EAAK4Q,eAAiBA,EACtB5Q,EAAK/H,YAAcA,EACnB+H,EAAKnM,MAAQoE,EAAYpE,QAE7B,OArBoCkM,EAAAkR,EAAAnR,GAqBpCmR,EArBA,CAAoC+G,GAAvB5wC,EAAA6pC,iBAwBb,IAAAwM,EAAA,SAAA3d,GAUE,SAAA2d,EACE9zC,EACA6Y,EACAzF,EACAkb,EACArE,GALF,IAAAoM,EAOEF,EAAA53B,KAAAR,KAAMiC,EAAUsuC,QAAStuC,EAAUmmC,WAAYttB,EAAczF,EAAMkb,IAAYvwB,YAfjFs4B,EAAAhN,KAAO+V,EAAY8N,MAKnB7W,EAAA0d,cAAqB,EAWnB1d,EAAKr2B,UAAYA,EACjBq2B,EAAKnM,MAAQlqB,EAAUkqB,MACvBmM,EAAKjjB,KAAOA,EACZijB,EAAKpM,OAASA,IAElB,OAvB2BmM,EAAA0d,EAAA3d,GAuB3B2d,EAvBA,CAA2BpF,GAAdjxC,EAAAq2C,QA0Bb,IAAAlL,EAAA,SAAAzS,GAYE,SAAAyS,EACE0F,EACAnI,EACAttB,EACAoR,GAJF,IAAAoM,EAMEF,EAAA53B,KAAAR,KAAMuwC,EAASnI,EAAYttB,IAAa9a,YAhB1Cs4B,EAAAhN,KAAO+V,EAAYqJ,SAKnBpS,EAAAqS,gBAA4C,KAE5CrS,EAAAsS,gBAA4C,KAU1CtS,EAAKpM,OAASA,IAElB,OArB8BmM,EAAAwS,EAAAzS,GAqB9ByS,EArBA,CAA8ByF,GAAjB5wC,EAAAmrC,WAwBb,IAAAxC,EAAA,SAAAjQ,GAiBE,SAAAiQ,EACEkI,EACAnI,EACAttB,EACAyV,EACAiZ,GALF,IAAAlR,EAOEF,EAAA53B,KAAAR,KAAMuwC,EAASnI,EAAYttB,IAAa9a,YAtB1Cs4B,EAAAhN,KAAO+V,EAAY+E,gBAKnB9N,EAAAmZ,UAA+B,IAAIjQ,IAEnClJ,EAAA+Q,gBAA8C,KAE9C/Q,EAAA+N,cAAuC,KAEvC/N,EAAAoR,qBAAiD,KAEjDpR,EAAA2R,mBAA2D,IAAIzI,IAU7DlJ,EAAK/H,YAAcA,EACnB+H,EAAKnM,MAAQoE,EAAYpE,MACzBmM,EAAKkR,eAAiBA,IAkO1B,OA7PoCnR,EAAAgQ,EAAAjQ,GA+BlCiQ,EAAApmC,UAAA4kC,QAAA,SACEna,EACA8f,4BAAA,IAAAA,MAAA,MAEA,IAAIsB,EAAcphB,EAAgBoS,EAAAiP,cAAcrhB,GAAiB,GAC7DihB,EAAW3tC,KAAKyxC,UAAUvwC,IAAI4sC,GAClC,GAAIH,EAAU,OAAOA,EAGrB,IAAImE,EAAyBtF,EAE7B,GADAA,EAA0B,IAAIhL,IAC1BsQ,MACF,IAA2C,IAAAmE,EAAA7Q,EAAA0M,GAAsBoE,EAAAD,EAAA3Q,QAAA4Q,EAAA3Q,KAAA2Q,EAAAD,EAAA3Q,OAAE,CAA1D,IAAA6Q,EAAA1Q,EAAAyQ,EAAA50C,MAAA,GAAC4wC,EAAAiE,EAAA,GAAehE,EAAAgE,EAAA,GACvB3J,EAAwBhgB,IAAI0lB,EAAeC,qGAI/C,IA6BI9xC,EAAQ0c,EA7BRwT,EAAcvwB,KAAKuwB,YACnB6lB,EAA0B,KAC9B,GAAI7lB,EAAYtD,YAAa,CAC3B,IAAIopB,EAAgBr2C,KAAKuwC,QAAQ5D,YAAYpc,EAAYtD,YAAa,MACtE,IAAKopB,EAAe,OAAO,KAC3B,KAAMD,EAAYC,EAAcjH,gBAK9B,OAJApvC,KAAKuwC,QAAQ/pC,MACXq4B,EAAA96B,eAAeuiC,sCACf/V,EAAYtD,YAAY5oB,OAEnB,KAET,GAAI+xC,EAAUzX,aAAa2C,EAAenI,QAKxC,OAJAn5B,KAAKuwC,QAAQ/pC,MACXq4B,EAAA96B,eAAeuyC,yCACf/lB,EAAYtD,YAAY5oB,MAAO+xC,EAAUt7B,cAEpC,KAET,GAAIs7B,EAAUzX,aAAa2C,EAAelI,YAAcp5B,KAAK2+B,aAAa2C,EAAelI,WAKvF,OAJAp5B,KAAKuwC,QAAQ/pC,MACXq4B,EAAA96B,eAAewyC,+DACfxX,EAAA5T,MAAMplB,KAAKwqB,EAAY3vB,KAAKyD,MAAOksB,EAAYtD,YAAY5oB,QAEtD,KAMX,GAAIqoB,EAAe,CACjB,IAAK3P,EAAI2P,EAAcnnB,SAAWgrB,EAAY4C,eAAe5tB,OAC3D,MAAM,IAAI8a,MAAM,gCAElB,IAAKhgB,EAAI,EAAGA,EAAI0c,IAAK1c,EACnBmsC,EAAwBhgB,IAAI+D,EAAY4C,eAAe9yB,GAAGO,KAAKyE,KAAMqnB,EAAcrsB,SAEhF,GAAIkwB,EAAY4C,eAAe5tB,OACpC,MAAM,IAAI8a,MAAM,gCAGlB,IAAI+nB,EAAapoC,KAAKooC,WAClBttB,EAAe9a,KAAK8a,aACpBgzB,EAAYvoC,SACd6iC,GAAc,IAAM0F,EAAc,IAClChzB,GAAgB,IAAMgzB,EAAc,MAEtCH,EAAW,IAAI6I,EAAMx2C,KAAMooC,EAAYttB,EAAc4R,EAAe0pB,IAC3D5J,wBAA0BA,EACnCxsC,KAAKyxC,UAAUjlB,IAAIshB,EAAaH,GAChC3tC,KAAKuwC,QAAQ3O,gBAAgBpV,IAAI1R,EAAc6yB,GAE/C,IAAIqI,EAAoB,EACxB,GAAII,IACFJ,EAAeI,EAAUK,oBACrBL,EAAU/iB,SAAS,CAChBsa,EAASta,UAASsa,EAASta,QAAU,IAAImO,SAC9C,IAA4B,IAAAkV,EAAAtR,EAAAgR,EAAU/iB,QAAQY,UAAQ0iB,EAAAD,EAAApR,QAAAqR,EAAApR,KAAAoR,EAAAD,EAAApR,OAAE,CAAnD,IAAIsR,EAAeD,EAAAr1C,MACtBqsC,EAASta,QAAQ7G,IAAIoqB,EAAgBxO,WAAYwO,sGAMvD,GAAI52C,KAAK0pC,qBAAsB,CAC7B,IAAImN,EAAqB72C,KAAK0pC,qBAAqBoJ,eAAepmB,GAC9DmqB,IAAoBlJ,EAASmJ,oBAAsBD,EAAmBhQ,WAI5E,GAAI7mC,KAAKqpC,oBACP,IAAmB,IAAA0N,EAAA3R,EAAAplC,KAAKqpC,gBAAgBpV,UAAQ+iB,EAAAD,EAAAzR,QAAA0R,EAAAzR,KAAAyR,EAAAD,EAAAzR,OAAE,CAA7C,IAAIxI,EAAMka,EAAA11C,MACb,OAAQw7B,EAAOxR,MAGb,KAAK+V,EAAYyU,gBACVnI,EAASta,UAASsa,EAASta,QAAU,IAAImO,KAC9C,IAAIyV,EAAoCna,EAAQvM,YAChD,IAAK0mB,EAAiB5hC,KACpB,MAAM,IAAIgL,MAAM,iBAElB,IAAI62B,EAAYl3C,KAAKuwC,QAAQ5D,YAC3BsK,EAAiB5hC,KACjBs4B,EAASnB,yBAEX,IAAK0K,EAAW,MAChB,IAAIC,EAAgB,IAAIpB,EACNjZ,EAChBhiB,EAAekQ,EAAAtoB,mBAAsCo6B,EAAQsL,WAC7D8O,EACAD,EACAtJ,GAEF,OAAQuJ,EAAUE,UAChB,KAAK,EAAG,MACR,KAAK,EACgB,EAAfpB,KAAoBA,EACxB,MAEF,KAAK,EACgB,EAAfA,IAAkBA,EAAoC,GAAL,EAAfA,IACtC,MAEF,KAAK,EACgB,EAAfA,IAAkBA,EAAoC,GAAL,EAAfA,IACtC,MAEF,QAAStyC,QAAO,GAElByzC,EAAcnB,aAAeA,EAC7BA,GAAgBkB,EAAUE,SAC1BzJ,EAASta,QAAQ7G,IAAIsQ,EAAOsL,WAAY+O,GACxC,MAIF,KAAK9V,EAAY4F,mBACV0G,EAASta,UAASsa,EAASta,QAAU,IAAImO,KAC9C,IAAIwR,EAAuClW,EAAQgW,eAAepmB,GAC9DsmB,IACFA,EAAiBl4B,aAAeA,EAAekQ,EAAAtoB,mBAAqBswC,EAAiB5K,WACrFuF,EAASta,QAAQ7G,IAAIsQ,EAAOsL,WAAY4K,IAE1C,MAIF,KAAK3R,EAAYqJ,SACViD,EAASta,UAASsa,EAASta,QAAU,IAAImO,KAC9C,IAAImJ,EAAkBjnC,OAAkBo5B,EAAQ6N,iBAC5CC,EAA6B9N,EAAQ8N,gBACrCyM,EAAmB,IAAIxM,EACzB7qC,KAAKuwC,QACLzT,EAAOsL,WACPttB,EAAekQ,EAAAtoB,mBAAqBo6B,EAAOsL,WAC3CpoC,MAEEs3C,EAAyB3M,EAAgBmI,eAAepmB,GAC5D,IAAK4qB,EAAwB,OAAO,KAKpC,GAJAA,EAAuBx8B,aACrBA,EAAekQ,EAAAtoB,mBAAqB40C,EAAuBlP,WAE7DiP,EAAiB1M,gBAAkB2M,EAC/B1M,EAAiB,CACnB,IAAI2M,EAAyB3M,EAAgBkI,eAAepmB,GAC5D,IAAK6qB,EAAwB,OAAO,KACpCA,EAAuBz8B,aACrBA,EAAekQ,EAAAtoB,mBAAqB60C,EAAuBnP,WAE7DiP,EAAiBzM,gBAAkB2M,EAErC5J,EAASta,QAAQ7G,IAAIsQ,EAAOsL,WAAYiP,GACxC,MAEF,QAAS3zC,QAAO,0GAMtB,IAA8B,IAAA8zC,GAAApS,EAAAplC,KAAKiqC,oBAAkBwN,GAAAD,GAAAlS,QAAAmS,GAAAlS,KAAAkS,GAAAD,GAAAlS,OAAE,CAA9C,IAAAoS,GAAAjS,EAAAgS,GAAAn2C,MAAA,GAACgqB,GAAAosB,GAAA,GAAMz1C,GAAAy1C,GAAA,GACdh0C,OAAO4nB,IAAQsT,EAAawC,SAC5B,IAAIuW,QAAgB,EACpB,GAAI11C,GAAUoqB,GAAGrB,EAAA3oB,YAAYwvC,UAAW,CACtC,IAAI+F,GAAkB31C,GAAU6wC,eAAepmB,GAC/C,IAAKkrB,GAAiB,SACtBD,GAAmBC,GAAgB/Q,eAEnC8Q,GAAmB11C,GAAU4kC,UAE/B,GAAK8Q,GAAL,CACA,IAAI3N,GAAY2D,EAAS3D,UACpBA,KAAW2D,EAAS3D,UAAYA,GAAY,IAAIxI,KACrDwI,GAAUxd,IAAIlB,GAAMqsB,2GAItB,OADAhK,EAAS8I,oBAAsBT,EACxBrI,GAITtF,EAAApmC,UAAA2rC,0BAAA,SACEM,EACA1B,EACA2B,GAEA,IAAI+E,EAAuC,KAC3C,GAAIlzC,KAAKqsB,GAAGrB,EAAA3oB,YAAY8kC,UAQtB,GAPAzjC,OAA4B,MAArBwqC,GAAyD,GAA5BA,EAAkB3oC,UACtD2tC,EAAwBlzC,KAAKuwC,QAAQtC,qBACnCjuC,KAAKuwB,YAAY4C,eACjB+a,EACA1B,EACA2B,IAE0B,OAAO,UAEnCzqC,OAA4B,MAArBwqC,IAA8BA,EAAkB3oC,QAEzD,OAAOvF,KAAK6mC,QAAQqM,EAAuB1G,IAG7CnE,EAAApmC,UAAA6C,SAAA,WACE,OAAO9E,KAAKooC,YAEhBC,EA7PA,CAAoCiI,GAAvB5wC,EAAA2oC,iBAgQb,IAAAmO,EAAA,SAAApe,GAsBE,SAAAoe,EACEv0C,EACAmmC,EACAttB,EACA4R,EACAgjB,gBADA,IAAAhjB,MAAA,WACA,IAAAgjB,MAAA,MALF,IAAApX,EAOEF,EAAA53B,KAAAR,KAAMiC,EAAUsuC,QAASnI,EAAYttB,IAAa9a,KASlD,GApCFs4B,EAAAhN,KAAO+V,EAAYiO,MAWnBhX,EAAAkU,wBAAmD,KAEnDlU,EAAAme,oBAA2B,EAE3Bne,EAAAwe,oBAAuC,KAEvCxe,EAAA0R,UAA+C,KAW7C1R,EAAKr2B,UAAYA,EACjBq2B,EAAKnM,MAAQlqB,EAAUkqB,MACvBmM,EAAKkR,eAAiBvnC,EAAUunC,eAChClR,EAAK5L,cAAgBA,EACrB4L,EAAKjjB,KAAOpT,EAAUsuC,QAAQ1N,QAAQU,UAAUsU,QAAQvf,GACxDA,EAAKoX,KAAOA,EAGRA,EAAM,CACR,IAAIoC,EAAyBpC,EAAKlD,wBAClC,GAAIsF,EAAwB,CACrBxZ,EAAKkU,0BAAyBlU,EAAKkU,wBAA0B,IAAIhL,SACtE,IAAiC,IAAAsW,EAAA1S,EAAA0M,GAAsBiG,EAAAD,EAAAxS,QAAAyS,EAAAxS,KAAAwS,EAAAD,EAAAxS,OAAE,CAAhD,IAAA2M,EAAAxM,EAAAsS,EAAAz2C,MAAA,GAACwpC,EAAAmH,EAAA,GAAU+F,EAAA/F,EAAA,GAClB3Z,EAAKkU,wBAAwBhgB,IAAIse,EAAUkN,uGAMjD,IACI33C,EAAQ0c,EADRwT,EAAc+H,EAAKr2B,UAAUsuB,YAEjC,GAAIA,EAAa,CACf,IAAI4C,EAAiB5C,EAAY4C,eACjC,GAAIzG,EAAe,CACjB,IAAK3P,EAAI2P,EAAcnnB,SAAW4tB,EAAe5tB,OAC/C,MAAM,IAAI8a,MAAM,gCAElB,GAAItD,EAEF,IADKub,EAAKkU,0BAAyBlU,EAAKkU,wBAA0B,IAAIhL,KACjEnhC,EAAI,EAAGA,EAAI0c,IAAK1c,EACnBi4B,EAAKkU,wBAAwBhgB,IAAI2G,EAAe9yB,GAAGO,KAAKyE,KAAMqnB,EAAcrsB,SAG3E,GAAI8yB,EAAe5tB,OACxB,MAAM,IAAI8a,MAAM,yCA4CxB,OA5G2BgY,EAAAme,EAAApe,GAsEzBoe,EAAAv0C,UAAAg2C,eAAA,SAAe3+B,GACb,IAAI4+B,EAAwBl4C,KAC5B,GAAG,GAAIk4C,GAAW5+B,EAAQ,OAAO,QAC1B4+B,EAAUA,EAAQxI,MACzB,OAAO,GAIT8G,EAAAv0C,UAAAutC,eAAA,SAAelkB,EAAoB6sB,GACjC,QADiC,IAAAA,OAAA,GAC7BA,EACF,OAAQ7sB,GACN,KAAKsT,EAAaU,YAEhB,GADI8Y,EAAoBp4C,KAAKwvC,eAAe5Q,EAAaY,uBAClC,OAAO4Y,EAC9B,MAEF,KAAKxZ,EAAaW,YAChB,IAAI6Y,EACJ,GADIA,EAAoBp4C,KAAKwvC,eAAe5Q,EAAaa,uBAClC,OAAO2Y,EAC9B,MAEF,QAAS10C,QAAO,GAGpB,IAAIiqC,EAAyB3tC,KAC7B,EAAG,CACD,IAAIgqC,EAAY2D,EAAS3D,UACzB,GAAIA,EAAW,CACb,IAAIqO,EAAWrO,EAAU9oC,IAAIoqB,GAC7B,GAAI+sB,EAAU,OAAOA,SAEhB1K,EAAWA,EAAS+B,MAC7B,OAAO,MAGT8G,EAAAv0C,UAAA6C,SAAA,WACE,OAAO9E,KAAKooC,YAEhBoO,EA5GA,CAA2BlG,GAAd5wC,EAAA82C,QA+Gb,IAAAvK,EAAA,SAAA7T,GAQE,SAAA6T,EACEsE,EACAnI,EACAttB,EACAyV,EACAiZ,GALF,IAAAlR,EAOEF,EAAA53B,KAAAR,KAAMuwC,EAASnI,EAAYttB,EAAcyV,EAAaiZ,IAAexpC,YAbvEs4B,EAAAhN,KAAO+V,EAAYsF,sBAerB,OAjBwCtO,EAAA4T,EAAA7T,GAiBxC6T,EAjBA,CAAwC5D,GAA3B3oC,EAAAusC,qBAoBb,IAAAqM,EAAA,SAAAlgB,GAUE,SAAAkgB,EACEr2C,EACAmmC,EACAttB,EACA4R,EACAgjB,QADA,IAAAhjB,eACA,IAAAgjB,MAAA,MALF,IAAApX,EAOEF,EAAA53B,KAAAR,KAAMiC,EAAWmmC,EAAYttB,EAAc4R,EAAegjB,IAAK1vC,YAfjEs4B,EAAAhN,KAAO+V,EAAYkX,YAiBrB,OAnB+BlgB,EAAAigB,EAAAlgB,GAmB/BkgB,EAnBA,CAA+B9B,GAAlB92C,EAAA44C,YAsBb,SAAkBE,GAEhBA,IAAA,eAKAA,IAAA,qBAEAA,IAAA,qCAEAA,IAAA,mBAEAA,IAAA,mBAEAA,IAAA,0BAEAA,IAAA,0BAKAA,IAAA,kDAEAA,IAAA,iDAEAA,IAAA,iDAEAA,IAAA,uDAEAA,IAAA,wDAKAA,IAAA,sCAEAA,IAAA,4CAKAA,IAAA,sCAMAA,IAAA,sCAQAA,IAAA,wCAxDF,CAAkB94C,EAAA84C,YAAA94C,EAAA84C,eAgElB,IAAA7D,EAAA,WAyCE,SAAAA,IAtBA30C,KAAAy4C,aAAyC,KAof3C,OA7eS9D,EAAAhzC,OAAP,SAAc+2C,GACZ,IAAIC,EAAa,IAAIhE,EAWrB,OAVAgE,EAAWzsB,OAAS,KACpBysB,EAAWxsB,MAAK,EAChBwsB,EAAWD,gBAAkBA,EAC7BC,EAAWC,cAAgB,KAC3BD,EAAWE,WAAa,KACxBF,EAAWG,YAAc,KACzBH,EAAWp/B,WAAam/B,EAAgBtiB,UAAU7c,WAClDo/B,EAAWnM,wBAA0BkM,EAAgBlM,wBACrDmM,EAAWI,cAAgB9H,QAAQ,GACnC0H,EAAWK,iBAAmB,KACvBL,GAMThE,EAAA1yC,UAAAoqB,GAAA,SAAGC,GAAyB,OAAQtsB,KAAKmsB,MAAQG,IAASA,GAE1DqoB,EAAA1yC,UAAAsqB,MAAA,SAAMD,GAAyB,OAA8B,IAAtBtsB,KAAKmsB,MAAQG,IAEpDqoB,EAAA1yC,UAAAuqB,IAAA,SAAIF,GAAyBtsB,KAAKmsB,OAASG,GAE3CqoB,EAAA1yC,UAAAg3C,MAAA,SAAM3sB,GAAyBtsB,KAAKmsB,QAAUG,GAG9CqoB,EAAA1yC,UAAAi3C,KAAA,WACE,IAAIC,EAAS,IAAIxE,EAWjB,OAVAwE,EAAOjtB,OAASlsB,KAChBm5C,EAAOhtB,MAAQnsB,KAAKmsB,MACpBgtB,EAAOT,gBAAkB14C,KAAK04C,gBAC9BS,EAAOP,cAAgB54C,KAAK44C,cAC5BO,EAAON,WAAa74C,KAAK64C,WACzBM,EAAOL,YAAc94C,KAAK84C,YAC1BK,EAAO5/B,WAAavZ,KAAKuZ,WACzB4/B,EAAO3M,wBAA0BxsC,KAAKwsC,wBACtC2M,EAAOJ,cAAgB/4C,KAAK+4C,cAC5BI,EAAOH,iBAAmBh5C,KAAKg5C,iBAAmBh5C,KAAKg5C,iBAAiBI,QAAU,KAC3ED,GAITxE,EAAA1yC,UAAAo3C,KAAA,mBACMntB,EAASxoB,OAAO1D,KAAKksB,QACzB,GAAIlsB,KAAKy4C,aAAc,KACrB,IAAwB,IAAAxG,EAAA7M,EAAAplC,KAAKy4C,aAAaxkB,UAAQuR,EAAAyM,EAAA3M,QAAAE,EAAAD,KAAAC,EAAAyM,EAAA3M,OAAE,CAA/C,IAAIgU,EAAW9T,EAAAlkC,MACdg4C,EAAYjtB,GAAGrB,EAAA3oB,YAAYk3C,SAC7Bv5C,KAAK04C,gBAAgBvD,cAAcmE,qGAGvCt5C,KAAKy4C,aAAe,KAEtB,OAAOvsB,GAITyoB,EAAA1yC,UAAAu3C,eAAA,SAAenkC,EAAYzU,EAAck0C,EAAevkB,GACtD,IAAI+oB,EAAct5C,KAAK04C,gBAAgB7D,aAAax/B,GAAM,GAC1D,GAAKrV,KAAKy4C,aACL,CACH,IAAIgB,EAAgBz5C,KAAKy4C,aAAav3C,IAAIN,GAC1C,GAAI64C,EAOF,OANIlpB,EACFvwB,KAAK04C,gBAAgBnI,QAAQ/pC,MAC3Bq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,OAEdX,QAAO,GACP+1C,OAVaz5C,KAAKy4C,aAAe,IAAIjX,IAkBhD,OALA8X,EAAY9sB,IAAIxB,EAAA3oB,YAAYk3C,QAC5Bv5C,KAAKy4C,aAAajsB,IAAI5rB,EAAM04C,GACxBjkC,EAAKgX,GAAG,KACVrsB,KAAKk1C,gBAAgBoE,EAAYlkC,MAAO0/B,GAEnCwE,GAIT3E,EAAA1yC,UAAAy3C,oBAAA,SAAoBtkC,EAAYC,EAAYzU,GAC1C,GAAKZ,KAAKy4C,aACL,CACH,IAAIgB,EAAgBz5C,KAAKy4C,aAAav3C,IAAIN,GAC1C,GAAI64C,EAAe,CACjB,IAAIlpB,EAAckpB,EAAclpB,YAOhC,OANIA,EACFvwB,KAAK04C,gBAAgBnI,QAAQ/pC,MAC3Bq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,OAEdX,QAAO,GACP+1C,QAXaz5C,KAAKy4C,aAAe,IAAIjX,IAchD99B,OAAO0R,EAAQpV,KAAK04C,gBAAgBpF,cAAc/tC,QAClD,IAAIo0C,EAAc,IAAIpI,EACpBvxC,KAAK04C,gBAAgBnI,QACrB3vC,EACAwU,EACAC,EACA,MAGF,OADArV,KAAKy4C,aAAajsB,IAAI5rB,EAAM+4C,GACrBA,GAIThF,EAAA1yC,UAAA2sC,eAAA,SAAehuC,GACb,IAAI0zC,EACA4D,EAAuBl4C,KAC3B,GACE,GAAIk4C,EAAQO,eAAiBnE,EAAQ4D,EAAQO,aAAav3C,IAAIN,IAC5D,OAAO0zC,QAEF4D,EAAUA,EAAQhsB,QAC3B,OAAOlsB,KAAK04C,gBAAgBrF,aAAanyC,IAAIN,IAI/C+zC,EAAA1yC,UAAA23C,eAAA,SAAexkC,GACb,IAAIykC,EACAC,EACJ,GAAI1kC,EAAQ,GAAI,CACd,GAAIA,EAAQ,EAAG,OAAO,EACtBykC,EAAM75C,KAAK+4C,kBACN,MAAIe,EAAM95C,KAAKg5C,kBAMpB,OAAO,EALP,IAAI34C,GAAM+U,EAAQ,IAAM,GAAM,EAC9B,GAAI/U,GAAKy5C,EAAIv0C,OAAQ,OAAO,EAC5Bs0C,EAAMC,EAAIz5C,GACV+U,GAAmB,IAAT/U,EAAI,GAIhB,OAAO05C,OACLC,QACEH,EACAI,QACEC,QACAjJ,QAAQ77B,KAGZ+kC,WAKJxF,EAAA1yC,UAAAizC,gBAAA,SAAgB9/B,EAAY0/B,GAC1B,IAAI+E,EACAO,GAAY,EAChB,GAAIhlC,EAAQ,GAAI,CACd,GAAIA,EAAQ,EAAG,OACfykC,EAAM75C,KAAK+4C,kBACN,CACL,IAAIe,EAAM95C,KAAKg5C,iBAMf,IALAoB,GAAQhlC,EAAQ,IAAM,GAAM,EACvB0kC,IACH95C,KAAKg5C,iBAAmBc,EAAM,IAAI1zC,MAAMg0C,EAAM,GAC9CN,EAAIv0C,OAAS,GAERu0C,EAAIv0C,QAAU60C,GAAKN,EAAIh0C,KAAKmrC,QAAQ,IAC3C4I,EAAMC,EAAIM,GACVhlC,GAAqB,IAAXglC,EAAM,GAElBP,EAAM/E,EACFuF,OACER,EACAI,QACEC,QACAjJ,QAAQ77B,KAGZ4kC,QACEH,EACAS,QACEL,QACEC,QACAjJ,QAAQ77B,MAIdglC,GAAO,EAAWp6C,KAAKg5C,iBAAkBoB,GAAOP,EAC/C75C,KAAK+4C,cAAgBc,GAI5BlF,EAAA1yC,UAAAs4C,QAAA,SAAQC,GACNx6C,KAAKmsB,OAAuB,KAAdquB,EAAMruB,MACpBnsB,KAAK+4C,cAAgByB,EAAMzB,cAC3B/4C,KAAKg5C,iBAAmBwB,EAAMxB,kBAIhCrE,EAAA1yC,UAAAw4C,mBAAA,SAAmBD,GACbA,EAAMnuB,GAAE,IACVrsB,KAAKwsB,IAAG,IAENguB,EAAMnuB,GAAE,IACVrsB,KAAKwsB,IAAG,KAENguB,EAAMnuB,GAAE,IAAsBmuB,EAAM3B,YAAc74C,KAAK64C,YACzD74C,KAAKwsB,IAAG,KAENguB,EAAMnuB,GAAE,KAAyBmuB,EAAM5B,eAAiB54C,KAAK44C,eAC/D54C,KAAKwsB,IAAG,KAENguB,EAAMnuB,GAAE,KACVrsB,KAAKwsB,IAAG,OAKZmoB,EAAA1yC,UAAAy4C,cAAA,SAAc9lC,EAAYC,GAExB7U,KAAKmsB,OAASvX,EAAKuX,MAAQtX,EAAMsX,MAAK,GAGtCnsB,KAAKmsB,OAAmB,KAAVvX,EAAKuX,MACnBnsB,KAAKmsB,OAAoB,KAAXtX,EAAMsX,MAGpBnsB,KAAK+4C,cAAgBiB,QAAQplC,EAAKmkC,cAAelkC,EAAMkkC,eACvD,IAAI4B,EAAU/lC,EAAKokC,iBACf4B,EAAW/lC,EAAMmkC,iBACrB,GAAe,MAAX2B,GAA+B,MAAZC,EAAkB,CACvC,IAAIC,EAAU76C,KAAKg5C,iBACf8B,EAAYC,IAAIJ,EAAQp1C,OAAQq1C,EAASr1C,QAC7C,GAAIu1C,EAAW,CACb,GAAKD,EACA,KAAOA,EAAQt1C,OAASu1C,GAAWD,EAAQ/0C,KAAKmrC,QAAQ,SAD/C4J,EAAU,IAAIz0C,MAAM00C,GAElC,IAAK,IAAIz6C,EAAI,EAAGA,EAAIy6C,IAAaz6C,EAC/Bw6C,EAAQx6C,GAAK25C,QACXW,EAAQt6C,GACRu6C,EAASv6C,OAYnBs0C,EAAA1yC,UAAA+4C,YAAA,SAAYvmC,EAAqBY,GAM/B,GAHA3R,OAAO2R,GAAQypB,EAAAgE,KAAKa,OAGftuB,EAAKgX,GAAG,IAAsC,OAAO,EAE1D,IAAImG,EACJ,OAAQwM,EAAApb,gBAAgBnP,IAGtB,KAAKuqB,EAAAt4B,aAAaob,SAChB,IAAI42B,EAAkB14C,KAAK04C,gBACvBpE,EAAQoE,EAAgBpF,cAActU,EAAA7a,iBAAiB1P,IAC3D,OAAQikC,EAAgB/J,KAAKiL,eAAetF,EAAMl/B,QAC3C6lC,EAAsB3G,EAAMj/B,KAAMA,GAI3C,KAAK2pB,EAAAt4B,aAAaw0C,SAEhB,OADAx3C,OAAOs7B,EAAAxa,WAAW/P,IACXzU,KAAKg7C,YAAYhc,EAAA1a,iBAAiB7P,GAAOY,GAIlD,KAAK2pB,EAAAt4B,aAAasb,UAAW,OAAO,EAEpC,KAAKgd,EAAAt4B,aAAamc,OAChB,OAAQmc,EAAAta,YAAYjQ,IAGlB,KAAKuqB,EAAA5yB,SAAS+uC,MACd,KAAKnc,EAAA5yB,SAASgvC,MACd,KAAKpc,EAAA5yB,SAASivC,MACd,KAAKrc,EAAA5yB,SAASkvC,MACd,KAAKtc,EAAA5yB,SAASmvC,MACd,KAAKvc,EAAA5yB,SAASovC,MACd,KAAKxc,EAAA5yB,SAASqvC,MACd,KAAKzc,EAAA5yB,SAASsvC,MACd,KAAK1c,EAAA5yB,SAASuvC,MACd,KAAK3c,EAAA5yB,SAASwvC,MACd,KAAK5c,EAAA5yB,SAASyvC,MACd,KAAK7c,EAAA5yB,SAAS0vC,MACd,KAAK9c,EAAA5yB,SAAS2vC,MACd,KAAK/c,EAAA5yB,SAAS4vC,MACd,KAAKhd,EAAA5yB,SAAS6vC,MACd,KAAKjd,EAAA5yB,SAAS8vC,MACd,KAAKld,EAAA5yB,SAAS+vC,MACd,KAAKnd,EAAA5yB,SAASgwC,MACd,KAAKpd,EAAA5yB,SAASiwC,MACd,KAAKrd,EAAA5yB,SAASkwC,MACd,KAAKtd,EAAA5yB,SAASmwC,MACd,KAAKvd,EAAA5yB,SAASowC,MACd,KAAKxd,EAAA5yB,SAASqwC,MACd,KAAKzd,EAAA5yB,SAASswC,MACd,KAAK1d,EAAA5yB,SAASuwC,MACd,KAAK3d,EAAA5yB,SAASwwC,MACd,KAAK5d,EAAA5yB,SAASywC,MACd,KAAK7d,EAAA5yB,SAAS0wC,MACd,KAAK9d,EAAA5yB,SAAS2wC,MACd,KAAK/d,EAAA5yB,SAAS4wC,MACd,KAAKhe,EAAA5yB,SAAS6wC,MACd,KAAKje,EAAA5yB,SAAS8wC,MAAO,OAAO,EAG5B,KAAKle,EAAA5yB,SAAS+wC,OACZ,QAEIne,EAAApb,gBAAgB4O,EAAUwM,EAAAra,cAAclQ,KAAUuqB,EAAAt4B,aAAaya,QAEhC,GAA7B6d,EAAAlb,iBAAiB0O,IAEc,GAA7BwM,EAAAlb,iBAAiB0O,KAChBxyB,KAAKg7C,YAAYhc,EAAApa,eAAenQ,GAAOY,KAI5C2pB,EAAApb,gBAAgB4O,EAAUwM,EAAApa,eAAenQ,KAAUuqB,EAAAt4B,aAAaya,QAEjC,GAA7B6d,EAAAlb,iBAAiB0O,IAEc,GAA7BwM,EAAAlb,iBAAiB0O,KAChBxyB,KAAKg7C,YAAYhc,EAAAra,cAAclQ,GAAOY,KASjD,KAAK2pB,EAAA5yB,SAASgxC,OAGZ,QAGMpe,EAAApb,gBAAgB4O,EAAUwM,EAAAra,cAAclQ,KAAUuqB,EAAAt4B,aAAaya,OAC/D6d,EAAAlb,iBAAiB0O,IAAYnd,EAAKgoC,wBAAwBve,EAAAgE,KAAKhiB,OAC3D9gB,KAAKg7C,YAAYxoB,EAASnd,IAG9B2pB,EAAApb,gBAAgB4O,EAAUwM,EAAApa,eAAenQ,KAAUuqB,EAAAt4B,aAAaya,OAChE6d,EAAAlb,iBAAiB0O,IAAYnd,EAAKgoC,wBAAwBve,EAAAgE,KAAKhiB,OAC3D9gB,KAAKg7C,YAAYxoB,EAASnd,IAMtC,KAAK2pB,EAAA5yB,SAASkxC,OACZ,IAAIC,EAAQ,GAAKloC,EAAKmoC,KACtB,OAAOxe,EAAApb,gBAAgB4O,EAAUwM,EAAApa,eAAenQ,KAAUuqB,EAAAt4B,aAAaya,OAChE6d,EAAAlb,iBAAiB0O,GAAW+qB,EAIrC,KAAKve,EAAA5yB,SAASqxC,OACRF,EAAQ,GAAKloC,EAAKmoC,KACtB,OAAOx9C,KAAKg7C,YAAYhc,EAAAra,cAAclQ,GAAOY,KAC3C2pB,EAAApb,gBAAgB4O,EAAUwM,EAAApa,eAAenQ,KAAUuqB,EAAAt4B,aAAaya,OAChE6d,EAAAlb,iBAAiB0O,GAAW+qB,GAMhC,KAAKve,EAAA5yB,SAASsxC,OACRH,EAAQ,GAAKloC,EAAKmoC,KACtB,OAAOnoC,EAAKgX,GAAE,KAER2S,EAAApb,gBAAgB4O,EAAUwM,EAAApa,eAAenQ,KAAUuqB,EAAAt4B,aAAaya,OAChE6d,EAAAlb,iBAAiB0O,GAAW+qB,GAE9Bv9C,KAAKg7C,YAAYhc,EAAAra,cAAclQ,GAAOY,MACpC2pB,EAAApb,gBAAgB4O,EAAUwM,EAAApa,eAAenQ,KAAUuqB,EAAAt4B,aAAaya,OAChE6d,EAAAlb,iBAAiB0O,IAAY+qB,GAKrC,KAAKve,EAAA5yB,SAASuxC,OACd,KAAK3e,EAAA5yB,SAASwxC,OACd,KAAK5e,EAAA5yB,SAASyxC,OACZ,OAAO79C,KAAKg7C,YAAYhc,EAAAra,cAAclQ,GAAOY,IACtCrV,KAAKg7C,YAAYhc,EAAApa,eAAenQ,GAAOY,GAGlD,MAGF,KAAK2pB,EAAAt4B,aAAagc,MAChB,OAAQsc,EAAAna,WAAWpQ,IAGjB,KAAKuqB,EAAAj2B,QAAQ+0C,OACb,KAAK9e,EAAAj2B,QAAQg1C,OAAQ,OAAO,EAG5B,KAAK/e,EAAAj2B,QAAQi1C,OACb,KAAKhf,EAAAj2B,QAAQk1C,OACb,KAAKjf,EAAAj2B,QAAQm1C,UAAW,OAAO7oC,EAAKmoC,KAAO,EAE7C,MAIF,KAAKxe,EAAAt4B,aAAaya,MAChB,IAAI7f,EAAa,EACjB,OAAQ09B,EAAAnb,kBAAkBpP,IACxB,KAAKuqB,EAAAv4B,WAAW4a,IAAO/f,EAAQ09B,EAAAlb,iBAAiBrP,GAAO,MACvD,KAAKuqB,EAAAv4B,WAAW8a,IAAOjgB,EAAQ09B,EAAAjb,oBAAoBtP,GAAO,MAC1D,KAAKuqB,EAAAv4B,WAAWib,IAAOpgB,EAAQwf,IAAIke,EAAA/a,iBAAiBxP,IAAQ,MAC5D,KAAKuqB,EAAAv4B,WAAWmb,IAAOtgB,EAAQwf,IAAIke,EAAA9a,iBAAiBzP,IAAQ,MAC5D,QAAS/Q,QAAO,GAElB,OAAQ2R,EAAKiW,MACX,OAAkB,OAAOhqB,EAAQyhC,GAAGob,WAAa78C,EAAQyhC,GAAGhiB,UAC5D,OAAmB,OAAOzf,EAAQ0hC,IAAImb,WAAa78C,EAAQ0hC,IAAIjiB,UAC/D,OAAkB,OAAOzf,EAAQ,GAAKA,EAAQ6hC,GAAGpiB,UACjD,OAAmB,OAAOzf,EAAQ,GAAKA,EAAQ8hC,IAAIriB,UACnD,QAAoB,OAAuB,KAAP,EAARzf,GAE9B,MAIF,KAAK09B,EAAAt4B,aAAayb,KAChB,IAAIi8B,OAAQ,EACZ,OAAQpf,EAAAja,aAAatQ,IACnB,KAAK,EAAM2pC,EAAWpf,EAAA9Z,aAAazQ,GAAQqqB,EAAAgE,KAAKC,GAAKjE,EAAAgE,KAAKK,GAAI,MAC9D,KAAK,EAAMib,EAAWpf,EAAA9Z,aAAazQ,GAAQqqB,EAAAgE,KAAKE,IAAMlE,EAAAgE,KAAKM,IAAK,MAChE,QAAWgb,EAAWpf,EAAA9Z,aAAazQ,GAAQqqB,EAAAgE,KAAKhiB,IAAMge,EAAAgE,KAAKO,IAE7D,OAAO4X,EAAsBmD,EAAU/oC,GAMzC,KAAK2pB,EAAAt4B,aAAa23C,MAChB,IAAKrf,EAAArZ,aAAalR,GAAO,CACvB,IAAI+oC,EAAO95C,OAAOs7B,EAAAnZ,mBAAmBpR,IACjC6pC,EAAOtf,EAAAjZ,cAActR,EAAM+oC,EAAO,GACtC,OAAOx9C,KAAKg7C,YAAYsD,EAAMjpC,GAGhC,MAIF,KAAK2pB,EAAAt4B,aAAa63C,GAChB,OAAOv+C,KAAKg7C,YAAYhc,EAAA7Y,UAAU1R,GAAOY,IAClCrV,KAAKg7C,YAAYt3C,OAAOs7B,EAAA3Y,WAAW5R,IAAQY,GAIpD,KAAK2pB,EAAAt4B,aAAa83C,OAChB,OAAOx+C,KAAKg7C,YAAYhc,EAAAjY,cAActS,GAAOY,IACtCrV,KAAKg7C,YAAYhc,EAAA/X,cAAcxS,GAAOY,GAI/C,KAAK2pB,EAAAt4B,aAAa+3C,KAChB,IAAIlO,EAAUvwC,KAAK04C,gBAAgBnI,QAC/B5C,EAAWjqC,OAAO6sC,EAAQ3O,gBAAgB1gC,IAAIwC,OAAOs7B,EAAAvX,cAAchT,MACvE/Q,OAAOiqC,EAASriB,MAAQ+V,EAAY7G,UACpC,IAAIjhB,EAAwBo0B,EAAUvX,UAAU7c,WAChD,OAAmBo0B,EAAUgB,KAAKtiB,GAAE,IAC7B4uB,EAAsB1hC,EAAYlE,GAI3C,KAAK2pB,EAAAt4B,aAAag4C,YAAa,OAAO,EAExC,OAAO,GAIT/J,EAAA1yC,UAAAuzC,SAAA,WACE9xC,OAAsB,MAAf1D,KAAKksB,QACZlsB,KAAK44C,cAAgB,KACrB54C,KAAK64C,WAAa,KAClB74C,KAAK84C,YAAc,KACnB94C,KAAKwsC,wBAA0B,MAEnCmI,EAvgBA,GA0gBA,SAAAsG,EAA+BmD,EAAgBnvB,GAC7C,IAAI0vB,EAAWP,EAAShH,SACpBwH,EAAS3vB,EAAOmoB,SACpB,OAAQgH,EAAS/xB,GAAE,IACZsyB,EAAWC,GACXR,EAAS/xB,GAAE,IAAsB4C,EAAO5C,GAAE,GA/gBtC3sB,EAAAi1C,sBCxtHb,IAAAkK,EAGAA,EAAA,WACA,OAAA7+C,KADA,GAIA,IAEA6+C,KAAAhM,SAAA,cAAAA,KAAA,EAAAiM,MAAA,QACC,MAAAC,GAED,iBAAAC,SAAAH,EAAAG,QAOAr/C,EAAAD,QAAAm/C,iFCTA,IAAA7f,EAAA7+B,EAAA,IAOA,SAAkB8+C,GAKhBA,IAAA,WAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,iBAKAA,IAAA,WAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,iBAEAA,IAAA,gBAKAA,IAAA,cAEAA,IAAA,cAKAA,IAAA,gBAxCF,CAAkBv/C,EAAAu/C,WAAAv/C,EAAAu/C,cA4ClB,SAAkBC,GAChBA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,uBAEAA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,sBAEAA,IAAA,kBAEAA,IAAA,gBAEAA,IAAA,mBAEAA,IAAA,2BAEAA,IAAA,yBArBF,CAAkBx/C,EAAAw/C,YAAAx/C,EAAAw/C,eAyBlB,IAAApc,EAAA,WAoBE,SAAAA,EAAYxX,EAAgBa,EAAkBqxB,GAHtCx9C,KAAAm/C,mBAAkC,KAIxCn/C,KAAKsrB,KAAOA,EACZtrB,KAAKmsB,MAAQA,EACbnsB,KAAKw9C,KAAOA,EACZx9C,KAAKo3C,SAAgBgI,KAAe5B,EAAO,GAC3Cx9C,KAAKovC,eAAiB,KACtBpvC,KAAKiwC,mBAAqB,KAC1BjwC,KAAKq/C,gBAAkBr/C,KA0V3B,OAtVEe,OAAAC,eAAI8hC,EAAA7gC,UAAA,eAAJ,WACE,OAAQjC,KAAKsrB,MACX,OAAkB,OAAOwX,EAAKC,GAC9B,OAAmB,OAAOD,EAAKE,IAC/B,QACA,OAAmB,OAAOF,EAAKhiB,IAC/B,QACA,OAAmB,OAAOgiB,EAAKG,IAC/B,OAAqB,OAAoB,IAAbjjC,KAAKw9C,KAAa1a,EAAKwc,QAAUxc,EAAKyc,QAClE,OAAkB,OAAOzc,EAAKK,GAC9B,OAAmB,OAAOL,EAAKM,IAC/B,OAAmB,OAAON,EAAKO,IAC/B,OAAmB,OAAOP,EAAKQ,IAC/B,OAAqB,OAAoB,IAAbtjC,KAAKw9C,KAAa1a,EAAK0c,QAAU1c,EAAK2c,QAClE,QACA,QAAS,OAAO3c,EAAKhiB,sCAKzBgiB,EAAA7gC,UAAAy9C,yBAAA,SAAyBC,GACvB,OAAOA,EAAWnC,KAAOx9C,KAAKw9C,MAIhC1a,EAAA7gC,UAAAo7C,wBAAA,SAAwBsC,GACtB,IAAInC,EAAOx9C,KAAKqsB,GAAE,GAAuBrsB,KAAKw9C,KAAOx9C,KAAKw9C,KAAO,EACjE,OAAO,IAAQmC,EAAWnC,KAAOA,GAInC1a,EAAA7gC,UAAAoqB,GAAA,SAAGF,GAA0B,OAAQnsB,KAAKmsB,MAAQA,IAAUA,GAE5D2W,EAAA7gC,UAAAsqB,MAAA,SAAMJ,GAA0B,OAA+B,IAAvBnsB,KAAKmsB,MAAQA,IAGrD2W,EAAA7gC,UAAA41C,QAAA,SAAQhI,GACNnsC,OAAgB,GAAT1D,KAAKsrB,OAA2BtrB,KAAKovC,gBAC5C,IAAIxvB,EAAM,IAAIkjB,EAAK9iC,KAAKsrB,MAAmB,IAAbtrB,KAAKmsB,MAAwB,IAAwBnsB,KAAKw9C,MAExF,OADA59B,EAAIwvB,eAAiBS,EACdjwB,GAITkjB,EAAA7gC,UAAA4zC,WAAA,SAAWzf,GACT1yB,OAAgB,GAAT1D,KAAKsrB,OAAyBtrB,KAAKiwC,oBAC1C,IAAIrwB,EAAM,IAAIkjB,EAAK9iC,KAAKsrB,MAAmB,IAAbtrB,KAAKmsB,MAAwB,IAAwBnsB,KAAKw9C,MAExF,OADA59B,EAAIqwB,mBAAqB7Z,EAClBxW,GAITkjB,EAAA7gC,UAAAurC,WAAA,WASE,OARA9pC,OAAO1D,KAAKqsB,GAAE,MACTrsB,KAAKm/C,qBACRz7C,QAAQ1D,KAAKqsB,GAAE,MACfrsB,KAAKm/C,mBAAqB,IAAIrc,EAAK9iC,KAAKsrB,KAAgB,IAAVtrB,KAAKmsB,MAA4BnsB,KAAKw9C,MACpFx9C,KAAKm/C,mBAAmBE,gBAAkBr/C,KAC1CA,KAAKm/C,mBAAmB/P,eAAiBpvC,KAAKovC,eAC9CpvC,KAAKm/C,mBAAmBlP,mBAAqBjwC,KAAKiwC,oBAE7CjwC,KAAKm/C,oBAIdrc,EAAA7gC,UAAAg2C,eAAA,SAAe3+B,EAAcsmC,GAC3B,IAAIC,EACAC,EACApH,EACAqH,EACJ,QAL2B,IAAAH,OAAA,GAKvB5/C,KAAKqsB,GAAE,MACT,GAAI/S,EAAO+S,GAAE,QACNrsB,KAAKqsB,GAAE,MAAwB/S,EAAO+S,GAAE,MAC3C,GAAIwzB,EAAe7/C,KAAKovC,gBACtB,GAAI0Q,EAAcxmC,EAAO81B,eACvB,OAAOyQ,EAAa5H,eAAe6H,QAEhC,IAAIpH,EAAkB14C,KAAKiwC,sBAC5B8P,EAAiBzmC,EAAO22B,oBAC1B,OAAOyI,EAAgBT,eAAe8H,QAKzC,IAAKzmC,EAAO+S,GAAE,KACnB,GAAIrsB,KAAKqsB,GAAE,GACT,GAAI/S,EAAO+S,GAAE,IACX,IAAKuzB,GAAwB5/C,KAAKqsB,GAAE,IAAsB/S,EAAO+S,GAAE,GACjE,OAAOrsB,KAAKw9C,MAAQlkC,EAAOkkC,SAExB,IAAe,IAAXlkC,EAAOgS,KAChB,OAAOtrB,KAAKw9C,MAAQ,GACf,GAAe,IAAXlkC,EAAOgS,KAChB,OAAOtrB,KAAKw9C,MAAQ,QAEjB,GAAIx9C,KAAKqsB,GAAE,IACZ/S,EAAO+S,GAAE,GACX,OAAOrsB,KAAKw9C,MAAQlkC,EAAOkkC,KAIjC,OAAO,GAIF1a,EAAAkd,iBAAP,SAAwBprC,EAAYC,EAAaorC,GAC/C,OAAIprC,EAAMojC,eAAerjC,EAAMqrC,GAA+BrrC,EACrDA,EAAKqjC,eAAepjC,EAAOorC,GAA+BprC,EAC5D,MAITiuB,EAAA7gC,UAAA6C,SAAA,SAASo7C,GACP,QADO,IAAAA,OAAA,IACFA,GAAYlgD,KAAKqsB,GAAE,KAAuB,CAC7C,IAAI+iB,EAAiBpvC,KAAKovC,eAC1B,GAAIA,EACF,OAAOpvC,KAAKqsB,GAAE,KACV+iB,EAAetqC,WAAa,UAC5BsqC,EAAetqC,WAErB,IAAImrC,EAAqBjwC,KAAKiwC,mBAC9B,GAAIA,EACF,OAAOjwC,KAAKqsB,GAAE,KACV,IAAM4jB,EAAmBnrC,UAAS,GAAQ,WAC1CmrC,EAAmBnrC,UAAS,GAElCpB,QAAO,GAET,OAAQ1D,KAAKsrB,MACX,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,MAAO,QAC5B,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,MAAO,QAC5B,QAAoB,MAAO,OAC3B,QAAmB,MAAO,MAC1B,QAAmB,MAAO,MAC1B,QAAS5nB,QAAO,GAChB,QAAoB,MAAO,SAO/Bo/B,EAAA7gC,UAAA+yC,aAAA,WACE,OAAQh1C,KAAKsrB,MACX,QAAS,OAAO0T,EAAAv4B,WAAW4a,IAC3B,OACA,OAAmB,OAAO2d,EAAAv4B,WAAW8a,IACrC,OACA,OAAqB,OAAoB,IAAbvhB,KAAKw9C,KAAaxe,EAAAv4B,WAAW8a,IAAMyd,EAAAv4B,WAAW4a,IAC1E,QAAmB,OAAO2d,EAAAv4B,WAAWib,IACrC,QAAmB,OAAOsd,EAAAv4B,WAAWmb,IACrC,QAAqB,OAAOod,EAAAv4B,WAAWiR,OAK3CorB,EAAA7gC,UAAAk+C,aAAA,SAAaxgD,GACX,OAAQK,KAAKsrB,MACX,QAAoB5nB,QAAO,GAC3B,QAAS,OAAO/D,EAAOgU,UAAU,GACjC,OACA,OAAqB,GAAiB,IAAb3T,KAAKw9C,KAAY,OAAO79C,EAAOgU,UAAU,GAClE,OACA,OAAmB,OAAOhU,EAAOoU,UAAU,GAC3C,QAAmB,OAAOpU,EAAOwU,UAAU,GAC3C,QAAmB,OAAOxU,EAAO0U,UAAU,KAK/CyuB,EAAA7gC,UAAAm+C,YAAA,SAAYzgD,GACV,OAAQK,KAAKsrB,MACX,QAAoB5nB,QAAO,GAC3B,QAAS,OAAO/D,EAAOgU,UAAU,GACjC,OACA,OAAqB,GAAiB,IAAb3T,KAAKw9C,KAAY,OAAO79C,EAAOgU,UAAU,GAClE,OACA,OAAmB,OAAOhU,EAAOoU,UAAU,GAC3C,QAAmB,OAAOpU,EAAOwU,UAAU,GAC3C,QAAmB,OAAOxU,EAAO0U,UAAU,KAK/CyuB,EAAA7gC,UAAAo+C,eAAA,SAAe1gD,GACb,OAAQK,KAAKsrB,MACX,QAAoB5nB,QAAO,GAC3B,QAAS,OAAO/D,EAAOgU,WAAW,GAClC,OACA,OAAqB,GAAiB,IAAb3T,KAAKw9C,KAAY,OAAO79C,EAAOgU,WAAW,GACnE,OACA,OAAmB,OAAOhU,EAAOoU,WAAW,GAAI,GAChD,QAAmB,OAAOpU,EAAOwU,WAAW,GAC5C,QAAmB,OAAOxU,EAAO0U,WAAW,KAKhDyuB,EAAA7gC,UAAA2zC,kBAAA,WACE,OAAQ51C,KAAKsrB,MACX,QAAS,MAAO,IAChB,OACA,OAAmB,MAAO,IAC1B,OACA,OAAqB,OAAoB,IAAbtrB,KAAKw9C,KAAa,IAAM,IACpD,QAAmB,MAAO,IAC1B,QAAmB,MAAO,IAC1B,QAAoB,MAAO,MAOf1a,EAAAC,GAAY,IAAID,EAAI,EAClC,IAGmB,GAILA,EAAAE,IAAY,IAAIF,EAAI,EAClC,IAGkB,IAIJA,EAAAhiB,IAAY,IAAIgiB,EAAI,EAClC,IAEkB,IAIJA,EAAAG,IAAY,IAAIH,EAAI,EAClC,IAGkB,IAIJA,EAAAyc,QAAgB,IAAIzc,EAAI,EACtC,IAGkB,IAIJA,EAAAwc,QAAgB,IAAIxc,EAAI,EACtC,IAIkB,IAIJA,EAAAK,GAAW,IAAIL,EAAI,EACjC,IAGmB,GAILA,EAAAM,IAAY,IAAIN,EAAI,EAClC,IAGkB,IAIJA,EAAAO,IAAY,IAAIP,EAAI,EAClC,IAEkB,IAIJA,EAAAQ,IAAY,IAAIR,EAAI,EAClC,IAGkB,IAIJA,EAAA2c,QAAgB,IAAI3c,EAAI,EACtC,IAGkB,IAIJA,EAAA0c,QAAgB,IAAI1c,EAAI,EACtC,IAIkB,IAIJA,EAAAU,KAAa,IAAIV,EAAI,GACnC,IAGmB,GAILA,EAAAW,IAAY,IAAIX,EAAI,GAClC,IAEkB,IAIJA,EAAAY,IAAY,IAAIZ,EAAI,GAClC,IAGkB,IAIJA,EAAAa,KAAa,IAAIb,EAAI,KAAgC,GACvEA,EArXA,GAAapjC,EAAAojC,OAwXbpjC,EAAA4gD,mBAAA,SAAmCC,GAGjC,IAFA,IAAIC,EAAWD,EAAMh7C,OACjBqa,EAAM,IAAIxZ,MAAkBo6C,GACvBngD,EAAI,EAAGA,EAAImgD,IAAYngD,EAAGuf,EAAIvf,GAAKkgD,EAAMlgD,GAAG20C,eACrD,OAAOp1B,GAITlgB,EAAAquC,cAAA,SAA8BwS,GAC5B,IAAIC,EAAWD,EAAMh7C,OACrB,IAAKi7C,EAAU,MAAO,GAEtB,IADA,IAAI56C,EAAK,IAAIQ,MAAco6C,GAClBngD,EAAI,EAAGA,EAAImgD,IAAYngD,EAAGuF,EAAGvF,GAAKkgD,EAAMlgD,GAAGyE,WACpD,OAAOc,EAAGG,KAAK,MAIjB,IAAAwnC,EAAA,WAoBE,SAAAA,EACET,EACAvzB,EACAmzB,QAFA,IAAAI,MAAA,WACA,IAAAvzB,MAAA,WACA,IAAAmzB,MAAA,MARF1sC,KAAAmwC,qBAA8C,KAU5CnwC,KAAK8sC,eAAiBA,MACtB9sC,KAAK+sC,eAAiB,KACtB/sC,KAAKgtC,mBAAqB,EAC1BhtC,KAAKuZ,WAAaA,GAA0BupB,EAAKa,KACjD3jC,KAAK0sC,SAAWA,EAChB1sC,KAAKitC,SAAU,EACfjtC,KAAKqV,KAAOytB,EAAKO,IAAIwS,WAAW71C,MA8FpC,OA1FEutC,EAAAtrC,UAAAyyC,iBAAA,SAAiBt/B,GACf,IAAI23B,EAAiB/sC,KAAK+sC,eAC1B,OAAOA,GAAkBA,EAAexnC,OAAS6P,EAC7C23B,EAAe33B,GACfqrC,EAAwBrrC,IAI9Bm4B,EAAAtrC,UAAAg2C,eAAA,SAAe3+B,GAIb,IAAIonC,EAAe1gD,KAAK0sC,SACpBiU,EAAiBrnC,EAAOozB,SAC5B,GAAIgU,GACF,IAAMC,IAAkBD,EAAazI,eAAe0I,GAAkB,OAAO,OACxE,GAAIA,EACT,OAAO,EAIT,GAAI3gD,KAAKitC,SAAW3zB,EAAO2zB,QAAS,OAAO,EAG3C,IAAI2T,EAAqB5gD,KAAK8sC,eAC1B+T,EAAuBvnC,EAAOwzB,eAC9BD,EAAgB+T,EAAmBr7C,OACvC,GAAIsnC,GAAiBgU,EAAqBt7C,OAAQ,OAAO,EACzD,IAAK,IAAIlF,EAAI,EAAGA,EAAIwsC,IAAiBxsC,EAAG,CACtC,IAAIygD,EAAoBF,EAAmBvgD,GACvC0gD,EAAsBF,EAAqBxgD,GAC/C,IAAKygD,EAAkB7I,eAAe8I,GAAsB,OAAO,EAIrE,IAAIC,EAAiBhhD,KAAKuZ,WACtB0nC,EAAmB3nC,EAAOC,WAC9B,OAAOynC,GAAkBC,GAAoBD,EAAe/I,eAAegJ,IAItE1T,EAAA2T,oBAAP,SAA2BpU,EAA+BvzB,EAAkBmzB,QAAA,IAAAA,MAAA,MAC1E,IAAI9mC,KAEJ,GADI8mC,GAAU9mC,EAAGE,KAAK4mC,EAASkJ,qBAC3B9I,EACF,IAAK,IAAIzsC,EAAI,EAAG0c,EAAI+vB,EAAevnC,OAAQlF,EAAI0c,IAAK1c,EAAGuF,EAAGE,KAAKgnC,EAAezsC,GAAGu1C,qBAGnF,OADAhwC,EAAGE,KAAKyT,EAAWq8B,qBACZhwC,EAAGG,KAAK,KAIjBwnC,EAAAtrC,UAAA2zC,kBAAA,WACE,OAAOrI,EAAU2T,oBAAoBlhD,KAAK8sC,eAAgB9sC,KAAKuZ,WAAYvZ,KAAK0sC,WAIlFa,EAAAtrC,UAAA6C,SAAA,SAASq8C,QAAA,IAAAA,OAAA,GACP,IAAIv7C,EAAK,IAAIQ,MACbR,EAAGE,KAAK,KACR,IAAIsP,EAAQ,EACRs3B,EAAW1sC,KAAK0sC,SAChBA,GACEyU,IACFv7C,EAAGE,KAAK,UACRF,EAAGE,KAAK4mC,EAAS5nC,YACjBsQ,EAAQ,GAGZ,IAAIoY,EAAaxtB,KAAK8sC,eAClBD,EAAgBrf,EAAWjoB,OAC/B,GAAIsnC,EAKF,IAJA,IAAI7zB,EAAQhZ,KAAK+sC,eACb7zB,EAAWF,EAAQA,EAAMzT,OAAS,EAClC67C,EAAgBphD,KAAKgtC,mBACrBqU,EAAYrhD,KAAKitC,QAAUJ,EAAgB,GAAK,EAC3CxsC,EAAI,EAAGA,EAAIwsC,IAAiBxsC,IAAK+U,EACpCA,GAAOxP,EAAGE,KAAK,MACfzF,GAAKghD,GAAWz7C,EAAGE,KAAK,OACxBzF,EAAI6Y,EAAUtT,EAAGE,KAAgBkT,EAAO3Y,IACvCuF,EAAGE,KAAK26C,EAAwBpgD,IACjCA,GAAK+gD,GAAiB/gD,GAAKghD,EAAWz7C,EAAGE,KAAK,OAC7CF,EAAGE,KAAK,MACbF,EAAGE,KAAK0nB,EAAWntB,GAAGyE,YAK1B,OAFAc,EAAGE,KAAK,SACRF,EAAGE,KAAK9F,KAAKuZ,WAAWzU,YACjBc,EAAGG,KAAK,KAEnBwnC,EA7HA,GAAa7tC,EAAA6tC,YAkIb,IAAI+T,EAA+C,KAGnD,SAAAb,EAAwCrrC,GACjCksC,IAA6BA,MAClC,IAAK,IAAIjhD,EAAIihD,EAA4B/7C,OAAQlF,GAAK+U,IAAS/U,EAC7DihD,EAA4Bx7C,KAAK,OAASzF,EAAEyE,SAAS,KAEvD,OAAOw8C,EAA4BlsC,EAAQ,GAL7C1V,EAAA+gD,2ZC3lBA,IAuBYv1B,EAwIAq2B,EA/JZ1iB,EAAA1+B,EAAA,GAMA4+B,EAAA5+B,EAAA,GAKAgD,EAAAhD,EAAA,GA0JA,SAAAqhD,EAAiCn8C,GAE/B,OADA3B,OAAO2B,EAAKE,QACJF,EAAKM,WAAW,IACtB,QACE,OAAQN,GACN,IAAK,WAAY,OAAO6lB,EAAMu2B,SAC9B,IAAK,KAAM,OAAOv2B,EAAMw2B,GACxB,IAAK,QAAS,OAAOx2B,EAAMy2B,MAC3B,IAAK,QAAS,OAAOz2B,EAAM02B,MAE7B,MAEF,QACE,OAAQv8C,GACN,IAAK,QAAS,OAAO6lB,EAAM8R,MAE7B,MAEF,QACE,OAAQ33B,GACN,IAAK,OAAQ,OAAO6lB,EAAM22B,KAC1B,IAAK,QAAS,OAAO32B,EAAM42B,MAC3B,IAAK,QAAS,OAAO52B,EAAMokB,MAC3B,IAAK,WAAY,OAAOpkB,EAAM+R,SAC9B,IAAK,QAAS,OAAO/R,EAAMgmB,MAC3B,IAAK,cAAe,OAAOhmB,EAAMoP,YAEnC,MAEF,SACE,OAAQj1B,GACN,IAAK,WAAY,OAAO6lB,EAAM62B,SAC9B,IAAK,UAAW,OAAO72B,EAAMkpB,QAC7B,IAAK,UAAW,OAAOlpB,EAAMiiB,QAC7B,IAAK,SAAU,OAAOjiB,EAAM82B,OAC5B,IAAK,KAAM,OAAO92B,EAAMgS,GAE1B,MAEF,SACE,OAAQ73B,GACN,IAAK,OAAQ,OAAO6lB,EAAM+2B,KAC1B,IAAK,OAAQ,OAAO/2B,EAAMwiB,KAC1B,IAAK,SAAU,OAAOxiB,EAAMuR,OAC5B,IAAK,UAAW,OAAOvR,EAAMg3B,QAE/B,MAEF,SACE,OAAQ78C,GACN,IAAK,QAAS,OAAO6lB,EAAMQ,MAC3B,IAAK,UAAW,OAAOR,EAAMi3B,QAC7B,IAAK,MAAO,OAAOj3B,EAAMyS,IACzB,IAAK,OAAQ,OAAOzS,EAAMk3B,KAC1B,IAAK,WAAY,OAAOl3B,EAAMsP,SAEhC,MAEF,SACE,OAAQn1B,GACN,IAAK,MAAO,OAAO6lB,EAAM4d,IAE3B,MAEF,SACE,OAAQzjC,GACN,IAAK,KAAM,OAAO6lB,EAAM0S,GACxB,IAAK,aAAc,OAAO1S,EAAMm3B,WAChC,IAAK,SAAU,OAAOn3B,EAAM4S,OAC5B,IAAK,KAAM,OAAO5S,EAAMo3B,GACxB,IAAK,aAAc,OAAOp3B,EAAMuP,WAChC,IAAK,YAAa,OAAOvP,EAAMqtB,UAC/B,IAAK,KAAM,OAAOrtB,EAAMq3B,GAE1B,MAEF,SACE,OAAQl9C,GACN,IAAK,QAAS,OAAO6lB,EAAMs3B,MAE7B,MAEF,SACE,OAAQn9C,GACN,IAAK,MAAO,OAAO6lB,EAAMu3B,IAE3B,MAEF,SACE,OAAQp9C,GACN,IAAK,SAAU,OAAO6lB,EAAMw3B,OAE9B,MAEF,SACE,OAAQr9C,GACN,IAAK,YAAa,OAAO6lB,EAAMslB,UAC/B,IAAK,MAAO,OAAOtlB,EAAMyP,IACzB,IAAK,OAAQ,OAAOzP,EAAMM,KAE5B,MAEF,SACE,OAAQnmB,GACN,IAAK,KAAM,OAAO6lB,EAAMy3B,GAE1B,MAEF,SACE,OAAQt9C,GACN,IAAK,UAAW,OAAO6lB,EAAM03B,QAC7B,IAAK,UAAW,OAAO13B,EAAM23B,QAC7B,IAAK,YAAa,OAAO33B,EAAM43B,UAC/B,IAAK,SAAU,OAAO53B,EAAM63B,OAE9B,MAEF,SACE,OAAQ19C,GACN,IAAK,WAAY,OAAO6lB,EAAM83B,SAC9B,IAAK,SAAU,OAAO93B,EAAM8S,OAE9B,MAEF,SACE,OAAQ34B,GACN,IAAK,MAAO,OAAO6lB,EAAM6d,IACzB,IAAK,SAAU,OAAO7d,EAAM0R,OAC5B,IAAK,QAAS,OAAO1R,EAAM8P,MAC3B,IAAK,SAAU,OAAO9P,EAAMgT,OAE9B,MAEF,SACE,OAAQ74B,GACN,IAAK,OAAQ,OAAO6lB,EAAM+P,KAC1B,IAAK,QAAS,OAAO/P,EAAMiT,MAC3B,IAAK,OAAQ,OAAOjT,EAAMO,KAC1B,IAAK,MAAO,OAAOP,EAAMkT,IACzB,IAAK,OAAQ,OAAOlT,EAAMsN,KAC1B,IAAK,SAAU,OAAOtN,EAAM+3B,OAE9B,MAEF,SACE,OAAQ59C,GACN,IAAK,MAAO,OAAO6lB,EAAMg4B,IACzB,IAAK,OAAQ,OAAOh4B,EAAMqT,KAE5B,MAEF,SACE,OAAQl5B,GACN,IAAK,QAAS,OAAO6lB,EAAMsT,MAC3B,IAAK,OAAQ,OAAOtT,EAAMi4B,KAE5B,MAEF,SACE,OAAQ99C,GACN,IAAK,QAAS,OAAO6lB,EAAMk4B,OAKjC,OAAOl4B,EAAMkW,QAGf,SAAAiiB,EAAsCC,GACpC,OAAQA,GACN,KAAKp4B,EAAMu2B,SACX,KAAKv2B,EAAMw2B,GACX,KAAKx2B,EAAMoP,YACX,KAAKpP,EAAMkpB,QACX,KAAKlpB,EAAM82B,OACX,KAAK92B,EAAMk3B,KACX,KAAKl3B,EAAMyS,IACX,KAAKzS,EAAM4d,IACX,KAAK5d,EAAMq3B,GACX,KAAKr3B,EAAMs3B,MACX,KAAKt3B,EAAMw3B,OACX,KAAKx3B,EAAMslB,UACX,KAAKtlB,EAAM83B,SACX,KAAK93B,EAAM6d,IACX,KAAK7d,EAAMsN,KAAM,OAAO,EACxB,QAAS,OAAO,IAvUpB,SAAYtN,GAKVA,IAAA,uBACAA,IAAA,WACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,eACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,uBACAA,IAAA,8BACAA,IAAA,wBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,oBACAA,IAAA,YACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,oBACAA,IAAA,sBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,cACAA,IAAA,YACAA,IAAA,4BACAA,IAAA,oBACAA,IAAA,YACAA,IAAA,4BACAA,IAAA,0BACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,oBACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,YACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,oBACAA,IAAA,wBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,kBAIAA,IAAA,0BACAA,IAAA,4BACAA,IAAA,0BACAA,IAAA,4BACAA,IAAA,8BACAA,IAAA,gCACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,0BACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,8BACAA,IAAA,sCACAA,IAAA,4CACAA,IAAA,kCACAA,IAAA,4CACAA,IAAA,gDACAA,IAAA,0DACAA,IAAA,4CACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,0CACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,8BACAA,IAAA,0CACAA,IAAA,sDACAA,IAAA,8EACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,kBACAA,IAAA,8BACAA,IAAA,kBACAA,IAAA,8CACAA,IAAA,sBACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,qBACAA,IAAA,+BACAA,IAAA,iCACAA,IAAA,uCACAA,IAAA,yDACAA,IAAA,iCACAA,IAAA,qCACAA,IAAA,yDACAA,IAAA,qEACAA,IAAA,6FACAA,IAAA,yCACAA,IAAA,6BACAA,IAAA,iCACAA,IAAA,aAIAA,IAAA,6BACAA,IAAA,mCACAA,IAAA,qCACAA,IAAA,iCAIAA,IAAA,uBACAA,IAAA,2BArIF,CAAYA,EAAAxrB,EAAAwrB,QAAAxrB,EAAAwrB,WAwIZ,SAAYq2B,GACVA,IAAA,qBACAA,IAAA,mBACAA,IAAA,mBAHF,CAAYA,EAAA7hD,EAAA6hD,qBAAA7hD,EAAA6hD,wBAMZ7hD,EAAA8hD,mBAwKA9hD,EAAA2jD,wBAqBA3jD,EAAA6jD,sBAAA,SAAsCD,GACpC,OAAQA,GACN,KAAKp4B,EAAM82B,OAAQ,MAAO,SAC1B,KAAK92B,EAAMo3B,GAAI,MAAO,KACtB,KAAKp3B,EAAMuP,WAAY,MAAO,aAC9B,KAAKvP,EAAMyP,IAAK,MAAO,MACvB,KAAKzP,EAAM+3B,OAAQ,MAAO,SAC1B,KAAK/3B,EAAMqT,KAAM,MAAO,OACxB,KAAKrT,EAAMk4B,MAAO,MAAO,QACzB,KAAKl4B,EAAMs4B,YAAa,MAAO,MAC/B,KAAKt4B,EAAMmP,MAAO,MAAO,IACzB,KAAKnP,EAAMu4B,SAAU,MAAO,IAC5B,KAAKv4B,EAAMw4B,YAAa,MAAO,IAC/B,KAAKx4B,EAAMy4B,gBAAiB,MAAO,KACnC,KAAKz4B,EAAM04B,mBAAoB,MAAO,KACtC,KAAK14B,EAAM24B,cAAe,MAAO,KACjC,KAAK34B,EAAM44B,mBAAoB,MAAO,KACtC,KAAK54B,EAAM64B,qBAAsB,MAAO,MACxC,KAAK74B,EAAM84B,0BAA2B,MAAO,MAC7C,KAAK94B,EAAM0V,KAAM,MAAO,IACxB,KAAK1V,EAAM4V,MAAO,MAAO,IACzB,KAAK5V,EAAM+4B,kBAAmB,MAAO,KACrC,KAAK/4B,EAAMg5B,SAAU,MAAO,IAC5B,KAAKh5B,EAAMi5B,MAAO,MAAO,IACzB,KAAKj5B,EAAMk5B,QAAS,MAAO,IAC3B,KAAKl5B,EAAMm5B,UAAW,MAAO,KAC7B,KAAKn5B,EAAMo5B,YAAa,MAAO,KAC/B,KAAKp5B,EAAMq5B,kBAAmB,MAAO,KACrC,KAAKr5B,EAAMs5B,wBAAyB,MAAO,KAC3C,KAAKt5B,EAAMu5B,oCAAqC,MAAO,MACvD,KAAKv5B,EAAMw5B,UAAW,MAAO,IAC7B,KAAKx5B,EAAMy5B,IAAK,MAAO,IACvB,KAAKz5B,EAAM05B,MAAO,MAAO,IACzB,KAAK15B,EAAM25B,YAAa,MAAO,IAC/B,KAAK35B,EAAM45B,MAAO,MAAO,IACzB,KAAK55B,EAAM65B,oBAAqB,MAAO,KACvC,KAAK75B,EAAM85B,QAAS,MAAO,KAC3B,KAAK95B,EAAM+5B,OAAQ,MAAO,IAC1B,KAAK/5B,EAAMg6B,YAAa,MAAO,KAC/B,KAAKh6B,EAAMi6B,aAAc,MAAO,KAChC,KAAKj6B,EAAMk6B,gBAAiB,MAAO,KACnC,KAAKl6B,EAAMm6B,yBAA0B,MAAO,MAC5C,KAAKn6B,EAAMo6B,aAAc,MAAO,KAChC,KAAKp6B,EAAMq6B,eAAgB,MAAO,KAClC,KAAKr6B,EAAMs6B,yBAA0B,MAAO,MAC5C,KAAKt6B,EAAMu6B,+BAAgC,MAAO,MAClD,KAAKv6B,EAAMw6B,2CAA4C,MAAO,OAC9D,KAAKx6B,EAAMy6B,iBAAkB,MAAO,KACpC,KAAKz6B,EAAM06B,WAAY,MAAO,KAC9B,KAAK16B,EAAM26B,aAAc,MAAO,KAChC,QAEE,OADAniD,QAAO,GACA,KAKb,IAAAynB,EAAA,WAUE,SAAAA,EAAYpmB,EAAgBS,EAAYC,GA4CxCzF,KAAA01C,aAAsB,EA3CpB11C,KAAK+E,OAASA,EACd/E,KAAKwF,MAAQA,EACbxF,KAAKyF,IAAMA,EA0Cf,OAvCS0lB,EAAAplB,KAAP,SAAY+/C,EAAUC,GACpB,GAAID,EAAE/gD,QAAUghD,EAAEhhD,OAAQ,MAAM,IAAIsb,MAAM,mBAC1C,OAAO,IAAI8K,EAAM26B,EAAE/gD,OACjB+gD,EAAEtgD,MAAQugD,EAAEvgD,MAAQsgD,EAAEtgD,MAAQugD,EAAEvgD,MAChCsgD,EAAErgD,IAAMsgD,EAAEtgD,IAAMqgD,EAAErgD,IAAMsgD,EAAEtgD,MAI9B1E,OAAAC,eAAImqB,EAAAlpB,UAAA,eAAJ,WACE,OAAO,IAAIkpB,EAAMnrB,KAAK+E,OAAQ/E,KAAKwF,MAAOxF,KAAKwF,wCAEjDzE,OAAAC,eAAImqB,EAAAlpB,UAAA,aAAJ,WACE,OAAO,IAAIkpB,EAAMnrB,KAAK+E,OAAQ/E,KAAKyF,IAAKzF,KAAKyF,sCAG/C1E,OAAAC,eAAImqB,EAAAlpB,UAAA,YAAJ,WAGE,IAFA,IAAIoD,EAAOrF,KAAK+E,OAAOM,KACnBJ,EAAO,EACF+gD,EAAMhmD,KAAKwF,MAAOwgD,GAAO,IAAKA,EACb,IAApB3gD,EAAKM,WAAWqgD,IAA2B/gD,IAEjD,OAAOA,mCAGTlE,OAAAC,eAAImqB,EAAAlpB,UAAA,cAAJ,WAGE,IAFA,IAAIoD,EAAOrF,KAAK+E,OAAOM,KACnBH,EAAS,EACJ8gD,EAAMhmD,KAAKwF,MAAQ,EAAGwgD,GAAO,GACZ,IAApB3gD,EAAKM,WAAWqgD,KADqBA,IAEvC9gD,EAEJ,OAAOA,mCAGTimB,EAAAlpB,UAAA6C,SAAA,WACE,OAAO9E,KAAK+E,OAAOM,KAAKQ,UAAU7F,KAAKwF,MAAOxF,KAAKyF,MAIvD0lB,EAvDA,GAAazrB,EAAAyrB,QA+Db,IAAA86B,EAAA,SAAA7tB,GAgBE,SAAA6tB,EAAYlhD,EAAgBoB,QAAA,IAAAA,MAAA,MAA5B,IAAAmyB,EACEF,EAAA53B,KAAAR,KAAMmG,IAAYnG,KAdpBs4B,EAAA7yB,IAAW,EAEX6yB,EAAA0tB,IAAW,EACX1tB,EAAAgrB,OAAgB,EAChBhrB,EAAA4tB,SAAgB,EAEhB5tB,EAAA6tB,WAAoB,EACpB7tB,EAAA8tB,aAAoB,EACpB9tB,EAAA+tB,oBAA2B,EAE3B/tB,EAAAguB,UAAmC,KAKjChuB,EAAKvzB,OAASA,EACduzB,EAAK0tB,IAAM,EACX1tB,EAAK7yB,IAAMV,EAAOM,KAAKE,OACvB+yB,EAAKnyB,YAAcA,GAA4B,IAAIC,MAEnD,IAAIf,EAAON,EAAOM,KAWlB,GAPEizB,EAAK0tB,IAAM1tB,EAAK7yB,KACS,OAAzBJ,EAAKM,WAAW2yB,EAAK0tB,QAEnB1tB,EAAK0tB,IAKP1tB,EAAK0tB,IAAM,EAAI1tB,EAAK7yB,KACK,IAAzBJ,EAAKM,WAAW2yB,EAAK0tB,MACQ,IAA7B3gD,EAAKM,WAAW2yB,EAAK0tB,IAAM,GAG3B,IADA1tB,EAAK0tB,KAAO,EAEV1tB,EAAK0tB,IAAM1tB,EAAK7yB,KACS,IAAzBJ,EAAKM,WAAW2yB,EAAK0tB,QAEnB1tB,EAAK0tB,aAmiCf,OA/kC+B3tB,EAAA4tB,EAAA7tB,GAkD7B6tB,EAAAhkD,UAAAqjC,KAAA,SAAKihB,GAEH,YAFG,IAAAA,MAAyChF,EAAmBpU,SAC/DntC,KAAKmmD,WAAa,EACXnmD,KAAKsjD,MAAQtjD,KAAKwmD,WAAWD,IAG9BN,EAAAhkD,UAAAukD,WAAR,SACED,EACAE,QADA,IAAAF,MAAyChF,EAAmBpU,cAC5D,IAAAsZ,MAAsB3lC,IAAIC,WAG1B,IADA,IAAI1b,EAAOrF,KAAK+E,OAAOM,KAChBrF,KAAKgmD,IAAMhmD,KAAKyF,KAAK,CAC1BzF,KAAKkmD,SAAWlmD,KAAKgmD,IACrB,IAAItlD,EAAI2E,EAAKM,WAAW3F,KAAKgmD,KAC7B,OAAQtlD,GACN,UAEMV,KAAKgmD,IAAMhmD,KAAKyF,KACO,IAAzBJ,EAAKM,WAAW3F,KAAKgmD,QAEnBhmD,KAAKgmD,IAET,MAEF,QACA,OACA,QACA,QACA,UACIhmD,KAAKgmD,IACP,MAEF,QAEE,QADEhmD,KAAKgmD,IAELS,EAAiB,GAAKzmD,KAAKgmD,IAAMhmD,KAAKyF,KACb,IAAzBJ,EAAKM,WAAW3F,KAAKgmD,QAEnBhmD,KAAKgmD,IAELS,EAAiB,GAAKzmD,KAAKgmD,IAAMhmD,KAAKyF,KACb,IAAzBJ,EAAKM,WAAW3F,KAAKgmD,QAEnBhmD,KAAKgmD,IACA96B,EAAM84B,2BAER94B,EAAM44B,oBAER54B,EAAM25B,YAEf,QACA,QACA,QACE,OAAO35B,EAAMw7B,cAEf,QAEE,QADE1mD,KAAKgmD,IAELS,EAAiB,GAAKzmD,KAAKgmD,IAAMhmD,KAAKyF,KACb,IAAzBJ,EAAKM,WAAW3F,KAAKgmD,QAEnBhmD,KAAKgmD,IACA96B,EAAMq6B,gBAERr6B,EAAMk5B,QAEf,QAEE,KADEpkD,KAAKgmD,IACHS,EAAiB,GAAKzmD,KAAKgmD,IAAMhmD,KAAKyF,IAAK,CAC7C,GAA6B,IAAzBJ,EAAKM,WAAW3F,KAAKgmD,KAEvB,QADEhmD,KAAKgmD,IACA96B,EAAM65B,oBAEf,GAA6B,IAAzB1/C,EAAKM,WAAW3F,KAAKgmD,KAEvB,QADEhmD,KAAKgmD,IACA96B,EAAMy6B,iBAGjB,OAAOz6B,EAAMw5B,UAEf,QAEE,QADE1kD,KAAKgmD,IACA96B,EAAMy7B,UAEf,QAEE,QADE3mD,KAAKgmD,IACA96B,EAAM07B,WAEf,QAEE,KADE5mD,KAAKgmD,IACHS,EAAiB,GAAKzmD,KAAKgmD,IAAMhmD,KAAKyF,IAAK,CAC7C,GAA6B,IAAzBJ,EAAKM,WAAW3F,KAAKgmD,KAEvB,QADEhmD,KAAKgmD,IACA96B,EAAMk6B,gBAEf,GAA6B,IAAzB//C,EAAKM,WAAW3F,KAAKgmD,KAEvB,QADEhmD,KAAKgmD,IAELS,EAAiB,GAAKzmD,KAAKgmD,IAAMhmD,KAAKyF,KACb,IAAzBJ,EAAKM,WAAW3F,KAAKgmD,QAEnBhmD,KAAKgmD,IACA96B,EAAMm6B,0BAERn6B,EAAM+4B,kBAGjB,OAAO/4B,EAAMg5B,SAEf,QAEE,KADElkD,KAAKgmD,IACHS,EAAiB,GAAKzmD,KAAKgmD,IAAMhmD,KAAKyF,IAAK,CAC7C,GAA6B,IAAzBJ,EAAKM,WAAW3F,KAAKgmD,KAEvB,QADEhmD,KAAKgmD,IACA96B,EAAMm5B,UAEf,GAA6B,IAAzBh/C,EAAKM,WAAW3F,KAAKgmD,KAEvB,QADEhmD,KAAKgmD,IACA96B,EAAMg6B,YAGjB,OAAOh6B,EAAM0V,KAEf,QAEE,QADE5gC,KAAKgmD,IACA96B,EAAMmP,MAEf,QAEE,KADEr6B,KAAKgmD,IACHS,EAAiB,GAAKzmD,KAAKgmD,IAAMhmD,KAAKyF,IAAK,CAC7C,GAA6B,IAAzBJ,EAAKM,WAAW3F,KAAKgmD,KAEvB,QADEhmD,KAAKgmD,IACA96B,EAAMo5B,YAEf,GAA6B,IAAzBj/C,EAAKM,WAAW3F,KAAKgmD,KAEvB,QADEhmD,KAAKgmD,IACA96B,EAAMi6B,aAGjB,OAAOj6B,EAAM4V,MAEf,QAEE,KADE9gC,KAAKgmD,IACHS,EAAiB,GAAKzmD,KAAKgmD,IAAMhmD,KAAKyF,IAAK,CAC7C,GAAItC,EAAA0jD,eAAexhD,EAAKM,WAAW3F,KAAKgmD,MAEtC,QADEhmD,KAAKgmD,IACA96B,EAAM47B,aAEf,GACEL,EAAiB,GAAKzmD,KAAKgmD,IAAM,EAAIhmD,KAAKyF,KACjB,IAAzBJ,EAAKM,WAAW3F,KAAKgmD,MACQ,IAA7B3gD,EAAKM,WAAW3F,KAAKgmD,IAAM,GAG3B,OADAhmD,KAAKgmD,KAAO,EACL96B,EAAMs4B,YAGjB,OAAOt4B,EAAM67B,IAEf,QACE,IAAIC,EAAkBhnD,KAAKgmD,IAE3B,KADEhmD,KAAKgmD,IACHS,EAAiB,GAAKzmD,KAAKgmD,IAAMhmD,KAAKyF,IAAK,CAC7C,GAA6B,IAAzBJ,EAAKM,WAAW3F,KAAKgmD,KAAwB,CAC/C,IAAI13B,EAAcyQ,EAAApF,YAAYstB,KAQ9B,IANEjnD,KAAKgmD,IAAM,EAAIhmD,KAAKyF,KACS,IAA7BJ,EAAKM,WAAW3F,KAAKgmD,IAAM,OAEzBhmD,KAAKgmD,IACP13B,EAAcyQ,EAAApF,YAAYutB,UAEnBlnD,KAAKgmD,IAAMhmD,KAAKyF,KACvB,GAA6B,IAAzBJ,EAAKM,WAAW3F,KAAKgmD,KAA2B,GAChDhmD,KAAKgmD,IACP,MAGAhmD,KAAKsmD,WACPtmD,KAAKsmD,UACHh4B,EACAjpB,EAAKQ,UAAUmhD,EAAiBhnD,KAAKgmD,KACrChmD,KAAKqE,MAAM2iD,EAAiBhnD,KAAKgmD,MAGrC,MAEF,GAA6B,IAAzB3gD,EAAKM,WAAW3F,KAAKgmD,KAA2B,CAElD,IADA,IAAImB,GAAS,IACJnnD,KAAKgmD,IAAMhmD,KAAKyF,KAEvB,GACG,KAFH/E,EAAI2E,EAAKM,WAAW3F,KAAKgmD,OAGvBhmD,KAAKgmD,IAAM,EAAIhmD,KAAKyF,KACS,IAA7BJ,EAAKM,WAAW3F,KAAKgmD,IAAM,GAC3B,CACAhmD,KAAKgmD,KAAO,EACZmB,GAAS,EACT,MAGCA,EAKMnnD,KAAKsmD,WACdtmD,KAAKsmD,UACHvnB,EAAApF,YAAY2B,MACZj2B,EAAKQ,UAAUmhD,EAAiBhnD,KAAKgmD,KACrChmD,KAAKqE,MAAM2iD,EAAiBhnD,KAAKgmD,MARnChmD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACfpnD,KAAKqE,MAAMrE,KAAKgmD,KAAM,MAS1B,MAEF,GAA6B,IAAzB3gD,EAAKM,WAAW3F,KAAKgmD,KAEvB,QADEhmD,KAAKgmD,IACA96B,EAAMo6B,aAGjB,OAAOp6B,EAAMi5B,MAEf,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACE,OAAOnkD,KAAKqnD,cACRn8B,EAAMo8B,eACNp8B,EAAM47B,aAEZ,QAEE,QADE9mD,KAAKgmD,IACA96B,EAAMq8B,MAEf,QAEE,QADEvnD,KAAKgmD,IACA96B,EAAMs8B,UAEf,QAEE,KADExnD,KAAKgmD,IACHS,EAAiB,GAAKzmD,KAAKgmD,IAAMhmD,KAAKyF,IAAK,CAC7C,GAA6B,IAAzBJ,EAAKM,WAAW3F,KAAKgmD,KAEvB,QADEhmD,KAAKgmD,IAELS,EAAiB,GACjBzmD,KAAKgmD,IAAMhmD,KAAKyF,KACS,IAAzBJ,EAAKM,WAAW3F,KAAKgmD,QAEnBhmD,KAAKgmD,IACA96B,EAAMs6B,0BAERt6B,EAAMq5B,kBAEf,GAA6B,IAAzBl/C,EAAKM,WAAW3F,KAAKgmD,KAEvB,QADEhmD,KAAKgmD,IACA96B,EAAMy4B,gBAGjB,OAAOz4B,EAAMu4B,SAEf,QAEE,KADEzjD,KAAKgmD,IACHS,EAAiB,GAAKzmD,KAAKgmD,IAAMhmD,KAAKyF,IAAK,CAC7C,GAA6B,IAAzBJ,EAAKM,WAAW3F,KAAKgmD,KAEvB,QADEhmD,KAAKgmD,IAELS,EAAiB,GACjBzmD,KAAKgmD,IAAMhmD,KAAKyF,KACS,IAAzBJ,EAAKM,WAAW3F,KAAKgmD,QAEnBhmD,KAAKgmD,IACA96B,EAAM64B,sBAER74B,EAAM24B,cAEf,GAA6B,IAAzBx+C,EAAKM,WAAW3F,KAAKgmD,KAEvB,QADEhmD,KAAKgmD,IACA96B,EAAMu8B,mBAGjB,OAAOv8B,EAAM+5B,OAEf,QAEE,KADEjlD,KAAKgmD,IACHS,EAAiB,GAAKzmD,KAAKgmD,IAAMhmD,KAAKyF,IAAK,CAC7C,GAA6B,IAAzBJ,EAAKM,WAAW3F,KAAKgmD,KAA8B,CAErD,KADEhmD,KAAKgmD,IACHS,EAAiB,GAAKzmD,KAAKgmD,IAAMhmD,KAAKyF,IAAK,CAC7C,GAA6B,IAAzBJ,EAAKM,WAAW3F,KAAKgmD,KAEvB,QADEhmD,KAAKgmD,IAELS,EAAiB,GAAKzmD,KAAKgmD,IAAMhmD,KAAKyF,KACb,IAAzBJ,EAAKM,WAAW3F,KAAKgmD,QAEnBhmD,KAAKgmD,IACA96B,EAAMw6B,4CAERx6B,EAAMu5B,oCAEf,GAA6B,IAAzBp/C,EAAKM,WAAW3F,KAAKgmD,KAEvB,QADEhmD,KAAKgmD,IACA96B,EAAMu6B,+BAGjB,OAAOv6B,EAAMs5B,wBAEf,GAA6B,IAAzBn/C,EAAKM,WAAW3F,KAAKgmD,KAEvB,QADEhmD,KAAKgmD,IACA96B,EAAM04B,mBAGjB,OAAO14B,EAAMw4B,YAEf,QAEE,QADE1jD,KAAKgmD,IACA96B,EAAMw8B,SAEf,QAEE,QADE1nD,KAAKgmD,IACA96B,EAAMy8B,YAEf,QAEE,QADE3nD,KAAKgmD,IACA96B,EAAM08B,aAEf,QAEE,QADE5nD,KAAKgmD,IAELS,EAAiB,GAAKzmD,KAAKgmD,IAAMhmD,KAAKyF,KACb,IAAzBJ,EAAKM,WAAW3F,KAAKgmD,QAEnBhmD,KAAKgmD,IACA96B,EAAM26B,cAER36B,EAAM05B,MAEf,SAEE,QADE5kD,KAAKgmD,IACA96B,EAAM28B,UAEf,SAEE,KADE7nD,KAAKgmD,IACHS,EAAiB,GAAKzmD,KAAKgmD,IAAMhmD,KAAKyF,IAAK,CAC7C,GAA6B,KAAzBJ,EAAKM,WAAW3F,KAAKgmD,KAEvB,QADEhmD,KAAKgmD,IACA96B,EAAM85B,QAEf,GAA6B,IAAzB3/C,EAAKM,WAAW3F,KAAKgmD,KAEvB,QADEhmD,KAAKgmD,IACA96B,EAAM06B,WAGjB,OAAO16B,EAAMy5B,IAEf,SAEE,QADE3kD,KAAKgmD,IACA96B,EAAM48B,WAEf,SAEE,QADE9nD,KAAKgmD,IACA96B,EAAM45B,MAEf,QAEE,QADE9kD,KAAKgmD,IACA96B,EAAM68B,GAEf,QACE,GAAI5kD,EAAA6kD,kBAAkBtnD,GAAI,CACxB,GAAIyC,EAAA8kD,mBAAmBvnD,GAAI,CAEzB,IADA,IAAIwnD,EAAYloD,KAAKgmD,MAEjBhmD,KAAKgmD,IAAMhmD,KAAKyF,KAClBtC,EAAAglD,iBAAiBznD,EAAI2E,EAAKM,WAAW3F,KAAKgmD,OAE1C,IAAK7iD,EAAA8kD,mBAAmBvnD,GAEtB,OADAV,KAAKgmD,IAAMkC,EACJh9B,EAAMU,WAGjB,IACIw8B,EAAe5G,EADDn8C,EAAKQ,UAAUqiD,EAAWloD,KAAKgmD,MAEjD,GACEoC,GAAgBl9B,EAAMkW,SACtBmlB,IAAuBhF,EAAmB8G,SAExC9B,IAAuBhF,EAAmB+G,SAC1CjF,EAAsB+E,IAGxB,OAAOA,EAETpoD,KAAKgmD,IAAMkC,EAEb,OAAOh9B,EAAMU,WACR,GAAIzoB,EAAAolD,aAAa7nD,GAAI,GACxBV,KAAKgmD,IACP,MAOF,OALAhmD,KAAKwG,MACHq4B,EAAA96B,eAAeykD,kBACfxoD,KAAKqE,MAAMrE,KAAKgmD,IAAKhmD,KAAKgmD,IAAM,MAEhChmD,KAAKgmD,IACA96B,EAAMkW,SAInB,OAAOlW,EAAMu9B,WAGfxC,EAAAhkD,UAAAymD,KAAA,SACEC,EACApC,EACAqC,QAFA,IAAAD,OAAA,QACA,IAAApC,MAAyChF,EAAmBpU,cAC5D,IAAAyb,MAAyB9nC,IAAIC,WAE7B,IAAI1b,EAAOrF,KAAK+E,OAAOM,KACvB,GAAIrF,KAAKmmD,UAAY,EAAG,CACtB,IAAI+B,EAAYloD,KAAKgmD,IACjB6C,EAAc7oD,KAAKsjD,MACnBwF,EAAiB9oD,KAAKkmD,SAG1B,GAFAlmD,KAAKmmD,UAAYnmD,KAAKwmD,WAAWD,EAAoBqC,GACrD5oD,KAAKomD,aAAepmD,KAAKkmD,SACrByC,EAEF,IADA3oD,KAAKqmD,oBAAqB,IACjBrmD,KAAKkmD,SAAWgC,GACvB,GAAI/kD,EAAAuC,YAAYL,EAAKM,WAAW3F,KAAKkmD,WAAY,CAC/ClmD,KAAKqmD,oBAAqB,EAC1B,MAINrmD,KAAKgmD,IAAMkC,EACXloD,KAAKsjD,MAAQuF,EACb7oD,KAAKkmD,SAAW4C,EAElB,OAAO9oD,KAAKmmD,WAGdF,EAAAhkD,UAAA8mD,eAAA,WACE,OAAO/oD,KAAKgpD,KAAK99B,EAAMU,WAAY21B,EAAmB+G,SAGxDrC,EAAAhkD,UAAAgnD,mBAAA,WACE,OAAOjpD,KAAKgpD,KAAK99B,EAAMU,WAAY21B,EAAmB8G,SAGxDpC,EAAAhkD,UAAA+mD,KAAA,SAAK1F,EAAciD,QAAA,IAAAA,MAAyChF,EAAmBpU,SAC7E,IAAI+a,EAAYloD,KAAKgmD,IACjB6C,EAAc7oD,KAAKsjD,MACnBwF,EAAiB9oD,KAAKkmD,SACtB0C,EAAoB9nC,IAAIC,UAC5B,OAAQuiC,GACN,KAAKp4B,EAAMw4B,YACTkF,EAAoB,EAKxB,OADA5oD,KAAKsjD,MAAQtjD,KAAKwmD,WAAWD,EAAoBqC,GAC7C5oD,KAAKsjD,OAASA,GAChBtjD,KAAKmmD,WAAa,GACX,IAEPnmD,KAAKgmD,IAAMkC,EACXloD,KAAKsjD,MAAQuF,EACb7oD,KAAKkmD,SAAW4C,GACT,IAIX7C,EAAAhkD,UAAAinD,KAAA,WACE,IAAIC,EAUJ,OATIC,GACFD,EAAQC,EACRA,EAAgB,MAEhBD,EAAQ,IAAIE,EAEdF,EAAMnD,IAAMhmD,KAAKgmD,IACjBmD,EAAM7F,MAAQtjD,KAAKsjD,MACnB6F,EAAMjD,SAAWlmD,KAAKkmD,SACfiD,GAGTlD,EAAAhkD,UAAAqnD,QAAA,SAAQH,GACNC,EAAgBD,GAGlBlD,EAAAhkD,UAAAsnD,MAAA,SAAMJ,GACJnpD,KAAKgmD,IAAMmD,EAAMnD,IACjBhmD,KAAKsjD,MAAQ6F,EAAM7F,MACnBtjD,KAAKkmD,SAAWiD,EAAMjD,SACtBlmD,KAAKmmD,WAAa,GAGpBF,EAAAhkD,UAAAoC,MAAA,SAAMmB,EAAiBC,GAOrB,YAPI,IAAAD,OAAc,QAAG,IAAAC,OAAY,GAC7BD,EAAQ,GACVA,EAAQxF,KAAKkmD,SACbzgD,EAAMzF,KAAKgmD,KACFvgD,EAAM,IACfA,EAAMD,GAED,IAAI2lB,EAAMnrB,KAAK+E,OAAQS,EAAOC,IAGvCwgD,EAAAhkD,UAAAunD,eAAA,WAGE,IAFA,IAAInkD,EAAOrF,KAAK+E,OAAOM,KACnBG,EAAQxF,KAAKgmD,MAEbhmD,KAAKgmD,IAAMhmD,KAAKyF,KAClBtC,EAAAglD,iBAAiB9iD,EAAKM,WAAW3F,KAAKgmD,QAExC,OAAO3gD,EAAKQ,UAAUL,EAAOxF,KAAKgmD,MAGpCC,EAAAhkD,UAAAke,WAAA,WAKE,IAJA,IAAI9a,EAAOrF,KAAK+E,OAAOM,KACnBokD,EAAQpkD,EAAKM,WAAW3F,KAAKgmD,OAC7BxgD,EAAQxF,KAAKgmD,IACb/yC,EAAS,KACA,CACX,GAAIjT,KAAKgmD,KAAOhmD,KAAKyF,IAAK,CACxBwN,GAAU5N,EAAKQ,UAAUL,EAAOxF,KAAKgmD,KACrChmD,KAAKwG,MACHq4B,EAAA96B,eAAe2lD,4BACf1pD,KAAKqE,MAAMmB,EAAQ,EAAGxF,KAAKyF,MAE7B,MAEF,IAAI/E,EAAI2E,EAAKM,WAAW3F,KAAKgmD,KAC7B,GAAItlD,GAAK+oD,EAAO,CACdx2C,GAAU5N,EAAKQ,UAAUL,EAAOxF,KAAKgmD,OACrC,MAEF,GAAK,IAADtlD,EAAJ,CAMA,GAAIyC,EAAAuC,YAAYhF,GAAI,CAClBuS,GAAU5N,EAAKQ,UAAUL,EAAOxF,KAAKgmD,KACrChmD,KAAKwG,MACHq4B,EAAA96B,eAAe2lD,4BACf1pD,KAAKqE,MAAMmB,EAAQ,EAAGxF,KAAKgmD,MAE7B,QAEAhmD,KAAKgmD,SAbL/yC,GAAU5N,EAAKQ,UAAUL,EAAOxF,KAAKgmD,KACrC/yC,GAAUjT,KAAK2pD,qBACfnkD,EAAQxF,KAAKgmD,IAajB,OAAO/yC,GAGTgzC,EAAAhkD,UAAA0nD,mBAAA,WACE,KAAM3pD,KAAKgmD,KAAOhmD,KAAKyF,IAKrB,OAJAzF,KAAKwG,MACHq4B,EAAA96B,eAAe6lD,uBACf5pD,KAAKqE,MAAMrE,KAAKyF,MAEX,GAGT,IAAIJ,EAAOrF,KAAK+E,OAAOM,KACnB3E,EAAI2E,EAAKM,WAAW3F,KAAKgmD,OAC7B,OAAQtlD,GACN,QAAkB,MAAO,KACzB,QAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,QAA2B,MAAO,IAClC,QAA2B,MAAO,IAClC,SACE,OACEV,KAAKgmD,IAAMhmD,KAAKyF,KACS,KAAzBJ,EAAKM,WAAW3F,KAAKgmD,QAEnBhmD,KAAKgmD,IACAhmD,KAAK6pD,6BAEP7pD,KAAK8pD,oBAEd,QAEI9pD,KAAKgmD,IAAMhmD,KAAKyF,KACS,IAAzBJ,EAAKM,WAAW3F,KAAKgmD,QAEnBhmD,KAAKgmD,IAIX,QACA,UACA,UAAkC,MAAO,GACzC,QAAS,OAAOl7B,OAAOi/B,aAAarpD,KAIxCulD,EAAAhkD,UAAA+nD,kBAAA,WAIE,IAHA,IAAI3kD,EAAOrF,KAAK+E,OAAOM,KACnBG,EAAQxF,KAAKgmD,IACbiE,GAAU,IACD,CACX,GAAIjqD,KAAKgmD,KAAOhmD,KAAKyF,IAAK,CACxBzF,KAAKwG,MACHq4B,EAAA96B,eAAemmD,wCACflqD,KAAKqE,MAAMmB,EAAOxF,KAAKyF,MAEzB,MAEF,GAA6B,IAAzBJ,EAAKM,WAAW3F,KAAKgmD,KAAzB,CAKA,IAAItlD,EAAI2E,EAAKM,WAAW3F,KAAKgmD,KAC7B,GAAK,IAADtlD,IAAwBupD,EAAS,MACrC,GAAI9mD,EAAAuC,YAAYhF,GAAI,CAClBV,KAAKwG,MACHq4B,EAAA96B,eAAemmD,wCACflqD,KAAKqE,MAAMmB,EAAOxF,KAAKgmD,MAEzB,QAEAhmD,KAAKgmD,IACPiE,GAAU,QAdNjqD,KAAKgmD,IACPiE,GAAU,EAed,OAAO5kD,EAAKQ,UAAUL,EAAOxF,KAAKgmD,MAGpCC,EAAAhkD,UAAAkoD,gBAAA,WAIE,IAHA,IAAI9kD,EAAOrF,KAAK+E,OAAOM,KACnBG,EAAQxF,KAAKgmD,IACb75B,EAAQ,EACLnsB,KAAKgmD,IAAMhmD,KAAKyF,KAAK,CAC1B,IAAI/E,EAAS2E,EAAKM,WAAW3F,KAAKgmD,KAClC,IAAK7iD,EAAAglD,iBAAiBznD,GAAI,MAI1B,SAHEV,KAAKgmD,IAGCtlD,GACN,SACEyrB,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,SACEA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,SACEA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,QACEA,GAAS,GAWf,OANc,GAAVA,GACFnsB,KAAKwG,MACHq4B,EAAA96B,eAAeqmD,iCACfpqD,KAAKqE,MAAMmB,EAAOxF,KAAKgmD,MAGpB3gD,EAAKQ,UAAUL,EAAOxF,KAAKgmD,MAGpCC,EAAAhkD,UAAAolD,YAAA,WACE,IAAIhiD,EAAOrF,KAAK+E,OAAOM,KACvB,GAA6B,IAAzBA,EAAKM,WAAW3F,KAAKgmD,MAAuBhmD,KAAKgmD,IAAM,EAAIhmD,KAAKyF,IAClE,OAAQJ,EAAKM,WAAW3F,KAAKgmD,IAAM,IACjC,QACA,SACA,QACA,QACA,QACA,SAAiB,OAAO,EAI5B,IADA,IAAIA,EAAMhmD,KAAKgmD,IACRA,EAAMhmD,KAAKyF,KAAK,CACrB,IAAI/E,EAAI2E,EAAKM,WAAWqgD,GACxB,GAAK,IAADtlD,GAAsB,IAADA,GAAoB,KAADA,EAC1C,OAAO,EAET,IAAKA,EAAC,IAAkBA,EAAC,KAAoB,IAADA,EAAiB,MAE7DslD,IAEF,OAAO,GAGTC,EAAAhkD,UAAAooD,YAAA,WACE,IAAIhlD,EAAOrF,KAAK+E,OAAOM,KACvB,GAA6B,IAAzBA,EAAKM,WAAW3F,KAAKgmD,MAAuBhmD,KAAKgmD,IAAM,EAAIhmD,KAAKyF,IAAK,CACvE,OAAQJ,EAAKM,WAAW3F,KAAKgmD,IAAM,IACjC,QACA,SAEE,OADAhmD,KAAKgmD,KAAO,EACLhmD,KAAKsqD,iBAEd,QACA,QAEE,OADAtqD,KAAKgmD,KAAO,EACLhmD,KAAKuqD,oBAEd,QACA,SAEE,OADAvqD,KAAKgmD,KAAO,EACLhmD,KAAKwqD,mBAGhB,GAAIrnD,EAAAsnD,aAAaplD,EAAKM,WAAW3F,KAAKgmD,IAAM,IAAK,CAC/C,IAAIxgD,EAAQxF,KAAKgmD,MACfhmD,KAAKgmD,IACP,IAAI1kD,EAAQtB,KAAKwqD,mBAKjB,OAJAxqD,KAAKwG,MACHq4B,EAAA96B,eAAe2mD,8CACf1qD,KAAKqE,MAAMmB,EAAOxF,KAAKgmD,MAElB1kD,GAGX,OAAOtB,KAAK2qD,sBAGd1E,EAAAhkD,UAAAqoD,eAAA,WAME,IALA,IAAIjlD,EAAOrF,KAAK+E,OAAOM,KACnBG,EAAQxF,KAAKgmD,IACb1kD,EAAQ2vC,QAAQ,EAAG,GACnB2Z,EAAS3Z,QAAQ,GAAI,GACrB4Z,EAASrlD,EACNxF,KAAKgmD,IAAMhmD,KAAKyF,KAAK,CAC1B,IAAIugD,EAAMhmD,KAAKgmD,IACXtlD,EAAI2E,EAAKM,WAAWqgD,GACxB,GAAItlD,GAAC,IAAmBA,GAAC,GAEvBY,EAAQwpD,QACNC,QAAQzpD,EAAOspD,GACf3Z,QAAQvwC,EAAC,GAAgB,SAErB,GAAIA,GAAC,IAAkBA,GAAC,GAE9BY,EAAQwpD,QACNC,QAAQzpD,EAAOspD,GACf3Z,QAAQ,GAAKvwC,EAAC,GAAe,SAE1B,GAAIA,GAAC,IAAkBA,GAAC,IAE7BY,EAAQwpD,QACNC,QAAQzpD,EAAOspD,GACf3Z,QAAQ,GAAKvwC,EAAC,GAAe,QAE1B,IAAK,IAADA,EAWT,MAVImqD,GAAU7E,GACZhmD,KAAKwG,MACHqkD,GAAUrlD,EACNq5B,EAAA96B,eAAeinD,wCACfnsB,EAAA96B,eAAeknD,0DACnBjrD,KAAKqE,MAAM2hD,IAGf6E,EAAS7E,EAAM,EAIjBhmD,KAAKgmD,IAAMA,EAAM,EAanB,OAXIhmD,KAAKgmD,KAAOxgD,EACdxF,KAAKwG,MACHq4B,EAAA96B,eAAemnD,2BACflrD,KAAKqE,MAAMmB,IAEJqlD,GAAU7qD,KAAKgmD,KACxBhmD,KAAKwG,MACHq4B,EAAA96B,eAAeinD,wCACfhrD,KAAKqE,MAAMwmD,EAAS,IAGjBvpD,GAGT2kD,EAAAhkD,UAAA0oD,mBAAA,WAME,IALA,IAAItlD,EAAOrF,KAAK+E,OAAOM,KACnBG,EAAQxF,KAAKgmD,IACb1kD,EAAQ2vC,QAAQ,EAAG,GACnBka,EAASla,QAAQ,GAAI,GACrB4Z,EAASrlD,EACNxF,KAAKgmD,IAAMhmD,KAAKyF,KAAK,CAC1B,IAAIugD,EAAMhmD,KAAKgmD,IACXtlD,EAAI2E,EAAKM,WAAWqgD,GACxB,GAAItlD,GAAC,IAAmBA,GAAC,GAEvBY,EAAQwpD,QACNC,QAAQzpD,EAAO6pD,GACfla,QAAQvwC,EAAC,GAAgB,QAEtB,IAAK,IAADA,EAWT,MAVImqD,GAAU7E,GACZhmD,KAAKwG,MACHqkD,GAAUrlD,EACNq5B,EAAA96B,eAAeinD,wCACfnsB,EAAA96B,eAAeknD,0DACnBjrD,KAAKqE,MAAM2hD,IAGf6E,EAAS7E,EAAM,EAIjBhmD,KAAKgmD,IAAMA,EAAM,EAanB,OAXIhmD,KAAKgmD,KAAOxgD,EACdxF,KAAKwG,MACHq4B,EAAA96B,eAAeqnD,eACfprD,KAAKqE,MAAMmB,IAEJqlD,GAAU7qD,KAAKgmD,KACxBhmD,KAAKwG,MACHq4B,EAAA96B,eAAeinD,wCACfhrD,KAAKqE,MAAMwmD,EAAS,IAGjBvpD,GAGT2kD,EAAAhkD,UAAAuoD,iBAAA,WAME,IALA,IAAInlD,EAAOrF,KAAK+E,OAAOM,KACnBG,EAAQxF,KAAKgmD,IACb1kD,EAAQ2vC,QAAQ,EAAG,GACnBoa,EAAQpa,QAAQ,EAAG,GACnB4Z,EAASrlD,EACNxF,KAAKgmD,IAAMhmD,KAAKyF,KAAK,CAC1B,IAAIugD,EAAMhmD,KAAKgmD,IACXtlD,EAAI2E,EAAKM,WAAWqgD,GACxB,GAAItlD,GAAC,IAAmBA,GAAC,GAEvBY,EAAQwpD,QACNC,QAAQzpD,EAAO+pD,GACfpa,QAAQvwC,EAAC,GAAgB,QAEtB,IAAK,IAADA,EAWT,MAVImqD,GAAU7E,GACZhmD,KAAKwG,MACHqkD,GAAUrlD,EACNq5B,EAAA96B,eAAeinD,wCACfnsB,EAAA96B,eAAeknD,0DACnBjrD,KAAKqE,MAAM2hD,IAGf6E,EAAS7E,EAAM,IAIfhmD,KAAKgmD,IAaT,OAXIhmD,KAAKgmD,KAAOxgD,EACdxF,KAAKwG,MACHq4B,EAAA96B,eAAeunD,qBACftrD,KAAKqE,MAAMmB,IAEJqlD,GAAU7qD,KAAKgmD,KACxBhmD,KAAKwG,MACHq4B,EAAA96B,eAAeinD,wCACfhrD,KAAKqE,MAAMwmD,EAAS,IAGjBvpD,GAGT2kD,EAAAhkD,UAAAsoD,kBAAA,WAOE,IANA,IAAIllD,EAAOrF,KAAK+E,OAAOM,KACnBG,EAAQxF,KAAKgmD,IACb1kD,EAAQ2vC,QAAQ,EAAG,GACnBsa,EAAQta,QAAQ,EAAG,GACnBua,EAAQva,QAAQ,EAAG,GACnB4Z,EAASrlD,EACNxF,KAAKgmD,IAAMhmD,KAAKyF,KAAK,CAC1B,IAAIugD,EAAMhmD,KAAKgmD,IACXtlD,EAAI2E,EAAKM,WAAWqgD,GACxB,GAAK,IAADtlD,EAEFY,EAAQypD,QACNzpD,EACAiqD,QAEG,GAAK,IAAD7qD,EAETY,EAAQwpD,QACNC,QAAQzpD,EAAOiqD,GACfC,OAEG,IAAK,IAAD9qD,EAWT,MAVImqD,GAAU7E,GACZhmD,KAAKwG,MACHqkD,GAAUrlD,EACNq5B,EAAA96B,eAAeinD,wCACfnsB,EAAA96B,eAAeknD,0DACnBjrD,KAAKqE,MAAM2hD,IAGf6E,EAAS7E,EAAM,EAIjBhmD,KAAKgmD,IAAMA,EAAM,EAanB,OAXIhmD,KAAKgmD,KAAOxgD,EACdxF,KAAKwG,MACHq4B,EAAA96B,eAAe0nD,sBACfzrD,KAAKqE,MAAMmB,IAEJqlD,GAAU7qD,KAAKgmD,KACxBhmD,KAAKwG,MACHq4B,EAAA96B,eAAeinD,wCACfhrD,KAAKqE,MAAMwmD,EAAS,IAGjBvpD,GAGT2kD,EAAAhkD,UAAAypD,UAAA,WAWE,OAAO1rD,KAAK2rD,oBAGd1F,EAAAhkD,UAAA0pD,iBAAA,WAIE,IAFA,IAAInmD,EAAQxF,KAAKgmD,IACb3gD,EAAOrF,KAAK+E,OAAOM,KAChBrF,KAAKgmD,IAAMhmD,KAAKyF,KAAOtC,EAAA0jD,eAAexhD,EAAKM,WAAW3F,KAAKgmD,SAC9DhmD,KAAKgmD,IAET,GAAIhmD,KAAKgmD,IAAMhmD,KAAKyF,KAAgC,IAAzBJ,EAAKM,WAAW3F,KAAKgmD,KAE9C,MADEhmD,KAAKgmD,IACAhmD,KAAKgmD,IAAMhmD,KAAKyF,KAAOtC,EAAA0jD,eAAexhD,EAAKM,WAAW3F,KAAKgmD,SAC9DhmD,KAAKgmD,IAGX,GAAIhmD,KAAKgmD,IAAMhmD,KAAKyF,IAAK,CACvB,IAAI/E,EAAI2E,EAAKM,WAAW3F,KAAKgmD,KAC7B,GAAK,IAADtlD,GAAoB,KAADA,EAUrB,MARIV,KAAKgmD,IAAMhmD,KAAKyF,MACS,IAAzBJ,EAAKM,WAAW3F,KAAKgmD,MACI,IAAzB3gD,EAAKM,WAAW3F,KAAKgmD,OAEvB7iD,EAAA0jD,eAAexhD,EAAKM,WAAW3F,KAAKgmD,IAAM,OAExChmD,KAAKgmD,IAEFhmD,KAAKgmD,IAAMhmD,KAAKyF,KAAOtC,EAAA0jD,eAAexhD,EAAKM,WAAW3F,KAAKgmD,SAC9DhmD,KAAKgmD,IAIb,OAAO4F,WAAWvmD,EAAKQ,UAAUL,EAAOxF,KAAKgmD,OAG/CC,EAAAhkD,UAAA4pD,aAAA,WACE,MAAM,IAAIxrC,MAAM,oBAGlB4lC,EAAAhkD,UAAA6nD,kBAAA,WAIE,IAHA,IAAIgC,EAAS,EACTxqD,EAAQ,EACR+D,EAAOrF,KAAK+E,OAAOM,KAChBrF,KAAKgmD,IAAMhmD,KAAKyF,KAAK,CAC1B,IAAI/E,EAAI2E,EAAKM,WAAW3F,KAAKgmD,OAC7B,GAAItlD,GAAC,IAAmBA,GAAC,GACvBY,EAAgB,GAARA,EAAaZ,EAAC,QACjB,GAAIA,GAAC,IAAkBA,GAAC,GAC7BY,EAAgB,GAARA,EAAa,GAAKZ,EAAC,OACtB,MAAIA,GAAC,IAAkBA,GAAC,KAO7B,OAJAV,KAAKwG,MACHq4B,EAAA96B,eAAemnD,2BACflrD,KAAKqE,MAAMrE,KAAKgmD,IAAM,EAAGhmD,KAAKgmD,MAEzB,GANP1kD,EAAgB,GAARA,EAAa,GAAKZ,EAAC,GAQ7B,GAAgB,KAAVorD,EAAa,MAErB,OAAIA,GACF9rD,KAAKwG,MACHq4B,EAAA96B,eAAe6lD,uBACf5pD,KAAKqE,MAAMrE,KAAKgmD,MAEX,IAEFl7B,OAAOi/B,aAAazoD,IAGrB2kD,EAAAhkD,UAAA4nD,0BAAR,WACE,IAAIrkD,EAAQxF,KAAKgmD,IACb1kD,EAAQtB,KAAKsqD,iBACbyB,EAAU1uC,QAAQ/b,GAClB0qD,GAAU,EAEdtoD,QAAQ4Z,SAAShc,IACbyqD,EAAU,UACZ/rD,KAAKwG,MACHq4B,EAAA96B,eAAekoD,4EACfjsD,KAAKqE,MAAMmB,EAAOxF,KAAKgmD,MAEzBgG,GAAU,GAGZ,IAAI3mD,EAAOrF,KAAK+E,OAAOM,KAiBvB,OAhBIrF,KAAKgmD,KAAOhmD,KAAKyF,KACnBzF,KAAKwG,MACHq4B,EAAA96B,eAAe6lD,uBACf5pD,KAAKqE,MAAMmB,EAAOxF,KAAKyF,MAEzBumD,GAAU,GACwB,KAAzB3mD,EAAKM,WAAW3F,KAAKgmD,OAC5BhmD,KAAKgmD,KAEPhmD,KAAKwG,MACHq4B,EAAA96B,eAAemoD,qCACflsD,KAAKqE,MAAMmB,EAAOxF,KAAKgmD,MAEzBgG,GAAU,GAGRA,EAAgB,GACbD,EAAU,MACbjhC,OAAOi/B,aAAagC,GACpBjhC,OAAOi/B,aAC2B,QAA/BgC,EAAU,OAAS,KAAO,IAC1BA,EAAU,OAAS,KAAY,QAIxC9F,EAAAhkD,UAAAkqD,OAAA,aAEFlG,EA/kCA,CAA+BpnB,EAAA34B,mBAAlBxG,EAAAumD,YAklCb,IAAAoD,EAAA,WAOA,OAPA,gBAAa3pD,EAAA2pD,QAUb,IAAID,EAA8B,oFCvjDlC,SAAYrlD,GACVA,IAAA,uDACAA,IAAA,+CACAA,IAAA,mHACAA,IAAA,6LACAA,IAAA,6EACAA,IAAA,yFACAA,IAAA,uEACAA,IAAA,qEACAA,IAAA,+HACAA,IAAA,qIACAA,IAAA,mGACAA,IAAA,yEACAA,IAAA,+FACAA,IAAA,yFACAA,IAAA,mEACAA,IAAA,+CACAA,IAAA,yMACAA,IAAA,+FACAA,IAAA,gEACAA,IAAA,gDACAA,IAAA,gCACAA,IAAA,0FACAA,IAAA,8DACAA,IAAA,0CACAA,IAAA,4GACAA,IAAA,gHACAA,IAAA,0HACAA,IAAA,4EACAA,IAAA,sGACAA,IAAA,0GACAA,IAAA,wEACAA,IAAA,gFACAA,IAAA,gGACAA,IAAA,sGACAA,IAAA,gHACAA,IAAA,oFACAA,IAAA,8HACAA,IAAA,8HACAA,IAAA,wFACAA,IAAA,gHACAA,IAAA,gFACAA,IAAA,oKACAA,IAAA,kLACAA,IAAA,8HACAA,IAAA,gDACAA,IAAA,oCACAA,IAAA,gJACAA,IAAA,4CACAA,IAAA,oGACAA,IAAA,sCACAA,IAAA,8DACAA,IAAA,sDACAA,IAAA,4CACAA,IAAA,4DACAA,IAAA,wIACAA,IAAA,sDACAA,IAAA,wDACAA,IAAA,oEACAA,IAAA,kDACAA,IAAA,wFACAA,IAAA,wFACAA,IAAA,gHACAA,IAAA,oDACAA,IAAA,kDACAA,IAAA,0HACAA,IAAA,gKACAA,IAAA,kFACAA,IAAA,oEACAA,IAAA,kKACAA,IAAA,oFACAA,IAAA,sIACAA,IAAA,sDACAA,IAAA,8CACAA,IAAA,4EACAA,IAAA,4FACAA,IAAA,oDACAA,IAAA,8EACAA,IAAA,kFACAA,IAAA,sGACAA,IAAA,0GACAA,IAAA,gFACAA,IAAA,sNACAA,IAAA,0JACAA,IAAA,sIACAA,IAAA,4LACAA,IAAA,sLACAA,IAAA,oGACAA,IAAA,oGACAA,IAAA,oFACAA,IAAA,wKACAA,IAAA,kHACAA,IAAA,4EACAA,IAAA,4KACAA,IAAA,0DACAA,IAAA,8FACAA,IAAA,gIACAA,IAAA,gJACAA,IAAA,gJACAA,IAAA,sGACAA,IAAA,sEACAA,IAAA,wFACAA,IAAA,gFACAA,IAAA,sQACAA,IAAA,kFACAA,IAAA,0CACAA,IAAA,wFACAA,IAAA,4HA3GF,CAAYrE,EAAAqE,iBAAArE,EAAAqE,oBA+GZrE,EAAAsE,uBAAA,SAAuCG,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,2BACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,oDACjB,KAAK,IAAK,MAAO,uCACjB,KAAK,IAAK,MAAO,kCACjB,KAAK,IAAK,MAAO,+DACjB,KAAK,IAAK,MAAO,kEACjB,KAAK,IAAK,MAAO,iDACjB,KAAK,IAAK,MAAO,oCACjB,KAAK,IAAK,MAAO,uDACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,IAAK,MAAO,qCACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,qGACjB,KAAK,IAAK,MAAO,+CACjB,KAAK,KAAM,MAAO,+BAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,oBAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,uDAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,kDAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,sCAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,gEAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,iBAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,iDAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,qBAClB,KAAK,KAAM,MAAO,gCAClB,KAAK,KAAM,MAAO,qEAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,2BAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,+EAClB,KAAK,KAAM,MAAO,wCAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,kEAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,6CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,6BAClB,KAAK,KAAM,MAAO,8CAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mDAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,+GAClB,KAAK,KAAM,MAAO,8EAClB,KAAK,KAAM,MAAO,oEAClB,KAAK,KAAM,MAAO,6FAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,6DAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,wDAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,yFAClB,KAAK,KAAM,MAAO,oCAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,mEAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,uEAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mIAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,6DAClB,QAAS,MAAO,okBC/NpB,IAuJYgZ,EAvJZivC,EAAAjsD,EAAA,IAMA0+B,EAAA1+B,EAAA,GAKA6+B,EAAA7+B,EAAA,GAyBA6qB,EAAA7qB,EAAA,GAUAksD,EAAAlsD,EAAA,GAwBA8qB,EAAA9qB,EAAA,GAKA4+B,EAAA5+B,EAAA,GA2DA2+B,EAAA3+B,EAAA,GASAgD,EAAAhD,EAAA,IAQA,SAAYgd,GAEVA,IAAA,mBAEAA,IAAA,mBAJF,CAAYA,EAAAzd,EAAAyd,SAAAzd,EAAAyd,YAQZ,IAAAmvC,EAAA,oBAAAA,IAGEtsD,KAAAsZ,OAAiB6D,EAAOovC,OAExBvsD,KAAAwsD,eAAsB,EAEtBxsD,KAAAysD,UAAiB,EAEjBzsD,KAAA0sD,cAAqB,EAErB1sD,KAAA2sD,aAAoB,EAEpB3sD,KAAA4sD,WAAkB,EAElB5sD,KAAAkgB,WAAkB,EAElBlgB,KAAAumC,cAA2C,KAE3CvmC,KAAA6sD,SAAQ,EA0BV,OAvBE9rD,OAAAC,eAAIsrD,EAAArqD,UAAA,gBAAJ,WACE,OAAOjC,KAAKsZ,QAAU6D,EAAOC,wCAI/Brc,OAAAC,eAAIsrD,EAAArqD,UAAA,iBAAJ,WACE,OAAOjC,KAAKsZ,QAAU6D,EAAOC,OAAS0hB,EAAAgE,KAAK0c,QAAU1gB,EAAAgE,KAAK2c,yCAI5D1+C,OAAAC,eAAIsrD,EAAArqD,UAAA,iBAAJ,WACE,OAAOjC,KAAKsZ,QAAU6D,EAAOC,OAAS0hB,EAAAgE,KAAKwc,QAAUxgB,EAAAgE,KAAKyc,yCAI5Dx+C,OAAAC,eAAIsrD,EAAArqD,UAAA,sBAAJ,WACE,OAAOjC,KAAKsZ,QAAU6D,EAAOC,OAAS4hB,EAAAv4B,WAAW8a,IAAMyd,EAAAv4B,WAAW4a,qCAIpEirC,EAAArqD,UAAA6qD,WAAA,SAAWC,GACT,OAAoC,IAA5B/sD,KAAK6sD,SAAWE,IAE5BT,EA7CA,GAAa5sD,EAAA4sD,UAgDb,SAAkBU,GAEhBA,IAAA,eAEAA,IAAA,mCAEAA,IAAA,mCANF,CAAkBttD,EAAAstD,UAAAttD,EAAAstD,aAUlB,SAAkBC,GAEhBA,IAAA,eAEAA,IAAA,uBAEAA,IAAA,uBANF,CAAkBvtD,EAAAutD,iBAAAvtD,EAAAutD,oBAUlB,SAAkBC,GAEhBA,IAAA,eAEAA,IAAA,eAJF,CAAkBxtD,EAAAwtD,WAAAxtD,EAAAwtD,cAQlB,IAAAC,EAAA,SAAA/0B,GAuCE,SAAA+0B,EAAY5c,EAAkB1N,QAAA,IAAAA,MAAA,MAA9B,IAAAvK,EACEF,EAAA53B,KAAAR,KAAMuwC,EAAQpqC,cAAYnG,YA7B5Bs4B,EAAA80B,cAAiC,KAEjC90B,EAAA+0B,YAA2B,KAE3B/0B,EAAAg1B,YAAoBxuB,EAAAgE,KAAKa,KAQzBrL,EAAAi1B,kBAEAj1B,EAAAk1B,eAA4C,IAAIhsB,IAEhDlJ,EAAAm1B,iBAEAn1B,EAAAo1B,QAAqB,EAErBp1B,EAAAq1B,QAAuB,EA+vEfr1B,EAAAs1B,eAAkC,KAClCt1B,EAAAu1B,eAAkC,KAClCv1B,EAAAw1B,eAAkC,KAClCx1B,EAAAy1B,eAAkC,KAxvExCz1B,EAAKiY,QAAUA,EACV1N,IAASA,EAAU,IAAIypB,GAC5Bh0B,EAAKuK,QAAUA,EACfvK,EAAK0d,aAAe/E,QAGlB+c,IAAInrB,EAAQ+pB,WAAY,IAE1Bt0B,EAAK34B,OAASq/B,EAAA/sB,OAAOtQ,WA+5NzB,OAh9N8B02B,EAAA80B,EAAA/0B,GAkCrB+0B,EAAAc,QAAP,SAAe1d,EAAkB1N,GAC/B,YAD+B,IAAAA,MAAA,MACxB,IAAIsqB,EAAS5c,EAAS1N,GAASorB,WAkBxCd,EAAAlrD,UAAAgsD,QAAA,WACE,IAAIprB,EAAU7iC,KAAK6iC,QACfljC,EAASK,KAAKL,OACd4wC,EAAUvwC,KAAKuwC,QAGnBA,EAAQ3N,WAAWC,GAGnB,IAAIqrB,EAAwB,IAAI7B,EAAAxZ,SAAStC,EAAQrJ,cAAe,QAAS,IAAIpI,EAAAyO,aAAczO,EAAAgE,KAAKa,OAChG3jC,KAAKkuD,sBAAwBA,EAC7B,IAAIC,EAAoB,IAAI/nD,MAC5BpG,KAAKmuD,kBAAoBA,EACzBnuD,KAAK04C,gBAAkBwV,EAIvB,IADA,IAAI3rB,EAAUgO,EAAQhO,QACbliC,EAAI,EAAG0c,EAAIwlB,EAAQh9B,OAAQlF,EAAI0c,IAAK1c,EACvCkiC,EAAQliC,GAAGqoC,SAAS1oC,KAAKouD,cAAc7rB,EAAQliC,IAIrD,GAAI8tD,EAAkB5oD,QAAmC,OAAzBgrC,EAAQnO,aAAuB,CAC7D,IAAIhM,EAAY83B,EAAsB93B,UAClCi4B,EAAU1uD,EAAOya,YACnB8zC,EAAsBpzC,aACtB9a,KAAKsuD,mBACHl4B,EAAU0W,eACV1W,EAAU7c,WACV6c,EAAUsW,UAEZ5N,EAAAwhB,mBAAmB4N,EAAsB3a,kBACzC5zC,EAAO4X,YAAY,KAAM42C,IAE3BD,EAAsB1Y,SAAS71C,EAAQ0uD,GAClC9d,EAAQnO,cAAcziC,EAAOme,SAASuwC,GAI7C,IAAIrY,EAAeh2C,KAAKg2C,aACxBA,EAAeuY,UAAUvY,EAAcnT,EAAQU,UAAU6T,UACzDp3C,KAAKg2C,aAAeA,EAChBnT,EAAQ2rB,SACV7uD,EAAOqa,UACL,YACAglB,EAAAv4B,WAAW8a,KACX,EACA5hB,EAAOoU,UAAUsJ,QAAQ24B,GAAe14B,SAAS04B,KAGnDr2C,EAAOqa,UACL,YACAglB,EAAAv4B,WAAW4a,KACX,EACA1hB,EAAOgU,UAAU0J,QAAQ24B,KAK7B,IAAIyY,EAAQC,UAAUH,UAAUvY,EAAc,OAAU/E,QAAQ,GAAI,IACpEtxC,EAAO+c,UACLW,QAAQoxC,GACRzuD,KAAK6iC,QAAQ2rB,SACTxvB,EAAA/sB,OAAO0R,kBACPqb,EAAA/sB,OAAOyR,kBACX1jB,KAAKutD,eACL1qB,EAAQvpB,OACR,UAIEupB,EAAQ6pB,cAAc/sD,EAAOwc,gBAAgB,IAAK,MAAO,UAG7D,IAAIsxC,EAAgBztD,KAAKytD,cACrBkB,EAAoBlB,EAAcloD,OAClCqpD,GAAwB,EAC5B,GAAID,EAAmB,CACrB,IAAIE,EAAU,IAAIzoD,MAAmBuoD,GACrC,IAAStuD,EAAI,EAAGA,EAAIsuD,IAAqBtuD,EACvCwuD,EAAQxuD,GAAKotD,EAAcptD,GAAGiS,IAEhC3S,EAAOge,iBAAiBkxC,GACxBlvD,EAAOwb,eAAe,IAAK,SAC3ByzC,GAAwB,EAS1B,OALI/rB,EAAQ8pB,cACVhtD,EAAOsc,eAAe,IAAK,MAAO,SAC7B2yC,GAAuBjvD,EAAOwb,eAAe,IAAK,UAGlDxb,GAMTwtD,EAAAlrD,UAAA6sD,oBAAA,SAAoBpsB,EAAwCuQ,GAC1D,IAAIluC,EAAS/E,KAAKuwC,QAAQ9N,mBAAmBC,GACzC39B,EAAQ/E,KAAKouD,cAAcrpD,GAE7B/E,KAAKwG,MACHq4B,EAAA96B,eAAegrD,iBACf9b,EAAW5uC,MAAOq+B,IAMxByqB,EAAAlrD,UAAAmsD,cAAA,SAAcrpD,GACZ,IAAIA,EAAOsnB,GAAGrB,EAAA3oB,YAAY2sD,UAA1B,CACAjqD,EAAOynB,IAAIxB,EAAA3oB,YAAY2sD,UAQvB,IALA,IAAIxC,EAAgBxsD,KAAK6iC,QAAQ2pB,cAC7B9jB,EAAU3jC,EAAO2jC,QACjBwlB,EAAwBluD,KAAKkuD,sBAC7BC,EAAoBnuD,KAAKmuD,kBACzBt7B,EAAa9tB,EAAO8tB,WACfxyB,EAAI,EAAG0c,EAAI8V,EAAWttB,OAAQlF,EAAI0c,IAAK1c,EAAG,CACjD,IAAIszB,EAAYd,EAAWxyB,GAC3B,OAAQszB,EAAUrI,MAChB,KAAKyT,EAAA3T,SAASuR,kBAET6vB,GAAkB9jB,GAAW/U,EAAUtH,GAAGrB,EAAA3oB,YAAYo6B,WACnC9I,EAAWs7B,WAE/BjvD,KAAKkvD,wBAA0Cv7B,MAEjD,MAEF,KAAKoL,EAAA3T,SAAS2S,qBAAsB,MACpC,KAAKgB,EAAA3T,SAASgS,iBACRovB,GAAkB9jB,GAAW/U,EAAUtH,GAAGrB,EAAA3oB,YAAYo6B,UACxDz8B,KAAKmvD,uBAAwCx7B,GAE/C,MAEF,KAAKoL,EAAA3T,SAASmQ,qBAETixB,GAAkB9jB,GAAW/U,EAAUtH,GAAGrB,EAAA3oB,YAAYo6B,WAChC9I,EAAWs7B,WAElCjvD,KAAKovD,2BAAgDz7B,MAEvD,MAEF,KAAKoL,EAAA3T,SAAS0S,OACZ99B,KAAK8uD,oBACen7B,EAAW3uB,eACX2uB,EAAWU,MAE/B,MAEF,KAAK0K,EAAA3T,SAASoR,sBACRgwB,GAAkB9jB,GAAW/U,EAAUtH,GAAGrB,EAAA3oB,YAAYo6B,UACxDz8B,KAAKqvD,4BAAkD17B,GAEzD,MAEF,KAAKoL,EAAA3T,SAASmR,SACZ,IAAI+yB,EAAetvD,KAAKuvD,yBAA4C57B,GAChE27B,GAAcnB,EAAkBroD,KAAKwpD,GACzC,MAEF,KAAKvwB,EAAA3T,SAASqR,OACuC,MAA7B9I,EAAW3uB,gBAC/BhF,KAAK8uD,oBACuBn7B,EAAW3uB,eACM2uB,EAAWU,OAGtDm4B,GAAiB9jB,IACnB1oC,KAAKwvD,uBAAwC77B,GAE/C,MAEF,QACE,IAAI87B,EAAmBzvD,KAAK04C,gBAC5B14C,KAAK04C,gBAAkBwV,EACvBC,EAAkBroD,KAAK9F,KAAK0vD,iBAAiB/7B,IAC7C3zB,KAAK04C,gBAAkB+W,MAS/BtC,EAAAlrD,UAAA0tD,yBAAA,SAAyBp/B,GAEvB,IAAIR,EAAUrsB,OAAO1D,KAAKuwC,QAAQ5O,eAAezgC,IAAIqvB,EAAY4X,wBAEjE,OADAzkC,OAAOqsB,EAAQzE,MAAQ+gC,EAAAhrB,YAAYrI,QAC9Bh5B,KAAK4vD,cAAsB7/B,GACjBA,EADkC,MAInDo9B,EAAAlrD,UAAA2tD,cAAA,SAAcC,GACZ,GAAIA,EAAOxjC,GAAGrB,EAAA3oB,YAAY2sD,UAAW,OAAO,EAC5Ca,EAAOrjC,IAAIxB,EAAA3oB,YAAY2sD,UAEvB,IAAIrvD,EAASK,KAAKL,OACd4wB,EAAcs/B,EAAOt/B,YACrBu/B,EAA0B,EAE9B,GAAID,EAAOx6C,MAAQypB,EAAAgE,KAAKa,KACtB,GAAIpT,EAGF,GAAIA,EAAYlb,KAAM,CACpB,IAAI+9B,EAAepzC,KAAKuwC,QAAQ5D,YAAYpc,EAAYlb,MACxD,IAAK+9B,EAAc,OAAO,EAC1B,GAAIA,GAAgBtU,EAAAgE,KAAKa,KAKvB,OAJA3jC,KAAKwG,MACHq4B,EAAA96B,eAAegsD,cACfx/B,EAAYlb,KAAKhR,QAEZ,EAETwrD,EAAOx6C,KAAO+9B,MAGT,KAAI7iB,EAAYrW,YAqBrB,OAJAla,KAAKwG,MACHq4B,EAAA96B,eAAegsD,cACfx/B,EAAY3vB,KAAKyD,MAAMkqC,QAElB,EAfP,GALAuhB,EAAW9vD,KAAKgwD,4BACdz/B,EAAYrW,YACZ4kB,EAAAgE,KAAKa,KAAI,GAGP3jC,KAAKstD,aAAexuB,EAAAgE,KAAKa,KAK3B,OAJA3jC,KAAKwG,MACHq4B,EAAA96B,eAAeksD,mCACf1/B,EAAYrW,YAAY7V,MAAOrE,KAAKstD,YAAYxoD,WAAY,WAEvD,EAET+qD,EAAOx6C,KAAOrV,KAAKstD,iBAWrB5pD,QAAO,GAKX,GAAImsD,EAAOxjC,GAAGrB,EAAA3oB,YAAY+kC,QAAUpc,EAAA3oB,YAAY2lC,SAAU,OAAO,EAEjE,IAAIkoB,EAAaL,EAAOx6C,KAAK2/B,eACzBmb,EAAaN,EAAOtjC,MAAMvB,EAAA3oB,YAAY6uC,QAAU2e,EAAOxjC,GAAGrB,EAAA3oB,YAAYu6B,OAAS5R,EAAA3oB,YAAY2gD,UAG/F,GAAI6M,EAAOxjC,GAAGrB,EAAA3oB,YAAY+kC,SAGxB,OAAI+oB,GAAcnwD,KAAK6iC,QAAQiqB,WAAU,IACvC+C,EAAOrjC,IAAIxB,EAAA3oB,YAAY+tD,eACvBzwD,EAAO0c,gBACLwzC,EAAO/0C,aACP+0C,EAAO3jC,OACH2jC,EAAO3jC,OAAOkc,WACd,MACJynB,EAAOznB,WACP8nB,GAEFL,EAAOrjC,IAAIxB,EAAA3oB,YAAY2sD,WAChB,IAIPhvD,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACfrmC,OAAO6sB,GAAalsB,QAGjB,GAKT,IAAIgsD,GAAoB,EAGpBR,EAAOxjC,GAAGrB,EAAA3oB,YAAY8uC,SACxB2e,EAAW9vD,KAAKswD,sBAAsBT,EAAQA,EAAOx6C,MAAM,GAKvDkb,GAAeA,EAAYrW,aACxB41C,IACHA,EAAW9vD,KAAKuwD,kBACdhgC,EAAYrW,YACZ21C,EAAOx6C,KAAI,MAOX2pB,EAAApb,gBAAgBksC,IAAa9wB,EAAAt4B,aAAaya,QAGxCgvC,GACFL,EAAW9vD,KAAKwwD,wBAAwBV,GACpC9wB,EAAApb,gBAAgBksC,IAAa9wB,EAAAt4B,aAAaya,QAC5CnhB,KAAKuG,QACHs4B,EAAA96B,eAAe0sD,4DACflgC,EAAYlsB,OAEdgsD,GAAoB,IAGtBA,GAAoB,IAMxBP,EAAWD,EAAOx6C,KAAK8qC,aAAaxgD,GAIxC,IAAImb,EAAe+0C,EAAO/0C,aAE1B,GAAIu1C,EACF1wD,EAAOqa,UAAUc,EAAco1C,GAAY,EAAML,EAAOx6C,KAAK8qC,aAAaxgD,IAC1EK,KAAKmuD,kBAAkBroD,KAAKnG,EAAO0X,gBAAgByD,EAAcg1C,SAIjE,GAAIK,EAAY,CAEd,OADenxB,EAAAnb,kBAAkBisC,IAE/B,KAAK9wB,EAAAv4B,WAAW4a,IACdwuC,EAAOjf,kBAAiB,EACxBif,EAAO7e,qBAAuBC,QAAQjS,EAAAlb,iBAAiBgsC,GAAW,GAClE,MAEF,KAAK9wB,EAAAv4B,WAAW8a,IACdsuC,EAAOjf,kBAAiB,EACxBif,EAAO7e,qBAAuBC,QAC5BjS,EAAAjb,oBAAoB+rC,GACpB9wB,EAAAhb,qBAAqB8rC,IAEvB,MAEF,KAAK9wB,EAAAv4B,WAAWib,IACdmuC,EAAOjf,kBAAiB,EACxBif,EAAOxe,mBAAqBrS,EAAA/a,iBAAiB6rC,GAC7C,MAEF,KAAK9wB,EAAAv4B,WAAWmb,IACdiuC,EAAOjf,kBAAiB,EACxBif,EAAOxe,mBAAqBrS,EAAA9a,iBAAiB4rC,GAC7C,MAEF,QAEE,OADApsD,QAAO,IACA,EAGXmsD,EAAOrjC,IAAIxB,EAAA3oB,YAAY8uC,SACnB0e,EAAOxjC,GAAGrB,EAAA3oB,YAAYmmC,gBACxB7oC,EAAOqa,UAAUc,EAAco1C,GAAY,EAAOJ,GAClDnwD,EAAO4b,gBAAgBT,EAAc41C,EAAiBb,KAC7Ct/B,GAAeA,EAAYogC,YACpChxD,EAAOqa,UAAUc,EAAco1C,GAAY,EAAOJ,QAIpDnwD,EAAOqa,UAAUc,EAAco1C,GAAaC,EAAYL,GAG5D,OAAO,GAKT3C,EAAAlrD,UAAAktD,uBAAA,SAAuB5+B,GACrB,IAAIR,EAAUrsB,OAAO1D,KAAKuwC,QAAQ5O,eAAezgC,IAAIqvB,EAAY4X,wBAEjE,OADAzkC,OAAOqsB,EAAQzE,MAAQ+gC,EAAAhrB,YAAYqM,MAC9B1tC,KAAK4wD,YAAkB7gC,GACfA,EADgC,MAI/Co9B,EAAAlrD,UAAA2uD,YAAA,SAAY7gC,WACV,GAAIA,EAAQ1D,GAAGrB,EAAA3oB,YAAY2sD,UAAW,OAAO,EAC7Cj/B,EAAQvD,IAAIxB,EAAA3oB,YAAY2sD,UAExB,IAAIrvD,EAASK,KAAKL,OAClBK,KAAKqtD,YAAct9B,EACnB,IAAI8gC,EAAkC,KAEtC,GAAI9gC,EAAQsD,YACV,IAAmB,IAAA4e,EAAA7M,EAAArV,EAAQsD,QAAQY,UAAQuR,EAAAyM,EAAA3M,QAAAE,EAAAD,KAAAC,EAAAyM,EAAA3M,OAAE,CAAxC,IAAIxI,EAAM0I,EAAAlkC,MACb,GAAIw7B,EAAOxR,MAAQ+gC,EAAAhrB,YAAYqN,UAA/B,CACA,IAAIoiB,GAAc,EACd3mC,EAAiB2S,EACjBi0B,EAAmB5mC,EAAIoG,YAE3B,GADApG,EAAIqC,IAAIxB,EAAA3oB,YAAY2sD,UAChB7kC,EAAIkC,GAAGrB,EAAA3oB,YAAY8uC,SACjBphB,EAAQQ,YAAYmM,kBACtB/8B,EAAOqa,UACLmQ,EAAIrP,aACJkkB,EAAAv4B,WAAW4a,KACX,EACA1hB,EAAOgU,UAAUwW,EAAIsmB,oBAGpB,CACL,IAAIqf,OAAQ,EACRiB,EAAiBzvD,OACnBwuD,EAAW9vD,KAAKuwD,kBACFQ,EAAiBzvD,MAC7Bw9B,EAAAgE,KAAKhiB,IAAG,KAINke,EAAApb,gBAAgBksC,IAAa9wB,EAAAt4B,aAAaya,QAC5C2uC,EAAW9vD,KAAKwwD,wBAAwBV,GACpC9wB,EAAApb,gBAAgBksC,IAAa9wB,EAAAt4B,aAAaya,QACxC4O,EAAQ1D,GAAGrB,EAAA3oB,YAAY6uC,QACzBlxC,KAAKuG,QACHs4B,EAAA96B,eAAe0sD,4DACfM,EAAiB1sD,OAGrBysD,GAAc,KAGQ,MAAjBD,EACTf,EAAWnwD,EAAOgU,UAAU,GACnBk9C,EAAcxkC,GAAGrB,EAAA3oB,YAAY8uC,SACtC2e,EAAWnwD,EAAOgU,UAAUk9C,EAAcpgB,cAAgB,IAG1Dqf,EAAWnwD,EAAOgV,aAAaqqB,EAAA5yB,SAAS4kD,OACtCrxD,EAAO8V,gBAAgBo7C,EAAc/1C,aAAckkB,EAAAv4B,WAAW4a,KAC9D1hB,EAAOgU,UAAU,IAEfoc,EAAQ1D,GAAGrB,EAAA3oB,YAAY6uC,QACzBlxC,KAAKuG,QACHs4B,EAAA96B,eAAe0sD,4DACfM,EAAiB1sD,OAGrBysD,GAAc,GAEZA,GACFnxD,EAAOqa,UACLmQ,EAAIrP,aACJkkB,EAAAv4B,WAAW4a,KACX,EACA1hB,EAAOgU,UAAU,IAEnB3T,KAAKmuD,kBAAkBroD,KAAKnG,EAAO0X,gBAAgB8S,EAAIrP,aAAcg1C,MAErEnwD,EAAOqa,UAAUmQ,EAAIrP,aAAckkB,EAAAv4B,WAAW4a,KAAK,EAAOyuC,GACtD9wB,EAAAnb,kBAAkBisC,IAAa9wB,EAAAv4B,WAAW4a,KAC5C8I,EAAIsmB,cAAgBzR,EAAAlb,iBAAiBgsC,GACrC3lC,EAAIqC,IAAIxB,EAAA3oB,YAAY8uC,WAEpBztC,QAAO,GACPymB,EAAIsmB,cAAgB,IAI1BogB,EAA2B1mC,EAGvB4F,EAAQ1D,GAAGrB,EAAA3oB,YAAYmmC,iBACrB1L,EAAOzQ,GAAGrB,EAAA3oB,YAAY8uC,UAAYnxC,KAAK6iC,QAAQiqB,WAAU,GAC3DntD,EAAO4b,gBAAgBuhB,EAAOhiB,aAAc41C,EAAiB5zB,IACpDi0B,GACT/wD,KAAKuG,QACHs4B,EAAA96B,eAAektD,+BACfF,EAAiB1sD,2GAO3B,OADArE,KAAKqtD,YAAc,MACZ,GAMTF,EAAAlrD,UAAAmtD,2BAAA,SACE7+B,EACA7D,EACA8f,QAAA,IAAAA,MAAA,MAEA,IAAIzc,EAAUrsB,OAAO1D,KAAKuwC,QAAQ5O,eAAezgC,IAAIqvB,EAAY4X,wBAEjE,OADAzkC,OAAOqsB,EAAQzE,MAAQ+gC,EAAAhrB,YAAY4F,oBAC5BjnC,KAAKkxD,kCACSnhC,EACnBrD,EACA8f,EACA,KACoBzc,EAASQ,YAAY3vB,OAK7CusD,EAAAlrD,UAAAivD,kCAAA,SACEjvD,EACAyqB,EACA8f,EACAoH,EACAX,GAEA,IAAItF,EAAW1rC,EAAU2rC,0BACvBlhB,EACA8f,EACAyG,GAEF,OAAKtF,GACLA,EAASiG,WAAaA,EACjB5zC,KAAKmxD,gBAAgBxjB,GACnBA,EADqC,MAFtB,MAOhBwf,EAAAlrD,UAAAqsD,mBAAR,SACExhB,EACAvzB,EACAmzB,QAAA,IAAAA,MAAA,MAEA,IACIx5B,EADA25B,EAAgBC,EAAiBA,EAAevnC,OAAS,EAEzD6P,EAAQ,EAQZ,GAPIs3B,IACFx5B,EAAa,IAAI9M,MAAM,EAAIymC,IAChB,GAAKH,EAASsI,eACzB5/B,EAAQ,GAERlC,EAAa,IAAI9M,MAAMymC,GAErBC,EACF,IAAK,IAAIzsC,EAAI,EAAGA,EAAIwsC,IAAiBxsC,IAAK+U,EACxClC,EAAWkC,GAAS03B,EAAezsC,GAAG20C,eAG1C,IAAIoc,EAAa73C,EAAWy7B,eACxBr1C,EAASK,KAAKL,OACdgb,EAAUhb,EAAO4T,2BAA2B69C,EAAYl+C,GAC5D,IAAKyH,EAAS,CACZ,IAAI/Z,EAAOk+B,EAAAyO,UAAU2T,oBAAoBpU,EAAgBvzB,EAAYmzB,GACrE/xB,EAAUhb,EAAOqT,gBAAgBpS,EAAMwwD,EAAYl+C,GAErD,OAAOyH,GAITwyC,EAAAlrD,UAAAkvD,gBAAA,SAAgBxjB,GACd,GAAIA,EAASthB,GAAGrB,EAAA3oB,YAAY2sD,UAAW,OAAO,EAC9CtrD,QAAQiqC,EAASthB,GAAGrB,EAAA3oB,YAAY+kC,QAAUpc,EAAA3oB,YAAY2lC,UACtD2F,EAASnhB,IAAIxB,EAAA3oB,YAAY2sD,UAGzB,IAkBI18C,EAlBAie,EAAcod,EAAS1rC,UAAUsuB,YACjCpY,EAAOoY,EAAYpY,KACnBA,EACEw1B,EAASthB,GAAGrB,EAAA3oB,YAAY+kC,UAC1BpnC,KAAKwG,MACHq4B,EAAA96B,eAAestD,yDACf9gC,EAAY3vB,KAAKyD,OAIhBspC,EAASthB,GAAGrB,EAAA3oB,YAAY+kC,UAC3BpnC,KAAKwG,MACHq4B,EAAA96B,eAAeutD,gFACf/gC,EAAY3vB,KAAKyD,OAMvB,IAAI+xB,EAAYuX,EAASvX,UACrBzb,EAAU3a,KAAKsuD,mBAAmBl4B,EAAU0W,eAAgB1W,EAAU7c,WAAY6c,EAAUsW,UAC5F/sC,EAASK,KAAKL,OAClB,GAAIwY,EAAM,CACR,IAAIo5C,EAAgB5jB,EAASthB,GAAGrB,EAAA3oB,YAAYi4B,aACxC/gB,EAAao0B,EAASvX,UAAU7c,WAGhCk2C,EAAmBzvD,KAAK04C,gBAC5B14C,KAAK04C,gBAAkB/K,EACvB,IAAIgB,EAAOhB,EAASgB,KAChB7gB,OAAI,EACR,GAAI3V,EAAKmT,MAAQyT,EAAA3T,SAASoS,WACxB95B,QAAQiqC,EAASphB,MAAMvB,EAAA3oB,YAAYi4B,YAActP,EAAA3oB,YAAYymC,IAAM9d,EAAA3oB,YAAY0mC,IAAM/d,EAAA3oB,YAAYglC,OACjG3jC,OAAOiqC,EAASthB,GAAGrB,EAAA3oB,YAAYouB,QAC/B3C,EAAO9tB,KAAKuwD,kBACYp4C,EAAMH,WAC5BuB,EAAU,KAIZo1B,EAAKniB,IAAG,GACHmiB,EAAKqM,YAAYltB,EAAMvU,IAAao1B,EAAKniB,IAAG,GACjDmiB,EAAK6G,eACA,CACL9xC,OAAOyU,EAAKmT,MAAQyT,EAAA3T,SAASkQ,OAC7B,IAAIk2B,EAAQxxD,KAAKyxD,kBAAmCt5C,EAAM0a,YAG1D,GAFI8a,EAASthB,GAAGrB,EAAA3oB,YAAYglC,OAAOmqB,EAAME,QAAQ/xD,EAAO0Z,WAAW,QAAS,KAAM2lB,EAAAv4B,WAAWiR,OAC7Fi3B,EAAK6G,WACD+b,EAAe,CACjB,IAAII,EAAiB3xD,KAAK6iC,QAAQ8uB,eAIlC,GAHAjuD,OAAOiqC,EAASthB,GAAGrB,EAAA3oB,YAAYwvC,YAG1BlD,EAAKtiB,GAAE,GAGV,GAAIsiB,EAAKtiB,GAAE,IACTmlC,EAAM1rD,KAAKnG,EAAOwV,eAAe,EAAGw8C,QAG/B,CACL,IAAIzlC,EAASxoB,OAAOiqC,EAASzhB,QAC7BxoB,OAAOwoB,EAAOZ,MAAQ+gC,EAAAhrB,YAAYiO,OAClCkiB,EAAM1rD,KAAKnG,EAAO4V,eAAe,EAC/BvV,KAAK4xD,wBAA+B1lC,EAAQqE,EAAY3vB,cAMrD2Y,GAAculB,EAAAgE,KAAKa,MAASgL,EAAKtiB,GAAE,IAC5CrsB,KAAKwG,MACHq4B,EAAA96B,eAAe8tD,+DACfthC,EAAY6F,UAAU7c,WAAWlV,OAGrCypB,EAAQ0jC,EAAMjsD,OAEM,GAAhBisD,EAAMjsD,OACJisD,EAAM,GACN7xD,EAAO4X,YAAY,KAAMi6C,EAAOj4C,EAAWy7B,gBAH7Cr1C,EAAO8Y,YAKbzY,KAAK04C,gBAAkB+W,EAGvBn9C,EAAM3S,EAAOya,YACXuzB,EAAS7yB,aACTH,EACAmkB,EAAAwhB,mBAAmB3S,EAAS4F,kBAC5BzlB,OAGG,CACL6f,EAASnhB,IAAIxB,EAAA3oB,YAAY+tD,eAGrBlkC,EAASyhB,EAAS1rC,UAAUiqB,OAChC5Z,EAAM3S,EAAOgc,kBACXgyB,EAAS7yB,aACToR,EACIA,EAAOkc,WACP,MACJuF,EAASvF,WACTztB,GAeJ,OAVIgzB,EAASthB,GAAGrB,EAAA3oB,YAAYmmC,iBACtBpS,EAAU4W,mBAAqB5W,EAAU0W,eAAevnC,SAE1DooC,EAAW3tC,KAAK8xD,iBAAiBnkB,GACjC3tC,KAAK+xD,iBAEPpyD,EAAOkb,kBAAkB8yB,EAAS7yB,aAAc41C,EAAiB/iB,KAGnEA,EAAS6H,SAAS71C,EAAQ2S,IACnB,GAKT66C,EAAAlrD,UAAAotD,4BAAA,SAA4B9+B,GAG1B,IAFA,IAAI8C,EAAU9C,EAAY8C,QACtBm5B,EAAgBxsD,KAAK6iC,QAAQ2pB,cACxBnsD,EAAI,EAAG0c,EAAIsW,EAAQ9tB,OAAQlF,EAAI0c,IAAK1c,EAAG,CAC9C,IAAIy8B,EAASzJ,EAAQhzB,GACrB,OAAQy8B,EAAOxR,MACb,KAAKyT,EAAA3T,SAASuR,kBAET6vB,IAAiB1vB,EAAOzQ,GAAGrB,EAAA3oB,YAAYo6B,SACpBK,EAAQmyB,WAE5BjvD,KAAKkvD,wBAA0CpyB,MAEjD,MAEF,KAAKiC,EAAA3T,SAAS2S,sBAETyuB,IAAiB1vB,EAAOzQ,GAAGrB,EAAA3oB,YAAYo6B,SAChBK,EAAQmyB,WAEhCjvD,KAAKgyD,4BAAkDl1B,MAEzD,MAEF,KAAKiC,EAAA3T,SAASgS,iBACRovB,GAAiB1vB,EAAOzQ,GAAGrB,EAAA3oB,YAAYo6B,UACzCz8B,KAAKmvD,uBAAwCryB,GAE/C,MAEF,KAAKiC,EAAA3T,SAASmQ,qBAETixB,IAAiB1vB,EAAOzQ,GAAGrB,EAAA3oB,YAAYo6B,SACjBK,EAAQmyB,WAE/BjvD,KAAKovD,2BAAgDtyB,MAEvD,MAEF,KAAKiC,EAAA3T,SAASoR,sBACRgwB,GAAiB1vB,EAAOzQ,GAAGrB,EAAA3oB,YAAYo6B,UACzCz8B,KAAKqvD,4BAAkDvyB,GAEzD,MAEF,KAAKiC,EAAA3T,SAASmR,SACZ,GAAIiwB,GAAiB1vB,EAAOzQ,GAAGrB,EAAA3oB,YAAYo6B,QAAS,CAClD,IAAI6yB,EAAetvD,KAAKuvD,yBAA4CzyB,GAAQ,GACxEwyB,GAActvD,KAAKmuD,kBAAkBroD,KAAKwpD,GAEhD,MAEF,QAAS5rD,QAAO,MAKtBypD,EAAAlrD,UAAAgwD,iBAAA,SAAiBvwD,WACf,GAAKA,EAAG2xB,QAAR,CAEA,IAAIm5B,EAAgBxsD,KAAK6iC,QAAQ2pB,kBACjC,IAAoB,IAAAva,EAAA7M,EAAA1jC,EAAG2xB,QAAQY,UAAQuR,EAAAyM,EAAA3M,QAAAE,EAAAD,KAAAC,EAAAyM,EAAA3M,OAAE,CAApC,IAAIvV,EAAOyV,EAAAlkC,MACd,OAAQyuB,EAAQzE,MACd,KAAK+gC,EAAAhrB,YAAY+E,iBAGXomB,IACiBz8B,EAAS1D,GAAGrB,EAAA3oB,YAAYo6B,SACpB1M,EAAS1D,GAAGrB,EAAA3oB,YAAY8kC,UAE/CnnC,KAAKkyD,+BAA+CniC,MAEtD,MAEF,KAAKs8B,EAAAhrB,YAAYqM,KACf1tC,KAAK4wD,YAAkB7gC,GACvB,MAEF,KAAKs8B,EAAAhrB,YAAY4F,oBAGXulB,IAAqCz8B,EAAS1D,GAAGrB,EAAA3oB,YAAYo6B,SACrC1M,EAAS1D,GAAGrB,EAAA3oB,YAAY8kC,UAElDnnC,KAAKkxD,kCACgBnhC,KAEnB,KACA,KACoBA,EAASQ,YAAY3vB,MAG7C,MAEF,KAAKyrD,EAAAhrB,YAAYrI,OACfh5B,KAAK4vD,cAAsB7/B,GAC3B,MAEF,KAAKs8B,EAAAhrB,YAAYmP,UACfxwC,KAAKiyD,iBAA4BliC,yGASzCo9B,EAAAlrD,UAAAutD,uBAAA,SAAuB77B,GACrB,IAAIh0B,EAASK,KAAKL,OACdoiC,EAAmB/hC,KAAKuwC,QAAQxO,iBAChC1O,EAAUM,EAAUN,QACxB,GAAKA,EACL,IAAK,IAAIhzB,EAAI,EAAG0c,EAAIsW,EAAQ9tB,OAAQlF,EAAI0c,IAAK1c,EAAG,CAC9C,IAAIy8B,EAASzJ,EAAQhzB,GACjB8xD,EACFx+B,EAAUtvB,MAAMU,OAAO2vB,aACvB1J,EAAA1oB,eACAw6B,EAAO/hB,aAAa1V,KAElB0qB,EAAUgS,EAAiB7gC,IAAIixD,GACnC,GAAKpiC,EACL,OAAQA,EAAQzE,MACd,KAAK+gC,EAAAhrB,YAAY+E,gBACOrW,EAAS1D,GAAGrB,EAAA3oB,YAAY8kC,UAC5CnnC,KAAKkyD,+BAA+CniC,MAEtD,MAEF,KAAKs8B,EAAAhrB,YAAYqM,KACf1tC,KAAK4wD,YAAkB7gC,GACvB,MAEF,KAAKs8B,EAAAhrB,YAAY4F,mBACf,IACuBlX,EAAS1D,GAAGrB,EAAA3oB,YAAY8kC,UAC7CxT,EAAUtvB,MAAMU,OAAO2jC,QACvB,CACA,IAAI0pB,EAAmBpyD,KAAKkxD,kCACPnhC,KAEnB,KACA,KACoBA,EAASQ,YAAY3vB,MAE3C,GAAIwxD,EAAkB,CACpB,IAAIC,EAAsBD,EAAiBnwD,UAAUsuB,YACjD8hC,GAAuBA,EAAoBx1B,oBAAoBC,IACjEn9B,EAAOkb,kBAAkBu3C,EAAiBt3C,aAAcgiB,EAAO/hB,aAAa1V,OAIlF,MAEF,KAAKgnD,EAAAhrB,YAAYrI,OACf,GAAIh5B,KAAK4vD,cAAsB7/B,IAAY4D,EAAUtvB,MAAMU,OAAO2jC,QAAS,CACzE,IAAI4pB,EAA6BviC,EAASQ,YACtC+hC,GAAqBA,EAAkBz1B,oBAAoBC,KAChD/M,EAAS1D,GAAGrB,EAAA3oB,YAAY8uC,SACnCxxC,EAAO4b,gBAAgBwU,EAAQjV,aAAcgiB,EAAO/hB,aAAa1V,MAEjErF,KAAKuG,QACHs4B,EAAA96B,eAAektD,+BACfn0B,EAAOz4B,QAKf,MAEF,KAAKgoD,EAAAhrB,YAAYmP,UACfxwC,KAAKiyD,iBAA4BliC,MASzCo9B,EAAAlrD,UAAAitD,wBAAA,SACE3+B,EACA7D,EACA8f,EACA2B,QADA,IAAA3B,MAAA,WACA,IAAA2B,MAAA,MAEA,IAAIpe,EAAUrsB,OAAO1D,KAAKuwC,QAAQ5O,eAAezgC,IAAIqvB,EAAY4X,wBACjEzkC,OAAOqsB,EAAQzE,MAAQ+gC,EAAAhrB,YAAY+E,iBACnCpmC,KAAKkyD,+BACaniC,EAChBrD,EACA8f,EACA2B,IAIJgf,EAAAlrD,UAAAiwD,+BAAA,SACEjwD,EACAyqB,EACA8f,EACA2B,QADA,IAAA3B,MAAA,WACA,IAAA2B,MAAA,MAEA,IAAIR,EAAW1rC,EAAU2rC,0BACvBlhB,EACA8f,EACA2B,GAEGR,GACL3tC,KAAKuyD,aAAa5kB,IAGpBwf,EAAAlrD,UAAAswD,aAAA,SAAa5kB,eACX,GAAIA,EAASthB,GAAGrB,EAAA3oB,YAAY2sD,UAAW,OAAO,EAC9CrhB,EAASnhB,IAAIxB,EAAA3oB,YAAY2sD,UAEzB,IAAIwD,EAAgB7kB,EAAS1rC,UAAUoxB,QACvC,GAAIm/B,MACF,IAAoB,IAAAhtB,EAAAJ,EAAAotB,EAAcv+B,UAAQyS,EAAAlB,EAAAF,QAAAoB,EAAAnB,KAAAmB,EAAAlB,EAAAF,OAAE,CAC1C,QADOvV,EAAO2W,EAAAplC,OACEgqB,MACd,KAAK+gC,EAAAhrB,YAAYrI,OACfh5B,KAAK4vD,cAAsB7/B,GAC3B,MAEF,KAAKs8B,EAAAhrB,YAAY4F,mBAEQlX,EAAS1D,GAAGrB,EAAA3oB,YAAY8kC,UAE7CnnC,KAAKkxD,kCACgBnhC,KACf,KAAM,KACUA,EAASQ,YAAY3vB,MAG7C,MAEF,KAAKyrD,EAAAhrB,YAAYqJ,UACX7pC,EAAoBkvB,EAAS4a,kBAE/B3qC,KAAKkxD,kCACHrwD,KACI,KAAM,KACVA,EAAO0vB,YAAY3vB,OAGnB6xD,EAAoB1iC,EAAS6a,kBAE/B5qC,KAAKkxD,kCACHuB,KACI,KAAM,KACVA,EAAOliC,YAAY3vB,yGAQ/B,IAAI8xD,EAAe/kB,EAASmJ,oBACxB4b,GAAc1yD,KAAKmxD,gBAAgBuB,GACvC,IAAIrpB,EAAkBsE,EAASta,QAC/B,GAAIgW,MACF,IAAoB,IAAA8M,EAAA/Q,EAAAiE,EAAgBpV,UAAQyiB,EAAAP,EAAA7Q,QAAAoR,EAAAnR,KAAAmR,EAAAP,EAAA7Q,OAAE,CAAzC,IAAIvV,EACP,QADOA,EAAO2mB,EAAAp1C,OACEgqB,MACd,KAAK+gC,EAAAhrB,YAAY4F,mBAEQlX,EAAS1D,GAAGrB,EAAA3oB,YAAY8kC,UAE7CnnC,KAAKkxD,kCACgBnhC,KAEnB4d,EAASnB,wBACT,KACoBzc,EAASQ,YAAY3vB,MAG7C,MAEF,KAAKyrD,EAAAhrB,YAAY8N,MAEf,GADApf,EAAQvD,IAAIxB,EAAA3oB,YAAY2sD,WACnBrhB,EAASthB,GAAGrB,EAAA3oB,YAAYmmC,gBAAkBzY,EAAQ1D,GAAGrB,EAAA3oB,YAAYwgD,SAAU,MAChF,IAAIljD,EAASK,KAAKL,OACdiB,EAAemvB,EAASqY,WACxB/yB,EAAe0a,EAAS1a,KACxB66C,EAAa76C,EAAK2/B,eAClBjjC,EAAiBge,EAASimB,aAC1BzS,EAAYvjC,KAAK6iC,QAAQU,UACzBouB,EAAiB3xD,KAAK6iC,QAAQ8uB,eAG9BgB,EAAajC,EAAiB3gC,EAAS/E,EAAAxoB,cAAgB5B,GAgB3D,GAfAjB,EAAOya,YACLu4C,EACA3yD,KAAKsuD,mBAAmB,KAAMj5C,EAAMkuB,GACpC,KACA5jC,EAAOgW,WACLN,EAAK+hC,SACL/hC,EAAKgX,GAAE,GACP1sB,EAAOwV,eAAe,EAAGw8C,GACzBzB,EACAn+C,IAGJpS,EAAOkb,kBAAkB83C,EAAYA,GAGjC5iC,EAAQ1D,GAAGrB,EAAA3oB,YAAY2gD,UAAW,MACtC,IAAI4P,EAAalC,EAAiB3gC,EAAS/E,EAAAvoB,cAAgB7B,GAC3DjB,EAAOya,YACLw4C,EACA5yD,KAAKsuD,oBAAqBj5C,GAAQypB,EAAAgE,KAAKa,KAAMJ,GAC7C,KACA5jC,EAAOqW,YACLX,EAAK+hC,SACLz3C,EAAOwV,eAAe,EAAGw8C,GACzBhyD,EAAOwV,eAAe,EAAG+6C,GACzBA,EACAn+C,IAGJpS,EAAOkb,kBAAkB+3C,EAAYA,GACrC,MAEF,KAAKvG,EAAAhrB,YAAYqJ,SACf,IAAI7pC,EAQA4xD,GARA5xD,EAAoBkvB,EAAS4a,kBAE/B3qC,KAAKkxD,kCACHrwD,KACI8sC,EAASnB,wBAAyB,KACtC3rC,EAAO0vB,YAAY3vB,OAGnB6xD,EAAoB1iC,EAAS6a,kBAE/B5qC,KAAKkxD,kCACHuB,KACI9kB,EAASnB,wBAAyB,KACtCimB,EAAOliC,YAAY3vB,yGAQ/B,OAAO,GAGTusD,EAAAlrD,UAAA+vD,4BAAA,SACEzhC,EACA7D,EACA8f,EACA2B,QADA,IAAA3B,MAAA,WACA,IAAA2B,MAAA,MAGAnuC,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACfxZ,EAAYlsB,QAOhB8oD,EAAAlrD,UAAA4wD,iBAAA,SAAiB/gD,EAAoBghD,QAAA,IAAAA,MAAA,GACnC,IAAI9c,EAAeuY,UAAUvuD,KAAKg2C,aAAc8c,GAC5C9gD,EAAUgtB,EAAAntB,cAAclQ,OAAOmQ,EAAQkkC,GAG3C,OAFAh2C,KAAKutD,eAAeznD,KAAKkM,GACzBhS,KAAKg2C,aAAe8U,QAAQ9U,EAAc/E,QAAQn/B,EAAOvM,OAAQ,IAC1DyM,GAMTm7C,EAAAlrD,UAAA8wD,yBAAA,SAAyBh1C,GAEvB,GADAra,OAAOqa,EAAKsO,GAAGrB,EAAA3oB,YAAY2sD,WACvBjxC,EAAK21B,oBAAsB,EAC7B,OAAO31B,EAAK21B,mBAEd,IAAI+Z,EAAgBztD,KAAKytD,cACrBr4C,EAAQq4C,EAAcloD,OAO1B,OANKwY,EAAKsO,GAAGrB,EAAA3oB,YAAY2wD,aAAej1C,EAAKqY,UAAU4W,mBAAqBjvB,EAAKqY,UAAU0W,eAAevnC,SAExGwY,EAAO/d,KAAK8xD,iBAAiB/zC,IAE/B0vC,EAAc3nD,KAAKiY,GACnBA,EAAK21B,mBAAqBt+B,EACnBA,GAKT+3C,EAAAlrD,UAAAytD,iBAAA,SAAiB/7B,GACf,IACI7F,EADAnuB,EAASK,KAAKL,OAElB,OAAQg0B,EAAUrI,MAChB,KAAKyT,EAAA3T,SAASkQ,MACZxN,EAAO9tB,KAAKizD,sBAAsCt/B,GAClD,MAEF,KAAKoL,EAAA3T,SAAS4R,MACZlP,EAAO9tB,KAAKkzD,sBAAsCv/B,GAClD,MAEF,KAAKoL,EAAA3T,SAAS6R,SACZnP,EAAO9tB,KAAKmzD,yBAA4Cx/B,GACxD,MAEF,KAAKoL,EAAA3T,SAAS8R,GACZpP,EAAO9tB,KAAKozD,mBAAgCz/B,GAC5C,MAEF,KAAKoL,EAAA3T,SAAS+R,MACZrP,EAAO9tB,KAAKqzD,sBAAsC1/B,GAClD,MAEF,KAAKoL,EAAA3T,SAASoS,WACZ1P,EAAO9tB,KAAKszD,2BAAgD3/B,GAC5D,MAEF,KAAKoL,EAAA3T,SAASuS,IACZ7P,EAAO9tB,KAAKuzD,oBAAkC5/B,GAC9C,MAEF,KAAKoL,EAAA3T,SAASwS,GACZ9P,EAAO9tB,KAAKwzD,mBAAgC7/B,GAC5C,MAEF,KAAKoL,EAAA3T,SAAS4S,OACZlQ,EAAO9tB,KAAKyzD,uBAAwC9/B,GACpD,MAEF,KAAKoL,EAAA3T,SAAS8S,OACZpQ,EAAO9tB,KAAK0zD,uBAAwC//B,GACpD,MAEF,KAAKoL,EAAA3T,SAAS+S,MACZrQ,EAAO9tB,KAAK2zD,sBAAsChgC,GAClD,MAEF,KAAKoL,EAAA3T,SAASgT,IACZtQ,EAAO9tB,KAAK4zD,oBAAkCjgC,GAC9C,MAEF,KAAKoL,EAAA3T,SAASmR,UACZzO,EAAO9tB,KAAKuvD,yBAA4C57B,MAC7C7F,EAAOnuB,EAAO8Y,aACzB,MAEF,KAAKsmB,EAAA3T,SAASmT,KACZzQ,EAAO9tB,KAAK6zD,qBAAoClgC,GAChD,MAEF,KAAKoL,EAAA3T,SAASoT,MACZ1Q,EAAO9tB,KAAK8zD,sBAAsCngC,GAClD,MAEF,KAAKoL,EAAA3T,SAASiT,gBAGZ,GAAIr+B,KAAK04C,iBAAmB14C,KAAKkuD,sBAC/B,OAAOvuD,EAAO8Y,YAIlB,QACE/U,QAAO,GACPoqB,EAAOnuB,EAAOma,oBAIlB,OADI9Z,KAAK6iC,QAAQ3iB,WAAWlgB,KAAK+zD,iBAAiBjmC,EAAM6F,EAAUtvB,OAC3DypB,GAGTq/B,EAAAlrD,UAAAwvD,kBAAA,SAAkB5+B,GAChB,IAAImhC,EAAgBnhC,EAAWttB,OAC3BisD,EAAQ,IAAIprD,MAAqB4tD,GACrCxC,EAAMjsD,OAAS,EAEf,IADA,IAAIopC,EAAO3uC,KAAK04C,gBAAgB/J,KACvBtuC,EAAI,EAAGA,EAAI2zD,IAAiB3zD,EAAG,CACtC,IAAIytB,EAAO9tB,KAAK0vD,iBAAiB78B,EAAWxyB,IAC5C,OAAQ2+B,EAAApb,gBAAgBkK,IACtB,KAAKkR,EAAAt4B,aAAa23C,MAChB,IAAKrf,EAAArZ,aAAamI,GAAO,CACvB,IAAK,IAAIqW,EAAI,EAAGpnB,EAAIiiB,EAAAnZ,mBAAmBiI,GAAOqW,EAAIpnB,IAAKonB,EAAGqtB,EAAM1rD,KAAKk5B,EAAAjZ,cAAc+H,EAAMqW,IACzF,MAIJ,QAASqtB,EAAM1rD,KAAKgoB,GACpB,KAAKkR,EAAAt4B,aAAautD,KAEpB,GAAItlB,EAAKpiB,MAAK,IAA6B,MAE7C,OAAOilC,GAGTrE,EAAAlrD,UAAAgxD,sBAAA,SAAsBt/B,GACpB,IAAId,EAAac,EAAUd,WACvB8lB,EAAa34C,KAAK04C,gBAAgB/J,KAClCA,EAAOgK,EAAWO,OACtBl5C,KAAK04C,gBAAgB/J,KAAOA,EAE5B,IAAI6iB,EAAQxxD,KAAKyxD,kBAAkB5+B,GAC/B/E,EAAuB,GAAhB0jC,EAAMjsD,OACbvF,KAAKL,OAAO8Y,YACI,GAAhB+4C,EAAMjsD,OACJisD,EAAM,GACNxxD,KAAKL,OAAO4X,YAAY,KAAMi6C,EAAMxyB,EAAAnb,kBAAkB2tC,EAAMA,EAAMjsD,OAAS,KAIjF,OAFAvF,KAAK04C,gBAAgB/J,KAAOA,EAAK0K,OACjCV,EAAW4B,QAAQ5L,GACZ7gB,GAGTq/B,EAAAlrD,UAAAixD,sBAAA,SAAsBv/B,GACpB,IAAIh0B,EAASK,KAAKL,OAClB,GAAIg0B,EAAUnc,MAKZ,OAJAxX,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACfpW,EAAUnc,MAAMnT,OAEX1E,EAAOma,oBAEhB,IAAI60B,EAAO3uC,KAAK04C,gBAAgB/J,KAC5BkK,EAAalK,EAAKkK,WACtB,OAAkB,MAAdA,GACF74C,KAAKwG,MACHq4B,EAAA96B,eAAemwD,qFACfvgC,EAAUtvB,OAEL1E,EAAOma,sBAEhB60B,EAAKniB,IAAG,GACD7sB,EAAOiY,YAAYihC,KAG5BsU,EAAAlrD,UAAAkxD,yBAAA,SAAyBx/B,GACvB,IAAIh0B,EAASK,KAAKL,OACd6X,EAAQmc,EAAUnc,MACtB,GAAIA,EAKF,OAJAxX,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACfvyB,EAAMnT,OAED1E,EAAOma,oBAGhB,IAAI60B,EAAO3uC,KAAK04C,gBAAgB/J,KAC5BiK,EAAgBjK,EAAKiK,cACzB,OAAqB,MAAjBA,GACF54C,KAAKwG,MACHq4B,EAAA96B,eAAeowD,8EACfxgC,EAAUtvB,OAEL1E,EAAOma,sBAEhB60B,EAAKniB,IAAG,IACD7sB,EAAOiY,YAAYghC,KAG5BuU,EAAAlrD,UAAAmxD,mBAAA,SAAmBz/B,GACjB,IAAI+kB,EAAkB14C,KAAK04C,gBACvB/4C,EAASK,KAAKL,OAEd6X,EAAQkhC,EAAgBrD,oBACxBsD,EAAaD,EAAgB/J,KAC7BA,EAAOgK,EAAWO,OACtBR,EAAgB/J,KAAOA,EACvB,IAAIkK,EAAa,SAAWrhC,EAC5Bm3B,EAAKkK,WAAaA,EAClB,IAAID,EAAgB,YAAcphC,EAClCm3B,EAAKiK,cAAgBA,EAErB,IAAIzgC,EAAOnY,KAAK0vD,iBAAiB/7B,EAAUA,WACvCygC,EAAWp0D,KAAKq0D,cAClBr0D,KAAKuwD,kBAAkB58B,EAAU9b,UAAWinB,EAAAgE,KAAKhiB,IAAG,KACpD9gB,KAAKstD,aAKP5U,EAAgB/J,KAAOA,EAAK0K,OAC5BX,EAAgBnD,oBAChB,IAAI+e,EAAa3lB,EAAKpiB,MAAK,IAS3B,OARAoiB,EAAKsK,MACH,KAKFN,EAAW4B,QAAQ5L,GAEZhvC,EAAO4X,YAAYshC,GACxBl5C,EAAOuY,WAAW0gC,EAChB0b,EACIn8C,EACAxY,EAAO4X,YAAY,MACjBY,EACAxY,EAAOiY,YAAYghC,EAAewb,IACjCp1B,EAAAv4B,WAAWiR,QAEnB48C,EAAat1B,EAAAv4B,WAAWi4C,YAAc1f,EAAAv4B,WAAWiR,OAGtDy1C,EAAAlrD,UAAAoxD,sBAAA,SAAsB1/B,GACpB,OAAO3zB,KAAKL,OAAO8Y,aAGrB00C,EAAAlrD,UAAAqxD,2BAAA,SAA2B3/B,GACzB,IAAIlf,EAAOzU,KAAKuwD,kBAAkB58B,EAAU3b,WAAY8mB,EAAAgE,KAAKa,KAAI,KAKjE,OAJI3jC,KAAKstD,aAAexuB,EAAAgE,KAAKa,OAC3BlvB,EAAOzU,KAAKL,OAAOoY,WAAWtD,GAC9BzU,KAAKstD,YAAcxuB,EAAAgE,KAAKa,MAEnBlvB,GAGT04C,EAAAlrD,UAAAsxD,oBAAA,SAAoB5/B,GAGlB,IAAI+kB,EAAkB14C,KAAK04C,gBACvBlhC,EAAQkhC,EAAgBrD,oBACxBsD,EAAaD,EAAgB/J,KAC7BA,EAAOgK,EAAWO,OACtBR,EAAgB/J,KAAOA,EACvB,IAAIkK,EAAalK,EAAKkK,WAAa,SAAWrhC,EAC9Cm3B,EAAKkK,WAAaA,EAClB,IAAID,EAAgB,YAAcphC,EAClCm3B,EAAKiK,cAAgBA,EACrB,IAAI2b,EAAc,UAAY/8C,EAG1B7X,EAASK,KAAKL,OACdmwD,EAAWn8B,EAAUzZ,YACrBla,KAAK0vD,iBAA4B/7B,EAAUzZ,aAC3C,EACAk6C,EAA0B,EAC1BI,GAAa,EACjB,GAAI7gC,EAAU9b,UAAW,CACvBu8C,EAAWp0D,KAAKq0D,cACdr0D,KAAKgwD,4BAAwCr8B,EAAU9b,UAAWinB,EAAAgE,KAAKU,KAAI,GAC3ExjC,KAAKstD,aAGP,IAAImH,EAAUz0D,KAAKwwD,wBAAwB4D,GACvCp1B,EAAApb,gBAAgB6wC,IAAYz1B,EAAAt4B,aAAaya,QAC3Czd,OAAOs7B,EAAAnb,kBAAkB4wC,IAAYz1B,EAAAv4B,WAAW4a,KACf,GAA7B2d,EAAAlb,iBAAiB2wC,KAAeD,GAAa,IAKnDJ,EAAWp0D,KAAKq0D,cACdr0D,KAAKgwD,4BAAwCr8B,EAAU9b,UAAWinB,EAAAgE,KAAKU,KAAI,GAC3ExjC,KAAKstD,kBAIP8G,EAAWz0D,EAAOgU,UAAU,GAC5B6gD,GAAa,EAEf,IAAIE,EAAW/gC,EAAUsC,YACrBj2B,KAAKuwD,kBAA8B58B,EAAUsC,YAAa6I,EAAAgE,KAAKa,KAAI,KACnE,EACAgxB,EAAW30D,KAAK0vD,iBAAiB/7B,EAAUA,WAG/C+kB,EAAgB/J,KAAOA,EAAK0K,OAC5BX,EAAgBnD,oBAChB,IAAIqf,EAAejmB,EAAKpiB,MAAM,KAC9BoiB,EAAKsK,MACH,KAKF,IAAIqb,EAAaE,GAAc7lB,EAAKpiB,MAAK,IACrCioC,EAAY7b,EAAW4B,QAAQ5L,GAC9BgK,EAAW8B,mBAAmB9L,GAEnC,IAAIkmB,EAAa,IAAIzuD,MACjB0pD,GAAU+E,EAAW/uD,KAAKgqD,GAE9B,IAAIgF,EAAc,IAAI1uD,MAyBtB,OAxBIwuD,EACFE,EAAYhvD,KACVnG,EAAO4X,YAAYqhC,GACjBj5C,EAAOiY,YAAYihC,EAAYl5C,EAAO4U,YAAYyqB,EAAAj2B,QAAQ+0C,OAAQsW,IAClEO,GACC31B,EAAAv4B,WAAWiR,QAGhBo9C,EAAYhvD,KACVnG,EAAOiY,YAAYihC,EAAYl5C,EAAO4U,YAAYyqB,EAAAj2B,QAAQ+0C,OAAQsW,KAEpEU,EAAYhvD,KAAK6uD,IAEfD,GAAUI,EAAYhvD,KAAK4uD,GAC/BI,EAAYhvD,KACVnG,EAAOiY,YAAY28C,IAGrBM,EAAW/uD,KACTnG,EAAOuY,WAAWq8C,EAChB50D,EAAO4X,YAAY,KAAMu9C,EAAa91B,EAAAv4B,WAAWiR,QAI9C/X,EAAO4X,YACZshC,EACAgc,EACAP,EACIt1B,EAAAv4B,WAAWi4C,YACX1f,EAAAv4B,WAAWiR,OAInBy1C,EAAAlrD,UAAAuxD,mBAAA,SAAmB7/B,GACjB,IAAIh0B,EAASK,KAAKL,OACd+4C,EAAkB14C,KAAK04C,gBACvBpgC,EAASqb,EAAUrb,OACnBC,EAAUob,EAAUpb,QAGpB67C,EAAWp0D,KAAKq0D,cAClBr0D,KAAKgwD,4BAA4Br8B,EAAU9b,UAAWinB,EAAAgE,KAAKU,KAAI,GAC/DxjC,KAAKstD,aAGP,IACGttD,KAAK6iC,QAAQ2pB,eACdxsD,KAAK04C,gBAAgBnsB,MAAMvB,EAAA3oB,YAAY8kC,QAAUnc,EAAA3oB,YAAY0yD,iBAC7D,CAEA,IAAIC,EAAkBh1D,KAAKwwD,wBAAwB4D,GACnD,GACEp1B,EAAApb,gBAAgBoxC,IAAoBh2B,EAAAt4B,aAAaya,OACjD6d,EAAAnb,kBAAkBmxC,IAAoBh2B,EAAAv4B,WAAW4a,IAEjD,OAAO2d,EAAAlb,iBAAiBkxC,GACpBh1D,KAAK0vD,iBAAiBp3C,GACtBC,EACEvY,KAAK0vD,iBAAiBn3C,GACtB5Y,EAAO8Y,YAIb27C,EAAWp0D,KAAKq0D,cACdr0D,KAAKgwD,4BAA4Br8B,EAAU9b,UAAWinB,EAAAgE,KAAKU,KAAI,GAC/DxjC,KAAKstD,aAMX,IAAI3U,EAAaD,EAAgB/J,KAC7BsmB,EAAatc,EAAWO,OAC5BR,EAAgB/J,KAAOsmB,EACvB,IAAIC,EAAal1D,KAAK0vD,iBAAiBp3C,GACvCogC,EAAgB/J,KAAOsmB,EAAW5b,OAElC,IAAI8b,EAA6B,EACjC,GAAI58C,EAAS,CACX,IAAI68C,EAAczc,EAAWO,OAC7BR,EAAgB/J,KAAOymB,EACvBD,EAAcn1D,KAAK0vD,iBAAiBn3C,GACpCmgC,EAAgB/J,KAAOymB,EAAY/b,OACnCV,EAAW+B,cAAcua,EAAYG,QAErCzc,EAAW8B,mBAAmBwa,GAEhC,OAAOt1D,EAAO0Y,SAAS+7C,EAAUc,EAAYC,IAG/ChI,EAAAlrD,UAAAwxD,uBAAA,SAAuB9/B,GACrB,IAAIh0B,EAASK,KAAKL,OACd+4C,EAAkB14C,KAAK04C,gBACvBjkC,EAAsB,EACtBk6B,EAAO+J,EAAgB/J,KAK3B,GAFAA,EAAKniB,IAAG,GAEJmH,EAAUryB,MAAO,CACnB,IAAIiY,EAAao1B,EAAKp1B,WACtB,GAAIA,GAAculB,EAAAgE,KAAKa,KAOrB,OANA3jC,KAAKgwD,4BAA4Br8B,EAAUryB,MAAOiY,EAAU,GAC5DvZ,KAAKwG,MACHq4B,EAAA96B,eAAeksD,mCACft8B,EAAUryB,MAAM+C,MAAOrE,KAAKstD,YAAYxoD,WAAYyU,EAAWzU,YAEjE9E,KAAKstD,YAAcxuB,EAAAgE,KAAKa,KACjBhkC,EAAOma,oBAEhBrF,EAAOzU,KAAKuwD,kBACV58B,EAAUryB,MACViY,EAAU,EAEVm/B,EAAgBrsB,GAAGrB,EAAA3oB,YAAYmmC,eAC5B,EACA,GAIAmG,EAAKqM,YAAYvmC,EAAM8E,IAAao1B,EAAKniB,IAAG,GAInD,OAAIuS,EAAA1D,gBAAgB1H,GAAmBlf,GAAc9U,EAAO8Y,YAGrDk2B,EAAKtiB,GAAE,MACV1sB,EAAOiY,YAAYlU,OAAOirC,EAAKmK,aAAc,EAAGrkC,GAChD9U,EAAOgZ,aAAalE,IAG1B04C,EAAAlrD,UAAAyxD,uBAAA,SAAuB//B,GACrB,IAAIh0B,EAASK,KAAKL,OACd+4C,EAAkB14C,KAAK04C,gBAEvB7hB,EAAQlD,EAAUkD,MAClBw+B,EAAWx+B,EAAMtxB,OACrB,IAAK8vD,EACH,OAAOr1D,KAAKuwD,kBAAkB58B,EAAU9b,UAAWinB,EAAAgE,KAAKa,KAAI,KAI9D,IAAI2xB,EAAU5c,EAAgBrD,oBAC1BsD,EAAaD,EAAgB/J,KAG7B4mB,EAAY7c,EAAgB7D,aAAa/V,EAAAgE,KAAKO,KAAK,GACnDmyB,EAAiBD,EAAUngD,MAG3BqgD,EAAS,IAAIrvD,MAAqB,EAAIivD,GAC1CI,EAAO,GAAK91D,EAAOwX,eACjBq+C,EACAx1D,KAAKuwD,kBAAkB58B,EAAU9b,UAAWinB,EAAAgE,KAAKO,IAAG,MAMtD,IAFA,IAAIqyB,EAAa,EACbC,GAAgB,EACXt1D,EAAI,EAAGA,EAAIg1D,IAAYh1D,EAAG,CACjC,IACImX,EADQqf,EAAMx2B,GACAmX,MACdA,EACFi+C,EAAOC,KAAgB/1D,EAAOiY,YAAY,OAASvX,EAAEyE,SAAS,IAAM,IAAMwwD,EACxE31D,EAAOgV,aAAaqqB,EAAA5yB,SAAS+uC,MAC3Bx7C,EAAOwV,eAAeqgD,EAAgBx2B,EAAAv4B,WAAW4a,KACjDrhB,KAAKuwD,kBAAkB/4C,EAAOsnB,EAAAgE,KAAKO,IAAG,OAI1CsyB,EAAet1D,EAInBq4C,EAAgBvD,cAAcogB,GAG9BE,EAAOC,GAAc/1D,EAAOiY,aAAa+9C,GAAgB,EACnD,OAASA,EAAa7wD,SAAS,IAC/B,SACA,IAAMwwD,GAGZ,IAAIM,EAAej2D,EAAO4X,YAAY,SAAW+9C,EAASG,EAAQz2B,EAAAv4B,WAAWiR,MACzEm+C,GAAgB,EAChBC,GAAuB,EACvBC,GAAe,EACfC,GAAkB,EACtB,IAAS31D,EAAI,EAAGA,EAAIg1D,IAAYh1D,EAAG,CACjC,IACIwyB,EADQgE,EAAMx2B,GACKwyB,WACnBmhC,EAAgBnhC,EAAWttB,OAG3BopC,EAAOgK,EAAWO,OACtBR,EAAgB/J,KAAOA,EACvB,IAAIkK,EAAa,SAAWyc,EAC5B3mB,EAAKkK,WAAaA,EAElB,IAAIod,EAAS51D,GAAKg1D,EAAW,EACzBa,EAAYD,EAASpd,EAAa,QAAUx4C,EAAI,GAAGyE,SAAS,IAAM,IAAMwwD,EACxE9D,EAAQ,IAAIprD,MAAqB,EAAI4tD,GACzCxC,EAAM,GAAKoE,EAGX,IAFA,IAAIO,EAAQ,EACR7B,GAAa,EACRnwB,EAAI,EAAGA,EAAI6vB,IAAiB7vB,EAAG,CACtC,IAAIrW,EAAO9tB,KAAK0vD,iBAAiB78B,EAAWsR,IAC5C,GAAInF,EAAApb,gBAAgBkK,IAASkR,EAAAt4B,aAAautD,MACxCzC,EAAM2E,KAAWroC,EACb6gB,EAAKpiB,MAAK,KAA6B,CACzC+nC,GAAa,EACb,OAIN9C,EAAMjsD,OAAS4wD,GACX7B,GAAc2B,KACXtnB,EAAKtiB,GAAE,KAAqBwpC,GAAgB,GAC5ClnB,EAAKtiB,GAAE,KAA6BypC,GAAuB,GAC3DnnB,EAAKtiB,GAAE,KAAoB0pC,GAAe,GAC1CpnB,EAAKtiB,GAAE,MAAuB2pC,GAAkB,IAIvDrnB,EAAKsK,MACH,KAGFP,EAAgB/J,KAAOA,EAAK0K,OAC5Buc,EAAej2D,EAAO4X,YAAY2+C,EAAW1E,EAAOxyB,EAAAv4B,WAAWiR,MAWjE,OATAghC,EAAgBnD,oBAGZogB,GAAgB,IACdE,GAAeld,EAAWnsB,IAAG,GAC7BspC,GAAsBnd,EAAWnsB,IAAG,GACpCupC,GAAcpd,EAAWnsB,IAAG,GAC5BwpC,GAAiBrd,EAAWnsB,IAAG,KAE9BopC,GAGTzI,EAAAlrD,UAAA0xD,sBAAA,SAAsBhgC,GACpB,IAAIgb,EAAO3uC,KAAK04C,gBAAgB/J,KAShC,OANAA,EAAKniB,IAAG,GAGRmiB,EAAKniB,IAAG,GAGD4/B,EAAAgK,aAAoBp2D,KAAM,KAAM2zB,IAGzCw5B,EAAAlrD,UAAA2xD,oBAAA,SAAoBjgC,GAQlB,OAJA3zB,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACfpW,EAAUtvB,OAELrE,KAAKL,OAAOma,qBAOrBqzC,EAAAlrD,UAAAstD,yBAAA,SAAyB57B,EAA8B0iC,QAAA,IAAAA,OAAA,GACrD,IAAI9lB,EAAUvwC,KAAKuwC,QACfmI,EAAkB14C,KAAK04C,gBACvBnjB,EAAe5B,EAAU4B,aACzB+gC,EAAkB/gC,EAAahwB,OAGnC,GAAI8wD,GACF3d,GAAmB14C,KAAKkuD,uBACxBv6B,EAAUzH,QAAUyH,EAAUzH,OAAOZ,MAAQyT,EAAA3T,SAASwQ,OACrD,CAMD,IAAK,IAAIv7B,EAAI,EAAGA,EAAIi2D,IAAmBj2D,EACrCL,KAAK2vD,yBAAyBp6B,EAAal1B,IAE7C,OAAO,EAIT,IAAIk2D,EAAe,IAAInwD,MACnBuoC,EAAO3uC,KAAK04C,gBAAgB/J,KAChC,IAAStuC,EAAI,EAAGA,EAAIi2D,IAAmBj2D,EAAG,CACxC,IAAIkwB,EAAcgF,EAAal1B,GAC3BO,EAAO2vB,EAAY3vB,KAAKyE,KACxBgQ,EAAoB,KACpBy6C,EAA0B,EAC9B,GAAIv/B,EAAYlb,KAAM,CAKpB,KAJAA,EAAOk7B,EAAQ5D,YACbpc,EAAYlb,KACZs5B,EAAKnC,0BAEI,SACPjc,EAAYrW,cACd41C,EAAW9vD,KAAKuwD,kBACdhgC,EAAYrW,YACZ7E,EAAI,UAKH,KAAIkb,EAAYrW,YAchB,CACLla,KAAKwG,MACHq4B,EAAA96B,eAAegsD,cACfx/B,EAAY3vB,KAAKyD,MAAMkqC,OAEzB,SAbA,GALAuhB,EAAW9vD,KAAKgwD,4BACdz/B,EAAYrW,YACZ4kB,EAAAgE,KAAKa,KAAI,GAGP3jC,KAAKstD,aAAexuB,EAAAgE,KAAKa,KAAM,CACjC3jC,KAAKwG,MACHq4B,EAAA96B,eAAeksD,mCACf1/B,EAAYlsB,MAAOrE,KAAKstD,YAAYxoD,WAAY,UAElD,SAEFuQ,EAAOrV,KAAKstD,YAQd,IAAIkJ,GAAY,EAChB,GAAIjmC,EAAYlE,GAAGrB,EAAA3oB,YAAY6uC,OAC7B,GAAI4e,EAEF,GADAA,EAAW9vD,KAAKwwD,wBAAwBV,GACpC9wB,EAAApb,gBAAgBksC,IAAa9wB,EAAAt4B,aAAaya,MAAO,CACnD,IAAImzB,EAAQ,IAAI+X,EAAA9a,MAAMhB,EAAS3vC,GAAO,EAAGyU,GACzC,OAAQ2pB,EAAAnb,kBAAkBisC,IACxB,KAAK9wB,EAAAv4B,WAAW4a,IACdizB,EAAQA,EAAMzD,yBAAyB7R,EAAAlb,iBAAiBgsC,GAAW,GACnE,MAEF,KAAK9wB,EAAAv4B,WAAW8a,IACd+yB,EAAQA,EAAMzD,yBACZ7R,EAAAjb,oBAAoB+rC,GACpB9wB,EAAAhb,qBAAqB8rC,IAEvB,MAEF,KAAK9wB,EAAAv4B,WAAWib,IACd4yB,EAAQA,EAAMlD,uBAA4BpS,EAAA/a,iBAAiB6rC,IAC3D,MAEF,KAAK9wB,EAAAv4B,WAAWmb,IACd0yB,EAAQA,EAAMlD,uBAAuBpS,EAAA9a,iBAAiB4rC,IACtD,MAEF,QAEE,OADApsD,QAAO,GACA1D,KAAKL,OAAOma,oBAIvB,IAAI2+B,EAAeC,EAAgB/J,KAAK8J,aACxC,GAAKA,GACA,GAAIA,EAAa3R,IAAIlmC,GAKxB,OAJAZ,KAAKwG,MACHq4B,EAAA96B,eAAegjC,uBACfxW,EAAY3vB,KAAKyD,MAAOzD,GAEnBZ,KAAKL,OAAOma,yBANF4+B,EAAgB/J,KAAK8J,aAAeA,EAAe,IAAIjX,IAQ1EiX,EAAajsB,IAAI5rB,EAAM0zC,GACvBkiB,GAAY,OAEZx2D,KAAKuG,QACHs4B,EAAA96B,eAAe0sD,4DACflgC,EAAYlsB,YAIhBrE,KAAKwG,MACHq4B,EAAA96B,eAAe0yD,wCACflmC,EAAYlsB,OAIlB,IAAKmyD,EAAW,CACVliB,OAAK,EAKPA,EAHA/jB,EAAYhE,MAAMvB,EAAA3oB,YAAYogD,IAAMz3B,EAAA3oB,YAAY6uC,QAChDvC,EAAKtiB,GAAE,MAECsiB,EAAK6K,eAAenkC,EAAMzU,GAAM,EAAO2vB,GAEvCmoB,EAAgB9D,SAASv/B,EAAMzU,EAAM2vB,GAE3Cu/B,GACFyG,EAAazwD,KAAK9F,KAAK02D,2BAA2BnmC,EAAY3vB,KAAMkvD,IAChExb,EAAMj/B,KAAKgX,GAAG,KAChBsiB,EAAKuG,gBAAgBZ,EAAMl/B,OAAQu5B,EAAKqM,YAAY8U,EAAUz6C,KAEvDi/B,EAAMj/B,KAAKgX,GAAG,KACvBsiB,EAAKuG,gBAAgBZ,EAAMl/B,OAAO,IAIxC,OAAOmhD,EAAahxD,OACO,GAAvBgxD,EAAahxD,OACXgxD,EAAa,GACbv2D,KAAKL,OAAO4X,YAAY,KAAMg/C,EAAcv3B,EAAAv4B,WAAWiR,MACzD,GAGNy1C,EAAAlrD,UAAA4xD,qBAAA,SAAqBlgC,GACnB,OAAO3zB,KAAKuwD,kBAAkB58B,EAAU3b,WAAY8mB,EAAAgE,KAAKa,KAAI,MAG/DwpB,EAAAlrD,UAAA6xD,sBAAA,SAAsBngC,GACpB,IAAIh0B,EAASK,KAAKL,OAGdy0D,EAAWp0D,KAAKq0D,cAClBr0D,KAAKgwD,4BAA4Br8B,EAAU9b,UAAWinB,EAAAgE,KAAKU,KAAI,GAC/DxjC,KAAKstD,aAGP,IACGttD,KAAK6iC,QAAQ2pB,eACdxsD,KAAK04C,gBAAgBnsB,MAAMvB,EAAA3oB,YAAY8kC,QAAUnc,EAAA3oB,YAAY0yD,iBAC7D,CAEA,IAAIC,EAAkBh1D,KAAKwwD,wBAAwB4D,GACnD,GACEp1B,EAAApb,gBAAgBoxC,IAAoBh2B,EAAAt4B,aAAaya,OACjD6d,EAAAnb,kBAAkBmxC,IAAoBh2B,EAAAv4B,WAAW4a,KAEjD,IAAK2d,EAAAlb,iBAAiBkxC,GAAkB,OAAOr1D,EAAO8Y,iBAItD27C,EAAWp0D,KAAKq0D,cACdr0D,KAAKgwD,4BAA4Br8B,EAAU9b,UAAWinB,EAAAgE,KAAKU,KAAI,GAC/DxjC,KAAKstD,aAMX,IAAI5U,EAAkB14C,KAAK04C,gBACvBlhC,EAAQkhC,EAAgBrD,oBACxBsD,EAAaD,EAAgB/J,KAC7BA,EAAOgK,EAAWO,OACtBR,EAAgB/J,KAAOA,EACvB,IAAIkK,EAAa,SAAWrhC,EAC5Bm3B,EAAKkK,WAAaA,EAClB,IAAID,EAAgB,YAAcphC,EAClCm3B,EAAKiK,cAAgBA,EAErB,IAAIzgC,EAAOnY,KAAK0vD,iBAAiB/7B,EAAUA,WAGvC2gC,EAAa3lB,EAAKpiB,MAAK,IA0B3B,OAvBAmsB,EAAgB/J,KAAOA,EAAK0K,OAC5BX,EAAgBnD,oBAChB5G,EAAKsK,MACH,KAMGN,EAAW8B,mBAAmB9L,GAExBhvC,EAAO4X,YAAYshC,GAC5Bl5C,EAAOuY,WAAW0gC,EAChBj5C,EAAO0Y,SAAS+7C,EACdE,EACIn8C,EACAxY,EAAO4X,YAAY,MACjBY,EACAxY,EAAOiY,YAAYghC,IAClB5Z,EAAAv4B,WAAWiR,SAGoBsnB,EAAAv4B,WAAWiR,OAWzDy1C,EAAAlrD,UAAAquD,sBAAA,SACEvgC,EACA4mC,EACAC,GAEAlzD,OAAOqsB,EAAQ1D,GAAGrB,EAAA3oB,YAAY8uC,UAC9B,IAAI97B,EAAO0a,EAAQ1a,KACnB,QACGuhD,GACDvhD,EAAKgX,GAAE,IACPsqC,EAAetqC,GAAE,IACjBhX,EAAKmoC,KAAOmZ,EAAenZ,MACtBx9C,KAAKstD,YAAcqJ,GAAgBrrC,MACnCtrB,KAAKstD,YAAcj4C,GAAMiW,MAE9B,OACA,OACE,IAAIiyB,EAAQloC,EAAKqqC,yBAAyB5gB,EAAAgE,KAAKhiB,KAC/C,OAAO9gB,KAAKL,OAAOgU,UACQ,GAAzBoc,EAAQ6gB,kBACJvzB,QAAQ0S,EAAQihB,uBAAyBuM,GAASA,EAClD,GAGR,OACA,OACA,QACE,IAAIsZ,EAAO9mC,EAAQ1a,KAAKgoC,wBAAwBve,EAAAgE,KAAKhiB,KACrD,OAAO9gB,KAAKL,OAAOgU,UACQ,GAAzBoc,EAAQ6gB,kBACJvzB,QAAQ0S,EAAQihB,sBAAwB6lB,EACxC,GAGR,OACA,OACE,OAAO72D,KAAKL,OAAOgU,UACQ,GAAzBoc,EAAQ6gB,kBACJvzB,QAAQ0S,EAAQihB,sBAChB,GAGR,OACA,OACE,IAAKjhB,EAAQwgB,QAAQ1N,QAAQ2rB,SAC3B,OAAOxuD,KAAKL,OAAOgU,UACQ,GAAzBoc,EAAQ6gB,kBACJvzB,QAAQ0S,EAAQihB,sBAChB,GAKV,OACA,OACE,OAAgC,GAAzBjhB,EAAQ6gB,kBACX5wC,KAAKL,OAAOoU,UACVsJ,QAAQ0S,EAAQihB,sBAChB1zB,SAASyS,EAAQihB,uBAEnBhxC,KAAKL,OAAOoU,UAAU,GAE5B,QACE,IAAMgc,EAAQ1D,GAAGrB,EAAA3oB,YAAY2lC,UAAY2uB,GAAkB73B,EAAAgE,KAAKW,IAC9D,OAAOzjC,KAAKL,OAAO0U,UAAgC0b,EAASshB,oBAG9DrxC,KAAKstD,YAAcxuB,EAAAgE,KAAKW,IAE1B,QACE,OAAOzjC,KAAKL,OAAOwU,UAAgC4b,EAASshB,oBAE9D,QAEE,OADA3tC,QAAO,GACA1D,KAAKL,OAAOma,sBAKzBqzC,EAAAlrD,UAAAsuD,kBAAA,SACEv4C,EACA2+C,EACAG,EACAC,GAIA,IAAItiD,EACJ,OAHAzU,KAAKstD,YAAcqJ,EAGX3+C,EAAWsT,MACjB,KAAKyT,EAAA3T,SAAS+O,UACZ1lB,EAAOzU,KAAKg3D,2BAAgDh/C,EAAY2+C,GACxE,MAEF,KAAK53B,EAAA3T,SAASgP,OACZ3lB,EAAOzU,KAAKi3D,wBAA0Cj/C,EAAY2+C,GAClE,MAEF,KAAK53B,EAAA3T,SAASS,KACZpX,EAAOzU,KAAKk3D,sBAAsCl/C,EAAY2+C,GAC9D,MAEF,KAAK53B,EAAA3T,SAASiP,MACZ5lB,EAAOzU,KAAKm3D,uBAAwCn/C,EAAY2+C,GAChE,MAEF,KAAK53B,EAAA3T,SAASU,cACZrX,EAAOzU,KAAKo3D,+BAAwDp/C,EAAY2+C,GAChF,MAEF,KAAK53B,EAAA3T,SAASoP,SACZ/lB,EAAOzU,KAAKq3D,0BAA8Cr/C,EAAY2+C,GACtE,MAEF,KAAK53B,EAAA3T,SAASQ,WACd,KAAKmT,EAAA3T,SAASM,MACd,KAAKqT,EAAA3T,SAASI,KACd,KAAKuT,EAAA3T,SAAS6P,KACd,KAAK8D,EAAA3T,SAAS4P,MACd,KAAK+D,EAAA3T,SAASK,KACZhX,EAAOzU,KAAKs3D,4BACYt/C,EACtB2+C,EACc,GAAdG,GAEF,MAEF,KAAK/3B,EAAA3T,SAASqP,WACZhmB,EAAOzU,KAAKu3D,4BAAkDv/C,EAAY2+C,GAC1E,MAEF,KAAK53B,EAAA3T,SAASG,QACZ9W,EAAOzU,KAAKw3D,yBAA4Cx/C,EAAY2+C,GACpE,MAEF,KAAK53B,EAAA3T,SAASuP,IACZlmB,EAAOzU,KAAKy3D,qBAAoCz/C,EAAY2+C,GAC5D,MAEF,KAAK53B,EAAA3T,SAASwP,cACZnmB,EAAOzU,KAAK03D,+BAAwD1/C,EAAY2+C,GAChF,MAEF,KAAK53B,EAAA3T,SAASW,eACZtX,EAAOzU,KAAK23D,gCACgB3/C,EAC1B2+C,EACc,GAAdG,GAEF,MAEF,KAAK/3B,EAAA3T,SAAS0P,QACZrmB,EAAOzU,KAAK43D,yBAA4C5/C,EAAY2+C,GACpE,MAEF,KAAK53B,EAAA3T,SAAS+P,aACZ1mB,EAAOzU,KAAK63D,8BAAsD7/C,EAAY2+C,GAC9E,MAEF,KAAK53B,EAAA3T,SAASgQ,YACZ3mB,EAAOzU,KAAK83D,6BAAoD9/C,EAAY2+C,GAC5E,MAEF,QACEjzD,QAAO,GACP+Q,EAAOzU,KAAKL,OAAOma,oBAIvB,IAAIwzC,EAActtD,KAAKstD,YASvB,OARkB,GAAdwJ,GAAyCxJ,GAAeqJ,GAC1DliD,EAAOzU,KAAK+3D,kBAAkBtjD,EAAM64C,EAAaqJ,EAAgBG,EAAgBC,EAAU/+C,GAC3FhY,KAAKstD,YAAcqJ,GACF,GAARI,IACTtiD,EAAOzU,KAAKg4D,uBAAuBvjD,EAAM64C,IAGvCttD,KAAK6iC,QAAQ3iB,WAAWlgB,KAAK+zD,iBAAiBt/C,EAAMuD,EAAW3T,OAC5DoQ,GAGT04C,EAAAlrD,UAAA+tD,4BAAA,SACEh4C,EACA2+C,EACAI,GAEA,OAAO/2D,KAAKuwD,kBACVv4C,EACA2+C,GAAkB73B,EAAAgE,KAAKa,KACnB7E,EAAAgE,KAAKhiB,IACL61C,EAAc,EAElBI,IAIJ5J,EAAAlrD,UAAAg2D,qBAAA,SACEjgD,EACA2+C,EACAG,EACAC,GAEA,OAAO/2D,KAAKwwD,wBACVxwD,KAAKuwD,kBAAkBv4C,EAAY2+C,EAAgBG,EAAgBC,KAIvE5J,EAAAlrD,UAAAuuD,wBAAA,SAAwB/7C,GACtB,IAAI9U,EAASK,KAAKL,OAEduwD,EADOlwD,KAAKstD,YACMtY,eAClBqZ,EAAU1uD,EAAO8a,qBAAqBy1C,EAAY,KAAMz7C,GAC5D9U,EAAOif,WAAY,cAAgByvC,GACnC,IAAIzuC,EAAMof,EAAA7W,gBAAgBkmC,GAE1B,OADA1uD,EAAOib,0BACAgF,GAGTutC,EAAAlrD,UAAA81D,kBAAA,SACEtjD,EACA2pC,EACAnvB,EACA6nC,EACAC,EACA9jB,GAEAvvC,OAAqB,GAAdozD,GACP,IAAIn3D,EAASK,KAAKL,OAGlB,OAAiB,IAAby+C,EAAS9yB,MACX5nB,OAAkB,IAAXurB,EAAO3D,MACdtrB,KAAKwG,MACHq4B,EAAA96B,eAAeksD,mCACfhd,EAAW5uC,MAAO+5C,EAASt5C,WAAYmqB,EAAOnqB,YAEzCnF,EAAOma,qBAID,IAAXmV,EAAO3D,KAA8B3rB,EAAOoY,WAAWtD,IAEtD2pC,EAASnG,eAAehpB,IACT,GAAd6nC,GACF92D,KAAKwG,MACHq4B,EAAA96B,eAAem0D,sDACfjlB,EAAW5uC,MAAO+5C,EAASt5C,WAAYmqB,EAAOnqB,YAKhDs5C,EAAS/xB,GAAE,GAGT4C,EAAO5C,GAAE,GACM,IAAb+xB,EAAS9yB,KAGI,IAAX2D,EAAO3D,OACT7W,EAAO9U,EAAO4U,YAAYyqB,EAAAj2B,QAAQovD,WAAY1jD,IAM5B,IAAXwa,EAAO3D,OAChB7W,EAAO9U,EAAO4U,YAAYyqB,EAAAj2B,QAAQqvD,UAAW3jD,IAMtCwa,EAAO5C,GAAE,GAMZ5X,EAHW,IAAb2pC,EAAS9yB,KACP2D,EAAO5C,GAAE,GACP4C,EAAO5C,GAAE,IACJ1sB,EAAO4U,YAAYyqB,EAAAj2B,QAAQsvD,cAAe5jD,GAE1C9U,EAAO4U,YAAYyqB,EAAAj2B,QAAQuvD,cAAe7jD,GAG/Cwa,EAAO5C,GAAE,IACJ1sB,EAAO4U,YAAYyqB,EAAAj2B,QAAQwvD,cAAe9jD,GAE1C9U,EAAO4U,YAAYyqB,EAAAj2B,QAAQyvD,cAAe/jD,GAMjDwa,EAAO5C,GAAE,GACP4C,EAAO5C,GAAE,IACJ1sB,EAAO4U,YAAYyqB,EAAAj2B,QAAQ0vD,cAAehkD,GAE1C9U,EAAO4U,YAAYyqB,EAAAj2B,QAAQ2vD,cAAejkD,GAG/Cwa,EAAO5C,GAAE,IACJ1sB,EAAO4U,YAAYyqB,EAAAj2B,QAAQ4vD,cAAelkD,GAE1C9U,EAAO4U,YAAYyqB,EAAAj2B,QAAQ6vD,cAAenkD,IAOvD/Q,OAAmB,GAAZurB,EAAO9C,MAAyB,sBACvC1X,EAAO9U,EAAOoY,WAAWtD,IAIlB2pC,EAAS/xB,GAAE,IAAuB4C,EAAO5C,GAAE,GAKhD5X,EAFW,IAAXwa,EAAO3D,KACL8yB,EAAS/xB,GAAE,IACN1sB,EAAO4U,YACZ6pC,EAAS/xB,GAAE,GACP2S,EAAAj2B,QAAQ8vD,gBACR75B,EAAAj2B,QAAQ+vD,gBACZrkD,GAGK9U,EAAO4U,YACZ6pC,EAAS/xB,GAAE,GACP2S,EAAAj2B,QAAQgwD,gBACR/5B,EAAAj2B,QAAQiwD,gBACZvkD,GAMA2pC,EAAS/xB,GAAE,IACN1sB,EAAO4U,YACZ6pC,EAAS/xB,GAAE,GACP2S,EAAAj2B,QAAQkwD,gBACRj6B,EAAAj2B,QAAQmwD,gBACZzkD,GAGK9U,EAAO4U,YACZ6pC,EAAS/xB,GAAE,GACP2S,EAAAj2B,QAAQowD,gBACRn6B,EAAAj2B,QAAQqwD,gBACZ3kD,GAQF2pC,EAAS/xB,GAAE,IAGR4C,EAAO5C,GAAE,MACZ5X,EAAO9U,EAAO4U,YAAYyqB,EAAAj2B,QAAQswD,QAAS5kD,IAIpCwa,EAAO5C,GAAE,KAClB5X,EAAO9U,EAAO4U,YACZ0a,EAAO5C,GAAE,GAAqB2S,EAAAj2B,QAAQuwD,UAAYt6B,EAAAj2B,QAAQwwD,UAC1Dv5D,KAAKg4D,uBAAuBvjD,EAAM2pC,IAEpC2Y,EAAQ,GAKJ3Y,EAAS/xB,GAAE,KAET+xB,EAASZ,KAAOvuB,EAAOuuB,OACzB/oC,EAAOzU,KAAKg4D,uBAAuBvjD,EAAM2pC,GACzC2Y,EAAQ,GAMhB/2D,KAAKstD,YAAcr+B,EACJ,GAAR8nC,EACH/2D,KAAKg4D,uBAAuBvjD,EAAMwa,GAClCxa,IAGN04C,EAAAlrD,UAAA+0D,2BAAA,SAA2Bh/C,EAAiC2+C,GAC1D,IAAI1nC,EAASjvB,KAAKuwC,QAAQ5D,YACxB30B,EAAWiX,OACXjvB,KAAK04C,gBAAgB/J,KAAKnC,yBAE5B,OAAKvd,EACEjvB,KAAKuwD,kBAAkBv4C,EAAWA,WAAYiX,EAAM,KADvCjvB,KAAKL,OAAOma,qBASlCqzC,EAAAlrD,UAAAg1D,wBAAA,SACEj/C,EACA2+C,GAEA,IAII6C,EACAC,EACAC,EACAC,EACAC,EAEAnlD,EAVA9U,EAASK,KAAKL,OACdiV,EAAOoD,EAAWpD,KAClBC,EAAQmD,EAAWnD,MASnBglD,GAAW,EAEXzqC,EAAWpX,EAAWoX,SAC1B,OAAQA,GACN,KAAKnE,EAAAC,MAAMu4B,SAKT,GAJA+V,EAAWx5D,KAAKgwD,4BAA4Bp7C,EAAM+hD,EAAc,GAChE8C,EAAWz5D,KAAKstD,YAGZttD,KAAKstD,YAAYjhC,GAAE,KAAuB,CAE5C,GADI+iB,EAAiBqqB,EAASrqB,eAG5B,GADIiJ,EAAWjJ,EAAeI,eAAe6c,EAAAztB,aAAa6B,IAC5C,CACZhsB,EAAOzU,KAAK85D,sBAAsBzhB,EAAUzjC,EAAM4kD,EAAU3kD,EAAOmD,GACnE,MAOJ,OAJAhY,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAENrE,KAAKL,OAAOma,oBAKrB,GAFA4/C,EAAY15D,KAAKgwD,4BAA4Bn7C,EAAO4kD,EAAQ,GAC5DE,EAAY35D,KAAKstD,cACbsM,EAAa96B,EAAAgE,KAAKkd,iBAAiByZ,EAAUE,GAAW,IAuB1D,OALA35D,KAAKwG,MACHq4B,EAAA96B,eAAeg2D,8CACf/hD,EAAW3T,MAAO,IAAKo1D,EAAS30D,WAAY60D,EAAU70D,YAExD9E,KAAKstD,YAAcqJ,EACZh3D,EAAOma,oBAEhB,OAxBE0/C,EAAWx5D,KAAK+3D,kBACdyB,EACAC,EACAA,EAAWG,EAAU,IAGrBhlD,GAEF8kD,EAAY15D,KAAK+3D,kBACf2B,EACAC,EACAA,EAAYC,EAAU,IAGtB/kD,GAUI+kD,EAAWtuC,MACjB,OACA,OACA,OACE7W,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASuvC,MAAO6d,EAAUE,GACrD,MAEF,OACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASyvC,MAAO2d,EAAUE,GACrD,MAEF,OACEjlD,EAAO9U,EAAOgV,aACZ3U,KAAK6iC,QAAQ2rB,SACTxvB,EAAA5yB,SAASyvC,MACT7c,EAAA5yB,SAASuvC,MACb6d,EACAE,GAEF,MAEF,OACA,OACA,OACA,QACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASwvC,MAAO4d,EAAUE,GACrD,MAEF,OACEjlD,EAAO9U,EAAOgV,aACZ3U,KAAK6iC,QAAQ2rB,SACTxvB,EAAA5yB,SAAS0vC,MACT9c,EAAA5yB,SAASwvC,MACb4d,EACAE,GAEF,MAEF,OACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAAS0vC,MAAO0d,EAAUE,GACrD,MAEF,QACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAAS2vC,MAAOyd,EAAUE,GACrD,MAEF,QACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAAS4vC,MAAOwd,EAAUE,GACrD,MAEF,QACEh2D,QAAO,GACP+Q,EAAO9U,EAAOma,oBAGlB9Z,KAAKstD,YAAcxuB,EAAAgE,KAAKU,KACxB,MAEF,KAAKvY,EAAAC,MAAMw4B,YAKT,GAJA8V,EAAWx5D,KAAKgwD,4BAA4Bp7C,EAAM+hD,EAAc,GAChE8C,EAAWz5D,KAAKstD,YAGZttD,KAAKstD,YAAYjhC,GAAE,KAAuB,CAE5C,GADI+iB,EAAiBqqB,EAASrqB,eAG5B,GADIiJ,EAAWjJ,EAAeI,eAAe6c,EAAAztB,aAAayB,IAC5C,CACZ5rB,EAAOzU,KAAK85D,sBAAsBzhB,EAAUzjC,EAAM4kD,EAAU3kD,EAAOmD,GACnE,MAOJ,OAJAhY,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAENrE,KAAKL,OAAOma,oBAKrB,GAFA4/C,EAAY15D,KAAKgwD,4BAA4Bn7C,EAAO4kD,EAAQ,GAC5DE,EAAY35D,KAAKstD,cACbsM,EAAa96B,EAAAgE,KAAKkd,iBAAiByZ,EAAUE,GAAW,IAuB1D,OALA35D,KAAKwG,MACHq4B,EAAA96B,eAAeg2D,8CACf/hD,EAAW3T,MAAO,IAAKo1D,EAAS30D,WAAY60D,EAAU70D,YAExD9E,KAAKstD,YAAcqJ,EACZh3D,EAAOma,oBAEhB,OAxBE0/C,EAAWx5D,KAAK+3D,kBACdyB,EACAC,EACAA,EAAWG,EAAU,IAGrBhlD,GAEF8kD,EAAY15D,KAAK+3D,kBACf2B,EACAC,EACAA,EAAYC,EAAU,IAGtB/kD,GAUI+kD,EAAWtuC,MACjB,OACA,OACA,OACE7W,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASmwC,MAAOid,EAAUE,GACrD,MAEF,OACEjlD,EAAO9U,EAAOgV,aACZ3U,KAAK6iC,QAAQ2rB,SACTxvB,EAAA5yB,SAASqwC,MACTzd,EAAA5yB,SAASmwC,MACbid,EACAE,GAEF,MAEF,OACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASqwC,MAAO+c,EAAUE,GACrD,MAEF,OACA,OACA,OACA,QACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASowC,MAAOgd,EAAUE,GACrD,MAEF,OACEjlD,EAAO9U,EAAOgV,aACZ3U,KAAK6iC,QAAQ2rB,SACTxvB,EAAA5yB,SAASswC,MACT1d,EAAA5yB,SAASowC,MACbgd,EACAE,GAEF,MAEF,OACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASswC,MAAO8c,EAAUE,GACrD,MAEF,QACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASuwC,MAAO6c,EAAUE,GACrD,MAEF,QACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASwwC,MAAO4c,EAAUE,GACrD,MAEF,QACEh2D,QAAO,GACP+Q,EAAO9U,EAAOma,oBAGlB9Z,KAAKstD,YAAcxuB,EAAAgE,KAAKU,KACxB,MAEF,KAAKvY,EAAAC,MAAMy4B,gBAKT,GAJA6V,EAAWx5D,KAAKgwD,4BAA4Bp7C,EAAM+hD,EAAc,GAChE8C,EAAWz5D,KAAKstD,YAGZttD,KAAKstD,YAAYjhC,GAAE,KAAuB,CAE5C,GADI+iB,EAAiBqqB,EAASrqB,eAG5B,GADIiJ,EAAWjJ,EAAeI,eAAe6c,EAAAztB,aAAa8B,IAC5C,CACZjsB,EAAOzU,KAAK85D,sBAAsBzhB,EAAUzjC,EAAM4kD,EAAU3kD,EAAOmD,GACnE,MAOJ,OAJAhY,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAENrE,KAAKL,OAAOma,oBAKrB,GAFA4/C,EAAY15D,KAAKgwD,4BAA4Bn7C,EAAO4kD,EAAQ,GAC5DE,EAAY35D,KAAKstD,cACbsM,EAAa96B,EAAAgE,KAAKkd,iBAAiByZ,EAAUE,GAAW,IAuB1D,OALA35D,KAAKwG,MACHq4B,EAAA96B,eAAeg2D,8CACf/hD,EAAW3T,MAAO,KAAMo1D,EAAS30D,WAAY60D,EAAU70D,YAEzD9E,KAAKstD,YAAcqJ,EACZh3D,EAAOma,oBAEhB,OAxBE0/C,EAAWx5D,KAAK+3D,kBACdyB,EACAC,EACAA,EAAWG,EAAU,IAGrBhlD,GAEF8kD,EAAY15D,KAAK+3D,kBACf2B,EACAC,EACAA,EAAYC,EAAU,IAGtB/kD,GAUI+kD,EAAWtuC,MACjB,OACA,OACA,OACE7W,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAAS6vC,MAAOud,EAAUE,GACrD,MAEF,OACEjlD,EAAO9U,EAAOgV,aACZ3U,KAAK6iC,QAAQ2rB,SACTxvB,EAAA5yB,SAAS+vC,MACTnd,EAAA5yB,SAAS6vC,MACbud,EACAE,GAEF,MAEF,OACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAAS+vC,MAAOqd,EAAUE,GACrD,MAEF,OACA,OACA,OACA,QACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAAS8vC,MAAOsd,EAAUE,GACrD,MAEF,OACEjlD,EAAO9U,EAAOgV,aACZ3U,KAAK6iC,QAAQ2rB,SACTxvB,EAAA5yB,SAASgwC,MACTpd,EAAA5yB,SAAS8vC,MACbsd,EACAE,GAEF,MAEF,OACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASgwC,MAAOod,EAAUE,GACrD,MAEF,QACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASiwC,MAAOmd,EAAUE,GACrD,MAEF,QACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASkwC,MAAOkd,EAAUE,GACrD,MAEF,QACEh2D,QAAO,GACP+Q,EAAO9U,EAAOma,oBAGlB9Z,KAAKstD,YAAcxuB,EAAAgE,KAAKU,KACxB,MAEF,KAAKvY,EAAAC,MAAM04B,mBAKT,GAJA4V,EAAWx5D,KAAKgwD,4BAA4Bp7C,EAAM+hD,EAAc,GAChE8C,EAAWz5D,KAAKstD,YAGZttD,KAAKstD,YAAYjhC,GAAE,KAAuB,CAE5C,GADI+iB,EAAiBqqB,EAASrqB,eAG5B,GADIiJ,EAAWjJ,EAAeI,eAAe6c,EAAAztB,aAAa0B,IAC5C,CACZ7rB,EAAOzU,KAAK85D,sBAAsBzhB,EAAUzjC,EAAM4kD,EAAU3kD,EAAOmD,GACnE,MAOJ,OAJAhY,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAENrE,KAAKL,OAAOma,oBAKrB,GAFA4/C,EAAY15D,KAAKgwD,4BAA4Bn7C,EAAO4kD,EAAQ,GAC5DE,EAAY35D,KAAKstD,cACbsM,EAAa96B,EAAAgE,KAAKkd,iBAAiByZ,EAAUE,GAAW,IAuB1D,OALA35D,KAAKwG,MACHq4B,EAAA96B,eAAeg2D,8CACf/hD,EAAW3T,MAAO,KAAMo1D,EAAS30D,WAAY60D,EAAU70D,YAEzD9E,KAAKstD,YAAcqJ,EACZh3D,EAAOma,oBAEhB,OAxBE0/C,EAAWx5D,KAAK+3D,kBACdyB,EACAC,EACAA,EAAWG,EAAU,IAGrBhlD,GAEF8kD,EAAY15D,KAAK+3D,kBACf2B,EACAC,EACAA,EAAYC,EAAU,IAGtB/kD,GAUI+kD,EAAWtuC,MACjB,OACA,OACA,OACE7W,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASywC,MAAO2c,EAAUE,GACrD,MAEF,OACEjlD,EAAO9U,EAAOgV,aACZ3U,KAAK6iC,QAAQ2rB,SACTxvB,EAAA5yB,SAAS2wC,MACT/d,EAAA5yB,SAASywC,MACb2c,EACAE,GAEF,MAEF,OACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAAS2wC,MAAOyc,EAAUE,GACrD,MAEF,OACA,OACA,OACA,QACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAAS0wC,MAAO0c,EAAUE,GACrD,MAEF,OACEjlD,EAAO9U,EAAOgV,aACZ3U,KAAK6iC,QAAQ2rB,SACTxvB,EAAA5yB,SAAS4wC,MACThe,EAAA5yB,SAAS0wC,MACb0c,EACAE,GAEF,MAEF,OACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAAS4wC,MAAOwc,EAAUE,GACrD,MAEF,QACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAAS6wC,MAAOuc,EAAUE,GACrD,MAEF,QACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAAS8wC,MAAOsc,EAAUE,GACrD,MAEF,QACEh2D,QAAO,GACP+Q,EAAO9U,EAAOma,oBAGlB9Z,KAAKstD,YAAcxuB,EAAAgE,KAAKU,KACxB,MAGF,KAAKvY,EAAAC,MAAM64B,qBACX,KAAK94B,EAAAC,MAAM24B,cAUT,GAJA2V,EAAWx5D,KAAKgwD,4BAA4Bp7C,EAAM+hD,EAAc,GAChE8C,EAAWz5D,KAAKstD,YAGZl+B,GAAYnE,EAAAC,MAAM24B,eAAiB7jD,KAAKstD,YAAYjhC,GAAE,KAExD,GADI+iB,EAAiBqqB,EAASrqB,eAG5B,GADIiJ,EAAWjJ,EAAeI,eAAe6c,EAAAztB,aAAauB,IAC5C,CACZ1rB,EAAOzU,KAAK85D,sBAAsBzhB,EAAUzjC,EAAM4kD,EAAU3kD,EAAOmD,GACnE,MAQN,GAFA0hD,EAAY15D,KAAKgwD,4BAA4Bn7C,EAAO4kD,EAAQ,GAC5DE,EAAY35D,KAAKstD,cACbsM,EAAa96B,EAAAgE,KAAKkd,iBAAiByZ,EAAUE,GAAW,IAuB1D,OALA35D,KAAKwG,MACHq4B,EAAA96B,eAAeg2D,8CACf/hD,EAAW3T,MAAO4mB,EAAAs4B,sBAAsBvrC,EAAWoX,UAAWqqC,EAAS30D,WAAY60D,EAAU70D,YAE/F9E,KAAKstD,YAAcqJ,EACZh3D,EAAOma,oBAEhB,OAxBE0/C,EAAWx5D,KAAK+3D,kBACdyB,EACAC,EACAA,EAAWG,EAAU,IAGrBhlD,GAEF8kD,EAAY15D,KAAK+3D,kBACf2B,EACAC,EACAA,EAAYC,EAAU,IAGtB/kD,GAUI+kD,EAAWtuC,MACjB,OACA,OACA,OACA,OACA,OACA,OACA,QACE7W,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAAS+uC,MAAOqe,EAAUE,GACrD,MAEF,OACA,OACEjlD,EAAO9U,EAAOgV,aACZ3U,KAAK6iC,QAAQ2rB,SACTxvB,EAAA5yB,SAASgvC,MACTpc,EAAA5yB,SAAS+uC,MACbqe,EACAE,GAEF,MAEF,OACA,OACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASgvC,MAAOoe,EAAUE,GACrD,MAEF,QACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASivC,MAAOme,EAAUE,GACrD,MAEF,QACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASkvC,MAAOke,EAAUE,GACrD,MAEF,QACEh2D,QAAO,GACP+Q,EAAO9U,EAAOma,oBAGlB9Z,KAAKstD,YAAcxuB,EAAAgE,KAAKU,KACxB,MAEF,KAAKvY,EAAAC,MAAM84B,0BACX,KAAK/4B,EAAAC,MAAM44B,mBAKT,GAJA0V,EAAWx5D,KAAKgwD,4BAA4Bp7C,EAAM+hD,EAAc,GAChE8C,EAAWz5D,KAAKstD,YAGZl+B,GAAYnE,EAAAC,MAAM44B,oBAAsB9jD,KAAKstD,YAAYjhC,GAAE,KAE7D,GADI+iB,EAAiBqqB,EAASrqB,eAG5B,GADIiJ,EAAWjJ,EAAeI,eAAe6c,EAAAztB,aAAawB,IAC5C,CACZ3rB,EAAOzU,KAAK85D,sBAAsBzhB,EAAUzjC,EAAM4kD,EAAU3kD,EAAOmD,GACnE,MAQN,GAFA0hD,EAAY15D,KAAKgwD,4BAA4Bn7C,EAAO4kD,EAAQ,GAC5DE,EAAY35D,KAAKstD,cACbsM,EAAa96B,EAAAgE,KAAKkd,iBAAiByZ,EAAUE,GAAW,IAuB1D,OALA35D,KAAKwG,MACHq4B,EAAA96B,eAAeg2D,8CACf/hD,EAAW3T,MAAO4mB,EAAAs4B,sBAAsBvrC,EAAWoX,UAAWqqC,EAAS30D,WAAY60D,EAAU70D,YAE/F9E,KAAKstD,YAAcqJ,EACZh3D,EAAOma,oBAEhB,OAxBE0/C,EAAWx5D,KAAK+3D,kBACdyB,EACAC,EACAA,EAAWG,EAAU,IAGrBhlD,GAEF8kD,EAAY15D,KAAK+3D,kBACf2B,EACAC,EACAA,EAAYC,EAAU,IAGtB/kD,GAUI+kD,EAAWtuC,MACjB,OACA,OACA,OACA,OACA,OACA,OACA,QACE7W,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASmvC,MAAOie,EAAUE,GACrD,MAEF,OACA,OACEjlD,EAAO9U,EAAOgV,aACZ3U,KAAK6iC,QAAQ2rB,SACTxvB,EAAA5yB,SAASovC,MACTxc,EAAA5yB,SAASmvC,MACbie,EACAE,GAEF,MAEF,OACA,OACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASovC,MAAOge,EAAUE,GACrD,MAEF,QACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASqvC,MAAO+d,EAAUE,GACrD,MAEF,QACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASsvC,MAAO8d,EAAUE,GACrD,MAEF,QACEh2D,QAAO,GACP+Q,EAAO9U,EAAOma,oBAGlB9Z,KAAKstD,YAAcxuB,EAAAgE,KAAKU,KACxB,MAEF,KAAKvY,EAAAC,MAAM+5B,OACT,OAAOjlD,KAAKg6D,kBAAkBplD,EAAMC,EAAO8hD,GAE7C,KAAK1rC,EAAAC,MAAMg6B,YAAa2U,GAAW,EACnC,KAAK5uC,EAAAC,MAAM0V,KAKT,GAJA44B,EAAWx5D,KAAKgwD,4BAA4Bp7C,EAAM+hD,EAAc,GAChE8C,EAAWz5D,KAAKstD,YAGZttD,KAAKstD,YAAYjhC,GAAE,KAAuB,CAE5C,GADI+iB,EAAiBqqB,EAASrqB,eAG5B,GADIiJ,EAAWjJ,EAAeI,eAAe6c,EAAAztB,aAAac,KAC5C,CACZjrB,EAAOzU,KAAK85D,sBAAsBzhB,EAAUzjC,EAAM4kD,EAAU3kD,EAAOmD,GACnE,MAOJ,OAJAhY,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAENrE,KAAKL,OAAOma,oBAGrB,GAAI+/C,EACFH,EAAY15D,KAAKuwD,kBAAkB17C,EAAO4kD,EAAQ,SAC7C,CAGL,GAFAC,EAAY15D,KAAKgwD,4BAA4Bn7C,EAAO4kD,EAAQ,GAC5DE,EAAY35D,KAAKstD,cACbsM,EAAa96B,EAAAgE,KAAKkd,iBAAiByZ,EAAUE,GAAW,IAuB1D,OALA35D,KAAKwG,MACHq4B,EAAA96B,eAAeg2D,8CACf/hD,EAAW3T,MAAO,IAAKo1D,EAAS30D,WAAY60D,EAAU70D,YAExD9E,KAAKstD,YAAcqJ,EACZh3D,EAAOma,oBAtBd0/C,EAAWx5D,KAAK+3D,kBACdyB,EACAC,EACAA,EAAWG,EAAU,IAGrBhlD,GAEF8kD,EAAY15D,KAAK+3D,kBACf2B,EACAC,EACAA,EAAYC,EAAU,IAGtB/kD,GAWN,OAAQ7U,KAAKstD,YAAYhiC,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACE7W,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAAS4kD,OAAQwI,EAAUE,GACtD,MAEF,OACA,OACEjlD,EAAO9U,EAAOgV,aACZ3U,KAAK6iC,QAAQ2rB,SACTxvB,EAAA5yB,SAAS6tD,OACTj7B,EAAA5yB,SAAS4kD,OACbwI,EACAE,GAEF,MAEF,OACA,OACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAAS6tD,OAAQT,EAAUE,GACtD,MAEF,QACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAAS8tD,OAAQV,EAAUE,GACtD,MAEF,QACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAAS+tD,OAAQX,EAAUE,GACtD,MAEF,QACEh2D,QAAO,GACP+Q,EAAO9U,EAAOma,oBAGlB,MAEF,KAAKmR,EAAAC,MAAMi6B,aAAc0U,GAAW,EACpC,KAAK5uC,EAAAC,MAAM4V,MAKT,GAJA04B,EAAWx5D,KAAKgwD,4BAA4Bp7C,EAAM+hD,EAAc,GAChE8C,EAAWz5D,KAAKstD,YAGZttD,KAAKstD,YAAYjhC,GAAE,KAAuB,CAE5C,GADI+iB,EAAiBqqB,EAASrqB,eAG5B,GADIiJ,EAAWjJ,EAAeI,eAAe6c,EAAAztB,aAAae,KAC5C,CACZlrB,EAAOzU,KAAK85D,sBAAsBzhB,EAAUzjC,EAAM4kD,EAAU3kD,EAAOmD,GACnE,MAOJ,OAJAhY,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAENrE,KAAKL,OAAOma,oBAGrB,GAAI+/C,EACFH,EAAY15D,KAAKuwD,kBAAkB17C,EAAO4kD,EAAQ,KAClDE,EAAY35D,KAAKstD,gBACZ,CAGL,GAFAoM,EAAY15D,KAAKgwD,4BAA4Bn7C,EAAO4kD,EAAQ,GAC5DE,EAAY35D,KAAKstD,cACbsM,EAAa96B,EAAAgE,KAAKkd,iBAAiByZ,EAAUE,GAAW,IAuB1D,OALA35D,KAAKwG,MACHq4B,EAAA96B,eAAeg2D,8CACf/hD,EAAW3T,MAAO,IAAKo1D,EAAS30D,WAAY60D,EAAU70D,YAExD9E,KAAKstD,YAAcqJ,EACZh3D,EAAOma,oBAtBd0/C,EAAWx5D,KAAK+3D,kBACdyB,EACAC,EACAA,EAAWG,EAAU,IAGrBhlD,GAEF8kD,EAAY15D,KAAK+3D,kBACf2B,EACAC,EACAA,EAAYC,EAAU,IAGtB/kD,GAWN,OAAQ7U,KAAKstD,YAAYhiC,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACE7W,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASguD,OAAQZ,EAAUE,GACtD,MAEF,OACA,OACEjlD,EAAO9U,EAAOgV,aACZ3U,KAAK6iC,QAAQ2rB,SACTxvB,EAAA5yB,SAASiuD,OACTr7B,EAAA5yB,SAASguD,OACbZ,EACAE,GAEF,MAEF,OACA,OACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASiuD,OAAQb,EAAUE,GACtD,MAEF,QACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASkuD,OAAQd,EAAUE,GACtD,MAEF,QACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASmuD,OAAQf,EAAUE,GACtD,MAEF,QACEh2D,QAAO,GACP+Q,EAAO9U,EAAOma,oBAGlB,MAEF,KAAKmR,EAAAC,MAAMk6B,gBAAiByU,GAAW,EACvC,KAAK5uC,EAAAC,MAAMg5B,SAKT,GAJAsV,EAAWx5D,KAAKgwD,4BAA4Bp7C,EAAM+hD,EAAc,GAChE8C,EAAWz5D,KAAKstD,YAGZttD,KAAKstD,YAAYjhC,GAAE,KAAuB,CAE5C,GADI+iB,EAAiBqqB,EAASrqB,eAG5B,GADIiJ,EAAWjJ,EAAeI,eAAe6c,EAAAztB,aAAagB,KAC5C,CACZnrB,EAAOzU,KAAK85D,sBAAsBzhB,EAAUzjC,EAAM4kD,EAAU3kD,EAAOmD,GACnE,MAOJ,OAJAhY,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAENrE,KAAKL,OAAOma,oBAGrB,GAAI+/C,EACFL,EAAWx5D,KAAKg4D,uBAAuBwB,EAAUC,GACjDC,EAAY15D,KAAKuwD,kBAAkB17C,EAAO4kD,EAAQ,SAC7C,CAGL,GAFAC,EAAY15D,KAAKgwD,4BAA4Bn7C,EAAO4kD,EAAQ,GAC5DE,EAAY35D,KAAKstD,cACbsM,EAAa96B,EAAAgE,KAAKkd,iBAAiByZ,EAAUE,GAAW,IAuB1D,OALA35D,KAAKwG,MACHq4B,EAAA96B,eAAeg2D,8CACf/hD,EAAW3T,MAAO,IAAKo1D,EAAS30D,WAAY60D,EAAU70D,YAExD9E,KAAKstD,YAAcqJ,EACZh3D,EAAOma,oBAtBd0/C,EAAWx5D,KAAK+3D,kBACdyB,EACAC,EACAA,EAAWG,EAAU,IAGrBhlD,GAEF8kD,EAAY15D,KAAK+3D,kBACf2B,EACAC,EACAA,EAAYC,EAAU,IAGtB/kD,GAWN,OAAQ7U,KAAKstD,YAAYhiC,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACE7W,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAAS+wC,OAAQqc,EAAUE,GACtD,MAEF,OACA,OACEjlD,EAAO9U,EAAOgV,aACZ3U,KAAK6iC,QAAQ2rB,SACTxvB,EAAA5yB,SAASouD,OACTx7B,EAAA5yB,SAAS+wC,OACbqc,EACAE,GAEF,MAEF,OACA,OACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASouD,OAAQhB,EAAUE,GACtD,MAEF,QACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASquD,OAAQjB,EAAUE,GACtD,MAEF,QACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASsuD,OAAQlB,EAAUE,GACtD,MAEF,QACEh2D,QAAO,GACP+Q,EAAO9U,EAAOma,oBAGlB,MAEF,KAAKmR,EAAAC,MAAMm6B,yBAA0BwU,GAAW,EAChD,KAAK5uC,EAAAC,MAAM+4B,kBAKT,GAJAuV,EAAWx5D,KAAKgwD,4BAA4Bp7C,EAAM+hD,EAAc,GAChE8C,EAAWz5D,KAAKstD,YAGZttD,KAAKstD,YAAYjhC,GAAE,KAAuB,CAE5C,GADI+iB,EAAiBqqB,EAASrqB,eAG5B,GADIiJ,EAAWjJ,EAAeI,eAAe6c,EAAAztB,aAAaiB,KAC5C,CACZprB,EAAOzU,KAAK85D,sBAAsBzhB,EAAUzjC,EAAM4kD,EAAU3kD,EAAOmD,GACnE,MAOJ,OAJAhY,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAENrE,KAAKL,OAAOma,oBAGrB,IAAI6zB,OAAQ,EAGZ,GAAyB,IAArB3tC,KAAKstD,YAAYhiC,MAGnB,GAFAouC,EAAY15D,KAAKuwD,kBAAkB17C,EAAOiqB,EAAAgE,KAAKW,IAAG,KAClDk2B,EAAY35D,KAAKstD,cACX3f,EAAW3tC,KAAK8tD,gBAAiB,CAErC,KADI5lB,EAAYloC,KAAKuwC,QAAQ5O,eAAezgC,IAAI,UAChC,CACdlB,KAAKwG,MACHq4B,EAAA96B,eAAe+hC,mBACf9tB,EAAW3T,MAAO,SAEpBoQ,EAAO9U,EAAOma,oBACd,MAGF,KADI7X,EAAYimC,EAAU7U,QAAU6U,EAAU7U,QAAQnyB,IAAI,OAAS,MACnD,CACdlB,KAAKwG,MACHq4B,EAAA96B,eAAe+hC,mBACf9tB,EAAW3T,MAAO,aAEpBoQ,EAAO9U,EAAOma,oBACd,MAEFpW,OAAOzB,EAAUqpB,MAAQ+gC,EAAAhrB,YAAY4F,oBACrCjnC,KAAK8tD,eAAiBngB,EAA+B1rC,EAAW4kC,gBAsBlE,GAhBA2yB,EAAWx5D,KAAK+3D,kBACdyB,EACAx5D,KAAKstD,YACLxuB,EAAAgE,KAAKY,IAAG,IAGR9uB,GAEF6kD,EAAWz5D,KAAKstD,YAChBoM,EAAY15D,KAAKuwD,kBACf17C,EACAiqB,EAAAgE,KAAKY,IAAG,KAIVi2B,EAAY35D,KAAKstD,cACX3f,EAAW3tC,KAAK+tD,gBAAiB,CAErC,KADI7lB,EAAYloC,KAAKuwC,QAAQ5O,eAAezgC,IAAI,SAChC,CACdlB,KAAKwG,MACHq4B,EAAA96B,eAAe+hC,mBACf9tB,EAAW3T,MAAO,QAEpBoQ,EAAO9U,EAAOma,oBACd,MAGF,KADI7X,EAAYimC,EAAU7U,QAAU6U,EAAU7U,QAAQnyB,IAAI,OAAS,MACnD,CACdlB,KAAKwG,MACHq4B,EAAA96B,eAAe+hC,mBACf9tB,EAAW3T,MAAO,YAEpBoQ,EAAO9U,EAAOma,oBACd,MAEFpW,OAAOzB,EAAUqpB,MAAQ+gC,EAAAhrB,YAAY4F,oBACrCjnC,KAAK+tD,eAAiBpgB,EAA+B1rC,EAAW4kC,UAMlEpyB,EAHIk5B,GAAY3tC,KAAKmxD,gBAAgBxjB,GAG9B3tC,KAAK26D,eAAehtB,GAAY6rB,EAAUE,IAF1C/5D,EAAOma,oBAIhB,MAEF,KAAKmR,EAAAC,MAAMo6B,aAAcuU,GAAW,EACpC,KAAK5uC,EAAAC,MAAMi5B,MAKT,GAJAqV,EAAWx5D,KAAKgwD,4BAA4Bp7C,EAAM+hD,EAAc,GAChE8C,EAAWz5D,KAAKstD,YAGZttD,KAAKstD,YAAYjhC,GAAE,KAAuB,CAE5C,GADI+iB,EAAiBqqB,EAASrqB,eAG5B,GADIiJ,EAAWjJ,EAAeI,eAAe6c,EAAAztB,aAAakB,KAC5C,CACZrrB,EAAOzU,KAAK85D,sBAAsBzhB,EAAUzjC,EAAM4kD,EAAU3kD,EAAOmD,GACnE,MAOJ,OAJAhY,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAENrE,KAAKL,OAAOma,oBAGrB,GAAI+/C,EACFL,EAAWx5D,KAAKg4D,uBAAuBwB,EAAUC,GACjDC,EAAY15D,KAAKuwD,kBAAkB17C,EAAO4kD,EAAQ,KAClDE,EAAY35D,KAAKstD,gBACZ,CAGL,GAFAoM,EAAY15D,KAAKgwD,4BAA4Bn7C,EAAO4kD,EAAQ,GAC5DE,EAAY35D,KAAKstD,cACbsM,EAAa96B,EAAAgE,KAAKkd,iBAAiByZ,EAAUE,GAAW,IAuB1D,OALA35D,KAAKwG,MACHq4B,EAAA96B,eAAeg2D,8CACf/hD,EAAW3T,MAAO,IAAKo1D,EAAS30D,WAAY60D,EAAU70D,YAExD9E,KAAKstD,YAAcqJ,EACZh3D,EAAOma,oBAtBd0/C,EAAWx5D,KAAK+3D,kBACdyB,EACAC,EACAA,EAAWG,EAAU,IAGrBhlD,GAEF8kD,EAAY15D,KAAK+3D,kBACf2B,EACAC,EACAA,EAAYC,EAAU,IAGtB/kD,GAWN,OAAQ7U,KAAKstD,YAAYhiC,MACvB,OACA,OACA,OACE7W,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASwuD,OAAQpB,EAAUE,GACtD,MAEF,OACEjlD,EAAO9U,EAAOgV,aACZ3U,KAAK6iC,QAAQ2rB,SACTxvB,EAAA5yB,SAASyuD,OACT77B,EAAA5yB,SAASwuD,OACbpB,EACAE,GAEF,MAEF,OACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASyuD,OAAQrB,EAAUE,GACtD,MAEF,OACA,OACA,QAIA,OACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASuxC,OAAQ6b,EAAUE,GACtD,MAEF,OACEjlD,EAAO9U,EAAOgV,aACZ3U,KAAK6iC,QAAQ2rB,SACTxvB,EAAA5yB,SAAS0uD,OACT97B,EAAA5yB,SAASuxC,OACb6b,EACAE,GAEF,MAEF,OACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAAS0uD,OAAQtB,EAAUE,GACtD,MAEF,QACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAAS2uD,OAAQvB,EAAUE,GACtD,MAEF,QACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAAS4uD,OAAQxB,EAAUE,GACtD,MAEF,QACEh2D,QAAO,GACP+Q,EAAO9U,EAAOma,oBAGlB,MAEF,KAAKmR,EAAAC,MAAMq6B,eAAgBsU,GAAW,EACtC,KAAK5uC,EAAAC,MAAMk5B,QAKT,GAJAoV,EAAWx5D,KAAKgwD,4BAA4Bp7C,EAAM+hD,EAAc,GAChE8C,EAAWz5D,KAAKstD,YAGZttD,KAAKstD,YAAYjhC,GAAE,KAAuB,CAE5C,GADI+iB,EAAiBqqB,EAASrqB,eAG5B,GADIiJ,EAAWjJ,EAAeI,eAAe6c,EAAAztB,aAAamB,KAC5C,CACZtrB,EAAOzU,KAAK85D,sBAAsBzhB,EAAUzjC,EAAM4kD,EAAU3kD,EAAOmD,GACnE,MAOJ,OAJAhY,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAENrE,KAAKL,OAAOma,oBAGrB,GAAI+/C,EACFL,EAAWx5D,KAAKg4D,uBAAuBwB,EAAUC,GACjDC,EAAY15D,KAAKuwD,kBAAkB17C,EAAO4kD,EAAQ,KAClDE,EAAY35D,KAAKstD,gBACZ,CAGL,GAFAoM,EAAY15D,KAAKgwD,4BAA4Bn7C,EAAO4kD,EAAQ,GAC5DE,EAAY35D,KAAKstD,cACbsM,EAAa96B,EAAAgE,KAAKkd,iBAAiByZ,EAAUE,GAAW,IAuB1D,OALA35D,KAAKwG,MACHq4B,EAAA96B,eAAeg2D,8CACf/hD,EAAW3T,MAAO,IAAKo1D,EAAS30D,WAAY60D,EAAU70D,YAExD9E,KAAKstD,YAAcqJ,EACZh3D,EAAOma,oBAtBd0/C,EAAWx5D,KAAK+3D,kBACdyB,EACAC,EACAA,EAAWG,EAAU,IAGrBhlD,GAEF8kD,EAAY15D,KAAK+3D,kBACf2B,EACAC,EACAA,EAAYC,EAAU,IAGtB/kD,GAWN,OAAQ7U,KAAKstD,YAAYhiC,MACvB,OACA,OAIA,OACE7W,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASwxC,OAAQ4b,EAAUE,GACtD,MAEF,OACEjlD,EAAO9U,EAAOgV,aACZ3U,KAAK6iC,QAAQ2rB,SACTxvB,EAAA5yB,SAAS6uD,OACTj8B,EAAA5yB,SAASwxC,OACb4b,EACAE,GAEF,MAEF,OACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAAS6uD,OAAQzB,EAAUE,GACtD,MAEF,OACA,OACA,QAIA,OACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASyxC,OAAQ2b,EAAUE,GACtD,MAEF,OACEjlD,EAAO9U,EAAOgV,aACZ3U,KAAK6iC,QAAQ2rB,SACTxvB,EAAA5yB,SAAS8uD,OACTl8B,EAAA5yB,SAASyxC,OACb2b,EACAE,GAEF,MAEF,OACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAAS8uD,OAAQ1B,EAAUE,GACtD,MAEF,QAEE,KADI/rB,EAAW3tC,KAAK4tD,gBACL,CAEb,KADI1lB,EAAYloC,KAAKuwC,QAAQ5O,eAAezgC,IAAI,UAChC,CACdlB,KAAKwG,MACHq4B,EAAA96B,eAAe+hC,mBACf9tB,EAAW3T,MAAO,SAEpBoQ,EAAO9U,EAAOma,oBACd,MAGF,KADI7X,EAAYimC,EAAU7U,QAAU6U,EAAU7U,QAAQnyB,IAAI,OAAS,MACnD,CACdlB,KAAKwG,MACHq4B,EAAA96B,eAAe+hC,mBACf9tB,EAAW3T,MAAO,aAEpBoQ,EAAO9U,EAAOma,oBACd,MAEFpW,OAAOzB,EAAUqpB,MAAQ+gC,EAAAhrB,YAAY4F,oBACrCjnC,KAAK4tD,eAAiBjgB,EAA+B1rC,EAAW4kC,UAKhEpyB,EAHIk5B,GAAY3tC,KAAKmxD,gBAAgBxjB,GAG9B3tC,KAAK26D,eAAehtB,GAAY6rB,EAAUE,IAF1C/5D,EAAOma,oBAIhB,MAEF,QAEE,KADI6zB,EAAW3tC,KAAK6tD,gBACL,CACb,IAAI3lB,EASAjmC,EARJ,KADIimC,EAAYloC,KAAKuwC,QAAQ5O,eAAezgC,IAAI,SAChC,CACdlB,KAAKwG,MACHq4B,EAAA96B,eAAe+hC,mBACf9tB,EAAW3T,MAAO,QAEpBoQ,EAAO9U,EAAOma,oBACd,MAGF,KADI7X,EAAYimC,EAAU7U,QAAU6U,EAAU7U,QAAQnyB,IAAI,OAAS,MACnD,CACdlB,KAAKwG,MACHq4B,EAAA96B,eAAe+hC,mBACf9tB,EAAW3T,MAAO,YAEpBoQ,EAAO9U,EAAOma,oBACd,MAEFpW,OAAOzB,EAAUqpB,MAAQ+gC,EAAAhrB,YAAY4F,oBACrCjnC,KAAK6tD,eAAiBlgB,EAA+B1rC,EAAW4kC,UAKhEpyB,EAHIk5B,GAAY3tC,KAAKmxD,gBAAgBxjB,GAG9B3tC,KAAK26D,eAAehtB,GAAY6rB,EAAUE,IAF1C/5D,EAAOma,oBAIhB,MAEF,QACEpW,QAAO,GACP+Q,EAAO9U,EAAOma,oBAGlB,MAEF,KAAKmR,EAAAC,MAAMs6B,yBAA0BqU,GAAW,EAChD,KAAK5uC,EAAAC,MAAMq5B,kBAKT,GAJAiV,EAAWx5D,KAAKgwD,4BAA4Bp7C,EAAM+hD,EAAewE,QAAO,GACxE1B,EAAWz5D,KAAKstD,YAGZttD,KAAKstD,YAAYjhC,GAAE,KAAuB,CAE5C,GADI+iB,EAAiBqqB,EAASrqB,eAG5B,GADIiJ,EAAWjJ,EAAeI,eAAe6c,EAAAztB,aAAa+B,aAC5C,CACZlsB,EAAOzU,KAAK85D,sBAAsBzhB,EAAUzjC,EAAM4kD,EAAU3kD,EAAOmD,GACnE,MAOJ,OAJAhY,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAENrE,KAAKL,OAAOma,oBAKrB,OAFA4/C,EAAY15D,KAAKuwD,kBAAkB17C,EAAO4kD,EAAQ,KAClDE,EAAY35D,KAAKstD,YACTttD,KAAKstD,YAAYhiC,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACE7W,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASkxC,OAAQkc,EAAUE,GACtD,MAEF,OACA,OACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASgvD,OAAQ5B,EAAUE,GACtD,MAEF,OACA,OACEjlD,EAAO9U,EAAOgV,aACZ3U,KAAK6iC,QAAQ2rB,SACTxvB,EAAA5yB,SAASgvD,OACTp8B,EAAA5yB,SAASkxC,OACbkc,EACAE,GAEF,MAEF,QACA,QAKE,OAJA15D,KAAKwG,MACHq4B,EAAA96B,eAAes3D,2CACfrjD,EAAW3T,MAAO4mB,EAAAs4B,sBAAsBvrC,EAAWoX,UAAWpvB,KAAKstD,YAAYxoD,YAE1EnF,EAAOma,oBAEhB,QACEpW,QAAO,GACP+Q,EAAO9U,EAAOma,oBAGlB,MAEF,KAAKmR,EAAAC,MAAMu6B,+BAAgCoU,GAAW,EACtD,KAAK5uC,EAAAC,MAAMs5B,wBAKT,GAJAgV,EAAWx5D,KAAKgwD,4BAA4Bp7C,EAAM+hD,EAAewE,QAAO,GACxE1B,EAAWz5D,KAAKstD,YAGZttD,KAAKstD,YAAYjhC,GAAE,KAAuB,CAE5C,GADI+iB,EAAiBqqB,EAASrqB,eAG5B,GADIiJ,EAAWjJ,EAAeI,eAAe6c,EAAAztB,aAAa2B,aAC5C,CACZ9rB,EAAOzU,KAAK85D,sBAAsBzhB,EAAUzjC,EAAM4kD,EAAU3kD,EAAOmD,GACnE,MAOJ,OAJAhY,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAENrE,KAAKL,OAAOma,oBAMrB,OAHA0/C,EAAWx5D,KAAKg4D,uBAAuBwB,EAAUC,GACjDC,EAAY15D,KAAKuwD,kBAAkB17C,EAAO4kD,EAAQ,KAClDE,EAAY35D,KAAKstD,YACTttD,KAAKstD,YAAYhiC,MACvB,OACA,OAIA,OACE7W,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASqxC,OAAQ+b,EAAUE,GACtD,MAEF,OACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASkvD,OAAQ9B,EAAUE,GACtD,MAEF,OACEjlD,EAAO9U,EAAOgV,aACZ3U,KAAK6iC,QAAQ2rB,SACTxvB,EAAA5yB,SAASkvD,OACTt8B,EAAA5yB,SAASqxC,OACb+b,EACAE,GAEF,MAEF,OACA,OACA,QAIA,OACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASsxC,OAAQ8b,EAAUE,GACtD,MAEF,OACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASmvD,OAAQ/B,EAAUE,GACtD,MAEF,OACEjlD,EAAO9U,EAAOgV,aACZ3U,KAAK6iC,QAAQ2rB,SACTxvB,EAAA5yB,SAASmvD,OACTv8B,EAAA5yB,SAASsxC,OACb8b,EACAE,GAEF,MAEF,QACA,QAKE,OAJA15D,KAAKwG,MACHq4B,EAAA96B,eAAes3D,2CACfrjD,EAAW3T,MAAO4mB,EAAAs4B,sBAAsBvrC,EAAWoX,UAAWpvB,KAAKstD,YAAYxoD,YAE1EnF,EAAOma,oBAEhB,QACEpW,QAAO,GACP+Q,EAAO9U,EAAOma,oBAGlB,MAEF,KAAKmR,EAAAC,MAAMw6B,2CAA4CmU,GAAW,EAClE,KAAK5uC,EAAAC,MAAMu5B,oCAKT,GAJA+U,EAAWx5D,KAAKgwD,4BAA4Bp7C,EAAM+hD,EAAewE,QAAO,GACxE1B,EAAWz5D,KAAKstD,YAGZttD,KAAKstD,YAAYjhC,GAAE,KAAuB,CAE5C,GADI+iB,EAAiBqqB,EAASrqB,eAG5B,GADIiJ,EAAWjJ,EAAeI,eAAe6c,EAAAztB,aAAa4B,eAC5C,CACZ/rB,EAAOzU,KAAK85D,sBAAsBzhB,EAAUzjC,EAAM4kD,EAAU3kD,EAAOmD,GACnE,MAOJ,OAJAhY,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAENrE,KAAKL,OAAOma,oBAMrB,OAHA0/C,EAAWx5D,KAAKg4D,uBAAuBwB,EAAUC,GACjDC,EAAY15D,KAAKuwD,kBAAkB17C,EAAO4kD,EAAQ,KAClDE,EAAY35D,KAAKstD,YACTttD,KAAKstD,YAAYhiC,MACvB,OACA,OACA,QACE7W,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASsxC,OAAQ8b,EAAUE,GAExD,OACA,OACA,OACA,OACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASsxC,OAAQ8b,EAAUE,GACtD,MAEF,OACA,OACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASmvD,OAAQ/B,EAAUE,GACtD,MAEF,OACA,OACEjlD,EAAO9U,EAAOgV,aACZ3U,KAAK6iC,QAAQ2rB,SACTxvB,EAAA5yB,SAASmvD,OACTv8B,EAAA5yB,SAASsxC,OACb8b,EACAE,GAEF,MAEF,QACA,QAKE,OAJA15D,KAAKwG,MACHq4B,EAAA96B,eAAes3D,2CACfrjD,EAAW3T,MAAO4mB,EAAAs4B,sBAAsBvrC,EAAWoX,UAAWpvB,KAAKstD,YAAYxoD,YAE1EnF,EAAOma,oBAEhB,QACEpW,QAAO,GACP+Q,EAAO9U,EAAOma,oBAGlB,MAEF,KAAKmR,EAAAC,MAAMy6B,iBAAkBkU,GAAW,EACxC,KAAK5uC,EAAAC,MAAMw5B,UAKT,GAJA8U,EAAWx5D,KAAKgwD,4BAA4Bp7C,EAAM+hD,EAAewE,QAAO,GACxE1B,EAAWz5D,KAAKstD,YAGZttD,KAAKstD,YAAYjhC,GAAE,KAAuB,CAE5C,GADI+iB,EAAiBqqB,EAASrqB,eAG5B,GADIiJ,EAAWjJ,EAAeI,eAAe6c,EAAAztB,aAAaoB,aAC5C,CACZvrB,EAAOzU,KAAK85D,sBAAsBzhB,EAAUzjC,EAAM4kD,EAAU3kD,EAAOmD,GACnE,MAOJ,OAJAhY,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAENrE,KAAKL,OAAOma,oBAGrB,GAAI+/C,EACFH,EAAY15D,KAAKuwD,kBAAkB17C,EAAO4kD,EAAQ,KAClDE,EAAY35D,KAAKstD,gBACZ,CAGL,GAFAoM,EAAY15D,KAAKgwD,4BAA4Bn7C,EAAO4kD,EAAQ,GAC5DE,EAAY35D,KAAKstD,cACbsM,EAAa96B,EAAAgE,KAAKkd,iBAAiByZ,EAAUE,GAAW,IAuB1D,OALA35D,KAAKwG,MACHq4B,EAAA96B,eAAeg2D,8CACf/hD,EAAW3T,MAAO,IAAKo1D,EAAS30D,WAAY60D,EAAU70D,YAExD9E,KAAKstD,YAAcqJ,EACZh3D,EAAOma,oBAtBd0/C,EAAWx5D,KAAK+3D,kBACdyB,EACAC,EACAA,EAAWG,EAAU,IAGrBhlD,GAEF8kD,EAAY15D,KAAK+3D,kBACf2B,EACAC,EACAA,EAAYC,EAAU,IAGtB/kD,GAWN,OAAQ7U,KAAKstD,YAAYhiC,MACvB,OACA,OACA,OACA,OACA,OACA,QACA,OACE7W,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASgxC,OAAQoc,EAAUE,GACtD,MAEF,OACA,OACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASovD,OAAQhC,EAAUE,GACtD,MAEF,OACA,OACEjlD,EAAO9U,EAAOgV,aACZ3U,KAAK6iC,QAAQ2rB,SACTxvB,EAAA5yB,SAASovD,OACTx8B,EAAA5yB,SAASgxC,OACboc,EACAE,GAEF,MAEF,QACA,QAKE,OAJA15D,KAAKwG,MACHq4B,EAAA96B,eAAes3D,2CACfrjD,EAAW3T,MAAO4mB,EAAAs4B,sBAAsBvrC,EAAWoX,UAAWpvB,KAAKstD,YAAYxoD,YAE1EnF,EAAOma,oBAEhB,QACEpW,QAAO,GACP+Q,EAAO9U,EAAOma,oBAGlB,MAEF,KAAKmR,EAAAC,MAAM06B,WAAYiU,GAAW,EAClC,KAAK5uC,EAAAC,MAAMy5B,IAKT,GAJA6U,EAAWx5D,KAAKgwD,4BAA4Bp7C,EAAM+hD,EAAewE,QAAO,GACxE1B,EAAWz5D,KAAKstD,YAGZttD,KAAKstD,YAAYjhC,GAAE,KAAuB,CAE5C,GADI+iB,EAAiBqqB,EAASrqB,eAG5B,GADIiJ,EAAWjJ,EAAeI,eAAe6c,EAAAztB,aAAaqB,YAC5C,CACZxrB,EAAOzU,KAAK85D,sBAAsBzhB,EAAUzjC,EAAM4kD,EAAU3kD,EAAOmD,GACnE,MAOJ,OAJAhY,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAENrE,KAAKL,OAAOma,oBAGrB,GAAI+/C,EACFH,EAAY15D,KAAKuwD,kBAAkB17C,EAAO4kD,EAAQ,KAClDE,EAAY35D,KAAKstD,gBACZ,CAGL,GAFAoM,EAAY15D,KAAKgwD,4BAA4Bn7C,EAAO4kD,EAAQ,GAC5DE,EAAY35D,KAAKstD,cACbsM,EAAa96B,EAAAgE,KAAKkd,iBAAiByZ,EAAUE,GAAW,IAuB1D,OALA35D,KAAKwG,MACHq4B,EAAA96B,eAAeg2D,8CACf/hD,EAAW3T,MAAO,IAAKo1D,EAAS30D,WAAY60D,EAAU70D,YAExD9E,KAAKstD,YAAcqJ,EACZh3D,EAAOma,oBAtBd0/C,EAAWx5D,KAAK+3D,kBACdyB,EACAC,EACAA,EAAWG,EAAU,IAGrBhlD,GAEF8kD,EAAY15D,KAAK+3D,kBACf2B,EACAC,EACAA,EAAYC,EAAU,IAGtB/kD,GAWN,OAAQ7U,KAAKstD,YAAYhiC,MACvB,OACA,OACA,OACA,OACA,QACE7W,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASqvD,MAAOjC,EAAUE,GACrD,MAEF,OACA,OACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASqvD,MAAOjC,EAAUE,GACrD,MAEF,OACA,OACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASsvD,MAAOlC,EAAUE,GACrD,MAEF,OACA,OACEjlD,EAAO9U,EAAOgV,aACZ3U,KAAK6iC,QAAQ2rB,SACTxvB,EAAA5yB,SAASsvD,MACT18B,EAAA5yB,SAASqvD,MACbjC,EACAE,GAEF,MAEF,QACA,QAKE,OAJA15D,KAAKwG,MACHq4B,EAAA96B,eAAes3D,2CACfrjD,EAAW3T,MAAO4mB,EAAAs4B,sBAAsBvrC,EAAWoX,UAAWpvB,KAAKstD,YAAYxoD,YAE1EnF,EAAOma,oBAEhB,QACEpW,QAAO,GACP+Q,EAAO9U,EAAOma,oBAGlB,MAEF,KAAKmR,EAAAC,MAAM26B,aAAcgU,GAAW,EACpC,KAAK5uC,EAAAC,MAAM05B,MAKT,GAJA4U,EAAWx5D,KAAKgwD,4BAA4Bp7C,EAAM+hD,EAAewE,QAAO,GACxE1B,EAAWz5D,KAAKstD,YAGZttD,KAAKstD,YAAYjhC,GAAE,KAAuB,CAC5C,IAAI+iB,EAEEiJ,EADN,GADIjJ,EAAiBqqB,EAASrqB,eAG5B,GADIiJ,EAAWjJ,EAAeI,eAAe6c,EAAAztB,aAAasB,aAC5C,CACZzrB,EAAOzU,KAAK85D,sBAAsBzhB,EAAUzjC,EAAM4kD,EAAU3kD,EAAOmD,GACnE,MAOJ,OAJAhY,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAENrE,KAAKL,OAAOma,oBAGrB,GAAI+/C,EACFH,EAAY15D,KAAKuwD,kBAAkB17C,EAAO4kD,EAAQ,KAClDE,EAAY35D,KAAKstD,gBACZ,CAGL,GAFAoM,EAAY15D,KAAKgwD,4BAA4Bn7C,EAAO4kD,EAAQ,GAC5DE,EAAY35D,KAAKstD,cACbsM,EAAa96B,EAAAgE,KAAKkd,iBAAiByZ,EAAUE,GAAW,IAuB1D,OALA35D,KAAKwG,MACHq4B,EAAA96B,eAAeg2D,8CACf/hD,EAAW3T,MAAO,IAAKo1D,EAAS30D,WAAY60D,EAAU70D,YAExD9E,KAAKstD,YAAcqJ,EACZh3D,EAAOma,oBAtBd0/C,EAAWx5D,KAAK+3D,kBACdyB,EACAC,EACAA,EAAWG,EAAU,IAGrBhlD,GAEF8kD,EAAY15D,KAAK+3D,kBACf2B,EACAC,EACAA,EAAYC,EAAU,IAGtB/kD,GAWN,OAAQ7U,KAAKstD,YAAYhiC,MACvB,OACA,OACA,OACA,OACA,QACE7W,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASuvD,OAAQnC,EAAUE,GACtD,MAEF,OACA,OACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASuvD,OAAQnC,EAAUE,GACtD,MAEF,OACA,OACEjlD,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASwvD,OAAQpC,EAAUE,GACtD,MAEF,OACA,OACEjlD,EAAO9U,EAAOgV,aACZ3U,KAAK6iC,QAAQ2rB,SACTxvB,EAAA5yB,SAASwvD,OACT58B,EAAA5yB,SAASuvD,OACbnC,EACAE,GAEF,MAEF,QACA,QAKE,OAJA15D,KAAKwG,MACHq4B,EAAA96B,eAAes3D,2CACfrjD,EAAW3T,MAAO4mB,EAAAs4B,sBAAsBvrC,EAAWoX,UAAWpvB,KAAKstD,YAAYxoD,YAE1EnF,EAAOma,oBAEhB,QACEpW,QAAO,GACP+Q,EAAO9U,EAAOma,oBAGlB,MAKF,KAAKmR,EAAAC,MAAM65B,oBAOT,GANAyU,EAAWx5D,KAAKgwD,4BAA4Bp7C,EAAM+hD,EAAc,GAChE8C,EAAWz5D,KAAKstD,YAChBoM,EAAY15D,KAAKuwD,kBAAkB17C,EAAO4kD,EAAQ,KAClDE,EAAY35D,KAAKstD,YAGb74C,EAAO9U,EAAOghB,gBAAgB64C,GAAU,EAAM,GAChDx5D,KAAKq0D,cAAcmF,EAAUx5D,KAAKstD,aAClC74C,EAAO9U,EAAO0Y,SACZrY,KAAKq0D,cAAcmF,EAAUx5D,KAAKstD,aAClCoM,EACAjlD,OAIG,CACL,IAAIk6B,EAAO3uC,KAAK04C,gBAAgB/J,KAC5B4mB,EAAYv1D,KAAK04C,gBAAgBtD,oBACnCp1C,KAAKstD,aACJ3e,EAAKqM,YAAYwe,EAAUx5D,KAAKstD,cAEnC74C,EAAO9U,EAAO0Y,SACZrY,KAAKq0D,cACH10D,EAAO4V,eAAeggD,EAAUngD,MAAOokD,GACvCx5D,KAAKstD,aAEPoM,EACA/5D,EAAOwV,eACLzR,OAAO6xD,GAAWngD,MAClBpV,KAAKstD,YAAYtY,iBAIvB,MAEF,KAAK/pB,EAAAC,MAAM85B,QAOT,GANAwU,EAAWx5D,KAAKgwD,4BAA4Bp7C,EAAM+hD,EAAc,GAChE8C,EAAWz5D,KAAKstD,YAChBoM,EAAY15D,KAAKuwD,kBAAkB17C,EAAO4kD,EAAQ,KAClDE,EAAY35D,KAAKstD,YAGb74C,EAAOzU,KAAKL,OAAOghB,gBAAgB64C,GAAU,EAAM,GACrD/kD,EAAOzU,KAAKL,OAAO0Y,SACjBrY,KAAKq0D,cAAcmF,EAAUx5D,KAAKstD,aAClC74C,EACAilD,OAIG,CACD/qB,EAAO3uC,KAAK04C,gBAAgB/J,KAC5B4mB,EAAYv1D,KAAK04C,gBAAgBtD,oBACnCp1C,KAAKstD,aACJ3e,EAAKqM,YAAYwe,EAAUx5D,KAAKstD,cAEnC74C,EAAO9U,EAAO0Y,SACZrY,KAAKq0D,cACH10D,EAAO4V,eAAeggD,EAAUngD,MAAOokD,GACvCx5D,KAAKstD,aAEP3tD,EAAOwV,eACLzR,OAAO6xD,GAAWngD,MAClBpV,KAAKstD,YAAYtY,gBAEnB0kB,GAGJ,MAEF,QACEh2D,QAAO,GACP+Q,EAAOzU,KAAKL,OAAOma,oBAGvB,OAAO+/C,EACH75D,KAAK02D,2BAA2B9hD,EAAMH,EAAMkiD,GAAkB73B,EAAAgE,KAAKa,MACnElvB,GAGN04C,EAAAlrD,UAAA45D,qBAAA,SACElkB,EACAr2C,EACAw6D,EACA7oB,GAEA,IAAI8oB,EACAC,EAAyB,EAO7B,OANIrkB,EAAiBtrB,GAAGrB,EAAA3oB,YAAYwvC,WAClCmqB,EAAUF,EACVC,MAEAA,GAAwBz6D,GAEnBtB,KAAKi8D,kBACVtkB,EACAokB,EACA9oB,EACA+oB,EACArkB,EAAiBhZ,aAAa0tB,EAAA/qB,eAAerI,UAIjDk0B,EAAAlrD,UAAA63D,sBAAA,SACEniB,EACA/iC,EACA4kD,EACA3kD,EACAo+B,GAEA,IAAI8oB,EACAC,EAAyB,EAC7B,GAAIrkB,EAAiBtrB,GAAGrB,EAAA3oB,YAAYwvC,UAAW,CAC7C,IAAI3lB,EAASxoB,OAAOi0C,EAAiBzrB,QACrCxoB,OAAOwoB,EAAOZ,MAAQ+gC,EAAAhrB,YAAYiO,OAClC0sB,EAAUxC,EACVuC,GAAwBlnD,QAExBknD,GAAwBnnD,EAAMC,GAShC,OAPU7U,KAAKi8D,kBACbtkB,EACAokB,EACA9oB,EACA+oB,EACArkB,EAAiBhZ,aAAa0tB,EAAA/qB,eAAerI,UAKjDk0B,EAAAlrD,UAAA+3D,kBAAA,SAAkBhiD,EAAwBkkD,EAA6BvF,GACrE,IAMIhX,EANApP,EAAUvwC,KAAKuwC,QACfmI,EAAkB14C,KAAK04C,gBACvBp/B,EAASi3B,EAAQvB,kBAAkBh3B,EAAY0gC,GACnD,IAAKp/B,EAAQ,OAAOtZ,KAAKL,OAAOma,oBAIhC,OAAQR,EAAOgS,MACb,KAAK+gC,EAAAhrB,YAAYrI,OACf,IAAKh5B,KAAK4vD,cAAsBt2C,GAC9B,OAAOtZ,KAAKL,OAAOma,oBAErBpW,OAAgB4V,EAAQjE,MAAQypB,EAAAgE,KAAKa,MAGvC,KAAK0oB,EAAAhrB,YAAY6N,MACjB,KAAKmd,EAAAhrB,YAAY8N,MACfwQ,EAAmCrmC,EAAQjE,KAC3C,MAEF,KAAKg3C,EAAAhrB,YAAYqJ,SACf,IAAIzoC,EAAuBqX,EAAQsxB,gBACnC,GAAI3oC,EAAW,CACb,IAAI0rC,EAAW1rC,EAAU4kC,UACzB,IAAK8G,EAAU,OAAO3tC,KAAKL,OAAOma,oBAClCpW,OAAmD,GAA5CiqC,EAASvX,UAAU0W,eAAevnC,QACzCo6C,EAAahS,EAASvX,UAAU0W,eAAe,GAC/C,MAMF,OAJA9sC,KAAKwG,MACHq4B,EAAA96B,eAAeo4D,oEACfnkD,EAAW3T,MAAkBiV,EAAQwB,cAEhC9a,KAAKL,OAAOma,oBAErB,KAAKuyC,EAAAhrB,YAAYiO,MACf,GAAIiB,EAAQjO,0BAA2B,CACrC,IAAI85B,EAAc1jB,EAAgB/J,KAAKtiB,GAAE,MACrCgwC,EAAqB/iD,EAAQk2B,eAAe6c,EAAAztB,aAAaW,YAAa68B,GAC1E,IAAKC,EAaH,OAZyB/iD,EAAQk2B,eAAe6c,EAAAztB,aAAaU,YAAa88B,GAOxEp8D,KAAKwG,MACHq4B,EAAA96B,eAAeu4D,+CACftkD,EAAW3T,MAAeiV,EAAQwB,cAPpC9a,KAAKwG,MACHq4B,EAAA96B,eAAe0rC,qCACfz3B,EAAW3T,MAAeiV,EAAQwB,cAQ/B9a,KAAKL,OAAOma,oBAErBpW,OAAqD,GAA9C24D,EAAWjmC,UAAU0W,eAAevnC,QAC3Co6C,EAAa0c,EAAWjmC,UAAU0W,eAAe,GACjD,MAIJ,QAKE,OAJA9sC,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAENrE,KAAKL,OAAOma,oBAKvBpW,OAAOi8C,GAAc7gB,EAAAgE,KAAKa,MAC1B,IAAIm4B,EAAY97D,KAAKuwD,kBAAkB2L,EAAiBvc,EAAU,KAClE,OAAO3/C,KAAK02D,2BACV1+C,EACA8jD,EACAnF,GAAkB73B,EAAAgE,KAAKa,OAI3BwpB,EAAAlrD,UAAAy0D,2BAAA,SACE1+C,EACAukD,EACAC,QAAA,IAAAA,OAAA,GAEA,IAAI78D,EAASK,KAAKL,OACd2Z,EAAStZ,KAAKuwC,QAAQvB,kBAAkBh3B,EAAYhY,KAAK04C,iBAC7D,IAAKp/B,EAAQ,OAAO3Z,EAAOma,oBAE3B,OAAQR,EAAOgS,MACb,KAAK+gC,EAAAhrB,YAAY6N,MACf,IAAI75B,EAAeiE,EAAQjE,KAG3B,GAFA3R,OAAO2R,GAAQypB,EAAAgE,KAAKa,MACpB3jC,KAAKstD,YAAckP,EAAMnnD,EAAOypB,EAAAgE,KAAKa,KACzBrqB,EAAQ+S,GAAGrB,EAAA3oB,YAAY6uC,OAKjC,OAJAlxC,KAAKwG,MACHq4B,EAAA96B,eAAeo4D,oEACfnkD,EAAW3T,MAAOiV,EAAOwB,cAEpBnb,EAAOma,oBAEhB,IAAI60B,EAAO3uC,KAAK04C,gBAAgB/J,KAIhC,OAHIt5B,EAAKgX,GAAG,KACVsiB,EAAKuG,gBAAwB57B,EAAQlE,OAAQu5B,EAAKqM,YAAYuhB,EAAsBlnD,IAE/EmnD,EACH78D,EAAO4V,eAAuB+D,EAAQlE,MAAOmnD,GAC7C58D,EAAOwX,eAAuBmC,EAAQlE,MAAOmnD,GAEnD,KAAKlQ,EAAAhrB,YAAYrI,OACf,IAAKh5B,KAAK4vD,cAAsBt2C,GAAS,OAAO3Z,EAAOma,oBACnDzE,EAAgBiE,EAAQjE,KAG5B,GAFA3R,OAAO2R,GAAQypB,EAAAgE,KAAKa,MACpB3jC,KAAKstD,YAAckP,EAAMnnD,EAAOypB,EAAAgE,KAAKa,KACzBrqB,EAAQ+S,GAAGrB,EAAA3oB,YAAY6uC,OAMjC,OALAlxC,KAAKwG,MACHq4B,EAAA96B,eAAeo4D,oEACfnkD,EAAW3T,MACXiV,EAAOwB,cAEFnb,EAAOma,oBAGhB,GADAyiD,EAAuBv8D,KAAKg4D,uBAAuBuE,EAAsBlnD,GACrEmnD,EAAK,CACP,IAAItM,EAAa76C,EAAK2/B,eAClBl6B,EAAexB,EAAOwB,aAC1B,OAAOnb,EAAO4X,YAAY,MACxB5X,EAAO0X,gBAAgByD,EAAcyhD,GACrC58D,EAAO8V,gBAAgBqF,EAAco1C,IACpCA,GAEH,OAAOvwD,EAAO0X,gBAAgBiC,EAAOwB,aAAcyhD,GAGvD,KAAKlQ,EAAAhrB,YAAY8N,MACf,IAAM5e,EAAsBjX,EAAQiX,YACpC,GACUjX,EAAQ+S,GAAGrB,EAAA3oB,YAAY2gD,YAE7BhjD,KAAK04C,gBAAgBrsB,GAAGrB,EAAA3oB,YAAYi4B,cACrB,MAAf/J,GAC2B,MAA3BA,EAAYrW,YAOd,OAJAla,KAAKwG,MACHq4B,EAAA96B,eAAeo4D,oEACfnkD,EAAW3T,MAAeiV,EAAQwB,cAE7Bnb,EAAOma,oBAEhB,IAAI2iD,EAAiB/4D,OAAO1D,KAAKuwC,QAAQlO,wBACrCq6B,EAAW18D,KAAKgwD,4BAClByM,EACAz8D,KAAK6iC,QAAQU,UAAS,GAGpBluB,EAAeiE,EAAQjE,KAC3BrV,KAAKstD,YAAckP,EAAMnnD,EAAOypB,EAAAgE,KAAKa,KACjCusB,EAAa76C,EAAK2/B,eAKtB,GAJa,IAAT3/B,EAAKiW,OAEPixC,EAAuBv8D,KAAKg4D,uBAAuBuE,EAAsBlnD,IAEvEmnD,EAAK,CAEH7tB,GADA+J,EAAkB14C,KAAK04C,iBACA/J,KAD3B,IAMI6mB,EAJY9c,EAAgBtD,oBAC9B//B,GACCs5B,EAAKqM,YAAYuhB,EAAsBlnD,IAEXD,MAE/B,OAAOzV,EAAO4X,YAAY,MACxB5X,EAAOwX,eAAeq+C,EAAgB+G,GACtC58D,EAAOqW,YACLX,EAAK+hC,SACLslB,EACA/8D,EAAOwV,eAAeqgD,EAAgBtF,GACtCA,EACQ52C,EAAQ08B,cAElBr2C,EAAOwV,eAAeqgD,EAAgBtF,IACrCA,GAEH,OAAOvwD,EAAOqW,YACZX,EAAK+hC,SACLslB,EACAH,EACArM,EACQ52C,EAAQ08B,cAItB,KAAKqW,EAAAhrB,YAAYqJ,SACf,IAAIE,EAA6BtxB,EAAQsxB,gBACzC,GAAIA,EAAiB,CACnB,IAAI+xB,EAAiB/xB,EAAgB/D,UACrC,IAAK81B,EAAgB,OAAOh9D,EAAOma,oBAGnC,IAAK0iD,EAAK,CACR,GAAIG,EAAetwC,GAAGrB,EAAA3oB,YAAYwvC,UAAW,CACvC4qB,EAAiB/4D,OAAO1D,KAAKuwC,QAAQlO,wBACrCq6B,EAAW18D,KAAKgwD,4BAClByM,EACAz8D,KAAK6iC,QAAQU,UAAS,GAGxB,OAAOvjC,KAAK26D,eAAegC,GAAkBD,EAAUH,IAEvD,OAAOv8D,KAAK26D,eAAegC,GAAkBJ,IAKjD,IAAI5xB,EAA6BrxB,EAAQqxB,gBACzCjnC,OAA0B,MAAnBinC,GACP,IAAIiyB,EAAqCjyB,EAAiB9D,UAC1D,IAAK+1B,EAAgB,OAAOj9D,EAAOma,oBACnC,IACI+iD,GADAtjD,EAAaqjD,EAAexmC,UAAU7c,YACRy7B,eAClC,GAAI2nB,EAAetwC,GAAGrB,EAAA3oB,YAAYwvC,UAAW,CACvC4qB,EAAiB/4D,OAAO1D,KAAKuwC,QAAQlO,wBACrCq6B,EAAW18D,KAAKgwD,4BAClByM,EACAz8D,KAAK6iC,QAAQU,UAAS,GAIpBiyB,EADYx1D,KAAK04C,gBAAgBtD,oBAAoB77B,GAAY,GACtCnE,MAC/B,OAAOzV,EAAO4X,YAAY,MACxBvX,KAAK26D,eAAegC,GAClBh9D,EAAO4V,eAAeigD,EAAgBkH,GACtCH,IAEFv8D,KAAK26D,eAAeiC,GAClBj9D,EAAOwV,eAAeqgD,EAAgBqH,MAEvCA,GAGH,OAAOl9D,EAAO4X,YAAY,MACxBvX,KAAK26D,eAAegC,GAAkBJ,IACtCv8D,KAAK26D,eAAeiC,IACnBC,GAQP,OALE78D,KAAKwG,MACHq4B,EAAA96B,eAAeo4D,oEACfnkD,EAAW3T,MAAOiV,EAAOwB,cAGtBnb,EAAOma,oBAEhB,KAAKuyC,EAAAhrB,YAAYiO,MACf,IAAIrf,EAAoBjwB,KAAKuwC,QAAQjO,0BACrC,GAAIrS,EAAmB,CACrB,IAAImsC,EAAcp8D,KAAK04C,gBAAgB/J,KAAKtiB,GAAE,MAC1CkjB,EAAqBj2B,EAAQk2B,eAAe6c,EAAAztB,aAAaU,YAAa88B,GAC1E,IAAK7sB,EAKH,OAJAvvC,KAAKwG,MACHq4B,EAAA96B,eAAe0rC,qCACfz3B,EAAW3T,MAAOiV,EAAOwB,cAEpBnb,EAAOma,oBAEhB,IAAIuiD,EAAqB/iD,EAAQk2B,eAAe6c,EAAAztB,aAAaW,YAAa68B,GAC1E,IAAKC,EAMH,OALAr8D,KAAKwG,MACHq4B,EAAA96B,eAAeu4D,+CACftkD,EAAW3T,MAAOiV,EAAOwB,cAE3B9a,KAAKstD,YAAckP,EAAMjtB,EAAWnZ,UAAU7c,WAAaulB,EAAAgE,KAAKa,KACzDhkC,EAAOma,oBAEhB,IAAI6lC,EAAqBrmC,EAAQjE,KAO7BynD,GANAL,EAAiB/4D,OAAO1D,KAAKuwC,QAAQlO,wBACrCq6B,EAAW18D,KAAKgwD,4BAClByM,EACAz8D,KAAK6iC,QAAQU,UAAS,GAGNvjC,KAAKuwD,kBACrBtgC,EACA6O,EAAAgE,KAAKhiB,IAAG,MAIV,GAAI07C,EAAK,CACP,IAAI9jB,EACAqkB,GADArkB,EAAkB14C,KAAK04C,iBACW7D,aAAa8K,GAAY,GAC3Dqd,EAAmBtkB,EAAgBtD,oBAAoBp1C,KAAKstD,aAAa,GACzE/zC,EAAag2B,EAAWnZ,UAAU7c,WAEtC,OADAvZ,KAAK04C,gBAAgBvD,cAAc4nB,GAC5Bp9D,EAAO4X,YAAY,MACxBvX,KAAK26D,eAAe0B,GAClB18D,EAAO4V,eAAewnD,EAAgB3nD,MAAOsnD,GAC7C/8D,EAAO4V,eAAeynD,EAAiB5nD,MAAO0nD,GAC9CP,IAEFv8D,KAAK26D,eAAeprB,GAClB5vC,EAAOwV,eAAe4nD,EAAgB3nD,MAAO2nD,EAAgB1nD,KAAK2/B,gBAClEr1C,EAAOwV,eAAe6nD,EAAiB5nD,MAAO4nD,EAAiB3nD,KAAK2/B,mBAErEz7B,EAAWy7B,gBAEd,OAAOh1C,KAAK26D,eAAe0B,GACzBK,EACAI,EACAP,KAWV,OAJAv8D,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAEN1E,EAAOma,qBAGhBqzC,EAAAlrD,UAAAi1D,sBAAA,SAAsBl/C,EAA4B2+C,GAChD,IAKIvgC,EACA6mC,EANAt9D,EAASK,KAAKL,OACd+4C,EAAkB14C,KAAK04C,gBACvBp/B,EAAStZ,KAAKuwC,QAAQvB,kBAAkBh3B,EAAWA,WAAY0gC,GACnE,IAAKp/B,EAAQ,OAAO3Z,EAAOma,oBAI3B,OAAQR,EAAOgS,MAGb,KAAK+gC,EAAAhrB,YAAY4F,mBACf,IAAIhlC,EAA+BqX,EAC/BoT,EAAgB1U,EAAW0U,cAG/B,GAAIzqB,EAAUoqB,GAAGrB,EAAA3oB,YAAY+kC,QAAUpc,EAAA3oB,YAAY2lC,SACjD,OAAOhoC,KAAKk9D,6BAA6Bj7D,EAAW+V,EAAY2+C,GAGlE,IAAIhpB,EAA4B,KAGhC,GAAIjhB,EAAe,CACjB,IAAKzqB,EAAUoqB,GAAGrB,EAAA3oB,YAAY8kC,SAK5B,OAJAnnC,KAAKwG,MACHq4B,EAAA96B,eAAeo5D,sBACfnlD,EAAWA,WAAW3T,MAAOpC,EAAU6Y,cAElCnb,EAAOma,oBAEhB6zB,EAAW1rC,EAAU2rC,0BACnBlhB,EACA1sB,KAAK04C,gBAAgB/J,KAAKnC,wBAC1Bx0B,OAIG,IAAI/V,EAAUoqB,GAAGrB,EAAA3oB,YAAY8kC,SAAU,CAI5C,IAHA,IAAIi2B,EAAgB,IAAI57B,IACpBrO,EAAiBzvB,OAAOzB,EAAUsuB,YAAY4C,gBAC9CkqC,EAAoBlqC,EAAe5tB,OAC9BlF,EAAI,EAAGA,EAAIg9D,IAAqBh9D,EACvC+8D,EAAc5wC,IAAI2G,EAAe9yB,GAAGO,KAAKyE,KAAM,MAGjD,IAAIynC,EAAiB7qC,EAAUsuB,YAAY6F,UAAU5I,WACjD8vC,EAAoBxwB,EAAevnC,OACnCw2D,EAAsB/jD,EAAWgW,UACjCuvC,EAAexB,EAAoBx2D,OACnCi4D,EAAgB,IAAIp3D,MAAqBm3D,GAC7C,IAASl9D,EAAI,EAAGA,EAAIi9D,IAAqBj9D,EAAG,CAC1C,IAAIotC,EAAWX,EAAezsC,GAAGgV,KAC7BzU,EAAO6sC,EAASniB,MAAQyT,EAAA3T,SAASoN,KAAkBiV,EAAU7sC,KAAKyE,KAAO,KACzEo4D,EAAqBp9D,EAAIk9D,EACzBxB,EAAoB17D,GACpB4B,EAAUsuB,YAAY6F,UAAU5I,WAAWntB,GAAG6Z,YAClD,IAAKujD,EAKH,OAJAz9D,KAAKwG,MACHq4B,EAAA96B,eAAesmC,+BACfryB,EAAW3T,MAAOi5D,EAAkBx4D,SAAS,IAAKy4D,EAAaz4D,SAAS,KAEnEnF,EAAOma,oBAEhB,GAAa,OAATlZ,GAAiBw8D,EAAct2B,IAAIlmC,GAAO,CAE5C,GADI88D,EAAeN,EAAcl8D,IAAIN,GACnB,CAChB48D,EAAcn9D,GAAKL,KAAKgwD,4BAA4ByN,EAAoBC,EAAY,GACpF,IAAI9D,OAAU,EACd,KAAMA,EAAa96B,EAAAgE,KAAKkd,iBAAiB0d,EAAc19D,KAAKstD,aAAa,OACjEsM,EAAa96B,EAAAgE,KAAKkd,iBAAiB0d,EAAc19D,KAAKstD,aAAa,IAKvE,OAJAttD,KAAKwG,MACHq4B,EAAA96B,eAAeksD,mCACfnjB,EAAezsC,GAAGgV,KAAKhR,MAAOrE,KAAKstD,YAAYxoD,WAAY44D,EAAa54D,YAEnEnF,EAAOma,oBAGlB4jD,EAAe9D,OAEf4D,EAAcn9D,GAAKL,KAAKgwD,4BAA4ByN,EAAoB3+B,EAAAgE,KAAKhiB,IAAG,GAChF48C,EAAe19D,KAAKstD,YAGtB8P,EAAc5wC,IAAI5rB,EAAM88D,OACnB,CACL,IAAIC,EAAe39D,KAAKuwC,QAAQ5D,YAC9BG,EAAezsC,GAAGgV,KAClBrV,KAAK04C,gBAAgB/J,KAAKnC,yBAC1B,GAEF,IAAKmxB,EAAc,OAAOh+D,EAAOma,oBACjC0jD,EAAcn9D,GAAKL,KAAKuwD,kBACtBkN,EACAE,EAAY,MAMlB,IAAIzqB,EAAwB,IAAI9sC,MAAYi3D,GAC5C,IAASh9D,EAAI,EAAGA,EAAIg9D,IAAqBh9D,EAAG,CAC1C,IAAIq9D,EAAeh6D,OAAO05D,EAAcl8D,IAAIiyB,EAAe9yB,GAAGO,KAAKyE,OACnE6tC,EAAsB7yC,GAAKq9D,EAM7B,OAJA/vB,EAAW1rC,EAAU4kC,QACnBqM,EACAlzC,KAAK04C,gBAAgB/J,KAAKnC,0BAGrBxsC,KAAK26D,eAAehtB,EAAU6vB,GADfx9D,KAAKL,OAAOma,oBAQlC6zB,EAAW1rC,EAAU4kC,QACnB,KACA7mC,KAAK04C,gBAAgB/J,KAAKnC,yBAG9B,IAAKmB,EAAU,OAAO3tC,KAAKL,OAAOma,oBAGlC,IAAI4iD,EAA0B,EAS9B,OARI/uB,EAASthB,GAAGrB,EAAA3oB,YAAYwvC,YAC1B6qB,EAAW18D,KAAKgwD,4BACdtsD,OAAO1D,KAAKuwC,QAAQlO,wBACpBriC,KAAK6iC,QAAQU,UAAS,IAKnBvjC,KAAKi8D,kBACVtuB,EACA31B,EAAWgW,UACXhW,EACA0kD,EACA/uB,EAAShP,aAAa0tB,EAAA/qB,eAAerI,SAKzC,KAAKozB,EAAAhrB,YAAY6N,MACf,GAAI9Y,EAAoB9c,EAAQjE,KAAK46B,mBAAoB,CACvDgtB,EAAWt9D,EAAOwV,eAAuBmE,EAAQlE,MAAO4pB,EAAAv4B,WAAW4a,KACnE,MAMA,OAJArhB,KAAKwG,MACHq4B,EAAA96B,eAAessC,uGACfr4B,EAAW3T,MAAeiV,EAAQjE,KAAKvQ,YAElCnF,EAAOma,oBAGlB,KAAKuyC,EAAAhrB,YAAYrI,OACf,GAAI5C,EAAqB9c,EAAQjE,KAAK46B,mBAAoB,CACxDgtB,EAAWt9D,EAAO8V,gBAAyB6D,EAAQwB,aAAuBxB,EAAQjE,KAAK2/B,gBACvF,MAMA,OAJAh1C,KAAKwG,MACHq4B,EAAA96B,eAAessC,uGACfr4B,EAAW3T,MAAgBiV,EAAQjE,KAAKvQ,YAEnCnF,EAAOma,oBAGlB,KAAKuyC,EAAAhrB,YAAY8N,MAEf,GAAI/Y,EADe9c,EAAQjE,KACN46B,mBAAoB,CACvC,IAAIwsB,EAAiB/4D,OAAO1D,KAAKuwC,QAAQlO,wBACrCq6B,EAAW18D,KAAKgwD,4BAClByM,EACAz8D,KAAK6iC,QAAQU,UAAS,GAGxB05B,EAAWt9D,EAAOgW,WAChB,GACA,EACA+mD,EACA19B,EAAAv4B,WAAW4a,IACH/H,EAAQ08B,cAElB,MAMA,OAJAh2C,KAAKwG,MACHq4B,EAAA96B,eAAessC,uGACfr4B,EAAW3T,MAAeiV,EAAQjE,KAAKvQ,YAElCnF,EAAOma,oBAGlB,KAAKuyC,EAAAhrB,YAAYsU,gBACfvf,EAA6B9c,EAAQ8c,UACrC6mC,EAAWj9D,KAAKuwD,kBACdv4C,EAAWA,WACMsB,EAAQjE,KAAI,KAI/B,MAEF,KAAKg3C,EAAAhrB,YAAYqJ,SAGjB,QAKE,OAJA1qC,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAEN1E,EAAOma,oBAGlB,OAAO9Z,KAAK49D,oBACVxnC,EACA6mC,EACAjlD,EAAWgW,UACXhW,IAIIm1C,EAAAlrD,UAAAi7D,6BAAR,SACEj7D,EACA+V,EACA2+C,GAEA,IAAIliD,EAAO23C,EAAAyR,YACT79D,KACAiC,EACAA,EAAUkxC,4BACRn7B,EAAW0U,cACX1sB,KAAK04C,gBAAgB/J,KAAKnC,yBAE5Bx0B,EAAWgW,UACX2oC,EACA3+C,GAEF,OAAKvD,IACHzU,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAENrE,KAAKL,OAAOma,sBASvBqzC,EAAAlrD,UAAA67D,mBAAA,SACE1nC,EACAmnC,EACAQ,EACA9qB,GAKA,GAAI8qB,IAAwB,MADb3nC,EAAUsW,UAMvB,OAJA1sC,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACfkJ,EAAW5uC,QAEN,EAIT,IAAI4oC,EAAU7W,EAAU6W,QACxB,GAAIA,EAKF,OAJAjtC,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACfkJ,EAAW5uC,QAEN,EAGT,IAAI25D,EAAU5nC,EAAU4W,mBACpBpwB,EAAUwZ,EAAU0W,eAAevnC,OAGvC,OAAIg4D,EAAeS,GACjBh+D,KAAKwG,MACHw3D,EAAUphD,EACNiiB,EAAA96B,eAAek6D,wCACfp/B,EAAA96B,eAAesmC,+BACnB4I,EAAW5uC,MAAO25D,EAAQl5D,WAAYy4D,EAAaz4D,aAE9C,KAILy4D,EAAe3gD,IAAYqwB,KAC7BjtC,KAAKwG,MACHq4B,EAAA96B,eAAesmC,+BACf4I,EAAW5uC,MAAOuY,EAAQ9X,WAAYy4D,EAAaz4D,aAE9C,IAOXqoD,EAAAlrD,UAAAg6D,kBAAA,SACEtuB,EACAouB,EACA9oB,EACA+oB,EACAkC,QADA,IAAAlC,MAAA,QACA,IAAAkC,OAAA,GAEA,IAAIX,EAAexB,EAAoBx2D,OACnC6wB,EAAYuX,EAASvX,UAEzB,IAAKp2B,KAAK89D,mBACR1nC,EACAmnC,EACW,GAAXvB,EACA/oB,GAEA,OAAOjzC,KAAKL,OAAOma,oBAIrB,GAAIokD,EAEF,OADAx6D,QAAQiqC,EAASthB,GAAGrB,EAAA3oB,YAAY2wD,aACzBhzD,KAAKm+D,2BAA2BxwB,EAAUouB,EAAqB9oB,EAAY+oB,GAIpF,IAAIoC,EAAuBpC,EAAUuB,EAAe,EAAIA,EACpDvoD,EAAW,IAAI5O,MAAqBg4D,GACpChpD,EAAQ,EACR4mD,IACFhnD,EAAS,GAAKgnD,EACd5mD,EAAQ,GAGV,IADA,IAAI03B,EAAiB1W,EAAU0W,eACtBzsC,EAAI,EAAGA,EAAIk9D,IAAgBl9D,IAAK+U,EACvCJ,EAASI,GAASpV,KAAKuwD,kBACrBwL,EAAoB17D,GACpBysC,EAAezsC,GAAE,KAMrB,OADAqD,OAAO0R,GAASgpD,GACTp+D,KAAK26D,eAAehtB,EAAU34B,IAI/Bm4C,EAAAlrD,UAAAk8D,2BAAR,SACExwB,EACAouB,EACA9oB,EACA+oB,gBAAA,IAAAA,MAAA,GAEA,IAAIuB,EAAexB,EAAoBx2D,OACnC6wB,EAAYuX,EAASvX,UACrBsiB,EAAkB14C,KAAK04C,gBACvB/4C,EAASK,KAAKL,OACd4wB,EAAcod,EAAS1rC,UAAUsuB,YAGjC8tC,EAAe3lB,EAAgB/J,KAC/BmK,EAAcnL,EAAS7yB,aAAe,aAAe6yB,EAASoG,gBAAgBjvC,SAAS,IACvFyU,EAAao0B,EAASvX,UAAU7c,WAChCo1B,EAAO0d,EAAA1X,KAAKhzC,OAAO+2C,GACvB/J,EAAKniB,IAAG,MACRmiB,EAAKmK,YAAcA,EACnBnK,EAAKp1B,WAAaA,EAClBo1B,EAAKnC,wBAA0BmB,EAASnB,wBAIxC,IAAIr0B,KACJ,GAAI6jD,EAAS,CACX,IAAI9vC,EAASxoB,OAAOiqC,EAASzhB,QAE7B,GADAxoB,OAAOwoB,EAAOZ,MAAQ+gC,EAAAhrB,YAAYiO,OAC9BtQ,EAAApb,gBAAgBo4C,IAAYh9B,EAAAt4B,aAAaob,SAC3C6sB,EAAK+K,oBACH1a,EAAA7a,iBAAiB63C,GACT9vC,EAAQ7W,KAChB,YAEG,CACL,IAAIipD,EAAY3vB,EAAK6K,eAAuBttB,EAAQ7W,KAAM,QAAQ,GAClE8C,EAAKrS,KACHnG,EAAOwX,eAAemnD,EAAUlpD,MAAO4mD,KAK7C,IADA,IAAIlvB,EAAiB1W,EAAU0W,eACtBzsC,EAAI,EAAGA,EAAIk9D,IAAgBl9D,EAAG,CACrC,IAAIk+D,EAAYv+D,KAAKuwD,kBACnBwL,EAAoB17D,GACpBysC,EAAezsC,GAAE,KAInB,GAAI2+B,EAAApb,gBAAgB26C,IAAcv/B,EAAAt4B,aAAaob,SAC7C6sB,EAAK+K,oBACH1a,EAAA7a,iBAAiBo6C,GACjBzxB,EAAezsC,GACf+1B,EAAUse,iBAAiBr0C,QAGxB,CACL,IAAIm+D,EAAgB7vB,EAAK6K,eACvB1M,EAAezsC,GACf+1B,EAAUse,iBAAiBr0C,IAC1BsuC,EAAKqM,YAAYujB,EAAWzxB,EAAezsC,KAE9C8X,EAAKrS,KACHnG,EAAOwX,eAAeqnD,EAAcppD,MAAOmpD,KAMjD7lB,EAAgB/J,KAAOA,EACvB,IAAI9B,EAAgBzW,EAAU0W,eAAevnC,OAC7C,IAASlF,EAAIk9D,EAAcl9D,EAAIwsC,IAAiBxsC,EAAG,CACjD,IAAIyvD,EAAW9vD,KAAKuwD,kBAClB7sD,OAAO6sB,EAAY6F,UAAU5I,WAAWntB,GAAG6Z,aAC3C4yB,EAAezsC,GAAE,KAIfm+D,EAAgB7vB,EAAK6K,eACvB1M,EAAezsC,GACf+1B,EAAUse,iBAAiBr0C,IAC1BsuC,EAAKqM,YAAY8U,EAAUhjB,EAAezsC,KAE7C8X,EAAKrS,KACHnG,EAAOwX,eAAeqnD,EAAcppD,MAAO06C,IAK/C,IAAI2O,EAAgB/6D,OAAO6sB,EAAYpY,MACvC,GAAIsmD,EAAcnzC,MAAQyT,EAAA3T,SAASkQ,MAEjC,IADA,IAAIzI,EAA8B4rC,EAAe5rC,WACjC9V,GAAP1c,EAAI,EAAOwyB,EAAWttB,QAAQlF,EAAI0c,IAAK1c,EAAG,CACjD,IAAIytB,EAAO9tB,KAAK0vD,iBAAiB78B,EAAWxyB,IAC5C,GAAI2+B,EAAApb,gBAAgBkK,IAASkR,EAAAt4B,aAAautD,MACxC97C,EAAKrS,KAAKgoB,GACN6gB,EAAKpiB,MAAK,KAA6B,WAI/CpU,EAAKrS,KAAK9F,KAAK0vD,iBAAiB+O,IAIlC,IAAIhmB,EAAe9J,EAAK8J,aACxB,GAAIA,EAAc,KAChB,IAAwB,IAAAxG,EAAA7M,EAAAqT,EAAaxkB,UAAQuR,EAAAyM,EAAA3M,QAAAE,EAAAD,KAAAC,EAAAyM,EAAA3M,OAAE,CAA1C,IAAIgU,EAAW9T,EAAAlkC,MACdg4C,EAAYjtB,GAAGrB,EAAA3oB,YAAYk3C,SAC7Bb,EAAgBvD,cAAcmE,qGAGlC3K,EAAK8J,aAAe,KAOtB,OALA9J,EAAK6G,WACLx1C,KAAK04C,gBAAgB/J,KAAO0vB,EAC5Br+D,KAAKstD,YAAc/zC,EAGfA,GAAculB,EAAAgE,KAAKa,MAASgL,EAAKpiB,MAAK,IAOnC5sB,EAAO4X,YAAYuhC,EAAa3gC,EAAMoB,EAAWy7B,iBANtDh1C,KAAKwG,MACHq4B,EAAA96B,eAAe8tD,+DACfthC,EAAY6F,UAAU7c,WAAWlV,OAE5B1E,EAAOma,sBAMlBqzC,EAAAlrD,UAAA6vD,iBAAA,SAAiB4M,GAQf,IAAI/qB,EAAa+qB,EAAS/qB,WAC1B,GAAIA,EAAY,OAAOA,EAEvB,IAAIgrB,EAAoBD,EAAStoC,UAC7BwoC,EAAeF,EAAS5jD,aACxB+jD,EAAyBF,EAAkB7xB,eAC3CgyB,EAAgCJ,EAASz8D,UAAUsuB,YAAY6F,UAAU5I,WACzEuxC,EAAmBJ,EAAkBplD,WACrCylD,EAAiBL,EAAkBjyB,SACnCkF,EAAa8sB,EAASryC,GAAGrB,EAAA3oB,YAAYwvC,UAGrCotB,EAAeN,EAAkB3xB,mBACjCkyB,EAAcD,EACdE,EAAeN,EAAuBt5D,OACtC65D,EAAcD,EACdvtB,MACAstB,IACAE,GAEJ,IAAIC,EAAc37D,OAAO07D,EAAcF,GAEnCI,EAAoB,IAAIl5D,MAAqB84D,GAC7CK,EAAe,EAGf5/D,EAASK,KAAKL,OACdiyC,IACF0tB,EAAkB,GAAK3/D,EAAOwV,eAAe,EAAGnV,KAAK6iC,QAAQ8uB,gBAC7D4N,EAAe,GAIjB,IAAK,IAAIl/D,EAAI,EAAGA,EAAI4+D,IAAgB5+D,IAAKk/D,EACvCD,EAAkBC,GAAgB5/D,EAAOwV,eAAeoqD,EAAcV,EAAuBx+D,GAAG20C,gBAElGtxC,OAAO67D,GAAgBL,GAGvB,IAAIM,EAAsB,IAAI1gC,EAAAyO,UAAUsxB,EAAwBE,EAAkBC,GAC9ES,EAAiBb,EAAe,cACpCY,EAAoBxyB,mBAAqBmyB,GACzCxrB,EAAa,IAAI0Y,EAAAxZ,SACf6rB,EAASz8D,UACTw9D,EACAD,EACAd,EAASxyC,OACTwyC,EAASlyB,0BAEAhgB,IAAIkyC,EAASvyC,MAAQnB,EAAA3oB,YAAY2wD,WAAahoC,EAAA3oB,YAAY2sD,UACrE0P,EAAS/qB,WAAaA,EAItB,IAAI8b,EAAmBzvD,KAAK04C,gBAC5B14C,KAAK04C,gBAAkB/E,EAGvB,IAAIz6B,EAAWmmD,EAAc,EACzBrmD,EAAQ,IAAI5S,MAAc8S,GAC1BwmD,EAAM,KAAOL,EAAYv6D,SAAS,IACtC,IAASzE,EAAI,EAAGA,EAAI6Y,IAAY7Y,EAAG,CACjC,IAAImX,EAAQnX,EAAEyE,SAAS,IAAM46D,EAC7B1mD,EAAM3Y,GAAKmX,EAEb,IAAIW,EAAOxY,EAAO4X,YAAYyB,EAAM,IAClCrZ,EAAO4X,YAAY,OACjB5X,EAAOoZ,aAAaC,EAAO,MAEzBimD,EACIt/D,EAAOgV,aACLqqB,EAAA5yB,SAASguD,OACTz6D,EAAO8V,gBAAgB,QAASupB,EAAAv4B,WAAW4a,KAC3C1hB,EAAOgU,UAAUsrD,IAEnBt/D,EAAO8V,gBAAgB,QAASupB,EAAAv4B,WAAW4a,QAGnD1hB,EAAOma,sBAET,IAASzZ,EAAI,EAAGA,EAAIg/D,IAAeh/D,IAAKk/D,EAAc,CACpD,IAAIlqD,EAAOwpD,EAAuBI,EAAe5+D,GAC7CkwB,EAAcuuC,EAA8BG,EAAe5+D,GAC3D6Z,EAAcqW,EAAYrW,YAC1B41C,OAAQ,EACR51C,EACF41C,EAAWnwD,EAAOwX,eAAeooD,EAC/Bv/D,KAAKuwD,kBACHr2C,EACA7E,EAAI,OAMRrV,KAAKwG,MACHq4B,EAAA96B,eAAe47D,4CACfpvC,EAAYlsB,OAEdyrD,EAAWnwD,EAAOma,qBAEpB3B,EAAOxY,EAAO4X,YAAYyB,EAAM3Y,EAAI,IAClC8X,EACA23C,IAEFwP,EAAkBC,GAAgB5/D,EAAOwV,eAAeoqD,EAAclqD,EAAK2/B,gBAE7Eh1C,KAAK04C,gBAAkB+W,EACvB/rD,OAAO67D,GAAgBH,GAEvB,IAAI/Q,EAAU1uD,EAAOya,YACnBqlD,EACAz/D,KAAKsuD,mBACHkR,EAAoB1yB,eACpB0yB,EAAoBjmD,WACpBimD,EAAoB9yB,UAEtB5N,EAAAwhB,mBAAmB3M,EAAWJ,kBAC9B5zC,EAAO4X,YAAY,MACjBY,EACAxY,EAAO0Z,WACLulD,EACAU,EACAP,EAAiB/pB,iBAElB+pB,EAAiB/pB,iBAGtB,OADArB,EAAW6B,SAAS71C,EAAQ0uD,GACrB1a,GAIDwZ,EAAAlrD,UAAA29D,cAAR,WAEE,IAAK5/D,KAAK0tD,QAAS,CACjB,IAAI/tD,EAASK,KAAKL,OAClBK,KAAK0tD,QAAU/tD,EAAOqa,UAHL,QAKfglB,EAAAv4B,WAAW4a,KACX,EACA1hB,EAAOgU,UAAU,IAGrB,MAVmB,SAcbw5C,EAAAlrD,UAAA8vD,cAAR,WAEE,IAAK/xD,KAAK2tD,QAAS,CACjB,IAAIhuD,EAASK,KAAKL,OAClBK,KAAK2tD,QAAUhuD,EAAOya,YAHL,WAIfpa,KAAKsuD,oBAAqBxvB,EAAAgE,KAAKO,KAAOvE,EAAAgE,KAAKa,MAC3C,KACAhkC,EAAO0X,gBAAgBrX,KAAK4/D,gBAC1BjgE,EAAOwV,eAAe,EAAG6pB,EAAAv4B,WAAW4a,OAGxC1hB,EAAOkb,kBAVU,WAUsB,YAEzC,MAZmB,YAgBrBsyC,EAAAlrD,UAAA04D,eAAA,SACEhtB,EACA34B,QAAA,IAAAA,MAAA,MAEA,IAAI6qD,EAAc7qD,EAAWA,EAASzP,OAAS,EAC3Cg4D,EAAesC,EAEfX,EADevxB,EAASvX,UAAU4W,mBAElCmyB,EAAexxB,EAASvX,UAAU0W,eAAevnC,OACjD65D,EAAcD,EACdxxB,EAASthB,GAAGrB,EAAA3oB,YAAYwvC,cACxBqtB,IACAE,IACA7B,GAEJ75D,OAAOm8D,GAAeX,GAEtB,IAAIv/D,EAASK,KAAKL,OAClB,IAAKK,KAAKmxD,gBAAgBxjB,GAAW,OAAOhuC,EAAOma,oBACnD,IAAIP,EAAao0B,EAASvX,UAAU7c,WAChCumD,EAAenyB,EAASthB,GAAGrB,EAAA3oB,YAAY+tD,eAG3C,GAAIyP,EAAcT,EAAa,CACxBpqD,KACHA,EAAW,IAAI5O,MAAMg5D,IACZ75D,OAAS,GAKpB,IAHA,IAAIunC,EAAiBa,EAASvX,UAAU0W,eACpCizB,EAAiBpyB,EAAS1rC,UAAUsuB,YAAY6F,UAAU5I,WAC1DwyC,GAA0B,EACrB3/D,EAAIk9D,EAAcl9D,EAAI8+D,IAAgB9+D,EAAG,CAChD,IAAI6Z,EAAc6lD,EAAe1/D,GAAG6Z,YACpC,GAAsB,OAAhBA,IAAwB6kB,EAAA1T,oBAAoBnR,EAAYoR,MAAQ,CACpE00C,GAA0B,EAC1B,OAGJ,GAAIA,EACF,IAAS3/D,EAAIk9D,EAAcl9D,EAAI8+D,IAAgB9+D,EAC7C2U,EAASlP,KACP9F,KAAKuwD,kBACSwP,EAAe1/D,GAAG6Z,YAC9B4yB,EAAezsC,GAAE,UAMlB,CACL,IAASA,EAAIk9D,EAAcl9D,EAAI8+D,IAAgB9+D,EAC7C2U,EAASlP,KAAKgnC,EAAezsC,GAAG8/C,aAAaxgD,IAE/C,IAAKmgE,EAAc,CACjB,IAAIpB,EAAW/wB,EAEf,GADAA,EAAW3tC,KAAK8xD,iBAAiBnkB,IAC5B3tC,KAAKmxD,gBAAgBxjB,GAAW,OAAOhuC,EAAOma,oBACnD6zB,EAASgB,KAAKxiB,MAAQuyC,EAAS/vB,KAAKxiB,MACpCnsB,KAAKuwC,QAAQ3O,gBAAgBpV,IAAImhB,EAAS7yB,aAAc6yB,GACxD,IAAIkvB,EAAmBtjD,EAAWy7B,eAElC,OADAh1C,KAAKstD,YAAc/zC,EACZ5Z,EAAO4X,YAAY,MACxB5X,EAAO0X,gBAAgBrX,KAAK4/D,gBAAiBjgE,EAAOgU,UAAU4pD,IAC9D59D,EAAO0Z,WAAWs0B,EAAS7yB,aAAc9F,EAAU6nD,IAClDA,KAOT,OADA78D,KAAKstD,YAAc/zC,EACfumD,EAAqBngE,EAAO8Z,iBAAiBk0B,EAAS7yB,aAAc9F,EAAUuE,EAAWy7B,gBACnFr1C,EAAO0Z,WAAWs0B,EAAS7yB,aAAc9F,EAAUuE,EAAWy7B,iBAK1EmY,EAAAlrD,UAAA27D,oBAAA,SACExnC,EACA6mC,EACAlB,EACA9oB,EACA+oB,QAAA,IAAAA,MAAA,GAEA,IAAIuB,EAAexB,EAAoBx2D,OAEvC,IAAKvF,KAAK89D,mBACR1nC,EACAmnC,EACW,GAAXvB,EACA/oB,GAEA,OAAOjzC,KAAKL,OAAOma,oBAGrB,IAAIskD,EAAuBpC,EAAUuB,EAAe,EAAIA,EACpDvoD,EAAW,IAAI5O,MAAqBg4D,GACpChpD,EAAQ,EACR4mD,IACFhnD,EAAS,GAAKgnD,EACd5mD,EAAQ,GAGV,IADA,IAAI03B,EAAiB1W,EAAU0W,eACtBzsC,EAAI,EAAGA,EAAIk9D,IAAgBl9D,IAAK+U,EACvCJ,EAASI,GAASpV,KAAKuwD,kBACrBwL,EAAoB17D,GACpBysC,EAAezsC,GAAE,KAMrB,OADAqD,OAAO0R,GAASgpD,GACTp+D,KAAKigE,iBAAiB7pC,EAAW6mC,EAAUjoD,IAIpDm4C,EAAAlrD,UAAAg+D,iBAAA,SACE7pC,EACA6mC,EACAjoD,QAAA,IAAAA,MAAA,MAEA,IAAI6qD,EAAc7qD,EAAWA,EAASzP,OAAS,EAC3Cg4D,EAAesC,EAEfX,EADe9oC,EAAU4W,mBAEzBmyB,EAAe/oC,EAAU0W,eAAevnC,OACxC65D,EAAcD,EACd/oC,EAAUsW,aACVwyB,IACAE,IACA7B,GAEJ75D,OAAOm8D,GAAeX,GAEtBl/D,KAAKsuD,mBAAmBl4B,EAAU0W,eAAgB1W,EAAU7c,WAAY6c,EAAUsW,UAClF,IAAI/sC,EAASK,KAAKL,OAGlB,GAAIkgE,EAAcT,EAAa,CACxBpqD,KACHA,EAAW,IAAI5O,MAAMg5D,IACZ75D,OAAS,GAGpB,IADA,IAAIunC,EAAiB1W,EAAU0W,eACtBzsC,EAAIk9D,EAAcl9D,EAAI8+D,IAAgB9+D,EAC7C2U,EAASlP,KAAKgnC,EAAezsC,GAAG8/C,aAAaxgD,IAIjD,IAAI4Z,EAAa6c,EAAU7c,WAE3B,OADAvZ,KAAKstD,YAAc/zC,EACZ5Z,EAAO4X,YAAY,MACxB5X,EAAO0X,gBAAgBrX,KAAK4/D,gBAC1BjgE,EAAOgU,UAAU4pD,IAEnB59D,EAAOga,mBAAmBsjD,EAAUjoD,EAAUohB,EAAUwf,sBACvDr8B,EAAWy7B,iBAGhBmY,EAAAlrD,UAAAk1D,uBAAA,SAAuBn/C,EAA6B2+C,GAIlD,IAHA,IAAIjnC,EAAc1X,EAAW0X,YACzBwwC,EAAiBxwC,EAAYnqB,OAC7B46D,EAAQ,IAAI/5D,MAAqB85D,KAC5B7/D,EAAI,EAAGA,EAAI6/D,IAAkB7/D,EACpC8/D,EAAM9/D,GAAKL,KAAKuwD,kBACd7gC,EAAYrvB,GACZy+B,EAAAgE,KAAKa,UAWT,OANAw8B,EAAMD,GAAkBlgE,KAAKuwD,kBAC3B7gC,EAAYwwC,GACZvJ,OAIK32D,KAAKL,OAAO4X,YAAY,KAAM4oD,EAAOngE,KAAKstD,YAAYtY,iBAG/DmY,EAAAlrD,UAAAm1D,+BAAA,SAA+Bp/C,EAAqC2+C,GAClE,IAAIr9C,EAAStZ,KAAKuwC,QAAQZ,qBAAqB33B,EAAYhY,KAAK04C,iBAChE,IAAKp/B,EAAQ,OAAOtZ,KAAKL,OAAOma,oBAChC,OAAQR,EAAOgS,MACb,KAAK+gC,EAAAhrB,YAAYiO,MACf,IAAI8sB,EAAcp8D,KAAK04C,gBAAgB/J,KAAKtiB,GAAE,MAC1CkjB,EAAqBj2B,EAAQk2B,eAAe6c,EAAAztB,aAAaU,YAAa88B,GAC1E,IAAK7sB,EAKH,OAJAvvC,KAAKwG,MACHq4B,EAAA96B,eAAe0rC,qCACfz3B,EAAWA,WAAW3T,MAAeiV,EAAQwB,cAExC9a,KAAKL,OAAOma,oBAErB,IAAIkiD,EAAUh8D,KAAKuwD,kBACjBv4C,EAAWA,WACHsB,EAAQjE,KAAI,KAItB,OAAOrV,KAAKi8D,kBAAkB1sB,GAC5Bv3B,EAAWiY,mBACVjY,EAAYgkD,GAOnB,OAJAh8D,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAENrE,KAAKL,OAAOma,qBAGrBqzC,EAAAlrD,UAAAo1D,0BAAA,SAA0Br/C,EAAgC2+C,GACxD,IAAIpmC,EAAcvY,EAAWuY,YACzB3vB,EAAO2vB,EAAY3vB,KACnBwnC,GAAcxnC,EAAKyE,KAAKE,OACxB3E,EAAKyE,KACL,aAAe,IAAMrF,KAAKytD,cAAcloD,OAAOT,SAAS,IACxD4zC,EAAkB14C,KAAK04C,gBACvBz2C,EAAY,IAAIoqD,EAAA5iB,kBAClBzpC,KAAKuwC,QACLnI,EACAsQ,EAAgB59B,aAAekQ,EAAApoB,gBAAkBwlC,EACjD7X,EACA,KACA87B,EAAA/qB,eAAelV,MAEbuiB,EAAO+J,EAAgB/J,KACvBhB,EAAW3tC,KAAKkxD,kCAClBjvD,KAEA0sC,EAAKnC,wBACLmC,EACApe,GAEF,IAAKod,EAAU,OAAO3tC,KAAKL,OAAOma,oBAClC9Z,KAAKstD,YAAc3f,EAASvX,UAAU/gB,KAGtC,IAAID,EAAQpV,KAAK+yD,yBAAyBplB,GAC1C,OAAOv4B,EAAQ,EACXpV,KAAKL,OAAOma,oBACZ9Z,KAAKL,OAAOgU,UAAUyB,IAQ5B+3C,EAAAlrD,UAAAq1D,4BAAA,SACEt/C,EACA2+C,EACAyJ,GAEA,IAAIzgE,EAASK,KAAKL,OACd+4C,EAAkB14C,KAAK04C,gBAG3B,OAAQ1gC,EAAWsT,MACjB,KAAKyT,EAAA3T,SAASI,KACZ,IAAIqX,EAAU7iC,KAAK6iC,QAInB,OAHK8zB,EAAevnB,iBAClBpvC,KAAKstD,YAAczqB,EAAQU,WAEtBV,EAAQ2rB,SACX7uD,EAAOoU,UAAU,GACjBpU,EAAOgU,UAAU,GAEvB,KAAKorB,EAAA3T,SAASK,KAEZ,OADAzrB,KAAKstD,YAAcxuB,EAAAgE,KAAKU,KACjB7jC,EAAOgU,UAAU,GAE1B,KAAKorB,EAAA3T,SAASM,MAEZ,OADA1rB,KAAKstD,YAAcxuB,EAAAgE,KAAKU,KACjB7jC,EAAOgU,UAAU,GAE1B,KAAKorB,EAAA3T,SAAS6P,KAEZ,IADI0T,EAAO+J,EAAgB/J,MAClBtiB,GAAE,MAET,GADIg0C,EAAa1xB,EAAKC,eAAe,QAGnC,OADA5uC,KAAKstD,YAAc+S,EAAWhrD,KACvB1V,EAAOwV,eAAekrD,EAAWjrD,MAAOirD,EAAWhrD,KAAK2/B,gBAGnE,GAAI0D,EAAgBrsB,GAAGrB,EAAA3oB,YAAYwvC,UAAW,CAC5C,IAAI3lB,EAASxoB,OAAOg1C,EAAgBxsB,QACpCxoB,OAAOwoB,EAAOZ,MAAQ+gC,EAAAhrB,YAAYiO,OAClC,IAAI5C,EAAmBxgB,EAAQ7W,KAC/B,OAAIqjC,EAAgBrsB,GAAGrB,EAAA3oB,YAAYi4B,eAC5BqU,EAAKtiB,GAAE,KACVsiB,EAAKniB,IAAG,IAERxsB,KAAKstD,YAAc5gB,EACZ/sC,EAAO4V,eAAe,EAC3BvV,KAAK4xD,wBAA+B1lC,EAAQlU,MAIlDhY,KAAKstD,YAAc5gB,EACZ/sC,EAAOwV,eAAe,EAAGu3B,EAASsI,iBAO3C,OALAh1C,KAAKwG,MACHq4B,EAAA96B,eAAegsC,+CACf/3B,EAAW3T,OAEbrE,KAAKstD,YAActtD,KAAK6iC,QAAQU,UACzB5jC,EAAOma,oBAEhB,KAAKilB,EAAA3T,SAAS4P,MACZ,IAAI2T,EAEE0xB,EADN,IADI1xB,EAAO+J,EAAgB/J,MAClBtiB,GAAE,MAET,GADIg0C,EAAa1xB,EAAKC,eAAe,QAInC,GADIc,EADkBhsC,OAAO28D,EAAWhrD,KAAK+5B,gBAClBM,KAGzB,OADA1vC,KAAKstD,YAAc5d,EAAKr6B,KACjB1V,EAAOwV,eAAekrD,EAAWjrD,MAAOs6B,EAAKr6B,KAAK2/B,gBAI/D,GAAI0D,EAAgBrsB,GAAGrB,EAAA3oB,YAAYwvC,UAAW,CAC5C,IAEInC,EAFAxjB,EAASxoB,OAAOg1C,EAAgBxsB,QAGpC,GAFAxoB,OAAOwoB,EAAOZ,MAAQ+gC,EAAAhrB,YAAYiO,OAC9BI,EAAexjB,EAAQwjB,KACjB,CACR,IAAI4wB,EAAY5wB,EAAKr6B,KAErB,OADArV,KAAKstD,YAAcgT,EACZ3gE,EAAOwV,eAAe,EAAGmrD,EAAUtrB,iBAQ9C,OALAh1C,KAAKwG,MACHq4B,EAAA96B,eAAeisC,iDACfh4B,EAAW3T,OAEbrE,KAAKstD,YAActtD,KAAK6iC,QAAQU,UACzB5jC,EAAOma,oBAKlB,IAAIR,EAAStZ,KAAKuwC,QAAQpK,kBACxBnuB,EACA0gC,EACA14C,KAAKqtD,aAEP,IAAK/zC,EAAQ,OAAO3Z,EAAOma,oBAE3B,OAAQR,EAAOgS,MACb,KAAK+gC,EAAAhrB,YAAY6N,MACf,GAAY51B,EAAQ+S,GAAGrB,EAAA3oB,YAAY8uC,SACjC,OAAOnxC,KAAKswD,sBAA6Bh3C,EAAQq9C,EAAgByJ,GAEnE,IAAIG,EAAoBjnD,EAAQjE,KAC5Bg/B,EAAqB/6B,EAAQlE,MAGjC,OAFA1R,OAAO2wC,GAAc,GACrBr0C,KAAKstD,YAAciT,EACZvgE,KAAKL,OAAOwV,eAAek/B,EAAYksB,EAAUvrB,gBAE1D,KAAKqX,EAAAhrB,YAAYrI,OACf,IAAKh5B,KAAK4vD,cAAsBt2C,GAC9B,OAAOtZ,KAAKL,OAAOma,oBAErB,IAAIwC,EAAsBhD,EAAQjE,KAElC,OADA3R,OAAO4Y,GAAcwiB,EAAAgE,KAAKa,MACbrqB,EAAQ+S,GAAGrB,EAAA3oB,YAAY8uC,SAC3BnxC,KAAKswD,sBAA8Bh3C,EAAQq9C,EAAgByJ,IAEpEpgE,KAAKstD,YAAchxC,EACZtc,KAAKL,OAAO8V,gBAAyB6D,EAAQwB,aAAcwB,EAAW04B,iBAE/E,KAAKqX,EAAAhrB,YAAYqN,UACf,OAAKp1B,EAAO+S,GAAGrB,EAAA3oB,YAAY2sD,WAQ3BhvD,KAAKstD,YAAcxuB,EAAAgE,KAAKhiB,IACRxH,EAAQ+S,GAAGrB,EAAA3oB,YAAY8uC,SAC9BnxC,KAAKL,OAAOgU,UAAsB2F,EAAQm3B,eAE5CzwC,KAAKL,OAAO8V,gBAA4B6D,EAAQwB,aAAckkB,EAAAv4B,WAAW4a,OAX9ErhB,KAAKwG,MACHq4B,EAAA96B,eAAey8D,+HACfxoD,EAAW3T,OAEbrE,KAAKstD,YAAcxuB,EAAAgE,KAAKhiB,IACjB9gB,KAAKL,OAAOma,qBAQvB,KAAKuyC,EAAAhrB,YAAY4F,mBACf,IAAI0G,EAA+Br0B,EAAQutB,QACzC,KACA6R,EAAgB/J,KAAKnC,yBAEvB,IAAMmB,IAAY3tC,KAAKmxD,gBAAgBxjB,GAAY,OAAOhuC,EAAOma,oBACjE,IAAI1E,EAAQpV,KAAK+yD,yBAAyBplB,GAE1C,OADA3tC,KAAKstD,YAAc3f,EAASvX,UAAU/gB,KAC/BrV,KAAKL,OAAOgU,UAAUyB,GAOjC,OAJApV,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAENrE,KAAKL,OAAOma,qBAGrBqzC,EAAAlrD,UAAAs1D,4BAAA,SACEv/C,EACA2+C,GAEA,IAAIh3D,EAASK,KAAKL,OAId8U,EAAOzU,KAAKgwD,4BAA4Bh4C,EAAWA,WAAYhY,KAAK6iC,QAAQU,UAAS,GACrFluB,EAAOrV,KAAKstD,YACZ38B,EAAS3wB,KAAKuwC,QAAQ5D,YAAY30B,EAAW2Y,QAEjD,OADA3wB,KAAKstD,YAAcxuB,EAAAgE,KAAKU,KACnB7S,EACEtb,EAAKgX,GAAE,OAAyBsE,EAAOtE,GAAE,KAC5ChX,EAAKgqC,gBAAgBpH,eAAetnB,GAClChxB,EAAOgV,aACLU,EAAKgX,GAAE,IACH2S,EAAA5yB,SAASovC,MACTxc,EAAA5yB,SAASmvC,MACb9mC,EACAY,EAAK8qC,aAAaxgD,IAEpBA,EAAOgU,UAAU,GACnBhU,EAAOgU,UAAU0B,EAAK4iC,eAAetnB,GAAQ,GAAQ,EAAI,GAXzChxB,EAAOma,qBAc7BqzC,EAAAlrD,UAAAu1D,yBAAA,SACEx/C,EACA2+C,EACA8J,QAAA,IAAAA,OAAA,GAEA,IAAI9gE,EAASK,KAAKL,OAElB,OAAQqY,EAAWgiB,aACjB,KAAK+E,EAAAjF,YAAYG,MACfv2B,QAAQ+8D,GACR,IAAI5wB,EAAY8mB,EAAevnB,eAC/B,OACES,GACAA,EAAU5tC,WAAajC,KAAKuwC,QAAQtO,eAE7BjiC,KAAK0gE,oBACVh9D,OAAOmsC,EAAUnjB,eAAe,GACP1U,EAAY4W,mBACrC5W,IAGJhY,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAEN1E,EAAOma,qBAEhB,KAAKilB,EAAAjF,YAAYS,MACf,IAAIomC,EAAsC3oD,EAAY1W,MAItD,OAHIm/D,IACFE,GAAcA,GAEZhK,GAAkB73B,EAAAgE,KAAKW,IAClB9jC,EAAOwU,UAAewsD,IAE/B3gE,KAAKstD,YAAcxuB,EAAAgE,KAAKY,IACjB/jC,EAAO0U,UAAUssD,IAE1B,KAAK5hC,EAAAjF,YAAYY,QACf,IAAIkmC,EAAsC5oD,EAAY1W,MAOtD,OANIm/D,IACFG,EAAWC,QACT5vB,QAAQ,GACR2vB,IAGIjK,EAAerrC,MAIrB,OACE,GAAIw1C,UAAUF,GAAW,OAAOjhE,EAAOgU,UAAU0J,QAAQujD,IACzD,MAEF,OACE,GAAIG,UAAUH,GAAW,OAAOjhE,EAAOgU,UAAU0J,QAAQujD,IACzD,MAEF,OACE,GAAII,WAAWJ,GAAW,OAAOjhE,EAAOgU,UAAU0J,QAAQujD,IAC1D,MAEF,OACE,GAAIK,WAAWL,GAAW,OAAOjhE,EAAOgU,UAAU0J,QAAQujD,IAC1D,MAEF,OACE,GAAIM,WAAWN,GAAW,OAAOjhE,EAAOgU,UAAU0J,QAAQujD,IAC1D,MAEF,OACE,GAAIO,WAAWP,GAAW,OAAOjhE,EAAOgU,UAAU0J,QAAQujD,IAC1D,MAEF,QACE,GAAIQ,YAAYR,GAAW,OAAOjhE,EAAOgU,UAAU0J,QAAQujD,IAC3D,MAEF,OACE,IAAK5gE,KAAK6iC,QAAQ2rB,SAAU,CAC1B,GAAI0S,WAAWN,GAAW,OAAOjhE,EAAOgU,UAAU0J,QAAQujD,IAC1D,MAEF,OAAOjhE,EAAOoU,UAAUsJ,QAAQujD,GAAWtjD,SAASsjD,IAEtD,OACE,IAAK5gE,KAAK6iC,QAAQ2rB,SAAU,CAC1B,GAAI2S,WAAWP,GAAW,OAAOjhE,EAAOgU,UAAU0J,QAAQujD,IAC1D,MAEF,OAAOjhE,EAAOoU,UAAUsJ,QAAQujD,GAAWtjD,SAASsjD,IAEtD,OACA,OACE,OAAOjhE,EAAOoU,UAAUsJ,QAAQujD,GAAWtjD,SAASsjD,IAEtD,QACE,GAAIS,WAAWT,GAAW,OAAOjhE,EAAOwU,UAAUmtD,WAAWV,IAC7D,MAEF,QACE,GAAIW,WAAWX,GAAW,OAAOjhE,EAAO0U,UAAUmtD,WAAWZ,IAC7D,MAEF,QACE,MAEF,QAEE,OADAl9D,QAAO,GACA/D,EAAOma,oBAMlB,OAAIonD,WAAWN,IACb5gE,KAAKstD,YAAcxuB,EAAAgE,KAAKhiB,IACjBnhB,EAAOgU,UAAU0J,QAAQujD,KACvBO,WAAWP,IACpB5gE,KAAKstD,YAAcxuB,EAAAgE,KAAKO,IACjB1jC,EAAOgU,UAAU0J,QAAQujD,MAEhC5gE,KAAKstD,YAAcxuB,EAAAgE,KAAKG,IACjBtjC,EAAOoU,UAAUsJ,QAAQujD,GAAWtjD,SAASsjD,KAGxD,KAAK7hC,EAAAjF,YAAYiB,OAEf,OADAr3B,QAAQ+8D,GACDzgE,KAAKyhE,oBAA8CzpD,EAAY1W,OAU1E,OALAtB,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAEbrE,KAAKstD,YAAcqJ,EACZh3D,EAAOma,qBAGhBqzC,EAAAlrD,UAAAw/D,oBAAA,SAAoBC,GAClB,IAAI/hE,EAASK,KAAKL,OACdkjC,EAAU7iC,KAAK6iC,QACf2qB,EAAiBxtD,KAAKwtD,eAEtBmU,EAAsCnU,EAAetsD,IAAIwgE,GAC7D,IAAKC,EAAe,CAClB,IAAIC,EAAeF,EAAYn8D,OAC3Bs8D,EAAe,IAAI9hD,WAAW,EAAmB,EAAf6hD,GACtCC,EAAa,GAA6B,IAAvBD,EACnBC,EAAa,GAAMD,IAAkB,EAAK,IAC1CC,EAAa,GAAMD,IAAiB,GAAM,IAC1CC,EAAa,GAAMD,IAAiB,GAAM,IAC1C,IAAK,IAAIvhE,EAAI,EAAGA,EAAIuhE,IAAgBvhE,EAClCwhE,EAAa,EAAQ,EAAJxhE,GAA6C,IAAnCqhE,EAAY/7D,WAAWtF,GAClDwhE,EAAa,EAAQ,EAAJxhE,GAAUqhE,EAAY/7D,WAAWtF,KAAO,EAAK,IAEhEshE,EAAgB3hE,KAAK6yD,iBAAiBgP,EAAch/B,EAAQU,UAAU6T,UACtEoW,EAAehhC,IAAIk1C,EAAaC,GAElC,IAAIG,EAAeH,EAAc5vD,OAC7BgwD,EAAa/hE,KAAKuwC,QAAQ1O,YAAY3gC,IAAI,UAE9C,OADAlB,KAAKstD,YAAcyU,GAA0Bl/B,EAAQU,UACjDV,EAAQ2rB,SACH7uD,EAAOoU,UAAUsJ,QAAQykD,GAAexkD,SAASwkD,KAE1Dp+D,OAAOw9D,WAAWY,IACXniE,EAAOgU,UAAU0J,QAAQykD,MAGlC3U,EAAAlrD,UAAAy+D,oBAAA,SAAoBsB,EAAmBtyC,EAAoCujB,GACzE,IAAIgvB,GAAW,EACXtiE,EAASK,KAAKL,OAGdsiC,EAAiBv+B,OAAO1D,KAAKuwC,QAAQtO,gBACzC,IAAKA,GAAkBA,EAAe3W,MAAQ+gC,EAAAhrB,YAAY+E,gBAAiB,OAAOzmC,EAAOma,oBACzF,IAAIooD,EAAiCjgC,EAAgB4E,SAAUm7B,IAC/D,IAAKE,EAAe,OAAOviE,EAAOma,oBAClC,IAAIqoD,EAAYD,EAAc7sD,KAE1B+sD,EAAe1yC,EAAYnqB,OAC/B,GAAI68D,EAAc,CAChB,IAAIC,EAAoBL,EAAYhtB,eAChC/gB,OAAM,EACNquC,OAAU,EACd,OAAQD,GACN,KAAKrjC,EAAAv4B,WAAW4a,IACd4S,EAASlhB,WAAkB,IAAIwvD,WAAWH,IAC1CE,EAA4B,EAAfF,EACb,MAEF,KAAKpjC,EAAAv4B,WAAW8a,IACd0S,EAASlhB,WAAkB,IAAI3M,MAAWg8D,IAC1CE,EAA4B,EAAfF,EACb,MAEF,KAAKpjC,EAAAv4B,WAAWib,IACduS,EAASlhB,WAAkB,IAAIyvD,aAAaJ,IAC5CE,EAA4B,EAAfF,EACb,MAEF,KAAKpjC,EAAAv4B,WAAWmb,IACdqS,EAASlhB,WAAkB,IAAI0vD,aAAaL,IAC5CE,EAA4B,EAAfF,EACb,MAEF,QAEE,OADA1+D,QAAO,GACA/D,EAAOma,oBAOlB,IAFA,IAAIqmD,EAAQ,IAAI/5D,MAAqBg8D,GACjC3tD,OAAI,EACCpU,EAAI,EAAGA,EAAI+hE,IAAgB/hE,EAIlC,GAHA8/D,EAAM9/D,GAAKqvB,EAAYrvB,GACnBL,KAAKuwD,kBAA8B7gC,EAAYrvB,GAAI2hE,EAAW,KAC9DA,EAAY7hB,aAAaxgD,GACzBsiE,EAEF,GADAxtD,EAAOzU,KAAKwwD,wBAAwB2P,EAAM9/D,IACtC2+B,EAAApb,gBAAgBnP,IAASuqB,EAAAt4B,aAAaya,MAExC,OADAzd,OAAOs7B,EAAAnb,kBAAkBpP,IAAS4tD,GAC1BA,GACN,KAAKrjC,EAAAv4B,WAAW4a,IACdtO,WAAkBkhB,GAAQ5zB,GAAK2+B,EAAAlb,iBAAiBrP,GAChD,MAEF,KAAKuqB,EAAAv4B,WAAW8a,IACdxO,WAAkBkhB,GAAQ5zB,GAAK4wC,QAC7BjS,EAAAjb,oBAAoBtP,GACpBuqB,EAAAhb,qBAAqBvP,IAEvB,MAEF,KAAKuqB,EAAAv4B,WAAWib,IACd3O,WAAkBkhB,GAAQ5zB,GAAK2+B,EAAA/a,iBAAiBxP,GAChD,MAEF,KAAKuqB,EAAAv4B,WAAWmb,IACd7O,WAAkBkhB,GAAQ5zB,GAAK2+B,EAAA9a,iBAAiBzP,GAChD,MAEF,QAAS/Q,QAAO,QAUlBu+D,GAAW,EAKjB,IAAIS,EAAgB1iE,KAAK6iC,QAAQU,UAAU6T,SAC3C,GAAI6qB,EAAU,CAKZ,IAAIU,EAAYD,EAAgB,EAE5BE,EAAkB,GAAM,GAAKC,IAAIP,EADd,EAC8C,GACjEQ,EAAO,IAAI/iD,WAAW4iD,EAAYC,GAClC5wD,EAAUhS,KAAK6yD,iBAAiBiQ,GAChC/wD,EAAS,EAoBb,OAjBqB,GAAjB2wD,GACFv/D,EAAA4/D,SAASjY,QAAQ94C,EAAQD,OAAQk/B,QAAQ0xB,IAAaG,EAAM/wD,GAC5DA,GAAU,IAEVrO,OAAmC,GAA5B4Z,SAAStL,EAAQD,SACxB5O,EAAA6/D,SAAS3lD,QAAQrL,EAAQD,QAAU4wD,EAAWG,EAAM/wD,GACpDA,GAAU,GAEZ5O,EAAA6/D,SAASZ,EAAcU,EAAM/wD,GAC7BA,GAAU,EACVrO,OAAOqO,GAAU4wD,GAGjBx/D,EAAA6/D,SAASV,EAAYQ,EAAM/wD,GAC3BA,GArBuB,EAwBfswD,GACN,KAAKrjC,EAAAv4B,WAAW4a,IACd,IAAShhB,EAAI,EAAGA,EAAI+hE,IAAgB/hE,EAClC8C,EAAA6/D,SAASjwD,WAAkBkhB,GAAQ5zB,GAAIyiE,EAAM/wD,GAASA,GAAU,EAElE,MAEF,KAAKitB,EAAAv4B,WAAW8a,IACd,IAASlhB,EAAI,EAAGA,EAAI+hE,IAAgB/hE,EAClC8C,EAAA4/D,SAAShwD,WAAkBkhB,GAAQ5zB,GAAIyiE,EAAM/wD,GAASA,GAAU,EAElE,MAEF,KAAKitB,EAAAv4B,WAAWib,IACd,IAASrhB,EAAI,EAAGA,EAAI+hE,IAAgB/hE,EAClC8C,EAAA8/D,SAASlwD,WAAkBkhB,GAAQ5zB,GAAIyiE,EAAM/wD,GAASA,GAAU,EAElE,MAEF,KAAKitB,EAAAv4B,WAAWmb,IACd,IAASvhB,EAAI,EAAGA,EAAI+hE,IAAgB/hE,EAClC8C,EAAA+/D,SAASnwD,WAAkBkhB,GAAQ5zB,GAAIyiE,EAAM/wD,GAASA,GAAU,EAElE,MAEF,QAEE,OADArO,QAAO,GACA/D,EAAOma,oBAMlB,OAHApW,OAAOqO,GAAU4wD,EAAYC,GAE7B5iE,KAAKstD,YAAc6U,EACK,GAAjBO,EACH/iE,EAAOoU,UACLsJ,QAAQrL,EAAQD,QAChBuL,SAAStL,EAAQD,SAEnBpS,EAAOgU,UACL0J,QAAQrL,EAAQD,SAKtB/R,KAAKstD,YAAc6U,EACnB,IAAI1P,EAASyP,EAAc1yB,eAAe6c,EAAAztB,aAAaW,aAAa,GACpE,IAAKkzB,EAKH,OAJAzyD,KAAKwG,MACHq4B,EAAA96B,eAAeu4D,+CACfrpB,EAAW5uC,MAAO69D,EAAcpnD,cAE3Bnb,EAAOma,oBAEhB,IAAIqpD,EAAkBhB,EAAUntB,eAC5B0D,EAAkB14C,KAAK04C,gBACvB6c,EAAY7c,EAAgB7D,aAAastB,GAAW,GACpD3Q,EAAQ,IAAIprD,MAAqB,EAAIg8D,GACrChtD,EAAQ,EACZo8C,EAAMp8C,KAAWzV,EAAOwX,eAAeo+C,EAAUngD,MAC/CpV,KAAK26D,eAAej3D,OAAOw+D,EAAcprB,sBACvCn3C,EAAOgU,UAAU,GACjBhU,EAAOgU,UAAUyuD,MAGrB,IAAS/hE,EAAI,EAAGA,EAAI+hE,IAAgB/hE,EAClCmxD,EAAMp8C,KAAWpV,KAAK26D,eAAelI,GACnC9yD,EAAOwV,eAAeogD,EAAUngD,MAAO+tD,GACvCxjE,EAAOgU,UAAUtT,GACjB8/D,EAAM9/D,KAOV,OAJAqD,OAAO0R,EAAQ,GAAKo8C,EAAMjsD,QAC1BisD,EAAMp8C,GAASzV,EAAOwV,eAAeogD,EAAUngD,MAAO+tD,GACtDzqB,EAAgBvD,cAAcogB,GAC9Bv1D,KAAKstD,YAAc6U,EACZxiE,EAAO4X,YAAY,KAAMi6C,EAAO2R,GAKzC,OADAnjE,KAAKstD,YAAc6U,EACZniE,KAAK26D,eAAej3D,OAAOw+D,EAAcprB,sBAC9Cn3C,EAAOgU,UAAU,GACjBhU,EAAOgU,UAAU,MAKvBw5C,EAAAlrD,UAAAw1D,qBAAA,SAAqBz/C,EAA2B2+C,GAC9C,IAAIh3D,EAASK,KAAKL,OACdkjC,EAAU7iC,KAAK6iC,QACf6V,EAAkB14C,KAAK04C,gBAGvBp/B,EAAStZ,KAAKuwC,QAAQvB,kBACxBh3B,EAAWA,WACX0gC,GAEF,IAAKp/B,EAAQ,OAAO3Z,EAAOma,oBAC3B,GAAIR,EAAOgS,MAAQ+gC,EAAAhrB,YAAY+E,gBAK7B,OAJApmC,KAAKwG,MACHq4B,EAAA96B,eAAeq/D,yEACfprD,EAAWA,WAAW3T,OAEjBrE,KAAKL,OAAOma,oBAErB,IAGIs1B,EAmBA36B,EAtBAy0B,EAAiC5vB,EACjCm5B,EAA8B,KAC9B/lB,EAAgB1U,EAAW0U,cAkB/B,KAXE+lB,GAJC/lB,GACoD,QAApD0iB,EAAiBunB,EAAevnB,iBACjCA,EAAe/iB,GAAGrB,EAAA3oB,YAAY8kC,SAEd+B,EAAerC,QAC7BuI,EAAe1iB,cACfgsB,EAAgB/J,KAAKnC,yBAGPtD,EAAe0E,0BAC7BlhB,EACAgsB,EAAgB/J,KAAKnC,wBACrBx0B,IAGgB,OAAOrY,EAAOma,oBAOlC,IAFA,IAAIupD,EAAqC5wB,EACrCqE,EAAsBrE,EAAcqE,qBAChCA,IAAwBusB,EAAuB5wB,EAAc/C,OACnEoH,EAAsBusB,EAAqBvsB,oBAe7C,OAVEriC,EADEqiC,EACK92C,KAAKi8D,kBAAkBnlB,EAAqB9+B,EAAWgW,UAAWhW,EACvE6qB,EAAQU,UAAU4c,aAAaxgD,IAK1BK,KAAKsjE,aAAa7wB,EAAez6B,GAG1ChY,KAAKstD,YAAc7a,EAAcp9B,KAC1BZ,GAGT04C,EAAAlrD,UAAAy1D,+BAAA,SACE1/C,EACA2+C,GAGA,OAAO32D,KAAKuwD,kBACVv4C,EAAWA,WACX2+C,EAAc,MAWlBxJ,EAAAlrD,UAAA01D,gCAAA,SACE7oB,EACA6nB,EACAyJ,GAEA,IAAI7vB,EAAUvwC,KAAKuwC,QACf5wC,EAASK,KAAKL,OAEd2Z,EAASi3B,EAAQ1B,sBAAsBC,EAAgB9uC,KAAK04C,iBAChE,IAAKp/B,EAAQ,OAAO3Z,EAAOma,oBAE3B,OAAQR,EAAOgS,MACb,KAAK+gC,EAAAhrB,YAAYrI,OACf,IAAKh5B,KAAK4vD,cAAsBt2C,GAC9B,OAAO3Z,EAAOma,oBAEhB,IAAIwC,EAAsBhD,EAAQjE,KAElC,OADA3R,OAAO4Y,GAAcwiB,EAAAgE,KAAKa,MACbrqB,EAAQ+S,GAAGrB,EAAA3oB,YAAY8uC,SAC3BnxC,KAAKswD,sBAA8Bh3C,EAAQq9C,EAAgByJ,IAEpEpgE,KAAKstD,YAAchxC,EACZ3c,EAAO8V,gBAAyB6D,EAAQwB,aAAcwB,EAAW04B,iBAE1E,KAAKqX,EAAAhrB,YAAYqN,UACf,IAAIxiB,EAAqB5S,EAAQ4S,OAEjC,OADAxoB,OAAkB,OAAXwoB,GAAmBA,EAAOZ,MAAQ+gC,EAAAhrB,YAAYqM,MAChD1tC,KAAK4wD,YAAkB1kC,IAG5BlsB,KAAKstD,YAAcxuB,EAAAgE,KAAKhiB,IACRxH,EAAQ+S,GAAGrB,EAAA3oB,YAAY8uC,SAC9BxxC,EAAOgU,UAAsB2F,EAAQm3B,eAEvC9wC,EAAO8V,gBAA4B6D,EAAQwB,aAAckkB,EAAAv4B,WAAW4a,MANlErhB,KAAKL,OAAOma,oBAQvB,KAAKuyC,EAAAhrB,YAAY8N,MACf,IAAIstB,EAAiB/4D,OAAO6sC,EAAQlO,wBACpC3+B,OAAe4V,EAAQ08B,cAAgB,GACvC,IAAI0mB,EAAW18D,KAAKgwD,4BAClByM,EACAz8D,KAAK6iC,QAAQU,UAAS,GAIxB,OADAvjC,KAAKstD,YAAsBh0C,EAAQjE,KAC5B1V,EAAOgW,WACJ2D,EAAQjE,KAAK+hC,SACb99B,EAAQjE,KAAKgX,GAAG,GACxBqwC,EACQpjD,EAAQjE,KAAK2/B,eACb17B,EAAQ08B,cAGpB,KAAKqW,EAAAhrB,YAAYqJ,SACf,IAAIzoC,EAAuBqX,EAAQqxB,gBACnC,GAAI1oC,EAAW,CACb,IAAI0rC,EAAW1rC,EAAU4kC,QAAQ,MACjC,IAAK8G,EAAU,OAAOhuC,EAAOma,oBAC7B,IAAIsc,EAAYuX,EAASvX,UACzB,IAAKp2B,KAAK89D,mBACR1nC,EACA,EACAuX,EAASthB,GAAGrB,EAAA3oB,YAAYwvC,UACxB/C,GAEA,OAAOnvC,EAAOma,oBAEhB,IAAIokD,EAA8D,IAApDvwB,EAASnE,eAAiB6iB,EAAA/qB,eAAerI,QACvD,GAAI0U,EAASthB,GAAGrB,EAAA3oB,YAAYwvC,UAAW,CACjC3lB,EAASxoB,OAAOiqC,EAASzhB,QAC7BxoB,OAAOwoB,EAAOZ,MAAQ+gC,EAAAhrB,YAAYiO,OAC9BmtB,EAAiB/4D,OAAO6sC,EAAQlO,wBAChCq6B,EAAW18D,KAAKgwD,4BAClByM,EACAz8D,KAAK6iC,QAAQU,UAAS,GAIxB,OADAvjC,KAAKstD,YAAcl3B,EAAU7c,WACtBvZ,KAAKi8D,kBAAkBtuB,KAAcmB,EAAgB4tB,EAAUwB,GAGtE,OADAl+D,KAAKstD,YAAcl3B,EAAU7c,WACtBvZ,KAAKi8D,kBAAkBtuB,KAAcmB,EAAgB,EAAGovB,GAOjE,OAJAl+D,KAAKwG,MACHq4B,EAAA96B,eAAesrC,oCACfP,EAAezqC,MAAkBiV,EAAQ8uB,WAAuB9uB,EAAQ4S,OAAOpnB,YAE1EnF,EAAOma,oBAQpB,OAJA9Z,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf+E,EAAezqC,OAEV1E,EAAOma,qBAGhBqzC,EAAAlrD,UAAA21D,yBAAA,SAAyB5/C,EAA+B2+C,GACtD,IAAI/kC,EAAS5Z,EAAW4Z,OACpBC,EAAS7Z,EAAW6Z,OACpB6mB,EAAkB14C,KAAK04C,gBACvBC,EAAaD,EAAgB/J,KAE7BylB,EAAWp0D,KAAKq0D,cAClBr0D,KAAKgwD,4BAA4Bh4C,EAAWH,UAAWinB,EAAAgE,KAAKU,KAAI,GAChExjC,KAAKstD,aAGP,IACGttD,KAAK6iC,QAAQ2pB,eACdxsD,KAAK04C,gBAAgBnsB,MAAMvB,EAAA3oB,YAAY8kC,QAAUnc,EAAA3oB,YAAY0yD,iBAC7D,CAEA,IAAIC,EAAkBh1D,KAAKwwD,wBAAwB4D,GACnD,GACEp1B,EAAApb,gBAAgBoxC,IAAoBh2B,EAAAt4B,aAAaya,OACjD6d,EAAAnb,kBAAkBmxC,IAAoBh2B,EAAAv4B,WAAW4a,IAEjD,OAAO2d,EAAAlb,iBAAiBkxC,GACpBh1D,KAAKgwD,4BAA4Bp+B,EAAQ+kC,EAAc,GACvD32D,KAAKgwD,4BAA4Bn+B,EAAQ8kC,EAAc,GAI3DvC,EAAWp0D,KAAKq0D,cACdr0D,KAAKgwD,4BAA4Bh4C,EAAWH,UAAWinB,EAAAgE,KAAKU,KAAI,GAChExjC,KAAKstD,aAKX,IAAIiW,EAAa5qB,EAAWO,OAC5BR,EAAgB/J,KAAO40B,EACvB,IAAIC,EAAaxjE,KAAKgwD,4BAA4Bp+B,EAAQ+kC,EAAc,GACpE8M,EAAazjE,KAAKstD,YACtBiW,EAAWlqB,OAEX,IAAIqqB,EAAa/qB,EAAWO,OAC5BR,EAAgB/J,KAAO+0B,EACvB,IAAIC,EAAa3jE,KAAKgwD,4BAA4Bn+B,EAAQ8kC,EAAc,GACpEiN,EAAa5jE,KAAKstD,YACtB5U,EAAgB/J,KAAO+0B,EAAWrqB,OAElCV,EAAW+B,cAAc6oB,EAAYG,GAErC,IAAI9J,EAAa96B,EAAAgE,KAAKkd,iBAAiByjB,EAAYG,GAAY,GAC/D,OAAKhK,GAQL4J,EAAaxjE,KAAK+3D,kBAChByL,EACAC,EACA7J,EAAU,IAGVhoC,GAEF+xC,EAAa3jE,KAAK+3D,kBAChB4L,EACAC,EACAhK,EAAU,IAGV/nC,GAEF7xB,KAAKstD,YAAcsM,EACZ55D,KAAKL,OAAO0Y,SAAS+7C,EAAUoP,EAAYG,KAxBhD3jE,KAAKwG,MACHq4B,EAAA96B,eAAeksD,mCACfj4C,EAAW3T,MAAOo/D,EAAW3+D,WAAY8+D,EAAW9+D,YAEtD9E,KAAKstD,YAAcqJ,EACZ32D,KAAKL,OAAOma,sBAsBvBqzC,EAAAlrD,UAAA41D,8BAAA,SAA8B7/C,EAAoC2+C,GAChE,IAAIh3D,EAASK,KAAKL,OACd+4C,EAAkB14C,KAAK04C,gBAGvBmrB,EAAW7jE,KAAKuwD,kBAClBv4C,EAAWwa,QACXmkC,GAAkB73B,EAAAgE,KAAKa,KACnB7E,EAAAgE,KAAKhiB,IACL61C,EAAc,KAKpB,GAAI33B,EAAApb,gBAAgBigD,IAAa7kC,EAAAt4B,aAAag4C,YAAa,OAAOmlB,EAClE,IAEIrvD,EACA07C,EACA4T,EAJAxW,EAActtD,KAAKstD,YAMvB,OAAQt1C,EAAWoX,UACjB,KAAKnE,EAAAC,MAAMm5B,UAGT,GAAIrkD,KAAKstD,YAAYjhC,GAAE,KAKrB,OAJArsB,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAENrE,KAAKL,OAAOma,oBAGrB,OAAQwzC,EAAYhiC,MAClB,OACA,OACA,OACA,OACA,OACA,OACA,QACE9W,EAAKwqB,EAAA5yB,SAAS4kD,OACdd,EAAalxB,EAAAv4B,WAAW4a,IACxByiD,EAAYnkE,EAAOgU,UAAU,GAC7B,MAEF,OACA,OAEEa,GADIquB,EAAU7iC,KAAK6iC,SACN2rB,SACTxvB,EAAA5yB,SAAS6tD,OACTj7B,EAAA5yB,SAAS4kD,OACbd,EAAartB,EAAQ8uB,eACrBmS,EAAYxW,EAAYlN,YAAYzgD,GACpC,MAEF,OACA,OACE6U,EAAKwqB,EAAA5yB,SAAS6tD,OACd/J,EAAalxB,EAAAv4B,WAAW8a,IACxBuiD,EAAYnkE,EAAOoU,UAAU,GAC7B,MAEF,QACES,EAAKwqB,EAAA5yB,SAAS8tD,OACdhK,EAAalxB,EAAAv4B,WAAWib,IACxBoiD,EAAYnkE,EAAOwU,UAAU,GAC7B,MAEF,QACEK,EAAKwqB,EAAA5yB,SAAS+tD,OACdjK,EAAalxB,EAAAv4B,WAAWmb,IACxBkiD,EAAYnkE,EAAO0U,UAAU,GAC7B,MAEF,QAEE,OADA3Q,QAAO,GACA/D,EAAOma,oBAGlB,MAEF,KAAKmR,EAAAC,MAAMo5B,YAGT,GAAItkD,KAAKstD,YAAYjhC,GAAE,KAKrB,OAJArsB,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAENrE,KAAKL,OAAOma,oBAGrB,OAAQwzC,EAAYhiC,MAClB,OACA,OACA,OACA,OACA,OACA,OACA,QACE9W,EAAKwqB,EAAA5yB,SAASguD,OACdlK,EAAalxB,EAAAv4B,WAAW4a,IACxByiD,EAAYnkE,EAAOgU,UAAU,GAC7B,MAEF,OACA,OACE,IAAIkvB,EACJruB,GADIquB,EAAU7iC,KAAK6iC,SACN2rB,SACTxvB,EAAA5yB,SAASiuD,OACTr7B,EAAA5yB,SAASguD,OACblK,EAAartB,EAAQ8uB,eACrBmS,EAAYxW,EAAYlN,YAAYzgD,GACpC,MAEF,OACA,OACE6U,EAAKwqB,EAAA5yB,SAASiuD,OACdnK,EAAalxB,EAAAv4B,WAAW8a,IACxBuiD,EAAYnkE,EAAOoU,UAAU,GAC7B,MAEF,QACES,EAAKwqB,EAAA5yB,SAASkuD,OACdpK,EAAalxB,EAAAv4B,WAAWib,IACxBoiD,EAAYnkE,EAAOwU,UAAU,GAC7B,MAEF,QACEK,EAAKwqB,EAAA5yB,SAASmuD,OACdrK,EAAalxB,EAAAv4B,WAAWmb,IACxBkiD,EAAYnkE,EAAO0U,UAAU,GAC7B,MAEF,QAEE,OADA3Q,QAAO,GACA/D,EAAOma,oBAGlB,MAEF,QAEE,OADApW,QAAO,GACA/D,EAAOma,oBAKlB,GAAI68C,GAAkB73B,EAAAgE,KAAKa,KACzB,OAAO3jC,KAAK02D,2BAA2B1+C,EAAWwa,QAChD7yB,EAAOgV,aAAaH,EAClBqvD,EACAC,IAEF,GAKJ,IAAIvO,EAAY7c,EAAgB7D,aAAayY,GAAa,GACtDyW,EAAW/jE,KAAK02D,2BAA2B1+C,EAAWwa,QACxD7yB,EAAOgV,aAAaH,EAClBxU,KAAKL,OAAOwV,eAAeogD,EAAUngD,MAAO86C,GAC5C4T,IAEF,GAEF9jE,KAAKstD,YAAc5pD,OAAO6xD,GAAWlgD,KACrCqjC,EAAgBvD,cAAqBogB,GAErC,IAAIlhB,EAAqBkhB,EAAWngD,MACpC,OAAOzV,EAAO4X,YAAY,MACxB5X,EAAOwX,eAAek9B,EAAYwvB,GAClCE,EACApkE,EAAOwV,eAAek/B,EAAY6b,IACjCA,IAGL/C,EAAAlrD,UAAA61D,6BAAA,SACE9/C,EACA2+C,GAEA,IAEIliD,EAFA9U,EAASK,KAAKL,OACdk6D,GAAW,EAGf,OAAQ7hD,EAAWoX,UACjB,KAAKnE,EAAAC,MAAM0V,KAWT,GAVAnsB,EAAOzU,KAAKuwD,kBACVv4C,EAAWwa,QACXmkC,GAAkB73B,EAAAgE,KAAKa,KACnB7E,EAAAgE,KAAKhiB,IACL61C,EAAc,KAMhB32D,KAAKstD,YAAYjhC,GAAE,KAAuB,CAE5C,GADI+iB,EAAiBpvC,KAAKstD,YAAYle,eAGpC,GADIiJ,EAAWjJ,EAAeI,eAAe6c,EAAAztB,aAAagC,MAC5C,CACZnsB,EAAOzU,KAAK67D,qBAAqBxjB,EAAUrgC,EAAWwa,QAAS/d,EAAMuD,GACrE,MAOJ,OAJAhY,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAEN1E,EAAOma,oBAIhB,MAEF,KAAKmR,EAAAC,MAAM4V,MACT,GAAI9oB,EAAWwa,QAAQlH,MAAQyT,EAAA3T,SAASG,UAClBvT,EAAWwa,QAASwH,aAAe+E,EAAAjF,YAAYY,SAC/C1iB,EAAWwa,QAASwH,aAAe+E,EAAAjF,YAAYS,OAClE,CAED9lB,EAAOzU,KAAKw3D,yBAA4Cx/C,EAAWwa,QAASmkC,GAAgB,GAExF32D,KAAK6iC,QAAQ3iB,WAAWlgB,KAAK+zD,iBAAiBt/C,EAAMuD,EAAW3T,OACnE,MAaF,GAVAoQ,EAAOzU,KAAKuwD,kBACVv4C,EAAWwa,QACXmkC,GAAkB73B,EAAAgE,KAAKa,KACnB7E,EAAAgE,KAAKhiB,IACL61C,EAAc,KAMhB32D,KAAKstD,YAAYjhC,GAAE,KAAuB,CAE5C,GADI+iB,EAAiBpvC,KAAKstD,YAAYle,eAGpC,GADIiJ,EAAWjJ,EAAeI,eAAe6c,EAAAztB,aAAakC,OAC5C,CACZrsB,EAAOzU,KAAK67D,qBAAqBxjB,EAAUrgC,EAAWwa,QAAS/d,EAAMuD,GACrE,MAOJ,OAJAhY,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAEN1E,EAAOma,oBAGhB,OAAQ9Z,KAAKstD,YAAYhiC,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACE7W,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASguD,OAAQz6D,EAAOgU,UAAU,GAAIc,GACjE,MAEF,OACA,OACEA,EAAO9U,EAAOgV,aACZ3U,KAAK6iC,QAAQ2rB,SACTxvB,EAAA5yB,SAASiuD,OACTr7B,EAAA5yB,SAASguD,OACbp6D,KAAKstD,YAAYnN,aAAaxgD,GAC9B8U,GAEF,MAEF,OACA,OACEA,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASiuD,OAAQ16D,EAAOoU,UAAU,GAAIU,GACjE,MAEF,QACEA,EAAO9U,EAAO4U,YAAYyqB,EAAAj2B,QAAQi7D,OAAQvvD,GAC1C,MAEF,QACEA,EAAO9U,EAAO4U,YAAYyqB,EAAAj2B,QAAQk7D,OAAQxvD,GAC1C,MAEF,QACE/Q,QAAO,GACP+Q,EAAO9U,EAAOma,oBAGlB,MAEF,KAAKmR,EAAAC,MAAMm5B,UAYT,GAXAwV,GAAW,EACXplD,EAAOzU,KAAKuwD,kBACVv4C,EAAWwa,QACXmkC,GAAkB73B,EAAAgE,KAAKa,KACnB7E,EAAAgE,KAAKhiB,IACL61C,EAAc,KAMhB32D,KAAKstD,YAAYjhC,GAAE,KAAuB,CAE5C,GADI+iB,EAAiBpvC,KAAKstD,YAAYle,eAGpC,GADIiJ,EAAWjJ,EAAeI,eAAe6c,EAAAztB,aAAaiC,YAC5C,CACZpsB,EAAOzU,KAAK67D,qBAAqBxjB,EAAUrgC,EAAWwa,QAAS/d,EAAMuD,GACrE,MAOJ,OAJAhY,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAEN1E,EAAOma,oBAGhB,OAAQ9Z,KAAKstD,YAAYhiC,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACE7W,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAAS4kD,OAAQv8C,EAAMzU,KAAKL,OAAOgU,UAAU,IACxE,MAEF,OACA,OACEc,EAAO9U,EAAOgV,aACZ3U,KAAK6iC,QAAQ2rB,SACTxvB,EAAA5yB,SAAS6tD,OACTj7B,EAAA5yB,SAAS4kD,OACbv8C,EACAzU,KAAKstD,YAAYlN,YAAYzgD,IAE/B,MAEF,OACA,OACE8U,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAAS6tD,OAAQxlD,EAAM9U,EAAOoU,UAAU,IACnE,MAEF,QACEU,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAAS8tD,OAAQzlD,EAAM9U,EAAOwU,UAAU,IACnE,MAEF,QACEM,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAAS+tD,OAAQ1lD,EAAM9U,EAAO0U,UAAU,IACnE,MAEF,QACE3Q,QAAO,GACP+Q,EAAO9U,EAAOma,oBAGlB,MAEF,KAAKmR,EAAAC,MAAMo5B,YAYT,GAXAuV,GAAW,EACXplD,EAAOzU,KAAKuwD,kBACVv4C,EAAWwa,QACXmkC,GAAkB73B,EAAAgE,KAAKa,KACnB7E,EAAAgE,KAAKhiB,IACL61C,EAAc,KAMhB32D,KAAKstD,YAAYjhC,GAAE,KAAuB,CAE5C,GADI+iB,EAAiBpvC,KAAKstD,YAAYle,eAGpC,GADIiJ,EAAWjJ,EAAeI,eAAe6c,EAAAztB,aAAamC,YAC5C,CACZtsB,EAAOzU,KAAK67D,qBAAqBxjB,EAAUrgC,EAAWwa,QAAS/d,EAAMuD,GACrE,MAOJ,OAJAhY,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAEN1E,EAAOma,oBAGhB,OAAQ9Z,KAAKstD,YAAYhiC,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACE7W,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASguD,OAAQ3lD,EAAM9U,EAAOgU,UAAU,IACnE,MAEF,OACA,OACEc,EAAO9U,EAAOgV,aACZ3U,KAAK6iC,QAAQ2rB,SACTxvB,EAAA5yB,SAASiuD,OACTr7B,EAAA5yB,SAASguD,OACb3lD,EACAzU,KAAKstD,YAAYlN,YAAYzgD,IAE/B,MAEF,OACA,OACE8U,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASiuD,OAAQ5lD,EAAM9U,EAAOoU,UAAU,IACnE,MAEF,QACEU,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASkuD,OAAQ7lD,EAAM9U,EAAOwU,UAAU,IACnE,MAEF,QACEM,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASmuD,OAAQ9lD,EAAM9U,EAAO0U,UAAU,IACnE,MAEF,QACE3Q,QAAO,GACP+Q,EAAO9U,EAAOma,oBAGlB,MAEF,KAAKmR,EAAAC,MAAM25B,YAWT,GAVApwC,EAAOzU,KAAKuwD,kBACVv4C,EAAWwa,QACXmkC,GAAkB73B,EAAAgE,KAAKa,KACnB7E,EAAAgE,KAAKhiB,IACL61C,EAAc,KAMhB32D,KAAKstD,YAAYjhC,GAAE,KAErB,GADI+iB,EAAiBpvC,KAAKstD,YAAYle,eAGpC,GADIiJ,EAAWjJ,EAAeI,eAAe6c,EAAAztB,aAAaoC,KAC5C,CACZvsB,EAAOzU,KAAK67D,qBAAqBxjB,EAAUrgC,EAAWwa,QAAS/d,EAAMuD,GACrE,MAMNvD,EAAOzU,KAAKkkE,eAAezvD,EAAMzU,KAAKstD,aACtCttD,KAAKstD,YAAcxuB,EAAAgE,KAAKU,KACxB,MAEF,KAAKvY,EAAAC,MAAM45B,MAaT,GAZArwC,EAAOzU,KAAKuwD,kBACVv4C,EAAWwa,QACXmkC,GAAkB73B,EAAAgE,KAAKa,KACnB7E,EAAAgE,KAAKhiB,IACL61C,EAAetqC,GAAE,GACfyS,EAAAgE,KAAKG,IACL0zB,EAAc,KAMlB32D,KAAKstD,YAAYjhC,GAAE,KAAuB,CAC5C,IAAI+iB,EAEEiJ,EADN,GADIjJ,EAAiBpvC,KAAKstD,YAAYle,eAGpC,GADIiJ,EAAWjJ,EAAeI,eAAe6c,EAAAztB,aAAaqC,aAC5C,CACZxsB,EAAOzU,KAAK67D,qBAAqBxjB,EAAUrgC,EAAWwa,QAAS/d,EAAMuD,GACrE,MAOJ,OAJAhY,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAEN1E,EAAOma,oBAUhB,OARErF,EAAOzU,KAAK+3D,kBACVtjD,EACAzU,KAAKstD,YAAattD,KAAKstD,YAAY6N,QAAO,IAE1CnjD,EAAWwa,SAIPxyB,KAAKstD,YAAYhiC,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACE7W,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASuvD,OAAQlnD,EAAM9U,EAAOgU,WAAW,IACpE,MAEF,OACA,OACEc,EAAO9U,EAAOgV,aACZ3U,KAAK6iC,QAAQ2rB,SACTxvB,EAAA5yB,SAASwvD,OACT58B,EAAA5yB,SAASuvD,OACblnD,EACAzU,KAAKstD,YAAYjN,eAAe1gD,IAElC,MAEF,OACA,OACE8U,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASwvD,OAAQnnD,EAAM9U,EAAOoU,WAAW,GAAI,IACxE,MAEF,QACErQ,QAAO,GACP+Q,EAAO9U,EAAOma,oBAGlB,MAEF,KAAKmR,EAAAC,MAAM+3B,OAKT,OAJAjjD,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf/xB,EAAW3T,OAEN1E,EAAOma,oBAEhB,QAEE,OADApW,QAAO,GACA/D,EAAOma,oBAGlB,OAAO+/C,EACH75D,KAAK02D,2BAA2B1+C,EAAWwa,QAAS/d,EAAMkiD,GAAkB73B,EAAAgE,KAAKa,MACjFlvB,GAIN04C,EAAAlrD,UAAA+1D,uBAAA,SAAuBvjD,EAAqBY,GAC1C,IAAI1V,EAASK,KAAKL,OACdgvC,EAAO3uC,KAAK04C,gBAAgB/J,KAChC,OAAQt5B,EAAKiW,MACX,OACMqjB,EAAKqM,YAAYvmC,EAAMY,KACzBZ,EAAOzU,KAAK6iC,QAAQiqB,WAAU,GAC1BntD,EAAO4U,YAAYyqB,EAAAj2B,QAAQo7D,cAAe1vD,GAC1C9U,EAAOgV,aAAaqqB,EAAA5yB,SAASqxC,OAC3B99C,EAAOgV,aAAaqqB,EAAA5yB,SAASkxC,OAC3B7oC,EACA9U,EAAOgU,UAAU,KAEnBhU,EAAOgU,UAAU,MAGzB,MAEF,OACMg7B,EAAKqM,YAAYvmC,EAAMY,KACzBZ,EAAOzU,KAAK6iC,QAAQiqB,WAAU,GAC1BntD,EAAO4U,YAAYyqB,EAAAj2B,QAAQq7D,eAAgB3vD,GAC3C9U,EAAOgV,aAAaqqB,EAAA5yB,SAASqxC,OAC3B99C,EAAOgV,aAAaqqB,EAAA5yB,SAASkxC,OAC3B7oC,EACA9U,EAAOgU,UAAU,KAEnBhU,EAAOgU,UAAU,MAGzB,MAEF,OACMg7B,EAAKqM,YAAYvmC,EAAMY,KACzBZ,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASgxC,OAClC3oC,EACA9U,EAAOgU,UAAU,OAGrB,MAEF,OACMg7B,EAAKqM,YAAYvmC,EAAMY,KACzBZ,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASgxC,OAClC3oC,EACA9U,EAAOgU,UAAU,SAGrB,MAEF,QACMg7B,EAAKqM,YAAYvmC,EAAMY,KACzBZ,EAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASgxC,OAClC3oC,EACA9U,EAAOgU,UAAU,KAMzB,OAAOc,GAIT04C,EAAAlrD,UAAAiiE,eAAA,SAAezvD,EAAqBY,GAClC,IAAI1V,EAASK,KAAKL,OAClB,OAAQ0V,EAAKiW,MACX,OACA,OACA,OACA,OACA,QACE7W,EAAOzU,KAAKg4D,uBAAuBvjD,EAAMY,GAG3C,OACA,OACE,OAAO1V,EAAO4U,YAAYyqB,EAAAj2B,QAAQ+0C,OAAQrpC,GAE5C,OACA,OACE,OAAO9U,EAAO4U,YAAYyqB,EAAAj2B,QAAQg1C,OAAQtpC,GAE5C,OACA,OACE,OAAO9U,EAAO4U,YAAyB,IAAbc,EAAKmoC,KAAaxe,EAAAj2B,QAAQg1C,OAAS/e,EAAAj2B,QAAQ+0C,OAAQrpC,GAE/E,QACE,OAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASivC,MAAO5mC,EAAM9U,EAAOwU,UAAU,IAEpE,QACE,OAAOxU,EAAOgV,aAAaqqB,EAAA5yB,SAASkvC,MAAO7mC,EAAM9U,EAAO0U,UAAU,IAEpE,QAEE,OADA3Q,QAAO,GACA/D,EAAOgU,UAAU,KAM9Bw5C,EAAAlrD,UAAAoyD,cAAA,SAAc5/C,EAAqBY,GACjC,IAAI1V,EAASK,KAAKL,OAClB,OAAQ0V,EAAKiW,MACX,OACA,OACA,OACA,OACA,QACE7W,EAAOzU,KAAKg4D,uBAAuBvjD,EAAMY,GAG3C,OACA,OACE,OAAOZ,EAET,OACA,OACE,OAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASovC,MAAO/mC,EAAM9U,EAAOoU,UAAU,IAEpE,OACA,OACE,OAAoB,IAAbsB,EAAKmoC,KACR79C,EAAOgV,aAAaqqB,EAAA5yB,SAASovC,MAAO/mC,EAAM9U,EAAOoU,UAAU,IAC3DU,EAEN,QACE,OAAO9U,EAAOgV,aAAaqqB,EAAA5yB,SAASqvC,MAAOhnC,EAAM9U,EAAOwU,UAAU,IAEpE,QACE,OAAOxU,EAAOgV,aAAaqqB,EAAA5yB,SAASsvC,MAAOjnC,EAAM9U,EAAO0U,UAAU,IAEpE,QAEE,OADA3Q,QAAO,GACA/D,EAAOgU,UAAU,KAM9Bw5C,EAAAlrD,UAAAqhE,aAAA,SAAa7wB,EAAsBQ,WAC7BtzC,EAASK,KAAKL,OACd+4C,EAAkB14C,KAAK04C,gBACvBiZ,EAAiB3xD,KAAK6iC,QAAQ8uB,eAG9B4D,EAAY7c,EAAgB7D,aAAapC,EAAcp9B,MAAM,GAC7DkhD,EAAe,IAAInwD,MAQvB,GAPAmwD,EAAazwD,KACXnG,EAAOwX,eAAeo+C,EAAUngD,MAC9Bg3C,EAAAiY,gBAAuBrkE,KAAMyyC,EAAeQ,KAK5CR,EAAcpf,YAChB,IAAmB,IAAA4e,EAAA7M,EAAAqN,EAAcpf,QAAQY,UAAQuR,EAAAyM,EAAA3M,QAAAE,EAAAD,KAAAC,EAAAyM,EAAA3M,OAAE,CAA9C,IAAIxI,EAAM0I,EAAAlkC,MACb,GAAIw7B,EAAOxR,MAAQ+gC,EAAAhrB,YAAY8N,MAAO,CACpC,IAAIm1B,EAAexnC,EACfoa,EAAYotB,EAAMjvD,KAClBkvD,EAAkBrtB,EAAUlC,eAC5BiC,EAAmBqtB,EAAMriE,UAAUsuB,YAEvC,GADA7sB,QAAQ4gE,EAAM/3C,MAAMvB,EAAA3oB,YAAY6uC,QAC5B+F,EAAiB/8B,YACnBq8C,EAAazwD,KAAKnG,EAAOqW,YAAYkhC,EAAUE,SAC7Cz3C,EAAOwV,eAAeogD,EAAUngD,MAAOu8C,GACvC3xD,KAAKuwD,kBACHtZ,EAAiB/8B,YACjBg9B,EAAS,KAIXqtB,EACAD,EAAMtuB,mBAEH,CAEL,IAAItY,EAAoC4mC,EAAMriE,UAAUsuB,YAAamN,eACrE64B,EAAazwD,KAAKnG,EAAOqW,YAAYkhC,EAAUE,SAC7Cz3C,EAAOwV,eAAeogD,EAAUngD,MAAOu8C,GACvCj0B,GAAkB,EACd/9B,EAAOwV,eAAe,EAAIuoB,EAAgB6mC,GAC1CrtB,EAAUiJ,aAAaxgD,GACzB4kE,EACFD,EAAMtuB,mHAchB,OANAugB,EAAazwD,KACXnG,EAAOwV,eAAeogD,EAAUngD,MAAOu8C,IAGzCjZ,EAAgBvD,cAAcogB,GAC9Bv1D,KAAKstD,YAAc7a,EAAcp9B,KAC1B1V,EAAO4X,YAAY,KAAMg/C,EAAc5E,IAIhDxE,EAAAlrD,UAAA2vD,wBAAA,SAAwBnf,EAAsBQ,GAE5C,IAAItzC,EAASK,KAAKL,OACdgyD,EAAiB3xD,KAAK6iC,QAAQ8uB,eAElC,OADA3xD,KAAKstD,YAAc7a,EAAcp9B,KAC1B1V,EAAO0Y,SACZs5C,GAAkB3yB,EAAAv4B,WAAW8a,IACzB5hB,EAAOgV,aACLqqB,EAAA5yB,SAASovC,MACT77C,EAAOwV,eAAe,EAAG6pB,EAAAv4B,WAAW8a,KACpC5hB,EAAOoU,UAAU,IAEnBpU,EAAOwV,eAAe,EAAG6pB,EAAAv4B,WAAW4a,KACxC1hB,EAAOwV,eAAe,EAAGw8C,GACzBhyD,EAAO4V,eAAe,EACpBvV,KAAKsjE,aAAa7wB,EAAeQ,MAMvCka,EAAAlrD,UAAA8xD,iBAAA,SAAiBt/C,EAAqBpQ,GACpC,IAAIq0C,EAAkB14C,KAAK04C,gBACvB3zC,EAASV,EAAMU,OACfA,EAAO+2B,eAAiB,IAAG/2B,EAAO+2B,eAAiB97B,KAAKL,OAAOsjB,iBAAiBle,EAAOC,iBAC3FX,EAAMqxC,aAAejhC,EACrBikC,EAAgBjF,eAAe3tC,KAAKzB,IAExC8oD,EAh9NA,CAA8BtuB,EAAA34B,mBAo9N9B,SAAAwqD,EAA0B3gC,EAAkBqY,GAC1C,YAD0C,IAAAA,MAAqBrY,EAAQqY,YAC/DrY,EAAQzE,MACd,KAAK+gC,EAAAhrB,YAAY7G,SAEf,OADItO,EAAoB6D,EAAS7D,QAAqB6D,EAAS9tB,UAAUiqB,QAErEwkC,EAAiBxkC,IAChB6D,EAAQ1D,GAAGrB,EAAA3oB,YAAYwvC,UAAY7mB,EAAAtoB,mBAAqBsoB,EAAAroB,kBACzDylC,EACAA,EAEN,KAAKikB,EAAAhrB,YAAY8N,MAMjB,KAAKkd,EAAAhrB,YAAYqN,UAEf,OAAOgiB,EADHxkC,EAASxoB,OAAmBqsB,EAAS7D,UAElC6D,EAAQ1D,GAAGrB,EAAA3oB,YAAYwvC,UAAY7mB,EAAAtoB,mBAAqBsoB,EAAAroB,kBACzDylC,EAER,KAAKikB,EAAAhrB,YAAYiO,MAEf,OADIpjB,EAAiB6D,EAAS9tB,UAAUiqB,QAEpCwkC,EAAiBxkC,GACjBlB,EAAAroB,iBACAylC,EACAA,EAEN,QACE,IAAIlc,EACJ,OADIA,EAAS6D,EAAQ7D,QAEjBwkC,EAAiBxkC,GACjBlB,EAAAroB,iBACAylC,EACAA,GAx/NG1oC,EAAAytD,4YC3Ob,IAAAniC,EAAA7qB,EAAA,GAMAksD,EAAAlsD,EAAA,GAIA8qB,EAAA9qB,EAAA,GAQA0+B,EAAA1+B,EAAA,GAKAgD,EAAAhD,EAAA,GAIA4+B,EAAA5+B,EAAA,GAuDMqkE,EAAex5C,EAAAloB,eAAiB,cAGtC2hE,EAAA,SAAArsC,GAcE,SAAAqsC,IAAA,IAAAnsC,EACEF,EAAA53B,KAAAR,OAAOA,YAVTs4B,EAAAosC,QAAoB,IAAIt+D,MAExBkyB,EAAAqsC,QAAuB,IAAI94B,IAE3BvT,EAAAssC,QAAuB,IAAI/4B,IAE3BvT,EAAAguB,UAAmC,KAoc3BhuB,EAAAusC,8BAAqC,EAsbrCvsC,EAAAwsC,oBAAuC,KAr3B7CxsC,EAAKiY,QAAU,IAAI8b,EAAA5qB,QAAQnJ,EAAKnyB,eAiqGpC,OAjrG4BkyB,EAAAosC,EAAArsC,GAoB1BqsC,EAAAxiE,UAAA8iE,UAAA,SACE1/D,EACAgvB,EACAqU,GAEA,IAAI1jC,EAAiB7B,EAAAoxB,cAAcF,GAC/BK,EAAeqK,EAAApK,mBAAmB3vB,GAGtC,IAAIhF,KAAK4kE,QAAQ99B,IAAIpS,GAArB,CACA10B,KAAK4kE,QAAQ94B,IAAIpX,GACjB10B,KAAK2kE,QAAQ74B,IAAIpX,GAGjB,IAAI3vB,EAAS,IAAIg6B,EAAApD,OACf32B,EACAK,EACAqjC,EACI3J,EAAAtD,WAAWQ,MACX5H,EAAKG,WAAWxJ,EAAAloB,iBAAmBuxB,EAAK2wC,QAAQh6C,EAAA1oB,eAAgB0oB,EAAAloB,eAAeyC,QAAU,EACvFw5B,EAAAtD,WAAWS,QACX6C,EAAAtD,WAAW0R,SAEfoD,EAAUvwC,KAAKuwC,QACnBA,EAAQhO,QAAQz8B,KAAKf,GAGjBA,EAAOC,gBAAkBw/D,GAC3Bz/D,EAAOynB,IAAIxB,EAAA3oB,YAAY2lC,SAIzB,IAAIi9B,EAAK,IAAIh6C,EAAAg7B,UAAUlhD,EAAQwrC,EAAQpqC,aACvC8+D,EAAG3e,UAAYtmD,KAAKsmD,UACpBvhD,EAAO82B,UAAYopC,EAEnB,IADA,IAAIpyC,EAAa9tB,EAAO8tB,YAChBoyC,EAAGjc,KAAK/9B,EAAAC,MAAMu9B,YAAY,CAChC,IAAI90B,EAAY3zB,KAAKklE,uBAAuBD,GACxCtxC,IACFA,EAAUzH,OAASnnB,EACnB8tB,EAAW/sB,KAAK6tB,IAGpBsxC,EAAG9Y,WAILsY,EAAAxiE,UAAAijE,uBAAA,SACED,EACA/8B,QAAA,IAAAA,MAAA,MAOA,IALA,IAAI/b,EAAQnB,EAAA3oB,YAAY+pB,KACpB+4C,GAAiB,EAGjB7xC,EAAqC,KAClC2xC,EAAGjc,KAAK/9B,EAAAC,MAAM68B,KAAK,CACpBod,EAAW,IAAGA,EAAWF,EAAG/e,UAChC,IAAIxe,EAAY1nC,KAAKolE,eAAeH,GAC/Bv9B,GAIApU,IAAYA,MACjBA,EAAWxtB,KAAK4hC,IAJd1nC,KAAKqlE,cAAcJ,GAQvB94C,GAAU84C,EAAGlgE,OAAOonB,MAAQnB,EAAA3oB,YAAY2lC,QAGxC,IAAIs9B,EAAmB,EACnBC,EAAiB,EACjBN,EAAGjc,KAAK/9B,EAAAC,MAAMuR,UACZwoC,EAAGjc,KAAK/9B,EAAAC,MAAMiiB,UAChBntC,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACfk7B,EAAG5gE,SAGH8gE,EAAW,IAAGA,EAAWF,EAAG/e,UAChC/5B,GAASnB,EAAA3oB,YAAYo6B,OACrB6oC,EAAcL,EAAG/e,SACjBqf,EAAYN,EAAGjf,KAGjB,IAEIwf,EAAgC,MAAbt9B,GAAqBA,EAAU7b,GAAGrB,EAAA3oB,YAAY+kC,SACjE69B,EAAGjc,KAAK/9B,EAAAC,MAAMkpB,UACZ+wB,EAAW,IAAGA,EAAWF,EAAG/e,UAC5Bsf,GACFxlE,KAAKwG,MACHq4B,EAAA96B,eAAe0hE,gEACfR,EAAG5gE,SAGP8nB,GAASnB,EAAA3oB,YAAY+xC,QAAUppB,EAAA3oB,YAAY+kC,SAClCo+B,IACTr5C,GAASnB,EAAA3oB,YAAY+kC,SAIvB,IAAIzT,EAA8B,KAG9B+xC,EAAQT,EAAGvc,OAEf,OADIyc,EAAW,IAAGA,EAAWF,EAAG7e,cACxBsf,GACN,KAAKz6C,EAAAC,MAAMgmB,MAGT,GAFA+zB,EAAG3/B,OACHnZ,GAASnB,EAAA3oB,YAAY6uC,MACjB+zB,EAAGjc,KAAK/9B,EAAAC,MAAMwiB,MAAO,CACvB/Z,EAAY3zB,KAAK2lE,UAAUV,EAAI94C,EAAOmH,EAAY6xC,GAClD,MAEAxxC,EAAY3zB,KAAK4lE,cAAcX,EAAI94C,EAAOmH,EAAY6xC,GACtD7xC,EAAa,KAEf,MAEF,KAAKrI,EAAAC,MAAMu3B,IAAKt2B,GAASnB,EAAA3oB,YAAYogD,IACrC,KAAKx3B,EAAAC,MAAMg4B,IACT+hB,EAAG3/B,OACH3R,EAAY3zB,KAAK4lE,cAAcX,EAAI94C,EAAOmH,EAAY6xC,GACtD7xC,EAAa,KACb,MAEF,KAAKrI,EAAAC,MAAMwiB,KACTu3B,EAAG3/B,OACH3R,EAAY3zB,KAAK2lE,UAAUV,EAAI94C,EAAOmH,EAAY6xC,GAClD7xC,EAAa,KACb,MAEF,KAAKrI,EAAAC,MAAMsP,SACTyqC,EAAG3/B,OACH3R,EAAY3zB,KAAK6lE,cAAcZ,EAAI94C,EAAOmH,EAAY6xC,GACtD7xC,EAAa,KACb,MAEF,KAAKrI,EAAAC,MAAMu2B,SACT,IAAI0H,EAAQ8b,EAAG/b,OAEf,GADA+b,EAAG3/B,QACE2/B,EAAGjc,KAAK/9B,EAAAC,MAAMokB,OAAQ,CACzB21B,EAAG1b,MAAMJ,GACTx1B,EAAY3zB,KAAK8lE,eAAeb,GAAI,GACpC,MAEAA,EAAG3b,QAAQH,GAEbh9B,GAASnB,EAAA3oB,YAAYo/C,SAGvB,KAAKx2B,EAAAC,MAAMokB,MACX,KAAKrkB,EAAAC,MAAMqtB,UACT0sB,EAAG3/B,OACH3R,EAAY3zB,KAAK+lE,sBAAsBd,EAAI94C,EAAOmH,EAAY6xC,GAC9D7xC,EAAa,KACb,MAEF,KAAKrI,EAAAC,MAAMslB,UACL2Y,EAAQ8b,EAAG/b,OACf+b,EAAG3/B,OACC2/B,EAAGvc,MAAK,EAAOz9B,EAAAs2B,mBAAmB+G,SAAWr9B,EAAAC,MAAMU,YACrDq5C,EAAG3b,QAAQH,GACXx1B,EAAY3zB,KAAKgmE,eAAef,EAAI94C,EAAOmH,EAAY6xC,GACvD7xC,EAAa,OAEb2xC,EAAG1b,MAAMJ,GACTx1B,EAAY3zB,KAAK8lE,eAAeb,GAAI,IAEtC,MAEF,KAAKh6C,EAAAC,MAAM4S,OACTmnC,EAAG3/B,OAGD3R,GAFFxH,GAASnB,EAAA3oB,YAAYy7B,QACT9S,EAAA3oB,YAAYo6B,OACVz8B,KAAKimE,kBAAkBhB,EAAIE,GAE3BnlE,KAAKkmE,YAAYjB,GAE/B,MAEF,KAAKh6C,EAAAC,MAAMsN,KACL2wB,EAAQ8b,EAAG/b,OACf+b,EAAG3/B,OACC2/B,EAAGvc,MAAK,EAAOz9B,EAAAs2B,mBAAmB+G,SAAWr9B,EAAAC,MAAMU,YACrDq5C,EAAG3b,QAAQH,GACXx1B,EAAY3zB,KAAKmmE,qBAAqBlB,EAAI94C,EAAOmH,EAAY6xC,GAC7D7xC,EAAa,OAEb2xC,EAAG1b,MAAMJ,GACTx1B,EAAY3zB,KAAK8lE,eAAeb,GAAI,IAEtC,MAEF,QAGM94C,EAAQnB,EAAA3oB,YAAYo6B,OACtB9I,EAAY3zB,KAAKomE,YAAYnB,EAAI94C,EAAOg5C,IAIpCI,GACFvlE,KAAKwG,MACHq4B,EAAA96B,eAAesiE,gCACfpB,EAAG5gE,MAAMihE,EAAaC,GAAY,UASjCr9B,IACHvU,EAAY3zB,KAAK8lE,eAAeb,GAAI,KAQ5C,GAAI3xC,EACF,IAAK,IAAIjzB,EAAI,EAAG0c,EAAIuW,EAAW/tB,OAAQlF,EAAI0c,IAAK1c,EAC9CL,KAAKwG,MACHq4B,EAAA96B,eAAeuiE,8BACfhzC,EAAWjzB,GAAGgE,OAIpB,OAAOsvB,GAIT8wC,EAAAxiE,UAAAskE,SAAA,WACE,IAAI7B,EAAU1kE,KAAK0kE,QACnB,OAAOA,EAAQn/D,OAASm/D,EAAQnnB,QAAU,MAI5CknB,EAAAxiE,UAAAkqD,OAAA,WACE,GAAInsD,KAAK0kE,QAAQn/D,OAAQ,MAAM,IAAI8a,MAAM,wBAIzC,OAHArgB,KAAK0kE,WACL1kE,KAAK2kE,QAAQ6B,QACbxmE,KAAK4kE,QAAQ4B,QACNxmE,KAAKuwC,SAIdk0B,EAAAxiE,UAAAwkE,UAAA,SACExB,EACAyB,EACAC,QADA,IAAAD,OAAA,QACA,IAAAC,OAAA,GAIA,IAGItxD,EAHAiuC,EAAQ2hB,EAAG3/B,OACX6/B,EAAWF,EAAG/e,SAKlB,GAAI5C,GAASr4B,EAAAC,MAAMy7B,UAAW,CAG5B,IAAIigB,EAAsB3B,EAAGjc,KAAK/9B,EAAAC,MAAMy7B,WAEpCvwB,EAAYp2B,KAAK6mE,kBAAkB5B,GACvC,GAAI7uC,EAAW,CACb,GAAIwwC,EAAqB,CACvB,IAAK3B,EAAGjc,KAAK/9B,EAAAC,MAAM07B,YAKjB,OAJA5mD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,KAEP,KAET,IAAK4gE,EAAGjc,KAAK/9B,EAAAC,MAAMy5B,KAKjB,OAJA3kD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,KAEP,KAEJ4gE,EAAGjc,KAAK/9B,EAAAC,MAAMM,OACjBxrB,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,QAGhB+xB,EAAUzJ,YAAa,EAEzB,OAAOyJ,EACF,GAAIwwC,GAAuB5mE,KAAK6kE,6BAKrC,OAJA7kE,KAAKwG,MACHq4B,EAAA96B,eAAe+iE,iBACf7B,EAAG5gE,SAEE,KAIT,IAAIqiE,EAoBF,OAJA1mE,KAAKwG,MACHq4B,EAAA96B,eAAe+iE,iBACf7B,EAAG5gE,SAEE,KAnBP,IAAI0iE,EAAY/mE,KAAKymE,UAAUxB,GAAI,EAAO0B,GAC1C,IAAKI,EAAW,OAAO,KACvB,IAAK9B,EAAGjc,KAAK/9B,EAAAC,MAAM07B,YAOjB,OANK+f,GACH3mE,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,MAAM4gE,EAAGjf,KAAM,KAGf,MAET3wC,EAAO0xD,GACF1iE,MAAMmB,MAAQ2/D,EACnB9vD,EAAKhR,MAAMoB,IAAMw/D,EAAGjf,SAUjB,GAAI1C,GAASr4B,EAAAC,MAAMqT,KACxBlpB,EAAO0pB,EAAA9S,KAAKQ,WACVsS,EAAA9S,KAAKc,2BAA2B,OAAQk4C,EAAG5gE,aAAc,EAAO4gE,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,WAInF,GAAI1C,GAASr4B,EAAAC,MAAM+P,KACxB5lB,EAAO0pB,EAAA9S,KAAKQ,WACVsS,EAAA9S,KAAKkG,qBAAqB8yC,EAAG5gE,aAAc,EAAO4gE,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,WAIrE,GAAI1C,GAASr4B,EAAAC,MAAMO,MAAQ63B,GAASr4B,EAAAC,MAAMQ,MAC/CrW,EAAO0pB,EAAA9S,KAAKQ,WACVsS,EAAA9S,KAAKc,2BAA2B,OAAQk4C,EAAG5gE,aAAc,EAAO4gE,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,WAInF,GAAI1C,GAASr4B,EAAAC,MAAMw7B,cACxBue,EAAG9kD,aACH9K,EAAO0pB,EAAA9S,KAAKQ,WACVsS,EAAA9S,KAAKc,2BAA2B,SAAUk4C,EAAG5gE,aAAc,EAAO4gE,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,UAIrF,IAAI1C,GAASr4B,EAAAC,MAAMU,WA6CxB,OANK+6C,GACH3mE,KAAKwG,MACHq4B,EAAA96B,eAAeijE,oBACf/B,EAAG5gE,SAGA,KA5CP,IAAI6uB,EAAa6L,EAAA9S,KAAKc,2BAA2Bk4C,EAAGzb,iBAAkByb,EAAG5gE,SACrEmpB,EAAa,IAAIpnB,MACjB6gE,GAAW,EAGf,GAAIhC,EAAGjc,KAAK/9B,EAAAC,MAAMu4B,UAAW,CAC3B,EAAG,CACD,IAAIyjB,EAAYlnE,KAAKymE,UAAUxB,GAAI,EAAM0B,GACzC,IAAKO,EAAW,OAAO,KACvB15C,EAAW1nB,KAAeohE,SACnBjC,EAAGjc,KAAK/9B,EAAAC,MAAMmP,QACvB,IAAK4qC,EAAGjc,KAAK/9B,EAAAC,MAAMw4B,aAOjB,OANKijB,GACH3mE,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,MAAM4gE,EAAGjf,KAAM,KAGf,KAIX,GAAIif,EAAGjc,KAAK/9B,EAAAC,MAAMy5B,KAAM,CACtB,IAAIsgB,EAAGjc,KAAK/9B,EAAAC,MAAMM,MAShB,OANKm7C,GACH3mE,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,MAAM4gE,EAAGjf,KAAM,QAGf,KARPihB,GAAW,EAWf5xD,EAAO0pB,EAAA9S,KAAKQ,WAAWyG,EAAY1F,EAAYy5C,EAAUhC,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAYjF,KAAOif,EAAGjc,KAAK/9B,EAAAC,MAAMy8B,cAAc,CACjC,IAAIwf,EAAelC,EAAG/e,SACtB,IAAK+e,EAAGjc,KAAK/9B,EAAAC,MAAM08B,cAOjB,OANK+e,GACH3mE,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,KAGT,KAET,IAAI+iE,EAAenC,EAAG5gE,MAAM8iE,EAAclC,EAAGjf,KAGzCihB,GAAW,EACf,GAAIhC,EAAGjc,KAAK/9B,EAAAC,MAAMy5B,KAAM,CACtB,IAAIsgB,EAAGjc,KAAK/9B,EAAAC,MAAMM,MAShB,OANKm7C,GACH3mE,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,QAGT,KARP4iE,GAAW,EAiBf,GANA5xD,EAAO0pB,EAAA9S,KAAKQ,WACVsS,EAAA9S,KAAKc,2BAA2B,QAASq6C,IACvC/xD,GACF4xD,EACAhC,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAEpBihB,EAAU,MAGhB,OAAO5xD,GAOTovD,EAAAxiE,UAAA4kE,kBAAA,SACE5B,GAKA,IAuGI1rD,EAvGA4vC,EAAQ8b,EAAG/b,OACXic,EAAWF,EAAG/e,SACd14B,EAAqC,KACrCkf,EAA4B,KAC5B26B,GAAoB,EAExB,GAAIpC,EAAGjc,KAAK/9B,EAAAC,MAAM07B,YAChBygB,GAAc,EACdpC,EAAG3b,QAAQH,GACX37B,SAEK,CACL65C,GAAc,EACd,EAAG,CACD,IAAI/7C,EAAOyT,EAAArG,cAAcyU,QAMzB,GALI83B,EAAGjc,KAAK/9B,EAAAC,MAAMs4B,eAChB6jB,GAAc,EACdpC,EAAG3b,QAAQH,GACX79B,EAAOyT,EAAArG,cAAc0U,MAEnB63B,EAAGjc,KAAK/9B,EAAAC,MAAM+P,MAAO,CACvB,IAAIgqC,EAAGjc,KAAK/9B,EAAAC,MAAMq8B,OAiBhB,OAFA0d,EAAG1b,MAAMJ,GACTnpD,KAAK6kE,8BAA+B,EAC7B,KAhBPwC,GAAc,EACdpC,EAAG3b,QAAQH,GACX,IAAI5nD,EAAIvB,KAAKymE,UAAUxB,GAAI,GAC3B,IAAK1jE,EAAG,OAAO,KACf,GAAIA,EAAE+pB,MAAQyT,EAAA3T,SAASoN,KAMrB,OALAx4B,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACfxoC,EAAE8C,OAEJrE,KAAK6kE,8BAA+B,EAC7B,KAETn4B,EAAqBnrC,MAMlB,KAAI0jE,EAAGlc,iBA8CZ,OATIse,EACFrnE,KAAKwG,MACHq4B,EAAA96B,eAAeijE,oBACf/B,EAAG5gE,SAGL4gE,EAAG1b,MAAMJ,GAEXnpD,KAAK6kE,6BAA+BwC,EAC7B,KA7CP,IAAIzmE,EAAOm+B,EAAA9S,KAAKc,2BAA2Bk4C,EAAGzb,iBAAkByb,EAAG5gE,MAAM4gE,EAAG/e,SAAU+e,EAAGjf,MAazF,GAZIif,EAAGjc,KAAK/9B,EAAAC,MAAMw8B,YAChB2f,GAAc,EACdpC,EAAG3b,QAAQH,GACP79B,GAAQyT,EAAArG,cAAc0U,KACxBptC,KAAKwG,MACHq4B,EAAA96B,eAAeujE,oCACfrC,EAAG5gE,SAGLinB,EAAOyT,EAAArG,cAAc6uC,UAGrBtC,EAAGjc,KAAK/9B,EAAAC,MAAMq8B,OAAQ,CACxB8f,GAAc,EACdpC,EAAG3b,QAAQH,GACX,IAAI9zC,EAAOrV,KAAKymE,UAAUxB,GAC1B,IAAK5vD,EAEH,OADArV,KAAK6kE,6BAA+BwC,EAC7B,KAET,IAAIG,EAAQ,IAAIzoC,EAAA1R,cAChBm6C,EAAMl6C,cAAgBhC,EACtBk8C,EAAM5mE,KAAOA,EACb4mE,EAAMnyD,KAAOA,EACRmY,EACAA,EAAW1nB,KAAK0hE,GADJh6C,GAAeg6C,QAG5BH,GACFrnE,KAAKwG,MACHq4B,EAAA96B,eAAegsD,cACfkV,EAAG5gE,gBAgBJ4gE,EAAGjc,KAAK/9B,EAAAC,MAAMmP,QACvB,IAAK4qC,EAAGjc,KAAK/9B,EAAAC,MAAM07B,YAUjB,OATIygB,EACFrnE,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,KAGd4gE,EAAG1b,MAAMJ,GAEXnpD,KAAK6kE,6BAA+BwC,EAC7B,KAKX,OAAIpC,EAAGjc,KAAK/9B,EAAAC,MAAMu8B,qBAChB4f,GAAc,EACdpC,EAAG3b,QAAQH,IACX5vC,EAAavZ,KAAKymE,UAAUxB,KAiB9BjlE,KAAK6kE,8BAA+B,EAC7B9lC,EAAA9S,KAAKsB,gBACVC,MACAjU,EACAmzB,GACA,EACAu4B,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,QArBpBhmD,KAAK6kE,6BAA+BwC,EAC7B,QAGLA,EACFrnE,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,MAGd4gE,EAAG1b,MAAMJ,GAEXnpD,KAAK6kE,6BAA+BwC,EAC7B,OAcX5C,EAAAxiE,UAAAmjE,eAAA,SACEH,GAKA,IAAIE,EAAWF,EAAG/e,SAClB,GAAI+e,EAAGlc,iBAAkB,CAGvB,IAFA,IAAInoD,EAAOqkE,EAAGzb,iBACVxxC,EAAyB+mB,EAAA9S,KAAKc,2BAA2BnsB,EAAMqkE,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAClFif,EAAGjc,KAAK/9B,EAAAC,MAAM67B,MAAM,CACzB,IAAIke,EAAGlc,iBAYL,OAJA/oD,KAAKwG,MACHq4B,EAAA96B,eAAeijE,oBACf/B,EAAG5gE,SAEE,KAXPzD,EAAOqkE,EAAGzb,iBACVxxC,EAAa+mB,EAAA9S,KAAKoF,+BAChBrZ,EACA+mB,EAAA9S,KAAKc,2BAA2BnsB,EAAMqkE,EAAG5gE,SACzC4gE,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAU5B,IAAIn4B,OAAI,EACR,IAAIo3C,EAAGjc,KAAK/9B,EAAAC,MAAMy7B,WAMhB,OAAO5nB,EAAA9S,KAAK2B,gBAAgB5V,EAAY,KAAMitD,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAJpE,GADAn4B,EAAO7tB,KAAKynE,eAAexC,GAEzB,OAAOlmC,EAAA9S,KAAK2B,gBAAgB5V,EAAY6V,EAAMo3C,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,WAMxEhmD,KAAKwG,MACHq4B,EAAA96B,eAAeijE,oBACf/B,EAAG5gE,SAGP,OAAO,MAGTogE,EAAAxiE,UAAA2jE,cAAA,SACEX,EACA94C,EACAmH,EACA6xC,GAKA,IAAI9xC,EAAU,IAAIjtB,MAClB,EAAG,CACD,IAAI02B,EAAS98B,KAAK0nE,yBAAyBzC,EAAI94C,EAAOmH,GACtD,IAAKwJ,EAAQ,OAAO,KACpBzJ,EAAQvtB,KAA0Bg3B,SAC3BmoC,EAAGjc,KAAK/9B,EAAAC,MAAMmP,QAEvB,IAAIza,EAAMmf,EAAA9S,KAAK0L,wBAAwBtE,EAASC,EAAYnH,EAAO84C,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAEzF,OADAif,EAAGjc,KAAK/9B,EAAAC,MAAMs8B,WACP5nC,GAGT6kD,EAAAxiE,UAAAylE,yBAAA,SACEzC,EACA0C,EACAC,GAKA,IAAK3C,EAAGlc,iBAKN,OAJA/oD,KAAKwG,MACHq4B,EAAA96B,eAAeijE,oBACf/B,EAAG5gE,SAEE,KAET,IAAI6uB,EAAa6L,EAAA9S,KAAKc,2BAA2Bk4C,EAAGzb,iBAAkByb,EAAG5gE,SACrE8nB,EAAQw7C,EAERtyD,EAA8B,KAC9B4vD,EAAGjc,KAAK/9B,EAAAC,MAAMq8B,SAChBlyC,EAAOrV,KAAKymE,UAAUxB,IAGxB,IAAI/qD,EAAiC,KACrC,GAAI+qD,EAAGjc,KAAK/9B,EAAAC,MAAM+5B,SAQhB,GAPI94B,EAAQnB,EAAA3oB,YAAY+kC,SACtBpnC,KAAKwG,MACHq4B,EAAA96B,eAAe8jE,iDACf5C,EAAG5gE,WAGP6V,EAAcla,KAAK8nE,gBAAgB7C,EAAI,IACrB,OAAO,UAErB94C,EAAQnB,EAAA3oB,YAAY6uC,MAChB/kB,EAAQnB,EAAA3oB,YAAY+kC,SACxBpnC,KAAKwG,MACHq4B,EAAA96B,eAAe0yD,wCACfvjC,EAAW7uB,OAGLgR,GACVrV,KAAKwG,MACHq4B,EAAA96B,eAAegsD,cACfkV,EAAG5gE,MAAM4gE,EAAGjf,MAIlB,OAAOjnB,EAAA9S,KAAK4L,0BACV3E,EACA7d,EACA6E,EACA0tD,EACAz7C,EACAlB,EAAAE,MAAMplB,KAAKmtB,EAAW7uB,MAAO4gE,EAAG5gE,WAIpCogE,EAAAxiE,UAAA0jE,UAAA,SACEV,EACA94C,EACAmH,EACA6xC,GAKA,GAAIF,EAAG3/B,QAAUra,EAAAC,MAAMU,WAKrB,OAJA5rB,KAAKwG,MACHq4B,EAAA96B,eAAeijE,oBACf/B,EAAG5gE,SAEE,KAET,IAAI6uB,EAAa6L,EAAA9S,KAAKc,2BAA2Bk4C,EAAGzb,iBAAkByb,EAAG5gE,SACzE,GAAI4gE,EAAG3/B,QAAUra,EAAAC,MAAM28B,UAKrB,OAJA7nD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,KAEP,KAGT,IADA,IAAIgvB,EAAU,IAAIjtB,OACV6+D,EAAGjc,KAAK/9B,EAAAC,MAAM48B,aAAa,CACjC,IAAIhrB,EAAS98B,KAAK+nE,eAAe9C,EAAIj6C,EAAA3oB,YAAY+pB,MACjD,IAAK0Q,EAAQ,OAAO,KAEpB,GADAzJ,EAAQvtB,KAA2Bg3B,IAC9BmoC,EAAGjc,KAAK/9B,EAAAC,MAAMmP,OAAQ,CACzB,GAAI4qC,EAAGjc,KAAK/9B,EAAAC,MAAM48B,YAChB,MAMA,OAJA9nD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,KAEP,MAIb,IAAIub,EAAMmf,EAAA9S,KAAK8H,sBACbb,EACAG,EACAC,EACAnH,EACA84C,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAGxB,OADAif,EAAGjc,KAAK/9B,EAAAC,MAAMs8B,WACP5nC,GAGT6kD,EAAAxiE,UAAA8lE,eAAA,SACE9C,EACA0C,GAKA,IAAK1C,EAAGlc,iBAKN,OAJA/oD,KAAKwG,MACHq4B,EAAA96B,eAAeijE,oBACf/B,EAAG5gE,SAEE,KAET,IAAI6uB,EAAa6L,EAAA9S,KAAKc,2BAA2Bk4C,EAAGzb,iBAAkByb,EAAG5gE,SACrE/C,EAA2B,KAC/B,OAAI2jE,EAAGjc,KAAK/9B,EAAAC,MAAM+5B,WAChB3jD,EAAQtB,KAAK8nE,gBAAgB7C,EAAI,IACd,KAEdlmC,EAAA9S,KAAKiI,2BACVhB,EACA5xB,EACAqmE,EACA18C,EAAAE,MAAMplB,KAAKmtB,EAAW7uB,MAAO4gE,EAAG5gE,WAIpCogE,EAAAxiE,UAAA+lE,YAAA,SACE/C,GAKA,IAAIxwD,EAA0B,KAC9B,GACEwwD,EAAGvc,MAAK,IAASz9B,EAAAC,MAAMs8B,WACvByd,EAAG9e,WAAal7B,EAAAC,MAAM48B,aACrBmd,EAAG5e,sBAEE5xC,EAAOzU,KAAK8nE,gBAAgB7C,IAAM,OAAO,KAGjD,IAAIrlD,EAAMmf,EAAA9S,KAAKyK,sBAAsBjiB,EAAMwwD,EAAG5gE,SAE9C,OADA4gE,EAAGjc,KAAK/9B,EAAAC,MAAMs8B,WACP5nC,GAGT6kD,EAAAxiE,UAAAgmE,oBAAA,SACEhD,GAMA,IADA,IAAI9xC,EAAiB,IAAI/sB,OACjB6+D,EAAGjc,KAAK/9B,EAAAC,MAAMw4B,cAAc,CAClC,IAAIwkB,EAAgBloE,KAAKmoE,mBAAmBlD,GAC5C,IAAKiD,EAAe,OAAO,KAE3B,GADA/0C,EAAertB,KAAwBoiE,IAClCjD,EAAGjc,KAAK/9B,EAAAC,MAAMmP,OAAQ,CACzB,GAAI4qC,EAAGjc,KAAK/9B,EAAAC,MAAMw4B,aAChB,MAMA,OAJA1jD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,KAEP,MAUb,OAN8B,IAA1B8uB,EAAe5tB,QACjBvF,KAAKwG,MACHq4B,EAAA96B,eAAeqkE,oCACfnD,EAAG5gE,SAGA8uB,GAGTsxC,EAAAxiE,UAAAkmE,mBAAA,SACElD,GAKA,GAAIA,EAAG3/B,QAAUra,EAAAC,MAAMU,WAAY,CACjC,IAAIsH,EAAa6L,EAAA9S,KAAKc,2BACpBk4C,EAAGzb,iBACHyb,EAAG5gE,SAED4oB,EAA+B,KACnC,GAAIg4C,EAAGjc,KAAK/9B,EAAAC,MAAMg3B,SAAU,CAC1B,IAAI3gD,EAAIvB,KAAKymE,UAAUxB,GACvB,IAAK1jE,EAAG,OAAO,KACf,GAAIA,EAAE+pB,MAAQyT,EAAA3T,SAASoN,KAKrB,OAJAx4B,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACfxoC,EAAE8C,OAEG,KAET4oB,EAAwB1rB,EAE1B,OAAOw9B,EAAA9S,KAAKe,oBACVkG,EACAjG,EACAhC,EAAAE,MAAMplB,KAAKmtB,EAAW7uB,MAAO4gE,EAAG5gE,UAQpC,OALErE,KAAKwG,MACHq4B,EAAA96B,eAAeijE,oBACf/B,EAAG5gE,SAGA,MAKTogE,EAAAxiE,UAAAomE,gBAAA,SACEpD,EACA1T,QAAA,IAAAA,OAAA,GAKA,IAAI/jC,EAAa,IAAIpnB,MACjBkiE,EAAiC,KACjCC,GAAe,EACfC,GAAe,EACf97B,EAAkC,KAItC,GADA1sC,KAAK8kE,oBAAsB,KACvBG,EAAGjc,KAAK/9B,EAAAC,MAAM+P,MAAO,CACvB,IAAIgqC,EAAGjc,KAAK/9B,EAAAC,MAAMq8B,OAgBhB,OAJAvnD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,KAEP,KAdP,KADAqoC,EAAW1sC,KAAKymE,UAAUxB,IACX,OAAO,KAgBxB,GAfMv4B,EAASphB,MAAQyT,EAAA3T,SAASoN,KAC5Bx4B,KAAK8kE,oBAAgCp4B,EAErC1sC,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACf2C,EAASroC,QAUV4gE,EAAGjc,KAAK/9B,EAAAC,MAAMmP,OACjB,OAAI4qC,EAAGjc,KAAK/9B,EAAAC,MAAM07B,YACTp5B,GAEPxtB,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,KAEP,MAKb,MAAQ4gE,EAAGjc,KAAK/9B,EAAAC,MAAM07B,aAAa,CACjC,IAAI4gB,EAAQxnE,KAAKyoE,eAAexD,EAAI1T,GACpC,IAAKiW,EAAO,OAAO,KAQnB,OAPIc,IAAaE,IACfxoE,KAAKwG,MACHq4B,EAAA96B,eAAe2kE,kDACfJ,EAAS1nE,KAAKyD,OAEhBmkE,GAAe,GAEThB,EAAMl6C,eACZ,QACMi7C,GACFvoE,KAAKwG,MACHq4B,EAAA96B,eAAe4kE,yDACfnB,EAAM5mE,KAAKyD,OAGf,MAEF,KAAK06B,EAAArG,cAAc6uC,SACjBgB,GAAe,EACf,MAEF,KAAKxpC,EAAArG,cAAc0U,KACjBk7B,EAAWd,EAKf,GADAh6C,EAAW1nB,KAAK0hE,IACXvC,EAAGjc,KAAK/9B,EAAAC,MAAMmP,OAAQ,CACzB,GAAI4qC,EAAGjc,KAAK/9B,EAAAC,MAAM07B,YAChB,MAMA,OAJA5mD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,KAEP,MAIb,OAAOmpB,GAGTi3C,EAAAxiE,UAAAwmE,eAAA,SACExD,EACA1T,QAAA,IAAAA,OAAA,GAKA,IAAIqX,GAAS,EACTC,GAAa,EACbC,EAA2B,KAC3BC,EAA2B/9C,EAAA3oB,YAAY+pB,KAC3C,GAAImlC,IACE0T,EAAGjc,KAAK/9B,EAAAC,MAAM63B,SAChB+lB,EAAa7D,EAAG5gE,QAChB0kE,GAAe/9C,EAAA3oB,YAAY0gD,QAClBkiB,EAAGjc,KAAK/9B,EAAAC,MAAM43B,YACvBgmB,EAAa7D,EAAG5gE,QAChB0kE,GAAe/9C,EAAA3oB,YAAYygD,WAClBmiB,EAAGjc,KAAK/9B,EAAAC,MAAM23B,WACvBimB,EAAa7D,EAAG5gE,QAChB0kE,GAAe/9C,EAAA3oB,YAAYwgD,SAEzBoiB,EAAGvc,QAAUz9B,EAAAC,MAAM83B,UAAU,CAC/B,IAAImG,EAAQ8b,EAAG/b,OACf+b,EAAG3/B,OACC2/B,EAAGvc,QAAUz9B,EAAAC,MAAMq8B,OACrB0d,EAAG3b,QAAQH,GACN2f,IAAYA,EAAa7D,EAAG5gE,SACjC0kE,GAAe/9C,EAAA3oB,YAAY2gD,UAE3BiiB,EAAG1b,MAAMJ,GAef,GAXI8b,EAAGjc,KAAK/9B,EAAAC,MAAMs4B,eACZulB,EACF/oE,KAAKwG,MACHq4B,EAAA96B,eAAeilE,+DACf/D,EAAG5gE,SAGLykE,EAAa7D,EAAG5gE,QAElBukE,GAAS,GAEP3D,EAAGlc,iBAAkB,CAClB6f,IAAQE,EAAa7D,EAAG5gE,SAC7B,IAAI6uB,EAAa6L,EAAA9S,KAAKc,2BAA2Bk4C,EAAGzb,iBAAkByb,EAAG5gE,SACrEgR,EAA8B,KASlC,IARIwzD,EAAa5D,EAAGjc,KAAK/9B,EAAAC,MAAMw8B,YACzBkhB,GACF5oE,KAAKwG,MACHq4B,EAAA96B,eAAeujE,oCACfp0C,EAAW7uB,OAIb4gE,EAAGjc,KAAK/9B,EAAAC,MAAMq8B,QAEhB,KADAlyC,EAAOrV,KAAKymE,UAAUxB,IACX,OAAO,UAElB5vD,EAAO0pB,EAAA9S,KAAKa,kBAAkBm4C,EAAG5gE,MAAM4gE,EAAGjf,MAE5C,IAAI9rC,EAAiC,KACrC,GAAI+qD,EAAGjc,KAAK/9B,EAAAC,MAAM+5B,UACZ2jB,GACF5oE,KAAKwG,MACHq4B,EAAA96B,eAAeklE,4CACf/1C,EAAW7uB,OAGXwkE,EACF7oE,KAAKwG,MACHq4B,EAAA96B,eAAemlE,oDACfh2C,EAAW7uB,OAGbwkE,GAAa,IAEf3uD,EAAcla,KAAK8nE,gBAAgB7C,EAAI,KACrB,OAAO,KAE3B,IAAIuC,EAAQzoC,EAAA9S,KAAKmB,gBACf8F,EACA7d,EACA6E,EACA0uD,EACI7pC,EAAArG,cAAc0U,KACdy7B,EACE9pC,EAAArG,cAAc6uC,SACdxoC,EAAArG,cAAcyU,QACpBliB,EAAAE,MAAMplB,KAAY+iE,EAAY7D,EAAG5gE,UAGnC,OADAmjE,EAAMr7C,OAAS48C,EACRvB,EAOT,OALExnE,KAAKwG,MACHq4B,EAAA96B,eAAeijE,oBACf/B,EAAG5gE,SAGA,MAGTogE,EAAAxiE,UAAA4jE,cAAA,SACEZ,EACA94C,EACAmH,EACA6xC,GAUA,IAAKF,EAAGlc,iBAKN,OAJA/oD,KAAKwG,MACHq4B,EAAA96B,eAAeijE,oBACf/B,EAAG5gE,MAAM4gE,EAAGjf,MAEP,KAGT,IAAIplD,EAAOm+B,EAAA9S,KAAKc,2BAA2Bk4C,EAAGzb,iBAAkByb,EAAG5gE,SAC/D8kE,GAAuB,EAEvBh2C,EAA6C,KACjD,GAAI8xC,EAAGjc,KAAK/9B,EAAAC,MAAMu4B,UAAW,CAG3B,GAFA0lB,EAAiBlE,EAAG/e,WACpB/yB,EAAiBnzB,KAAKioE,oBAAoBhD,IACrB,OAAO,KAC5B94C,GAASnB,EAAA3oB,YAAY8kC,QAGvB,IAAK89B,EAAGjc,KAAK/9B,EAAAC,MAAMy7B,WAKjB,OAJA3mD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,MAAM4gE,EAAGjf,KAAM,KAEb,KAGLmjB,EAAiB,IACnBA,EAAiBlE,EAAG/e,UAGtB,IAAI14B,EAAaxtB,KAAKqoE,gBAAgBpD,GACtC,IAAKz3C,EAAY,OAAO,KACxB,IAAIkf,EAAW1sC,KAAK8kE,oBAEhBsE,EAAwC,IAA5Bj9C,EAAQnB,EAAA3oB,YAAY0mC,KAChCqgC,IACuB,GAArB57C,EAAWjoB,QACbvF,KAAKwG,MACHq4B,EAAA96B,eAAeslE,+CACfzoE,EAAKyD,OAGLmpB,EAAWjoB,QAAUioB,EAAW,GAAGtT,aACrCla,KAAKwG,MACHq4B,EAAA96B,eAAeulE,oDACf1oE,EAAKyD,QAKP8nB,EAAQnB,EAAA3oB,YAAYymC,KAClBtb,EAAWjoB,QACbvF,KAAKwG,MACHq4B,EAAA96B,eAAewlE,sCACf3oE,EAAKyD,OAKX,IAAIkV,EAAoC,KACxC,GAAI0rD,EAAGjc,KAAK/9B,EAAAC,MAAMq8B,UAChBhuC,EAAavZ,KAAKymE,UAAUxB,GAAI,EAAMmE,IACrB,OAAO,KAGrB7vD,IACHA,EAAawlB,EAAA9S,KAAKa,kBAChBm4C,EAAG5gE,MAAM4gE,EAAGjf,MAETojB,GACHppE,KAAKwG,MACHq4B,EAAA96B,eAAegsD,cACfx2C,EAAWlV,QAKjB,IAAI+xB,EAAY2I,EAAA9S,KAAKsB,gBACnBC,EACAjU,EACAmzB,GACA,EACAu4B,EAAG5gE,MAAM8kE,EAAgBlE,EAAGjf,MAG1B7tC,EAAyB,KAC7B,GAAI8sD,EAAGjc,KAAK/9B,EAAAC,MAAM28B,YAShB,GARI17B,EAAQnB,EAAA3oB,YAAY+kC,SACtBpnC,KAAKwG,MACHq4B,EAAA96B,eAAestD,yDACf4T,EAAG5gE,WAIP8T,EAAOnY,KAAKwpE,oBAAoBvE,GAAI,IACzB,OAAO,UACP94C,EAAQnB,EAAA3oB,YAAY+kC,SAC/BpnC,KAAKwG,MACHq4B,EAAA96B,eAAeutD,gFACf2T,EAAG5gE,MAAM4gE,EAAGjf,MAIhB,IAAIpmC,EAAMmf,EAAA9S,KAAKkK,0BACbv1B,EACAuyB,EACAiD,EACAje,EACAmb,EACAnH,EACA84C,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAGxB,OADAif,EAAGjc,KAAK/9B,EAAAC,MAAMs8B,WACP5nC,GAGT6kD,EAAAxiE,UAAAwnE,wBAAA,SAAwBxE,GACtB,IACIrkE,EADAukE,EAAWF,EAAG/e,SAEdwjB,GAAU,EAOd,GAAIzE,EAAG3hB,OAASr4B,EAAAC,MAAMsP,UAMpB,GAJE55B,EADEqkE,EAAGlc,iBACEhqB,EAAA9S,KAAKc,2BAA2Bk4C,EAAGzb,iBAAkByb,EAAG5gE,SAExD06B,EAAA9S,KAAKuC,gCAAgCy2C,EAAG5gE,MAAM4gE,EAAGjf,OAErDif,EAAGjc,KAAK/9B,EAAAC,MAAMy7B,WAKjB,OAJA3mD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,MAAM4gE,EAAGjf,KAAM,KAEb,UAQT0jB,GAAU,EACVhmE,OAAOuhE,EAAG3hB,OAASr4B,EAAAC,MAAMy7B,WACzB/lD,EAAOm+B,EAAA9S,KAAKuC,gCAAgCy2C,EAAG5gE,MAAM4gE,EAAG/e,WAK1D,IAAIijB,EAAiBlE,EAAGjf,IACpBx4B,EAAaxtB,KAAKqoE,gBAAgBpD,GACtC,OAAKz3C,EAEExtB,KAAK2pE,8BAA8B1E,EAAIrkE,EAAM4sB,EAAYk8C,EAASvE,EAAUgE,GAF3D,MAKlB1E,EAAAxiE,UAAA0nE,8BAAR,SACE1E,EACArkE,EACA4sB,EACAk8C,EACAvE,EACAgE,QADA,IAAAhE,OAAiB,QACjB,IAAAgE,OAAuB,GAEnBhE,EAAW,IAAGA,EAAWvkE,EAAKyD,MAAMmB,OACpC2jE,EAAiB,IAAGA,EAAiBhE,GAEzC,IAAI5rD,EAAoC,KACxC,GAAI0rD,EAAGjc,KAAK/9B,EAAAC,MAAMq8B,QAEhB,KADAhuC,EAAavZ,KAAKymE,UAAUxB,IACX,OAAO,UAExB1rD,EAAawlB,EAAA9S,KAAKa,kBAAkBm4C,EAAG5gE,MAAM4gE,EAAGjf,MAChDhmD,KAAKwG,MACHq4B,EAAA96B,eAAegsD,cACfx2C,EAAWlV,OAIf,GAAIqlE,IACGzE,EAAGjc,KAAK/9B,EAAAC,MAAMu8B,oBAKjB,OAJAznD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,MAAM4gE,EAAGjf,KAAM,MAEb,KAIX,IAQI7tC,EARAie,EAAY2I,EAAA9S,KAAKsB,gBACnBC,EACAjU,EACA,MACA,EACA0rD,EAAG5gE,MAAM8kE,EAAgBlE,EAAGjf,MAI9B,GAAI0jB,EACFvxD,EAAOnY,KAAK8lE,eAAeb,GAAI,OAC1B,CACL,IAAKA,EAAGjc,KAAK/9B,EAAAC,MAAM28B,WAKjB,OAJA7nD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,MAAM4gE,EAAGjf,KAAM,KAEb,KAET7tC,EAAOnY,KAAKwpE,oBAAoBvE,GAAI,GAEtC,IAAK9sD,EAAM,OAAO,KAElB,IAAIoY,EAAcwO,EAAA9S,KAAKkK,0BACrBv1B,EACA,KACAw1B,EACAje,EACA,KACAuxD,EAAU1+C,EAAA3oB,YAAYouB,MAAQzF,EAAA3oB,YAAY+pB,KAC1C64C,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAExB,OAAOjnB,EAAA9S,KAAKqE,yBAAyBC,IAGvCk0C,EAAAxiE,UAAA8jE,sBAAA,SACEd,EACA94C,EACAmH,EACA6xC,GAUA,IAAIyE,EAAc3E,EAAG3hB,OAASr4B,EAAAC,MAAMqtB,UAEpC,IAAK0sB,EAAGlc,iBAKN,OAJA/oD,KAAKwG,MACHq4B,EAAA96B,eAAeijE,oBACf/B,EAAG5gE,SAEE,KAGT,IAKI8uB,EALAD,EAAa6L,EAAA9S,KAAKc,2BACpBk4C,EAAGzb,iBACHyb,EAAG5gE,SAIL,GAAI4gE,EAAGjc,KAAK/9B,EAAAC,MAAMu4B,UAAW,CAE3B,KADAtwB,EAAiBnzB,KAAKioE,oBAAoBhD,IACrB,OAAO,KAC5B94C,GAASnB,EAAA3oB,YAAY8kC,aAErBhU,KAGF,IAAIlG,EAA+B,KACnC,GAAIg4C,EAAGjc,KAAK/9B,EAAAC,MAAMg3B,SAAU,CAC1B,IAAI3gD,EAAIvB,KAAKymE,UAAUxB,GACvB,IAAK1jE,EAAG,OAAO,KACf,GAAIA,EAAE+pB,MAAQyT,EAAA3T,SAASoN,KAKrB,OAJAx4B,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACfxoC,EAAE8C,OAEG,KAET4oB,EAAwB1rB,EAG1B,IAAI6xB,EAAqC,KACzC,GAAI6xC,EAAGjc,KAAK/9B,EAAAC,MAAMm3B,YAAa,CACzBunB,GACF5pE,KAAKwG,MACHq4B,EAAA96B,eAAe8lE,oDACf5E,EAAG5gE,SAGP,EAAG,CACD,IAAIgR,EAAOrV,KAAKymE,UAAUxB,GAC1B,IAAK5vD,EAAM,OAAO,KACbu0D,IACEx2C,IAAiBA,MACtBA,EAAgBttB,KAAeuP,UAE1B4vD,EAAGjc,KAAK/9B,EAAAC,MAAMmP,QAGzB,IAAK4qC,EAAGjc,KAAK/9B,EAAAC,MAAM28B,WAKjB,OAJA7nD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,KAEP,KAGT,IACIksB,EADA8C,EAAU,IAAIjtB,MAyBlB,GAvBIwjE,GACFlmE,QAAQ0vB,GACR7C,EAAcwO,EAAA9S,KAAK2J,2BACjB1C,EACAC,EACAlG,EACAoG,EACAC,EACAnH,EACA84C,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,OAGxBz1B,EAAcwO,EAAA9S,KAAKgH,uBACjBC,EACAC,EACAlG,EACAmG,EACAC,EACAC,EACAnH,EACA84C,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,OAGrBif,EAAGjc,KAAK/9B,EAAAC,MAAM48B,YACjB,EAAG,CACD,IAAIhrB,EAAS98B,KAAK8pE,iBAAiB7E,EAAI10C,GACvC,IAAKuM,EAAQ,OAAO,KACpBA,EAAO5Q,OAASqE,EAChB8C,EAAQvtB,KAA2Bg3B,UAC3BmoC,EAAGjc,KAAK/9B,EAAAC,MAAM48B,aAE1B,OAAOv3B,GAGTk0C,EAAAxiE,UAAA6nE,iBAAA,SACE7E,EACA/4C,GAaA,IAHA,IAAIi5C,EAAWF,EAAGjf,IAEd1yB,EAAa,IAAIltB,MACd6+D,EAAGjc,KAAK/9B,EAAAC,MAAM68B,KAAK,CACxB,IAAIrgB,EAAY1nC,KAAKolE,eAAeH,GACpC,IAAKv9B,EAAW,MAChBpU,EAAWxtB,KAAoB4hC,GAGjC,IAAIvb,EAAQD,EAAOC,MAAQnB,EAAA3oB,YAAY+kC,QAEnC69B,EAAGjc,KAAK/9B,EAAAC,MAAM63B,QAChB52B,GAASnB,EAAA3oB,YAAY0gD,OACZkiB,EAAGjc,KAAK/9B,EAAAC,MAAM23B,SACvB12B,GAASnB,EAAA3oB,YAAYwgD,QACZoiB,EAAGjc,KAAK/9B,EAAAC,MAAM43B,aACvB32B,GAASnB,EAAA3oB,YAAYygD,WAGvB,IAAIinB,EAAmB,EACnBC,EAAiB,EACjBC,EAAqB,EACrBC,EAAmB,EACnBjF,EAAGjc,KAAK/9B,EAAAC,MAAM0R,SAChBzQ,GAASnB,EAAA3oB,YAAYu6B,OACrBmtC,EAAc9E,EAAG/e,SACjB8jB,EAAY/E,EAAGjf,MAEXif,EAAGjc,KAAK/9B,EAAAC,MAAMu2B,WAChBt1B,GAAUnB,EAAA3oB,YAAYo/C,SAAWz2B,EAAA3oB,YAAYwvC,SAC7Co4B,EAAgBhF,EAAG/e,SACnBgkB,EAAcjF,EAAGjf,KAEjB75B,GAASnB,EAAA3oB,YAAYwvC,SAEnB3lB,EAAOC,MAAQnB,EAAA3oB,YAAY8kC,UAC7Bhb,GAASnB,EAAA3oB,YAAY0yD,kBAIzB,IAAIoV,EAAqB,EACrBC,EAAmB,EACnBnF,EAAGjc,KAAK/9B,EAAAC,MAAM83B,YAChB72B,GAASnB,EAAA3oB,YAAY2gD,SACrBmnB,EAAgBlF,EAAG/e,SACnBkkB,EAAcnF,EAAGjf,KAInB,IAAImD,EAAQ8b,EAAG/b,OACXqI,GAAgB,EAChB/mB,GAAW,EAGX4+B,GAAW,EACXtrD,EAAgB,EAChBusD,EAAc,EAsDlB,GArDIpF,EAAGjc,KAAK/9B,EAAAC,MAAM4d,KACZm8B,EAAGvc,MAAK,EAAMz9B,EAAAs2B,mBAAmB+G,SAAWr9B,EAAAC,MAAMU,YAAeq5C,EAAG5e,mBAYtE4e,EAAG1b,MAAMJ,IAXTh9B,GAASnB,EAAA3oB,YAAYymC,IACrB0B,GAAW,EACX1sB,EAAWmnD,EAAG/e,SACdmkB,EAASpF,EAAGjf,IACR75B,EAAQnB,EAAA3oB,YAAY2gD,UACtBhjD,KAAKwG,MACHq4B,EAAA96B,eAAesiE,gCACfpB,EAAG5gE,MAAM8lE,EAAeC,GAAc,aAMnCnF,EAAGjc,KAAK/9B,EAAAC,MAAM6d,KACnBk8B,EAAGvc,MAAK,EAAMz9B,EAAAs2B,mBAAmB+G,SAAWr9B,EAAAC,MAAMU,YAAeq5C,EAAG5e,mBAYtE4e,EAAG1b,MAAMJ,IAXTh9B,GAASnB,EAAA3oB,YAAY0mC,IAAM/d,EAAA3oB,YAAY0mC,IACvCqgC,GAAW,EACXtrD,EAAWmnD,EAAG/e,SACdmkB,EAASpF,EAAGjf,IACR75B,EAAQnB,EAAA3oB,YAAY2gD,UACtBhjD,KAAKwG,MACHq4B,EAAA96B,eAAesiE,gCACfpB,EAAG5gE,MAAM8lE,EAAeC,GAAc,aAMnCnF,EAAGjc,KAAK/9B,EAAAC,MAAMoP,eAEvBi3B,GAAgB,GADhBplC,GAASnB,EAAA3oB,YAAYi4B,aAETtP,EAAA3oB,YAAYu6B,QACtB58B,KAAKwG,MACHq4B,EAAA96B,eAAesiE,gCACfpB,EAAG5gE,MAAM0lE,EAAaC,GAAY,UAGlC79C,EAAQnB,EAAA3oB,YAAYo/C,UACtBzhD,KAAKwG,MACHq4B,EAAA96B,eAAesiE,gCACfpB,EAAG5gE,MAAM4lE,EAAeC,GAAc,YAGtC/9C,EAAQnB,EAAA3oB,YAAY2gD,UACtBhjD,KAAKwG,MACHq4B,EAAA96B,eAAesiE,gCACfpB,EAAG5gE,MAAM8lE,EAAeC,GAAc,cAKvC7Y,IAAkB0T,EAAGlc,iBAKxB,OAJA/oD,KAAKwG,MACHq4B,EAAA96B,eAAeijE,oBACf/B,EAAG5gE,SAEE,KAGT,IAAIzD,EAAO2wD,EACPxyB,EAAA9S,KAAK2D,4BAA4Bq1C,EAAG5gE,SACpC06B,EAAA9S,KAAKc,2BAA2Bk4C,EAAGzb,iBAAkByb,EAAG5gE,SACxD8uB,EAA6C,KACjD,GAAI8xC,EAAGjc,KAAK/9B,EAAAC,MAAMu4B,UAAW,CAC3B,IAAI6mB,EAAsBrF,EAAG/e,SAE7B,KADA/yB,EAAiBnzB,KAAKioE,oBAAoBhD,IACrB,OAAO,KACxB1T,EACFvxD,KAAKwG,MACHq4B,EAAA96B,eAAewmE,2DACftF,EAAG5gE,MAAMimE,EAAqBrF,EAAGjf,MAE1Bxb,GAAY4+B,EACrBppE,KAAKwG,MACHq4B,EAAA96B,eAAeymE,wCACfvF,EAAG5gE,MAAMimE,EAAqBrF,EAAGjf,MAGnC75B,GAASnB,EAAA3oB,YAAY8kC,QAKzB,GAAI89B,EAAGjc,KAAK/9B,EAAAC,MAAMy7B,WAAY,CAC5B,IAAIwiB,EAAiBlE,EAAG/e,SACpB14B,EAAaxtB,KAAKqoE,gBAAgBpD,EAAI1T,GAC1C,IAAK/jC,EAAY,OAAO,KACxB,IAAIkf,EAAW1sC,KAAK8kE,oBACpB,GAAIvT,EACF,IAAK,IAAIlxD,EAAI,EAAG0c,EAAIyQ,EAAWjoB,OAAQlF,EAAI0c,IAAK1c,EAAG,CACjD,IAAI6mE,EAAY15C,EAAWntB,GAC3B,GAAI6mE,EAAU36C,MACZvB,EAAA3oB,YAAY0gD,OACZ/3B,EAAA3oB,YAAYygD,UACZ93B,EAAA3oB,YAAYwgD,QACZ73B,EAAA3oB,YAAY2gD,UACX,CACD,IAAIpqB,EAA2BmG,EAAA9S,KAAK6J,uBAClCoxC,EAAUtmE,KACVsmE,EAAU7xD,KACV,KACA,KACA6xD,EAAU/6C,MAAQnB,EAAA3oB,YAAYwvC,SAC9Bq1B,EAAU7iE,OAEZu0B,EAAyB8E,eAAiBr9B,EAC1Cu4B,EAAyB1M,OAASA,EAClCg7C,EAAUtuC,yBAA2BA,EACrC1M,EAAOmH,QAAQvtB,KAAK8yB,SAGf4R,EACLhd,EAAWjoB,QACbvF,KAAKwG,MACHq4B,EAAA96B,eAAewlE,sCACf3oE,EAAKyD,OAGA+kE,IACgB,GAArB57C,EAAWjoB,QACbvF,KAAKwG,MACHq4B,EAAA96B,eAAeslE,+CACfzoE,EAAKyD,OAGLmpB,EAAWjoB,QAAUioB,EAAW,GAAGtT,aACrCla,KAAKwG,MACHq4B,EAAA96B,eAAeulE,oDACf1oE,EAAKyD,QAKX,IAAIkV,EAAoC,KACxC,GAAI0rD,EAAGjc,KAAK/9B,EAAAC,MAAMq8B,QAahB,GAZI3mD,EAAK0qB,MAAQyT,EAAA3T,SAASkP,YACxBt6B,KAAKwG,MACHq4B,EAAA96B,eAAe0mE,2DACfxF,EAAG5gE,SAEI+kE,GACTppE,KAAKwG,MACHq4B,EAAA96B,eAAe2mE,oDACfzF,EAAG5gE,WAGPkV,EAAavZ,KAAKymE,UAAUxB,EAAIrkE,EAAK0qB,MAAQyT,EAAA3T,SAASkP,aAAe8uC,IACpD,OAAO,UAExB7vD,EAAawlB,EAAA9S,KAAKa,kBAAkBm4C,EAAG5gE,MAAM4gE,EAAGjf,MAC3CojB,GAAYxoE,EAAK0qB,MAAQyT,EAAA3T,SAASkP,aACrCt6B,KAAKwG,MACHq4B,EAAA96B,eAAegsD,cACfx2C,EAAWlV,OAKjB,IAAI+xB,EAAY2I,EAAA9S,KAAKsB,gBACnBC,EACAjU,EACAmzB,GACA,EACAu4B,EAAG5gE,MAAM8kE,EAAgBlE,EAAGjf,MAG1B7tC,EAAyB,KAC7B,GAAI8sD,EAAGjc,KAAK/9B,EAAAC,MAAM28B,YAQhB,GAPI17B,EAAQnB,EAAA3oB,YAAY+kC,SACtBpnC,KAAKwG,MACHq4B,EAAA96B,eAAestD,yDACf4T,EAAG5gE,WAGP8T,EAAOnY,KAAKwpE,oBAAoBvE,GAAI,IACzB,OAAO,UACP94C,EAAQnB,EAAA3oB,YAAY+kC,SAC/BpnC,KAAKwG,MACHq4B,EAAA96B,eAAeutD,gFACf2T,EAAG5gE,SAIP,IAAIsmE,EAAY5rC,EAAA9S,KAAKqK,wBACnB11B,EACAuyB,EACAiD,EACAje,EACAmb,EACAnH,EACA84C,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAGxB,OADAif,EAAGjc,KAAK/9B,EAAAC,MAAMs8B,WACPmjB,EAEF,GAAIpZ,EACTvxD,KAAKwG,MACHq4B,EAAA96B,eAAe6mE,sCACfhqE,EAAKyD,WAGF,KAAImmC,IAAY4+B,EAOhB,CACDj9C,EAAQnB,EAAA3oB,YAAYo/C,UACtBzhD,KAAKwG,MACHq4B,EAAA96B,eAAesiE,gCACfpB,EAAG5gE,MAAM4lE,EAAeC,GAAc,YAItC/9C,EAAQnB,EAAA3oB,YAAYymC,KACtB9oC,KAAKwG,MACHq4B,EAAA96B,eAAesiE,gCACfpB,EAAG5gE,MAlOW,EACF,GAiOgB,OAI5B8nB,EAAQnB,EAAA3oB,YAAY0mC,KACtB/oC,KAAKwG,MACHq4B,EAAA96B,eAAesiE,gCACfpB,EAAG5gE,MAAMyZ,EAAUusD,GAAS,OAIhC,IAAIh1D,EAA8B,KAClC,GAAI4vD,EAAGjc,KAAK/9B,EAAAC,MAAMq8B,QAEhB,KADAlyC,EAAOrV,KAAKymE,UAAUxB,IACX,OAAO,UAElBjlE,KAAKwG,MACHq4B,EAAA96B,eAAegsD,cACfkV,EAAG5gE,SAGP,IAAI6V,EAAiC,KACrC,GAAI+qD,EAAGjc,KAAK/9B,EAAAC,MAAM+5B,WAChB/qC,EAAcla,KAAK8nE,gBAAgB7C,IACjB,OAAO,KAE3B,IAAI4F,EAAW9rC,EAAA9S,KAAK6J,uBAClBl1B,EACAyU,EACA6E,EACAoZ,EACAnH,EACA84C,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAGxB,OADAif,EAAGjc,KAAK/9B,EAAAC,MAAMs8B,WACPqjB,EApDP7qE,KAAKwG,MACHq4B,EAAA96B,eAAeutD,gFACf1wD,EAAKyD,OAoDT,OAAO,MAGTogE,EAAAxiE,UAAA+jE,eAAA,SACEf,EACA94C,EACAmH,EACA6xC,GAKA,GAAIF,EAAGlc,iBAAkB,CACvB,IAAI71B,EAAa6L,EAAA9S,KAAKc,2BAA2Bk4C,EAAGzb,iBAAkByb,EAAG5gE,SACzE,GAAI4gE,EAAGjc,KAAK/9B,EAAAC,MAAM28B,WAAY,CAS5B,IARA,IAAIx0B,EAAU,IAAIjtB,MACd1E,EAAKq9B,EAAA9S,KAAKuK,2BACZtD,EACAG,EACAC,EACAnH,EACA84C,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,OAEhBif,EAAGjc,KAAK/9B,EAAAC,MAAM48B,aAAa,CACjC,IAAIhrB,EAAS98B,KAAKklE,uBAAuBD,EAAIvjE,GAC7C,IAAKo7B,EAAQ,OAAO,KACpBA,EAAO5Q,OAASxqB,EAChB2xB,EAAQvtB,KAAKg3B,GAGf,OADAmoC,EAAGjc,KAAK/9B,EAAAC,MAAMs8B,WACP9lD,EAEP1B,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,UAIhBrE,KAAKwG,MACHq4B,EAAA96B,eAAeijE,oBACf/B,EAAG5gE,SAGP,OAAO,MAGTogE,EAAAxiE,UAAAmkE,YAAA,SACEnB,EACA94C,EACAg5C,GAKA,IAAI9wC,EAAuC,KAC3C,GAAI4wC,EAAGjc,KAAK/9B,EAAAC,MAAM28B,WAAY,CAE5B,IADA,IAAIx0B,EAAU,IAAIjtB,OACV6+D,EAAGjc,KAAK/9B,EAAAC,MAAM48B,aAAa,CAC/B,IAAIhrB,EAAS98B,KAAK8qE,kBAAkB7F,GACpC,IAAKnoC,EAAQ,OAAO,KAEtB,GADEzJ,EAAQvtB,KAAKg3B,IACVmoC,EAAGjc,KAAK/9B,EAAAC,MAAMmP,OAAQ,CACzB,GAAI4qC,EAAGjc,KAAK/9B,EAAAC,MAAM48B,YAChB,MAMA,OAJA9nD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,KAEP,MAIb,GAAI4gE,EAAGjc,KAAK/9B,EAAAC,MAAMk3B,MAAO,CACvB,IAAI6iB,EAAGjc,KAAK/9B,EAAAC,MAAMw7B,eAOhB,OAJA1mD,KAAKwG,MACHq4B,EAAA96B,eAAeqmC,wBACf66B,EAAG5gE,SAEE,KANPgwB,EAAO0K,EAAA9S,KAAK8F,8BAA8BkzC,EAAG9kD,aAAc8kD,EAAG5gE,SAgBlE,OALqB,QADjBqwB,GADA9U,EAAMmf,EAAA9S,KAAKmI,sBAAsBf,EAASgB,EAAMlI,EAAO84C,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,OAC1DtxB,eACO10B,KAAK2kE,QAAQ79B,IAAIpS,KAC7C10B,KAAK0kE,QAAQ5+D,KAAK4uB,GAClB10B,KAAK2kE,QAAQ74B,IAAIpX,IAEnBuwC,EAAGjc,KAAK/9B,EAAAC,MAAMs8B,WACP5nC,EACF,GAAIqlD,EAAGjc,KAAK/9B,EAAAC,MAAMg5B,UACvB,GAAI+gB,EAAGjc,KAAK/9B,EAAAC,MAAMk3B,MAAO,CACvB,GAAI6iB,EAAGjc,KAAK/9B,EAAAC,MAAMw7B,eAAgB,CAChCryB,EAAO0K,EAAA9S,KAAK8F,8BAA8BkzC,EAAG9kD,aAAc8kD,EAAG5gE,SAC9D,IAAIub,EAAMmf,EAAA9S,KAAKmI,sBAAsB,KAAMC,EAAMlI,EAAO84C,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAC1EtxB,EAAehxB,OAAOkc,EAAI8U,cAC1B3vB,EAASkgE,EAAGlgE,OAQhB,OAPKA,EAAOg3B,cAAah3B,EAAOg3B,YAAc,IAAI8P,KAClD9mC,EAAOg3B,YAAY+P,IAAIpX,GAClB10B,KAAK2kE,QAAQ79B,IAAIpS,KACpB10B,KAAK0kE,QAAQ5+D,KAAK4uB,GAClB10B,KAAK2kE,QAAQ74B,IAAIpX,IAEnBuwC,EAAGjc,KAAK/9B,EAAAC,MAAMs8B,WACP5nC,EAEP5f,KAAKwG,MACHq4B,EAAA96B,eAAeqmC,wBACf66B,EAAG5gE,cAIPrE,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,aAIhBrE,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,KAGhB,OAAO,MAGTogE,EAAAxiE,UAAA6oE,kBAAA,SACE7F,GAKA,GAAIA,EAAGlc,iBAAkB,CACvB,IAAI71B,EAAa6L,EAAA9S,KAAKc,2BAA2Bk4C,EAAGzb,iBAAkByb,EAAG5gE,SACrE0mE,EAA4C,KAChD,GAAI9F,EAAGjc,KAAK/9B,EAAAC,MAAMw2B,IAAK,CACrB,IAAIujB,EAAGhc,qBAOL,OAJAjpD,KAAKwG,MACHq4B,EAAA96B,eAAeijE,oBACf/B,EAAG5gE,SAEE,KANP0mE,EAAehsC,EAAA9S,KAAKc,2BAA2Bk4C,EAAGzb,iBAAkByb,EAAG5gE,SAS3E,OAAO06B,EAAA9S,KAAK6I,mBACV5B,EACA63C,EACAA,EACI9/C,EAAAE,MAAMplB,KAAKmtB,EAAW7uB,MAAO0mE,EAAa1mE,OAC1C6uB,EAAW7uB,OAQnB,OALErE,KAAKwG,MACHq4B,EAAA96B,eAAeijE,oBACf/B,EAAG5gE,SAGA,MAGTogE,EAAAxiE,UAAAikE,YAAA,SACEjB,GAOA,IAAIE,EAAWF,EAAG/e,SACd7yB,EAAsC,KACtCmC,EAA6C,KAC7Cw1C,GAAW,EACf,GAAI/F,EAAGjc,KAAK/9B,EAAAC,MAAM28B,WAEhB,IADAx0B,EAAU,IAAIjtB,OACN6+D,EAAGjc,KAAK/9B,EAAAC,MAAM48B,aAAa,CACjC,IAAIhrB,EAAS98B,KAAKirE,uBAAuBhG,GACzC,IAAKnoC,EAAQ,OAAO,KAEpB,GADAzJ,EAAQvtB,KAAKg3B,IACRmoC,EAAGjc,KAAK/9B,EAAAC,MAAMmP,OAAQ,CACzB,GAAI4qC,EAAGjc,KAAK/9B,EAAAC,MAAM48B,YAChB,MAMA,OAJA9nD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,KAEP,WAIR,GAAI4gE,EAAGjc,KAAK/9B,EAAAC,MAAMg5B,UAAW,CAClC,IAAI+gB,EAAGjc,KAAK/9B,EAAAC,MAAMw2B,IAehB,OAJA1hD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,MAEP,KAdP,IAAI4gE,EAAGlc,iBAOL,OAJA/oD,KAAKwG,MACHq4B,EAAA96B,eAAeijE,oBACf/B,EAAG5gE,SAEE,KANPmxB,EAAgBuJ,EAAA9S,KAAKc,2BAA2Bk4C,EAAGzb,iBAAkByb,EAAG5gE,cAgB5E2mE,GAAW,EAGb,GAAIA,GAAY/F,EAAGjc,KAAK/9B,EAAAC,MAAMk3B,MAAO,CACnC,GAAI6iB,EAAGjc,KAAK/9B,EAAAC,MAAMw7B,eAAgB,CAChC,IAAIryB,EAAO0K,EAAA9S,KAAK8F,8BAA8BkzC,EAAG9kD,aAAc8kD,EAAG5gE,SAC9Dub,OAAG,EACH4V,GACF9xB,QAAQ2vB,GACRzT,EAAMmf,EAAA9S,KAAKwJ,kCAAkCD,EAAenB,EAAM4wC,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,OAExFpmC,EAAMmf,EAAA9S,KAAKmJ,sBAAsB/B,EAASgB,EAAM4wC,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAExE,IAAItxB,EAAe9U,EAAI8U,aAMvB,OALK10B,KAAK2kE,QAAQ79B,IAAIpS,KACpB10B,KAAK0kE,QAAQ5+D,KAAK4uB,GAClB10B,KAAK2kE,QAAQ74B,IAAIpX,IAEnBuwC,EAAGjc,KAAK/9B,EAAAC,MAAMs8B,WACP5nC,EAEP5f,KAAKwG,MACHq4B,EAAA96B,eAAeqmC,wBACf66B,EAAG5gE,cAIPrE,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,QAGhB,OAAO,MAGTogE,EAAAxiE,UAAAgpE,uBAAA,SACEhG,GAKA,GAAIA,EAAGhc,qBAAsB,CAC3B,IAAI/1B,EAAa6L,EAAA9S,KAAKc,2BAA2Bk4C,EAAGzb,iBAAkByb,EAAG5gE,SACrE0mE,EAA4C,KAChD,GAAI9F,EAAGjc,KAAK/9B,EAAAC,MAAMw2B,IAAK,CACrB,IAAIujB,EAAGlc,iBAOL,OAJA/oD,KAAKwG,MACHq4B,EAAA96B,eAAeijE,oBACf/B,EAAG5gE,SAEE,KANP0mE,EAAehsC,EAAA9S,KAAKc,2BAA2Bk4C,EAAGzb,iBAAkByb,EAAG5gE,SAS3E,OAAO06B,EAAA9S,KAAKyJ,wBACVxC,EACA63C,EACAA,EACI9/C,EAAAE,MAAMplB,KAAKmtB,EAAW7uB,MAAO0mE,EAAa1mE,OAC1C6uB,EAAW7uB,OAQnB,OALErE,KAAKwG,MACHq4B,EAAA96B,eAAeijE,oBACf/B,EAAG5gE,SAGA,MAGTogE,EAAAxiE,UAAAgkE,kBAAA,SACEhB,EACAE,GAKA,GAAIF,EAAGlc,iBAAkB,CACvB,IAAIgiB,EAAehsC,EAAA9S,KAAKc,2BAA2Bk4C,EAAGzb,iBAAkByb,EAAG5gE,SAC3E,GAAI4gE,EAAGjc,KAAK/9B,EAAAC,MAAM+5B,QAAS,CACzB,GAAIggB,EAAGlc,iBAAkB,CACvB,IAAI71B,EAAa6L,EAAA9S,KAAKc,2BAA2Bk4C,EAAGzb,iBAAkByb,EAAG5gE,SACrEub,EAAMmf,EAAA9S,KAAK2I,4BAA4B1B,EAAY63C,EAAc9F,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAE3F,OADAif,EAAGjc,KAAK/9B,EAAAC,MAAMs8B,WACP5nC,EAEP5f,KAAKwG,MACHq4B,EAAA96B,eAAeijE,oBACf/B,EAAG5gE,cAIPrE,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,UAIhBrE,KAAKwG,MACHq4B,EAAA96B,eAAeijE,oBACf/B,EAAG5gE,SAGP,OAAO,MAGTogE,EAAAxiE,UAAA6jE,eAAA,SACEb,EACAiG,QAAA,IAAAA,OAAA,GAKA,IAAI/hB,EAAQ8b,EAAG/b,OAEXv1B,EAA8B,KAClC,OAFYsxC,EAAG3/B,QAGb,KAAKra,EAAAC,MAAM8R,MACTrJ,EAAY3zB,KAAKmrE,WAAWlG,GAC5B,MAEF,KAAKh6C,EAAAC,MAAMgmB,MACTvd,EAAY3zB,KAAK4lE,cAAcX,EAAIj6C,EAAA3oB,YAAY6uC,MAAO,KAAM+zB,EAAG/e,UAC/D,MAEF,KAAKj7B,EAAAC,MAAM+R,SACTtJ,EAAY3zB,KAAKorE,cAAcnG,GAC/B,MAEF,KAAKh6C,EAAAC,MAAMgS,GACTvJ,EAAY3zB,KAAKqrE,iBAAiBpG,GAClC,MAEF,KAAKh6C,EAAAC,MAAMyS,IACThK,EAAY3zB,KAAKsrE,kBAAkBrG,GACnC,MAEF,KAAKh6C,EAAAC,MAAM0S,GACTjK,EAAY3zB,KAAKurE,iBAAiBtG,GAClC,MAEF,KAAKh6C,EAAAC,MAAMu3B,IACT9uB,EAAY3zB,KAAK4lE,cAAcX,EAAIj6C,EAAA3oB,YAAYogD,IAAK,KAAMwiB,EAAG/e,UAC7D,MAEF,KAAKj7B,EAAAC,MAAMg4B,IACTvvB,EAAY3zB,KAAK4lE,cAAcX,EAAIj6C,EAAA3oB,YAAY+pB,KAAM,KAAM64C,EAAG/e,UAC9D,MAEF,KAAKj7B,EAAAC,MAAM28B,UACTl0B,EAAY3zB,KAAKwpE,oBAAoBvE,EAAIiG,GACzC,MAEF,KAAKjgD,EAAAC,MAAM8S,OACLktC,GACFlrE,KAAKwG,MACHq4B,EAAA96B,eAAeynE,2DACfvG,EAAG5gE,SAGPsvB,EAAY3zB,KAAKgoE,YAAY/C,GAC7B,MAEF,KAAKh6C,EAAAC,MAAMs8B,UACT,OAAOzoB,EAAA9S,KAAK4H,qBAAqBoxC,EAAG5gE,MAAM4gE,EAAG/e,WAE/C,KAAKj7B,EAAAC,MAAMgT,OACTvK,EAAY3zB,KAAKyrE,qBAAqBxG,GACtC,MAEF,KAAKh6C,EAAAC,MAAMiT,MACTxK,EAAY3zB,KAAK0rE,oBAAoBzG,GACrC,MAEF,KAAKh6C,EAAAC,MAAMkT,IACTzK,EAAY3zB,KAAK2rE,kBAAkB1G,GACnC,MAEF,KAAKh6C,EAAAC,MAAMqT,KACT5K,EAAY3zB,KAAK4rE,mBAAmB3G,GACpC,MAEF,KAAKh6C,EAAAC,MAAMsT,MACT7K,EAAY3zB,KAAK6rE,oBAAoB5G,GACrC,MAEF,KAAKh6C,EAAAC,MAAMsN,KACT,GAAIysC,EAAGvc,MAAK,EAAOz9B,EAAAs2B,mBAAmB+G,SAAWr9B,EAAAC,MAAMU,WAAY,CACjE+H,EAAY3zB,KAAKmmE,qBAAqBlB,EAAIj6C,EAAA3oB,YAAY+pB,KAAM,KAAM64C,EAAG/e,UACrE,MAIJ,QACE+e,EAAG1b,MAAMJ,GACTx1B,EAAY3zB,KAAK8rE,yBAAyB7G,GAU9C,OANKtxC,EAIHsxC,EAAG3b,QAAQH,IAHX8b,EAAG1b,MAAMJ,GACTnpD,KAAKqlE,cAAcJ,IAIdtxC,GAGT8wC,EAAAxiE,UAAAunE,oBAAA,SACEvE,EACAiG,GAOA,IAFA,IAAI/F,EAAWF,EAAG/e,SACdrzB,EAAa,IAAIzsB,OACb6+D,EAAGjc,KAAK/9B,EAAAC,MAAM48B,aAAa,CACjC,IAAIqB,EAAQ8b,EAAG/b,OACXv1B,EAAY3zB,KAAK8lE,eAAeb,EAAIiG,GACnCv3C,GAIHsxC,EAAG3b,QAAQH,GACXt2B,EAAW/sB,KAAK6tB,KAJhBsxC,EAAG1b,MAAMJ,GACTnpD,KAAKqlE,cAAcJ,IAMvB,IAAIrlD,EAAMmf,EAAA9S,KAAK2G,qBAAqBC,EAAYoyC,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAEtE,OADAif,EAAGjc,KAAK/9B,EAAAC,MAAMs8B,WACP5nC,GAGT6kD,EAAAxiE,UAAAkpE,WAAA,SACElG,GAKA,IAAI/xC,EAA0C,KAC1C+xC,EAAGvc,MAAK,IAASz9B,EAAAC,MAAMU,YAAeq5C,EAAG5e,qBAC3C4e,EAAG3/B,KAAKra,EAAAs2B,mBAAmB+G,QAC3Bp1B,EAAa6L,EAAA9S,KAAKc,2BAA2Bk4C,EAAGzb,iBAAkByb,EAAG5gE,UAEvE,IAAIub,EAAMmf,EAAA9S,KAAK8G,qBAAqBG,EAAY+xC,EAAG5gE,SAEnD,OADA4gE,EAAGjc,KAAK/9B,EAAAC,MAAMs8B,WACP5nC,GAGT6kD,EAAAxiE,UAAAmpE,cAAA,SACEnG,GAKA,IAAI/xC,EAA0C,KAC1C+xC,EAAGvc,MAAK,IAASz9B,EAAAC,MAAMU,YAAeq5C,EAAG5e,qBAC3C4e,EAAG3/B,KAAKra,EAAAs2B,mBAAmB+G,QAC3Bp1B,EAAa6L,EAAA9S,KAAKc,2BAA2Bk4C,EAAGzb,iBAAkByb,EAAG5gE,UAEvE,IAAIub,EAAMmf,EAAA9S,KAAKuH,wBAAwBN,EAAY+xC,EAAG5gE,SAEtD,OADA4gE,EAAGjc,KAAK/9B,EAAAC,MAAMs8B,WACP5nC,GAGT6kD,EAAAxiE,UAAAopE,iBAAA,SACEpG,GAKA,IAAIE,EAAWF,EAAG/e,SACdvyB,EAAY3zB,KAAK8lE,eAAeb,GACpC,IAAKtxC,EAAW,OAAO,KAEvB,GAAIsxC,EAAGjc,KAAK/9B,EAAAC,MAAMsT,OAEhB,GAAIymC,EAAGjc,KAAK/9B,EAAAC,MAAMy7B,WAAY,CAC5B,IAAI9uC,EAAY7X,KAAK8nE,gBAAgB7C,GACrC,IAAKptD,EAAW,OAAO,KAEvB,GAAIotD,EAAGjc,KAAK/9B,EAAAC,MAAM07B,YAAa,CAC7B,IAAIhnC,EAAMmf,EAAA9S,KAAKyH,kBAA6BC,EAAuB9b,EAAWotD,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAEpG,OADAif,EAAGjc,KAAK/9B,EAAAC,MAAMs8B,WACP5nC,EAEP5f,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,UAIhBrE,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,UAIhBrE,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,SAGhB,OAAO,MAGTogE,EAAAxiE,UAAA6pE,yBAAA,SACE7G,GAKA,IAAIxwD,EAAOzU,KAAK8nE,gBAAgB7C,GAChC,IAAKxwD,EAAM,OAAO,KAElB,IAAImL,EAAMmf,EAAA9S,KAAK+I,0BAA0BvgB,GAEzC,OADAwwD,EAAGjc,KAAK/9B,EAAAC,MAAMs8B,WACP5nC,GAGT6kD,EAAAxiE,UAAAqpE,kBAAA,SACErG,GAKA,IAAIE,EAAWF,EAAG/e,SAElB,GAAI+e,EAAGjc,KAAK/9B,EAAAC,MAAMy7B,WAAY,CAC5B,IAAIzsC,EAAgC,KAEpC,GAAI+qD,EAAGjc,KAAK/9B,EAAAC,MAAMgmB,OAChBh3B,EAAcla,KAAK4lE,cAAcX,EAAIj6C,EAAA3oB,YAAY6uC,MAAO,KAAM+zB,EAAG/e,eAC5D,GAAI+e,EAAGjc,KAAK/9B,EAAAC,MAAMu3B,KACvBvoC,EAAcla,KAAK4lE,cAAcX,EAAIj6C,EAAA3oB,YAAYogD,IAAK,KAAMwiB,EAAG/e,eAC1D,GAAI+e,EAAGjc,KAAK/9B,EAAAC,MAAMg4B,KACvBhpC,EAAcla,KAAK4lE,cAAcX,EAAIj6C,EAAA3oB,YAAY+pB,KAAM,KAAM64C,EAAG/e,eAE3D,IAAK+e,EAAGjc,KAAK/9B,EAAAC,MAAMs8B,cACxBttC,EAAcla,KAAK8rE,yBAAyB7G,IAC1B,OAAO,KAG3B,GAAIA,EAAG3hB,OAASr4B,EAAAC,MAAMs8B,UAAW,CAC/B,IAAI3vC,EAAwC,KAC5C,IAAKotD,EAAGjc,KAAK/9B,EAAAC,MAAMs8B,cACjB3vC,EAAY7X,KAAK8rE,yBAAyB7G,IAC1B,OAAO,KAGzB,GAAIA,EAAG3hB,OAASr4B,EAAAC,MAAMs8B,UAAW,CAC/B,IAAIvxB,EAAiC,KACrC,IAAKgvC,EAAGjc,KAAK/9B,EAAAC,MAAM07B,YAAa,CAE9B,KADA3wB,EAAcj2B,KAAK8nE,gBAAgB7C,IACjB,OAAO,KAEzB,IAAKA,EAAGjc,KAAK/9B,EAAAC,MAAM07B,YAKjB,OAJA5mD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,KAEP,KAIX,IAAIsvB,EAAY3zB,KAAK8lE,eAAeb,GACpC,OAAKtxC,EAEEoL,EAAA9S,KAAK+J,mBACV9b,EACArC,EACIA,EAAUG,WACV,KACJie,EACAtC,EACAsxC,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MATD,KAavBhmD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,UAIhBrE,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,UAIhBrE,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,KAGhB,OAAO,MAGTogE,EAAAxiE,UAAAspE,iBAAA,SACEtG,GAKA,IAAIE,EAAWF,EAAG/e,SAClB,GAAI+e,EAAGjc,KAAK/9B,EAAAC,MAAMy7B,WAAY,CAC5B,IAAI9uC,EAAY7X,KAAK8nE,gBAAgB7C,GACrC,IAAKptD,EAAW,OAAO,KACvB,GAAIotD,EAAGjc,KAAK/9B,EAAAC,MAAM07B,YAAa,CAC7B,IAAIjzB,EAAY3zB,KAAK8lE,eAAeb,GACpC,IAAKtxC,EAAW,OAAO,KACvB,IAAIo4C,EAAkC,KACtC,OAAI9G,EAAGjc,KAAK/9B,EAAAC,MAAM+2B,SAChB8pB,EAAgB/rE,KAAK8lE,eAAeb,IACT,KAEtBlmC,EAAA9S,KAAKiJ,kBACVrd,EACA8b,EACAo4C,EACA9G,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAGxBhmD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,UAIhBrE,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,KAGhB,OAAO,MAGTogE,EAAAxiE,UAAAwpE,qBAAA,SACExG,GAKA,IAAIE,EAAWF,EAAG/e,SAClB,GAAI+e,EAAGjc,KAAK/9B,EAAAC,MAAMy7B,WAAY,CAC5B,IAAI9uC,EAAY7X,KAAK8nE,gBAAgB7C,GACrC,IAAKptD,EAAW,OAAO,KACvB,GAAIotD,EAAGjc,KAAK/9B,EAAAC,MAAM07B,YAAa,CAC7B,GAAIqe,EAAGjc,KAAK/9B,EAAAC,MAAM28B,WAAY,CAE5B,IADA,IAAIhxB,EAAQ,IAAIzwB,OACR6+D,EAAGjc,KAAK/9B,EAAAC,MAAM48B,aAAa,CACjC,IAAIkkB,EAAQhsE,KAAKisE,gBAAgBhH,GACjC,IAAK+G,EAAO,OAAO,KACnBn1C,EAAM/wB,KAAiBkmE,GAEzB,IAAIpsD,EAAMmf,EAAA9S,KAAK2K,sBAAsB/e,EAAWgf,EAAOouC,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAE7E,OADAif,EAAGjc,KAAK/9B,EAAAC,MAAMs8B,WACP5nC,EAEP5f,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,UAIhBrE,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,UAIhBrE,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,KAGhB,OAAO,MAGTogE,EAAAxiE,UAAAgqE,gBAAA,SACEhH,GAGA,IACIpyC,EACAc,EAFAwxC,EAAWF,EAAG/e,SAMlB,GAAI+e,EAAGjc,KAAK/9B,EAAAC,MAAM22B,MAAO,CACvB,IAAIrqC,EAAQxX,KAAK8nE,gBAAgB7C,GACjC,IAAKztD,EAAO,OAAO,KACnB,GAAIytD,EAAGjc,KAAK/9B,EAAAC,MAAMq8B,OAAQ,CAExB,IADA10B,EAAa,IAAIzsB,MACV6+D,EAAGvc,QAAUz9B,EAAAC,MAAM22B,MAAQojB,EAAG9e,WAAal7B,EAAAC,MAAMiiB,SAAW83B,EAAG9e,WAAal7B,EAAAC,MAAM48B,YAAY,CAEnG,KADAn0B,EAAY3zB,KAAK8lE,eAAeb,IAChB,OAAO,KACvBpyC,EAAW/sB,KAAK6tB,GAElB,OAAOoL,EAAA9S,KAAK8K,iBAAiBvf,EAAOqb,EAAYoyC,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAEtEhmD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,UAMX,GAAI4gE,EAAGjc,KAAK/9B,EAAAC,MAAMiiB,SAAU,CACjC,GAAI83B,EAAGjc,KAAK/9B,EAAAC,MAAMq8B,OAAQ,CAExB,IADA10B,EAAa,IAAIzsB,MACV6+D,EAAGvc,QAAUz9B,EAAAC,MAAM22B,MAAQojB,EAAG9e,WAAal7B,EAAAC,MAAMiiB,SAAW83B,EAAG9e,WAAal7B,EAAAC,MAAM48B,YAAY,CAEnG,KADAn0B,EAAY3zB,KAAK8lE,eAAeb,IAChB,OAAO,KACvBpyC,EAAW/sB,KAAK6tB,GAElB,OAAOoL,EAAA9S,KAAK8K,iBAAiB,KAAMlE,EAAYoyC,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAErEhmD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,UAIhBrE,KAAKwG,MACHq4B,EAAA96B,eAAemoE,0BACfjH,EAAG5gE,SAGP,OAAO,MAGTogE,EAAAxiE,UAAAypE,oBAAA,SACEzG,GAKA,IAAIE,EAAWF,EAAG/e,SACdluC,EAAahY,KAAK8nE,gBAAgB7C,GACtC,IAAKjtD,EAAY,OAAO,KACxB,IAAI4H,EAAMmf,EAAA9S,KAAKgL,qBAAiCjf,EAAYitD,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAElF,OADAif,EAAGjc,KAAK/9B,EAAAC,MAAMs8B,WACP5nC,GAGT6kD,EAAAxiE,UAAA0pE,kBAAA,SACE1G,GAQA,IACIn3C,EADAq3C,EAAWF,EAAG/e,SAElB,GAAI+e,EAAGjc,KAAK/9B,EAAAC,MAAM28B,WAAY,CAE5B,IADA,IAAIh1B,EAAa,IAAIzsB,OACb6+D,EAAGjc,KAAK/9B,EAAAC,MAAM48B,aAAa,CAEjC,KADAh6B,EAAO9tB,KAAK8lE,eAAeb,IAChB,OAAO,KAClBpyC,EAAW/sB,KAAgBgoB,GAE7B,IAAIsJ,EAA6C,KAC7CC,EAAsC,KACtCC,EAAwC,KAC5C,GAAI2tC,EAAGjc,KAAK/9B,EAAAC,MAAM42B,OAAQ,CACxB,IAAKmjB,EAAGjc,KAAK/9B,EAAAC,MAAMy7B,WAKjB,OAJA3mD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,KAEP,KAET,IAAK4gE,EAAGlc,iBAKN,OAJA/oD,KAAKwG,MACHq4B,EAAA96B,eAAeijE,oBACf/B,EAAG5gE,SAEE,KAGT,GADA+yB,EAAgB2H,EAAA9S,KAAKc,2BAA2Bk4C,EAAGzb,iBAAkByb,EAAG5gE,UACnE4gE,EAAGjc,KAAK/9B,EAAAC,MAAM07B,YAKjB,OAJA5mD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,KAEP,KAET,IAAK4gE,EAAGjc,KAAK/9B,EAAAC,MAAM28B,WAKjB,OAJA7nD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,KAEP,KAGT,IADAgzB,MACQ4tC,EAAGjc,KAAK/9B,EAAAC,MAAM48B,aAAa,CAEjC,KADAh6B,EAAO9tB,KAAK8lE,eAAeb,IAChB,OAAO,KAClB5tC,EAAgBvxB,KAAgBgoB,IAGpC,GAAIm3C,EAAGjc,KAAK/9B,EAAAC,MAAMi3B,SAAU,CAC1B,IAAK8iB,EAAGjc,KAAK/9B,EAAAC,MAAM28B,WAKjB,OAJA7nD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,KAEP,KAGT,IADAizB,MACQ2tC,EAAGjc,KAAK/9B,EAAAC,MAAM48B,aAAa,CAEjC,KADAh6B,EAAO9tB,KAAK8lE,eAAeb,IAChB,OAAO,KAClB3tC,EAAkBxxB,KAAgBgoB,IAGtC,IAAMuJ,IAAmBC,EAKvB,OAJAt3B,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,SAEP,KAET,IAAIub,EAAMmf,EAAA9S,KAAKkL,mBACbtE,EACAuE,EACAC,EACAC,EACA2tC,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAGxB,OADAif,EAAGjc,KAAK/9B,EAAAC,MAAMs8B,WACP5nC,EAOT,OALE5f,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,KAGT,MAGTogE,EAAAxiE,UAAAkkE,qBAAA,SACElB,EACA94C,EACAmH,EACA6xC,GAKA,GAAIF,EAAGlc,iBAAkB,CACvB,IAAInoD,EAAOm+B,EAAA9S,KAAKc,2BAA2Bk4C,EAAGzb,iBAAkByb,EAAG5gE,SAC/D8uB,EAA6C,KACjD,GAAI8xC,EAAGjc,KAAK/9B,EAAAC,MAAMu4B,UAAW,CAE3B,KADAtwB,EAAiBnzB,KAAKioE,oBAAoBhD,IACrB,OAAO,KAC5B94C,GAASnB,EAAA3oB,YAAY8kC,QAEvB,GAAI89B,EAAGjc,KAAK/9B,EAAAC,MAAM+5B,QAAS,CACzB,IAAI5vC,EAAOrV,KAAKymE,UAAUxB,GAC1B,IAAK5vD,EAAM,OAAO,KAClB,IAAIuK,EAAMmf,EAAA9S,KAAKuL,sBACb52B,EACAuyB,EACA9d,EACAie,EACAnH,EACA84C,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAGxB,OADAif,EAAGjc,KAAK/9B,EAAAC,MAAMs8B,WACP5nC,EAEP5f,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,UAIhBrE,KAAKwG,MACHq4B,EAAA96B,eAAeijE,oBACf/B,EAAG5gE,SAGP,OAAO,MAGTogE,EAAAxiE,UAAA2pE,mBAAA,SACE3G,GAKA,IAAIE,EAAWF,EAAG/e,SACdluC,EAAahY,KAAK8nE,gBAAgB7C,EAAE,IACxC,IAAKjtD,EAAY,OAAO,KACxB,IAAI4H,EAAMmf,EAAA9S,KAAK8L,oBAAoB/f,EAAYitD,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAErE,OADAif,EAAGjc,KAAK/9B,EAAAC,MAAMs8B,WACP5nC,GAGT6kD,EAAAxiE,UAAA4pE,oBAAA,SACE5G,GAKA,IAAIE,EAAWF,EAAG/e,SAClB,GAAI+e,EAAGjc,KAAK/9B,EAAAC,MAAMy7B,WAAY,CAC5B,IAAI3uC,EAAahY,KAAK8nE,gBAAgB7C,GACtC,IAAKjtD,EAAY,OAAO,KACxB,GAAIitD,EAAGjc,KAAK/9B,EAAAC,MAAM07B,YAAa,CAC7B,IAAIjzB,EAAY3zB,KAAK8lE,eAAeb,GACpC,IAAKtxC,EAAW,OAAO,KACvB,IAAI/T,EAAMmf,EAAA9S,KAAKgM,qBAAqBjgB,EAAY2b,EAAWsxC,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAEjF,OADAif,EAAGjc,KAAK/9B,EAAAC,MAAMs8B,WACP5nC,EAEP5f,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,UAIhBrE,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,KAGhB,OAAO,MAMTogE,EAAAxiE,UAAAkqE,qBAAA,SACElH,GAGA,IAAI3hB,EAAQ2hB,EAAG3/B,KAAKra,EAAAs2B,mBAAmB+G,QACnC6c,EAAWF,EAAG/e,SACdzxC,EAA0B,KAE9B,GAAI6uC,GAASr4B,EAAAC,MAAMM,KACjB,OAAOuT,EAAA9S,KAAKgF,qBAAqBg0C,EAAG5gE,SAEtC,GAAIi/C,GAASr4B,EAAAC,MAAMO,KACjB,OAAOsT,EAAA9S,KAAKoG,qBAAqB4yC,EAAG5gE,SAEtC,GAAIi/C,GAASr4B,EAAAC,MAAMQ,MACjB,OAAOqT,EAAA9S,KAAKiE,sBAAsB+0C,EAAG5gE,SAGvC,IAAI+nE,EA6gBR,SAAkC9gD,GAChC,OAAQA,GACN,KAAKL,EAAAC,MAAMs4B,YAAa,SACxB,KAAKv4B,EAAAC,MAAMk4B,MAAO,SAClB,KAAKn4B,EAAAC,MAAM25B,YACX,KAAK55B,EAAAC,MAAM45B,MACX,KAAK75B,EAAAC,MAAM0V,KACX,KAAK3V,EAAAC,MAAM4V,MACX,KAAK7V,EAAAC,MAAMm5B,UACX,KAAKp5B,EAAAC,MAAMo5B,YACX,KAAKr5B,EAAAC,MAAM+3B,OACX,KAAKh4B,EAAAC,MAAMqT,KACX,KAAKtT,EAAAC,MAAM82B,OAAQ,UACnB,KAAK/2B,EAAAC,MAAMyP,IAAK,UAChB,QAAS,UA3hBQ0xC,CAAyB/oB,GAC1C,IAAc,GAAV8oB,EAAkC,CACpC,IAAI55C,OAAO,EAKX,OAAI8wB,GAASr4B,EAAAC,MAAMyP,KACjBnI,EAAUxyB,KAAK8nE,gBAAgB7C,EAAE,KAE7BzyC,EAAQlH,MAAQyT,EAAA3T,SAASS,KACpBkT,EAAA9S,KAAK8E,oBACOyB,EAASxa,WACTwa,EAAS9F,cACT8F,EAASxE,UAC1Bi3C,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,OAGxBhmD,KAAKwG,MACHq4B,EAAA96B,eAAegmC,wBACfk7B,EAAG5gE,SAGA,MAdc,MAgBrBmuB,EAAUxyB,KAAK8nE,gBAAgB7C,EAAImH,KAKjC9oB,GAASr4B,EAAAC,MAAMm5B,WAAaf,GAASr4B,EAAAC,MAAMo5B,aAE3C9xB,EAAQlH,MAAQyT,EAAA3T,SAASQ,YACzB4G,EAAQlH,MAAQyT,EAAA3T,SAASU,eACzB0G,EAAQlH,MAAQyT,EAAA3T,SAASW,gBAEzB/rB,KAAKwG,MACHq4B,EAAA96B,eAAeuoE,0FACf95C,EAAQnuB,OAIP06B,EAAA9S,KAAKyG,4BAA4B4wB,EAAO9wB,EAASyyC,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,OAhBvD,KAmBzB,OAAQ1C,GAIN,KAAKr4B,EAAAC,MAAMy7B,UAGT,GAAIse,EAAGjc,KAAK/9B,EAAAC,MAAM07B,YAChB,OAAO5mD,KAAK2pE,8BACV1E,EACAlmC,EAAA9S,KAAKuC,gCAAgCy2C,EAAG5gE,MAAM8gE,QAE9C,GAGJ,IAAIhc,EAAQ8b,EAAG/b,OACXqjB,GAAQ,EACZ,GACE,OAAQtH,EAAG3/B,KAAKra,EAAAs2B,mBAAmB+G,SAGjC,KAAKr9B,EAAAC,MAAMs4B,YAET,OADAyhB,EAAG1b,MAAMJ,GACFnpD,KAAKypE,wBAAwBxE,GAGtC,KAAKh6C,EAAAC,MAAMU,WAET,OADAq5C,EAAGzb,iBACKyb,EAAG3/B,QAGT,KAAKra,EAAAC,MAAM07B,WACT,IAAKqe,EAAGjc,KAAK/9B,EAAAC,MAAMu8B,oBAAqB,CACtC8kB,GAAQ,EACR,MAKJ,KAAKthD,EAAAC,MAAMq8B,MAET,OADA0d,EAAG1b,MAAMJ,GACFnpD,KAAKypE,wBAAwBxE,GAGtC,KAAKh6C,EAAAC,MAAMw8B,SACX,KAAKz8B,EAAAC,MAAMmP,MACT,MAIF,QACEkyC,GAAQ,EAIZ,MAGF,QACEA,GAAQ,SAILA,GAKT,OAJAtH,EAAG1b,MAAMJ,IAGT10C,EAAOzU,KAAK8nE,gBAAgB7C,IAEvBA,EAAGjc,KAAK/9B,EAAAC,MAAM07B,YAOZ7nB,EAAA9S,KAAKkF,8BAA8B1c,EAAMwwD,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,OANpEhmD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,KAEP,MANS,KAWpB,KAAK4mB,EAAAC,MAAMy8B,YAET,IADA,IAAI/4B,EAAqB,IAAIxoB,OACrB6+D,EAAGjc,KAAK/9B,EAAAC,MAAM08B,eAAe,CACnC,GAAIqd,EAAGvc,QAAUz9B,EAAAC,MAAMmP,MACrB5lB,EAAO,UAGP,KADAA,EAAOzU,KAAK8nE,gBAAgB7C,EAAI,IACrB,OAAO,KAGpB,GADAr2C,EAAmB9oB,KAAK2O,IACnBwwD,EAAGjc,KAAK/9B,EAAAC,MAAMmP,OAAQ,CACzB,GAAI4qC,EAAGjc,KAAK/9B,EAAAC,MAAM08B,cAChB,MAMA,OAJA5nD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,KAEP,MAIb,OAAO06B,EAAA9S,KAAKwC,6BAA6BG,EAAoBq2C,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAGrF,KAAK/6B,EAAAC,MAAMu4B,SACT,IAAIx0B,EAASjvB,KAAKymE,UAAUxB,GAC5B,OAAKh2C,EACAg2C,EAAGjc,KAAK/9B,EAAAC,MAAMw4B,cAOnBjvC,EAAOzU,KAAK8nE,gBAAgB7C,EAAE,KAEvBlmC,EAAA9S,KAAK8C,0BACVgQ,EAAA7E,cAAcsyC,OACd/3D,EACAwa,EACAg2C,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MALN,MAPhBhmD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,KAEP,MANW,KAiBtB,KAAK4mB,EAAAC,MAAMU,WACT,OAAOmT,EAAA9S,KAAKc,2BAA2Bk4C,EAAGzb,iBAAkByb,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAEpF,KAAK/6B,EAAAC,MAAM+P,KACT,OAAO8D,EAAA9S,KAAKkG,qBAAqB8yC,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAEzD,KAAK/6B,EAAAC,MAAMoP,YACT,OAAOyE,EAAA9S,KAAK2D,4BAA4Bq1C,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAEhE,KAAK/6B,EAAAC,MAAM8P,MACT,OAAO+D,EAAA9S,KAAKgG,sBAAsBgzC,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAE1D,KAAK/6B,EAAAC,MAAMw7B,cACT,OAAO3nB,EAAA9S,KAAK8F,8BAA8BkzC,EAAG9kD,aAAc8kD,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAEnF,KAAK/6B,EAAAC,MAAMo8B,eACT,OAAOvoB,EAAA9S,KAAK4E,+BAA+Bo0C,EAAG5a,cAAe4a,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAErF,KAAK/6B,EAAAC,MAAM47B,aACT,OAAO/nB,EAAA9S,KAAKmE,6BAA6B60C,EAAGvZ,YAAauZ,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAIjF,KAAK/6B,EAAAC,MAAMi5B,MACT,IAAIsoB,EAAgBxH,EAAGjb,oBACvB,OAAKib,EAAGjc,KAAK/9B,EAAAC,MAAMi5B,OAOZplB,EAAA9S,KAAKsF,8BACVk7C,EACAxH,EAAG9a,kBACH8a,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,OATtBhmD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,KAEP,MAQX,KAAK4mB,EAAAC,MAAMsP,SACT,OAAOx6B,KAAKypE,wBAAwBxE,GAEtC,QAKE,OAJAjlE,KAAKwG,MACHq4B,EAAA96B,eAAe2oE,oBACfzH,EAAG5gE,SAEE,OAKbogE,EAAAxiE,UAAA0qE,qCAAA,SACE1H,GAKA,IAAI9b,EAAQ8b,EAAG/b,OACf,IAAK+b,EAAGjc,KAAK/9B,EAAAC,MAAMu4B,UAAW,OAAO,KACrC,IAAI/2B,EAAgB,IAAItmB,MACxB,EAAG,CACD,GAAI6+D,EAAGvc,SAAWz9B,EAAAC,MAAMw4B,YACtB,MAEF,IAAIruC,EAAOrV,KAAKymE,UAAUxB,GAAI,GAAM,GACpC,IAAK5vD,EAEH,OADA4vD,EAAG1b,MAAMJ,GACF,KAETz8B,EAAc5mB,KAAKuP,SACZ4vD,EAAGjc,KAAK/9B,EAAAC,MAAMmP,QACvB,OAAI4qC,EAAGjc,KAAK/9B,EAAAC,MAAMw4B,cAAgBuhB,EAAGjc,KAAK/9B,EAAAC,MAAMy7B,WACvCj6B,GAETu4C,EAAG1b,MAAMJ,GACF,OAGTsb,EAAAxiE,UAAAwlE,eAAA,SACExC,GAMA,IADA,IAAIp3C,EAAO,IAAIznB,OACP6+D,EAAGjc,KAAK/9B,EAAAC,MAAM07B,aAAa,CACjC,IAAInyC,EAAOzU,KAAK8nE,gBAAgB7C,EAAI,GACpC,IAAKxwD,EAAM,OAAO,KAElB,GADAoZ,EAAK/nB,KAAK2O,IACLwwD,EAAGjc,KAAK/9B,EAAAC,MAAMmP,OAAQ,CACzB,GAAI4qC,EAAGjc,KAAK/9B,EAAAC,MAAM07B,YAChB,MAMA,OAJA5mD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,KAEP,MAIb,OAAOwpB,GAGT42C,EAAAxiE,UAAA6lE,gBAAA,SACE7C,EACAmH,QAAA,IAAAA,MAAA,GAGA,IAAI33D,EAAOzU,KAAKmsE,qBAAqBlH,GACrC,IAAKxwD,EAAM,OAAO,KAClB,IAgBI6uC,EAhBA6hB,EAAW1wD,EAAKpQ,MAAMmB,MAG1B,GAAIu5B,EAAApT,eAAelX,EAAK6W,MAEtB,IADA,IAAIoB,EAAyC,KAE3Cu4C,EAAGjc,KAAK/9B,EAAAC,MAAMy7B,YAEd5nB,EAAA/S,sBAAsBvX,EAAK6W,OAA6E,QAAnEoB,EAAgB1sB,KAAK2sE,qCAAqC1H,KAC/F,CACA,IAAIp3C,EAAO7tB,KAAKynE,eAAexC,GAC/B,IAAKp3C,EAAM,OAAO,KAClBpZ,EAAOsqB,EAAA9S,KAAKqD,qBAAqB7a,EAAMiY,EAAemB,EAAMo3C,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAOtF,IAFA,IACI4mB,EADAtnC,EAA0B,MAG3BsnC,EAAiBC,EAAoBvpB,EAAQ2hB,EAAGvc,UAAY0jB,GAG7D,OADAnH,EAAG3/B,OACKge,GAEN,KAAKr4B,EAAAC,MAAMw2B,GACT,IAAIzyB,EAASjvB,KAAKymE,UAAUxB,GAC5B,IAAKh2C,EAAQ,OAAO,KACpBxa,EAAOsqB,EAAA9S,KAAK8C,0BACVgQ,EAAA7E,cAAcwnB,GACdjtC,EACAwa,EACAg2C,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAExB,MAGF,KAAK/6B,EAAAC,MAAMuP,WACT,IAAI9J,EAAS3wB,KAAKymE,UAAUxB,GAC5B,IAAKt0C,EAAQ,OAAO,KACpBlc,EAAOsqB,EAAA9S,KAAKyE,2BACVjc,EACAkc,EACAs0C,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAExB,MAGF,KAAK/6B,EAAAC,MAAMy8B,YAET,KADAriB,EAAOtlC,KAAK8nE,gBAAgB7C,IACjB,OAAO,KAClB,IAAKA,EAAGjc,KAAK/9B,EAAAC,MAAM08B,cAKjB,OAJA5nD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,KAEP,KAEToQ,EAAOsqB,EAAA9S,KAAK6D,8BACVrb,EACA6wB,EACA2/B,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAExB,MAGF,KAAK/6B,EAAAC,MAAMm5B,UACX,KAAKp5B,EAAAC,MAAMo5B,YAEP7vC,EAAK6W,MAAQyT,EAAA3T,SAASQ,YACtBnX,EAAK6W,MAAQyT,EAAA3T,SAASU,eACtBrX,EAAK6W,MAAQyT,EAAA3T,SAASW,gBAEtB/rB,KAAKwG,MACHq4B,EAAA96B,eAAeuoE,0FACf73D,EAAKpQ,OAGToQ,EAAOsqB,EAAA9S,KAAKsG,6BACV+wB,EACA7uC,EACAwwD,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAExB,MAGF,KAAK/6B,EAAAC,MAAMw8B,SACT,IAAI91B,EAAS5xB,KAAK8nE,gBAAgB7C,GAClC,IAAKrzC,EAAQ,OAAO,KACpB,IAAKqzC,EAAGjc,KAAK/9B,EAAAC,MAAMq8B,OAKjB,OAJAvnD,KAAKwG,MACHq4B,EAAA96B,eAAeqjD,YACf6d,EAAG5gE,QAAS,KAEP,KAET,IAAIwtB,EAAS7xB,KAAK8nE,gBAAgB7C,EAAImH,EAAU,EAAsB,EAAuB,GAC7F,IAAKv6C,EAAQ,OAAO,KACpBpd,EAAOsqB,EAAA9S,KAAK0F,wBACVld,EACAmd,EACAC,EACAozC,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAExB,MAGF,KAAK/6B,EAAAC,MAAMmP,MACT,IAAIyyC,GAA6Br4D,GACjC,EAAG,CAED,KADAA,EAAOzU,KAAK8nE,gBAAgB7C,EAAI,IACrB,OAAO,KAClB6H,EAAWhnE,KAAK2O,SACTwwD,EAAGjc,KAAK/9B,EAAAC,MAAMmP,QACvB5lB,EAAOsqB,EAAA9S,KAAKwD,sBAAsBq9C,EAAY7H,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MACpE,MAEF,QAME,KALA1gB,EAAOtlC,KAAK8nE,gBAAgB7C,EAC1B8H,EAAmBzpB,GACfspB,EACAA,EAAiB,IAEZ,OAAO,KAGlB,GAAItpB,GAASr4B,EAAAC,MAAM67B,IACjB,GAAIzhB,EAAKha,MAAQyT,EAAA3T,SAASQ,WACxBnX,EAAOsqB,EAAA9S,KAAKoF,+BACV5c,EACsB6wB,EACtB2/B,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,UAEnB,IAAI1gB,EAAKha,MAAQyT,EAAA3T,SAASS,KAqB/B,OAJA7rB,KAAKwG,MACHq4B,EAAA96B,eAAeijE,oBACf1hC,EAAKjhC,OAEA,KApBP,IAAI2oE,EAA+B1nC,EACnC,GAAI0nC,EAAah1D,WAAWsT,MAAQyT,EAAA3T,SAASQ,WAW3C,OAJA5rB,KAAKwG,MACHq4B,EAAA96B,eAAeijE,oBACfgG,EAAah1D,WAAW3T,OAEnB,KAVP2oE,EAAah1D,WAAa+mB,EAAA9S,KAAKoF,+BAC7B5c,EACsBu4D,EAAah1D,WACnCitD,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAS1BvxC,EAAOu4D,OAWTv4D,EAAOsqB,EAAA9S,KAAKkD,uBAAuBm0B,EAAO7uC,EAAM6wB,EAAM2/B,EAAG5gE,MAAM8gE,EAAUF,EAAGjf,MAMpF,OAAOvxC,GAITgwD,EAAAxiE,UAAAojE,cAAA,SAAcJ,GAGZ,IAFAA,EAAGvc,MAAK,GACJuc,EAAG5e,oBAAoB4e,EAAG3/B,SAC3B,CACD,IAAI6gB,EAAY8e,EAAGvc,MAAK,GACxB,GACEvC,GAAal7B,EAAAC,MAAMu9B,WACnBtC,GAAal7B,EAAAC,MAAMs8B,UACnB,CACAyd,EAAG3/B,OACH,MAEF,GAAI2/B,EAAG5e,mBAAoB,MAC3B,OAAQ4e,EAAG3/B,QACT,KAAKra,EAAAC,MAAMU,WACTq5C,EAAGzb,iBACH,MAEF,KAAKv+B,EAAAC,MAAMw7B,cACTue,EAAG9kD,aACH,MAEF,KAAK8K,EAAAC,MAAMo8B,eACT2d,EAAG5a,cACH,MAEF,KAAKp/B,EAAAC,MAAM47B,aACTme,EAAGvZ,eAqBb+Y,EAjrGA,CAA4B5lC,EAAA34B,mBAiuG5B,SAAA2mE,EAA6BvhD,GAC3B,OAAQA,GACN,KAAKL,EAAAC,MAAMmP,MAAO,SAClB,KAAKpP,EAAAC,MAAM+5B,OACX,KAAKh6B,EAAAC,MAAMg6B,YACX,KAAKj6B,EAAAC,MAAMi6B,aACX,KAAKl6B,EAAAC,MAAMm6B,yBACX,KAAKp6B,EAAAC,MAAMk6B,gBACX,KAAKn6B,EAAAC,MAAMo6B,aACX,KAAKr6B,EAAAC,MAAMq6B,eACX,KAAKt6B,EAAAC,MAAMs6B,yBACX,KAAKv6B,EAAAC,MAAMu6B,+BACX,KAAKx6B,EAAAC,MAAMw6B,2CACX,KAAKz6B,EAAAC,MAAMy6B,iBACX,KAAK16B,EAAAC,MAAM26B,aACX,KAAK56B,EAAAC,MAAM06B,WAAY,SACvB,KAAK36B,EAAAC,MAAMw8B,SAAU,SACrB,KAAKz8B,EAAAC,MAAM85B,QAAS,SACpB,KAAK/5B,EAAAC,MAAM65B,oBAAqB,SAChC,KAAK95B,EAAAC,MAAMy5B,IAAK,SAChB,KAAK15B,EAAAC,MAAM05B,MAAO,SAClB,KAAK35B,EAAAC,MAAMw5B,UAAW,SACtB,KAAKz5B,EAAAC,MAAM24B,cACX,KAAK54B,EAAAC,MAAM44B,mBACX,KAAK74B,EAAAC,MAAM64B,qBACX,KAAK94B,EAAAC,MAAM84B,0BAA2B,UACtC,KAAK/4B,EAAAC,MAAMw2B,GACX,KAAKz2B,EAAAC,MAAMo3B,GACX,KAAKr3B,EAAAC,MAAMuP,WACX,KAAKxP,EAAAC,MAAMu4B,SACX,KAAKx4B,EAAAC,MAAMw4B,YACX,KAAKz4B,EAAAC,MAAMy4B,gBACX,KAAK14B,EAAAC,MAAM04B,mBAAoB,UAC/B,KAAK34B,EAAAC,MAAMq5B,kBACX,KAAKt5B,EAAAC,MAAMs5B,wBACX,KAAKv5B,EAAAC,MAAMu5B,oCAAqC,UAChD,KAAKx5B,EAAAC,MAAM0V,KACX,KAAK3V,EAAAC,MAAM4V,MAAO,UAClB,KAAK7V,EAAAC,MAAMg5B,SACX,KAAKj5B,EAAAC,MAAMi5B,MACX,KAAKl5B,EAAAC,MAAMk5B,QAAS,UACpB,KAAKn5B,EAAAC,MAAM+4B,kBAAmB,UAC9B,KAAKh5B,EAAAC,MAAMm5B,UACX,KAAKp5B,EAAAC,MAAMo5B,YAAa,UACxB,KAAKr5B,EAAAC,MAAM67B,IACX,KAAK97B,EAAAC,MAAMyP,IACX,KAAK1P,EAAAC,MAAMy8B,YAAa,UACxB,QAAS,UAKb,SAAAolB,EAA4BzhD,GAC1B,OAAQA,GACN,KAAKL,EAAAC,MAAM+5B,OACX,KAAKh6B,EAAAC,MAAMg6B,YACX,KAAKj6B,EAAAC,MAAMi6B,aACX,KAAKl6B,EAAAC,MAAMm6B,yBACX,KAAKp6B,EAAAC,MAAMk6B,gBACX,KAAKn6B,EAAAC,MAAMo6B,aACX,KAAKr6B,EAAAC,MAAMq6B,eACX,KAAKt6B,EAAAC,MAAMs6B,yBACX,KAAKv6B,EAAAC,MAAMu6B,+BACX,KAAKx6B,EAAAC,MAAMw6B,2CACX,KAAKz6B,EAAAC,MAAMy6B,iBACX,KAAK16B,EAAAC,MAAM26B,aACX,KAAK56B,EAAAC,MAAM06B,WACX,KAAK36B,EAAAC,MAAMw8B,SACX,KAAKz8B,EAAAC,MAAM+4B,kBAAmB,OAAO,EACrC,QAAS,OAAO,GAtyGPvkD,EAAA+kE,SAorGb,SAAkBwI,GAChBA,IAAA,iBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,6BACAA,IAAA,wBACAA,IAAA,4BACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,oCACAA,IAAA,kCACAA,IAAA,gCACAA,IAAA,kCACAA,IAAA,gBACAA,IAAA,gCACAA,IAAA,wBACAA,IAAA,sBAtBF,CAAkBvtE,EAAAutE,aAAAvtE,EAAAutE,43BCzwGlB,IAAAjiD,EAAA7qB,EAAA,GAIAksD,EAAAlsD,EAAA,GAuBAgD,EAAAhD,EAAA,GAKA+sE,EAAA,WAYE,SAAAA,EAAY38B,EAAkB48B,QAAA,IAAAA,OAAA,GAL9BntE,KAAAotE,QAEAptE,KAAA4rC,KAAqB,IAAIC,IAIvB7rC,KAAKuwC,QAAUA,EACfvwC,KAAKmtE,eAuET,OAnEED,EAAAjrE,UAAAorE,KAAA,uBACE,IAAoB,IAAAp7B,EAAA7M,EAAAplC,KAAKuwC,QAAQvO,mBAAmB/N,UAAQuR,EAAAyM,EAAA3M,QAAAE,EAAAD,KAAAC,EAAAyM,EAAA3M,OAAA,CAAvD,IAAIvV,EAAOyV,EAAAlkC,MAA8CtB,KAAKstE,aAAav9C,qGAEhF,IADA,IAAIq9C,EAAOptE,KAAKotE,KACH,EAAOA,EAAK7nE,QAAUvF,KAAKstE,aAAaF,EAAxC,KAIfF,EAAAjrE,UAAAqrE,aAAA,SAAav9C,GACX,KAAIA,EAAQ1D,GAAGrB,EAAA3oB,YAAYwgD,UAAa7iD,KAAKmtE,kBACzCntE,KAAK4rC,KAAK9E,IAAI/W,GAElB,OADA/vB,KAAK4rC,KAAKE,IAAI/b,GACNA,EAAQzE,MACd,KAAK+gC,EAAAhrB,YAAYrI,OACXjJ,EAAQ1D,GAAGrB,EAAA3oB,YAAY2sD,WAAWhvD,KAAKutE,YAAoBx9C,GAC/D,MAEF,KAAKs8B,EAAAhrB,YAAYqM,KACX3d,EAAQ1D,GAAGrB,EAAA3oB,YAAY2sD,WAAWhvD,KAAKwtE,UAAgBz9C,GAC3D,MAEF,KAAKs8B,EAAAhrB,YAAY4F,mBACfjnC,KAAKytE,uBAA0C19C,GAC/C,MAEF,KAAKs8B,EAAAhrB,YAAY+E,gBACfpmC,KAAK0tE,oBAAoC39C,GACzC,MAEF,KAAKs8B,EAAAhrB,YAAY8N,MACHpf,EAAS1D,GAAGrB,EAAA3oB,YAAY2sD,WAAWhvD,KAAK2tE,WAAkB59C,GACtE,MAEF,KAAKs8B,EAAAhrB,YAAYqJ,SACf,IAAIkjC,EAAiB79C,EACjBlvB,EAAS+sE,EAAKjjC,gBACd9pC,GAAQb,KAAKytE,uBAAuB5sE,GACxC,IAAI4xD,EAASmb,EAAKhjC,gBACd6nB,GAAQzyD,KAAKytE,uBAAuBhb,GACxC,MAEF,KAAKpG,EAAAhrB,YAAYmP,WA8ZvB,SAAAq9B,EAA2B99C,mBACzB,IAAIsD,EAAUtD,EAAQsD,QACtB,GAAIA,MACF,IAAmB,IAAAqT,EAAAtB,EAAA/R,EAAQY,UAAQkiB,EAAAzP,EAAApB,QAAA6Q,EAAA5Q,KAAA4Q,EAAAzP,EAAApB,OAAE,CAAhC,IAAIxI,EAAMqZ,EAAA70C,MACb,OAAQw7B,EAAOxR,MACb,KAAK+gC,EAAAhrB,YAAY4F,uBACf,IAAqB,IAAAyP,EAAAtR,EAAoBtI,EAAQ2U,UAAUxd,UAAQ0iB,EAAAD,EAAApR,QAAAqR,EAAApR,KAAAoR,EAAAD,EAAApR,OAAE,CAAhE,IAAIqI,EAAQgJ,EAAAr1C,MACf,GAAIqsC,EAASthB,GAAGrB,EAAA3oB,YAAY2sD,UAAW,OAAO,oGAEhD,MAEF,KAAK3C,EAAAhrB,YAAY+E,oBACf,IAAqB,IAAA2Q,EAAA3R,EAAiBtI,EAAQ2U,UAAUxd,UAAQ+iB,EAAAD,EAAAzR,QAAA0R,EAAAzR,KAAAyR,EAAAD,EAAAzR,OAAE,CAA7D,IAAIqI,EAAQqJ,EAAA11C,MACf,GAAIqsC,EAASthB,GAAGrB,EAAA3oB,YAAY2sD,UAAW,OAAO,oGAEhD,MAEF,QACE,GAAIlyB,EAAOzQ,GAAGrB,EAAA3oB,YAAY2sD,WAAa6e,EAAkB/wC,GAAS,OAAO,qGAMjF,OAAO,GArbG+wC,CAAkB99C,IAAU/vB,KAAK8tE,eAAe/9C,GACpD,MAEF,QAASrsB,QAAO,KAIZwpE,EAAAjrE,UAAAwrE,uBAAR,SAA+B19C,eAC7B,IAAqB,IAAAkiB,EAAA7M,EAAArV,EAAQ0hB,UAAUxd,UAAQuR,EAAAyM,EAAA3M,QAAAE,EAAAD,KAAAC,EAAAyM,EAAA3M,OAAE,CAA5C,IAAIqI,EAAQnI,EAAAlkC,MACXqsC,EAASthB,GAAGrB,EAAA3oB,YAAY2sD,WAAWhvD,KAAK+tE,cAAwBpgC,uGAIhEu/B,EAAAjrE,UAAAyrE,oBAAR,SAA4B39C,eAC1B,IAAqB,IAAAkiB,EAAA7M,EAAArV,EAAQ0hB,UAAUxd,UAAQuR,EAAAyM,EAAA3M,QAAAE,EAAAD,KAAAC,EAAAyM,EAAA3M,OAAE,CAA5C,IAAIqI,EAAQnI,EAAAlkC,MACXqsC,EAASthB,GAAGrB,EAAA3oB,YAAY2sD,WAAWhvD,KAAKguE,WAAkBrgC,uGAWpEu/B,EArFA,GAwFAe,EAAA,SAAA71C,GAWE,SAAA61C,EAAY19B,EAAkB48B,QAAA,IAAAA,OAAA,GAA9B,IAAA70C,EACEF,EAAA53B,KAAAR,KAAMuwC,EAAS48B,IAAentE,YALxBs4B,EAAA1yB,MACA0yB,EAAA41C,YAAmB,IAkK7B,OA1KgC71C,EAAA41C,EAAA71C,GAGvB61C,EAAAE,MAAP,SAAa59B,GACX,OAAO,IAAI09B,EAAW19B,GAAS49B,SAWjCF,EAAAhsE,UAAAsrE,YAAA,SAAYx9C,GACV,IAAInqB,EAAK5F,KAAK4F,GACVwoE,EAAUr+C,EAAQ1D,GAAGrB,EAAA3oB,YAAY8uC,SAMrC,GALAhuC,EAAAkrE,OAAOzoE,EAAI5F,KAAKkuE,aACZE,GAASxoE,EAAGE,KAAK,UACrBF,EAAGE,KAAK9F,KAAKsuE,aAAav+C,EAAQ1a,OAClCzP,EAAGE,KAAK,KACRF,EAAGE,KAAKiqB,EAAQqY,YACZgmC,EACF,OAAQr+C,EAAQ6gB,mBACd,OACEhrC,EAAGE,KAAK,OACRF,EAAGE,KAAKyoE,cAAcx+C,EAAQihB,uBAC9B,MAEF,OACEprC,EAAGE,KAAK,OACRF,EAAGE,KAAKiqB,EAAQshB,mBAAmBvsC,YACnC,MAEF,QAASpB,QAAO,GAGpBkC,EAAGE,KAAK,QAGVmoE,EAAAhsE,UAAAurE,UAAA,SAAUz9C,eACJnqB,EAAK5F,KAAK4F,GACdzC,EAAAkrE,OAAOzoE,EAAI5F,KAAKkuE,eAChBtoE,EAAGE,KAAK,cACRF,EAAGE,KAAKiqB,EAAQqY,YAChBxiC,EAAGE,KAAK,QACR,IAAIutB,EAAUtD,EAAQsD,QACtB,GAAIA,EAAS,KACX,IAA2B,IAAAm7C,EAAAppC,EAAA/R,GAAOo7C,EAAAD,EAAAlpC,QAAAmpC,EAAAlpC,KAAAkpC,EAAAD,EAAAlpC,OAAE,CAA3B,IAAAE,EAAAC,EAAAgpC,EAAAntE,MAAA,GAACV,EAAA4kC,EAAA,GACR,IADc1I,EAAA0I,EAAA,IACHla,MAAQ+gC,EAAAhrB,YAAYqN,UAAW,CACxC,IAAI0/B,EAAsBtxC,EAAQzQ,GAAGrB,EAAA3oB,YAAY8uC,SACjDhuC,EAAAkrE,OAAOzoE,EAAI5F,KAAKkuE,aACZE,EAASxoE,EAAGE,KAAK,UAChBF,EAAGE,KAAK,aACbF,EAAGE,KAAK,kBACRF,EAAGE,KAAKlF,GACJwtE,IACFxoE,EAAGE,KAAK,OACRF,EAAGE,KAAiBg3B,EAAQ2T,cAAc3rC,SAAS,MAErDc,EAAGE,KAAK,8GAGZ,IAAmB,IAAA4gC,EAAAtB,EAAA/R,EAAQY,UAAQkiB,EAAAzP,EAAApB,QAAA6Q,EAAA5Q,KAAA4Q,EAAAzP,EAAApB,OAAE,CAAhC,IAAIxI,KAAMqZ,EAAA70C,OACFgqB,MAAQ+gC,EAAAhrB,YAAYqN,WAAW1uC,KAAKstE,aAAaxwC,sGAGhE35B,EAAAkrE,OAAOzoE,IAAM5F,KAAKkuE,aAClBtoE,EAAGE,KAAK,QAGVmoE,EAAAhsE,UAAA8rE,cAAA,SAAch+C,WACRnqB,EAAK5F,KAAK4F,GACVwwB,EAAYrG,EAAQqG,UACxBjzB,EAAAkrE,OAAOzoE,EAAI5F,KAAKkuE,aAChBtoE,EAAGE,KAAK9F,KAAKsuE,aAAal4C,EAAU7c,aACpC3T,EAAGE,KAAK,KACRF,EAAGE,KAAKiqB,EAAQqY,YAChBxiC,EAAGE,KAAK,KAIR,IAHA,IAAI0nB,EAAa4I,EAAU0W,eACvBD,EAAgBrf,EAAWjoB,OAEtBlF,EAAI,EAAGA,EAAIwsC,IAAiBxsC,EAC/BA,GAAGuF,EAAGE,KAAK,MAEfF,EAAGE,KAAK9F,KAAKsuE,aAAa9gD,EAAWntB,KACrCuF,EAAGE,KAAK,KACRF,EAAGE,KAAKswB,EAAUse,iBAAiBr0C,IAErCuF,EAAGE,KAAK,QACR,IAAIutB,EAAUtD,EAAQsD,QACtB,GAAIA,GAAWA,EAAQmqB,KAAM,CAC3Br6C,EAAAkrE,OAAOzoE,EAAI5F,KAAKkuE,aAChBtoE,EAAGE,KAAK,cACRF,EAAGE,KAAKiqB,EAAQqY,YAChBxiC,EAAGE,KAAK,YACR,IAAmB,IAAAmsC,EAAA7M,EAAA/R,EAAQY,UAAQuR,EAAAyM,EAAA3M,QAAAE,EAAAD,KAAAC,EAAAyM,EAAA3M,OAAA,CAA9B,IAAIxI,EAAM0I,EAAAlkC,MAAsBtB,KAAKstE,aAAaxwC,qGACvD35B,EAAAkrE,OAAOzoE,IAAM5F,KAAKkuE,aAClBtoE,EAAGE,KAAK,SAIZmoE,EAAAhsE,UAAA+rE,WAAA,SAAWj+C,GACT,IAAInqB,EAAK5F,KAAK4F,GACdzC,EAAAkrE,OAAOzoE,EAAI5F,KAAKkuE,eAChBtoE,EAAGE,KAAK,cACRF,EAAGE,KAAKiqB,EAAQqY,YAChBxiC,EAAGE,KAAK,QAER3C,EAAAkrE,OAAOzoE,IAAM5F,KAAKkuE,aAClBtoE,EAAGE,KAAK,QAGVmoE,EAAAhsE,UAAAysE,eAAA,SAAe3+C,GACb/vB,KAAKguE,WAAWj+C,IAGlBk+C,EAAAhsE,UAAA0rE,WAAA,SAAW59C,KAIXk+C,EAAAhsE,UAAA6rE,eAAA,SAAe/9C,WACTnqB,EAAK5F,KAAK4F,GACdzC,EAAAkrE,OAAOzoE,EAAI5F,KAAKkuE,eAChBtoE,EAAGE,KAAK,cACRF,EAAGE,KAAKiqB,EAAQqY,YAChBxiC,EAAGE,KAAK,QACR,IAAIutB,EAAUtD,EAAQsD,QACtB,GAAIA,MACF,IAAmB,IAAA4e,EAAA7M,EAAA/R,EAAQY,UAAQuR,EAAAyM,EAAA3M,QAAAE,EAAAD,KAAAC,EAAAyM,EAAA3M,OAAA,CAA9B,IAAIxI,EAAM0I,EAAAlkC,MAAsBtB,KAAKstE,aAAaxwC,qGAEzD35B,EAAAkrE,OAAOzoE,IAAM5F,KAAKkuE,aAClBtoE,EAAGE,KAAK,QAGVmoE,EAAAhsE,UAAAqsE,aAAA,SAAaj5D,GACX,OAAQA,EAAKiW,MACX,OAAkB,MAAO,OACzB,OAAmB,MAAO,QAC1B,OAAmB,MAAO,OAC1B,OAAmB,MAAO,YAC1B,OAAqB,OAAOtrB,KAAKuwC,QAAQ1N,QAAQ2rB,SAAW,YAAc,OAC1E,OAAkB,MAAO,QACzB,OAAmB,MAAO,iBAC1B,OAAmB,MAAO,gBAE1B,OAAmB,MAAO,qBAC1B,OAAqB,OAAOxuD,KAAKuwC,QAAQ1N,QAAQ2rB,SAAW,qBAAuB,gBAEnF,QAAoB,MAAO,UAC3B,QAAmB,MAAO,qBAC1B,QAAmB,MAAO,sBAC1B,QAAoB,MAAO,OAC3B,QAEE,OADA9qD,QAAO,GACA,KAKbuqE,EAAAhsE,UAAAksE,MAAA,WACE,IAAIvoE,EAAK5F,KAAK4F,GAMd,OALAA,EAAGE,KAAK,4BACN9F,KAAKkuE,YACPluE,KAAKqtE,SACHrtE,KAAKkuE,YACPtoE,EAAGE,KAAK,OACDF,EAAGG,KAAK,KAEnBkoE,EA1KA,CAAgCf,GAAnBxtE,EAAAuuE,aA6Kb,IAAAU,EAAA,SAAAv2C,GAWE,SAAAu2C,EAAYp+B,EAAkB48B,QAAA,IAAAA,OAAA,GAA9B,IAAA70C,EACEF,EAAA53B,KAAAR,KAAMuwC,EAAS48B,IAAentE,YALxBs4B,EAAA1yB,MACA0yB,EAAA41C,YAAmB,IAsM7B,OA9MgC71C,EAAAs2C,EAAAv2C,GAGvBu2C,EAAAR,MAAP,SAAa59B,GACX,OAAO,IAAIo+B,EAAWp+B,GAAS49B,SAWjCQ,EAAA1sE,UAAAsrE,YAAA,SAAYx9C,GACV,IAAInqB,EAAK5F,KAAK4F,GACVwoE,EAAUr+C,EAAQ1D,GAAGrB,EAAA3oB,YAAY8uC,SACrChuC,EAAAkrE,OAAOzoE,EAAI5F,KAAKkuE,aACZn+C,EAAQ1D,GAAGrB,EAAA3oB,YAAYu6B,QACrBwxC,EAASxoE,EAAGE,KAAK,oBAChBF,EAAGE,KAAK,WAETsoE,EAASxoE,EAAGE,KAAK,UAChBF,EAAGE,KAAK,QAEfF,EAAGE,KAAKiqB,EAAQqY,YAChBxiC,EAAGE,KAAK,MACRF,EAAGE,KAAK9F,KAAKsuE,aAAav+C,EAAQ1a,OAClCzP,EAAGE,KAAK,OACR9F,KAAK8tE,eAAe/9C,IAGtB4+C,EAAA1sE,UAAAurE,UAAA,SAAUz9C,WACJnqB,EAAK5F,KAAK4F,GACdzC,EAAAkrE,OAAOzoE,EAAI5F,KAAKkuE,eAChBtoE,EAAGE,KAAK,SACRF,EAAGE,KAAKiqB,EAAQqY,YAChBxiC,EAAGE,KAAK,QACR,IAAIutB,EAAUtD,EAAQsD,QACtB,GAAIA,EAAS,CACX,IAAIu7C,EAAav7C,EAAQmqB,SACzB,IAA2B,IAAAqxB,EAAAzpC,EAAA/R,GAAOy7C,EAAAD,EAAAvpC,QAAAwpC,EAAAvpC,KAAAupC,EAAAD,EAAAvpC,OAAE,CAA3B,IAAA2M,EAAAxM,EAAAqpC,EAAAxtE,MAAA,GAACV,EAAAqxC,EAAA,GAAMnV,EAAAmV,EAAA,GACVnV,EAAOxR,MAAQ+gC,EAAAhrB,YAAYqN,YAC7BvrC,EAAAkrE,OAAOzoE,EAAI5F,KAAKkuE,aAChBtoE,EAAGE,KAAKlF,GACJk8B,EAAOzQ,GAAGrB,EAAA3oB,YAAY8uC,WACxBvrC,EAAGE,KAAK,OACRF,EAAGE,KAAiBg3B,EAAQ2T,cAAc3rC,SAAS,MAErDc,EAAGE,KAAK,SACN8oE,qGAGFA,GAAY5uE,KAAK8tE,eAAe/9C,GAEtC5sB,EAAAkrE,OAAOzoE,IAAM5F,KAAKkuE,aAClBtoE,EAAGE,KAAK,QAGV6oE,EAAA1sE,UAAA8rE,cAAA,SAAch+C,GACZ,IAAIA,EAAQxD,MAAMvB,EAAA3oB,YAAYwgD,QAAU73B,EAAA3oB,YAAY0mC,KAApD,CACA,IAAInjC,EAAK5F,KAAK4F,GACVwwB,EAAYrG,EAAQqG,UAIxB,GAHAjzB,EAAAkrE,OAAOzoE,EAAI5F,KAAKkuE,aACZn+C,EAAQ1D,GAAGrB,EAAA3oB,YAAYygD,YAAYl9C,EAAGE,KAAK,cAC3CiqB,EAAQ1D,GAAGrB,EAAA3oB,YAAYu6B,SAASh3B,EAAGE,KAAK,WACxCiqB,EAAQ1D,GAAGrB,EAAA3oB,YAAYymC,KAKzB,OAJAljC,EAAGE,KAAKiqB,EAAQ9tB,UAAUsuB,YAAY3vB,KAAKyE,MAC3CO,EAAGE,KAAK,MACRF,EAAGE,KAAK9F,KAAKsuE,aAAal4C,EAAU7c,kBACpC3T,EAAGE,KAAK,OAGHiqB,EAAQxD,MAAMvB,EAAA3oB,YAAYu6B,OAAS5R,EAAA3oB,YAAYwvC,WAAWjsC,EAAGE,KAAK,aACvEF,EAAGE,KAAKiqB,EAAQqY,YAElBxiC,EAAGE,KAAK,KAIR,IAHA,IAAI0nB,EAAa4I,EAAU0W,eACvBD,EAAgBrf,EAAWjoB,OAEtBlF,EAAI,EAAGA,EAAIwsC,IAAiBxsC,EAC/BA,GAAGuF,EAAGE,KAAK,MAEfF,EAAGE,KAAKswB,EAAUse,iBAAiBr0C,IACnCuF,EAAGE,KAAK,MACRF,EAAGE,KAAK9F,KAAKsuE,aAAa9gD,EAAWntB,KAEnC0vB,EAAQxD,MAAMvB,EAAA3oB,YAAYi4B,YAActP,EAAA3oB,YAAY0mC,KACtDnjC,EAAGE,KAAK,MAERF,EAAGE,KAAK,OACRF,EAAGE,KAAK9F,KAAKsuE,aAAal4C,EAAU7c,cAEtC3T,EAAGE,KAAK,OACR9F,KAAK8tE,eAAe/9C,KAGtB4+C,EAAA1sE,UAAA+rE,WAAA,SAAWj+C,eACLnqB,EAAK5F,KAAK4F,GACVgkE,EAAc75C,EAAQzE,MAAQ+gC,EAAAhrB,YAAYkX,UAC9Cp1C,EAAAkrE,OAAOzoE,EAAI5F,KAAKkuE,eACZtE,EACFhkE,EAAGE,KAAK,eAEJiqB,EAAQ1D,GAAGrB,EAAA3oB,YAAYo/C,WAAW77C,EAAGE,KAAK,aAC9CF,EAAGE,KAAK,WAEVF,EAAGE,KAAKiqB,EAAQqY,YAChB,IAAIsH,EAAO3f,EAAQ2f,KACfA,GAAQA,EAAKrjB,GAAGrB,EAAA3oB,YAAY2sD,SAAWhkC,EAAA3oB,YAAYmmC,iBACrD5iC,EAAGE,KAAK,aACRF,EAAGE,KAAK4pC,EAAKtH,aAEfxiC,EAAGE,KAAK,QACR,IAAIutB,EAAUtD,EAAQ9tB,UAAUoxB,QAChC,GAAIA,MACF,IAAmB,IAAAmS,EAAAJ,EAAA/R,EAAQY,UAAQyS,EAAAlB,EAAAF,QAAAoB,EAAAnB,KAAAmB,EAAAlB,EAAAF,OAAE,CAAhC,IAAIxI,EAAM4J,EAAAplC,MACbtB,KAAKstE,aAAaxwC,qGAGtB,IAAIiyC,EAAOh/C,EAAQ+mB,oBAGnB,GAFIi4B,GAAM/uE,KAAK+tE,cAAcgB,GAC7B17C,EAAUtD,EAAQsD,YAEhB,IAAmB,IAAA8iB,EAAA/Q,EAAA/R,EAAQY,UAAQyiB,EAAAP,EAAA7Q,QAAAoR,EAAAnR,KAAAmR,EAAAP,EAAA7Q,OAAA,CAA1BxI,EAAM4Z,EAAAp1C,MAAsBtB,KAAKstE,aAAaxwC,qGAEzD35B,EAAAkrE,OAAOzoE,IAAM5F,KAAKkuE,aAClBtoE,EAAGE,KAAK,QAGV6oE,EAAA1sE,UAAAysE,eAAA,SAAe3+C,GACb/vB,KAAKguE,WAAWj+C,IAGlB4+C,EAAA1sE,UAAA0rE,WAAA,SAAW59C,GACT,IAAIA,EAAQ1D,GAAGrB,EAAA3oB,YAAYwgD,SAA3B,CACA,IAAIj9C,EAAK5F,KAAK4F,GACdzC,EAAAkrE,OAAOzoE,EAAI5F,KAAKkuE,aACZn+C,EAAQ1D,GAAGrB,EAAA3oB,YAAYygD,YAAYl9C,EAAGE,KAAK,cAC3CiqB,EAAQ1D,GAAGrB,EAAA3oB,YAAYu6B,SAASh3B,EAAGE,KAAK,WACxCiqB,EAAQ1D,GAAGrB,EAAA3oB,YAAY2gD,WAAWp9C,EAAGE,KAAK,aAC9CF,EAAGE,KAAKiqB,EAAQqY,YAChBxiC,EAAGE,KAAK,MACRF,EAAGE,KAAK9F,KAAKsuE,aAAav+C,EAAQ1a,OAClCzP,EAAGE,KAAK,SAGV6oE,EAAA1sE,UAAA6rE,eAAA,SAAe/9C,WACTsD,EAAUtD,EAAQsD,QACtB,GAAIA,GAAWA,EAAQmqB,KAAM,CAC3B,IAAI53C,EAAK5F,KAAK4F,GACdzC,EAAAkrE,OAAOzoE,EAAI5F,KAAKkuE,eAChBtoE,EAAGE,KAAK,cACRF,EAAGE,KAAKiqB,EAAQqY,YAChBxiC,EAAGE,KAAK,YACR,IAAmB,IAAAmsC,EAAA7M,EAAA/R,EAAQY,UAAQuR,EAAAyM,EAAA3M,QAAAE,EAAAD,KAAAC,EAAAyM,EAAA3M,OAAA,CAA9B,IAAIxI,EAAM0I,EAAAlkC,MAAsBtB,KAAKstE,aAAaxwC,qGACvD35B,EAAAkrE,OAAOzoE,IAAM5F,KAAKkuE,aAClBtoE,EAAGE,KAAK,SAIZ6oE,EAAA1sE,UAAAqsE,aAAA,SAAaj5D,GACX,OAAQA,EAAKiW,MACX,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,OAAOtrB,KAAKuwC,QAAQ1N,QAAQ2rB,SAAW,MAAQ,MACpE,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAE1B,OAAmB,MAAO,MAC1B,OAAqB,OAAOxuD,KAAKuwC,QAAQ1N,QAAQ2rB,SAAW,MAAQ,MAEpE,QAAoB,MAAO,OAC3B,QAAmB,MAAO,MAC1B,QAAmB,MAAO,MAC1B,QAAoB,MAAO,OAC3B,QAEE,OADA9qD,QAAO,GACA,KAKbirE,EAAA1sE,UAAAksE,MAAA,WACE,IAAIvoE,EAAK5F,KAAK4F,GAgBd,OAfAA,EAAGE,KAAK,+BACRF,EAAGE,KAAK,yBACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,yBACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACN9F,KAAKkuE,YACPluE,KAAKqtE,SACHrtE,KAAKkuE,YACPtoE,EAAGE,KAAK,OACRF,EAAGE,KAAK,8BACD9F,KAAK4F,GAAGG,KAAK,KAExB4oE,EA9MA,CAAgCzB,GAAnBxtE,EAAAivE,4FCrSb,IAAA3vC,EAAA7+B,EAAA,GAwDA6uE,EAAA,WAWE,SAAAA,IAHAhvE,KAAAqF,QACArF,KAAAivE,WAAkB,EAoyBpB,OA3yBSD,EAAAE,UAAP,SAAiBvvE,GACf,IAAIwvE,EAAa,IAAIH,EAErB,OADAG,EAAWD,UAAUvvE,GACdwvE,EAAWhjB,UASpB6iB,EAAA/sE,UAAAitE,UAAA,SAAUvvE,GACR,MAAM,IAAI0gB,MAAM,oBAGlB2uD,EAAA/sE,UAAAmtE,kBAAA,SAAkBrxD,GAChB,IAAInd,EAAOo+B,EAAA3W,gBAAgBtK,IAAS,IAAM/d,KAAKivE,WAAWnqE,SAAS,IAC/DqT,EAAO6mB,EAAA7W,gBAAgBpK,GAC3B/d,KAAK8F,KAAK,aACV9F,KAAK8F,KAAKlF,GACVZ,KAAK8F,KAAK,KACT,IAAK,IAAIzF,EAAW,EAAG0c,EAAWiiB,EAAAzW,sBAAsBxK,GAAO1d,EAAI0c,IAAK1c,EACnEA,EAAI,GAAGL,KAAK8F,KAAK,MACrB9F,KAAK8F,KAAK,KACV9F,KAAK8F,KAAKzF,EAAEyE,SAAS,KACrB9E,KAAK8F,KAAK,MACV9F,KAAK8F,KAAKupE,EAAiBrwC,EAAAvW,qBAAqB1K,EAAM1d,KAExDL,KAAK8F,KAAK,OACV9F,KAAK8F,KAAKupE,EAAiBrwC,EAAArW,sBAAsB5K,KACjD/d,KAAK8F,KAAK,KACNk5B,EAAApb,gBAAgBzL,IAAS6mB,EAAAt4B,aAAa23C,OACxCr+C,KAAK8F,KAAK,OAEZ9F,KAAKsvE,oBAAoBn3D,GACrB6mB,EAAApb,gBAAgBzL,IAAS6mB,EAAAt4B,aAAa23C,OACxCr+C,KAAK8F,KAAK,WAEV9F,KAAKivE,YAGTD,EAAA/sE,UAAAqtE,oBAAA,SAAoB76D,GAClB,IAGI86D,EACAC,EACAnvE,EAAU0c,EALVu4B,EAAKtW,EAAApb,gBAAgBnP,GACrBY,EAAO2pB,EAAAnb,kBAAkBpP,GAM7B,OAAQ6gC,GACN,KAAKtW,EAAAt4B,aAAa23C,MAOhB,IANqC,OAAhCmxB,EAASxwC,EAAArZ,aAAalR,MACzBzU,KAAK8F,KAAK0pE,GACVxvE,KAAK8F,KAAK,OAEZ9F,KAAK8F,KAAK,OACViX,EAAIiiB,EAAAnZ,mBAAmBpR,GAClBpU,EAAI,EAAGA,EAAI0c,IAAK1c,EACnBL,KAAKsvE,oBAAoBtwC,EAAAjZ,cAActR,EAAMpU,IAG/C,YADAL,KAAK8F,KAAK,OAGZ,KAAKk5B,EAAAt4B,aAAa63C,GAiBhB,YAhBIlpC,GAAQ2pB,EAAAv4B,WAAWiR,MACrB1X,KAAK8F,KAAK,QACV9F,KAAKsvE,oBAAoBtwC,EAAA/Y,eAAexR,IACxCzU,KAAK8F,KAAK,MACV9F,KAAKsvE,oBAAoBtwC,EAAA7Y,UAAU1R,KAC/B86D,EAASvwC,EAAA3Y,WAAW5R,MACtBzU,KAAK8F,KAAK,UACV9F,KAAKsvE,oBAAoBC,MAG3BvvE,KAAKsvE,oBAAoBtwC,EAAA/Y,eAAexR,IACxCzU,KAAK8F,KAAK,OACV9F,KAAKsvE,oBAAoBtwC,EAAA7Y,UAAU1R,IACnCzU,KAAK8F,KAAK,OACV9F,KAAKsvE,oBAAoBtwC,EAAA3Y,WAAW5R,MAIxC,KAAKuqB,EAAAt4B,aAAa+oE,KACoB,OAA/BD,EAASxwC,EAAAzY,YAAY9R,MACxBzU,KAAK8F,KAAK0pE,GACVxvE,KAAK8F,KAAK,OAEZ9F,KAAK8F,KAAK,OACV9F,KAAKsvE,oBAAoBtwC,EAAAvY,YAAYhS,IACrCzU,KAAK8F,KAAK,gBAEZ,KAAKk5B,EAAAt4B,aAAagpE,MAahB,OAZIH,EAASvwC,EAAAnY,kBAAkBpS,MAC7BzU,KAAK8F,KAAK,QACV9F,KAAKsvE,oBAAoBC,GACzBvvE,KAAK8F,KAAK,YAEyB,OAAhC0pE,EAASxwC,EAAArY,aAAalS,KACzBzU,KAAK8F,KAAK,UACV9F,KAAK8F,KAAK0pE,GACVxvE,KAAK8F,KAAK,QAEV9F,KAAK8F,KAAK,aAId,KAAKk5B,EAAAt4B,aAAaipE,OAClB,KAAK3wC,EAAAt4B,aAAa+3C,KAClB,KAAKzf,EAAAt4B,aAAakpE,WAClB,KAAK5wC,EAAAt4B,aAAampE,aAChB,MAAM,IAAIxvD,MAAM,mBAElB,KAAK2e,EAAAt4B,aAAaob,SAGhB,OAFA9hB,KAAK8F,KAAK,UACV9F,KAAK8F,KAAKk5B,EAAA7a,iBAAiB1P,GAAM3P,SAAS,KAG5C,KAAKk6B,EAAAt4B,aAAaw0C,SAKhB,OAJAl7C,KAAK8F,KAAK,KACV9F,KAAK8F,KAAKk5B,EAAA5a,iBAAiB3P,GAAM3P,SAAS,KAC1C9E,KAAK8F,KAAK,YACV9F,KAAKsvE,oBAAoBtwC,EAAA1a,iBAAiB7P,IAG5C,KAAKuqB,EAAAt4B,aAAasb,UAClB,KAAKgd,EAAAt4B,aAAaopE,UAChB,MAAM,IAAIzvD,MAAM,mBAElB,KAAK2e,EAAAt4B,aAAayb,KAQhB,OAPAniB,KAAK8F,KAAK,SACV9F,KAAK8F,KAAKupE,EAAiBh6D,IAC3BrV,KAAK8F,KAAK,MACV9F,KAAK8F,KAAKk5B,EAAAha,cAAcvQ,GAAM3P,SAAS,KACvC9E,KAAK8F,KAAK,OACV9F,KAAKsvE,oBAAoBtwC,EAAA/Z,WAAWxQ,SACpCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAAt4B,aAAaqpE,MAUhB,OATA/vE,KAAK8F,KAAK,UACV9F,KAAK8F,KAAKupE,EAAiBh6D,IAC3BrV,KAAK8F,KAAK,MACV9F,KAAK8F,KAAKk5B,EAAA3Z,eAAe5Q,GAAM3P,SAAS,KACxC9E,KAAK8F,KAAK,OACV9F,KAAKsvE,oBAAoBtwC,EAAAzZ,YAAY9Q,IACrCzU,KAAK8F,KAAK,MACV9F,KAAKsvE,oBAAoBtwC,EAAAvZ,cAAchR,SACvCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAAt4B,aAAaya,MAChB,OAAQ9L,GACN,KAAK2pB,EAAAv4B,WAAW4a,IAEd,YADArhB,KAAK8F,KAAKk5B,EAAAlb,iBAAiBrP,GAAM3P,SAAS,KAG5C,KAAKk6B,EAAAv4B,WAAW8a,IASd,YARAvhB,KAAK8F,KACHyoE,cACEt9B,QACEjS,EAAAjb,oBAAoBtP,GACpBuqB,EAAAhb,qBAAqBvP,MAM7B,KAAKuqB,EAAAv4B,WAAWib,IAEd,YADA1hB,KAAK8F,KAAKk5B,EAAA/a,iBAAiBxP,GAAM3P,SAAS,KAG5C,KAAKk6B,EAAAv4B,WAAWmb,IAEd,YADA5hB,KAAK8F,KAAKk5B,EAAA9a,iBAAiBzP,GAAM3P,SAAS,KAI9C,MAEF,KAAKk6B,EAAAt4B,aAAagc,MAChB,OAAQsc,EAAAna,WAAWpQ,IACjB,KAAKuqB,EAAAj2B,QAAQi1C,OAIX,OAHAh+C,KAAK8F,KAAK,aACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,SACvCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAAj2B,QAAQk1C,OAIX,OAHAj+C,KAAK8F,KAAK,aACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,SACvCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAAj2B,QAAQm1C,UAIX,OAHAl+C,KAAK8F,KAAK,gBACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,SACvCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAAj2B,QAAQi7D,OACb,KAAKhlC,EAAAj2B,QAAQk7D,OAGX,OAFAjkE,KAAK8F,KAAK,UACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,IAGzC,KAAKuqB,EAAAj2B,QAAQinE,OAIX,OAHAhwE,KAAK8F,KAAK,aACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,SACvCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAAj2B,QAAQknE,QAIX,OAHAjwE,KAAK8F,KAAK,cACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,SACvCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAAj2B,QAAQmnE,SAIX,OAHAlwE,KAAK8F,KAAK,eACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,SACvCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAAj2B,QAAQonE,SAIX,OAHAnwE,KAAK8F,KAAK,eACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,SACvCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAAj2B,QAAQqnE,WAIX,OAHApwE,KAAK8F,KAAK,iBACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,SACvCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAAj2B,QAAQsnE,QAIX,OAHArwE,KAAK8F,KAAK,cACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,SACvCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAAj2B,QAAQ+0C,OACb,KAAK9e,EAAAj2B,QAAQg1C,OAGX,OAFA/9C,KAAK8F,KAAK,UACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,IAGzC,KAAKuqB,EAAAj2B,QAAQunE,OAIX,OAHAtwE,KAAK8F,KAAK,aACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,SACvCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAAj2B,QAAQwnE,OAIX,OAHAvwE,KAAK8F,KAAK,aACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,SACvCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAAj2B,QAAQynE,UAIX,OAHAxwE,KAAK8F,KAAK,gBACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,SACvCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAAj2B,QAAQ0nE,OAIX,OAHAzwE,KAAK8F,KAAK,aACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,SACvCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAAj2B,QAAQ2nE,QAIX,OAHA1wE,KAAK8F,KAAK,cACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,SACvCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAAj2B,QAAQ4nE,SAIX,OAHA3wE,KAAK8F,KAAK,eACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,SACvCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAAj2B,QAAQ6nE,SAIX,OAHA5wE,KAAK8F,KAAK,eACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,SACvCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAAj2B,QAAQ8nE,WAIX,OAHA7wE,KAAK8F,KAAK,iBACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,SACvCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAAj2B,QAAQ+nE,QAIX,OAHA9wE,KAAK8F,KAAK,cACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,SACvCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAAj2B,QAAQuwD,UAGX,OAFAt5D,KAAK8F,KAAK,cACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,IAGzC,KAAKuqB,EAAAj2B,QAAQwwD,UAGX,OAFAv5D,KAAK8F,KAAK,mBACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,IAGzC,KAAKuqB,EAAAj2B,QAAQswD,QAKb,KAAKr6B,EAAAj2B,QAAQuvD,cAGX,OAFAt4D,KAAK8F,KAAK,cACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,IAGzC,KAAKuqB,EAAAj2B,QAAQsvD,cAGX,OAFAr4D,KAAK8F,KAAK,cACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,IAGzC,KAAKuqB,EAAAj2B,QAAQyvD,cAGX,OAFAx4D,KAAK8F,KAAK,mBACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,IAGzC,KAAKuqB,EAAAj2B,QAAQwvD,cAGX,OAFAv4D,KAAK8F,KAAK,mBACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,IAGzC,KAAKuqB,EAAAj2B,QAAQ2vD,cAGX,OAFA14D,KAAK8F,KAAK,cACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,IAGzC,KAAKuqB,EAAAj2B,QAAQ0vD,cAGX,OAFAz4D,KAAK8F,KAAK,cACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,IAGzC,KAAKuqB,EAAAj2B,QAAQ6vD,cAGX,OAFA54D,KAAK8F,KAAK,mBACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,IAGzC,KAAKuqB,EAAAj2B,QAAQ4vD,cAGX,OAFA34D,KAAK8F,KAAK,mBACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,IAGzC,KAAKuqB,EAAAj2B,QAAQgoE,eAIX,OAHA/wE,KAAK8F,KAAK,yBACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,SACvCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAAj2B,QAAQioE,eAIX,OAHAhxE,KAAK8F,KAAK,yBACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,SACvCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAAj2B,QAAQgwD,gBAGX,OAFA/4D,KAAK8F,KAAK,cACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,IAGzC,KAAKuqB,EAAAj2B,QAAQowD,gBAGX,OAFAn5D,KAAK8F,KAAK,cACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,IAGzC,KAAKuqB,EAAAj2B,QAAQiwD,gBAGX,OAFAh5D,KAAK8F,KAAK,mBACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,IAGzC,KAAKuqB,EAAAj2B,QAAQqwD,gBAGX,OAFAp5D,KAAK8F,KAAK,mBACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,IAGzC,KAAKuqB,EAAAj2B,QAAQ8vD,gBAGX,OAFA74D,KAAK8F,KAAK,cACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,IAGzC,KAAKuqB,EAAAj2B,QAAQkwD,gBAGX,OAFAj5D,KAAK8F,KAAK,cACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,IAGzC,KAAKuqB,EAAAj2B,QAAQ+vD,gBAGX,OAFA94D,KAAK8F,KAAK,mBACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,IAGzC,KAAKuqB,EAAAj2B,QAAQmwD,gBAGX,OAFAl5D,KAAK8F,KAAK,mBACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,IAGzC,KAAKuqB,EAAAj2B,QAAQovD,WAGX,OAFAn4D,KAAK8F,KAAK,cACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,IAGzC,KAAKuqB,EAAAj2B,QAAQqvD,UAGX,OAFAp4D,KAAK8F,KAAK,cACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,IAGzC,KAAKuqB,EAAAj2B,QAAQkoE,eAIX,OAHAjxE,KAAK8F,KAAK,yBACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,SACvCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAAj2B,QAAQmoE,eAIX,OAHAlxE,KAAK8F,KAAK,yBACV9F,KAAKsvE,oBAAoBtwC,EAAAla,cAAcrQ,SACvCzU,KAAK8F,KAAK,KAId,MAEF,KAAKk5B,EAAAt4B,aAAamc,OAChB,OAAQmc,EAAAta,YAAYjQ,IAClB,KAAKuqB,EAAA5yB,SAAS4kD,OACd,KAAKhyB,EAAA5yB,SAAS6tD,OACd,KAAKj7B,EAAA5yB,SAAS8tD,OACd,KAAKl7B,EAAA5yB,SAAS+tD,OAIZ,OAHAn6D,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,YACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,IAG1C,KAAKuqB,EAAA5yB,SAASguD,OACd,KAAKp7B,EAAA5yB,SAASiuD,OACd,KAAKr7B,EAAA5yB,SAASkuD,OACd,KAAKt7B,EAAA5yB,SAASmuD,OAIZ,OAHAv6D,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,YACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,IAG1C,KAAKuqB,EAAA5yB,SAAS+wC,OACd,KAAKne,EAAA5yB,SAASouD,OACd,KAAKx7B,EAAA5yB,SAASquD,OACd,KAAKz7B,EAAA5yB,SAASsuD,OAIZ,OAHA16D,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,YACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,IAG1C,KAAKuqB,EAAA5yB,SAASwuD,OACd,KAAK57B,EAAA5yB,SAASyuD,OACd,KAAK77B,EAAA5yB,SAAS2uD,OACd,KAAK/7B,EAAA5yB,SAAS4uD,OAIZ,OAHAh7D,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,YACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,IAG1C,KAAKuqB,EAAA5yB,SAASuxC,OAMZ,OALA39C,KAAK8F,KAAK,eACV9F,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,YACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,SACxCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAA5yB,SAASwxC,OACd,KAAK5e,EAAA5yB,SAAS6uD,OAIZ,OAHAj7D,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,YACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,IAG1C,KAAKuqB,EAAA5yB,SAASyxC,OAMZ,OALA79C,KAAK8F,KAAK,eACV9F,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,YACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,SACxCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAA5yB,SAASgxC,OACd,KAAKpe,EAAA5yB,SAASovD,OAIZ,OAHAx7D,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,YACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,IAG1C,KAAKuqB,EAAA5yB,SAASqvD,MACd,KAAKz8B,EAAA5yB,SAASsvD,MAIZ,OAHA17D,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,YACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,IAG1C,KAAKuqB,EAAA5yB,SAASuvD,OACd,KAAK38B,EAAA5yB,SAASwvD,OAIZ,OAHA57D,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,YACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,IAG1C,KAAKuqB,EAAA5yB,SAASkxC,OACd,KAAKte,EAAA5yB,SAASgvD,OAIZ,OAHAp7D,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,aACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,IAG1C,KAAKuqB,EAAA5yB,SAASsxC,OACd,KAAK1e,EAAA5yB,SAASmvD,OAIZ,OAHAv7D,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,cACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,IAG1C,KAAKuqB,EAAA5yB,SAASqxC,OACd,KAAKze,EAAA5yB,SAASkvD,OAIZ,OAHAt7D,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,aACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,IAG1C,KAAKuqB,EAAA5yB,SAAS+kE,QAMZ,OALAnxE,KAAK8F,KAAK,cACV9F,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,MACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,SACxCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAA5yB,SAASglE,QAMZ,OALApxE,KAAK8F,KAAK,cACV9F,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,MACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,SACxCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAA5yB,SAAS+uC,MACd,KAAKnc,EAAA5yB,SAASgvC,MACd,KAAKpc,EAAA5yB,SAASivC,MACd,KAAKrc,EAAA5yB,SAASkvC,MAIZ,OAHAt7C,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,aACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,IAG1C,KAAKuqB,EAAA5yB,SAASmvC,MACd,KAAKvc,EAAA5yB,SAASovC,MACd,KAAKxc,EAAA5yB,SAASqvC,MACd,KAAKzc,EAAA5yB,SAASsvC,MAIZ,OAHA17C,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,aACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,IAG1C,KAAKuqB,EAAA5yB,SAASuvC,MACd,KAAK3c,EAAA5yB,SAASyvC,MACd,KAAK7c,EAAA5yB,SAAS2vC,MACd,KAAK/c,EAAA5yB,SAAS4vC,MAIZ,OAHAh8C,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,YACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,IAG1C,KAAKuqB,EAAA5yB,SAASwvC,MAKZ,OAJA57C,KAAK8F,KAAK,SACV9F,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,iBACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,IAG1C,KAAKuqB,EAAA5yB,SAAS6vC,MACd,KAAKjd,EAAA5yB,SAAS+vC,MACd,KAAKnd,EAAA5yB,SAASiwC,MACd,KAAKrd,EAAA5yB,SAASkwC,MAIZ,OAHAt8C,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,aACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,IAG1C,KAAKuqB,EAAA5yB,SAAS8vC,MAKZ,OAJAl8C,KAAK8F,KAAK,SACV9F,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,kBACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,IAG1C,KAAKuqB,EAAA5yB,SAASmwC,MACd,KAAKvd,EAAA5yB,SAASqwC,MACd,KAAKzd,EAAA5yB,SAASuwC,MACd,KAAK3d,EAAA5yB,SAASwwC,MAIZ,OAHA58C,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,YACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,IAG1C,KAAKuqB,EAAA5yB,SAASowC,MAKZ,OAJAx8C,KAAK8F,KAAK,SACV9F,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,iBACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,IAG1C,KAAKuqB,EAAA5yB,SAASywC,MACd,KAAK7d,EAAA5yB,SAAS2wC,MACd,KAAK/d,EAAA5yB,SAAS6wC,MACd,KAAKje,EAAA5yB,SAAS8wC,MAIZ,OAHAl9C,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,aACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,IAG1C,KAAKuqB,EAAA5yB,SAAS0wC,MAKZ,OAJA98C,KAAK8F,KAAK,SACV9F,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,kBACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,IAG1C,KAAKuqB,EAAA5yB,SAAS0uD,OAKZ,OAJA96D,KAAK8F,KAAK,SACV9F,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,iBACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,IAG1C,KAAKuqB,EAAA5yB,SAAS8uD,OAKZ,OAJAl7D,KAAK8F,KAAK,SACV9F,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,iBACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,IAG1C,KAAKuqB,EAAA5yB,SAASilE,QAMZ,OALArxE,KAAK8F,KAAK,cACV9F,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,MACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,SACxCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAA5yB,SAASklE,QAMZ,OALAtxE,KAAK8F,KAAK,cACV9F,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,MACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,SACxCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAA5yB,SAAS0vC,MAKZ,OAJA97C,KAAK8F,KAAK,SACV9F,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,iBACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,IAG1C,KAAKuqB,EAAA5yB,SAASgwC,MAKZ,OAJAp8C,KAAK8F,KAAK,SACV9F,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,kBACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,IAG1C,KAAKuqB,EAAA5yB,SAASswC,MAKZ,OAJA18C,KAAK8F,KAAK,SACV9F,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,iBACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,IAG1C,KAAKuqB,EAAA5yB,SAAS4wC,MAKZ,OAJAh9C,KAAK8F,KAAK,SACV9F,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,kBACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,IAG1C,KAAKuqB,EAAA5yB,SAASmlE,YAMZ,OALAvxE,KAAK8F,KAAK,kBACV9F,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,MACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,SACxCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAA5yB,SAASolE,OAMZ,OALAxxE,KAAK8F,KAAK,aACV9F,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,MACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,SACxCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAA5yB,SAASqlE,OAMZ,OALAzxE,KAAK8F,KAAK,aACV9F,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,MACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,SACxCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAA5yB,SAASslE,YAMZ,OALA1xE,KAAK8F,KAAK,kBACV9F,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,MACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,SACxCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAA5yB,SAASulE,OAMZ,OALA3xE,KAAK8F,KAAK,aACV9F,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,MACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,SACxCzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAA5yB,SAASwlE,OAMZ,OALA5xE,KAAK8F,KAAK,aACV9F,KAAKsvE,oBAAoBtwC,EAAAra,cAAclQ,IACvCzU,KAAK8F,KAAK,MACV9F,KAAKsvE,oBAAoBtwC,EAAApa,eAAenQ,SACxCzU,KAAK8F,KAAK,KAId,OAEF,KAAKk5B,EAAAt4B,aAAa83C,OAUhB,OATAx+C,KAAK8F,KAAK,WACV9F,KAAK8F,KAAKupE,EAAiBh6D,IAC3BrV,KAAK8F,KAAK,MACV9F,KAAKsvE,oBAAoBtwC,EAAAjY,cAActS,IACvCzU,KAAK8F,KAAK,MACV9F,KAAKsvE,oBAAoBtwC,EAAA/X,cAAcxS,IACvCzU,KAAK8F,KAAK,MACV9F,KAAKsvE,oBAAoBtwC,EAAA7X,mBAAmB1S,SAC5CzU,KAAK8F,KAAK,KAGZ,KAAKk5B,EAAAt4B,aAAamrE,KAGhB,OAFA7xE,KAAKsvE,oBAAoBtwC,EAAA3X,aAAa5S,SACtCzU,KAAK8F,KAAK,OAGZ,KAAKk5B,EAAAt4B,aAAaorE,OAQhB,aAPIvC,EAASvwC,EAAAzX,eAAe9S,KAC1BzU,KAAK8F,KAAK,WACV9F,KAAKsvE,oBAAoBC,GACzBvvE,KAAK8F,KAAK,QAEV9F,KAAK8F,KAAK,cAId,KAAKk5B,EAAAt4B,aAAaqrE,KAChB,OAAQ/yC,EAAArX,UAAUlT,IAChB,KAAKuqB,EAAA/tB,OAAO+gE,cAEV,YADAhyE,KAAK8F,KAAK,oBAGZ,KAAKk5B,EAAA/tB,OAAOghE,WAIV,OAHAjyE,KAAK8F,KAAK,gBACV9F,KAAKsvE,oBAAoBtwC,EAAAjX,eAAetT,EAAM,SAC9CzU,KAAK8F,KAAK,KAId,MAEF,KAAKk5B,EAAAt4B,aAAautD,IAEhB,YADAj0D,KAAK8F,KAAK,OAGZ,KAAKk5B,EAAAt4B,aAAag4C,YAEhB,YADA1+C,KAAK8F,KAAK,iBAGZ,KAAKk5B,EAAAt4B,aAAawrE,cAClB,KAAKlzC,EAAAt4B,aAAayrE,UAClB,KAAKnzC,EAAAt4B,aAAa0rE,WAClB,KAAKpzC,EAAAt4B,aAAa2rE,YAEpB,MAAM,IAAIhyD,MAAM,oBAGV2uD,EAAA/sE,UAAA6D,KAAR,SAAaT,GAEXrF,KAAKqF,KAAKS,KAAKT,IAGjB2pE,EAAA/sE,UAAAkqD,OAAA,WACE,IAAIvsC,EAAM5f,KAAKqF,KAAKU,KAAK,IAEzB,OADA/F,KAAKqF,QACEua,GAEXovD,EA7yBA,GA+yBA,SAAAK,EAA0Bh6D,GACxB,OAAQA,GACN,KAAK2pB,EAAAv4B,WAAWiR,KAAM,MAAO,OAC7B,KAAKsnB,EAAAv4B,WAAW4a,IAAK,MAAO,MAC5B,KAAK2d,EAAAv4B,WAAW8a,IAAK,MAAO,MAC5B,KAAKyd,EAAAv4B,WAAWib,IAAK,MAAO,MAC5B,KAAKsd,EAAAv4B,WAAWmb,IAAK,MAAO,MAC5B,KAAKod,EAAAv4B,WAAWi4C,YAAa,MAAM,IAAIr+B,MAAM,oBAC7C,KAAK2e,EAAAv4B,WAAW6rE,KAAM,MAAM,IAAIjyD,MAAM,aACtC,QAAS,MAAM,IAAIA,MAAM,oBAxzBhB3gB,EAAAsvE,4FCxDb,IAAAroE,EAAAxG,EAAA,IAOAoyE,EAAApyE,EAAA,IAIAqyE,EAAAryE,EAAA,IAKA0+B,EAAA1+B,EAAA,GAyCoCT,EAAA+yE,iBAtClC5zC,EAAA74B,wBAOF,IAAA0sE,EAAAvyE,EAAA,IASAT,EAAAqlE,UAAA,SAA0B1/D,EAAcgvB,EAAcqU,EACpDiqC,GAIA,YALoD,IAAAjqC,OAAA,QACpD,IAAAiqC,MAAA,MAEKA,IAAQA,EAAS,IAAID,EAAAjO,QAC1BkO,EAAO5N,UAAU1/D,EAAMgvB,EAAMqU,GACtBiqC,GAITjzE,EAAA6mE,SAAA,SAAyBoM,GACvB,OAAOA,EAAOpM,YAIhB7mE,EAAAkzE,eAAA,SAA+BD,GAC7B,IAAIpiC,EAAUoiC,EAAOpiC,QACrB,OAAOA,EAAQ7O,kBAAoB6O,EAAQpqC,YAAYZ,OACnDgrC,EAAQpqC,YAAYoqC,EAAQ7O,qBAC5B,MAONhiC,EAAAmzE,OAAA,SAAuBzuE,GACrB,OAAOA,EAAQd,UAAYu7B,EAAA57B,mBAAmBM,MAIhD7D,EAAAozE,UAAA,SAA0B1uE,GACxB,OAAOA,EAAQd,UAAYu7B,EAAA57B,mBAAmBO,SAIhD9D,EAAAqzE,QAAA,SAAwB3uE,GACtB,OAAOA,EAAQd,UAAYu7B,EAAA57B,mBAAmBQ,OAIhD/D,EAAAszE,cAAA,WACE,OAAO,IAAIrsE,EAAA2lD,SAIb5sD,EAAAuzE,UAAA,SAA0BpwC,EAAkBvpB,GAC1CupB,EAAQvpB,OAASA,GAInB5Z,EAAAwzE,iBAAA,SAAiCrwC,EAAkB2pB,GACjD3pB,EAAQ2pB,cAAgBA,GAI1B9sD,EAAAyzE,YAAA,SAA4BtwC,EAAkB4pB,GAC5C5pB,EAAQ4pB,SAAWA,GAIrB/sD,EAAA0zE,gBAAA,SAAgCvwC,EAAkB6pB,GAChD7pB,EAAQ6pB,aAAeA,GAIzBhtD,EAAA2zE,eAAA,SAA+BxwC,EAAkB8pB,GAC/C9pB,EAAQ8pB,YAAcA,GAIxBjtD,EAAA4zE,aAAA,SAA6BzwC,EAAkB3iB,GAC7C2iB,EAAQ3iB,UAAYA,GAItBxgB,EAAA6zE,cAAA,SAA8B1wC,EAAkB+pB,GAC9C/pB,EAAQ+pB,WAAaA,GAIvBltD,EAAA8zE,eAAA,SAA+B3wC,EAAkBjiC,EAAc62B,GAC7D,IAAI8O,EAAgB1D,EAAQ0D,cACvBA,IAAe1D,EAAQ0D,cAAgBA,EAAgB,IAAI/E,KAChE+E,EAAc/Z,IAAI5rB,EAAM62B,IAIb/3B,EAAA+zE,uBAAsB,EAEtB/zE,EAAAg0E,uBAAsB,EAGnCh0E,EAAAi0E,cAAA,SAA8B9wC,EAAkBkqB,GAC9ClqB,EAAQgqB,UAAYE,GAItBrtD,EAAAk0E,cAAA,SAA8BjB,GAC5B,OAAOA,EAAOxmB,UAIhBzsD,EAAAm0E,eAAA,SAA+BtjC,EAAkB1N,GAC/C,YAD+C,IAAAA,MAAA,MACxC,IAAIl8B,EAAAwmD,SAAS5c,EAAS1N,GAASorB,WAIxCvuD,EAAAo0E,gBAAA,SAAgCn0E,GAC9B,IAAIwvE,EAAa,IAAIoD,EAAAvD,WAErB,OADAG,EAAWD,UAAUvvE,GACdwvE,EAAWhjB,UAIpBzsD,EAAAq0E,SAAA,SAAyBxjC,GACvB,OAAOiiC,EAAAvE,WAAWE,MAAM59B,IAI1B7wC,EAAAs0E,SAAA,SAAyBzjC,GACvB,OAAOiiC,EAAA7D,WAAWR,MAAM59B,IAI1B,IAAAvlB,EAAA7qB,EAAA,GAAST,EAAAoD,eAAAkoB,EAAAloB,iCCpKT,SAAA+sD,GAAA,MAAAjuC,EAAA,IAAA6gD,aAAA,GACA/gD,EAAA,IAAA8gD,aAAA5gD,EAAA9P,QACAuP,EAAA,IAAAkhD,WAAA3gD,EAAA9P,QAEA+9C,EAAAokB,WAAA,SAAA3yE,GAEA,OADAogB,EAAA,GAAApgB,EACA+f,EAAA,IAGAwuC,EAAAqkB,WAAA,SAAA5yE,GAEA,OADA+f,EAAA,GAAA/f,EACAogB,EAAA,IAGAmuC,EAAAskB,WAAA,SAAA7yE,GAEA,OADAsgB,EAAA,GAAAtgB,EACA2vC,QAAA5vB,EAAA,GAAAA,EAAA,KAGAwuC,EAAAukB,WAAA,SAAA9yE,GAGA,OAFA+f,EAAA,GAAAhE,QAAA/b,GACA+f,EAAA,GAAA/D,SAAAhc,GACAsgB,EAAA,qCCtBAjiB,EAAAD,QAAA20E,EAKA,IAAAC,EAAA,KAEA,IACAA,EAAA,IAAAC,YAAAC,SAAA,IAAAD,YAAAtiE,OAAA,IAAA8N,YACA,u2BACSrgB,QACR,MAAAq/C,IAcD,SAAAs1B,EAAAI,EAAAC,EAAAC,GAMA30E,KAAAy0E,IAAA,EAAAA,EAMAz0E,KAAA00E,KAAA,EAAAA,EAMA10E,KAAA20E,aAoCA,SAAAC,EAAAC,GACA,YAAAA,KAAA,YAXAR,EAAApyE,UAAA6yE,WAEA/zE,OAAAC,eAAAqzE,EAAApyE,UAAA,cAAqDX,OAAA,IAkBrD+yE,EAAAO,SAOA,IAAAG,KAOAC,KAQA,SAAAC,EAAA3zE,EAAAqzE,GACA,IAAAE,EAAAK,EAAAC,EACA,OAAAR,GAEAQ,EAAA,IADA7zE,KAAA,IACAA,EAAA,OACA4zE,EAAAF,EAAA1zE,IAEA4zE,GAEAL,EAAAO,EAAA9zE,GAAA,EAAAA,GAAA,WACA6zE,IACAH,EAAA1zE,GAAAuzE,GACAA,IAGAM,GAAA,MADA7zE,GAAA,IACAA,EAAA,OACA4zE,EAAAH,EAAAzzE,IAEA4zE,GAEAL,EAAAO,EAAA9zE,IAAA,WACA6zE,IACAJ,EAAAzzE,GAAAuzE,GACAA,GAmBA,SAAAQ,EAAA/zE,EAAAqzE,GACA,GAAAW,MAAAh0E,GACA,OAAAqzE,EAAAY,EAAAC,EACA,GAAAb,EAAA,CACA,GAAArzE,EAAA,EACA,OAAAi0E,EACA,GAAAj0E,GAAAm0E,EACA,OAAAC,MACK,CACL,GAAAp0E,IAAAq0E,EACA,OAAAx3B,EACA,GAAA78C,EAAA,GAAAq0E,EACA,OAAA50D,EAEA,OAAAzf,EAAA,EACA+zE,GAAA/zE,EAAAqzE,GAAAiB,MACAR,EAAA9zE,EAAAu0E,EAAA,EAAAv0E,EAAAu0E,EAAA,EAAAlB,GAmBA,SAAAS,EAAAU,EAAAC,EAAApB,GACA,WAAAN,EAAAyB,EAAAC,EAAApB,GA5CAN,EAAAY,UAkCAZ,EAAAgB,aAsBAhB,EAAAe,WASA,IAAAY,EAAAC,KAAAC,IASA,SAAAC,EAAA9rD,EAAAsqD,EAAAyB,GACA,OAAA/rD,EAAA9kB,OACA,MAAA8a,MAAA,gBACA,WAAAgK,GAAA,aAAAA,GAAA,cAAAA,GAAA,cAAAA,EACA,OAAAmrD,EASA,GARA,iBAAAb,GAEAyB,EAAAzB,EACAA,GAAA,GAEAA,OAEAyB,KAAA,IACA,MAAAA,EACA,MAAAC,WAAA,SAEA,IAAAl0E,EACA,IAAAA,EAAAkoB,EAAA26C,QAAA,QACA,MAAA3kD,MAAA,mBACA,OAAAle,EACA,OAAAg0E,EAAA9rD,EAAAxkB,UAAA,GAAA8uE,EAAAyB,GAAAR,MAQA,IAHA,IAAAU,EAAAjB,EAAAW,EAAAI,EAAA,IAEAnjE,EAAAuiE,EACAn1E,EAAA,EAAmBA,EAAAgqB,EAAA9kB,OAAgBlF,GAAA,GACnC,IAAAm9C,EAAAy4B,KAAAl7B,IAAA,EAAA1wB,EAAA9kB,OAAAlF,GACAiB,EAAAi1E,SAAAlsD,EAAAxkB,UAAAxF,IAAAm9C,GAAA44B,GACA,GAAA54B,EAAA,GACA,IAAAg5B,EAAAnB,EAAAW,EAAAI,EAAA54B,IACAvqC,IAAAwjE,IAAAD,GAAA1qC,IAAAupC,EAAA/zE,SAGA2R,GADAA,IAAAwjE,IAAAH,IACAxqC,IAAAupC,EAAA/zE,IAIA,OADA2R,EAAA0hE,WACA1hE,EAoBA,SAAAyjE,EAAAvsD,EAAAwqD,GACA,uBAAAxqD,EACAkrD,EAAAlrD,EAAAwqD,GACA,iBAAAxqD,EACAgsD,EAAAhsD,EAAAwqD,GAEAS,EAAAjrD,EAAAsqD,IAAAtqD,EAAAuqD,KAAA,kBAAAC,IAAAxqD,EAAAwqD,UAfAN,EAAA8B,aAyBA9B,EAAAqC,YAUA,IAcAb,EAAAc,WAOAlB,EAAAI,IAOAF,EAAAF,EAAA,EAOAmB,EAAA3B,EA5BA,OAkCAO,EAAAP,EAAA,GAMAZ,EAAAmB,OAMA,IAAAD,EAAAN,EAAA,MAMAZ,EAAAkB,QAMA,IAAAsB,EAAA5B,EAAA,GAMAZ,EAAAwC,MAMA,IAAAC,EAAA7B,EAAA,MAMAZ,EAAAyC,OAMA,IAAAC,EAAA9B,GAAA,GAMAZ,EAAA0C,UAMA,IAAAh2D,EAAAq0D,GAAA,iBAMAf,EAAAtzD,YAMA,IAAA20D,EAAAN,GAAA,SAMAf,EAAAqB,qBAMA,IAAAv3B,EAAAi3B,EAAA,kBAMAf,EAAAl2B,YAMA,IAAA64B,EAAA3C,EAAApyE,UAMA+0E,EAAAC,MAAA,WACA,OAAAj3E,KAAA20E,SAAA30E,KAAAy0E,MAAA,EAAAz0E,KAAAy0E,KAOAuC,EAAAE,SAAA,WACA,OAAAl3E,KAAA20E,UACA30E,KAAA00E,OAAA,GAAAmB,GAAA71E,KAAAy0E,MAAA,GACAz0E,KAAA00E,KAAAmB,GAAA71E,KAAAy0E,MAAA,IAUAuC,EAAAlyE,SAAA,SAAAsxE,GAEA,IADAA,KAAA,IACA,MAAAA,EACA,MAAAC,WAAA,SACA,GAAAr2E,KAAAm3E,SACA,UACA,GAAAn3E,KAAAo3E,aAAA,CACA,GAAAp3E,KAAAq3E,GAAAl5B,GAAA,CAGA,IAAAm5B,EAAAjC,EAAAe,GACAmB,EAAAv3E,KAAAu3E,IAAAD,GACAE,EAAAD,EAAAd,IAAAa,GAAAG,IAAAz3E,MACA,OAAAu3E,EAAAzyE,SAAAsxE,GAAAoB,EAAAP,QAAAnyE,SAAAsxE,GAEA,UAAAp2E,KAAA41E,MAAA9wE,SAAAsxE,GAQA,IAHA,IAAAE,EAAAjB,EAAAW,EAAAI,EAAA,GAAAp2E,KAAA20E,UACA+C,EAAA13E,KACAiT,EAAA,KACA,CACA,IAAA0kE,EAAAD,EAAAH,IAAAjB,GAEAsB,GADAF,EAAAD,IAAAE,EAAAlB,IAAAH,IAAAW,UAAA,GACAnyE,SAAAsxE,GAEA,IADAsB,EAAAC,GACAR,SACA,OAAAS,EAAA3kE,EAEA,KAAA2kE,EAAAryE,OAAA,GACAqyE,EAAA,IAAAA,EACA3kE,EAAA,GAAA2kE,EAAA3kE,IASA+jE,EAAAa,YAAA,WACA,OAAA73E,KAAA00E,MAOAsC,EAAAc,oBAAA,WACA,OAAA93E,KAAA00E,OAAA,GAOAsC,EAAAe,WAAA,WACA,OAAA/3E,KAAAy0E,KAOAuC,EAAAgB,mBAAA,WACA,OAAAh4E,KAAAy0E,MAAA,GAOAuC,EAAAiB,cAAA,WACA,GAAAj4E,KAAAo3E,aACA,OAAAp3E,KAAAq3E,GAAAl5B,GAAA,GAAAn+C,KAAA41E,MAAAqC,gBAEA,IADA,IAAA9tD,EAAA,GAAAnqB,KAAA00E,KAAA10E,KAAA00E,KAAA10E,KAAAy0E,IACAyD,EAAA,GAAsBA,EAAA,GACtB,IAAA/tD,EAAA,GAAA+tD,GAD+BA,KAG/B,UAAAl4E,KAAA00E,KAAAwD,EAAA,GAAAA,EAAA,GAOAlB,EAAAG,OAAA,WACA,WAAAn3E,KAAA00E,MAAA,IAAA10E,KAAAy0E,KAOAuC,EAAAmB,IAAAnB,EAAAG,OAMAH,EAAAI,WAAA,WACA,OAAAp3E,KAAA20E,UAAA30E,KAAA00E,KAAA,GAOAsC,EAAAoB,WAAA,WACA,OAAAp4E,KAAA20E,UAAA30E,KAAA00E,MAAA,GAOAsC,EAAAqB,MAAA,WACA,aAAAr4E,KAAAy0E,MAOAuC,EAAAsB,OAAA,WACA,aAAAt4E,KAAAy0E,MAQAuC,EAAAuB,OAAA,SAAA/9B,GAGA,OAFAo6B,EAAAp6B,KACAA,EAAAk8B,EAAAl8B,KACAx6C,KAAA20E,WAAAn6B,EAAAm6B,UAAA30E,KAAA00E,OAAA,OAAAl6B,EAAAk6B,OAAA,SAEA10E,KAAA00E,OAAAl6B,EAAAk6B,MAAA10E,KAAAy0E,MAAAj6B,EAAAi6B,MASAuC,EAAAK,GAAAL,EAAAuB,OAOAvB,EAAAwB,UAAA,SAAAh+B,GACA,OAAAx6C,KAAAq3E,GAAA78B,IASAw8B,EAAAyB,IAAAzB,EAAAwB,UAQAxB,EAAA0B,GAAA1B,EAAAwB,UAOAxB,EAAA2B,SAAA,SAAAn+B,GACA,OAAAx6C,KAAA44E,KAAAp+B,GAAA,GASAw8B,EAAA6B,GAAA7B,EAAA2B,SAOA3B,EAAA8B,gBAAA,SAAAt+B,GACA,OAAAx6C,KAAA44E,KAAAp+B,IAAA,GASAw8B,EAAA+B,IAAA/B,EAAA8B,gBAQA9B,EAAAgC,GAAAhC,EAAA8B,gBAOA9B,EAAAiC,YAAA,SAAAz+B,GACA,OAAAx6C,KAAA44E,KAAAp+B,GAAA,GASAw8B,EAAAkC,GAAAlC,EAAAiC,YAOAjC,EAAAmC,mBAAA,SAAA3+B,GACA,OAAAx6C,KAAA44E,KAAAp+B,IAAA,GASAw8B,EAAAoC,IAAApC,EAAAmC,mBAQAnC,EAAAqC,GAAArC,EAAAmC,mBAQAnC,EAAAsC,QAAA,SAAA9+B,GAGA,GAFAo6B,EAAAp6B,KACAA,EAAAk8B,EAAAl8B,IACAx6C,KAAAq3E,GAAA78B,GACA,SACA,IAAA++B,EAAAv5E,KAAAo3E,aACAoC,EAAAh/B,EAAA48B,aACA,OAAAmC,IAAAC,GACA,GACAD,GAAAC,EACA,EAEAx5E,KAAA20E,SAGAn6B,EAAAk6B,OAAA,EAAA10E,KAAA00E,OAAA,GAAAl6B,EAAAk6B,OAAA10E,KAAA00E,MAAAl6B,EAAAi6B,MAAA,EAAAz0E,KAAAy0E,MAAA,OAFAz0E,KAAAy3E,IAAAj9B,GAAA48B,cAAA,KAYAJ,EAAA4B,KAAA5B,EAAAsC,QAMAtC,EAAAyC,OAAA,WACA,OAAAz5E,KAAA20E,UAAA30E,KAAAq3E,GAAAl5B,GACAA,EACAn+C,KAAA05E,MAAA5tC,IAAA+qC,IAQAG,EAAApB,IAAAoB,EAAAyC,OAOAzC,EAAAlrC,IAAA,SAAA6tC,GACA/E,EAAA+E,KACAA,EAAAjD,EAAAiD,IAIA,IAAAC,EAAA55E,KAAA00E,OAAA,GACAmF,EAAA,MAAA75E,KAAA00E,KACAoF,EAAA95E,KAAAy0E,MAAA,GACAsF,EAAA,MAAA/5E,KAAAy0E,IAEAuF,EAAAL,EAAAjF,OAAA,GACAuF,EAAA,MAAAN,EAAAjF,KACAwF,EAAAP,EAAAlF,MAAA,GAGA0F,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAYA,OAVAD,IADAC,GAAAP,GAHA,MAAAJ,EAAAlF,QAIA,GAGA2F,IADAC,GAAAP,EAAAI,KACA,GAGAC,IADAC,GAAAP,EAAAI,KACA,GAEAE,GAAAP,EAAAI,EAEA5E,GANAiF,GAAA,QAMA,IATAC,GAAA,QAQAH,GAAA,QACA,IAHAC,GAAA,OAGAp6E,KAAA20E,WAQAqC,EAAAuD,SAAA,SAAAC,GAGA,OAFA5F,EAAA4F,KACAA,EAAA9D,EAAA8D,IACAx6E,KAAA8rC,IAAA0uC,EAAA5E,QASAoB,EAAAS,IAAAT,EAAAuD,SAOAvD,EAAAyD,SAAA,SAAAC,GACA,GAAA16E,KAAAm3E,SACA,OAAA3B,EAKA,GAJAZ,EAAA8F,KACAA,EAAAhE,EAAAgE,IAGApG,EAKA,OAAAc,EAJAd,EAAAmC,IAAAz2E,KAAAy0E,IACAz0E,KAAA00E,KACAgG,EAAAjG,IACAiG,EAAAhG,MACAJ,EAAAqG,WAAA36E,KAAA20E,UAGA,GAAA+F,EAAAvD,SACA,OAAA3B,EACA,GAAAx1E,KAAAq3E,GAAAl5B,GACA,OAAAu8B,EAAArC,QAAAl6B,EAAAq3B,EACA,GAAAkF,EAAArD,GAAAl5B,GACA,OAAAn+C,KAAAq4E,QAAAl6B,EAAAq3B,EAEA,GAAAx1E,KAAAo3E,aACA,OAAAsD,EAAAtD,aACAp3E,KAAA41E,MAAAa,IAAAiE,EAAA9E,OAEA51E,KAAA41E,MAAAa,IAAAiE,GAAA9E,MACK,GAAA8E,EAAAtD,aACL,OAAAp3E,KAAAy2E,IAAAiE,EAAA9E,aAGA,GAAA51E,KAAA64E,GAAAjC,IAAA8D,EAAA7B,GAAAjC,GACA,OAAAvB,EAAAr1E,KAAAk3E,WAAAwD,EAAAxD,WAAAl3E,KAAA20E,UAKA,IAAAiF,EAAA55E,KAAA00E,OAAA,GACAmF,EAAA,MAAA75E,KAAA00E,KACAoF,EAAA95E,KAAAy0E,MAAA,GACAsF,EAAA,MAAA/5E,KAAAy0E,IAEAuF,EAAAU,EAAAhG,OAAA,GACAuF,EAAA,MAAAS,EAAAhG,KACAwF,EAAAQ,EAAAjG,MAAA,GACAmG,EAAA,MAAAF,EAAAjG,IAEA0F,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAqBA,OAnBAD,IADAC,GAAAP,EAAAa,KACA,GAGAR,IADAC,GAAAP,EAAAc,KACA,GACAP,GAAA,MAEAD,IADAC,GAAAN,EAAAG,KACA,GAGAC,IADAC,GAAAP,EAAAe,KACA,GACAR,GAAA,MAEAD,IADAC,GAAAN,EAAAI,KACA,GACAE,GAAA,MAEAD,IADAC,GAAAL,EAAAE,KACA,GAEAE,GAAAP,EAAAgB,EAAAf,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,EAEA5E,GAZAiF,GAAA,QAYA,IAlBAC,GAAA,QAiBAH,GAAA,QACA,IAHAC,GAAA,OAGAp6E,KAAA20E,WASAqC,EAAAP,IAAAO,EAAAyD,SAQAzD,EAAA6D,OAAA,SAAAC,GAGA,GAFAlG,EAAAkG,KACAA,EAAApE,EAAAoE,IACAA,EAAA3D,SACA,MAAA92D,MAAA,oBAaA,IAWA06D,EAAArD,EAAAsD,EArBA,GAAA1G,EAIA,OAAAt0E,KAAA20E,WACA,aAAA30E,KAAA00E,OACA,IAAAoG,EAAArG,MAAA,IAAAqG,EAAApG,KAUAU,GANAp1E,KAAA20E,SAAAL,EAAA2G,MAAA3G,EAAA4G,OACAl7E,KAAAy0E,IACAz0E,KAAA00E,KACAoG,EAAArG,IACAqG,EAAApG,MAEAJ,EAAAqG,WAAA36E,KAAA20E,UARA30E,KAWA,GAAAA,KAAAm3E,SACA,OAAAn3E,KAAA20E,SAAAY,EAAAC,EAEA,GAAAx1E,KAAA20E,SA6BK,CAKL,GAFAmG,EAAAnG,WACAmG,IAAAK,cACAL,EAAA5B,GAAAl5E,MACA,OAAAu1E,EACA,GAAAuF,EAAA5B,GAAAl5E,KAAAo7E,KAAA,IACA,OAAAtE,EACAkE,EAAAzF,MAtCA,CAGA,GAAAv1E,KAAAq3E,GAAAl5B,GACA,OAAA28B,EAAAzD,GAAAR,IAAAiE,EAAAzD,GAAAN,GACA54B,EACA28B,EAAAzD,GAAAl5B,GACA04B,GAIAkE,EADA/6E,KAAAq7E,IAAA,GACA9D,IAAAuD,GAAAQ,IAAA,IACAjE,GAAA7B,GACAsF,EAAA1D,aAAAP,EAAAE,GAEAW,EAAA13E,KAAAy3E,IAAAqD,EAAArE,IAAAsE,IACAC,EAAAD,EAAAjvC,IAAA4rC,EAAAH,IAAAuD,UAIS,GAAAA,EAAAzD,GAAAl5B,GACT,OAAAn+C,KAAA20E,SAAAY,EAAAC,EACA,GAAAx1E,KAAAo3E,aACA,OAAA0D,EAAA1D,aACAp3E,KAAA41E,MAAA2B,IAAAuD,EAAAlF,OACA51E,KAAA41E,MAAA2B,IAAAuD,GAAAlF,MACS,GAAAkF,EAAA1D,aACT,OAAAp3E,KAAAu3E,IAAAuD,EAAAlF,aACAoF,EAAAxF,EAmBA,IADAkC,EAAA13E,KACA03E,EAAA0B,IAAA0B,IAAA,CAGAC,EAAA9E,KAAAjoB,IAAA,EAAAioB,KAAAsF,MAAA7D,EAAAR,WAAA4D,EAAA5D,aAWA,IAPA,IAAAsE,EAAAvF,KAAA72B,KAAA62B,KAAAwF,IAAAV,GAAA9E,KAAAyF,KACAC,EAAAH,GAAA,KAAAxF,EAAA,EAAAwF,EAAA,IAIAI,EAAAvG,EAAA0F,GACAc,EAAAD,EAAAnF,IAAAqE,GACAe,EAAAzE,cAAAyE,EAAA3C,GAAAxB,IAGAmE,GADAD,EAAAvG,EADA0F,GAAAY,EACA37E,KAAA20E,WACA8B,IAAAqE,GAKAc,EAAAzE,WACAyE,EAAA/E,GAEAmE,IAAAlvC,IAAA8vC,GACAlE,IAAAD,IAAAoE,GAEA,OAAAb,GASAhE,EAAAO,IAAAP,EAAA6D,OAOA7D,EAAA8E,OAAA,SAAAhB,GAKA,OAJAlG,EAAAkG,KACAA,EAAApE,EAAAoE,IAGAxG,EAOAc,GANAp1E,KAAA20E,SAAAL,EAAAyH,MAAAzH,EAAA0H,OACAh8E,KAAAy0E,IACAz0E,KAAA00E,KACAoG,EAAArG,IACAqG,EAAApG,MAEAJ,EAAAqG,WAAA36E,KAAA20E,UAGA30E,KAAAy3E,IAAAz3E,KAAAu3E,IAAAuD,GAAArE,IAAAqE,KASA9D,EAAAiF,IAAAjF,EAAA8E,OAQA9E,EAAAU,IAAAV,EAAA8E,OAMA9E,EAAA0C,IAAA,WACA,OAAAtE,GAAAp1E,KAAAy0E,KAAAz0E,KAAA00E,KAAA10E,KAAA20E,WAQAqC,EAAAkF,IAAA,SAAA1hC,GAGA,OAFAo6B,EAAAp6B,KACAA,EAAAk8B,EAAAl8B,IACA46B,EAAAp1E,KAAAy0E,IAAAj6B,EAAAi6B,IAAAz0E,KAAA00E,KAAAl6B,EAAAk6B,KAAA10E,KAAA20E,WAQAqC,EAAAmF,GAAA,SAAA3hC,GAGA,OAFAo6B,EAAAp6B,KACAA,EAAAk8B,EAAAl8B,IACA46B,EAAAp1E,KAAAy0E,IAAAj6B,EAAAi6B,IAAAz0E,KAAA00E,KAAAl6B,EAAAk6B,KAAA10E,KAAA20E,WAQAqC,EAAAoF,IAAA,SAAA5hC,GAGA,OAFAo6B,EAAAp6B,KACAA,EAAAk8B,EAAAl8B,IACA46B,EAAAp1E,KAAAy0E,IAAAj6B,EAAAi6B,IAAAz0E,KAAA00E,KAAAl6B,EAAAk6B,KAAA10E,KAAA20E,WAQAqC,EAAAqF,UAAA,SAAAC,GAGA,OAFA1H,EAAA0H,KACAA,IAAArF,SACA,IAAAqF,GAAA,IACAt8E,KACAs8E,EAAA,GACAlH,EAAAp1E,KAAAy0E,KAAA6H,EAAAt8E,KAAA00E,MAAA4H,EAAAt8E,KAAAy0E,MAAA,GAAA6H,EAAAt8E,KAAA20E,UAEAS,EAAA,EAAAp1E,KAAAy0E,KAAA6H,EAAA,GAAAt8E,KAAA20E,WASAqC,EAAAsE,IAAAtE,EAAAqF,UAOArF,EAAAuF,WAAA,SAAAD,GAGA,OAFA1H,EAAA0H,KACAA,IAAArF,SACA,IAAAqF,GAAA,IACAt8E,KACAs8E,EAAA,GACAlH,EAAAp1E,KAAAy0E,MAAA6H,EAAAt8E,KAAA00E,MAAA,GAAA4H,EAAAt8E,KAAA00E,MAAA4H,EAAAt8E,KAAA20E,UAEAS,EAAAp1E,KAAA00E,MAAA4H,EAAA,GAAAt8E,KAAA00E,MAAA,OAAA10E,KAAA20E,WASAqC,EAAAqE,IAAArE,EAAAuF,WAOAvF,EAAAwF,mBAAA,SAAAF,GAIA,GAHA1H,EAAA0H,KACAA,IAAArF,SAEA,KADAqF,GAAA,IAEA,OAAAt8E,KAEA,IAAA00E,EAAA10E,KAAA00E,KACA,OAAA4H,EAAA,GAEAlH,EADAp1E,KAAAy0E,MACA6H,EAAA5H,GAAA,GAAA4H,EAAA5H,IAAA4H,EAAAt8E,KAAA20E,UAEAS,EADS,KAAAkH,EACT5H,EAEAA,IAAA4H,EAAA,GAFA,EAAAt8E,KAAA20E,WAYAqC,EAAAoE,KAAApE,EAAAwF,mBAQAxF,EAAAyF,MAAAzF,EAAAwF,mBAMAxF,EAAA0F,SAAA,WACA,OAAA18E,KAAA20E,SAEAS,EAAAp1E,KAAAy0E,IAAAz0E,KAAA00E,MAAA,GADA10E,MAQAg3E,EAAAmE,WAAA,WACA,OAAAn7E,KAAA20E,SACA30E,KACAo1E,EAAAp1E,KAAAy0E,IAAAz0E,KAAA00E,MAAA,IAQAsC,EAAA2F,QAAA,SAAA3D,GACA,OAAAA,EAAAh5E,KAAA48E,YAAA58E,KAAA68E,aAOA7F,EAAA4F,UAAA,WACA,IAAA7rC,EAAA/wC,KAAA00E,KACA5jC,EAAA9wC,KAAAy0E,IACA,OACA,IAAA3jC,EACAA,IAAA,MACAA,IAAA,OACAA,IAAA,GACA,IAAAC,EACAA,IAAA,MACAA,IAAA,OACAA,IAAA,KAQAimC,EAAA6F,UAAA,WACA,IAAA9rC,EAAA/wC,KAAA00E,KACA5jC,EAAA9wC,KAAAy0E,IACA,OACA1jC,IAAA,GACAA,IAAA,OACAA,IAAA,MACA,IAAAA,EACAD,IAAA,GACAA,IAAA,OACAA,IAAA,MACA,IAAAA,IAWAujC,EAAAyI,UAAA,SAAAlnE,EAAA++D,EAAAqE,GACA,OAAAA,EAAA3E,EAAA0I,YAAAnnE,EAAA++D,GAAAN,EAAA2I,YAAApnE,EAAA++D,IASAN,EAAA0I,YAAA,SAAAnnE,EAAA++D,GACA,WAAAN,EACAz+D,EAAA,GACAA,EAAA,MACAA,EAAA,OACAA,EAAA,OACAA,EAAA,GACAA,EAAA,MACAA,EAAA,OACAA,EAAA,OACA++D,IAUAN,EAAA2I,YAAA,SAAApnE,EAAA++D,GACA,WAAAN,EACAz+D,EAAA,OACAA,EAAA,OACAA,EAAA,MACAA,EAAA,GACAA,EAAA,OACAA,EAAA,OACAA,EAAA,MACAA,EAAA,GACA++D,sBCxyCA,SAAA9kB,GAAA,MAAAwkB,EAAAxkB,EAAAwkB,MAAAl0E,EAAA,IAEA0vD,EAAA1V,SAAAk6B,EAAAmB,KAEA3lB,EAAA3V,QAAAm6B,EAAAwC,IAEAhnB,EAAA5e,QAAA,SAAAH,EAAAC,GACA,OAAAsjC,EAAAe,SAAAtkC,EAAAC,IAGA8e,EAAAxyC,QAAA,SAAA/b,GACA,OAAAA,EAAAmzE,KAGA5kB,EAAAvyC,SAAA,SAAAhc,GACA,OAAAA,EAAAozE,MAGA7kB,EAAA/E,QAAA,SAAAl2C,EAAAC,GACA,OAAAD,EAAAk3B,IAAAj3B,IAGAg7C,EAAAgR,QAAA,SAAAjsD,EAAAC,GACA,OAAAD,EAAA6iE,IAAA5iE,IAGAg7C,EAAA9E,QAAA,SAAAn2C,EAAAC,GACA,OAAAD,EAAA6hE,IAAA5hE,IAGAg7C,EAAAotB,QAAA,SAAAroE,EAAAC,GACA,OAAAD,EAAA2iE,IAAA1iE,IAGAg7C,EAAAqtB,UAAA,SAAAtoE,EAAAC,GACA,OAAAD,EAAAumE,aAAA5D,IAAA1iE,EAAAsmE,cAAAuB,YAGA7sB,EAAAstB,QAAA,SAAAvoE,EAAAC,GACA,OAAAD,EAAAqnE,IAAApnE,IAGAg7C,EAAAutB,UAAA,SAAAxoE,EAAAC,GACA,OAAAD,EAAAumE,aAAAc,IAAApnE,EAAAsmE,cAAAuB,YAGA7sB,EAAA7V,QAAA,SAAAplC,EAAAC,GACA,OAAAD,EAAAsnE,IAAArnE,IAGAg7C,EAAAxV,OAAA,SAAAzlC,EAAAC,GACA,OAAAD,EAAAunE,GAAAtnE,IAGAg7C,EAAAwtB,QAAA,SAAAzoE,EAAAC,GACA,OAAAD,EAAAwnE,IAAAvnE,IAGAg7C,EAAA5V,QAAA,SAAArlC,EAAAC,GACA,OAAAD,EAAA0mE,IAAAzmE,IAGAg7C,EAAAytB,QAAA,SAAA1oE,EAAAC,GACA,OAAAD,EAAAymE,IAAAxmE,IAGAg7C,EAAAnB,UAAA,SAAA95C,EAAAC,GACA,OAAAD,EAAAwmE,KAAAvmE,IAGAg7C,EAAAvV,QAAA,SAAAh5C,GACA,OAAAA,EAAAo4E,OAGA7pB,EAAA0tB,OAAA,SAAA3oE,EAAAC,GACA,OAAAD,EAAAyiE,GAAAxiE,IAGAg7C,EAAA9V,OAAA,SAAAnlC,EAAAC,GACA,OAAAD,EAAA8jE,GAAA7jE,IAGAg7C,EAAAtB,UAAA,SAAAjtD,EAAAwxD,GACApvD,OAAAovD,GAAA,IAAAA,IAAA,IACA,IAAA+D,EAAAwd,EAAAY,QAAAniB,EAAA,GACA,OAAAxxD,EAAAwqC,IAAA+qB,GAAAqlB,IAAArlB,EAAA6iB,QAGA7pB,EAAAiR,UAAA,SAAAx/D,GACA,WAAAA,EAAAozE,MAAApzE,EAAAmzE,KAAA,GAAAnzE,EAAAmzE,KAAA1xC,GAAAhiB,YACA,IAAAzf,EAAAozE,MAAApzE,EAAAmzE,KAAA1xC,GAAAob,WAAA78C,EAAAmzE,IAAA,GAGA5kB,EAAAmR,WAAA,SAAA1/D,GACA,WAAAA,EAAAozE,MAAApzE,EAAAmzE,KAAA,GAAAnzE,EAAAmzE,KAAAzxC,IAAAjiB,YACA,IAAAzf,EAAAozE,MAAApzE,EAAAmzE,KAAAzxC,IAAAmb,WAAA78C,EAAAmzE,IAAA,GAGA5kB,EAAAqR,WAAA,SAAA5/D,GACA,WAAAA,EAAAozE,MAAApzE,EAAAmzE,KAAA,IACA,IAAAnzE,EAAAozE,MAAApzE,EAAAmzE,IAAA,GAGA5kB,EAAAkR,UAAA,SAAAz/D,GACA,WAAAA,EAAAozE,MAAApzE,EAAAmzE,KAAA,GAAAnzE,EAAAmzE,KAAAtxC,GAAApiB,WAGA8uC,EAAAoR,WAAA,SAAA3/D,GACA,WAAAA,EAAAozE,MAAApzE,EAAAmzE,KAAA,GAAAnzE,EAAAmzE,KAAArxC,IAAAriB,WAGA8uC,EAAAsR,WAAA,SAAA7/D,GACA,WAAAA,EAAAozE,MAGA7kB,EAAAuR,YAAA,SAAA9/D,GACA,WAAAA,EAAAozE,OAAA,IAAApzE,EAAAmzE,KAAA,IAAAnzE,EAAAmzE,MAGA,MAAA+I,EAAAnJ,EAAAgB,WAAA5xC,IAAAg6C,kBACAC,EAAArJ,EAAAgB,WAAA5xC,IAAAk6C,kBAEA9tB,EAAAwR,WAAA,SAAA//D,GACA,OAAAA,EAAA83E,IAAAoE,IAAAl8E,EAAAy3E,IAAA2E,IAGA,MAAAE,EAAAvJ,EAAAgB,WAAA3xC,IAAA+5C,kBACAI,EAAAxJ,EAAAgB,WAAA3xC,IAAAi6C,kBAEA9tB,EAAA0R,WAAA,SAAAjgE,GACA,OAAAA,EAAA83E,IAAAwE,IAAAt8E,EAAAy3E,IAAA8E,IAGAhuB,EAAAyR,WAAA,SAAAhgE,GACA,OAAAuuD,EAAAomB,KAAA6H,OAAAx8E,EAAA41E,aAGArnB,EAAA2R,WAAA,SAAAlgE,GACA,OAAAA,EAAA41E,YAGArnB,EAAA0e,cAAA,SAAAjtE,EAAAqzE,GACA,OAAAA,EAAArzE,EAAA65E,aAAA75E,GAAAwD,SAAA,qDC3IA,SAAAi5E,EAAwBjsE,EAAoBC,GAC1C,OAAOD,EAAOC,GACPD,EAAOC,EAAS,IAAM,EACtBD,EAAOC,EAAS,IAAM,GACtBD,EAAOC,EAAS,IAAM,GAI/B,SAAAixD,EAAyB1hE,EAAYwQ,EAAoBC,GACvDD,EAAOC,GAAczQ,EACrBwQ,EAAOC,EAAS,GAAKzQ,IAAU,EAC/BwQ,EAAOC,EAAS,GAAKzQ,IAAU,GAC/BwQ,EAAOC,EAAS,GAAKzQ,IAAU,GAIjC,SAAA08E,EAAwBlsE,EAAoBC,GAC1C,IAAI++B,EAAKitC,EAAQjsE,EAAQC,GACrBg/B,EAAKgtC,EAAQjsE,EAAQC,EAAS,GAClC,OAAOk/B,QAAQH,EAAIC,oDAnBrBrxC,EAAAq+E,UAQAr+E,EAAAsjE,WAQAtjE,EAAAs+E,UAOAt+E,EAAAqjE,SAAA,SAAyBzhE,EAAYwQ,EAAoBC,GACvDixD,EAAS3lD,QAAQ/b,GAAQwQ,EAAQC,GACjCixD,EAAS1lD,SAAShc,GAAQwQ,EAAQC,EAAS,IAI7CrS,EAAAu+E,QAAA,SAAwBnsE,EAAoBC,GAC1C,OAAOmiE,WAAW6J,EAAQjsE,EAAQC,KAIpCrS,EAAAujE,SAAA,SAAyB3hE,EAAYwQ,EAAoBC,GACvDixD,EAASiR,WAAW3yE,GAAQwQ,EAAQC,IAItCrS,EAAAw+E,QAAA,SAAwBpsE,EAAoBC,GAC1C,OAAOqiE,WAAW4J,EAAQlsE,EAAQC,KAIpCrS,EAAAwjE,SAAA,SAAyB5hE,EAAYwQ,EAAoBC,GACvD,IAAIosE,EAAWhK,WAAW7yE,GAC1B0hE,EAAS3lD,QAAQ8gE,GAAWrsE,EAAQC,GACpCixD,EAAS1lD,SAAS6gE,GAAWrsE,EAAQC,EAAS,mFChDhD,IAAMqsE,EAAW,KACXC,EAAW,OACXC,EAAW,WAGjB5+E,EAAA2uE,OAAA,SAAuBzoE,EAAcsY,GACnC,KAAOA,GAAS,GACdtY,EAAGE,KAAKw4E,GACRpgE,GAAS,EAEPA,GAAS,IACXtY,EAAGE,KAAKu4E,GACRngE,GAAS,GAEPA,GACFtY,EAAGE,KAAKs4E,mFCXZ,IAAMG,EAAS,GAMf,SAAAhqD,EAA8BF,GAK5B,IAJA,IAiBIka,EAjBAyX,EAAM,EACN1gD,EAAM+uB,EAAK9uB,OAGRygD,EAAM,EAAI1gD,GACK,IAApB+uB,EAAK1uB,WAAWqgD,IAChB3xB,EAAK1uB,WAAWqgD,EAAM,IAAMu4B,GAE5Bv4B,GAAO,EAUT,KAPIA,EAAM,GAAK1gD,EAAM+uB,EAAK9uB,UACxB8uB,EAAOA,EAAKxuB,UAAUmgD,EAAK1gD,GAC3BA,GAAO0gD,EACPA,EAAM,GAIDA,EAAM,EAAI1gD,GAAK,CAIpB,GAHAipC,GAAQ,EAINla,EAAK1uB,WAAWqgD,IAAQu4B,GACA,IAAxBlqD,EAAK1uB,WAAWqgD,EAAM,GACtB,CAGA,IADAzX,EAAQyX,EAAM,GAAK1gD,IAEjB0gD,EAAM,EAAI1gD,GACV+uB,EAAK1uB,WAAWqgD,EAAM,IAAMu4B,EAC5B,CACAlqD,EAAOka,EACHla,EAAKxuB,UAAU,EAAGmgD,GAClB3xB,EAAKxuB,UAAU,EAAGmgD,GAAO3xB,EAAKxuB,UAAUmgD,EAAM,GAClD1gD,GAAO,EACP,SAKF,IADAipC,EAAQyX,EAAM,GAAK1gD,IACkB,IAAxB+uB,EAAK1uB,WAAWqgD,EAAM,IACjCA,EAAM,EAAI1gD,GACc,IAAxB+uB,EAAK1uB,WAAWqgD,EAAM,IACtB3xB,EAAK1uB,WAAWqgD,EAAM,IAAMu4B,EAC5B,CAGA,IADA,IAAIC,EAAOx4B,IACFw4B,GAAQ,GACf,GAAInqD,EAAK1uB,WAAW64E,IAASD,EAAW,CAClCv4B,EAAMw4B,GAAQ,GACS,IAAzBnqD,EAAK1uB,WAAW64E,EAAO,IACE,IAAzBnqD,EAAK1uB,WAAW64E,EAAO,KAEvBnqD,EAAOka,EACHla,EAAKxuB,UAAU,EAAG24E,GAClBnqD,EAAKxuB,UAAU,EAAG24E,GAAQnqD,EAAKxuB,UAAUmgD,EAAM,GACnD1gD,GAAO0gD,EAAM,EAAIw4B,EACjBx4B,EAAMw4B,EAAO,GAEf,MAKJ,GAAIA,EAAO,GAAKx4B,EAAM,IACT,GAAPA,GACgB,IAAlB3xB,EAAK1uB,WAAW,IACE,IAAlB0uB,EAAK1uB,WAAW,IAChB,CAEAL,GADA+uB,EAAOA,EAAKxuB,UAAUmgD,EAAM,IACjBzgD,OACX,WAKRygD,IAEF,OAAO1gD,EAAM,EAAI+uB,EAAO,IAc1B,SAAAoqD,EAAwBz5E,GAEtB,IADA,IAAIghD,EAAMhhD,EAAeO,SAChBygD,EAAM,GACb,GAAIhhD,EAAeW,WAAWqgD,IAAQu4B,EACpC,OAAOv5E,EAAea,UAAU,EAAGmgD,GAGvC,MAAO,IArGTtmD,EAAA60B,gBAoFA70B,EAAA+0B,YAAA,SAA4BzvB,EAAwB05E,GAClD,OAAI15E,EAAewvB,WAAW,QACrBxvB,EAEFuvB,EACLkqD,EAAQC,GAAU5zD,OAAOi/B,aAAaw0B,GAAav5E,IAKvDtF,EAAA++E,yFCvGA,SAAkBE,GAEhBA,IAAA,eACAA,IAAA,wBACAA,IAAA,oCACAA,IAAA,oCACAA,IAAA,8CACAA,IAAA,yBAEAA,IAAA,kBACAA,IAAA,yCACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,wBACAA,IAAA,wBACAA,IAAA,wCACAA,IAAA,sCACAA,IAAA,oCACAA,IAAA,gCACAA,IAAA,0CACAA,IAAA,4BACAA,IAAA,4BACAA,IAAA,sCACAA,IAAA,8CACAA,IAAA,2CACAA,IAAA,4CACAA,IAAA,oBAEAA,IAAA,UAEAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YAEAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WAEAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UAEAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,YACAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,eACAA,IAAA,kBACAA,IAAA,6BACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,oBACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,2BACAA,IAAA,8BACAA,IAAA,0BACAA,IAAA,sBACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,0BACAA,IAAA,8BACAA,IAAA,kBACAA,IAAA,mBAEAA,IAAA,yBACAA,IAAA,wBACAA,IAAA,qCACAA,IAAA,aACAA,IAAA,8BAnIF,CAAkBj/E,EAAAi/E,WAAAj/E,EAAAi/E,cAuIlBj/E,EAAAgG,YAAA,SAA4BhF,GAC1B,OAAQA,GACN,QACA,QACA,UACA,UACE,OAAO,EAET,QACE,OAAO,IAMbhB,EAAA6oD,aAAA,SAA6B7nD,GAC3B,OAAQA,GACN,QACA,OACA,QACA,QACA,SACA,SACA,UACA,UACA,UACA,WACA,WACE,OAAO,EAET,QACE,OAAOA,GAAC,MAAuBA,GAAC,OAMtChB,EAAAmnD,eAAA,SAA+BnmD,GAC7B,OAAOA,GAAC,IAAmBA,GAAC,IAI9BhB,EAAA+qD,aAAA,SAA6B/pD,GAC3B,OAAOA,GAAC,IAAmBA,GAAC,IAI9BhB,EAAAsoD,kBAAA,SAAkCtnD,GAChC,OAAOA,GAAC,IAAkBA,GAAC,IACpBA,GAAC,IAAkBA,GAAC,KACnB,IAADA,GACC,IAADA,GACAA,EAAI,QAiLqByD,EAjLYzD,GAkL9B,GAAKyD,EAAO,QACnBy6E,EAAmBz6E,EAAa06E,GAFzC,IAAkC16E,GA7KlCzE,EAAAuoD,mBAAA,SAAmCvnD,GACjC,OAAOA,GAAC,IAAkBA,GAAC,KAI7BhB,EAAAyoD,iBAAA,SAAiCznD,GAC/B,OAAOA,GAAC,IAAkBA,GAAC,IACpBA,GAAC,IAAkBA,GAAC,KACpBA,GAAC,IAAmBA,GAAC,IACpB,IAADA,GACC,IAADA,GACAA,EAAI,QAuKoByD,EAvKYzD,GAwK7B,GAAKyD,EAAO,QACnBy6E,EAAmBz6E,EAAa26E,GAFzC,IAAiC36E,GAnKjC,IAAM06E,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__23__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 29);\n","/**\r\n * Common constants.\r\n * @module common\r\n *//***/\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n\r\n  // Extended modifiers usually derived from basic modifiers\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 13,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 14,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 15,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 16,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 17,\r\n  /** Is an arrow function. */\r\n  ARROW = 1 << 18,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 19,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 20,\r\n\r\n  // Compilation states\r\n\r\n  /** Is a builtin. */\r\n  BUILTIN = 1 << 21,\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 22,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 23,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 24,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 25,\r\n  /** Is a virtual method. */\r\n  VIRTUAL = 1 << 26,\r\n  /** Is the main function. */\r\n  MAIN = 1 << 27\r\n}\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Delimiter used between a function and its inner elements. */\r\nexport const INNER_DELIMITER = \"~\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"~lib\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n/** Prefix used to indicate a filespace element. */\r\nexport const FILESPACE_PREFIX = \"file:\";\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./charcode\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(message.range, useColors));\r\n    }\r\n\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) sb.push(\"~\");\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport {\r\n  Target\r\n} from \"./compiler\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type Index = u32;\r\n\r\nexport enum NativeType {\r\n  None = _BinaryenTypeNone(),\r\n  I32 = _BinaryenTypeInt32(),\r\n  I64 = _BinaryenTypeInt64(),\r\n  F32 = _BinaryenTypeFloat32(),\r\n  F64 =  _BinaryenTypeFloat64(),\r\n  Unreachable = _BinaryenTypeUnreachable(),\r\n  Auto = _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallImport = _BinaryenCallImportId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  GetLocal = _BinaryenGetLocalId(),\r\n  SetLocal = _BinaryenSetLocalId(),\r\n  GetGlobal = _BinaryenGetGlobalId(),\r\n  SetGlobal = _BinaryenSetGlobalId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicWake = _BinaryenAtomicWakeId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\r\n\r\n  // see: https://github.com/WebAssembly/sign-extension-ops\r\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\r\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\r\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\r\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\r\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64()\r\n}\r\n\r\nexport enum HostOp {\r\n  PageSize = _BinaryenPageSize(),\r\n  CurrentMemory = _BinaryenCurrentMemory(),\r\n  GrowMemory = _BinaryenGrowMemory(),\r\n  HasFeature = _BinaryenHasFeature(),\r\n\r\n  // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  // MoveMemory\r\n  // SetMemory\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n\r\n  private cachedByValue: usize;\r\n\r\n  /** Maximum number of pages when targeting WASM32. */\r\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\r\n\r\n  /** Maximum number of pages when targeting WASM64. */\r\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.cachedByValue = allocate_memory(16);\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.cachedByValue = allocate_memory(3 * 8); // LLVM C-ABI, max used is 3 * usize\r\n      return module;\r\n    } finally {\r\n      free_memory(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunctionType(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunctionType(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  // constants\r\n\r\n  createI32(value: i32): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF32(value: f32): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF64(value: f64): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  createUnary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  createBinary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  createHost(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createGetLocal(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenGetLocal(this.ref, index, type);\r\n  }\r\n\r\n  createTeeLocal(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenTeeLocal(this.ref, index, value);\r\n  }\r\n\r\n  createGetGlobal(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenGetGlobal(this.ref, cStr, type);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createLoad(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\r\n  }\r\n\r\n  createStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\r\n  }\r\n\r\n  createAtomicLoad(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  createAtomicStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicRMW(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicCmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  createAtomicWait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  createAtomicWake(\r\n    ptr: ExpressionRef,\r\n    wakeCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  createSetLocal(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSetLocal(this.ref, index, value);\r\n  }\r\n\r\n  createSetGlobal(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenSetGlobal(this.ref, cStr, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBlock(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    var cArr = allocPtrArray(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBreak(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenBreak(this.ref, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createDrop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  createLoop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenLoop(this.ref, cStr, body);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createIf(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createNop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  createReturn(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  createSelect(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createSwitch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = allocString(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = allocString(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n      for (let i = numNames - 1; i >= 0; --i) free_memory(strs[i]);\r\n    }\r\n  }\r\n\r\n  createCall(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallImport(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallIndirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cArr = allocPtrArray(operands);\r\n    var cStr = allocString(typeName);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  createUnreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunction(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  private cachedTemporaryName: usize = 0;\r\n  private hasTemporaryFunction: bool = false;\r\n\r\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\r\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\r\n    var tempName = this.cachedTemporaryName;\r\n    if (!tempName) this.cachedTemporaryName = tempName = allocString(\"\"); // works because strings are interned\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\r\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  removeTemporaryFunction(): void {\r\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\r\n    var tempName = assert(this.cachedTemporaryName);\r\n    _BinaryenRemoveFunction(this.ref, tempName);\r\n    _BinaryenRemoveFunctionType(this.ref, tempName);\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = allocString(externalName);\r\n    try {\r\n      _BinaryenRemoveExport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeImport(internalName: string): void {\r\n    var cStr = allocString(internalName);\r\n    try {\r\n      _BinaryenRemoveImport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null\r\n  ): void {\r\n    var cStr = allocString(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      offs[i] = target == Target.WASM64\r\n        ? this.createI64(i64_low(offset), i64_high(offset))\r\n        : this.createI32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocI32Array(offs);\r\n    var cArr3 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\r\n    } finally {\r\n      free_memory(cArr3);\r\n      free_memory(cArr2);\r\n      free_memory(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) free_memory(segs[i]);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(funcs: FunctionRef[]): void {\r\n    var cArr = allocPtrArray(funcs);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      free_memory(cArr);\r\n      for (let i = numNames; i >= 0; --i) {\r\n        free_memory(names[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  private cachedPrecomputeName: usize = 0;\r\n  private cachedPrecomputeNames: usize = 0;\r\n\r\n  precomputeFunction(func: FunctionRef): void {\r\n    var names = this.cachedPrecomputeNames;\r\n    if (!names) {\r\n      let name = allocString(\"precompute\");\r\n      this.cachedPrecomputeName = name;\r\n      this.cachedPrecomputeNames = names = allocI32Array([ name ]);\r\n    }\r\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.cachedByValue;\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) free_memory(cStr);\r\n      if (binaryPtr) free_memory(binaryPtr);\r\n      if (sourceMapPtr) free_memory(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  dispose(): void {\r\n    assert(this.ref);\r\n    free_memory(this.cachedByValue);\r\n    free_memory(this.cachedTemporaryName);\r\n    free_memory(this.cachedPrecomputeName);\r\n    free_memory(this.cachedPrecomputeNames);\r\n    _BinaryenModuleDispose(this.ref);\r\n    this.ref = 0;\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(\r\n    expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n        switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.createI32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.createI64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.createF32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.createF64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        return _BinaryenGetLocal(this.ref,\r\n          _BinaryenGetLocalGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GetGlobal: {\r\n        let globalName = _BinaryenGetGlobalGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return (\r\n          _BinaryenLoadIsAtomic(expr)\r\n            ? _BinaryenAtomicLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n            : _BinaryenLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenLoadGetAlign(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n        );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\n// expressions\r\n\r\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\r\n  return _BinaryenExpressionGetId(expr);\r\n}\r\n\r\nexport function getExpressionType(expr: ExpressionRef): NativeType {\r\n  return _BinaryenExpressionGetType(expr);\r\n}\r\n\r\nexport function getConstValueI32(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI32(expr);\r\n}\r\n\r\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64Low(expr);\r\n}\r\n\r\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64High(expr);\r\n}\r\n\r\nexport function getConstValueF32(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF32(expr);\r\n}\r\n\r\nexport function getConstValueF64(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF64(expr);\r\n}\r\n\r\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenGetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenSetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSetLocalGetValue(expr);\r\n}\r\n\r\nexport function isTeeLocal(expr: ExpressionRef): bool {\r\n  return _BinaryenSetLocalIsTee(expr);\r\n}\r\n\r\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\r\n  return _BinaryenBinaryGetOp(expr);\r\n}\r\n\r\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetLeft(expr);\r\n}\r\n\r\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetRight(expr);\r\n}\r\n\r\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\r\n  return _BinaryenUnaryGetOp(expr);\r\n}\r\n\r\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenUnaryGetValue(expr);\r\n}\r\n\r\nexport function getLoadBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetBytes(expr);\r\n}\r\n\r\nexport function getLoadOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetOffset(expr);\r\n}\r\n\r\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoadGetPtr(expr);\r\n}\r\n\r\nexport function isLoadSigned(expr: ExpressionRef): bool {\r\n  return _BinaryenLoadIsSigned(expr);\r\n}\r\n\r\nexport function getStoreBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetBytes(expr);\r\n}\r\n\r\nexport function getStoreOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetOffset(expr);\r\n}\r\n\r\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetPtr(expr);\r\n}\r\n\r\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetValue(expr);\r\n}\r\n\r\nexport function getBlockName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBlockGetName(expr));\r\n}\r\n\r\nexport function getBlockChildCount(expr: ExpressionRef): Index {\r\n  return _BinaryenBlockGetNumChildren(expr);\r\n}\r\n\r\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenBlockGetChild(expr, index);\r\n}\r\n\r\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetCondition(expr);\r\n}\r\n\r\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfTrue(expr);\r\n}\r\n\r\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfFalse(expr);\r\n}\r\n\r\nexport function getLoopName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenLoopGetName(expr));\r\n}\r\n\r\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoopGetBody(expr);\r\n}\r\n\r\nexport function getBreakName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBreakGetName(expr));\r\n}\r\n\r\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBreakGetCondition(expr);\r\n}\r\n\r\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfTrue(expr);\r\n}\r\n\r\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfFalse(expr);\r\n}\r\n\r\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetCondition(expr);\r\n}\r\n\r\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenDropGetValue(expr);\r\n}\r\n\r\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenReturnGetValue(expr);\r\n}\r\n\r\nexport function getCallTarget(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenCallGetTarget(expr));\r\n}\r\n\r\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenHostGetOp(expr);\r\n}\r\n\r\nexport function getHostOperandCount(expr: ExpressionRef): Index {\r\n  return _BinaryenHostGetNumOperands(expr);\r\n}\r\n\r\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenHostGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenHostGetNameOperand(expr));\r\n}\r\n\r\n// functions\r\n\r\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\r\n  return _BinaryenFunctionGetBody(func);\r\n}\r\n\r\nexport function getFunctionName(func: FunctionRef): string | null {\r\n  return readString(_BinaryenFunctionGetName(func));\r\n}\r\n\r\nexport function getFunctionParamCount(func: FunctionRef): Index {\r\n  return _BinaryenFunctionGetNumParams(func);\r\n}\r\n\r\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\r\n  return _BinaryenFunctionGetParam(func, index);\r\n}\r\n\r\nexport function getFunctionResultType(func: FunctionRef): NativeType {\r\n  return _BinaryenFunctionGetResult(func);\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate();\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\r\n  }\r\n}\r\n\r\n// export function hasSideEffects(expr: ExpressionRef): bool {\r\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\r\n//     case ExpressionId.GetLocal:\r\n//     case ExpressionId.GetGlobal:\r\n//     case ExpressionId.Const:\r\n//     case ExpressionId.Nop:\r\n//     case ExpressionId.Unreachable: {\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.Block: {\r\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\r\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\r\n//       }\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.If: {\r\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\r\n//     }\r\n//     case ExpressionId.Unary: {\r\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Binary: {\r\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\r\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\r\n//     }\r\n//     case ExpressionId.Drop: {\r\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Select: {\r\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\r\n//     }\r\n//   }\r\n//   return true;\r\n// }\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = allocate_memory(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = allocate_memory(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocPtrArray(ptrs: usize[] | null): usize {\r\n  return allocI32Array(ptrs); // TODO: WASM64 one day\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = allocate_memory(stringLengthUTF8(str) + 1);\r\n  // the following is based on Emscripten's stringToUTF8Array\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    arr.push(cp);\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath,\r\n  CharCode\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  TYPE,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n  SIGNATURE,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  INSTANCEOF,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Checks if a node represents a constant value. */\r\nexport function nodeIsConstantValue(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.LITERAL:\r\n    case NodeKind.NULL:\r\n    case NodeKind.TRUE:\r\n    case NodeKind.FALSE: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable. */\r\nexport function nodeIsCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.CALL:\r\n    case NodeKind.ELEMENTACCESS:\r\n    case NodeKind.PROPERTYACCESS: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable with generic arguments. */\r\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.PROPERTYACCESS: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n  /** Parent node. */\r\n  parent: Node | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n\r\n  // types\r\n\r\n  static createType(\r\n    name: IdentifierExpression,\r\n    typeArguments: CommonTypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): TypeNode {\r\n    var type = new TypeNode();\r\n    type.range = range;\r\n    type.name = name; name.parent = type;\r\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): TypeNode {\r\n    return Node.createType(\r\n      Node.createIdentifierExpression(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createSignature(\r\n    parameters: ParameterNode[],\r\n    returnType: CommonTypeNode,\r\n    explicitThisType: TypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): SignatureNode {\r\n    var sig = new SignatureNode();\r\n    sig.range = range;\r\n    sig.parameters = parameters; setParent(parameters, sig);\r\n    sig.returnType = returnType; returnType.parent = sig;\r\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\r\n    sig.isNullable = isNullable;\r\n    return sig;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    name: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.arguments = args; if (args) setParent(args, stmt);\r\n    stmt.decoratorKind = decoratorNameToKind(name);\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: CommonTypeNode,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.toType = toType; toType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left; left.parent = expr;\r\n    expr.right = right; right.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions; setParent(expressions, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.elementExpression = element; element.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.flags = declaration.flags & CommonFlags.ARROW;\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createInstanceOfExpression(\r\n    expression: Expression,\r\n    isType: CommonTypeNode,\r\n    range: Range\r\n  ): InstanceOfExpression {\r\n    var expr = new InstanceOfExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.isType = isType; isType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.property = property; property.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition; condition.parent = expr;\r\n    expr.ifThen = ifThen; ifThen.parent = expr;\r\n    expr.ifElse = ifElse; ifElse.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    implementsTypes: TypeNode[] | null, // can't be functions\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier; identifier.parent = stmt;\r\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.values = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[] | null,\r\n    path: StringLiteralExpression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.members = members; if (members) setParent(members, stmt);\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.externalName = externalName; externalName.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    if (!externalName) {\r\n      externalName = name;\r\n    } else {\r\n      externalName.parent = elem;\r\n    }\r\n    elem.externalName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression; expression.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\r\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    stmt.normalizedPath = resolvePath(\r\n      normalizePath(path.value),\r\n      range.source.normalizedPath\r\n    );\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    externalName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.externalName = externalName; externalName.parent = elem;\r\n    if (!name) {\r\n      name = externalName;\r\n    } else {\r\n      name.parent = elem;\r\n    }\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.type = type; if (type) type.parent = stmt;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.condition = condition; if (condition) condition.parent = stmt;\r\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.cases = cases; setParent(cases, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label; if (label) label.parent = elem;\r\n    elem.statements = statements; setParent(statements, elem);\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    stmt.catchVariable = catchVariable;\r\n    if (catchVariable) catchVariable.parent = stmt;\r\n    stmt.catchStatements = catchStatements;\r\n    if (catchStatements) setParent(catchStatements, stmt);\r\n    stmt.finallyStatements = finallyStatements;\r\n    if (finallyStatements) setParent(finallyStatements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: CommonTypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.type = alias; alias.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.declarations = declarations; setParent(declarations, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class CommonTypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type annotation. */\r\nexport class TypeNode extends CommonTypeNode {\r\n  kind = NodeKind.TYPE;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Type argument references. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: CommonTypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n}\r\n\r\n/** Represents a function signature. */\r\nexport class SignatureNode extends CommonTypeNode {\r\n  kind = NodeKind.SIGNATURE;\r\n\r\n  /** Accepted parameters. */\r\n  parameters: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: CommonTypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: TypeNode | null; // can't be a function\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  OPERATOR_BINARY,\r\n  OPERATOR_PREFIX,\r\n  OPERATOR_POSTFIX,\r\n  UNMANAGED,\r\n  SEALED,\r\n  INLINE\r\n}\r\n\r\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\r\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\r\n  // @global, @inline, @operator, @sealed, @unmanaged\r\n  if (name.kind == NodeKind.IDENTIFIER) {\r\n    let nameStr = (<IdentifierExpression>name).text;\r\n    assert(nameStr.length);\r\n    switch (nameStr.charCodeAt(0)) {\r\n      case CharCode.g: {\r\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\r\n        break;\r\n      }\r\n      case CharCode.i: {\r\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\r\n        break;\r\n      }\r\n      case CharCode.o: {\r\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\r\n        break;\r\n      }\r\n      case CharCode.s: {\r\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\r\n        break;\r\n      }\r\n      case CharCode.u: {\r\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\r\n        break;\r\n      }\r\n    }\r\n  } else if (\r\n    name.kind == NodeKind.PROPERTYACCESS &&\r\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\r\n  ) {\r\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\r\n    assert(nameStr.length);\r\n    let propStr = (<PropertyAccessExpression>name).property.text;\r\n    assert(propStr.length);\r\n    // @operator.binary, @operator.prefix, @operator.postfix\r\n    if (nameStr == \"operator\") {\r\n      switch (propStr.charCodeAt(0)) {\r\n        case CharCode.b: {\r\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\r\n          break;\r\n        }\r\n        case CharCode.p: {\r\n          switch (propStr) {\r\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\r\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return DecoratorKind.CUSTOM;\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: CommonTypeNode;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an `instanceof` expression. */\r\nexport class InstanceOfExpression extends Expression {\r\n  kind = NodeKind.INSTANCEOF;\r\n\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Type to test for. */\r\n  isType: CommonTypeNode;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\nexport function isLastStatement(statement: Statement): bool {\r\n  var parent = assert(statement.parent);\r\n  if (parent.kind == NodeKind.BLOCK) {\r\n    let statements = (<BlockStatement>parent).statements;\r\n    if (statements[statements.length - 1] === statement) {\r\n      switch (assert(parent.parent).kind) {\r\n        case NodeKind.FUNCTIONDECLARATION:\r\n        case NodeKind.METHODDECLARATION: return true;\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n  /** Re-exported sources. */\r\n  exportPaths: Set<string> | null = null;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    this.internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n\r\n  protected cachedProgramLevelInternalName: string | null = null;\r\n  protected cachedFileLevelInternalName: string | null = null;\r\n\r\n  /** Gets the mangled program-level internal name of this declaration. */\r\n  get programLevelInternalName(): string {\r\n    if (!this.cachedProgramLevelInternalName) {\r\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\r\n    }\r\n    return this.cachedProgramLevelInternalName;\r\n  }\r\n\r\n  /** Gets the mangled file-level internal name of this declaration. */\r\n  get fileLevelInternalName(): string {\r\n    if (!this.cachedFileLevelInternalName) {\r\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\r\n    }\r\n    return this.cachedFileLevelInternalName;\r\n  }\r\n\r\n  /** Tests if this is a top-level declaration within its source file. */\r\n  get isTopLevel(): bool {\r\n    var parent = this.parent;\r\n    if (!parent) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\r\n      return false;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE;\r\n  }\r\n\r\n  /** Tests if this declaration is a top-level export within its source file. */\r\n  get isTopLevelExport(): bool {\r\n    var parent = this.parent;\r\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\r\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\r\n    }\r\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\r\n  }\r\n\r\n  /** Tests if this declaration needs an explicit export. */\r\n  needsExplicitExport(member: ExportMember): bool {\r\n    // This is necessary because module-level exports are automatically created\r\n    // for top level declarations of all sorts. This function essentially tests\r\n    // that there isn't a otherwise duplicate top-level export already.\r\n    return (\r\n      member.name.text != member.externalName.text || // if aliased\r\n      this.range.source != member.range.source ||     // if a re-export\r\n      !this.isTopLevelExport                          // if not top-level\r\n    );\r\n  }\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: CommonTypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[];\r\n  /** Base class type being extended, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Interface types being implemented, if any. */\r\n  implementsTypes: TypeNode[] | null; // can't be functions\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Identifier being exported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier seen when imported again. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members if a set of named exports, or `null` if a filespace export. */\r\n  members: ExportMember[] | null;\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index within the constructor, if applicable. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: SignatureNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Tests if a specific decorator is present within the specified decorators. */\r\nexport function hasDecorator(name: string, decorators: DecoratorNode[] | null): bool {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let expression = decorators[i].name;\r\n      if (expression.kind == NodeKind.IDENTIFIER && (<IdentifierExpression>expression).text == name) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Mangles a declaration's name to an internal name. */\r\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\r\n  var name = declaration.name.text;\r\n  var parent = declaration.parent;\r\n  if (!parent) return name;\r\n  if (\r\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\r\n    parent.kind == NodeKind.VARIABLE\r\n  ) { // skip over\r\n    if (!(parent = parent.parent)) return name;\r\n  }\r\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\r\n      declaration.is(CommonFlags.STATIC)\r\n        ? STATIC_DELIMITER\r\n        : INSTANCE_DELIMITER\r\n    ) + name;\r\n  }\r\n  if (\r\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\r\n    parent.kind == NodeKind.ENUMDECLARATION\r\n  ) {\r\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\r\n           STATIC_DELIMITER + name;\r\n  }\r\n  return asGlobal\r\n    ? name\r\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n// Helpers\r\n\r\n/** Sets the parent node on an array of nodes. */\r\nfunction setParent(nodes: Node[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    nodes[i].parent = parent;\r\n  }\r\n}\r\n\r\n/** Sets the parent node on an array of nullable nodes. */\r\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    let node = nodes[i];\r\n    if (node) node.parent = parent;\r\n  }\r\n}\r\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  LIBRARY_PREFIX,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  FILESPACE_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Options\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n  typesToString\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  Range,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  TypeParameterNode,\r\n  ParameterKind,\r\n  SignatureNode,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  ElementAccessExpression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  StringLiteralExpression,\r\n  CallExpression,\r\n\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  decoratorNameToKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  BinaryOp,\r\n  UnaryOp,\r\n\r\n  getExpressionId,\r\n  getGetLocalIndex,\r\n  isTeeLocal,\r\n  getSetLocalValue,\r\n  getBinaryOp,\r\n  getConstValueI32,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getUnaryOp,\r\n  getExpressionType,\r\n  getLoadBytes,\r\n  isLoadSigned,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getCallTarget,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getConstValueI64Low\r\n} from \"./module\";\r\n\r\nimport {\r\n  CharCode\r\n} from \"./util\";\r\n\r\n/** Represents a yet unresolved import. */\r\nclass QueuedImport {\r\n  localName: string;\r\n  externalName: string;\r\n  externalNameAlt: string;\r\n  declaration: ImportDeclaration | null; // not set if a filespace\r\n}\r\n\r\n/** Represents a yet unresolved export. */\r\nclass QueuedExport {\r\n  externalName: string;\r\n  isReExport: bool;\r\n  member: ExportMember;\r\n}\r\n\r\n/** Represents a type alias. */\r\nclass TypeAlias {\r\n  typeParameters: TypeParameterNode[] | null;\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents the kind of an operator overload. */\r\nexport enum OperatorKind {\r\n  INVALID,\r\n\r\n  // indexed access\r\n  INDEXED_GET,            // a[]\r\n  INDEXED_SET,            // a[]=b\r\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\r\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\r\n\r\n  // binary\r\n  ADD,                    // a + b\r\n  SUB,                    // a - b\r\n  MUL,                    // a * b\r\n  DIV,                    // a / b\r\n  REM,                    // a % b\r\n  POW,                    // a ** b\r\n  BITWISE_AND,            // a & b\r\n  BITWISE_OR,             // a | b\r\n  BITWISE_XOR,            // a ^ b\r\n  BITWISE_SHL,            // a << b\r\n  BITWISE_SHR,            // a >> b\r\n  BITWISE_SHR_U,          // a >>> b\r\n  EQ,                     // a == b\r\n  NE,                     // a != b\r\n  GT,                     // a > b\r\n  GE,                     // a >= b\r\n  LT,                     // a < b\r\n  LE,                     // a <= b\r\n\r\n  // unary prefix\r\n  PLUS,                   // +a\r\n  MINUS,                  // -a\r\n  NOT,                    // !a\r\n  BITWISE_NOT,            // ~a\r\n  PREFIX_INC,             // ++a\r\n  PREFIX_DEC,             // --a\r\n\r\n  // unary postfix\r\n  POSTFIX_INC,            // a++\r\n  POSTFIX_DEC             // a--\r\n\r\n  // not overridable:\r\n  // IDENTITY             // a === b\r\n  // LOGICAL_AND          // a && b\r\n  // LOGICAL_OR           // a || b\r\n}\r\n\r\n/** Returns the operator kind represented by the specified decorator and string argument. */\r\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\r\n  assert(arg.length);\r\n  switch (decoratorKind) {\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.OPENBRACKET: {\r\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\r\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\r\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.ADD;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.SUB;\r\n          break;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          if (arg == \"*\") return OperatorKind.MUL;\r\n          if (arg == \"**\") return OperatorKind.POW;\r\n          break;\r\n        }\r\n        case CharCode.SLASH: {\r\n          if (arg == \"/\") return OperatorKind.DIV;\r\n          break;\r\n        }\r\n        case CharCode.PERCENT: {\r\n          if (arg == \"%\") return OperatorKind.REM;\r\n          break;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\r\n          break;\r\n        }\r\n        case CharCode.BAR: {\r\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\r\n          break;\r\n        }\r\n        case CharCode.CARET: {\r\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\r\n          break;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          if (arg == \"==\") return OperatorKind.EQ;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!=\") return OperatorKind.NE;\r\n          break;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          if (arg == \">\") return OperatorKind.GT;\r\n          if (arg == \">=\") return OperatorKind.GE;\r\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\r\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\r\n          break;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          if (arg == \"<\") return OperatorKind.LT;\r\n          if (arg == \"<=\") return OperatorKind.LE;\r\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_PREFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.PLUS;\r\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.MINUS;\r\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!\") return OperatorKind.NOT;\r\n          break;\r\n        }\r\n        case CharCode.TILDE: {\r\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_POSTFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return OperatorKind.INVALID;\r\n}\r\n\r\nconst noTypesYet = new Map<string,Type>();\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Array of source files. */\r\n  sources: Source[];\r\n  /** Diagnostic offset used where repeatedly obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n\r\n  /** Elements by internal name. */\r\n  elementsLookup: Map<string,Element> = new Map();\r\n  /** Class and function instances by internal name. */\r\n  instancesLookup: Map<string,Element> = new Map();\r\n  /** Types by internal name. */\r\n  typesLookup: Map<string,Type> = noTypesYet;\r\n  /** Declared type aliases. */\r\n  typeAliases: Map<string,TypeAlias> = new Map();\r\n  /** File-level exports by exported name. */\r\n  fileLevelExports: Map<string,Element> = new Map();\r\n  /** Module-level exports by exported name. */\r\n  moduleLevelExports: Map<string,Element> = new Map();\r\n\r\n  /** Array prototype reference. */\r\n  arrayPrototype: ClassPrototype | null = null;\r\n  /** ArrayBufferView prototype reference. */\r\n  arrayBufferViewPrototype: InterfacePrototype | null = null;\r\n  /** String instance reference. */\r\n  stringInstance: Class | null = null;\r\n  /** Start function reference. */\r\n  startFunction: FunctionPrototype;\r\n  /** Main function reference. */\r\n  mainFunction: FunctionPrototype | null = null;\r\n\r\n  /** Target expression of the previously resolved property or element access. */\r\n  resolvedThisExpression: Expression | null = null;\r\n  /** Element expression of the previously resolved element access. */\r\n  resolvedElementExpression : Expression | null = null;\r\n  /** Currently processing filespace. */\r\n  currentFilespace: Filespace;\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.sources = [];\r\n  }\r\n\r\n  /** Gets a source by its exact path. */\r\n  getSource(normalizedPath: string): Source | null {\r\n    var sources = this.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == normalizedPath) return source;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the source for the specified possibly ambiguous path. */\r\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\r\n    var tmp: string;\r\n    return (\r\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\r\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\r\n      this.getSource((tmp = LIBRARY_PREFIX + normalizedPathWithoutExtension) + \".ts\") ||\r\n      this.getSource( tmp                                                    + \"/index.ts\")\r\n    );\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n    this.typesLookup = new Map([\r\n      [\"i8\", Type.i8],\r\n      [\"i16\", Type.i16],\r\n      [\"i32\", Type.i32],\r\n      [\"i64\", Type.i64],\r\n      [\"isize\", options.isizeType],\r\n      [\"u8\", Type.u8],\r\n      [\"u16\", Type.u16],\r\n      [\"u32\", Type.u32],\r\n      [\"u64\", Type.u64],\r\n      [\"usize\", options.usizeType],\r\n      [\"bool\", Type.bool],\r\n      [\"f32\", Type.f32],\r\n      [\"f64\", Type.f64],\r\n      [\"void\", Type.void],\r\n      [\"number\", Type.f64],\r\n      [\"boolean\", Type.bool]\r\n    ]);\r\n\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedExports = new Map<string,QueuedExport>();\r\n    var queuedExtends = new Array<ClassPrototype>();\r\n    var queuedImplements = new Array<ClassPrototype>();\r\n\r\n    // build initial lookup maps of internal names to declarations\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n\r\n      // create one filespace per source\r\n      let filespace = new Filespace(this, source);\r\n      this.elementsLookup.set(filespace.internalName, filespace);\r\n      this.currentFilespace = filespace;\r\n\r\n      // process this source's statements\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeAlias(<TypeDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0; i < queuedImports.length;) {\r\n      let queuedImport = queuedImports[i];\r\n      let declaration = queuedImport.declaration;\r\n      if (declaration) { // named\r\n        let element = this.tryResolveImport(queuedImport.externalName, queuedExports);\r\n        if (element) {\r\n          this.elementsLookup.set(queuedImport.localName, element);\r\n          queuedImports.splice(i, 1);\r\n        } else {\r\n          if (element = this.tryResolveImport(queuedImport.externalNameAlt, queuedExports)) {\r\n            this.elementsLookup.set(queuedImport.localName, element);\r\n            queuedImports.splice(i, 1);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              declaration.range,\r\n              (<ImportStatement>declaration.parent).path.value,\r\n              declaration.externalName.text\r\n            );\r\n            ++i;\r\n          }\r\n        }\r\n      } else { // filespace\r\n        let element = this.elementsLookup.get(queuedImport.externalName);\r\n        if (element) {\r\n          this.elementsLookup.set(queuedImport.localName, element);\r\n          queuedImports.splice(i, 1);\r\n        } else {\r\n          if (element = this.elementsLookup.get(queuedImport.externalNameAlt)) {\r\n            this.elementsLookup.set(queuedImport.localName, element);\r\n            queuedImports.splice(i, 1);\r\n          } else {\r\n            assert(false); // already reported by the parser not finding the file\r\n            ++i;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [exportName, queuedExport] of queuedExports) {\r\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\r\n      let element: Element | null;\r\n      do {\r\n        if (currentExport.isReExport) {\r\n          if (element = this.fileLevelExports.get(currentExport.externalName)) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n            break;\r\n          }\r\n          currentExport = queuedExports.get(currentExport.externalName);\r\n          if (!currentExport) {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.member.externalName.range,\r\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\r\n              queuedExport.member.externalName.text\r\n            );\r\n          }\r\n        } else {\r\n          if (\r\n            // normal export\r\n            (element = this.elementsLookup.get(currentExport.externalName)) ||\r\n            // library re-export\r\n            (element = this.elementsLookup.get(currentExport.member.name.text))\r\n          ) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Cannot_find_name_0,\r\n              queuedExport.member.range, queuedExport.member.name.text\r\n            );\r\n          }\r\n          break;\r\n        }\r\n      } while (currentExport);\r\n    }\r\n\r\n    // resolve base prototypes of derived classes\r\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\r\n      let derivedPrototype = queuedExtends[i];\r\n      let derivedDeclaration = derivedPrototype.declaration;\r\n      let derivedType = assert(derivedDeclaration.extendsType);\r\n      let baseElement = this.resolveIdentifier(derivedType.name, null); // reports\r\n      if (!baseElement) continue;\r\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let basePrototype = <ClassPrototype>baseElement;\r\n        derivedPrototype.basePrototype = basePrototype;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          derivedType.range\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    var globalAliases = options.globalAliases;\r\n    if (globalAliases) {\r\n      for (let [alias, name] of globalAliases) {\r\n        if (!name.length) continue; // explicitly disabled\r\n        let element = this.elementsLookup.get(name);\r\n        if (element) this.elementsLookup.set(alias, element);\r\n        else throw new Error(\"element not found: \" + name);\r\n      }\r\n    }\r\n\r\n    // register 'Array'\r\n    var arrayPrototype = this.elementsLookup.get(\"Array\");\r\n    if (arrayPrototype) {\r\n      assert(arrayPrototype.kind == ElementKind.CLASS_PROTOTYPE);\r\n      this.arrayPrototype = <ClassPrototype>arrayPrototype;\r\n    }\r\n\r\n    // register 'ArrayBufferView'\r\n    var arrayBufferViewPrototype = this.elementsLookup.get(\"ArrayBufferView\");\r\n    if (arrayBufferViewPrototype) {\r\n      assert(arrayBufferViewPrototype.kind == ElementKind.INTERFACE_PROTOTYPE);\r\n      this.arrayBufferViewPrototype = <InterfacePrototype>arrayBufferViewPrototype;\r\n    }\r\n\r\n    // register 'String'\r\n    var stringPrototype = this.elementsLookup.get(\"String\");\r\n    if (stringPrototype) {\r\n      assert(stringPrototype.kind == ElementKind.CLASS_PROTOTYPE);\r\n      let stringInstance = (<ClassPrototype>stringPrototype).resolve(null); // reports\r\n      if (stringInstance) {\r\n        if (this.typesLookup.has(\"string\")) {\r\n          let declaration = (<ClassPrototype>stringPrototype).declaration;\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, declaration.programLevelInternalName\r\n          );\r\n        } else {\r\n          this.stringInstance = stringInstance;\r\n          this.typesLookup.set(\"string\", stringInstance.type);\r\n        }\r\n      }\r\n    }\r\n\r\n    // register 'start'\r\n    {\r\n      let element = <Element>assert(this.elementsLookup.get(\"start\"));\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      this.startFunction = <FunctionPrototype>element;\r\n    }\r\n\r\n    // register 'main' if present\r\n    if (this.moduleLevelExports.has(\"main\")) {\r\n      let element = <Element>this.moduleLevelExports.get(\"main\");\r\n      if (\r\n        element.kind == ElementKind.FUNCTION_PROTOTYPE &&\r\n        !(<FunctionPrototype>element).isAny(CommonFlags.GENERIC | CommonFlags.AMBIENT)\r\n      ) {\r\n        (<FunctionPrototype>element).set(CommonFlags.MAIN);\r\n        this.mainFunction = <FunctionPrototype>element;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tries to resolve an import by traversing exports and queued exports. */\r\n  private tryResolveImport(\r\n    externalName: string,\r\n    queuedNamedExports: Map<string,QueuedExport>\r\n  ): Element | null {\r\n    var element: Element | null;\r\n    var fileLevelExports = this.fileLevelExports;\r\n    do {\r\n      if (element = fileLevelExports.get(externalName)) return element;\r\n      let queuedExport = queuedNamedExports.get(externalName);\r\n      if (!queuedExport) break;\r\n      if (queuedExport.isReExport) {\r\n        externalName = queuedExport.externalName;\r\n        continue;\r\n      }\r\n      return this.elementsLookup.get(queuedExport.externalName);\r\n    } while (true);\r\n    return null;\r\n  }\r\n\r\n  private filterDecorators(decorators: DecoratorNode[], acceptedFlags: DecoratorFlags): DecoratorFlags {\r\n    var presentFlags = DecoratorFlags.NONE;\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      let kind = decoratorNameToKind(decorator.name);\r\n      let flag = decoratorKindToFlag(kind);\r\n      if (flag) {\r\n        if (!(acceptedFlags & flag)) {\r\n          this.error(\r\n            DiagnosticCode.Decorator_0_is_not_valid_here,\r\n            decorator.range, decorator.name.range.toString()\r\n          );\r\n        } else if (presentFlags & flag) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_decorator,\r\n            decorator.range, decorator.name.range.toString()\r\n          );\r\n        } else {\r\n          presentFlags |= flag;\r\n        }\r\n      }\r\n    }\r\n    return presentFlags;\r\n  }\r\n\r\n  /** Processes global options, if present. */\r\n  private checkGlobalOptions(\r\n    element: Element,\r\n    declaration: DeclarationStatement\r\n  ): void {\r\n    var parentNode = declaration.parent;\r\n    if (\r\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\r\n      (declaration.range.source.is(CommonFlags.BUILTIN)) ||\r\n      (\r\n        declaration.range.source.isLibrary &&\r\n        element.is(CommonFlags.EXPORT) &&\r\n        (\r\n          assert(parentNode).kind == NodeKind.SOURCE ||\r\n          (\r\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\r\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\r\n          )\r\n        )\r\n    ) {\r\n      let globalName = declaration.programLevelInternalName;\r\n      if (this.elementsLookup.has(globalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, element.internalName\r\n        );\r\n      } else {\r\n        this.elementsLookup.set(globalName, element);\r\n        if (element.is(CommonFlags.BUILTIN)) element.internalName = globalName;\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeClass(\r\n    declaration: ClassDeclaration,\r\n    queuedExtends: ClassPrototype[],\r\n    queuedImplements: ClassPrototype[],\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new ClassPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      decorators\r\n        ? this.filterDecorators(decorators,\r\n            DecoratorFlags.GLOBAL |\r\n            DecoratorFlags.SEALED |\r\n            DecoratorFlags.UNMANAGED\r\n          )\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    if (implementsTypes) {\r\n      let numImplementsTypes = implementsTypes.length;\r\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (numImplementsTypes) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\r\n            Range.join(\r\n              declaration.name.range,\r\n              implementsTypes[numImplementsTypes - 1].range\r\n            )\r\n          );\r\n        }\r\n\r\n      // remember classes that implement interfaces\r\n      } else if (numImplementsTypes) {\r\n        queuedImplements.push(prototype);\r\n      }\r\n    }\r\n\r\n    // remember classes that extend another one\r\n    if (declaration.extendsType) queuedExtends.push(prototype);\r\n\r\n    // add as namespace member if applicable\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // otherwise add to file-level exports if exported\r\n    } else if (prototype.is(CommonFlags.EXPORT)) {\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      this.currentFilespace.members.set(simpleName, prototype);\r\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, (<Element>this.moduleLevelExports.get(simpleName)).internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(simpleName, prototype);\r\n      }\r\n    }\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"class member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeField(\r\n    declaration: FieldDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var decorators = declaration.decorators;\r\n\r\n    // static fields become global variables\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      let staticField = new Global(\r\n        this,\r\n        name,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration,\r\n        decorators\r\n          ? this.filterDecorators(decorators, DecoratorFlags.NONE)\r\n          : DecoratorFlags.NONE\r\n      );\r\n      staticField.parent = classPrototype;\r\n      classPrototype.members.set(name, staticField);\r\n      this.elementsLookup.set(internalName, staticField);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        staticField.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance fields are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instanceField = new FieldPrototype(\r\n        classPrototype,\r\n        name,\r\n        internalName,\r\n        declaration\r\n      );\r\n      if (decorators) this.filterDecorators(decorators, DecoratorFlags.NONE);\r\n      classPrototype.instanceMembers.set(name, instanceField);\r\n      // TBD: no need to mark as MODULE_EXPORT\r\n    }\r\n  }\r\n\r\n  private initializeMethod(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var prototype: FunctionPrototype | null = null;\r\n\r\n    var decorators = declaration.decorators;\r\n    var decoratorFlags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      decoratorFlags = this.filterDecorators(decorators,\r\n        DecoratorFlags.OPERATOR_BINARY  |\r\n        DecoratorFlags.OPERATOR_PREFIX  |\r\n        DecoratorFlags.OPERATOR_POSTFIX |\r\n        DecoratorFlags.INLINE\r\n      );\r\n    }\r\n\r\n    // static methods become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      classPrototype.members.set(simpleName, prototype);\r\n      this.elementsLookup.set(internalName, prototype);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance methods are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\r\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\r\n      // }\r\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\r\n        if (classPrototype.constructorPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\r\n            declaration.name.range\r\n          );\r\n        } else {\r\n          prototype.set(CommonFlags.CONSTRUCTOR);\r\n          classPrototype.constructorPrototype = prototype;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers.set(simpleName, prototype);\r\n      }\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n\r\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\r\n  }\r\n\r\n  private checkOperatorOverloads(\r\n    decorators: DecoratorNode[] | null,\r\n    prototype: FunctionPrototype,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        switch (decorator.decoratorKind) {\r\n          case DecoratorKind.OPERATOR:\r\n          case DecoratorKind.OPERATOR_BINARY:\r\n          case DecoratorKind.OPERATOR_PREFIX:\r\n          case DecoratorKind.OPERATOR_POSTFIX: {\r\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n            if (numArgs == 1) {\r\n              let firstArg = (<Expression[]>decorator.arguments)[0];\r\n              if (\r\n                firstArg.kind == NodeKind.LITERAL &&\r\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n              ) {\r\n                let kind = operatorKindFromDecorator(\r\n                  decorator.decoratorKind,\r\n                  (<StringLiteralExpression>firstArg).value\r\n                );\r\n                if (kind == OperatorKind.INVALID) {\r\n                  this.error(\r\n                    DiagnosticCode.Operation_not_supported,\r\n                    firstArg.range\r\n                  );\r\n                } else {\r\n                  let overloads = classPrototype.overloadPrototypes;\r\n                  if (overloads.has(kind)) {\r\n                    this.error(\r\n                      DiagnosticCode.Duplicate_function_implementation,\r\n                      firstArg.range\r\n                    );\r\n                  } else {\r\n                    prototype.operatorKind = kind;\r\n                    overloads.set(kind, prototype);\r\n                  }\r\n                }\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.String_literal_expected,\r\n                  firstArg.range\r\n                );\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                decorator.range, \"1\", numArgs.toString(0)\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeAccessor(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalPropertyName = declaration.fileLevelInternalName;\r\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    var isNew = false;\r\n    if (propertyElement) {\r\n      if (\r\n        propertyElement.kind != ElementKind.PROPERTY ||\r\n        (isGetter\r\n          ? (<Property>propertyElement).getterPrototype\r\n          : (<Property>propertyElement).setterPrototype\r\n        ) != null\r\n      ) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalPropertyName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      propertyElement = new Property(\r\n        this,\r\n        simpleName,\r\n        internalPropertyName,\r\n        classPrototype\r\n      );\r\n      isNew = true;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var decoratorFlags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      decoratorFlags = this.filterDecorators(decorators,\r\n        DecoratorFlags.INLINE\r\n      );\r\n    }\r\n\r\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\r\n\r\n    // static accessors become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\r\n      if (this.elementsLookup.has(staticName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, staticName\r\n        );\r\n        return;\r\n      }\r\n      let staticPrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        staticName,\r\n        declaration,\r\n        null,\r\n        decoratorFlags\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = staticPrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = staticPrototype;\r\n      }\r\n      if (isNew) {\r\n        if (classPrototype.members) {\r\n          if (classPrototype.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, staticName\r\n            );\r\n            return;\r\n          }\r\n        } else {\r\n          classPrototype.members = new Map();\r\n        }\r\n        classPrototype.members.set(simpleName, propertyElement); // check above\r\n      } else {\r\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\r\n      }\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance accessors are remembered until resolved\r\n    } else {\r\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(baseName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalPropertyName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instancePrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        instanceName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = instancePrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = instancePrototype;\r\n      }\r\n      classPrototype.instanceMembers.set(baseName, propertyElement);\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeEnum(\r\n    declaration: EnumDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var element = new Enum(this, simpleName, internalName, declaration);\r\n    element.parent = namespace;\r\n    this.elementsLookup.set(internalName, element);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, element);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, element);\r\n      this.currentFilespace.members.set(simpleName, element);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, (<Element>this.moduleLevelExports.get(simpleName)).internalName\r\n          );\r\n          return;\r\n        }\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(simpleName, element);\r\n      }\r\n    }\r\n\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n\r\n    this.checkGlobalOptions(element, declaration);\r\n  }\r\n\r\n  private initializeEnumValue(\r\n    declaration: EnumValueDeclaration,\r\n    enm: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (enm.members) {\r\n      if (enm.members.has(name)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      enm.members = new Map();\r\n    }\r\n    var value = new EnumValue(enm, this, name, internalName, declaration);\r\n    enm.members.set(name, value);\r\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\r\n      value.set(CommonFlags.MODULE_EXPORT);\r\n    }\r\n  }\r\n\r\n  private initializeExports(\r\n    statement: ExportStatement,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var members = statement.members;\r\n    if (members) { // named\r\n      for (let i = 0, k = members.length; i < k; ++i) {\r\n        this.initializeExport(members[i], statement.internalPath, queuedExports);\r\n      }\r\n    } else { // TODO: filespace\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.range\r\n      );\r\n    }\r\n  }\r\n\r\n  private setExportAndCheckLibrary(\r\n    internalName: string,\r\n    element: Element,\r\n    identifier: IdentifierExpression\r\n  ): void {\r\n    // add to file-level exports\r\n    this.fileLevelExports.set(internalName, element);\r\n\r\n    // add to filespace\r\n    var internalPath = identifier.range.source.internalPath;\r\n    var prefix = FILESPACE_PREFIX + internalPath;\r\n    var filespace = this.elementsLookup.get(prefix);\r\n    if (!filespace) filespace = assert(this.elementsLookup.get(prefix + PATH_DELIMITER + \"index\"));\r\n    assert(filespace.kind == ElementKind.FILESPACE);\r\n    var simpleName = identifier.text;\r\n    (<Filespace>filespace).members.set(simpleName, element);\r\n\r\n    // add global alias if from a library file\r\n    if (identifier.range.source.isLibrary) {\r\n      if (this.elementsLookup.has(simpleName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          identifier.range, simpleName\r\n        );\r\n      } else {\r\n        element.internalName = simpleName;\r\n        this.elementsLookup.set(simpleName, element);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeExport(\r\n    member: ExportMember,\r\n    internalPath: string | null,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\r\n    if (this.fileLevelExports.has(externalName)) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.externalName.range, externalName\r\n      );\r\n      return;\r\n    }\r\n    var referencedName: string;\r\n    var referencedElement: Element | null;\r\n    var queuedExport: QueuedExport | null;\r\n\r\n    // export local element\r\n    if (internalPath == null) {\r\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the element exists\r\n      if (referencedElement = this.elementsLookup.get(referencedName)) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = false;\r\n      queuedExport.externalName = referencedName; // -> here: local name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n\r\n    // export external element\r\n    } else {\r\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the export exists\r\n      referencedElement = this.elementsLookup.get(referencedName);\r\n      if (referencedElement) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // walk already known queued exports\r\n      let seen = new Set<QueuedExport>();\r\n      while (queuedExport = queuedExports.get(referencedName)) {\r\n        if (queuedExport.isReExport) {\r\n          referencedElement = this.fileLevelExports.get(queuedExport.externalName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          referencedName = queuedExport.externalName;\r\n          if (seen.has(queuedExport)) break;\r\n          seen.add(queuedExport);\r\n        } else {\r\n          referencedElement = this.elementsLookup.get(queuedExport.externalName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = true;\r\n      queuedExport.externalName = referencedName; // -> here: external name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n    }\r\n  }\r\n\r\n  private initializeFunction(\r\n    declaration: FunctionDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var decorators = declaration.decorators;\r\n    var prototype = new FunctionPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      null,\r\n      decorators\r\n        ? this.filterDecorators(decorators,\r\n            DecoratorFlags.GLOBAL |\r\n            DecoratorFlags.INLINE\r\n          )\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.parent = namespace;\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      this.currentFilespace.members.set(simpleName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, (<Element>this.moduleLevelExports.get(simpleName)).internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(simpleName, prototype);\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeImports(\r\n    statement: ImportStatement,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) {\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          statement.internalPath,\r\n          queuedExports, queuedImports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\r\n      let simpleName = statement.namespaceName.text;\r\n      let internalName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        simpleName\r\n      );\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          statement.namespaceName.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // resolve right away if the exact filespace exists\r\n      let filespace = this.elementsLookup.get(statement.internalPath);\r\n      if (filespace) {\r\n        this.elementsLookup.set(internalName, filespace);\r\n        return;\r\n      }\r\n\r\n      // otherwise queue it\r\n      let queuedImport = new QueuedImport();\r\n      queuedImport.localName = internalName;\r\n      let externalName = FILESPACE_PREFIX + statement.internalPath;\r\n      queuedImport.externalName = externalName;\r\n      queuedImport.externalNameAlt = externalName + PATH_DELIMITER + \"index\";\r\n      queuedImport.declaration = null; // filespace\r\n      queuedImports.push(queuedImport);\r\n    }\r\n  }\r\n\r\n  private initializeImport(\r\n    declaration: ImportDeclaration,\r\n    internalPath: string,\r\n    queuedNamedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var localName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(localName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, localName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var externalName = internalPath + PATH_DELIMITER + declaration.externalName.text;\r\n\r\n    // resolve right away if the exact export exists\r\n    var element: Element | null;\r\n    if (element = this.fileLevelExports.get(externalName)) {\r\n      this.elementsLookup.set(localName, element);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    const indexPart = PATH_DELIMITER + \"index\";\r\n    var queuedImport = new QueuedImport();\r\n    queuedImport.localName = localName;\r\n    if (internalPath.endsWith(indexPart)) {\r\n      queuedImport.externalName = externalName; // try exact first\r\n      queuedImport.externalNameAlt = (\r\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\r\n        declaration.externalName.text\r\n      );\r\n    } else {\r\n      queuedImport.externalName = externalName; // try exact first\r\n      queuedImport.externalNameAlt = (\r\n        internalPath +\r\n        indexPart +\r\n        PATH_DELIMITER +\r\n        declaration.externalName.text\r\n      );\r\n    }\r\n    queuedImport.declaration = declaration; // named\r\n    queuedImports.push(queuedImport);\r\n  }\r\n\r\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new InterfacePrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      decorators\r\n        ? this.filterDecorators(decorators, DecoratorFlags.GLOBAL)\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(prototype.internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(prototype.internalName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      this.currentFilespace.members.set(simpleName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, (<Element>this.moduleLevelExports.get(simpleName)).internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(simpleName, prototype);\r\n      }\r\n    }\r\n\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"interface member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeNamespace(\r\n    declaration: NamespaceDeclaration,\r\n    queuedExtends: ClassPrototype[],\r\n    queuedImplements: ClassPrototype[],\r\n    parentNamespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var simpleName = declaration.name.text;\r\n    var namespace = this.elementsLookup.get(internalName);\r\n    if (!namespace) {\r\n      namespace = new Namespace(this, simpleName, internalName, declaration);\r\n      namespace.parent = parentNamespace;\r\n      this.elementsLookup.set(internalName, namespace);\r\n      this.checkGlobalOptions(namespace, declaration);\r\n    }\r\n\r\n    if (parentNamespace) {\r\n      if (parentNamespace.members) {\r\n        if (parentNamespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        parentNamespace.members = new Map();\r\n      }\r\n      parentNamespace.members.set(simpleName, namespace);\r\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\r\n      let existingExport = this.fileLevelExports.get(internalName);\r\n      if (existingExport) {\r\n        if (!existingExport.is(CommonFlags.EXPORT)) {\r\n          this.error(\r\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n            declaration.name.range, namespace.internalName\r\n          ); // recoverable\r\n        }\r\n        namespace = existingExport; // join\r\n      } else {\r\n        this.fileLevelExports.set(internalName, namespace);\r\n      }\r\n      this.currentFilespace.members.set(simpleName, namespace);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, (<Element>this.moduleLevelExports.get(simpleName)).internalName\r\n          );\r\n          return;\r\n        }\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(simpleName, namespace);\r\n      }\r\n    }\r\n\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      switch (members[i].kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\r\n          // TODO: what about namespaced types?\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            members[i].range\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>members[i], namespace);\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"namespace member expected\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\r\n    // type aliases are program globals\r\n    // TODO: what about namespaced types?\r\n    var name = declaration.name.text;\r\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, name\r\n      );\r\n      return;\r\n    }\r\n    var alias = new TypeAlias();\r\n    alias.typeParameters = declaration.typeParameters;\r\n    alias.type = declaration.type;\r\n    this.typeAliases.set(name, alias);\r\n  }\r\n\r\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let decorators = declaration.decorators;\r\n      let internalName = declaration.fileLevelInternalName;\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        continue;\r\n      }\r\n      let simpleName = declaration.name.text;\r\n      let global = new Global(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration,\r\n        decorators\r\n          ? this.filterDecorators(decorators,\r\n              DecoratorFlags.GLOBAL\r\n            )\r\n          : DecoratorFlags.NONE\r\n      );\r\n      global.parent = namespace;\r\n      this.elementsLookup.set(internalName, global);\r\n\r\n      if (namespace) {\r\n        if (namespace.members) {\r\n          if (namespace.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n        } else {\r\n          namespace.members = new Map();\r\n        }\r\n        namespace.members.set(simpleName, global);\r\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n        }\r\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\r\n        if (this.fileLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n        } else {\r\n          this.fileLevelExports.set(internalName, global);\r\n        }\r\n        this.currentFilespace.members.set(simpleName, global);\r\n        if (declaration.range.source.isEntry) {\r\n          if (this.moduleLevelExports.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, (<Element>this.moduleLevelExports.get(simpleName)).internalName\r\n            );\r\n            continue;\r\n          }\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n          this.moduleLevelExports.set(simpleName, global);\r\n        }\r\n      }\r\n      this.checkGlobalOptions(global, declaration);\r\n    }\r\n  }\r\n\r\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\r\n  resolveSignature(\r\n    node: SignatureNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Signature | null {\r\n    var explicitThisType = node.explicitThisType;\r\n    var thisType: Type | null = null;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!thisType) return null;\r\n    }\r\n    var parameterTypeNodes = node.parameters;\r\n    var numParameters = parameterTypeNodes.length;\r\n    var parameterTypes = new Array<Type>(numParameters);\r\n    var parameterNames = new Array<string>(numParameters);\r\n    var requiredParameters = 0;\r\n    var hasRest = false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let parameterTypeNode = parameterTypeNodes[i];\r\n      switch (parameterTypeNode.parameterKind) {\r\n        case ParameterKind.DEFAULT: {\r\n          requiredParameters = i + 1;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          assert(i == numParameters);\r\n          hasRest = true;\r\n          break;\r\n        }\r\n      }\r\n      let parameterType = this.resolveType(\r\n        assert(parameterTypeNode.type),\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterTypeNode.name.text;\r\n    }\r\n    var returnTypeNode = node.returnType;\r\n    var returnType: Type | null;\r\n    if (returnTypeNode) {\r\n      returnType = this.resolveType(\r\n        returnTypeNode,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Type.void;\r\n    }\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n    signature.hasRest = hasRest;\r\n    return signature;\r\n  }\r\n\r\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    node: CommonTypeNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Type | null {\r\n    if (node.kind == NodeKind.SIGNATURE) {\r\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportNotFound);\r\n      if (!signature) return null;\r\n      return node.isNullable\r\n        ? signature.type.asNullable()\r\n        : signature.type;\r\n    }\r\n    var typeNode = <TypeNode>node;\r\n    var simpleName = typeNode.name.text;\r\n    var globalName = simpleName;\r\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName;\r\n\r\n    var element: Element | null;\r\n    if (\r\n      (element = this.elementsLookup.get(localName)) || // file-global\r\n      (element = this.elementsLookup.get(globalName))   // program-global\r\n    ) {\r\n      switch (element.kind) {\r\n        case ElementKind.ENUM: return Type.i32;\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          let instance = (<ClassPrototype>element).resolveUsingTypeArguments(\r\n            typeNode.typeArguments,\r\n            contextualTypeArguments,\r\n            null\r\n          ); // reports\r\n          if (!instance) return null;\r\n          return node.isNullable\r\n            ? instance.type.asNullable()\r\n            : instance.type;\r\n        }\r\n      }\r\n    }\r\n\r\n    // check (global) type alias\r\n    var alias = this.typeAliases.get(simpleName);\r\n    if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportNotFound);\r\n\r\n    // resolve parameters\r\n    if (typeNode.typeArguments) {\r\n      let k = typeNode.typeArguments.length;\r\n      let paramTypes = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let paramType = this.resolveType( // reports\r\n          typeNode.typeArguments[i],\r\n          contextualTypeArguments,\r\n          reportNotFound\r\n        );\r\n        if (!paramType) return null;\r\n        paramTypes[i] = paramType;\r\n      }\r\n\r\n      if (k) { // can't be a placeholder if it has parameters\r\n        let instanceKey = typesToString(paramTypes);\r\n        if (instanceKey.length) {\r\n          localName += \"<\" + instanceKey + \">\";\r\n          globalName += \"<\" + instanceKey + \">\";\r\n        }\r\n      } else if (contextualTypeArguments) {\r\n        let placeholderType = contextualTypeArguments.get(globalName);\r\n        if (placeholderType) return placeholderType;\r\n      }\r\n    }\r\n\r\n    var type: Type | null;\r\n\r\n    // check file-global / program-global type\r\n    if ((type = this.typesLookup.get(localName)) || (type = this.typesLookup.get(globalName))) {\r\n      return type;\r\n    }\r\n\r\n    if (reportNotFound) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        typeNode.name.range, globalName\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    typeParameters: TypeParameterNode[],\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): Type[] | null {\r\n    var parameterCount = typeParameters.length;\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (parameterCount != argumentCount) {\r\n      if (argumentCount) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          Range.join(\r\n            (<TypeNode[]>typeArgumentNodes)[0].range,\r\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n          ),\r\n          parameterCount.toString(10), argumentCount.toString(10)\r\n        );\r\n      } else if (alternativeReportNode) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(parameterCount);\r\n    for (let i = 0; i < parameterCount; ++i) {\r\n      let type = this.resolveType( // reports\r\n        (<TypeNode[]>typeArgumentNodes)[i],\r\n        contextualTypeArguments,\r\n        true\r\n      );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves an identifier to the element it refers to. */\r\n  resolveIdentifier(\r\n    identifier: IdentifierExpression,\r\n    contextualFunction: Function | null,\r\n    contextualEnum: Enum | null = null\r\n  ): Element | null {\r\n    var name = identifier.text;\r\n\r\n    var element: Element | null;\r\n    var namespace: Element | null;\r\n\r\n    // check siblings\r\n    if (contextualEnum) {\r\n\r\n      if (\r\n        contextualEnum.members &&\r\n        (element = contextualEnum.members.get(name)) &&\r\n        element.kind == ElementKind.ENUMVALUE\r\n      ) {\r\n        this.resolvedThisExpression = null;\r\n        this.resolvedElementExpression = null;\r\n        return element; // ENUMVALUE\r\n      }\r\n\r\n    } else if (contextualFunction) {\r\n\r\n      // check locals\r\n      if (element = contextualFunction.flow.getScopedLocal(name)) {\r\n        this.resolvedThisExpression = null;\r\n        this.resolvedElementExpression = null;\r\n        return element; // LOCAL\r\n      }\r\n\r\n      // check outer scope locals\r\n      // let outerScope = contextualFunction.outerScope;\r\n      // while (outerScope) {\r\n      //   if (element = outerScope.getScopedLocal(name)) {\r\n      //     let scopedLocal = <Local>element;\r\n      //     let scopedGlobal = scopedLocal.scopedGlobal;\r\n      //     if (!scopedGlobal) scopedGlobal = outerScope.addScopedGlobal(scopedLocal);\r\n      //     if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n      //     return resolvedElement.set(scopedGlobal);\r\n      //   }\r\n      //   outerScope = outerScope.currentFunction.outerScope;\r\n      // }\r\n\r\n      // search contextual parent namespaces if applicable\r\n      if (namespace = contextualFunction.prototype.parent) {\r\n        do {\r\n          if (element = this.elementsLookup.get(namespace.internalName + STATIC_DELIMITER + name)) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return element; // LOCAL\r\n          }\r\n        } while (namespace = namespace.parent);\r\n      }\r\n    }\r\n\r\n    // search current file\r\n    if (element = this.elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\r\n      this.resolvedThisExpression = null;\r\n      this.resolvedElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    // search global scope\r\n    if (element = this.elementsLookup.get(name)) {\r\n      this.resolvedThisExpression = null;\r\n      this.resolvedElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    this.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      identifier.range, name\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a property access to the element it refers to. */\r\n  resolvePropertyAccess(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualFunction: Function\r\n  ): Element | null {\r\n    // start by resolving the lhs target (expression before the last dot)\r\n    var targetExpression = propertyAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, contextualFunction); // reports\r\n    if (!target) return null;\r\n\r\n    // at this point we know exactly what the target is, so look up the element within\r\n    var propertyName = propertyAccess.property.text;\r\n\r\n    // Resolve variable-likes to the class type they reference first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let classReference = (<VariableLikeElement>target).type.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = assert((<Property>target).getterPrototype).resolve(); // reports\r\n        if (!getter) return null;\r\n        let classReference = getter.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.resolvedElementExpression;\r\n        if (elementExpression) {\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementExpression.range, (<Class>target).internalName\r\n            );\r\n            return null;\r\n          }\r\n          let returnType = indexedGet.signature.returnType;\r\n          if (!(target = returnType.classReference)) {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, returnType.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          let members = target.members;\r\n          let member: Element | null;\r\n          if (members && (member = members.get(propertyName))) {\r\n            this.resolvedThisExpression = targetExpression;\r\n            this.resolvedElementExpression = null;\r\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\r\n          }\r\n          // traverse inherited static members on the base prototype if target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // traverse inherited instance members on the base class if target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        let members = target.members;\r\n        if (members) {\r\n          let member = members.get(propertyName);\r\n          if (member) {\r\n            this.resolvedThisExpression = targetExpression;\r\n            this.resolvedElementExpression = null;\r\n            return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      propertyAccess.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveElementAccess(\r\n    elementAccess: ElementAccessExpression,\r\n    contextualFunction: Function\r\n  ): Element | null {\r\n    var targetExpression = elementAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, contextualFunction);\r\n    if (!target) return null;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (target = type.classReference) {\r\n          this.resolvedThisExpression = targetExpression;\r\n          this.resolvedElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: { // element access on element access\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            elementAccess.range, (<Class>target).internalName\r\n          );\r\n          return null;\r\n        }\r\n        let returnType = indexedGet.signature.returnType;\r\n        if (target = returnType.classReference) {\r\n          this.resolvedThisExpression = targetExpression;\r\n          this.resolvedElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      targetExpression.range\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveExpression(\r\n    expression: Expression,\r\n    contextualFunction: Function\r\n  ): Element | null {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) {\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        let type = this.resolveType((<AssertionExpression>expression).toType); // reports\r\n        if (type) {\r\n          let classType = type.classReference;\r\n          if (classType) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return classType;\r\n          }\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case NodeKind.THIS: { // -> Class / ClassPrototype\r\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\r\n          if (explicitLocal) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return explicitLocal;\r\n          }\r\n        }\r\n        let parent = contextualFunction.parent;\r\n        if (parent) {\r\n          this.resolvedThisExpression = null;\r\n          this.resolvedElementExpression = null;\r\n          return parent;\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.SUPER: { // -> Class\r\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\r\n          if (explicitLocal) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return explicitLocal;\r\n          }\r\n        }\r\n        let parent = contextualFunction.parent;\r\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n          this.resolvedThisExpression = null;\r\n          this.resolvedElementExpression = null;\r\n          return parent;\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction);\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        switch ((<LiteralExpression>expression).literalKind) {\r\n          case LiteralKind.STRING: {\r\n            this.resolvedThisExpression = expression;\r\n            this.resolvedElementExpression = null;\r\n            return this.stringInstance;\r\n          }\r\n          // case LiteralKind.ARRAY: // TODO\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccess(\r\n          <PropertyAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccess(\r\n          <ElementAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        let targetExpression = (<CallExpression>expression).expression;\r\n        let target = this.resolveExpression(targetExpression, contextualFunction); // reports\r\n        if (!target) return null;\r\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n          let instance = (<FunctionPrototype>target).resolveUsingTypeArguments( // reports\r\n            (<CallExpression>expression).typeArguments,\r\n            contextualFunction.flow.contextualTypeArguments,\r\n            expression\r\n          );\r\n          if (!instance) return null;\r\n          let returnType = instance.signature.returnType;\r\n          let classType = returnType.classReference;\r\n          if (classType) {\r\n            // reuse resolvedThisExpression (might be property access)\r\n            // reuse resolvedElementExpression (might be element access)\r\n            return classType;\r\n          } else {\r\n            let signature = returnType.signatureReference;\r\n            if (signature) {\r\n              let functionTarget = signature.cachedFunctionTarget;\r\n              if (!functionTarget) {\r\n                functionTarget = new FunctionTarget(this, signature);\r\n                signature.cachedFunctionTarget = functionTarget;\r\n              }\r\n              // reuse resolvedThisExpression (might be property access)\r\n              // reuse resolvedElementExpression (might be element access)\r\n              return functionTarget;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            targetExpression.range, target.internalName\r\n          );\r\n          return null;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return null;\r\n  }\r\n\r\n  // resolveExpressionType(\r\n  //   expression: Expression,\r\n  //   contextualFunction: Function\r\n  // ): Type {\r\n  //   var element = this.resolveExpression(expression, contextualFunction);\r\n  //   switch (element.kind) {\r\n\r\n  //   }\r\n  // }\r\n}\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE,\r\n  /** A {@link Filespace}. */\r\n  FILESPACE,\r\n}\r\n\r\nexport enum DecoratorFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n  /** Is a program global. */\r\n  GLOBAL = 1 << 0,\r\n  /** Is a binary operator overload. */\r\n  OPERATOR_BINARY = 1 << 1,\r\n  /** Is a unary prefix operator overload. */\r\n  OPERATOR_PREFIX = 1 << 2,\r\n  /** Is a unary postfix operator overload. */\r\n  OPERATOR_POSTFIX = 1 << 3,\r\n  /** Is an unmanaged class. */\r\n  UNMANAGED = 1 << 4,\r\n  /** Is a sealed class. */\r\n  SEALED = 1 << 5,\r\n  /** Is always inlined. */\r\n  INLINE = 1 << 6\r\n}\r\n\r\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\r\n  switch (kind) {\r\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\r\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\r\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\r\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\r\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\r\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\r\n    default: return DecoratorFlags.NONE;\r\n  }\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Specific element kind. */\r\n  kind: ElementKind;\r\n  /** Containing {@link Program}. */\r\n  program: Program;\r\n  /** Simple name. */\r\n  simpleName: string;\r\n  /** Internal name referring to this element. */\r\n  internalName: string;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Decorator flags indicating annotated traits. */\r\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\r\n  /** Namespaced member elements. */\r\n  members: Map<string,Element> | null = null;\r\n  /** Parent element, if applicable. */\r\n  parent: Element | null = null;\r\n\r\n  /** Constructs a new element, linking it to its containing {@link Program}. */\r\n  protected constructor(program: Program, simpleName: string, internalName: string) {\r\n    this.program = program;\r\n    this.simpleName = simpleName;\r\n    this.internalName = internalName;\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n  /** Tests if this element has a specific decorator flag or flags. */\r\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\r\n}\r\n\r\n/** A filespace representing the implicit top-level namespace of a source. */\r\nexport class Filespace extends Element {\r\n\r\n  kind = ElementKind.FILESPACE;\r\n\r\n  /** File members (externally visible only). */\r\n  members: Map<string,Element>; // more specific\r\n\r\n  /** Constructs a new filespace. */\r\n  constructor(\r\n    program: Program,\r\n    source: Source\r\n  ) {\r\n    super(program, source.internalPath, FILESPACE_PREFIX + source.internalPath);\r\n    this.members = new Map();\r\n  }\r\n}\r\n\r\n/** A namespace that differs from a filespace in being user-declared with a name. */\r\nexport class Namespace extends Element {\r\n\r\n  // All elements have namespace semantics. This is an explicitly declared one.\r\n  kind = ElementKind.NAMESPACE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: NamespaceDeclaration; // more specific\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: NamespaceDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends Element {\r\n\r\n  kind = ElementKind.ENUM;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumDeclaration;\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends Element {\r\n\r\n  kind = ElementKind.ENUMVALUE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumValueDeclaration;\r\n  /** Constant value, if applicable. */\r\n  constantValue: i32 = 0;\r\n\r\n  constructor(\r\n    enm: Enum,\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumValueDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = enm;\r\n    this.declaration = declaration;\r\n  }\r\n}\r\n\r\nexport const enum ConstantValueKind {\r\n  NONE,\r\n  INTEGER,\r\n  FLOAT\r\n}\r\n\r\nexport class VariableLikeElement extends Element {\r\n\r\n  // kind varies\r\n\r\n  /** Declaration reference. */\r\n  declaration: VariableLikeDeclarationStatement | null;\r\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\r\n  type: Type;\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  protected constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.type = type;\r\n    this.declaration = declaration;\r\n  }\r\n\r\n  withConstantIntegerValue(lo: i32, hi: i32): this {\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = i64_new(lo, hi);\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n\r\n  withConstantFloatValue(value: f64): this {\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  kind = ElementKind.GLOBAL;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName, type, declaration);\r\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.type = type; // resolved later if `void`\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n\r\n  // not an Element on its own\r\n\r\n  /** Parameter name. */\r\n  name: string;\r\n  /** Parameter type. */\r\n  type: Type;\r\n  /** Parameter initializer. */\r\n  initializer: Expression | null;\r\n\r\n  /** Constructs a new function parameter. */\r\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.initializer = initializer;\r\n  }\r\n}\r\n\r\n/** A function local. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  kind = ElementKind.LOCAL;\r\n\r\n  /** Local index. */\r\n  index: i32;\r\n  /** Respective scoped global, if any. */\r\n  scopedGlobal: Global | null = null;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    index: i32,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null = null\r\n  ) {\r\n    super(program, simpleName, simpleName, type, declaration);\r\n    this.index = index;\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FunctionDeclaration;\r\n  /** If an instance method, the class prototype reference. */\r\n  classPrototype: ClassPrototype | null;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Function> = new Map();\r\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\r\n  classTypeArguments: Type[] | null = null;\r\n  /** Operator kind, if an overload. */\r\n  operatorKind: OperatorKind = OperatorKind.INVALID;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FunctionDeclaration,\r\n    classPrototype: ClassPrototype | null = null,\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.classPrototype = classPrototype;\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    functionTypeArguments: Type[] | null = null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var instanceKey = functionTypeArguments ? typesToString(functionTypeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    var declaration = this.declaration;\r\n    var isInstance = this.is(CommonFlags.INSTANCE);\r\n    var classPrototype = this.classPrototype;\r\n\r\n    // inherit contextual type arguments as provided. might be overridden.\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(\r\n          inheritedName,\r\n          inheritedType\r\n        );\r\n      }\r\n    }\r\n\r\n    // override with class type arguments if a partially resolved instance method\r\n    var classTypeArguments = this.classTypeArguments;\r\n    if (classTypeArguments) { // set only if partially resolved\r\n      assert(this.is(CommonFlags.INSTANCE));\r\n      let classDeclaration = assert(classPrototype).declaration;\r\n      let classTypeParameters = classDeclaration.typeParameters;\r\n      let numClassTypeParameters = classTypeParameters.length;\r\n      assert(numClassTypeParameters == classTypeArguments.length);\r\n      for (let i = 0; i < numClassTypeParameters; ++i) {\r\n        contextualTypeArguments.set(\r\n          classTypeParameters[i].name.text,\r\n          classTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!classTypeArguments);\r\n    }\r\n\r\n    // override with function specific type arguments\r\n    var signatureNode = declaration.signature;\r\n    var functionTypeParameters = declaration.typeParameters;\r\n    var numFunctionTypeArguments: i32;\r\n    if (functionTypeArguments && (numFunctionTypeArguments = functionTypeArguments.length)) {\r\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        contextualTypeArguments.set(\r\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\r\n          functionTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\r\n    }\r\n\r\n    // resolve class if an instance method\r\n    var classInstance: Class | null = null;\r\n    var thisType: Type | null = null;\r\n    if (isInstance) {\r\n      classInstance = assert(classPrototype).resolve(classTypeArguments, contextualTypeArguments); // reports\r\n      if (!classInstance) return null;\r\n      thisType = classInstance.type;\r\n      contextualTypeArguments.set(\"this\", thisType);\r\n    }\r\n\r\n    // resolve signature node\r\n    var signatureParameters = signatureNode.parameters;\r\n    var signatureParameterCount = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(signatureParameterCount);\r\n    var parameterNames = new Array<string>(signatureParameterCount);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < signatureParameterCount; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = assert(parameterDeclaration.type);\r\n      let parameterType = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    var returnType: Type;\r\n    if (this.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (this.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = assert(signatureNode.returnType);\r\n      let type = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\r\n    instance = new Function(\r\n      this,\r\n      internalName,\r\n      signature,\r\n      classInstance\r\n        ? classInstance\r\n        : classPrototype,\r\n      contextualTypeArguments\r\n    );\r\n    this.instances.set(instanceKey, instance);\r\n    this.program.instancesLookup.set(internalName, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves this prototype partially by applying the specified inherited class type arguments. */\r\n  resolvePartial(classTypeArguments: Type[] | null): FunctionPrototype | null {\r\n    assert(this.is(CommonFlags.INSTANCE));\r\n    var classPrototype = assert(this.classPrototype);\r\n\r\n    if (!(classTypeArguments && classTypeArguments.length)) return this; // no need to clone\r\n\r\n    var simpleName = this.simpleName;\r\n    var partialKey = typesToString(classTypeArguments);\r\n    var partialPrototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\r\n      this.declaration,\r\n      classPrototype,\r\n      this.decoratorFlags\r\n    );\r\n    partialPrototype.flags = this.flags;\r\n    partialPrototype.operatorKind = this.operatorKind;\r\n    partialPrototype.classTypeArguments = classTypeArguments;\r\n    return partialPrototype;\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments( // reports\r\n        assert(this.declaration.typeParameters),\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        reportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  /** Resolves the type arguments to use when compiling a built-in call. Must be a built-in. */\r\n  resolveBuiltinTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null\r\n  ): Type[] | null {\r\n    assert(this.is(CommonFlags.BUILTIN));\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (typeArgumentNodes) {\r\n      let k = typeArgumentNodes.length;\r\n      resolvedTypeArguments = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let resolvedType = this.program.resolveType( // reports\r\n          typeArgumentNodes[i],\r\n          contextualTypeArguments,\r\n          true\r\n        );\r\n        if (!resolvedType) return null;\r\n        resolvedTypeArguments[i] = resolvedType;\r\n      }\r\n    }\r\n    return resolvedTypeArguments;\r\n  }\r\n\r\n  toString(): string { return this.simpleName; }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends Element {\r\n\r\n  kind = ElementKind.FUNCTION;\r\n\r\n  /** Prototype reference. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** Map of locals by name. */\r\n  localsByName: Map<string,Local> = new Map();\r\n  /** Array of locals by index. */\r\n  localsByIndex: Local[] = [];\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Current break context label. */\r\n  breakContext: string | null = null;\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Current control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] = [];\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n  /** The outer scope, if a function expression. */\r\n  outerScope: Flow | null = null;\r\n\r\n  private nextBreakId: i32 = 0;\r\n  private breakStack: i32[] | null = null;\r\n  nextInlineId: i32 = 0;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    prototype: FunctionPrototype,\r\n    internalName: string,\r\n    signature: Signature,\r\n    parent: Element | null = null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.parent = parent;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.contextualTypeArguments = contextualTypeArguments;\r\n    if (!(prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || prototype.is(CommonFlags.DECLARE))) {\r\n      let localIndex = 0;\r\n      if (parent && parent.kind == ElementKind.CLASS) {\r\n        assert(this.is(CommonFlags.INSTANCE));\r\n        let local = new Local(\r\n          prototype.program,\r\n          \"this\",\r\n          localIndex++,\r\n          assert(signature.thisType)\r\n        );\r\n        this.localsByName.set(\"this\", local);\r\n        this.localsByIndex[local.index] = local;\r\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\r\n        if (inheritedTypeArguments) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n            if (!this.contextualTypeArguments.has(inheritedName)) {\r\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        let local = new Local(\r\n          prototype.program,\r\n          parameterName,\r\n          localIndex++,\r\n          parameterType\r\n          // FIXME: declaration?\r\n        );\r\n        this.localsByName.set(parameterName, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var local = new Local(\r\n      this.prototype.program,\r\n      name\r\n        ? name\r\n        : \"var$\" + localIndex.toString(10),\r\n      localIndex,\r\n      type,\r\n      declaration\r\n    );\r\n    if (name) {\r\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\r\n      this.localsByName.set(name, local);\r\n    }\r\n    this.localsByIndex[local.index] = local;\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  private tempI32s: Local[] | null = null;\r\n  private tempI64s: Local[] | null = null;\r\n  private tempF32s: Local[] | null = null;\r\n  private tempF64s: Local[] | null = null;\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type, wrapped: bool = false): Local {\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s;\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s;\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s;\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s;\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps && temps.length) {\r\n      local = temps.pop();\r\n      local.type = type;\r\n      local.flags = CommonFlags.NONE;\r\n    } else {\r\n      local = this.addLocal(type);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.flow.setLocalWrapped(local.index, wrapped);\r\n    }\r\n    return local;\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    if (local.is(CommonFlags.INLINED)) return;\r\n    assert(local.index >= 0);\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    assert(local.index >= 0);\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\r\n    var temps: Local[];\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps.length) {\r\n      local = temps[temps.length - 1];\r\n      local.type = type;\r\n    } else {\r\n      local = this.addLocal(type);\r\n      temps.push(local);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.flow.setLocalWrapped(local.index, wrapped);\r\n    }\r\n    return local;\r\n  }\r\n\r\n  /** Enters a(nother) break context. */\r\n  enterBreakContext(): string {\r\n    var id = this.nextBreakId++;\r\n    if (!this.breakStack) this.breakStack = [ id ];\r\n    else this.breakStack.push(id);\r\n    return this.breakContext = id.toString(10);\r\n  }\r\n\r\n  /** Leaves the current break context. */\r\n  leaveBreakContext(): void {\r\n    assert(this.breakStack != null);\r\n    var length = (<i32[]>this.breakStack).length;\r\n    assert(length > 0);\r\n    (<i32[]>this.breakStack).pop();\r\n    if (length > 1) {\r\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\r\n    } else {\r\n      this.breakContext = null;\r\n      this.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakContext = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n        let debugLocation = debugLocations[i];\r\n        module.setDebugLocation(\r\n          ref,\r\n          debugLocation.debugInfoRef,\r\n          debugLocation.source.debugInfoIndex,\r\n          debugLocation.line,\r\n          debugLocation.column\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Returns the TypeScript representation of this function. */\r\n  toString(): string { return this.prototype.simpleName; }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_TARGET;\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(program: Program, signature: Signature) {\r\n    super(program, \"\", \"\");\r\n    var simpleName = signature.toSignatureString();\r\n    this.simpleName = simpleName;\r\n    this.internalName = simpleName;\r\n    this.signature = signature;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends Element {\r\n\r\n  kind = ElementKind.FIELD_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FieldDeclaration;\r\n  /** Parent class prototype. */\r\n  classPrototype: ClassPrototype;\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    classPrototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FieldDeclaration\r\n  ) {\r\n    super(classPrototype.program, simpleName, internalName);\r\n    this.classPrototype = classPrototype;\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  kind = ElementKind.FIELD;\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(\r\n    prototype: FieldPrototype,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: FieldDeclaration,\r\n    parent: Class\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.type = type;\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class Property extends Element {\r\n\r\n  kind = ElementKind.PROPERTY;\r\n\r\n  /** Parent class prototype. */\r\n  parent: ClassPrototype;\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    parent: ClassPrototype\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends Element {\r\n\r\n  kind = ElementKind.CLASS_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: ClassDeclaration;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Class> = new Map();\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n  /** Operator overload prototypes. */\r\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: ClassDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    typeArguments: Type[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // inherit contextual type arguments\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(inheritedName, inheritedType);\r\n      }\r\n    }\r\n\r\n    var declaration = this.declaration;\r\n    var baseClass: Class | null = null;\r\n    if (declaration.extendsType) {\r\n      let baseClassType = this.program.resolveType(declaration.extendsType, null); // reports\r\n      if (!baseClassType) return null;\r\n      if (!(baseClass = baseClassType.classReference)) {\r\n        this.program.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          declaration.extendsType.range\r\n        );\r\n        return null;\r\n      }\r\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\r\n        this.program.error(\r\n          DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n          declaration.extendsType.range, baseClass.internalName\r\n        );\r\n        return null;\r\n      }\r\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != this.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        this.program.error(\r\n          DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\r\n          Range.join(declaration.name.range, declaration.extendsType.range)\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // override call specific contextual type arguments if provided\r\n    var i: i32, k: i32;\r\n    if (typeArguments) {\r\n      if ((k = typeArguments.length) != declaration.typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n      for (i = 0; i < k; ++i) {\r\n        contextualTypeArguments.set(declaration.typeParameters[i].name.text, typeArguments[i]);\r\n      }\r\n    } else if (declaration.typeParameters.length) {\r\n      throw new Error(\"type argument count mismatch\");\r\n    }\r\n\r\n    var simpleName = this.simpleName;\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) {\r\n      simpleName += \"<\" + instanceKey + \">\";\r\n      internalName += \"<\" + instanceKey + \">\";\r\n    }\r\n    instance = new Class(this, simpleName, internalName, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    this.instances.set(instanceKey, instance);\r\n    this.program.instancesLookup.set(internalName, instance);\r\n\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n      if (baseClass.members) {\r\n        if (!instance.members) instance.members = new Map();\r\n        for (let inheritedMember of baseClass.members.values()) {\r\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Resolve constructor\r\n    if (this.constructorPrototype) {\r\n      let partialConstructor = this.constructorPrototype.resolvePartial(typeArguments); // reports\r\n      if (partialConstructor) instance.constructorInstance = partialConstructor.resolve(); // reports\r\n    }\r\n\r\n    // Resolve instance members\r\n    if (this.instanceMembers) {\r\n      for (let member of this.instanceMembers.values()) {\r\n        switch (member.kind) {\r\n\r\n          // Lay out fields in advance\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\r\n            if (!fieldDeclaration.type) {\r\n              throw new Error(\"type expected\"); // TODO: check if parent class defines a type\r\n            }\r\n            let fieldType = this.program.resolveType( // reports\r\n              fieldDeclaration.type,\r\n              instance.contextualTypeArguments\r\n            );\r\n            if (!fieldType) break;\r\n            let fieldInstance = new Field(\r\n              <FieldPrototype>member,\r\n              internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\r\n              fieldType,\r\n              fieldDeclaration,\r\n              instance\r\n            );\r\n            switch (fieldType.byteSize) { // align\r\n              case 1: break;\r\n              case 2: {\r\n                if (memoryOffset & 1) ++memoryOffset;\r\n                break;\r\n              }\r\n              case 4: {\r\n                if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1;\r\n                break;\r\n              }\r\n              case 8: {\r\n                if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1;\r\n                break;\r\n              }\r\n              default: assert(false);\r\n            }\r\n            fieldInstance.memoryOffset = memoryOffset;\r\n            memoryOffset += fieldType.byteSize;\r\n            instance.members.set(member.simpleName, fieldInstance);\r\n            break;\r\n          }\r\n\r\n          // Partially resolve methods as these might have type arguments on their own\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let partialPrototype = (<FunctionPrototype>member).resolvePartial(typeArguments); // reports\r\n            if (partialPrototype) {\r\n              partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\r\n              instance.members.set(member.simpleName, partialPrototype);\r\n            }\r\n            break;\r\n          }\r\n\r\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\r\n          case ElementKind.PROPERTY: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let getterPrototype = assert((<Property>member).getterPrototype);\r\n            let setterPrototype = (<Property>member).setterPrototype;\r\n            let instanceProperty = new Property(\r\n              this.program,\r\n              member.simpleName,\r\n              internalName + INSTANCE_DELIMITER + member.simpleName,\r\n              this\r\n            );\r\n            let partialGetterPrototype = getterPrototype.resolvePartial(typeArguments);\r\n            if (!partialGetterPrototype) return null;\r\n            partialGetterPrototype.internalName = (\r\n              internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName\r\n            );\r\n            instanceProperty.getterPrototype = partialGetterPrototype;\r\n            if (setterPrototype) {\r\n              let partialSetterPrototype = setterPrototype.resolvePartial(typeArguments);\r\n              if (!partialSetterPrototype) return null;\r\n              partialSetterPrototype.internalName = (\r\n                internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName\r\n              );\r\n              instanceProperty.setterPrototype = partialSetterPrototype;\r\n            }\r\n            instance.members.set(member.simpleName, instanceProperty);\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Fully resolve operator overloads (don't have type parameters on their own)\r\n    for (let [kind, prototype] of this.overloadPrototypes) {\r\n      assert(kind != OperatorKind.INVALID);\r\n      let operatorInstance: Function | null;\r\n      if (prototype.is(CommonFlags.INSTANCE)) {\r\n        let operatorPartial = prototype.resolvePartial(typeArguments); // reports\r\n        if (!operatorPartial) continue;\r\n        operatorInstance = operatorPartial.resolve(); // reports\r\n      } else {\r\n        operatorInstance = prototype.resolve(); // reports\r\n      }\r\n      if (!operatorInstance) continue;\r\n      let overloads = instance.overloads;\r\n      if (!overloads) instance.overloads = overloads = new Map();\r\n      overloads.set(kind, operatorInstance);\r\n    }\r\n\r\n    instance.currentMemoryOffset = memoryOffset; // offsetof<this>() is the class' byte size in memory\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    alternativeReportNode: Node | null\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments(\r\n        this.declaration.typeParameters,\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        alternativeReportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    } else {\r\n      assert(typeArgumentNodes == null || !typeArgumentNodes.length);\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends Element {\r\n\r\n  kind = ElementKind.CLASS;\r\n\r\n  /** Prototype reference. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Resolved class type. */\r\n  type: Type;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n  /** Operator overloads. */\r\n  overloads: Map<OperatorKind,Function> | null = null;\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    prototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] | null = null,\r\n    base: Class | null = null\r\n  ) {\r\n    super(prototype.program, simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.typeArguments = typeArguments;\r\n    this.type = prototype.program.options.usizeType.asClass(this);\r\n    this.base = base;\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      let inheritedTypeArguments = base.contextualTypeArguments;\r\n      if (inheritedTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let [baseName, baseType] of inheritedTypeArguments) {\r\n          this.contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply instance-specific contextual type arguments\r\n    var declaration = this.prototype.declaration;\r\n    var i: i32, k: i32;\r\n    if (declaration) { // irrelevant for built-ins\r\n      let typeParameters = declaration.typeParameters;\r\n      if (typeArguments) {\r\n        if ((k = typeArguments.length) != typeParameters.length) {\r\n          throw new Error(\"type argument count mismatch\");\r\n        }\r\n        if (k) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (i = 0; i < k; ++i) {\r\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n          }\r\n        }\r\n      } else if (typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do if (current == target) return true;\r\n    while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  /** Looks up the operator overload of the specified kind. */\r\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\r\n    if (unchecked) {\r\n      switch (kind) {\r\n        case OperatorKind.INDEXED_GET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        case OperatorKind.INDEXED_SET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    var instance: Class | null = this;\r\n    do {\r\n      let overloads = instance.overloads;\r\n      if (overloads) {\r\n        let overload = overloads.get(kind);\r\n        if (overload) return overload;\r\n      }\r\n    } while (instance = instance.base);\r\n    return null;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype {\r\n\r\n  kind = ElementKind.INTERFACE_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: InterfaceDeclaration; // more specific\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: InterfaceDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName, declaration, decoratorFlags);\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class {\r\n\r\n  kind = ElementKind.INTERFACE;\r\n\r\n  /** Prototype reference. */\r\n  prototype: InterfacePrototype; // more specific\r\n  /** Base interface, if applcable. */\r\n  base: Interface | null; // more specific\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    prototype: InterfacePrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(prototype, simpleName, internalName, typeArguments, base);\r\n  }\r\n}\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  // categorical\r\n\r\n  /** This branch always returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This branch always returns a wrapped value. */\r\n  RETURNS_WRAPPED = 1 << 1,\r\n  /** This branch always throws. */\r\n  THROWS = 1 << 2,\r\n  /** This branch always breaks. */\r\n  BREAKS = 1 << 3,\r\n  /** This branch always continues. */\r\n  CONTINUES = 1 << 4,\r\n  /** This branch always allocates. Constructors only. */\r\n  ALLOCATES = 1 << 5,\r\n\r\n  // conditional\r\n\r\n  /** This branch conditionally returns in a child branch. */\r\n  CONDITIONALLY_RETURNS = 1 << 6,\r\n  /** This branch conditionally throws in a child branch. */\r\n  CONDITIONALLY_THROWS = 1 << 7,\r\n  /** This branch conditionally breaks in a child branch. */\r\n  CONDITIONALLY_BREAKS = 1 << 8,\r\n  /** This branch conditionally continues in a child branch. */\r\n  CONDITIONALLY_CONTINUES = 1 << 9,\r\n  /** This branch conditionally allocates in a child branch. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 10,\r\n\r\n  // special\r\n\r\n  /** This branch is part of inlining a function. */\r\n  INLINE_CONTEXT = 1 << 11,\r\n  /** This branch explicitly requests no bounds checking. */\r\n  UNCHECKED_CONTEXT = 1 << 12,\r\n\r\n  // masks\r\n\r\n  /** Any terminating flag. */\r\n  ANY_TERMINATING = FlowFlags.RETURNS\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = FlowFlags.RETURNS\r\n                  | FlowFlags.RETURNS_WRAPPED\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES\r\n                  | FlowFlags.ALLOCATES,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\r\n                  | FlowFlags.CONDITIONALLY_THROWS\r\n                  | FlowFlags.CONDITIONALLY_BREAKS\r\n                  | FlowFlags.CONDITIONALLY_CONTINUES\r\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  currentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** The label we break to when encountering a return statement, when inlining. */\r\n  returnLabel: string | null;\r\n  /** The current return type. */\r\n  returnType: Type;\r\n  /** The current contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n  /** Local variable wrap states for the first 64 locals. */\r\n  wrappedLocals: I64;\r\n  /** Local variable wrap states for locals with index >= 64. */\r\n  wrappedLocalsExt: I64[] | null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(currentFunction: Function): Flow {\r\n    var parentFlow = new Flow();\r\n    parentFlow.parent = null;\r\n    parentFlow.flags = FlowFlags.NONE;\r\n    parentFlow.currentFunction = currentFunction;\r\n    parentFlow.continueLabel = null;\r\n    parentFlow.breakLabel = null;\r\n    parentFlow.returnLabel = null;\r\n    parentFlow.returnType = currentFunction.signature.returnType;\r\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\r\n    parentFlow.wrappedLocals = i64_new(0);\r\n    parentFlow.wrappedLocalsExt = null;\r\n    return parentFlow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this flow has one of the specified flags. */\r\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Forks this flow to a child flow. */\r\n  fork(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.currentFunction = this.currentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    branch.returnLabel = this.returnLabel;\r\n    branch.returnType = this.returnType;\r\n    branch.contextualTypeArguments = this.contextualTypeArguments;\r\n    branch.wrappedLocals = this.wrappedLocals;\r\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\r\n    return branch;\r\n  }\r\n\r\n  /** Frees this flow's scoped variables. */\r\n  free(): Flow {\r\n    var parent = assert(this.parent);\r\n    if (this.scopedLocals) { // free block-scoped locals\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          this.currentFunction.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n    return parent;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(type: Type, name: string, wrapped: bool, declaration?: VariableDeclaration): Local {\r\n    var scopedLocal = this.currentFunction.getTempLocal(type, false);\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (declaration) {\r\n          this.currentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range\r\n          );\r\n        } else assert(false);\r\n        return existingLocal;\r\n      }\r\n    }\r\n    scopedLocal.set(CommonFlags.SCOPED);\r\n    this.scopedLocals.set(name, scopedLocal);\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.setLocalWrapped(scopedLocal.index, wrapped);\r\n    }\r\n    return scopedLocal;\r\n  }\r\n\r\n  /** Adds a new scoped alias for the specified local. */\r\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        let declaration = existingLocal.declaration;\r\n        if (declaration) {\r\n          this.currentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range\r\n          );\r\n        } else assert(false);\r\n        return existingLocal;\r\n      }\r\n    }\r\n    assert(index < this.currentFunction.localsByIndex.length);\r\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\r\n      this.currentFunction.program,\r\n      name,\r\n      index,\r\n      type,\r\n      null\r\n    );\r\n    this.scopedLocals.set(name, scopedAlias);\r\n    return scopedAlias;\r\n  }\r\n\r\n  /** Gets the local of the specified name in the current scope. */\r\n  getScopedLocal(name: string): Local | null {\r\n    var local: Local | null;\r\n    var current: Flow | null = this;\r\n    do {\r\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\r\n        return local;\r\n      }\r\n    } while (current = current.parent);\r\n    return this.currentFunction.localsByName.get(name);\r\n  }\r\n\r\n  /** Tests if the local with the specified index is considered wrapped. */\r\n  isLocalWrapped(index: i32): bool {\r\n    var map: I64;\r\n    var ext: I64[] | null;\r\n    if (index < 64) {\r\n      if (index < 0) return true; // inlined constant\r\n      map = this.wrappedLocals;\r\n    } else if (ext = this.wrappedLocalsExt) {\r\n      let i = ((index - 64) / 64) | 0;\r\n      if (i >= ext.length) return false;\r\n      map = ext[i];\r\n      index -= (i + 1) * 64;\r\n    } else {\r\n      return false;\r\n    }\r\n    return i64_ne(\r\n      i64_and(\r\n        map,\r\n        i64_shl(\r\n          i64_one,\r\n          i64_new(index)\r\n        )\r\n      ),\r\n      i64_zero\r\n    );\r\n  }\r\n\r\n  /** Sets if the local with the specified index is considered wrapped. */\r\n  setLocalWrapped(index: i32, wrapped: bool): void {\r\n    var map: I64;\r\n    var off: i32 = -1;\r\n    if (index < 64) {\r\n      if (index < 0) return; // inlined constant\r\n      map = this.wrappedLocals;\r\n    } else {\r\n      let ext = this.wrappedLocalsExt;\r\n      off = ((index - 64) / 64) | 0;\r\n      if (!ext) {\r\n        this.wrappedLocalsExt = ext = new Array(off + 1);\r\n        ext.length = 0;\r\n      }\r\n      while (ext.length <= off) ext.push(i64_new(0));\r\n      map = ext[off];\r\n      index -= (off + 1) * 64;\r\n    }\r\n    map = wrapped\r\n      ? i64_or(\r\n          map,\r\n          i64_shl(\r\n            i64_one,\r\n            i64_new(index)\r\n          )\r\n        )\r\n      : i64_and(\r\n          map,\r\n          i64_not(\r\n            i64_shl(\r\n              i64_one,\r\n              i64_new(index)\r\n            )\r\n          )\r\n        );\r\n    if (off >= 0) (<I64[]>this.wrappedLocalsExt)[off] = map;\r\n    else this.wrappedLocals = map;\r\n  }\r\n\r\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\r\n  inherit(other: Flow): void {\r\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\r\n    this.wrappedLocals = other.wrappedLocals;\r\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\r\n  }\r\n\r\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\r\n  inheritConditional(other: Flow): void {\r\n    if (other.is(FlowFlags.RETURNS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n    }\r\n    if (other.is(FlowFlags.THROWS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\r\n    }\r\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n    }\r\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n    }\r\n    if (other.is(FlowFlags.ALLOCATES)) {\r\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n    }\r\n  }\r\n\r\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\r\n  inheritMutual(left: Flow, right: Flow): void {\r\n    // categorical flags set in both arms\r\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\r\n\r\n    // conditional flags set in at least one arm\r\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\r\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\r\n\r\n    // locals wrapped in both arms\r\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\r\n    var leftExt = left.wrappedLocalsExt;\r\n    var rightExt = right.wrappedLocalsExt;\r\n    if (leftExt != null && rightExt != null) {\r\n      let thisExt = this.wrappedLocalsExt;\r\n      let minLength = min(leftExt.length, rightExt.length);\r\n      if (minLength) {\r\n        if (!thisExt) thisExt = new Array(minLength);\r\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\r\n        for (let i = 0; i < minLength; ++i) {\r\n          thisExt[i] = i64_and(\r\n            leftExt[i],\r\n            rightExt[i]\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\r\n   * expression might already have overflown and returns `false` only if the operation neglects\r\n   * any possibly combination of garbage bits being present.\r\n   */\r\n  canOverflow(expr: ExpressionRef, type: Type): bool {\r\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\r\n    // opportunities here, obviously.\r\n    assert(type != Type.void);\r\n\r\n    // types other than i8, u8, i16, u16 and bool do not overflow\r\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\r\n\r\n    var operand: ExpressionRef;\r\n    switch (getExpressionId(expr)) {\r\n\r\n      // overflows if the local isn't wrapped or the conversion does\r\n      case ExpressionId.GetLocal: {\r\n        let currentFunction = this.currentFunction;\r\n        let local = currentFunction.localsByIndex[getGetLocalIndex(expr)];\r\n        return !currentFunction.flow.isLocalWrapped(local.index)\r\n            || canConversionOverflow(local.type, type);\r\n      }\r\n\r\n      // overflows if the value does\r\n      case ExpressionId.SetLocal: {\r\n        assert(isTeeLocal(expr));\r\n        return this.canOverflow(getSetLocalValue(expr), type);\r\n      }\r\n\r\n      // never overflows because globals are wrapped on set\r\n      case ExpressionId.GetGlobal: return false;\r\n\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64:\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64:\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtU32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtU64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64:\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeU32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeU64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64:\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtU32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtU64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64:\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeU32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeU64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: return false;\r\n\r\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\r\n          case BinaryOp.MulI32: {\r\n            return !(\r\n              (\r\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryRight(expr), type)\r\n                  )\r\n                )\r\n              ) || (\r\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryLeft(expr), type)\r\n                  )\r\n                )\r\n              )\r\n            );\r\n          }\r\n\r\n          // result won't overflow if one side is a constant less than this type's mask or one side\r\n          // is wrapped\r\n          case BinaryOp.AndI32: {\r\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\r\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\r\n            return !(\r\n              (\r\n                (\r\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              ) || (\r\n                (\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              )\r\n            );\r\n          }\r\n\r\n          // overflows if the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShlI32: {\r\n            let shift = 32 - type.size;\r\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\r\n                || getConstValueI32(operand) < shift;\r\n          }\r\n\r\n          // overflows if the value does and the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShrI32: {\r\n            let shift = 32 - type.size;\r\n            return this.canOverflow(getBinaryLeft(expr), type) && (\r\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\r\n              getConstValueI32(operand) < shift\r\n            );\r\n          }\r\n\r\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\r\n          // wrapped, it can't overflow.\r\n          case BinaryOp.ShrU32: {\r\n            let shift = 32 - type.size;\r\n            return type.is(TypeFlags.SIGNED)\r\n              ? !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) > shift // must clear MSB\r\n                )\r\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) >= shift // can leave MSB\r\n                );\r\n          }\r\n\r\n          // overflows if any side does\r\n          case BinaryOp.DivU32:\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemU32: {\r\n            return this.canOverflow(getBinaryLeft(expr), type)\r\n                || this.canOverflow(getBinaryRight(expr), type);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: return false;\r\n\r\n          // overflow if the maximum result (32) cannot be represented in the target type\r\n          case UnaryOp.ClzI32:\r\n          case UnaryOp.CtzI32:\r\n          case UnaryOp.PopcntI32: return type.size < 7;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the value cannot be represented in the target type\r\n      case ExpressionId.Const: {\r\n        let value: i32 = 0;\r\n        switch (getExpressionType(expr)) {\r\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\r\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\r\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\r\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\r\n          default: assert(false);\r\n        }\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\r\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\r\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\r\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\r\n          case TypeKind.BOOL: return (value & ~1) != 0;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the conversion does\r\n      case ExpressionId.Load: {\r\n        let fromType: Type;\r\n        switch (getLoadBytes(expr)) {\r\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\r\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\r\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\r\n        }\r\n        return canConversionOverflow(fromType, type);\r\n      }\r\n\r\n      // overflows if the result does, which is either\r\n      // - the last expression of the block, by contract, if the block doesn't have a label\r\n      // - the last expression or the value of an inner br if the block has a label (TODO)\r\n      case ExpressionId.Block: {\r\n        if (!getBlockName(expr)) {\r\n          let size = assert(getBlockChildCount(expr));\r\n          let last = getBlockChild(expr, size - 1);\r\n          return this.canOverflow(last, type);\r\n        }\r\n        // actually, brs with a value that'd be handled here is not emitted atm\r\n        break;\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.If: {\r\n        return this.canOverflow(getIfTrue(expr), type)\r\n            || this.canOverflow(assert(getIfFalse(expr)), type);\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.Select: {\r\n        return this.canOverflow(getSelectThen(expr), type)\r\n            || this.canOverflow(getSelectElse(expr), type);\r\n      }\r\n\r\n      // overflows if the call does not return a wrapped value or the conversion does\r\n      case ExpressionId.Call: {\r\n        let program = this.currentFunction.program;\r\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\r\n        assert(instance.kind == ElementKind.FUNCTION);\r\n        let returnType = (<Function>instance).signature.returnType;\r\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\r\n            || canConversionOverflow(returnType, type);\r\n      }\r\n\r\n      // doesn't technically overflow\r\n      case ExpressionId.Unreachable: return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\r\n  finalize(): void {\r\n    assert(this.parent == null); // must be the topmost parent flow\r\n    this.continueLabel = null;\r\n    this.breakLabel = null;\r\n    this.returnLabel = null;\r\n    this.contextualTypeArguments = null;\r\n  }\r\n}\r\n\r\n/** Tests if a conversion from one type to another can technically overflow. */\r\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\r\n  var fromSize = fromType.byteSize;\r\n  var toSize = toType.byteSize;\r\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\r\n      || fromSize > toSize\r\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\r\n}\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a pointer type. */\r\n  POINTER = 1 << 4,\r\n  /** Is smaller than 32-bits. */\r\n  SHORT = 1 << 5,\r\n  /** Is larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9\r\n}\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying signature reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n  /** Cached nullable type, if non-nullable. */\r\n  private cachedNullableType: Type | null = null;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Returns the closest int type representing this type. */\r\n  get intType(): Type {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return Type.i8;\r\n      case TypeKind.I16: return Type.i16;\r\n      case TypeKind.F32:\r\n      case TypeKind.I32: return Type.i32;\r\n      case TypeKind.F64:\r\n      case TypeKind.I64: return Type.i64;\r\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\r\n      case TypeKind.U8: return Type.u8;\r\n      case TypeKind.U16: return Type.u16;\r\n      case TypeKind.U32: return Type.u32;\r\n      case TypeKind.U64: return Type.u64;\r\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\r\n      case TypeKind.BOOL:\r\n      default: return Type.i32;\r\n    }\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\r\n    return ~0 >>> (targetType.size - size);\r\n  }\r\n\r\n  /** Tests if this type has (all of) the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.cachedNullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.cachedNullableType.nonNullableType = this;\r\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\r\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.cachedNullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to a target of the specified type. */\r\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\r\n          if (currentClass = this.classReference) {\r\n            if (targetClass = target.classReference) {\r\n              return currentClass.isAssignableTo(targetClass);\r\n            }\r\n          } else if (currentFunction = this.signatureReference) {\r\n            if (targetFunction = target.signatureReference) {\r\n              return currentFunction.isAssignableTo(targetFunction);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (!signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Determines the common compatible type of two types, if any. */\r\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\r\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to its TypeScript representation. */\r\n  toString(kindOnly: bool = false): string {\r\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\r\n      let classReference = this.classReference;\r\n      if (classReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? classReference.toString() + \" | null\"\r\n          : classReference.toString();\r\n      }\r\n      let signatureReference = this.signatureReference;\r\n      if (signatureReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\r\n          : signatureReference.toString(true);\r\n      }\r\n      assert(false);\r\n    }\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: return \"usize\";\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      default: assert(false);\r\n      case TypeKind.VOID: return \"void\";\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(0);\r\n      case TypeKind.F32: return module.createF32(0);\r\n      case TypeKind.F64: return module.createF64(0);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(1);\r\n      case TypeKind.F32: return module.createF32(1);\r\n      case TypeKind.F64: return module.createF64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(-1, -1);\r\n      case TypeKind.F32: return module.createF32(-1);\r\n      case TypeKind.F64: return module.createF64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      default: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"I\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"F\";\r\n      case TypeKind.VOID: return \"v\";\r\n    }\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\r\n  return sb.join(\",\");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getDefaultParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) return false; // TODO\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) return false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = target.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts a signature to a function type string. */\r\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\r\n    var sb = [];\r\n    if (thisType) sb.push(thisType.toSignatureString());\r\n    if (parameterTypes) {\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    sb.push(returnType.toSignatureString());\r\n    return sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(includeThis: bool = false): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      if (includeThis) {\r\n        sb.push(\"this: \");\r\n        sb.push(thisType.toString());\r\n        index = 1;\r\n      }\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) sb.push((<string[]>names)[i]);\r\n        else sb.push(getDefaultParameterName(i));\r\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\r\n        else sb.push(\": \");\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached default parameter names used where names are unknown.\r\nvar cachedDefaultParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached default parameter name for the specified index. */\r\nexport function getDefaultParameterName(index: i32): string {\r\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\r\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\r\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedDefaultParameterNames[index - 1];\r\n}\r\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport enum IdentifierHandling {\r\n  DEFAULT,\r\n  PREFER,\r\n  ALWAYS\r\n}\r\n\r\nexport function tokenFromKeyword(text: string): Token {\r\n  assert(text.length);\r\n  switch (text.charCodeAt(0)) {\r\n    case CharCode.a: {\r\n      switch (text) {\r\n        case \"abstract\": return Token.ABSTRACT;\r\n        case \"as\": return Token.AS;\r\n        case \"async\": return Token.ASYNC;\r\n        case \"await\": return Token.AWAIT;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.b: {\r\n      switch (text) {\r\n        case \"break\": return Token.BREAK;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.c: {\r\n      switch (text) {\r\n        case \"case\": return Token.CASE;\r\n        case \"catch\": return Token.CATCH;\r\n        case \"class\": return Token.CLASS;\r\n        case \"continue\": return Token.CONTINUE;\r\n        case \"const\": return Token.CONST;\r\n        case \"constructor\": return Token.CONSTRUCTOR;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.d: {\r\n      switch (text) {\r\n        case \"debugger\": return Token.DEBUGGER;\r\n        case \"declare\": return Token.DECLARE;\r\n        case \"default\": return Token.DEFAULT;\r\n        case \"delete\": return Token.DELETE;\r\n        case \"do\": return Token.DO;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.e: {\r\n      switch (text) {\r\n        case \"else\": return Token.ELSE;\r\n        case \"enum\": return Token.ENUM;\r\n        case \"export\": return Token.EXPORT;\r\n        case \"extends\": return Token.EXTENDS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.f: {\r\n      switch (text) {\r\n        case \"false\": return Token.FALSE;\r\n        case \"finally\": return Token.FINALLY;\r\n        case \"for\": return Token.FOR;\r\n        case \"from\": return Token.FROM;\r\n        case \"function\": return Token.FUNCTION;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.g: {\r\n      switch (text) {\r\n        case \"get\": return Token.GET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.i: {\r\n      switch (text) {\r\n        case \"if\": return Token.IF;\r\n        case \"implements\": return Token.IMPLEMENTS;\r\n        case \"import\": return Token.IMPORT;\r\n        case \"in\": return Token.IN;\r\n        case \"instanceof\": return Token.INSTANCEOF;\r\n        case \"interface\": return Token.INTERFACE;\r\n        case \"is\": return Token.IS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.k: {\r\n      switch (text) {\r\n        case \"keyof\": return Token.KEYOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.l: {\r\n      switch (text) {\r\n        case \"let\": return Token.LET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.m: {\r\n      switch (text) {\r\n        case \"module\": return Token.MODULE;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.n: {\r\n      switch (text) {\r\n        case \"namespace\": return Token.NAMESPACE;\r\n        case \"new\": return Token.NEW;\r\n        case \"null\": return Token.NULL;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.o: {\r\n      switch (text) {\r\n        case \"of\": return Token.OF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.p: {\r\n      switch (text) {\r\n        case \"package\": return Token.PACKAGE;\r\n        case \"private\": return Token.PRIVATE;\r\n        case \"protected\": return Token.PROTECTED;\r\n        case \"public\": return Token.PUBLIC;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.r: {\r\n      switch (text) {\r\n        case \"readonly\": return Token.READONLY;\r\n        case \"return\": return Token.RETURN;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.s: {\r\n      switch (text) {\r\n        case \"set\": return Token.SET;\r\n        case \"static\": return Token.STATIC;\r\n        case \"super\": return Token.SUPER;\r\n        case \"switch\": return Token.SWITCH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.t: {\r\n      switch (text) {\r\n        case \"this\": return Token.THIS;\r\n        case \"throw\": return Token.THROW;\r\n        case \"true\": return Token.TRUE;\r\n        case \"try\": return Token.TRY;\r\n        case \"type\": return Token.TYPE;\r\n        case \"typeof\": return Token.TYPEOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.v: {\r\n      switch (text) {\r\n        case \"var\": return Token.VAR;\r\n        case \"void\": return Token.VOID;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.w: {\r\n      switch (text) {\r\n        case \"while\": return Token.WHILE;\r\n        case \"with\": return Token.WITH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.y: {\r\n      switch (text) {\r\n        case \"yield\": return Token.YIELD;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return Token.INVALID;\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.FOR:\r\n    case Token.GET:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics ? diagnostics : new Array();\r\n\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < this.end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(identifierHandling);\r\n  }\r\n\r\n  private unsafeNext(\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxTokenLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (\r\n            ++this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          ) {\r\n            ++this.pos;\r\n          }\r\n          break;\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < this.end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < this.end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < this.end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < this.end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < this.end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFromKeyword(keywordText);\r\n              if (\r\n                keywordToken != Token.INVALID &&\r\n                identifierHandling !== IdentifierHandling.ALWAYS &&\r\n                !(\r\n                  identifierHandling === IdentifierHandling.PREFER &&\r\n                  tokenIsAlsoIdentifier(keywordToken)\r\n                )\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        while (--this.tokenPos > posBefore) {\r\n          if (isLineBreak(text.charCodeAt(this.tokenPos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skipIdentifier(): bool {\r\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.PREFER);\r\n  }\r\n\r\n  skipIdentifierName(): bool {\r\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.ALWAYS);\r\n  }\r\n\r\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    while (\r\n      ++this.pos < this.end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c)) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    if (++this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.SLASH && !escaped) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var flags = 0;\r\n    while (this.pos < this.end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.X:\r\n        case CharCode.x:\r\n        case CharCode.B:\r\n        case CharCode.b:\r\n        case CharCode.O:\r\n        case CharCode.o: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < this.end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\r\n        return false;\r\n      }\r\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\r\n      // does not validate separator placement (this is done in readXYInteger)\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.X:\r\n        case CharCode.x: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.B:\r\n        case CharCode.b: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.O:\r\n        case CharCode.o: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_16 = i64_new(16, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 16 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = value * 16 + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.A, 0)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = value * 16 + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.a, 0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_10 = i64_new(10, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_8 = i64_new(8, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = value * 8 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_8),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_2 = i64_new(2, 0);\r\n    var i64_1 = i64_new(1, 0);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode._0) {\r\n        // value = value * 2;\r\n        value = i64_mul(\r\n          value,\r\n          i64_2\r\n        );\r\n      } else if (c == CharCode._1) {\r\n        // value = value * 2 + 1;\r\n        value = i64_add(\r\n          i64_mul(value, i64_2),\r\n          i64_1\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    // TODO: numeric separators (parseFloat can't handle these)\r\n    var start = this.pos;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.E || c == CharCode.e) {\r\n        if (\r\n          ++this.pos < this.end && (\r\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\r\n            text.charCodeAt(this.pos) == CharCode.PLUS\r\n          ) &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = value * 16 + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = value * 16 + 10 + c - CharCode.A;\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = value * 16 + 10 + c - CharCode.a;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var text = this.source.text;\r\n    if (this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, this.end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\r\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Enum_member_must_have_initializer = 1061,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    default: return \"\";\n  }\n}\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  compileCall as compileBuiltinCall,\r\n  compileAllocate as compileBuiltinAllocate,\r\n  compileAbort as compileBuiltinAbort\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getFunctionBody,\r\n  getGetLocalIndex,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  INNER_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  Namespace,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  FlowFlags,\r\n  ConstantValueKind,\r\n  Flow,\r\n  OperatorKind,\r\n  DecoratorFlags\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  TypeNode,\r\n  Source,\r\n  Range,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FunctionDeclaration,\r\n  ForStatement,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InstanceOfExpression,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableDeclaration,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n  FieldDeclaration,\r\n\r\n  nodeIsConstantValue,\r\n  isLastStatement\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64\r\n} from \"./util\";\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64\r\n}\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, compiles everything instead of just reachable code. */\r\n  noTreeShaking: bool = false;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: u32 = 0;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** Global aliases. */\r\n  globalAliases: Map<string,string> | null = null;\r\n  /** Additional features to activate. */\r\n  features: Feature = Feature.NONE;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n\r\n  /** Tests if a specific feature is activated. */\r\n  hasFeature(feature: Feature): bool {\r\n    return (this.features & feature) != 0;\r\n  }\r\n}\r\n\r\n/** Indicates specific features to activate. */\r\nexport const enum Feature {\r\n  /** No additional features. */\r\n  NONE = 0,\r\n  /** Sign extension operations. */\r\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\r\n  /** Mutable global imports and exports. */\r\n  MUTABLE_GLOBAL = 1 << 1  // see: https://github.com/WebAssembly/mutable-global\r\n}\r\n\r\n/** Indicates the desired kind of a conversion. */\r\nexport const enum ConversionKind {\r\n  /** No conversion. */\r\n  NONE,\r\n  /** Implicit conversion. */\r\n  IMPLICIT,\r\n  /** Explicit conversion. */\r\n  EXPLICIT\r\n}\r\n\r\n/** Indicates the desired wrap mode of a conversion. */\r\nexport const enum WrapMode {\r\n  /** No wrapping. */\r\n  NONE,\r\n  /** Wrap small integer values. */\r\n  WRAP\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current function in compilation. */\r\n  currentFunction: Function;\r\n  /** Outer function in compilation, if compiling a function expression. */\r\n  outerFunction: Function | null = null;\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function being compiled. */\r\n  startFunctionInstance: Function;\r\n  /** Start function statements. */\r\n  startFunctionBody: ExpressionRef[];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = [];\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: Function[] = [];\r\n  /** Argument count helper global. */\r\n  argcVar: GlobalRef = 0;\r\n  /** Argument count helper setter. */\r\n  argcSet: FunctionRef = 0;\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\r\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\r\n      max(options.memoryBase, 8)\r\n    );\r\n    this.module = Module.create();\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the start function\r\n    var startFunctionInstance = new Function(program.startFunction, \"start\", new Signature([], Type.void));\r\n    this.startFunctionInstance = startFunctionInstance;\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.startFunctionBody = startFunctionBody;\r\n    this.currentFunction = startFunctionInstance;\r\n\r\n    // compile entry file(s) while traversing reachable elements\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].isEntry) this.compileSource(sources[i]);\r\n    }\r\n\r\n    // compile the start function if not empty or called by main\r\n    if (startFunctionBody.length || program.mainFunction !== null) {\r\n      let signature = startFunctionInstance.signature;\r\n      let funcRef = module.addFunction(\r\n        startFunctionInstance.internalName,\r\n        this.ensureFunctionType(\r\n          signature.parameterTypes,\r\n          signature.returnType,\r\n          signature.thisType\r\n        ),\r\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n        module.createBlock(null, startFunctionBody)\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n      if (!program.mainFunction) module.setStart(funcRef);\r\n    }\r\n\r\n    // set up static memory segments and the heap base pointer\r\n    var memoryOffset = this.memoryOffset;\r\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n    this.memoryOffset = memoryOffset;\r\n    if (options.isWasm64) {\r\n      module.addGlobal(\r\n        \"HEAP_BASE\",\r\n        NativeType.I64,\r\n        false,\r\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n      );\r\n    } else {\r\n      module.addGlobal(\r\n        \"HEAP_BASE\",\r\n        NativeType.I32,\r\n        false,\r\n        module.createI32(i64_low(memoryOffset))\r\n      );\r\n    }\r\n\r\n    // determine initial page size\r\n    var pages = i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0));\r\n    module.setMemory(\r\n      i64_low(pages),\r\n      this.options.isWasm64\r\n        ? Module.MAX_MEMORY_WASM64\r\n        : Module.MAX_MEMORY_WASM32,\r\n      this.memorySegments,\r\n      options.target,\r\n      \"memory\"\r\n    );\r\n\r\n    // import memory if requested (default memory is named '0' by Binaryen)\r\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    var functionTableSize = functionTable.length;\r\n    var functionTableExported = false;\r\n    if (functionTableSize) {\r\n      let entries = new Array<FunctionRef>(functionTableSize);\r\n      for (let i = 0; i < functionTableSize; ++i) {\r\n        entries[i] = functionTable[i].ref;\r\n      }\r\n      module.setFunctionTable(entries);\r\n      module.addTableExport(\"0\", \"table\");\r\n      functionTableExported = true;\r\n    }\r\n\r\n    // import table if requested (default table is named '0' by Binaryen)\r\n    if (options.importTable) {\r\n      module.addTableImport(\"0\", \"env\", \"table\");\r\n      if (!functionTableExported) module.addTableExport(\"0\", \"table\");\r\n    }\r\n\r\n    return module;\r\n  }\r\n\r\n  // sources\r\n\r\n  /** Compiles a source by looking it up by path first. */\r\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\r\n    if (source) this.compileSource(source);\r\n    else {\r\n      this.error(\r\n        DiagnosticCode.File_0_not_found,\r\n        reportNode.range, normalizedPathWithoutExtension\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Compiles a source. */\r\n  compileSource(source: Source): void {\r\n    if (source.is(CommonFlags.COMPILED)) return;\r\n    source.set(CommonFlags.COMPILED);\r\n\r\n    // compile top-level statements\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    var isEntry = source.isEntry;\r\n    var startFunctionInstance = this.startFunctionInstance;\r\n    var startFunctionBody = this.startFunctionBody;\r\n    var statements = source.statements;\r\n    for (let i = 0, k = statements.length; i < k; ++i) {\r\n      let statement = statements[i];\r\n      switch (statement.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<ClassDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: break;\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<FunctionDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.IMPORT: {\r\n          this.compileSourceByPath(\r\n            (<ImportStatement>statement).normalizedPath,\r\n            (<ImportStatement>statement).path\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\r\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\r\n          if (variableInit) startFunctionBody.push(variableInit);\r\n          break;\r\n        }\r\n        case NodeKind.EXPORT: {\r\n          if ((<ExportStatement>statement).normalizedPath != null) {\r\n            this.compileSourceByPath(\r\n              <string>(<ExportStatement>statement).normalizedPath,\r\n              <StringLiteralExpression>(<ExportStatement>statement).path\r\n            );\r\n          }\r\n          if (noTreeShaking || isEntry) {\r\n            this.compileExportStatement(<ExportStatement>statement);\r\n          }\r\n          break;\r\n        }\r\n        default: { // otherwise a top-level statement that is part of the start function's body\r\n          let previousFunction = this.currentFunction;\r\n          this.currentFunction = startFunctionInstance;\r\n          startFunctionBody.push(this.compileStatement(statement));\r\n          this.currentFunction = previousFunction;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // globals\r\n\r\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\r\n    // look up the initialized program element\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.GLOBAL);\r\n    if (!this.compileGlobal(<Global>element)) return null; // reports\r\n    return <Global>element;\r\n  }\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED)) return true;\r\n    global.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var declaration = global.declaration;\r\n    var initExpr: ExpressionRef = 0;\r\n\r\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\r\n      if (declaration) {\r\n\r\n        // resolve now if annotated\r\n        if (declaration.type) {\r\n          let resolvedType = this.program.resolveType(declaration.type); // reports\r\n          if (!resolvedType) return false;\r\n          if (resolvedType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              declaration.type.range\r\n            );\r\n            return false;\r\n          }\r\n          global.type = resolvedType;\r\n\r\n        // infer from initializer if not annotated\r\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\r\n          initExpr = this.compileExpressionRetainType( // reports\r\n            declaration.initializer,\r\n            Type.void,\r\n            WrapMode.WRAP\r\n          );\r\n          if (this.currentType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\r\n            );\r\n            return false;\r\n          }\r\n          global.type = this.currentType;\r\n\r\n        // must either be annotated or have an initializer\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            declaration.name.range.atEnd\r\n          );\r\n          return false;\r\n        }\r\n      } else {\r\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\r\n      }\r\n    }\r\n\r\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\r\n    if (global.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) return true;\r\n\r\n    var nativeType = global.type.toNativeType();\r\n    var isConstant = global.isAny(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n\r\n    // handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // constant global\r\n      if (isConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          global.parent\r\n            ? global.parent.simpleName\r\n            : \"env\",\r\n          global.simpleName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          assert(declaration).range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // the MVP does not yet support initializer expressions other than constant values (and\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // inlined constant can be compiled as-is\r\n    if (global.is(CommonFlags.INLINED)) {\r\n      initExpr = this.compileInlineConstant(global, global.type, true);\r\n\r\n    } else {\r\n\r\n      // evaluate initializer if present\r\n      if (declaration && declaration.initializer) {\r\n        if (!initExpr) {\r\n          initExpr = this.compileExpression(\r\n            declaration.initializer,\r\n            global.type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP\r\n          );\r\n        }\r\n\r\n        // check if the initializer is constant\r\n        if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n\r\n          // if a constant global, check if the initializer becomes constant after precompute\r\n          if (isConstant) {\r\n            initExpr = this.precomputeExpressionRef(initExpr);\r\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                declaration.range\r\n              );\r\n              initializeInStart = true;\r\n            }\r\n          } else {\r\n            initializeInStart = true;\r\n          }\r\n        }\r\n\r\n      // initialize to zero if there's no initializer\r\n      } else {\r\n        initExpr = global.type.toNativeZero(module);\r\n      }\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\r\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\r\n\r\n    } else { // compile as-is\r\n\r\n      if (isConstant) {\r\n        let exprType = getExpressionType(initExpr);\r\n        switch (exprType) {\r\n          case NativeType.I32: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\r\n            break;\r\n          }\r\n          case NativeType.I64: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(\r\n              getConstValueI64Low(initExpr),\r\n              getConstValueI64High(initExpr)\r\n            );\r\n            break;\r\n          }\r\n          case NativeType.F32: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = getConstValueF32(initExpr);\r\n            break;\r\n          }\r\n          case NativeType.F64: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = getConstValueF64(initExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return false;\r\n          }\r\n        }\r\n        global.set(CommonFlags.INLINED); // inline the value from now on\r\n        if (global.is(CommonFlags.MODULE_EXPORT)) {\r\n          module.addGlobal(internalName, nativeType, false, initExpr);\r\n          module.addGlobalExport(internalName, mangleExportName(global));\r\n        } else if (declaration && declaration.isTopLevel) { // might become re-exported\r\n          module.addGlobal(internalName, nativeType, false, initExpr);\r\n        }\r\n\r\n      } else /* mutable */ {\r\n        module.addGlobal(internalName, nativeType, !isConstant, initExpr);\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // enums\r\n\r\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.ENUM);\r\n    if (!this.compileEnum(<Enum>element)) return null;\r\n    return <Enum>element;\r\n  }\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueDeclaration = val.declaration;\r\n        val.set(CommonFlags.COMPILED);\r\n        if (val.is(CommonFlags.INLINED)) {\r\n          if (element.declaration.isTopLevelExport) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              false, // constant\r\n              module.createI32(val.constantValue)\r\n            );\r\n          }\r\n        } else {\r\n          let initExpr: ExpressionRef;\r\n          if (valueDeclaration.value) {\r\n            initExpr = this.compileExpression(\r\n              <Expression>valueDeclaration.value,\r\n              Type.i32,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE\r\n            );\r\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n              initExpr = this.precomputeExpressionRef(initExpr);\r\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n                if (element.is(CommonFlags.CONST)) {\r\n                  this.warning(\r\n                    DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                    valueDeclaration.range\r\n                  );\r\n                }\r\n                initInStart = true;\r\n              }\r\n            }\r\n          } else if (previousValue == null) {\r\n            initExpr = module.createI32(0);\r\n          } else if (previousValue.is(CommonFlags.INLINED)) {\r\n            initExpr = module.createI32(previousValue.constantValue + 1);\r\n          } else {\r\n            // in TypeScript this errors with TS1061, but actually we can do:\r\n            initExpr = module.createBinary(BinaryOp.AddI32,\r\n              module.createGetGlobal(previousValue.internalName, NativeType.I32),\r\n              module.createI32(1)\r\n            );\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                valueDeclaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n          if (initInStart) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              true, // mutable\r\n              module.createI32(0)\r\n            );\r\n            this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\r\n          } else {\r\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n            if (getExpressionType(initExpr) == NativeType.I32) {\r\n              val.constantValue = getConstValueI32(initExpr);\r\n              val.set(CommonFlags.INLINED);\r\n            } else {\r\n              assert(false);\r\n              val.constantValue = 0;\r\n            }\r\n          }\r\n        }\r\n        previousValue = <EnumValue>val;\r\n\r\n        // export values if the enum is exported\r\n        if (element.is(CommonFlags.MODULE_EXPORT)) {\r\n          if (member.is(CommonFlags.INLINED) || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n            module.addGlobalExport(member.internalName, mangleExportName(member));\r\n          } else if (valueDeclaration) {\r\n            this.warning(\r\n              DiagnosticCode.Cannot_export_a_mutable_global,\r\n              valueDeclaration.range\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // functions\r\n\r\n  /** Compiles a top-level function given its declaration. */\r\n  compileFunctionDeclaration(\r\n    declaration: FunctionDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    return this.compileFunctionUsingTypeArguments( // reports\r\n      <FunctionPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      null, // no outer scope (is top level)\r\n      (<FunctionPrototype>element).declaration.name\r\n    );\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    outerScope: Flow | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      reportNode\r\n    );\r\n    if (!instance) return null;\r\n    instance.outerScope = outerScope;\r\n    if (!this.compileFunction(instance)) return null; // reports\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  private ensureFunctionType(\r\n    parameterTypes: Type[] | null,\r\n    returnType: Type,\r\n    thisType: Type | null = null\r\n  ): FunctionTypeRef {\r\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    if (parameterTypes) {\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        paramTypes[index] = parameterTypes[i].toNativeType();\r\n      }\r\n    }\r\n    var resultType = returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\r\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!instance.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN));\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    // check that modifiers are matching\r\n    var declaration = instance.prototype.declaration;\r\n    var body = declaration.body;\r\n    if (body) {\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    }\r\n\r\n    var ref: FunctionRef;\r\n    var signature = instance.signature;\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n    if (body) {\r\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\r\n      let returnType = instance.signature.returnType;\r\n\r\n      // compile body\r\n      let previousFunction = this.currentFunction;\r\n      this.currentFunction = instance;\r\n      let flow = instance.flow;\r\n      let stmt: ExpressionRef;\r\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\r\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\r\n        assert(instance.is(CommonFlags.ARROW));\r\n        stmt = this.compileExpression(\r\n          (<ExpressionStatement>body).expression,\r\n          returnType,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        flow.set(FlowFlags.RETURNS);\r\n        if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n        flow.finalize();\r\n      } else {\r\n        assert(body.kind == NodeKind.BLOCK);\r\n        let stmts = this.compileStatements((<BlockStatement>body).statements);\r\n        if (instance.is(CommonFlags.MAIN)) stmts.unshift(module.createCall(\"start\", null, NativeType.None));\r\n        flow.finalize();\r\n        if (isConstructor) {\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          assert(instance.is(CommonFlags.INSTANCE));\r\n\r\n          // implicitly return `this` if the constructor doesn't always return on its own\r\n          if (!flow.is(FlowFlags.RETURNS)) {\r\n\r\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\r\n            if (flow.is(FlowFlags.ALLOCATES)) {\r\n              stmts.push(module.createGetLocal(0, nativeSizeType));\r\n\r\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\r\n            } else {\r\n              let parent = assert(instance.parent);\r\n              assert(parent.kind == ElementKind.CLASS);\r\n              stmts.push(module.createTeeLocal(0,\r\n                this.makeConditionalAllocate(<Class>parent, declaration.name)\r\n              ));\r\n            }\r\n          }\r\n\r\n        // make sure all branches return\r\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\r\n          this.error(\r\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n            declaration.signature.returnType.range\r\n          );\r\n        }\r\n        stmt = !stmts.length\r\n          ? module.createNop()\r\n          : stmts.length == 1\r\n            ? stmts[0]\r\n            : module.createBlock(null, stmts, returnType.toNativeType());\r\n      }\r\n      this.currentFunction = previousFunction;\r\n\r\n      // create the function\r\n      ref = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        stmt\r\n      );\r\n\r\n    } else {\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n\r\n      // create the function import\r\n      let parent = instance.prototype.parent;\r\n      ref = module.addFunctionImport(\r\n        instance.internalName,\r\n        parent\r\n          ? parent.simpleName\r\n          : \"env\",\r\n        instance.simpleName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    // check module-level export\r\n    if (instance.is(CommonFlags.MODULE_EXPORT)) {\r\n      if (signature.requiredParameters < signature.parameterTypes.length) {\r\n        // export the trampoline if the function takes optional parameters\r\n        instance = this.ensureTrampoline(instance);\r\n        this.ensureArgcSet();\r\n      }\r\n      module.addFunctionExport(instance.internalName, mangleExportName(instance));\r\n    }\r\n\r\n    instance.finalize(module, ref);\r\n    return true;\r\n  }\r\n\r\n  // namespaces\r\n\r\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\r\n    var members = declaration.members;\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<ClassDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<InterfaceDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<FunctionDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\r\n            if (variableInit) this.startFunctionBody.push(variableInit);\r\n          }\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n  }\r\n\r\n  compileNamespace(ns: Namespace): void {\r\n    if (!ns.members) return;\r\n\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let element of ns.members.values()) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking ||\r\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null, // no contextual type arguments\r\n              null, // no outer scope\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          this.compileGlobal(<Global>element);\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // exports\r\n\r\n  compileExportStatement(statement: ExportStatement): void {\r\n    var module = this.module;\r\n    var fileLevelExports = this.program.fileLevelExports;\r\n    var members = statement.members;\r\n    if (!members) return; // filespace\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      let internalExportName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        member.externalName.text\r\n      );\r\n      let element = fileLevelExports.get(internalExportName);\r\n      if (!element) continue; // reported in Program#initialize\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\r\n            statement.range.source.isEntry\r\n          ) {\r\n            let functionInstance = this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null, // no contextual type arguments\r\n              null, // no outer scope\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n            if (functionInstance) {\r\n              let functionDeclaration = functionInstance.prototype.declaration;\r\n              if (functionDeclaration && functionDeclaration.needsExplicitExport(member)) {\r\n                module.addFunctionExport(functionInstance.internalName, member.externalName.text);\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          if (this.compileGlobal(<Global>element) && statement.range.source.isEntry) {\r\n            let globalDeclaration = (<Global>element).declaration;\r\n            if (globalDeclaration && globalDeclaration.needsExplicitExport(member)) {\r\n              if ((<Global>element).is(CommonFlags.INLINED)) {\r\n                module.addGlobalExport(element.internalName, member.externalName.text);\r\n              } else {\r\n                this.warning(\r\n                  DiagnosticCode.Cannot_export_a_mutable_global,\r\n                  member.range\r\n                );\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // classes\r\n\r\n  compileClassDeclaration(\r\n    declaration: ClassDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n    this.compileClassUsingTypeArguments(\r\n      <ClassPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n  }\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    var staticMembers = instance.prototype.members;\r\n    if (staticMembers) {\r\n      for (let element of staticMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.GLOBAL: {\r\n            this.compileGlobal(<Global>element);\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [], null, null,\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [], null, null,\r\n                getter.declaration.name\r\n              );\r\n            }\r\n            let setter = (<Property>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [], null, null,\r\n                setter.declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    var ctorInstance = instance.constructorInstance;\r\n    if (ctorInstance) this.compileFunction(ctorInstance);\r\n    var instanceMembers = instance.members;\r\n    if (instanceMembers) {\r\n      for (let element of instanceMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                instance.contextualTypeArguments,\r\n                null, // no outer scope\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FIELD: {\r\n            element.set(CommonFlags.COMPILED);\r\n            if (!instance.is(CommonFlags.MODULE_EXPORT) || element.is(CommonFlags.PRIVATE)) break;\r\n            let module = this.module;\r\n            let name = (<Field>element).simpleName;\r\n            let type = (<Field>element).type;\r\n            let nativeType = type.toNativeType();\r\n            let offset = (<Field>element).memoryOffset;\r\n            let usizeType = this.options.usizeType;\r\n            let nativeSizeType = this.options.nativeSizeType;\r\n\r\n            // export an implicit getter: get:fieldName(this: usize) -> fieldType\r\n            let getterName = mangleExportName(element, GETTER_PREFIX + name);\r\n            module.addFunction(\r\n              getterName,\r\n              this.ensureFunctionType(null, type, usizeType),\r\n              null,\r\n              module.createLoad(\r\n                type.byteSize,\r\n                type.is(TypeFlags.SIGNED),\r\n                module.createGetLocal(0, nativeSizeType),\r\n                nativeType,\r\n                offset\r\n              )\r\n            );\r\n            module.addFunctionExport(getterName, getterName);\r\n\r\n            // export an implicit setter: set:fieldName(this: usize, value: fieldType) -> void\r\n            if (element.is(CommonFlags.READONLY)) break;\r\n            let setterName = mangleExportName(element, SETTER_PREFIX + name);\r\n            module.addFunction(\r\n              setterName,\r\n              this.ensureFunctionType([ type ], Type.void, usizeType),\r\n              null,\r\n              module.createStore(\r\n                type.byteSize,\r\n                module.createGetLocal(0, nativeSizeType),\r\n                module.createGetLocal(1, nativeType),\r\n                nativeType,\r\n                offset\r\n              )\r\n            );\r\n            module.addFunctionExport(setterName, setterName);\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [], instance.contextualTypeArguments, null,\r\n                getter.declaration.name\r\n              );\r\n            }\r\n            let setter = (<Property>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [], instance.contextualTypeArguments, null,\r\n                setter.declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // memory\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  // function table\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // statements\r\n\r\n  compileStatement(statement: Statement): ExpressionRef {\r\n    var module = this.module;\r\n    var stmt: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        stmt = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        stmt = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        stmt = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        stmt = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!stmt) stmt = module.createNop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // type declarations must be top-level because function bodies are evaluated when\r\n        // reachaable only.\r\n        if (this.currentFunction == this.startFunctionInstance) {\r\n          return module.createNop();\r\n        }\r\n        // otherwise fall-through\r\n      }\r\n      default: {\r\n        assert(false);\r\n        stmt = module.createUnreachable();\r\n      }\r\n    }\r\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\r\n    return stmt;\r\n  }\r\n\r\n  compileStatements(statements: Statement[]): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    var stmts = new Array<ExpressionRef>(numStatements);\r\n    stmts.length = 0;\r\n    var flow = this.currentFunction.flow;\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      let stmt = this.compileStatement(statements[i]);\r\n      switch (getExpressionId(stmt)) {\r\n        case ExpressionId.Block: {\r\n          if (!getBlockName(stmt)) {\r\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: stmts.push(stmt);\r\n        case ExpressionId.Nop:\r\n      }\r\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) break;\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\r\n    var statements = statement.statements;\r\n    var parentFlow = this.currentFunction.flow;\r\n    var flow = parentFlow.fork();\r\n    this.currentFunction.flow = flow;\r\n\r\n    var stmts = this.compileStatements(statements);\r\n    var stmt = stmts.length == 0\r\n      ? this.module.createNop()\r\n      : stmts.length == 1\r\n        ? stmts[0]\r\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\r\n\r\n    this.currentFunction.flow = flow.free();\r\n    parentFlow.inherit(flow);\r\n    return stmt;\r\n  }\r\n\r\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var flow = this.currentFunction.flow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.BREAKS);\r\n    return module.createBreak(breakLabel);\r\n  }\r\n\r\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFunction.flow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES);\r\n    return module.createBreak(continueLabel);\r\n  }\r\n\r\n  compileDoStatement(statement: DoStatement): ExpressionRef {\r\n    var currentFunction = this.currentFunction;\r\n    var module = this.module;\r\n\r\n    var label = currentFunction.enterBreakContext();\r\n    var parentFlow = currentFunction.flow;\r\n    var flow = parentFlow.fork();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n    // TODO: check if condition is always false and if so, omit it (just a block)\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.free();\r\n    currentFunction.leaveBreakContext();\r\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\r\n    flow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    parentFlow.inherit(flow);\r\n\r\n    return module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        terminated\r\n          ? body // skip trailing continue if unnecessary\r\n          : module.createBlock(null, [\r\n              body,\r\n              module.createBreak(continueLabel, condExpr)\r\n            ], NativeType.None)\r\n      )\r\n    ], terminated ? NativeType.Unreachable : NativeType.None);\r\n  }\r\n\r\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\r\n    return this.module.createNop();\r\n  }\r\n\r\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\r\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\r\n    if (this.currentType != Type.void) {\r\n      expr = this.module.createDrop(expr);\r\n      this.currentType = Type.void;\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileForStatement(statement: ForStatement): ExpressionRef {\r\n    // A for statement initiates a new branch with its own scoped variables\r\n    // possibly declared in its initializer, and break context.\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var parentFlow = currentFunction.flow;\r\n    var flow = parentFlow.fork();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = flow.breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n    var repeatLabel = \"repeat|\" + label;\r\n\r\n    // Compile in correct order\r\n    var module = this.module;\r\n    var initExpr = statement.initializer\r\n      ? this.compileStatement(<Statement>statement.initializer)\r\n      : 0;\r\n    var condExpr: ExpressionRef = 0;\r\n    var alwaysTrue = false;\r\n    if (statement.condition) {\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n      // check if the condition is always true\r\n      let condPre = this.precomputeExpressionRef(condExpr);\r\n      if (getExpressionId(condPre) == ExpressionId.Const) {\r\n        assert(getExpressionType(condPre) == NativeType.I32);\r\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\r\n        // TODO: could skip compilation if the condition is always false here, but beware that the\r\n        // initializer could still declare new 'var's that are used later on.\r\n      }\r\n      // recompile to original\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n    } else {\r\n      // omitted condition is always true\r\n      condExpr = module.createI32(1);\r\n      alwaysTrue = true;\r\n    }\r\n    var incrExpr = statement.incrementor\r\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n      : 0;\r\n    var bodyExpr = this.compileStatement(statement.statement);\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.free();\r\n    currentFunction.leaveBreakContext();\r\n    var usesContinue = flow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\r\n    flow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    var terminated = alwaysTrue && flow.isAny(FlowFlags.ANY_TERMINATING);\r\n    if (alwaysTrue) parentFlow.inherit(flow);\r\n    else parentFlow.inheritConditional(flow);\r\n\r\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\r\n    if (initExpr) breakBlock.push(initExpr);\r\n\r\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\r\n    if (usesContinue) {\r\n      repeatBlock.push(\r\n        module.createBlock(continueLabel, [ // inner 'continue' block\r\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\r\n          bodyExpr\r\n        ], NativeType.None)\r\n      );\r\n    } else { // can omit the 'continue' block\r\n      repeatBlock.push(\r\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\r\n      );\r\n      repeatBlock.push(bodyExpr);\r\n    }\r\n    if (incrExpr) repeatBlock.push(incrExpr);\r\n    repeatBlock.push(\r\n      module.createBreak(repeatLabel)\r\n    );\r\n\r\n    breakBlock.push(\r\n      module.createLoop(repeatLabel,\r\n        module.createBlock(null, repeatBlock, NativeType.None)\r\n      )\r\n    );\r\n\r\n    return module.createBlock(\r\n      breakLabel,\r\n      breakBlock,\r\n      terminated\r\n        ? NativeType.Unreachable\r\n        : NativeType.None\r\n      );\r\n  }\r\n\r\n  compileIfStatement(statement: IfStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary branches if the condition is constant\r\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        return getConstValueI32(condExprPrecomp)\r\n          ? this.compileStatement(ifTrue)\r\n          : ifFalse\r\n            ? this.compileStatement(ifFalse)\r\n            : module.createNop();\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var parentFlow = currentFunction.flow;\r\n    var ifTrueFlow = parentFlow.fork();\r\n    currentFunction.flow = ifTrueFlow;\r\n    var ifTrueExpr = this.compileStatement(ifTrue);\r\n    currentFunction.flow = ifTrueFlow.free();\r\n\r\n    var ifFalseExpr: ExpressionRef = 0;\r\n    if (ifFalse) {\r\n      let ifFalseFlow = parentFlow.fork();\r\n      currentFunction.flow = ifFalseFlow;\r\n      ifFalseExpr = this.compileStatement(ifFalse);\r\n      currentFunction.flow = ifFalseFlow.free();\r\n      parentFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\r\n    } else {\r\n      parentFlow.inheritConditional(ifTrueFlow);\r\n    }\r\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\r\n  }\r\n\r\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var expr: ExpressionRef = 0;\r\n    var flow = currentFunction.flow;\r\n\r\n    // Remember that this flow returns\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    if (statement.value) {\r\n      let returnType = flow.returnType;\r\n      if (returnType == Type.void) {\r\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n          statement.value.range, this.currentType.toString(), returnType.toString()\r\n        );\r\n        this.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      expr = this.compileExpression(\r\n        statement.value,\r\n        returnType,\r\n        ConversionKind.IMPLICIT,\r\n        currentFunction.is(CommonFlags.MODULE_EXPORT)\r\n          ? WrapMode.WRAP\r\n          : WrapMode.NONE\r\n      );\r\n\r\n      // Remember whether returning a properly wrapped value\r\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n    }\r\n\r\n    // If the last statement anyway, make it the block's return value\r\n    if (isLastStatement(statement)) return expr ? expr : module.createNop();\r\n\r\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\r\n    return flow.is(FlowFlags.INLINE_CONTEXT)\r\n      ? module.createBreak(assert(flow.returnLabel), 0, expr)\r\n      : module.createReturn(expr);\r\n  }\r\n\r\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n    if (!numCases) {\r\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    }\r\n\r\n    // Everything within a switch uses the same break context\r\n    var context = currentFunction.enterBreakContext();\r\n    var parentFlow = currentFunction.flow;\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = currentFunction.getTempLocal(Type.u32, false);\r\n    var tempLocalIndex = tempLocal.index;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.createSetLocal( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.createBinary(BinaryOp.EqI32,\r\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\r\n    var alwaysReturns = true;\r\n    var alwaysReturnsWrapped = true;\r\n    var alwaysThrows = true;\r\n    var alwaysAllocates = true;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n\r\n      // Each switch case initiates a new branch\r\n      let flow = parentFlow.fork();\r\n      currentFunction.flow = flow;\r\n      let breakLabel = \"break|\" + context;\r\n      flow.breakLabel = breakLabel;\r\n\r\n      let isLast = i == numCases - 1;\r\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\r\n      stmts[0] = currentBlock;\r\n      let count = 1;\r\n      let terminated = false;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        let stmt = this.compileStatement(statements[j]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          stmts[count++] = stmt;\r\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n            terminated = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      stmts.length = count;\r\n      if (terminated || isLast) {\r\n        if (!flow.is(FlowFlags.RETURNS)) alwaysReturns = false;\r\n        if (!flow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\r\n        if (!flow.is(FlowFlags.THROWS)) alwaysThrows = false;\r\n        if (!flow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\r\n      }\r\n\r\n      // Switch back to the parent flow\r\n      flow.unset(\r\n        FlowFlags.BREAKS |\r\n        FlowFlags.CONDITIONALLY_BREAKS\r\n      );\r\n      currentFunction.flow = flow.free();\r\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\r\n    }\r\n    currentFunction.leaveBreakContext();\r\n\r\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\r\n    if (defaultIndex >= 0) {\r\n      if (alwaysReturns) parentFlow.set(FlowFlags.RETURNS);\r\n      if (alwaysReturnsWrapped) parentFlow.set(FlowFlags.RETURNS_WRAPPED);\r\n      if (alwaysThrows) parentFlow.set(FlowFlags.THROWS);\r\n      if (alwaysAllocates) parentFlow.set(FlowFlags.ALLOCATES);\r\n    }\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\r\n    var flow = this.currentFunction.flow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS);\r\n\r\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    return compileBuiltinAbort(this, null, statement);\r\n  }\r\n\r\n  compileTryStatement(statement: TryStatement): ExpressionRef {\r\n    // TODO\r\n    // can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  /**\r\n   * Compiles a variable statement. Returns `0` if an initializer is not\r\n   * necessary.\r\n   */\r\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\r\n    var program = this.program;\r\n    var currentFunction = this.currentFunction;\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n\r\n    // top-level variables and constants become globals\r\n    if (isKnownGlobal || (\r\n      currentFunction == this.startFunctionInstance &&\r\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\r\n    )) {\r\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\r\n      // though such variables could also become start function locals if, and only if, not used\r\n      // within any function declared in the same source, which is unknown at this point. the only\r\n      // efficient way to deal with this would be to keep track of all occasions it is used and\r\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\r\n      for (let i = 0; i < numDeclarations; ++i) {\r\n        this.compileGlobalDeclaration(declarations[i]);\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    // other variables become locals\r\n    var initializers = new Array<ExpressionRef>();\r\n    var flow = this.currentFunction.flow;\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let initExpr: ExpressionRef = 0;\r\n      if (declaration.type) {\r\n        type = program.resolveType( // reports\r\n          declaration.type,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          initExpr = this.compileExpression( // reports\r\n            declaration.initializer,\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\r\n        initExpr = this.compileExpressionRetainType( // reports\r\n          declaration.initializer,\r\n          Type.void,\r\n          WrapMode.NONE\r\n        );\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n      let isInlined = false;\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        if (initExpr) {\r\n          initExpr = this.precomputeExpressionRef(initExpr);\r\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\r\n            let local = new Local(program, name, -1, type);\r\n            switch (getExpressionType(initExpr)) {\r\n              case NativeType.I32: {\r\n                local = local.withConstantIntegerValue(getConstValueI32(initExpr), 0);\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local = local.withConstantIntegerValue(\r\n                  getConstValueI64Low(initExpr),\r\n                  getConstValueI64High(initExpr)\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                return this.module.createUnreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = currentFunction.flow.scopedLocals;\r\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return this.module.createUnreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isInlined = true;\r\n          } else {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n      if (!isInlined) {\r\n        let local: Local;\r\n        if (\r\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\r\n          flow.is(FlowFlags.INLINE_CONTEXT)\r\n        ) { // here: not top-level\r\n          local = flow.addScopedLocal(type, name, false, declaration); // reports\r\n        } else {\r\n          local = currentFunction.addLocal(type, name, declaration); // reports\r\n        }\r\n        if (initExpr) {\r\n          initializers.push(this.compileAssignmentWithValue(declaration.name, initExpr));\r\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\r\n          }\r\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped(local.index, true); // zero\r\n        }\r\n      }\r\n    }\r\n    return initializers.length   // we can unwrap these here because the\r\n      ? initializers.length == 1 // source didn't tell us exactly what to do\r\n        ? initializers[0]\r\n        : this.module.createBlock(null, initializers, NativeType.None)\r\n      : 0;\r\n  }\r\n\r\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n  }\r\n\r\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // The condition does not yet initialize a branch\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary loops if the condition is constant\r\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    // Statements initiate a new branch with its own break context\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var parentFlow = currentFunction.flow;\r\n    var flow = parentFlow.fork();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var alwaysTrue = false; // TODO\r\n    var alwaysReturns = alwaysTrue && flow.is(FlowFlags.RETURNS);\r\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.free();\r\n    currentFunction.leaveBreakContext();\r\n    flow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) parentFlow.inherit(flow);\r\n    else parentFlow.inheritConditional(flow);\r\n\r\n    var expr = module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createIf(condExpr,\r\n          terminated\r\n            ? body // skip trailing continue if unnecessary\r\n            : module.createBlock(null, [\r\n                body,\r\n                module.createBreak(continueLabel)\r\n              ], NativeType.None)\r\n        )\r\n      )\r\n    ], alwaysReturns ? NativeType.Unreachable : NativeType.None);\r\n    return expr;\r\n  }\r\n\r\n  // expressions\r\n\r\n  /**\r\n   * Compiles the value of an inlined constant element.\r\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\r\n   *  is precomputed according to context.\r\n   */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    retainType: bool\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !retainType &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.createI32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.createI64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.createI64(0);\r\n      }\r\n      case TypeKind.F64: {\r\n        if (!(element.is(CommonFlags.BUILTIN) && contextualType == Type.f32)) {\r\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\r\n        }\r\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\r\n        this.currentType = Type.f32;\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n\r\n    var expr: ExpressionRef;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.SUPER:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(\r\n          <IdentifierExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.INSTANCEOF: {\r\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    var currentType = this.currentType;\r\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\r\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\r\n      this.currentType = contextualType;\r\n    } else if (wrapMode == WrapMode.WRAP) {\r\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\r\n    }\r\n\r\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n    return expr;\r\n  }\r\n\r\n  compileExpressionRetainType(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.compileExpression(\r\n      expression,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      wrapMode\r\n    );\r\n  }\r\n\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.precomputeExpressionRef(\r\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\r\n    );\r\n  }\r\n\r\n  precomputeExpressionRef(expr: ExpressionRef): ExpressionRef {\r\n    var module = this.module;\r\n    var type = this.currentType;\r\n    var nativeType = type.toNativeType();\r\n    var funcRef = module.addTemporaryFunction(nativeType, null, expr);\r\n    module.runPasses([ \"precompute\" ], funcRef);\r\n    var ret = getFunctionBody(funcRef);\r\n    module.removeTemporaryFunction();\r\n    return ret;\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    fromType: Type,\r\n    toType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    assert(conversionKind != ConversionKind.NONE);\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\r\n\r\n    if (!fromType.isAssignableTo(toType)) {\r\n      if (conversionKind == ConversionKind.IMPLICIT) {\r\n        this.error(\r\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n          reportNode.range, fromType.toString(), toType.toString()\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.createDrop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      // i64 to ...\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32 or smaller\r\n        if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\r\n        }\r\n\r\n      // i32 or smaller to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.createUnary(\r\n          toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\r\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\r\n        );\r\n        wrapMode = WrapMode.NONE;\r\n\r\n      // i32 to i32\r\n      } else {\r\n        // small i32 to ...\r\n        if (fromType.is(TypeFlags.SHORT)) {\r\n          // small i32 to larger i32\r\n          if (fromType.size < toType.size) {\r\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\r\n            wrapMode = WrapMode.NONE;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return wrapMode == WrapMode.WRAP\r\n      ? this.ensureSmallIntegerWrap(expr, toType)\r\n      : expr;\r\n  }\r\n\r\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\r\n    var toType = this.program.resolveType( // reports\r\n      expression.toType,\r\n      this.currentFunction.flow.contextualTypeArguments\r\n    );\r\n    if (!toType) return this.module.createUnreachable();\r\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n  }\r\n\r\n  private f32ModInstance: Function | null = null;\r\n  private f64ModInstance: Function | null = null;\r\n  private f32PowInstance: Function | null = null;\r\n  private f64PowInstance: Function | null = null;\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n\r\n    var operator = expression.operator;\r\n    switch (operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '==' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '!=' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // addition might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // subtraction might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK_ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.POW);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        let instance: Function | null;\r\n\r\n        // Mathf.pow if lhs is f32 (result is f32)\r\n        if (this.currentType.kind == TypeKind.F32) {\r\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f32PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f32PowInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n          }\r\n\r\n        // Math.pow otherwise (result is f64)\r\n        // TODO: should the result be converted back?\r\n        } else {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            this.currentType,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE,\r\n            left\r\n          );\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f64PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Math\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f64PowInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n          }\r\n        }\r\n        if (!(instance && this.compileFunction(instance))) {\r\n          expr = module.createUnreachable();\r\n        } else {\r\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\r\n          case TypeKind.I16: // ^\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.REM);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let instance = this.f32ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f32ModInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let instance = this.f64ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Math\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f64ModInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n          }\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overloadd\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n          this.makeIsTrueish(leftExpr, this.currentType);\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            rightExpr,\r\n            expr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFunction.flow;\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            rightExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            )\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\r\n          expr = this.module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            expr,\r\n            rightExpr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFunction.flow;\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            ),\r\n            rightExpr\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  compileUnaryOverload(\r\n    operatorInstance: Function,\r\n    value: Expression,\r\n    valueExpr: ExpressionRef,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\r\n      argumentExpressions = [];\r\n    } else {\r\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\r\n    }\r\n    return this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg,\r\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\r\n    );\r\n  }\r\n\r\n  compileBinaryOverload(\r\n    operatorInstance: Function,\r\n    left: Expression,\r\n    leftExpr: ExpressionRef,\r\n    right: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      let parent = assert(operatorInstance.parent);\r\n      assert(parent.kind == ElementKind.CLASS);\r\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\r\n      argumentExpressions = [ right ];\r\n    } else {\r\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\r\n    }\r\n    var ret = this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg,\r\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\r\n    );\r\n    return ret;\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var program = this.program;\r\n    var currentFunction = this.currentFunction;\r\n    var target = program.resolveExpression(expression, currentFunction); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var targetType: Type;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\r\n        // fall-through\r\n      }\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        targetType = (<VariableLikeElement>target).type;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prototype = (<Property>target).setterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(); // reports\r\n          if (!instance) return this.module.createUnreachable();\r\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n          targetType = instance.signature.parameterTypes[0];\r\n          break;\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n          expression.range, (<Property>target).internalName\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (program.resolvedElementExpression) { // indexed access\r\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n            if (!indexedGet) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            }\r\n            return this.module.createUnreachable();\r\n          }\r\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\r\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    assert(targetType != Type.void);\r\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    return this.compileAssignmentWithValue(\r\n      expression,\r\n      valueExpr,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileAssignmentWithValue(\r\n    expression: Expression,\r\n    valueWithCorrectType: ExpressionRef,\r\n    tee: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var target = this.program.resolveExpression(expression, this.currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let type = (<Local>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let flow = this.currentFunction.flow;\r\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\r\n        }\r\n        return tee\r\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\r\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\r\n        let type = (<Global>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range,\r\n            target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\r\n        if (tee) {\r\n          let nativeType = type.toNativeType();\r\n          let internalName = target.internalName;\r\n          return module.createBlock(null, [ // emulated teeGlobal\r\n            module.createSetGlobal(internalName, valueWithCorrectType),\r\n            module.createGetGlobal(internalName, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        const declaration = (<Field>target).declaration;\r\n        if (\r\n          (<Field>target).is(CommonFlags.READONLY) &&\r\n          !(\r\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\r\n            declaration == null ||\r\n            declaration.initializer != null\r\n          )\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Field>target).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let thisExpression = assert(this.program.resolvedThisExpression);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        let type = (<Field>target).type;\r\n        this.currentType = tee ? type : Type.void;\r\n        let nativeType = type.toNativeType();\r\n        if (type.kind == TypeKind.BOOL) {\r\n          // make sure bools are wrapped (usually are) when storing as 8 bits\r\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\r\n        }\r\n        if (tee) {\r\n          let currentFunction = this.currentFunction;\r\n          let flow = currentFunction.flow;\r\n          let tempLocal = currentFunction.getAndFreeTempLocal(\r\n            type,\r\n            !flow.canOverflow(valueWithCorrectType, type)\r\n          );\r\n          let tempLocalIndex = tempLocal.index;\r\n          // TODO: simplify if valueWithCorrectType has no side effects\r\n          return module.createBlock(null, [\r\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\r\n            module.createStore(\r\n              type.byteSize,\r\n              thisExpr,\r\n              module.createGetLocal(tempLocalIndex, nativeType),\r\n              nativeType,\r\n              (<Field>target).memoryOffset\r\n            ),\r\n            module.createGetLocal(tempLocalIndex, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createStore(\r\n            type.byteSize,\r\n            thisExpr,\r\n            valueWithCorrectType,\r\n            nativeType,\r\n            (<Field>target).memoryOffset\r\n          );\r\n        }\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let setterPrototype = (<Property>target).setterPrototype;\r\n        if (setterPrototype) {\r\n          let setterInstance = setterPrototype.resolve(); // reports\r\n          if (!setterInstance) return module.createUnreachable();\r\n\r\n          // call just the setter if the return value isn't of interest\r\n          if (!tee) {\r\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n              let thisExpression = assert(this.program.resolvedThisExpression);\r\n              let thisExpr = this.compileExpressionRetainType(\r\n                thisExpression,\r\n                this.options.usizeType,\r\n                WrapMode.NONE\r\n              );\r\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\r\n            } else {\r\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\r\n            }\r\n          }\r\n\r\n          // otherwise call the setter first, then the getter\r\n          let getterPrototype = (<Property>target).getterPrototype;\r\n          assert(getterPrototype != null); // must have one if there is a setter\r\n          let getterInstance = (<FunctionPrototype>getterPrototype).resolve(); // reports\r\n          if (!getterInstance) return module.createUnreachable();\r\n          let returnType = getterInstance.signature.returnType;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n            let thisExpression = assert(this.program.resolvedThisExpression);\r\n            let thisExpr = this.compileExpressionRetainType(\r\n              thisExpression,\r\n              this.options.usizeType,\r\n              WrapMode.NONE\r\n            );\r\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType, false);\r\n            let tempLocalIndex = tempLocal.index;\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ // set and remember the target\r\n                module.createTeeLocal(tempLocalIndex, thisExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(getterInstance, [ // get from remembered target\r\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\r\n              ])\r\n            ], nativeReturnType);\r\n          } else {\r\n            // note that this must be performed here because `resolved` is shared\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\r\n              this.makeCallDirect(getterInstance)\r\n            ], nativeReturnType);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.program.resolvedElementExpression;\r\n        if (elementExpression) {\r\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              expression.range, target.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              expression.range, target.internalName\r\n            );\r\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\r\n            return module.createUnreachable();\r\n          }\r\n          let targetType = (<Class>target).type;\r\n          let thisExpression = assert(this.program.resolvedThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          let elementExpr = this.compileExpression(\r\n            elementExpression,\r\n            Type.i32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          if (tee) {\r\n            let currentFunction = this.currentFunction;\r\n            let tempLocalTarget = currentFunction.getTempLocal(targetType, false);\r\n            let tempLocalElement = currentFunction.getAndFreeTempLocal(this.currentType, false);\r\n            let returnType = indexedGet.signature.returnType;\r\n            this.currentFunction.freeTempLocal(tempLocalTarget);\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(indexedSet, [\r\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\r\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(indexedGet, [\r\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n              ])\r\n            ], returnType.toNativeType());\r\n          } else {\r\n            return this.makeCallDirect(indexedSet, [\r\n              thisExpr,\r\n              elementExpr,\r\n              valueWithCorrectType\r\n            ]);\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var target = this.program.resolveExpression(expression.expression, currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (target.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n        let typeArguments = expression.typeArguments;\r\n\r\n        // builtins handle present respectively omitted type arguments on their own\r\n        if (prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\r\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\r\n        }\r\n\r\n        let instance: Function | null = null;\r\n\r\n        // resolve generic call if type arguments have been provided\r\n        if (typeArguments) {\r\n          if (!prototype.is(CommonFlags.GENERIC)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              expression.expression.range, prototype.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          instance = prototype.resolveUsingTypeArguments( // reports\r\n            typeArguments,\r\n            this.currentFunction.flow.contextualTypeArguments,\r\n            expression\r\n          );\r\n\r\n        // infer generic call if type arguments have been omitted\r\n        } else if (prototype.is(CommonFlags.GENERIC)) {\r\n          let inferredTypes = new Map<string,Type | null>();\r\n          let typeParameters = assert(prototype.declaration.typeParameters);\r\n          let numTypeParameters = typeParameters.length;\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            inferredTypes.set(typeParameters[i].name.text, null);\r\n          }\r\n          // let numInferred = 0;\r\n          let parameterTypes = prototype.declaration.signature.parameters;\r\n          let numParameterTypes = parameterTypes.length;\r\n          let argumentExpressions = expression.arguments;\r\n          let numArguments = argumentExpressions.length;\r\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\r\n          for (let i = 0; i < numParameterTypes; ++i) {\r\n            let typeNode = parameterTypes[i].type;\r\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\r\n            let argumentExpression = i < numArguments\r\n              ? argumentExpressions[i]\r\n              : prototype.declaration.signature.parameters[i].initializer;\r\n            if (!argumentExpression) { // missing initializer -> too few arguments\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            if (name !== null && inferredTypes.has(name)) {\r\n              let inferredType = inferredTypes.get(name);\r\n              if (inferredType) {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\r\n                let commonType: Type | null;\r\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\r\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\r\n                    this.error(\r\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\r\n                    );\r\n                    return module.createUnreachable();\r\n                  }\r\n                }\r\n                inferredType = commonType;\r\n              } else {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\r\n                inferredType = this.currentType;\r\n                // ++numInferred;\r\n              }\r\n              inferredTypes.set(name, inferredType);\r\n            } else {\r\n              let concreteType = this.program.resolveType(\r\n                parameterTypes[i].type,\r\n                this.currentFunction.flow.contextualTypeArguments,\r\n                true\r\n              );\r\n              if (!concreteType) return module.createUnreachable();\r\n              argumentExprs[i] = this.compileExpression(\r\n                argumentExpression,\r\n                concreteType,\r\n                ConversionKind.IMPLICIT,\r\n                WrapMode.NONE\r\n              );\r\n            }\r\n          }\r\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\r\n            resolvedTypeArguments[i] = inferredType;\r\n          }\r\n          instance = prototype.resolve(\r\n            resolvedTypeArguments,\r\n            this.currentFunction.flow.contextualTypeArguments\r\n          );\r\n          if (!instance) return this.module.createUnreachable();\r\n          return this.makeCallDirect(instance, argumentExprs);\r\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\r\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\r\n          // so inlining can be performed in `makeCallDirect` instead?\r\n\r\n        // otherwise resolve the non-generic call as usual\r\n        } else {\r\n          instance = prototype.resolve(\r\n            null,\r\n            this.currentFunction.flow.contextualTypeArguments\r\n          );\r\n        }\r\n        if (!instance) return this.module.createUnreachable();\r\n\r\n        // compile 'this' expression if an instance method\r\n        let thisExpr: ExpressionRef = 0;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          thisExpr = this.compileExpressionRetainType(\r\n            assert(this.program.resolvedThisExpression),\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n\r\n        return this.compileCallDirect(\r\n          instance,\r\n          expression.arguments,\r\n          expression,\r\n          thisExpr,\r\n          instance.hasDecorator(DecoratorFlags.INLINE)\r\n        );\r\n      }\r\n\r\n      // indirect call: index argument with signature (non-generic, can't be inlined)\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>target).type.signatureReference) {\r\n          indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>target).type.signatureReference) {\r\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>target).type;\r\n        if (signature = type.signatureReference) {\r\n          let thisExpression = assert(this.program.resolvedThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          indexArg = module.createLoad(\r\n            4,\r\n            false,\r\n            thisExpr,\r\n            NativeType.I32,\r\n            (<Field>target).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Field>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>target).signature;\r\n        indexArg = this.compileExpression(\r\n          expression.expression,\r\n          (<FunctionTarget>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: // TODO\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression\r\n    );\r\n  }\r\n\r\n  private compileCallExpressionBuiltin(\r\n    prototype: FunctionPrototype,\r\n    expression: CallExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var expr = compileBuiltinCall( // reports\r\n      this,\r\n      prototype,\r\n      prototype.resolveBuiltinTypeArguments(\r\n        expression.typeArguments,\r\n        this.currentFunction.flow.contextualTypeArguments\r\n      ),\r\n      expression.arguments,\r\n      contextualType,\r\n      expression\r\n    );\r\n    if (!expr) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    inline: bool = false\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    // Inline if explicitly requested\r\n    if (inline) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      return this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\r\n    }\r\n\r\n    // Otherwise compile to just a call\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallDirect(instance, operands);\r\n  }\r\n\r\n  // Depends on being pre-checked in compileCallDirect\r\n  private compileCallInlineUnchecked(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    var currentFunction = this.currentFunction;\r\n    var module = this.module;\r\n    var declaration = instance.prototype.declaration;\r\n\r\n    // Create an empty child flow with its own scope and mark it for inlining\r\n    var previousFlow = currentFunction.flow;\r\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\r\n    var returnType = instance.signature.returnType;\r\n    var flow = Flow.create(currentFunction);\r\n    flow.set(FlowFlags.INLINE_CONTEXT);\r\n    flow.returnLabel = returnLabel;\r\n    flow.returnType = returnType;\r\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\r\n\r\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\r\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\r\n    var body = [];\r\n    if (thisArg) {\r\n      let parent = assert(instance.parent);\r\n      assert(parent.kind == ElementKind.CLASS);\r\n      if (getExpressionId(thisArg) == ExpressionId.GetLocal) {\r\n        flow.addScopedLocalAlias(\r\n          getGetLocalIndex(thisArg),\r\n          (<Class>parent).type,\r\n          \"this\"\r\n        );\r\n      } else {\r\n        let thisLocal = flow.addScopedLocal((<Class>parent).type, \"this\", false);\r\n        body.push(\r\n          module.createSetLocal(thisLocal.index, thisArg)\r\n        );\r\n      }\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i) {\r\n      let paramExpr = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      if (getExpressionId(paramExpr) == ExpressionId.GetLocal) {\r\n        flow.addScopedLocalAlias(\r\n          getGetLocalIndex(paramExpr),\r\n          parameterTypes[i],\r\n          signature.getParameterName(i)\r\n        );\r\n        // inherits wrap status\r\n      } else {\r\n        let argumentLocal = flow.addScopedLocal(\r\n          parameterTypes[i],\r\n          signature.getParameterName(i),\r\n          !flow.canOverflow(paramExpr, parameterTypes[i])\r\n        );\r\n        body.push(\r\n          module.createSetLocal(argumentLocal.index, paramExpr)\r\n        );\r\n      }\r\n    }\r\n\r\n    // Compile optional parameter initializers in the scope of the inlined flow\r\n    currentFunction.flow = flow;\r\n    var numParameters = signature.parameterTypes.length;\r\n    for (let i = numArguments; i < numParameters; ++i) {\r\n      let initExpr = this.compileExpression(\r\n        assert(declaration.signature.parameters[i].initializer),\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.WRAP\r\n      );\r\n      let argumentLocal = flow.addScopedLocal(\r\n        parameterTypes[i],\r\n        signature.getParameterName(i),\r\n        !flow.canOverflow(initExpr, parameterTypes[i])\r\n      );\r\n      body.push(\r\n        module.createSetLocal(argumentLocal.index, initExpr)\r\n      );\r\n    }\r\n\r\n    // Compile the called function's body in the scope of the inlined flow\r\n    var bodyStatement = assert(declaration.body);\r\n    if (bodyStatement.kind == NodeKind.BLOCK) {\r\n      let statements = (<BlockStatement>bodyStatement).statements;\r\n      for (let i = 0, k = statements.length; i < k; ++i) {\r\n        let stmt = this.compileStatement(statements[i]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          body.push(stmt);\r\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) break;\r\n        }\r\n      }\r\n    } else {\r\n      body.push(this.compileStatement(bodyStatement));\r\n    }\r\n\r\n    // Free any new scoped locals and reset to the original flow\r\n    var scopedLocals = flow.scopedLocals;\r\n    if (scopedLocals) {\r\n      for (let scopedLocal of scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          currentFunction.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      flow.scopedLocals = null;\r\n    }\r\n    flow.finalize();\r\n    this.currentFunction.flow = previousFlow;\r\n    this.currentType = returnType;\r\n\r\n    // Check that all branches are terminated\r\n    if (returnType != Type.void && !flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n      this.error(\r\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n        declaration.signature.returnType.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    return module.createBlock(returnLabel, body, returnType.toNativeType());\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameters;\r\n    var commonReturnType = originalSignature.returnType;\r\n    var commonThisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\r\n    var trampolineName = originalName + \"|trampoline\";\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampoline = new Function(\r\n      original.prototype,\r\n      trampolineName,\r\n      trampolineSignature,\r\n      original.parent,\r\n      original.contextualTypeArguments\r\n    );\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFunction = this.currentFunction;\r\n    this.currentFunction = trampoline;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.createBlock(names[0], [\r\n      module.createBlock(\"oob\", [\r\n        module.createSwitch(names, \"oob\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.createBinary(\r\n                BinaryOp.SubI32,\r\n                module.createGetGlobal(\"~argc\", NativeType.I32),\r\n                module.createI32(minArguments)\r\n              )\r\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\r\n        )\r\n      ]),\r\n      module.createUnreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      let declaration = originalParameterDeclarations[minArguments + i];\r\n      let initializer = declaration.initializer;\r\n      let initExpr: ExpressionRef;\r\n      if (initializer) {\r\n        initExpr = module.createSetLocal(operandIndex,\r\n          this.compileExpression(\r\n            initializer,\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP\r\n          )\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\r\n          declaration.range\r\n        );\r\n        initExpr = module.createUnreachable();\r\n      }\r\n      body = module.createBlock(names[i + 1], [\r\n        body,\r\n        initExpr,\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\r\n    }\r\n    this.currentFunction = previousFunction;\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var funcRef = module.addFunction(\r\n      trampolineName,\r\n      this.ensureFunctionType(\r\n        trampolineSignature.parameterTypes,\r\n        trampolineSignature.returnType,\r\n        trampolineSignature.thisType\r\n      ),\r\n      typesToNativeTypes(trampoline.additionalLocals),\r\n      module.createBlock(null, [\r\n        body,\r\n        module.createCall(\r\n          originalName,\r\n          forwardedOperands,\r\n          commonReturnType.toNativeType()\r\n        )\r\n      ], commonReturnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper global is present and returns its name. */\r\n  private ensureArgcVar(): string {\r\n    var internalName = \"~argc\";\r\n    if (!this.argcVar) {\r\n      let module = this.module;\r\n      this.argcVar = module.addGlobal(\r\n        internalName,\r\n        NativeType.I32,\r\n        true,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper setter is present and returns its name. */\r\n  private ensureArgcSet(): string {\r\n    var internalName = \"~setargc\";\r\n    if (!this.argcSet) {\r\n      let module = this.module;\r\n      this.argcSet = module.addFunction(internalName,\r\n        this.ensureFunctionType([ Type.u32 ], Type.void),\r\n        null,\r\n        module.createSetGlobal(this.ensureArgcVar(),\r\n          module.createGetLocal(0, NativeType.I32)\r\n        )\r\n      );\r\n      module.addFunctionExport(internalName, \"_setargc\");\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.createUnreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      let parameterNodes = instance.prototype.declaration.signature.parameters;\r\n      let allOptionalsAreConstant = true;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        let initializer = parameterNodes[i].initializer;\r\n        if (!(initializer !== null && nodeIsConstantValue(initializer.kind))) {\r\n          allOptionalsAreConstant = false;\r\n          break;\r\n        }\r\n      }\r\n      if (allOptionalsAreConstant) { // inline into the call\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(\r\n            this.compileExpression(\r\n              <Expression>parameterNodes[i].initializer,\r\n              parameterTypes[i],\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE\r\n            )\r\n          );\r\n        }\r\n      } else { // otherwise fill up with zeroes and call the trampoline\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(parameterTypes[i].toNativeZero(module));\r\n        }\r\n        if (!isCallImport) {\r\n          let original = instance;\r\n          instance = this.ensureTrampoline(instance);\r\n          if (!this.compileFunction(instance)) return module.createUnreachable();\r\n          instance.flow.flags = original.flow.flags;\r\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\r\n          let nativeReturnType = returnType.toNativeType();\r\n          this.currentType = returnType;\r\n          return module.createBlock(null, [\r\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\r\n            module.createCall(instance.internalName, operands, nativeReturnType)\r\n          ], nativeReturnType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // otherwise just call through\r\n    this.currentType = returnType;\r\n    if (isCallImport) return module.createCallImport(instance.internalName, operands, returnType.toNativeType());\r\n    var ret = module.createCall(instance.internalName, operands, returnType.toNativeType());\r\n    return ret;\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    this.currentType = returnType;\r\n    return module.createBlock(null, [\r\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\r\n        module.createI32(numArguments)\r\n      ),\r\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\r\n    ], returnType.toNativeType()); // not necessarily wrapped\r\n  }\r\n\r\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(\r\n        expressions[i],\r\n        Type.void, // drop all\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(\r\n      expressions[numExpressions],\r\n      contextualType, // except last\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE\r\n    );\r\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\r\n    var target = this.program.resolveElementAccess(expression, this.currentFunction); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS: {\r\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            expression.expression.range, (<Class>target).internalName\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        let thisArg = this.compileExpression(\r\n          expression.expression,\r\n          (<Class>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        return this.compileCallDirect(indexedGet, [\r\n          expression.elementExpression\r\n        ], expression, thisArg);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\r\n    var declaration = expression.declaration;\r\n    var name = declaration.name;\r\n    var simpleName = (name.text.length\r\n      ? name.text\r\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\r\n    var currentFunction = this.currentFunction;\r\n    var prototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\r\n      declaration,\r\n      null,\r\n      DecoratorFlags.NONE\r\n    );\r\n    var flow = currentFunction.flow;\r\n    var instance = this.compileFunctionUsingTypeArguments(\r\n      prototype,\r\n      [],\r\n      flow.contextualTypeArguments,\r\n      flow,\r\n      declaration\r\n    );\r\n    if (!instance) return this.module.createUnreachable();\r\n    this.currentType = instance.signature.type; // TODO: get cached type?\r\n    // NOTE that, in order to make this work in every case, the function must be represented by a\r\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.createUnreachable()\r\n      : this.module.createI32(index);\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (!contextualType.classReference) {\r\n          this.currentType = options.usizeType;\r\n        }\r\n        return options.isWasm64\r\n          ? module.createI64(0)\r\n          : module.createI32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        let flow = currentFunction.flow;\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.getScopedLocal(\"this\");\r\n          if (scopedThis) {\r\n            this.currentType = scopedThis.type;\r\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\r\n          }\r\n        }\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.parent);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let thisType = (<Class>parent).type;\r\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // must be conditional because `this` could have been provided by a derived class\r\n              this.currentType = thisType;\r\n              return module.createTeeLocal(0,\r\n                this.makeConditionalAllocate(<Class>parent, expression)\r\n              );\r\n            }\r\n          }\r\n          this.currentType = thisType;\r\n          return module.createGetLocal(0, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let flow = currentFunction.flow;\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.getScopedLocal(\"this\");\r\n          if (scopedThis) {\r\n            let scopedThisClass = assert(scopedThis.type.classReference);\r\n            let base = scopedThisClass.base;\r\n            if (base) {\r\n              this.currentType = base.type;\r\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\r\n            }\r\n          }\r\n        }\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.parent);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let base = (<Class>parent).base;\r\n          if (base) {\r\n            let superType = base.type;\r\n            this.currentType = superType;\r\n            return module.createGetLocal(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // otherwise resolve\r\n    var target = this.program.resolveIdentifier( // reports\r\n      expression,\r\n      currentFunction,\r\n      this.currentEnum\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        if ((<Local>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\r\n        }\r\n        let localType = (<Local>target).type;\r\n        let localIndex = (<Local>target).index;\r\n        assert(localIndex >= 0);\r\n        this.currentType = localType;\r\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return this.module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!target.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return this.module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = (<FunctionPrototype>target).resolve(\r\n          null,\r\n          currentFunction.flow.contextualTypeArguments\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.createI32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileInstanceOfExpression(\r\n    expression: InstanceOfExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\r\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\r\n    // possible in AS anyway.\r\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\r\n    var type = this.currentType;\r\n    var isType = this.program.resolveType(expression.isType);\r\n    this.currentType = Type.bool;\r\n    if (!isType) return module.createUnreachable();\r\n    return type.is(TypeFlags.NULLABLE) && !isType.is(TypeFlags.NULLABLE)\r\n      ? type.nonNullableType.isAssignableTo(isType)\r\n        ? module.createBinary( // not precomputeable\r\n            type.is(TypeFlags.LONG)\r\n              ? BinaryOp.NeI64\r\n              : BinaryOp.NeI32,\r\n            expr,\r\n            type.toNativeZero(module)\r\n          )\r\n        : module.createI32(0)\r\n      : module.createI32(type.isAssignableTo(isType, true) ? 1 : 0);\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    implicitNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitNegate);\r\n        let classType = contextualType.classReference;\r\n        if (\r\n          classType &&\r\n          classType.prototype == this.program.arrayPrototype\r\n        ) {\r\n          return this.compileArrayLiteral(\r\n            assert(classType.typeArguments)[0],\r\n            (<ArrayLiteralExpression>expression).elementExpressions,\r\n            expression\r\n          );\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.createF32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.createF64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        switch (contextualType.kind) {\r\n\r\n          // compile to contextualType if matching\r\n\r\n          case TypeKind.I8: {\r\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U8: {\r\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I16: {\r\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U16: {\r\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.BOOL: {\r\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.F32: {\r\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            break; // compiles to best fitting type below, being dropped\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n\r\n        // otherwise compile to best fitting native type\r\n\r\n        if (i64_is_i32(intValue)) {\r\n          this.currentType = Type.i32;\r\n          return module.createI32(i64_low(intValue));\r\n        } else if (i64_is_u32(intValue)) {\r\n          this.currentType = Type.u32;\r\n          return module.createI32(i64_low(intValue));\r\n        } else {\r\n          this.currentType = Type.i64;\r\n          return module.createI64(i64_low(intValue), i64_high(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitNegate);\r\n        return this.compileStaticString((<StringLiteralExpression>expression).value);\r\n      }\r\n      // case LiteralKind.OBJECT:\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileStaticString(stringValue: string): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var stringSegments = this.stringSegments;\r\n\r\n    var stringSegment: MemorySegment | null = stringSegments.get(stringValue);\r\n    if (!stringSegment) {\r\n      let stringLength = stringValue.length;\r\n      let stringBuffer = new Uint8Array(4 + stringLength * 2);\r\n      stringBuffer[0] =  stringLength         & 0xff;\r\n      stringBuffer[1] = (stringLength >>>  8) & 0xff;\r\n      stringBuffer[2] = (stringLength >>> 16) & 0xff;\r\n      stringBuffer[3] = (stringLength >>> 24) & 0xff;\r\n      for (let i = 0; i < stringLength; ++i) {\r\n        stringBuffer[4 + i * 2] =  stringValue.charCodeAt(i)        & 0xff;\r\n        stringBuffer[5 + i * 2] = (stringValue.charCodeAt(i) >>> 8) & 0xff;\r\n      }\r\n      stringSegment = this.addMemorySegment(stringBuffer, options.usizeType.byteSize);\r\n      stringSegments.set(stringValue, stringSegment);\r\n    }\r\n    var stringOffset = stringSegment.offset;\r\n    var stringType = this.program.typesLookup.get(\"string\");\r\n    this.currentType = stringType ? stringType : options.usizeType;\r\n    if (options.isWasm64) {\r\n      return module.createI64(i64_low(stringOffset), i64_high(stringOffset));\r\n    }\r\n    assert(i64_is_i32(stringOffset));\r\n    return module.createI32(i64_low(stringOffset));\r\n  }\r\n\r\n  compileArrayLiteral(elementType: Type, expressions: (Expression | null)[], reportNode: Node): ExpressionRef {\r\n    var isStatic = true;\r\n    var module = this.module;\r\n\r\n    // obtain the array type\r\n    var arrayPrototype = assert(this.program.arrayPrototype);\r\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\r\n    var arrayInstance = (<ClassPrototype>arrayPrototype).resolve([ elementType ]);\r\n    if (!arrayInstance) return module.createUnreachable();\r\n    var arrayType = arrayInstance.type;\r\n\r\n    var elementCount = expressions.length;\r\n    if (elementCount) { // non-empty static or dynamic\r\n      let nativeElementType = elementType.toNativeType();\r\n      let values: usize;\r\n      let byteLength: usize;\r\n      switch (nativeElementType) {\r\n        case NativeType.I32: {\r\n          values = changetype<usize>(new Int32Array(elementCount));\r\n          byteLength = elementCount * 4;\r\n          break;\r\n        }\r\n        case NativeType.I64: {\r\n          values = changetype<usize>(new Array<I64>(elementCount));\r\n          byteLength = elementCount * 8;\r\n          break;\r\n        }\r\n        case NativeType.F32: {\r\n          values = changetype<usize>(new Float32Array(elementCount));\r\n          byteLength = elementCount * 4;\r\n          break;\r\n        }\r\n        case NativeType.F64: {\r\n          values = changetype<usize>(new Float64Array(elementCount));\r\n          byteLength = elementCount * 8;\r\n          break;\r\n        }\r\n        default: {\r\n          assert(false);\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n\r\n      // precompute value expressions\r\n      let exprs = new Array<ExpressionRef>(elementCount);\r\n      let expr: BinaryenExpressionRef;\r\n      for (let i = 0; i < elementCount; ++i) {\r\n        exprs[i] = expressions[i]\r\n          ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          : elementType.toNativeZero(module);\r\n        if (isStatic) {\r\n          expr = this.precomputeExpressionRef(exprs[i]);\r\n          if (getExpressionId(expr) == ExpressionId.Const) {\r\n            assert(getExpressionType(expr) == nativeElementType);\r\n            switch (nativeElementType) {\r\n              case NativeType.I32: {\r\n                changetype<i32[]>(values)[i] = getConstValueI32(expr);\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                changetype<I64[]>(values)[i] = i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                changetype<f32[]>(values)[i] = getConstValueF32(expr);\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                changetype<f64[]>(values)[i] = getConstValueF64(expr);\r\n                break;\r\n              }\r\n              default: assert(false); // checked above\r\n            }\r\n          } else {\r\n            // TODO: emit a warning if declared 'const'\r\n            // if (isConst) {\r\n            //   this.warn(\r\n            //     DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n            //     reportNode.range\r\n            //   );\r\n            // }\r\n            isStatic = false;\r\n          }\r\n        }\r\n      }\r\n\r\n      let usizeTypeSize = this.options.usizeType.byteSize;\r\n      if (isStatic) { // non-empty, all elements can be precomputed\r\n\r\n        // Create a combined static memory segment composed of:\r\n        // Array struct + ArrayBuffer struct + aligned ArrayBuffer data\r\n\r\n        let arraySize = usizeTypeSize + 4; // buffer_ & length_\r\n        let bufferHeaderSize = (4 + 7) & ~7; // aligned byteLength (8)\r\n        let bufferTotalSize = 1 << (32 - clz(byteLength + bufferHeaderSize - 1)); // see internals\r\n        let data = new Uint8Array(arraySize + bufferTotalSize);\r\n        let segment = this.addMemorySegment(data);\r\n        let offset = 0;\r\n\r\n        // write Array struct\r\n        if (usizeTypeSize == 8) {\r\n          writeI64(i64_add(segment.offset, i64_new(arraySize)), data, offset); // buffer_ @ segment[arSize]\r\n          offset += 8;\r\n        } else {\r\n          assert(i64_high(segment.offset) == 0);\r\n          writeI32(i64_low(segment.offset) + arraySize, data, offset); // buffer_ @ segment[arSize]\r\n          offset += 4;\r\n        }\r\n        writeI32(elementCount, data, offset); // length_\r\n        offset += 4;\r\n        assert(offset == arraySize);\r\n\r\n        // write ArrayBuffer struct\r\n        writeI32(byteLength, data, offset);\r\n        offset += bufferHeaderSize; // incl. alignment\r\n\r\n        // write ArrayBuffer data\r\n        switch (nativeElementType) {\r\n          case NativeType.I32: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeI32(changetype<i32[]>(values)[i], data, offset); offset += 4;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.I64: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeI64(changetype<I64[]>(values)[i], data, offset); offset += 8;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.F32: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeF32(changetype<f32[]>(values)[i], data, offset); offset += 4;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.F64: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeF64(changetype<f64[]>(values)[i], data, offset); offset += 8;\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        assert(offset <= arraySize + bufferTotalSize);\r\n\r\n        this.currentType = arrayType;\r\n        return usizeTypeSize == 8\r\n          ? module.createI64(\r\n              i64_low(segment.offset),\r\n              i64_high(segment.offset)\r\n            )\r\n          : module.createI32(\r\n              i64_low(segment.offset)\r\n            );\r\n\r\n      } else { // non-empty, some elements can't be precomputed\r\n\r\n        this.currentType = arrayType;\r\n        let setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\r\n        if (!setter) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n            reportNode.range, arrayInstance.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let nativeArrayType = arrayType.toNativeType();\r\n        let currentFunction = this.currentFunction;\r\n        let tempLocal = currentFunction.getTempLocal(arrayType, false);\r\n        let stmts = new Array<ExpressionRef>(2 + elementCount);\r\n        let index = 0;\r\n        stmts[index++] = module.createSetLocal(tempLocal.index,\r\n          this.makeCallDirect(assert(arrayInstance.constructorInstance), [\r\n            module.createI32(0), // this\r\n            module.createI32(elementCount)\r\n          ])\r\n        );\r\n        for (let i = 0; i < elementCount; ++i) {\r\n          stmts[index++] = this.makeCallDirect(setter, [\r\n            module.createGetLocal(tempLocal.index, nativeArrayType), // this\r\n            module.createI32(i),\r\n            exprs[i]\r\n          ]);\r\n        }\r\n        assert(index + 1 == stmts.length);\r\n        stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\r\n        currentFunction.freeTempLocal(tempLocal);\r\n        this.currentType = arrayType;\r\n        return module.createBlock(null, stmts, nativeArrayType);\r\n      }\r\n\r\n    } else { // empty, TBD: cache this somehow?\r\n      this.currentType = arrayType;\r\n      return this.makeCallDirect(assert(arrayInstance.constructorInstance), [\r\n        module.createI32(0), // this\r\n        module.createI32(0)\r\n      ]);\r\n    }\r\n  }\r\n\r\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // obtain the class being instantiated\r\n    var target = this.program.resolveExpression( // reports\r\n      expression.expression,\r\n      currentFunction\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        expression.expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>target;\r\n    var classInstance: Class | null = null;\r\n    var typeArguments = expression.typeArguments;\r\n    var classReference: Class | null;\r\n    if (\r\n      !typeArguments &&\r\n      (classReference = contextualType.classReference) !== null &&\r\n      classReference.is(CommonFlags.GENERIC)\r\n    ) {\r\n      classInstance = classPrototype.resolve(\r\n        classReference.typeArguments,\r\n        currentFunction.flow.contextualTypeArguments\r\n      );\r\n    } else {\r\n      classInstance = classPrototype.resolveUsingTypeArguments( // reports\r\n        typeArguments,\r\n        currentFunction.flow.contextualTypeArguments,\r\n        expression\r\n      );\r\n    }\r\n    if (!classInstance) return module.createUnreachable();\r\n\r\n    var expr: ExpressionRef;\r\n\r\n    // traverse to the first matching constructor\r\n    var currentClassInstance: Class | null = classInstance;\r\n    var constructorInstance = classInstance.constructorInstance;\r\n    while (!constructorInstance && (currentClassInstance = classInstance.base)) {\r\n      constructorInstance = currentClassInstance.constructorInstance;\r\n    }\r\n\r\n    // if a constructor is present, call it with a zero `this`\r\n    if (constructorInstance) {\r\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\r\n        options.usizeType.toNativeZero(module)\r\n      );\r\n\r\n    // otherwise simply allocate a new instance and initialize its fields\r\n    } else {\r\n      expr = this.makeAllocate(classInstance, expression);\r\n    }\r\n\r\n    this.currentType = classInstance.type;\r\n    return expr;\r\n  }\r\n\r\n  compileParenthesizedExpression(\r\n    expression: ParenthesizedExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    // does not change types, just order\r\n    return this.compileExpression(\r\n      expression.expression,\r\n      contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var program = this.program;\r\n    var module = this.module;\r\n\r\n    var target = program.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: { // static property\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        let parent = (<EnumValue>target).parent;\r\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\r\n        if (!this.compileEnum(<Enum>parent)) {\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        let thisExpression = assert(program.resolvedThisExpression);\r\n        assert((<Field>target).memoryOffset >= 0);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        this.currentType = (<Field>target).type;\r\n        return module.createLoad(\r\n          (<Field>target).type.byteSize,\r\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          thisExpr,\r\n          (<Field>target).type.toNativeType(),\r\n          (<Field>target).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property (here: getter)\r\n        let prototype = (<Property>target).getterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(null); // reports\r\n          if (!instance) return module.createUnreachable();\r\n          let signature = instance.signature;\r\n          if (!this.checkCallSignature( // reports\r\n            signature,\r\n            0,\r\n            instance.is(CommonFlags.INSTANCE),\r\n            propertyAccess\r\n          )) {\r\n            return module.createUnreachable();\r\n          }\r\n          let inline = (instance.decoratorFlags & DecoratorFlags.INLINE) != 0;\r\n          if (instance.is(CommonFlags.INSTANCE)) {\r\n            let parent = assert(instance.parent);\r\n            assert(parent.kind == ElementKind.CLASS);\r\n            let thisExpression = assert(program.resolvedThisExpression);\r\n            let thisExpr = this.compileExpressionRetainType(\r\n              thisExpression,\r\n              this.options.usizeType,\r\n              WrapMode.NONE\r\n            );\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess, thisExpr, inline);\r\n          } else {\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess, 0, inline);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.range, (<Property>target).simpleName, (<Property>target).parent.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n    var currentFunction = this.currentFunction;\r\n    var parentFlow = currentFunction.flow;\r\n\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary branches if the condition is constant\r\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        return getConstValueI32(condExprPrecomp)\r\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\r\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    var ifThenFlow = parentFlow.fork();\r\n    currentFunction.flow = ifThenFlow;\r\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\r\n    var ifThenType = this.currentType;\r\n    ifThenFlow.free();\r\n\r\n    var ifElseFlow = parentFlow.fork();\r\n    currentFunction.flow = ifElseFlow;\r\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n    var ifElseType = this.currentType;\r\n    currentFunction.flow = ifElseFlow.free();\r\n\r\n    parentFlow.inheritMutual(ifThenFlow, ifElseFlow);\r\n\r\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\r\n    if (!commonType) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, ifThenType.toString(), ifElseType.toString()\r\n      );\r\n      this.currentType = contextualType;\r\n      return this.module.createUnreachable();\r\n    }\r\n    ifThenExpr = this.convertExpression(\r\n      ifThenExpr,\r\n      ifThenType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifThen\r\n    );\r\n    ifElseExpr = this.convertExpression(\r\n      ifElseExpr,\r\n      ifElseType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifElse\r\n    );\r\n    this.currentType = commonType;\r\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\r\n  }\r\n\r\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression( // reports\r\n      expression.operand,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n    // shortcut if compiling the getter already failed\r\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\r\n    var currentType = this.currentType;\r\n\r\n    var op: BinaryOp;\r\n    var nativeType: NativeType;\r\n    var nativeOne: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n\r\n        // TODO: check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            op = BinaryOp.AddI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.AddI64\r\n              : BinaryOp.AddI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.AddI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.AddF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.AddF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n\r\n        // TODO: check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            op = BinaryOp.SubI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.SubI64\r\n              : BinaryOp.SubI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.SubI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.SubF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.SubF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // simplify if dropped anyway\r\n    if (contextualType == Type.void) {\r\n      return this.compileAssignmentWithValue(expression.operand,\r\n        module.createBinary(op,\r\n          getValue,\r\n          nativeOne\r\n        ),\r\n        false\r\n      );\r\n    }\r\n\r\n    // otherwise use a temp local for the intermediate value (always possibly overflows)\r\n    var tempLocal = currentFunction.getTempLocal(currentType, false);\r\n    var setValue = this.compileAssignmentWithValue(expression.operand,\r\n      module.createBinary(op,\r\n        this.module.createGetLocal(tempLocal.index, nativeType),\r\n        nativeOne\r\n      ),\r\n      false\r\n    );\r\n    this.currentType = assert(tempLocal).type;\r\n    currentFunction.freeTempLocal(<Local>tempLocal);\r\n\r\n    var localIndex = (<Local>tempLocal).index;\r\n    return module.createBlock(null, [\r\n      module.createSetLocal(localIndex, getValue),\r\n      setValue,\r\n      module.createGetLocal(localIndex, nativeType)\r\n    ], nativeType); // result of 'x++' / 'x--' might overflow\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        // nop\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\r\n          // compileExpression normally does this:\r\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n          break;\r\n        }\r\n\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              this.currentType.toNativeZero(module),\r\n              expr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createUnary(UnaryOp.NegF32, expr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createUnary(UnaryOp.NegF64, expr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          // allow '!' for references even without an overload\r\n        }\r\n\r\n        expr = this.makeIsFalseish(expr, this.currentType);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        } else {\r\n          expr = this.convertExpression(\r\n            expr,\r\n            this.currentType, this.currentType.intType,\r\n            ConversionKind.IMPLICIT, WrapMode.NONE,\r\n            expression.operand\r\n          );\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              this.currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\r\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFunction.flow;\r\n    switch (type.kind) {\r\n      case TypeKind.I8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(24)\r\n                ),\r\n                module.createI32(24)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.I16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(16)\r\n                ),\r\n                module.createI32(16)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xffff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.BOOL: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0x1)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\r\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return module.createUnary(UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createUnary(UnaryOp.EqzI64, expr);\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\r\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return expr;\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return type.size == 64\r\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\r\n          : expr;\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(0);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an allocation expression for an instance of the specified class. */\r\n  makeAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n\r\n    // allocate the necessary memory and tee the pointer to a temp. local for reuse\r\n    var tempLocal = currentFunction.getTempLocal(classInstance.type, false);\r\n    var initializers = new Array<ExpressionRef>();\r\n    initializers.push(\r\n      module.createSetLocal(tempLocal.index,\r\n        compileBuiltinAllocate(this, classInstance, reportNode)\r\n      )\r\n    );\r\n\r\n    // apply field initializers\r\n    if (classInstance.members) {\r\n      for (let member of classInstance.members.values()) {\r\n        if (member.kind == ElementKind.FIELD) {\r\n          let field = <Field>member;\r\n          let fieldType = field.type;\r\n          let nativeFieldType = fieldType.toNativeType();\r\n          let fieldDeclaration = field.prototype.declaration;\r\n          assert(!field.isAny(CommonFlags.CONST));\r\n          if (fieldDeclaration.initializer) { // use initializer\r\n            initializers.push(module.createStore(fieldType.byteSize,\r\n              module.createGetLocal(tempLocal.index, nativeSizeType),\r\n              this.compileExpression( // reports\r\n                fieldDeclaration.initializer,\r\n                fieldType,\r\n                ConversionKind.IMPLICIT,\r\n                WrapMode.NONE\r\n              ),\r\n              nativeFieldType,\r\n              field.memoryOffset\r\n            ));\r\n          } else { // initialize with zero\r\n            // TODO: might be unnecessary if the ctor initializes the field\r\n            let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\r\n            initializers.push(module.createStore(fieldType.byteSize,\r\n              module.createGetLocal(tempLocal.index, nativeSizeType),\r\n              parameterIndex >= 0 // initialized via parameter\r\n                ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\r\n                : fieldType.toNativeZero(module),\r\n                nativeFieldType,\r\n              field.memoryOffset\r\n            ));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // return `this`\r\n    initializers.push(\r\n      module.createGetLocal(tempLocal.index, nativeSizeType)\r\n    );\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n    this.currentType = classInstance.type;\r\n    return module.createBlock(null, initializers, nativeSizeType);\r\n  }\r\n\r\n  /** Makes a conditional allocation expression inside of the constructor of the specified class. */\r\n  makeConditionalAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\r\n    // requires that `this` is the first local\r\n    var module = this.module;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    this.currentType = classInstance.type;\r\n    return module.createIf(\r\n      nativeSizeType == NativeType.I64\r\n        ? module.createBinary(\r\n            BinaryOp.NeI64,\r\n            module.createGetLocal(0, NativeType.I64),\r\n            module.createI64(0)\r\n          )\r\n        : module.createGetLocal(0, NativeType.I32),\r\n      module.createGetLocal(0, nativeSizeType),\r\n      module.createTeeLocal(0,\r\n        this.makeAllocate(classInstance, reportNode)\r\n      )\r\n    );\r\n  }\r\n\r\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\r\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\r\n    var currentFunction = this.currentFunction;\r\n    var source = range.source;\r\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\r\n    range.debugInfoRef = expr;\r\n    currentFunction.debugLocations.push(range);\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\nfunction mangleExportName(element: Element, simpleName: string = element.simpleName): string {\r\n  switch (element.kind) {\r\n    case ElementKind.FUNCTION: {\r\n      let parent = (<Function>element).parent || (<Function>element).prototype.parent;\r\n      return parent\r\n        ? mangleExportName(parent)\r\n        + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\r\n        + simpleName\r\n        : simpleName;\r\n    }\r\n    case ElementKind.FIELD: {\r\n      let parent = assert((<Field>element).parent);\r\n      return mangleExportName(parent)\r\n          + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\r\n          + simpleName;\r\n    }\r\n    case ElementKind.ENUMVALUE: {\r\n      let parent = assert((<EnumValue>element).parent);\r\n      return mangleExportName(parent)\r\n          + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\r\n          + simpleName;\r\n    }\r\n    case ElementKind.CLASS: {\r\n      let parent = (<Class>element).prototype.parent;\r\n      return parent\r\n        ? mangleExportName(parent)\r\n        + STATIC_DELIMITER\r\n        + simpleName\r\n        : simpleName;\r\n    }\r\n    default: {\r\n      let parent = element.parent;\r\n      return parent\r\n        ? mangleExportName(parent)\r\n        + STATIC_DELIMITER\r\n        + simpleName\r\n        : simpleName;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler,\r\n  IdentifierHandling\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  SignatureNode,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionExpression,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath,\r\n  nodeIsCallable,\r\n  nodeIsGenericCallable\r\n} from \"./ast\";\r\n\r\nconst builtinsFile = LIBRARY_PREFIX + \"builtins.ts\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Source file names to be requested next. */\r\n  backlog: string[] = new Array();\r\n  /** Source file names already seen, that is processed or backlogged. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Source file names already completely processed. */\r\n  donelog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n\r\n    // check if already processed\r\n    if (this.donelog.has(internalPath)) return;\r\n    this.donelog.add(internalPath); // do not parse again\r\n    this.seenlog.add(internalPath); // do not request again\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n          ? SourceKind.LIBRARY\r\n          : SourceKind.DEFAULT\r\n    );\r\n    var program = this.program;\r\n    program.sources.push(source);\r\n\r\n    // mark the special builtins library file\r\n    if (source.normalizedPath == builtinsFile) {\r\n      source.set(CommonFlags.BUILTIN);\r\n    }\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn);\r\n      if (statement) {\r\n        statement.parent = source;\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: Node | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) {\r\n        this.skipStatement(tn);\r\n        continue;\r\n      }\r\n      if (!decorators) decorators = [];\r\n      decorators.push(decorator);\r\n    }\r\n\r\n    // mark builtins\r\n    flags |= (tn.source.flags & CommonFlags.BUILTIN);\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (tn.skip(Token.DEFAULT)) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          tn.range()\r\n        );\r\n      }\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n          break;\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        }\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (!tn.skip(Token.CLASS)) {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n          break;\r\n        } else {\r\n          tn.discard(state);\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        // fall through\r\n      }\r\n      case Token.CLASS:\r\n      case Token.INTERFACE: {\r\n        tn.next();\r\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExport(tn, flags, startPos);\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    this.donelog.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): CommonTypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    var type: CommonTypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseSignature(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'void'\r\n    } else if (token == Token.VOID) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createType(\r\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let parameters = new Array<TypeNode>();\r\n      let nullable = false;\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          parameters.push(<TypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\r\n\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function signature, as used in type declarations. */\r\n  tryParseSignature(\r\n    tn: Tokenizer\r\n  ): SignatureNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: TypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.TYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <TypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skipIdentifier()) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        if (isSignature) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createSignature(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skipIdentifier()) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var flags = parentFlags;\r\n\r\n    var type: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n      if (!member) return null;\r\n      members.push(<EnumValueDeclaration>member);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEBRACE)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters = new Array<TypeParameterNode>();\r\n    while (!tn.skip(Token.GREATERTHAN)) {\r\n      let typeParameter = this.parseTypeParameter(tn);\r\n      if (!typeParameter) return null;\r\n      typeParameters.push(<TypeParameterNode>typeParameter);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.GREATERTHAN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    if (typeParameters.length === 0) {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <TypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private parseParametersThis: TypeNode | null = null;\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n    var thisType: CommonTypeNode | null = null;\r\n\r\n    // check if there is a leading `this` parameter\r\n    this.parseParametersThis = null;\r\n    if (tn.skip(Token.THIS)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        thisType = this.parseType(tn); // reports\r\n        if (!thisType) return null;\r\n        if (thisType.kind == NodeKind.TYPE) {\r\n          this.parseParametersThis = <TypeNode>thisType;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            thisType.range\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n        return null;\r\n      }\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          return parameters;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let param = this.parseParameter(tn, isConstructor); // reports\r\n      if (!param) return null;\r\n      if (seenRest && !reportedRest) {\r\n        this.error(\r\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n          seenRest.name.range\r\n        );\r\n        reportedRest = true;\r\n      }\r\n      switch (param.parameterKind) {\r\n        default: {\r\n          if (seenOptional) {\r\n            this.error(\r\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n              param.name.range\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ParameterKind.OPTIONAL: {\r\n          seenOptional = true;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          seenRest = param;\r\n          break;\r\n        }\r\n      }\r\n      parameters.push(param);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (isConstructor) {\r\n      if (tn.skip(Token.PUBLIC)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PUBLIC;\r\n      } else if (tn.skip(Token.PROTECTED)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PROTECTED;\r\n      } else if (tn.skip(Token.PRIVATE)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PRIVATE;\r\n      }\r\n      if (tn.peek() == Token.READONLY) {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek() != Token.COLON) { // modifier\r\n          tn.discard(state);\r\n          if (!startRange) startRange = tn.range();\r\n          accessFlags |= CommonFlags.READONLY;\r\n        } else { // identifier\r\n          tn.reset(state);\r\n        }\r\n      }\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skipIdentifier()) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: CommonTypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n    var thisType = this.parseParametersThis;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var isArrow = false;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skipIdentifier()) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      isArrow = true;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    isArrow: bool,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n      this.error(\r\n        DiagnosticCode.Type_expected,\r\n        returnType.range\r\n      ); // recoverable\r\n    }\r\n\r\n    if (isArrow) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null, // TODO?\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null;\r\n    if (isArrow) {\r\n      body = this.parseStatement(tn, false);\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClassOrInterface(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at ('class' | 'interface'):\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    var isInterface = tn.token == Token.INTERFACE;\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    } else {\r\n      typeParameters = [];\r\n    }\r\n\r\n    var extendsType: TypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.TYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <TypeNode>t;\r\n    }\r\n\r\n    var implementsTypes: TypeNode[] | null = null;\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        if (!isInterface) {\r\n          if (!implementsTypes) implementsTypes = [];\r\n          implementsTypes.push(<TypeNode>type);\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration: ClassDeclaration;\r\n    if (isInterface) {\r\n      assert(!implementsTypes);\r\n      declaration = Node.createInterfaceDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    } else {\r\n      declaration = Node.createClassDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        implementsTypes,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (!member) return null;\r\n        member.parent = declaration;\r\n        members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return declaration;\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n\r\n    var decorators = new Array<DecoratorNode>();\r\n    while (tn.skip(Token.AT)) {\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) break;\r\n      decorators.push(<DecoratorNode>decorator);\r\n    }\r\n\r\n    var flags = parent.flags & CommonFlags.AMBIENT; // inherit\r\n\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      flags |= CommonFlags.PUBLIC;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      flags |= CommonFlags.PRIVATE;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      flags |= CommonFlags.PROTECTED;\r\n    }\r\n\r\n    var staticStart: i32 = 0;\r\n    var staticEnd: i32 = 0;\r\n    var abstractStart: i32 = 0;\r\n    var abstractEnd: i32 = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        flags |= (CommonFlags.ABSTRACT | CommonFlags.INSTANCE);\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      } else {\r\n        flags |= CommonFlags.INSTANCE;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) {\r\n        flags |= CommonFlags.GENERIC_CONTEXT;\r\n      }\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.skip(Token.READONLY)) {\r\n      flags |= CommonFlags.READONLY;\r\n      readonlyStart = tn.tokenPos;\r\n      readonlyEnd = tn.pos;\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (tn.skip(Token.GET)) {\r\n      if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.GET;\r\n        isGetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.SET)) {\r\n      if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.SET | CommonFlags.SET;\r\n        isSetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n      flags |= CommonFlags.CONSTRUCTOR;\r\n      isConstructor = true;\r\n      if (flags & CommonFlags.STATIC) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(staticStart, staticEnd), \"static\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.READONLY) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (!isConstructor && !tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = isConstructor\r\n      ? Node.createConstructorExpression(tn.range())\r\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      let thisType = this.parseParametersThis;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            implicitFieldDeclaration.parent = parent;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createSignature(\r\n        parameters,\r\n        returnType,\r\n        thisType,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let ns = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, ns);\r\n          if (!member) return null;\r\n          member.parent = ns;\r\n          members.push(member);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ns;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    startPos: i32\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    var path: StringLiteralExpression | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseExportMember(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n          let ret = Node.createExportStatement(null, path, flags, tn.range(startPos, tn.pos));\r\n          let internalPath = assert(ret.internalPath);\r\n          let source = tn.source;\r\n          if (!source.exportPaths) source.exportPaths = new Set();\r\n          source.exportPaths.add(internalPath);\r\n          if (!this.seenlog.has(internalPath)) {\r\n            this.backlog.push(internalPath);\r\n            this.seenlog.add(internalPath);\r\n          }\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"from\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifierName()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      members = new Array();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseImportDeclaration(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.backlog.push(internalPath);\r\n          this.seenlog.add(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifierName()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skipIdentifier()) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skipIdentifier()) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(IdentifierHandling.PREFER);\r\n    var startPos = tn.tokenPos;\r\n    var expr: Expression | null = null;\r\n\r\n    if (token == Token.NULL) {\r\n      return Node.createNullExpression(tn.range());\r\n    }\r\n    if (token == Token.TRUE) {\r\n      return Node.createTrueExpression(tn.range());\r\n    }\r\n    if (token == Token.FALSE) {\r\n      return Node.createFalseExpression(tn.range());\r\n    }\r\n\r\n    var precedence = determinePrecedenceStart(token);\r\n    if (precedence != Precedence.INVALID) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, precedence);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    switch (token) {\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            true\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(IdentifierHandling.PREFER)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // can be both\r\n                case Token.QUESTION:   // optional parameter or ternary\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        while (!tn.skip(Token.CLOSEBRACKET)) {\r\n          if (tn.peek() == Token.COMMA) {\r\n            expr = null; // omitted\r\n          } else {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n          }\r\n          elementExpressions.push(expr);\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACKET)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"]\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Expression_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): CommonTypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments = new Array<CommonTypeNode>();\r\n    do {\r\n      if (tn.peek() === Token.GREATERTHAN) {\r\n        break;\r\n      }\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!expr) return null;\r\n      args.push(expr);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = 0\r\n  ): Expression | null {\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    var startPos = expr.range.start;\r\n\r\n    // CallExpression?\r\n    if (nodeIsCallable(expr.kind)) {\r\n      let typeArguments: CommonTypeNode[] | null = null;\r\n      while (\r\n        tn.skip(Token.OPENPAREN)\r\n        ||\r\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\r\n      ) {\r\n        let args = this.parseArguments(tn);\r\n        if (!args) return null;\r\n        expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos)); // is again callable\r\n      }\r\n    }\r\n\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn); // reports\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // InstanceOfExpression\r\n        case Token.INSTANCEOF: {\r\n          let isType = this.parseType(tn); // reports\r\n          if (!isType) return null;\r\n          expr = Node.createInstanceOfExpression(\r\n            expr,\r\n            isType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn); // reports\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA ? Precedence.COMMA + 1 : 0);\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n          next = this.parseExpression(tn,\r\n            isRightAssociative(token)\r\n              ? nextPrecedence\r\n              : nextPrecedence + 1\r\n          );\r\n          if (!next) return null;\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (next.kind == NodeKind.IDENTIFIER) {\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // join\r\n              let propertyCall = <CallExpression>next;\r\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\r\n                propertyCall.expression = Node.createPropertyAccessExpression(\r\n                  expr,\r\n                  <IdentifierExpression>propertyCall.expression,\r\n                  tn.range(startPos, tn.pos)\r\n                );\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.Identifier_expected,\r\n                  propertyCall.expression.range\r\n                );\r\n                return null;\r\n              }\r\n              expr = propertyCall;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.SEMICOLON      // end of the statement for sure\r\n      ) {\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  // skipBlock(tn: Tokenizer): void {\r\n  //   var depth = 0;\r\n  //   var token: Token;\r\n  //   do {\r\n  //     token = tn.next();\r\n  //     if (token == Token.OPENBRACE) {\r\n  //       ++depth;\r\n  //     } else if (token == Token.CLOSEBRACE) {\r\n  //       if (depth) --depth;\r\n  //       if (!depth) break; // done\r\n  //     }\r\n  //   } while (token != Token.ENDOFFILE);\r\n  // }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING,\r\n  INVALID = -1\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Field,\r\n  Function,\r\n  FunctionPrototype,\r\n  Class,\r\n  ClassPrototype,\r\n  Namespace,\r\n  ConstantValueKind,\r\n  Interface,\r\n  Property\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Whether to include private members */\r\n  includePrivate: bool;\r\n  /** Elements still to do. */\r\n  todo: Element[] = [];\r\n  /** Already seen elements. */\r\n  seen: Set<Element> = new Set();\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    this.program = program;\r\n    this.includePrivate;\r\n  }\r\n\r\n  /** Walks all exports and calls the respective handlers. */\r\n  walk(): void {\r\n    for (let element of this.program.moduleLevelExports.values()) this.visitElement(element);\r\n    var todo = this.todo;\r\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\r\n  }\r\n\r\n  /** Visits an element.*/\r\n  visitElement(element: Element): void {\r\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.visitFunctionInstances(<FunctionPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        this.visitClassInstances(<ClassPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prop = <Property>element;\r\n        let getter = prop.getterPrototype;\r\n        if (getter) this.visitFunctionInstances(getter);\r\n        let setter = prop.setterPrototype;\r\n        if (setter) this.visitFunctionInstances(setter);\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if (hasCompiledMember(element)) this.visitNamespace(element);\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  private visitFunctionInstances(element: FunctionPrototype): void {\r\n    for (let instance of element.instances.values()) {\r\n      if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\r\n    }\r\n  }\r\n\r\n  private visitClassInstances(element: ClassPrototype): void {\r\n    for (let instance of element.instances.values()) {\r\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\r\n    }\r\n  }\r\n\r\n  abstract visitGlobal(element: Global): void;\r\n  abstract visitEnum(element: Enum): void;\r\n  abstract visitFunction(element: Function): void;\r\n  abstract visitClass(element: Class): void;\r\n  abstract visitInterface(element: Interface): void;\r\n  abstract visitField(element: Field): void;\r\n  abstract visitNamespace(element: Element): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) sb.push(\"const \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) sb.push(\"const \");\r\n          else sb.push(\"readonly \");\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    // TODO\r\n  }\r\n\r\n  visitNamespace(element: Namespace): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.STATIC)) {\r\n      if (isConst) sb.push(\"static readonly \");\r\n      else sb.push(\"static \");\r\n    } else {\r\n      if (isConst) sb.push(\"const \");\r\n      else sb.push(\"var \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"enum \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) this.visitNamespace(element);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.GET)) {\r\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n      sb.push(\";\\n\");\r\n      return;\r\n    } else {\r\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\r\n      sb.push(element.simpleName);\r\n    }\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\r\n      sb.push(\")\");\r\n    } else {\r\n      sb.push(\"): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n    }\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\r\n      sb.push(\"class \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    var base = element.base;\r\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\r\n      sb.push(\" extends \");\r\n      sb.push(base.simpleName); // TODO: fqn\r\n    }\r\n    sb.push(\" {\\n\");\r\n    var members = element.prototype.members; // static\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    var ctor = element.constructorInstance;\r\n    if (ctor) this.visitFunction(ctor);\r\n    members = element.members; // instance\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitNamespace(element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"namespace \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    sb.push(\"export default ASModule;\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Tests if a namespace-like element has at least one compiled member. */\r\nfunction hasCompiledMember(element: Element): bool {\r\n  var members = element.members;\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      switch (member.kind) {\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          for (let instance of (<FunctionPrototype>member).instances.values()) {\r\n            if (instance.is(CommonFlags.COMPILED)) return true;\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          for (let instance of (<ClassPrototype>member).instances.values()) {\r\n            if (instance.is(CommonFlags.COMPILED)) return true;\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  getFunctionName,\r\n  getFunctionBody,\r\n  getFunctionParamCount,\r\n  getFunctionParamType,\r\n  getFunctionResultType,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfCondition,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getLoopName,\r\n  getLoopBody,\r\n  getBreakName,\r\n  getBreakCondition,\r\n  getGetLocalIndex,\r\n  getSetLocalIndex,\r\n  getSetLocalValue,\r\n  getLoadOffset,\r\n  getLoadPtr,\r\n  getStoreOffset,\r\n  getStorePtr,\r\n  getStoreValue,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getUnaryOp,\r\n  getUnaryValue,\r\n  getBinaryOp,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getSelectCondition,\r\n  getDropValue,\r\n  getReturnValue,\r\n  getHostOp,\r\n  getHostOperand\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\r\n    var body = getFunctionBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(getFunctionResultType(func)));\r\n    this.push(\" \");\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = getExpressionId(expr);\r\n    var type = getExpressionType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = getBlockName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = getBlockChildCount(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(getBlockChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          if (nested = getIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(getIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = getLoopName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(getLoopBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = getBreakCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = getBreakName(expr)) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallImport:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getGetLocalIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.SetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getSetLocalIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(getSetLocalValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GetGlobal:\r\n      case ExpressionId.SetGlobal: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getLoadOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getLoadPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getStoreOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getStorePtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getStoreValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(getConstValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(getConstValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(getConstValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(getSelectThen(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectElse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(getDropValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = getReturnValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (getHostOp(expr)) {\r\n          case HostOp.CurrentMemory: {\r\n            this.push(\"current_memory()\");\r\n            return;\r\n          }\r\n          case HostOp.GrowMemory: {\r\n            this.push(\"grow_memory(\");\r\n            this.decompileExpression(getHostOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicWake:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport {\r\n  Compiler,\r\n  Options,\r\n  Target,\r\n  Feature\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  Decompiler\r\n} from \"./decompiler\";\r\n\r\nimport {\r\n  IDLBuilder,\r\n  TSDBuilder\r\n} from \"./definitions\";\r\n\r\nimport {\r\n  DiagnosticMessage,\r\n  DiagnosticCategory,\r\n  formatDiagnosticMessage\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module\r\n} from \"./module\";\r\n\r\nimport {\r\n  Parser\r\n} from \"./parser\";\r\n\r\nimport {\r\n  Program\r\n} from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) parser = new Parser();\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noTreeShaking` option. */\r\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\r\n  options.noTreeShaking = noTreeShaking;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(name, alias);\r\n}\r\n\r\n/** Sign extension operations. */\r\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\r\n/** Mutable global imports and exports. */\r\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\r\n\r\n/** Enables a specific feature. */\r\nexport function enableFeature(options: Options, feature: Feature): void {\r\n  options.features |= feature;\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX } from \"./common\";\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_zero = Long.ZERO;\r\n\r\nglobal.i64_one = Long.ONE;\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_eq = function(left, right) {\r\n  return left.eq(right);\r\n};\r\n\r\nglobal.i64_ne = function(left, right) {\r\n  return left.ne(right);\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","/** @module util *//***/\r\n\r\n/** Reads a 32-bit integer from the specified buffer. */\r\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8\r\n       | buffer[offset + 2] << 16\r\n       | buffer[offset + 3] << 24;\r\n}\r\n\r\n/** Writes a 32-bit integer to the specified buffer. */\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\n/** Reads a 64-bit integer from the specified buffer. */\r\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\r\n  var lo = readI32(buffer, offset);\r\n  var hi = readI32(buffer, offset + 4);\r\n  return i64_new(lo, hi);\r\n}\r\n\r\n/** Writes a 64-bit integer to the specified buffer. */\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\n/** Reads a 32-bit float from the specified buffer. */\r\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\r\n  return i32_as_f32(readI32(buffer, offset));\r\n}\r\n\r\n/** Writes a 32-bit float to the specified buffer. */\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\n/** Reads a 64-bit float from the specified buffer. */\r\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\r\n  return i64_as_f64(readI64(buffer, offset));\r\n}\r\n\r\n/** Writes a 64-bit float to the specified buffer. */\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + (hi - lo) / 2;\r\n    mid -= mid % 2;\r\n    if (map[mid] <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < map[mid]) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\n import {\r\n  Compiler,\r\n  ConversionKind,\r\n  WrapMode\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI64High,\r\n  getConstValueI64Low,\r\n  getConstValueI32\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  FunctionPrototype,\r\n  Class,\r\n  Field,\r\n  OperatorKind,\r\n  FlowFlags\r\n} from \"./program\";\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  var arg0: ExpressionRef,\r\n      arg1: ExpressionRef,\r\n      arg2: ExpressionRef,\r\n      ret: ExpressionRef;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once/ it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // types\r\n\r\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.SIGNED)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      if (classType) {\r\n        let stringInstance = compiler.program.stringInstance;\r\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\r\n      }\r\n      return module.createI32(0);\r\n    }\r\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      return classType != null && classType.lookupOverload(OperatorKind.INDEXED_GET) != null\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n\r\n    // math\r\n\r\n    case \"clz\": { // clz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ClzI64\r\n              : UnaryOp.ClzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ctz\": { // ctz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.CtzI64\r\n              : UnaryOp.CtzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.PopcntI64\r\n              : UnaryOp.PopcntI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\r\n            compiler.currentType\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret; // possibly overflows\r\n    }\r\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\r\n            compiler.currentType\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret; // possibly overflowws\r\n    }\r\n    case \"abs\": { // abs<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          // possibly overflows, e.g. abs<i8>(-128) == 128\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\r\n          ret = module.createSelect( // x > 0 ? x : 0-x\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI32, // ifFalse\r\n              module.createI32(0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32)\r\n            ),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              module.createI32(0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              compiler.options.usizeType.toNativeZero(module),\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            ),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\r\n              compiler.options.usizeType.toNativeZero(module)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI64,\r\n              module.createI64(0, 0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n            ),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n              module.createI64(0, 0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"max\": { // max<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"min\": { // min<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ceil\": { // ceil<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"floor\": { // floor<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"nearest\": { // nearest<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\r\n      if (operands.length != 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      switch (typeArguments[0].kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            compiler.currentType = typeArguments[0];\r\n            return module.createUnreachable();\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          arg0 = compiler.compileExpression(\r\n            operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: { // small integers and void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return ret;\r\n    }\r\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        // case TypeKind.VOID:\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"trunc\": { // trunc<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments && typeArguments.length) {\r\n        compiler.currentType = typeArguments[0];\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // memory access\r\n\r\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return module.createLoad(\r\n        typeArguments[0].byteSize,\r\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > typeArguments[0].size\r\n          ? (compiler.currentType = contextualType).toNativeType()\r\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\r\n        offset\r\n      );\r\n    }\r\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (operands.length < 2 || operands.length > 3) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n          : ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let type: Type;\r\n      if (\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        (\r\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\r\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\r\n    }\r\n    case \"sizeof\": { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(byteSize);\r\n        } else {\r\n          ret = module.createI64(byteSize, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(byteSize, 0);\r\n        } else {\r\n          ret = module.createI32(byteSize);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"alignof\": { // alignof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      let alignLog2: i32;\r\n      switch (byteSize) {\r\n        case 1: { alignLog2 = 0; break; }\r\n        case 2: { alignLog2 = 1; break; }\r\n        case 4: { alignLog2 = 2; break; }\r\n        case 8: { alignLog2 = 3; break; }\r\n        default: { assert(false); return module.createUnreachable(); }\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(alignLog2);\r\n        } else {\r\n          ret = module.createI64(alignLog2, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(alignLog2, 0);\r\n        } else {\r\n          ret = module.createI32(alignLog2);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length > 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let classType = typeArguments[0].classReference;\r\n      if (!classType) {\r\n        compiler.error( // TODO: better error\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.createI32(offset);\r\n        } else {\r\n          return module.createI64(offset);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.createI64(offset);\r\n        } else {\r\n          return module.createI32(offset);\r\n        }\r\n      }\r\n    }\r\n\r\n    // control flow\r\n\r\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (operands.length != 3) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      }\r\n      let type = compiler.currentType;\r\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg2 = compiler.makeIsTrueish(\r\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\r\n        compiler.currentType\r\n      );\r\n      compiler.currentType = type;\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        default: { // any other value type\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unreachable\": { // unreachable() -> *\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // host operations\r\n\r\n    case \"current_memory\": { // current_memory() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.CurrentMemory);\r\n    }\r\n    case \"grow_memory\": { // grow_memory(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        arg0 = module.createUnreachable();\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\r\n    }\r\n    // see: https://github.com/WebAssembly/bulk-memory-operations\r\n    case \"move_memory\": { // move_memory(dest: usize, src: usize: n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n    case \"set_memory\": { // set_memory(dest: usize, value: u8, n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        Type.u32,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n\r\n    // other\r\n\r\n    case \"changetype\": { // changetype<T!>(value: *) -> T\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpressionRetainType(\r\n        operands[0],\r\n        typeArguments[0],\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = typeArguments[0];\r\n      if (compiler.currentType.size != typeArguments[0].size) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\r\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\r\n      return arg0; // any usize to any usize\r\n    }\r\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else if (operands.length > 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\r\n      }\r\n\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) {\r\n          compiler.currentType = Type.void;\r\n          return module.createNop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.createF32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.createF64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n        compiler.currentType = Type.void;\r\n      } else {\r\n        switch (compiler.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            let flow = compiler.currentFunction.flow;\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(\r\n              compiler.currentType,\r\n              !flow.canOverflow(arg0, compiler.currentType)\r\n            );\r\n            ret = module.createIf(\r\n              module.createTeeLocal(tempLocal.index, arg0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32:\r\n          default: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\r\n            ret = module.createIf(\r\n              module.createTeeLocal(tempLocal.index, arg0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32, false);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF32(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64, false);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF64(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unchecked\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let flow = compiler.currentFunction.flow;\r\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\r\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\r\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\r\n      return ret;\r\n    }\r\n    case \"call_indirect\": { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\r\n      if (operands.length < 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let returnType: Type;\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        returnType = typeArguments[0];\r\n      } else {\r\n        returnType = contextualType;\r\n      }\r\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\r\n      if (compiler.currentType.kind != TypeKind.U32) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          operands[0].range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let numOperands = operands.length - 1;\r\n      let operandExprs = new Array<ExpressionRef>(numOperands);\r\n      let signatureParts = new Array<string>(numOperands + 1);\r\n      let nativeReturnType = returnType.toNativeType();\r\n      let nativeParamTypes = new Array<NativeType>(numOperands);\r\n      for (let i = 0; i < numOperands; ++i) {\r\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\r\n        let operandType = compiler.currentType;\r\n        signatureParts[i] = operandType.toSignatureString();\r\n        nativeParamTypes[i] = operandType.toNativeType();\r\n      }\r\n      signatureParts[numOperands] = returnType.toSignatureString();\r\n      let typeName = signatureParts.join(\"\");\r\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\r\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\r\n      compiler.currentType = returnType;\r\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\r\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\r\n      return module.createCallIndirect(arg0, operandExprs, typeName);\r\n    }\r\n\r\n    // conversions\r\n\r\n    case \"i8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i8,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i16,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"isize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u8,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u16,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"usize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"bool\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.bool,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"f32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.f32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"f64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.f64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n  }\r\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\r\n  if (expr) {\r\n    if (typeArguments && typeArguments.length) {\r\n      compiler.error(\r\n        DiagnosticCode.Type_0_is_not_generic,\r\n        reportNode.range, prototype.internalName\r\n      );\r\n    }\r\n    return expr;\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Operation_not_supported,\r\n    reportNode.range\r\n  );\r\n  return module.createUnreachable();\r\n}\r\n\r\n/** Defers an inline-assembler-like call to a built-in function. */\r\nfunction deferASMCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  switch (prototype.internalName) {\r\n\r\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\r\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\r\n    //   and, or, xor, shl, shr_u, shr_s\r\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\r\n\r\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\r\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\r\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\r\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\r\n\r\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\r\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\r\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\r\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\r\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\r\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\r\nfunction deferASM(\r\n  name: string,\r\n  compiler: Compiler,\r\n  typeArgument: Type,\r\n  operands: Expression[],\r\n  valueType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var prototype = assert(compiler.program.elementsLookup.get(name));\r\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\r\n}\r\n\r\n/** Evaluates the constant type of a type argument *or* expression. */\r\nfunction evaluateConstantType(\r\n  compiler: Compiler,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  reportNode: Node\r\n): Type | null {\r\n  if (operands.length == 0) { // requires type argument\r\n    if (!typeArguments || typeArguments.length != 1) {\r\n      compiler.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n      );\r\n      return null;\r\n    }\r\n    return typeArguments[0];\r\n  }\r\n  if (operands.length == 1) { // optional type argument\r\n    if (typeArguments) {\r\n      if (typeArguments.length == 1) {\r\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        if (typeArguments.length) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return null;\r\n        }\r\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      }\r\n    } else {\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n    }\r\n    return compiler.currentType;\r\n  }\r\n  if (typeArguments && typeArguments.length > 1) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.range, \"1\", typeArguments.length.toString(10)\r\n    );\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Expected_0_arguments_but_got_1,\r\n    reportNode.range, \"1\", operands.length.toString(10)\r\n  );\r\n  return null;\r\n}\r\n\r\n/** Evaluates a `constantOffset` argument.*/\r\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I64 ||\r\n      getConstValueI64High(expr) != 0 ||\r\n      (value = getConstValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I32 ||\r\n      (value = getConstValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\nconst allocateInternalName = \"allocate_memory\";\r\n\r\n/** Compiles a memory allocation for an instance of the specified class. */\r\nexport function compileAllocate(\r\n  compiler: Compiler,\r\n  classInstance: Class,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  assert(classInstance.program == program);\r\n  var module = compiler.module;\r\n  var options = compiler.options;\r\n\r\n  var allocatePrototype = program.elementsLookup.get(allocateInternalName);\r\n  if (!allocatePrototype) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      reportNode.range, allocateInternalName\r\n    );\r\n    program.info(\r\n      DiagnosticCode.An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf,\r\n      reportNode.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n  if (allocatePrototype.kind != ElementKind.FUNCTION_PROTOTYPE) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n      reportNode.range, allocatePrototype.internalName\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  var allocateInstance = (<FunctionPrototype>allocatePrototype).resolve(); // reports\r\n  if (!(allocateInstance && compiler.compileFunction(allocateInstance))) return module.createUnreachable();\r\n\r\n  compiler.currentType = classInstance.type;\r\n  return module.createCall(\r\n    allocateInstance.internalName, [\r\n      options.isWasm64\r\n        ? module.createI64(classInstance.currentMemoryOffset)\r\n        : module.createI32(classInstance.currentMemoryOffset)\r\n    ],\r\n    options.nativeSizeType\r\n  );\r\n}\r\n\r\nconst abortInternalName = \"abort\";\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringType = program.typesLookup.get(\"string\"); // might be intended\r\n  if (!stringType) return module.createUnreachable();\r\n\r\n  var abortPrototype = program.elementsLookup.get(abortInternalName); // might be intended\r\n  if (!abortPrototype || abortPrototype.kind != ElementKind.FUNCTION_PROTOTYPE) return module.createUnreachable();\r\n\r\n  var abortInstance = (<FunctionPrototype>abortPrototype).resolve(); // reports\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\r\n\r\n  var messageArg = message != null\r\n    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    : stringType.toNativeZero(module);\r\n\r\n  var filenameArg = compiler.compileStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.createBlock(null, [\r\n    module.createCallImport(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.createI32(reportNode.range.line),\r\n        module.createI32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.createUnreachable()\r\n  ]);\r\n}\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__23__;","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\n\r\nfor (var key in binaryen)\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\"))\r\n    global[key] = binaryen[key];\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.allocate_memory = function(size) {\r\n  if (!size) return 0; // should be safe in our case\r\n  return binaryen._malloc(size);\r\n};\r\n\r\nglobal.free_memory = function(ptr) {\r\n  if (ptr) binaryen._free(ptr);\r\n};\r\n\r\nglobal.move_memory = function(dest, src, n) {\r\n  return binaryen._memmove(dest, src, n);\r\n};\r\n\r\nglobal.store = function(ptr, val) {\r\n  binaryen.HEAPU8[ptr] = val;\r\n};\r\n\r\nglobal.load = function(ptr) {\r\n  return binaryen.HEAPU8[ptr];\r\n};\r\n\r\n// Implement module stubs\r\n\r\nconst Module = require(\"../../module\").Module;\r\n\r\nModule.prototype.toText = function toText() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrint(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n\r\nModule.prototype.toAsmjs = function toAsmjs() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrintAsmjs(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n","module.exports = globalScope => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n\r\n  globalScope[\"allocate_memory\"] = function allocate_memory(size) {\r\n    if (!(size >>>= 0)) return 0;\r\n\r\n    if (HEAP_OFFSET + size > HEAP.length) {\r\n      var oldHeap = HEAP;\r\n      HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n      HEAP.set(oldHeap);\r\n    }\r\n\r\n    var ptr = HEAP_OFFSET;\r\n    if ((HEAP_OFFSET += size) & 7)\r\n      HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n\r\n    return ptr;\r\n  };\r\n\r\n  globalScope[\"free_memory\"] = function free_memory(ptr) {\r\n    // TODO\r\n  };\r\n\r\n  globalScope[\"move_memory\"] = function move_memory(dest, src, size) {\r\n    HEAP.copyWithin(dest, src, src + size);\r\n  };\r\n\r\n  globalScope[\"store\"] = function store(ptr, value, offset) {\r\n    HEAP[ptr + (offset | 0)] = value;\r\n  };\r\n\r\n  globalScope[\"load\"] = function load(ptr, offset) {\r\n    return HEAP[ptr + (offset | 0)];\r\n  };\r\n};\r\n","module.exports = globalScope => {\r\n  globalScope[\"JSMath\"] = Math;\r\n};\r\n","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value: 127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value: 32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 1, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\r\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\r\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"ctz\"] = function ctz(value) {\r\n  var c = Math.clz32(value & -value);\r\n  return value ? 31 - c : c;\r\n};\r\n\r\nglobalScope[\"popcnt\"] = function popcnt(value) {\r\n  value -= value >>> 1 & 0x55555555;\r\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\r\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\r\n};\r\n\r\nglobalScope[\"rotl\"] = function rotl(value, shift) {\r\n  shift &= 31;\r\n  return (value << shift) | (value >>> (32 - shift));\r\n};\r\n\r\nglobalScope[\"rotr\"] = function rotr(value, shift) {\r\n  shift &= 31;\r\n  return (value >>> shift) | (value << (32 - shift));\r\n};\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\n// Adopt code from https://github.com/rfk/wasm-polyfill\r\nglobalScope[\"nearest\"] = function nearest(value) {\r\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\r\n    return 2.0 * Math.round(value * 0.5);\r\n  }\r\n  return Math.round(value);\r\n};\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"copysign\"] = function copysign(x, y) {\r\n  return Math.abs(x) * Math.sign(y);\r\n};\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\r\n  return parseInt(str, undefined) | 0;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isReference\"] = function isClass(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\n\r\nglobalScope[\"unchecked\"] = function(expr) {\r\n  return expr;\r\n};\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nrequire(\"./portable/math\")(globalScope);\r\nrequire(\"./portable/memory\")(globalScope);\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\nimport \"../../../std/portable\";\r\nimport \"./binaryen\";\r\nimport \"./i64\";\r\nimport \"./float\";\r\n"],"sourceRoot":""}