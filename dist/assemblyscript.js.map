{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/./std/portable/memory.js","webpack://assemblyscript/./std/portable/math.js","webpack://assemblyscript/./std/portable.js","webpack://assemblyscript/./src/glue/js/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__22__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","diagnostics_1","types_1","ast_1","module_1","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","OperatorKind","QueuedExport","QueuedImport","TypeAlias","operatorKindFromDecorator","decoratorKind","arg","assert","length","charCodeAt","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","LT","LE","INVALID","ElementKind","CommonFlags","DecoratorFlags","noTypesYet","Map","Program","_super","diagnostics","_this","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayPrototype","arrayBufferViewPrototype","stringInstance","resolvedThisExpression","resolvedElementExpression","sources","__extends","getSource","normalizedPath","k","source","lookupSourceByPath","normalizedPathWithoutExtension","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","queuedExports","queuedImports","Array","queuedExtends","queuedImplements","statements","j","statement","kind","NodeKind","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","EXPORT","initializeExports","FUNCTIONDECLARATION","initializeFunction","IMPORT","initializeImports","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeAlias","VARIABLE","initializeVariables","queuedImport","element","tryResolveImport","referencedName","set","internalName","splice","referencedNameAlt","error","DiagnosticCode","Module_0_has_no_exported_member_1","declaration","range","parent","path","externalName","text","queuedExports_1","__values","queuedExports_1_1","next","done","_a","__read","exportName","queuedExport","currentExport","isReExport","member","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","extendsType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_c","alias","Error","INTERFACE_PROTOTYPE","stringPrototype","resolve","has","Duplicate_identifier_0","programLevelInternalName","type","filterDecorators","decorators","acceptedFlags","presentFlags","NONE","decorator","flag","decoratorKindToFlag","decoratorNameToKind","Duplicate_decorator","toString","Decorator_0_is_not_valid_here","checkGlobalOptions","parentNode","hasDecorator","GLOBAL","is","BUILTIN","isLibrary","SOURCE","globalName","namespace","fileLevelInternalName","simpleName","ClassPrototype","SEALED","UNMANAGED","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Range","join","push","members","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeAccessor","initializeMethod","classPrototype","STATIC","staticField","Global","instanceMembers","instanceField","FieldPrototype","decoratorFlags","OPERATOR_BINARY","INLINE","CONSTRUCTOR","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","DecoratorKind","OPERATOR","OPERATOR_PREFIX","OPERATOR_POSTFIX","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","Operation_not_supported","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","values","initializeEnumValue","enm","EnumValue","initializeExport","internalPath","identifier","referencedElement","seen","Set","add","declarations","initializeImport","namespaceName","indexPart","endsWith","substring","InterfacePrototype","parentNamespace","Namespace","existingExport","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","typeParameters","global_1","resolveSignature","node","contextualTypeArguments","reportNotFound","explicitThisType","thisType","resolveType","parameterTypeNodes","parameters","numParameters","parameterTypes","parameterNames","requiredParameters","hasRest","parameterTypeNode","parameterKind","ParameterKind","DEFAULT","REST","parameterType","returnType","returnTypeNode","signature","Signature","SIGNATURE","asFunction","typeNode","localName","ENUM","instance","resolveUsingTypeArguments","typeArguments","paramTypes","paramType","instanceKey","typesToString","placeholderType","resolveTypeArguments","typeArgumentNodes","alternativeReportNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","atEnd","contextualFunction","contextualEnum","ENUMVALUE","flow","getScopedLocal","resolvePropertyAccess","propertyAccess","targetExpression","expression","target","resolveExpression","propertyName","LOCAL","FIELD","classReference","Property_0_does_not_exist_on_type_1","CLASS","elementExpression","indexedGet","lookupOverload","Index_signature_is_missing_in_type_0","base","resolveElementAccess","elementAccess","PARENTHESIZED","ASSERTION","toType","classType","BINARY","THIS","explicitLocal","_this_cannot_be_referenced_in_current_location","SUPER","_super_can_only_be_referenced_in_a_derived_class","IDENTIFIER","PROPERTYACCESS","ELEMENTACCESS","CALL","FUNCTION_PROTOTYPE","signatureReference","functionTarget","cachedFunctionTarget","FunctionTarget","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","DiagnosticEmitter","Element","program","flags","NAMESPACE","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","withConstantIntegerValue","lo","hi","constantIntegerValue","i64_new","CONST","INLINED","withConstantFloatValue","constantFloatValue","Parameter","initializer","Local","index","scopedGlobal","instances","classTypeArguments","functionTypeArguments","isInstance","INSTANCE","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","inheritedName","inheritedType","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","classInstance","signatureParameters","signatureParameterCount","parameterDeclaration","Function","resolvePartial","partialKey","partialPrototype","reportNode","resolvedTypeArguments","GENERIC","resolveBuiltinTypeArguments","resolvedType","FUNCTION","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","AMBIENT","DECLARE","localIndex","local","inheritedTypeArguments_2","inheritedTypeArguments_2_1","parameterName","getParameterName","Flow","create","addLocal","getTempLocal","wrapped","temps","toNativeType","NativeType","I32","I64","F32","F64","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","line","column","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","Field","memoryOffset","inheritedTypeArguments_3","inheritedTypeArguments_3_1","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Class","currentMemoryOffset","_d","inheritedMember","partialConstructor","constructorInstance","_f","_g","fieldDeclaration","fieldType","fieldInstance","byteSize","instanceProperty","partialGetterPrototype","partialSetterPrototype","_j","_k","_l","operatorInstance","operatorPartial","asClass","inheritedTypeArguments_4","inheritedTypeArguments_4_1","baseType","isAssignableTo","current","unchecked","uncheckedOverload","overload","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","wrappedLocals","wrappedLocalsExt","unset","enterBranchOrScope","branch","slice","leaveBranchOrScope","propagate","_b","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","isLocalWrapped","map","ext","i64_ne","i64_and","i64_shl","i64_one","i64_zero","off","i64_or","i64_not","inherit","other","inheritMutual","left","right","leftExt","rightExt","thisExt","minLength","min","canOverflow","expr","operand","getExpressionId","ExpressionId","GetLocal","getGetLocalIndex","canConversionOverflow","SetLocal","isTeeLocal","getSetLocalValue","GetGlobal","Binary","getBinaryOp","BinaryOp","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","getBinaryLeft","Const","getConstValueI32","getBinaryRight","AndI32","computeSmallIntegerMask","ShlI32","shift","size","ShrI32","ShrU32","DivU32","RemI32","RemU32","Unary","getUnaryOp","UnaryOp","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","getExpressionType","getConstValueI64Low","getConstValueF32","getConstValueF64","MIN_VALUE","MAX_VALUE","Load","fromType","getLoadBytes","isLoadSigned","Block","getBlockName","getBlockChildCount","last","getBlockChild","If","getIfTrue","getIfFalse","Select","getSelectThen","getSelectElse","Call","getCallTarget","Unreachable","fromSize","toSize","__export","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","formatDiagnosticContext","useColors","len","start","end","isLineBreak","sb","formatDiagnosticMessage","showContext","emitDiagnostic","info","warning","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","cachedTemporaryName","hasTemporaryFunction","cachedPrecomputeName","cachedPrecomputeNames","_BinaryenModuleCreate","cachedByValue","allocate_memory","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free_memory","changetype","addFunctionType","result","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","label","children","None","_BinaryenBlock","createBreak","condition","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","body","_BinaryenLoop","createIf","ifTrue","ifFalse","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeFunction","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenExpressionGetType","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenGetLocalGetIndex","_BinaryenGetGlobalGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","getConstValueI64High","getSetLocalIndex","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","_BinaryenSetLocalIsTee","getUnaryValue","getLoadOffset","getLoadPtr","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","_BinaryenFunctionGetBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","ptrs","str","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","program_1","tokenizer_1","Token","Node","createType","isNullable","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","elem","TypeParameterNode","createParameter","ParameterNode","createSignature","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","createComment","CommentNode","commentKind","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","setParentIfNotNull","createAssertionExpression","assertionKind","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","apply","TYPE","TYPEPARAMETER","PARAMETER","implicitFieldDeclaration","nameStr","propStr","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","COMMA","FLOAT","INTEGER","NEW","NULL","REGEXP","TERNARY","TRUE","FALSE","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","Source","tokenizer","sourceKind","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","isTopLevelExport","needsExplicitExport","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","EMPTY","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","parameterIndex","FOR","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","asGlobal","g","eval","e","window","IdentifierHandling","tokenFromKeyword","ABSTRACT","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","INSTANCEOF","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","READONLY","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","PLUS","MINUS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","pos","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","skipIdentifierName","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","i64_add","i64_mul","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","TypeKind","TypeFlags","cachedNullableType","ceil","nonNullableType","computeSmallIntegerShift","targetType","asNullable","signednessIsImportant","currentClass","targetClass","targetFunction","commonCompatible","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","isize32","isize64","usize32","usize64","typesToNativeTypes","types","numTypes","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","builtins_1","Options","WASM32","noTreeShaking","noAssert","noMemory","importMemory","importTable","memoryBase","features","hasFeature","feature","Feature","ConversionKind","WrapMode","Compiler","outerFunction","currentEnum","currentType","startFunctionBody","memorySegments","stringSegments","functionTable","argcVar","argcSet","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionPrototype","startFunctionInstance","startFunction","compileSource","funcRef","ensureFunctionType","i64_align","isWasm64","pages","i64_shr_u","functionTableSize","functionTableExported","entries","compileSourceByPath","File_0_not_found","COMPILED","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","initExpr","Type_expected","compileExpression","Type_0_is_not_assignable_to_type_1","nativeType","isConstant","MODULE_IMPORT","initializeInStart","compileInlineConstant","precomputeExpressionRef","Compiling_constant_with_non_constant_initializer_as_mutable","mangleExportName","isTopLevel","compileEnum","previousValue","initInStart","valueDeclaration","AddI32","Cannot_export_a_mutable_global","compileFunctionUsingTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","nativeSizeType","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","ensureTrampoline","ensureArgcSet","compileInterfaceDeclaration","compileNamespace","ns","compileClassUsingTypeArguments","internalExportName","functionInstance","functionDeclaration","globalDeclaration","compileClass","staticMembers","setter","ctorInstance","_e","getterName","setterName","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","compileStatements","numStatements","stmts","count","Nop","blockFlow","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","repeatLabel","alwaysTrue","compileExpressionRetainType","condPre","incrExpr","bodyExpr","breakBlock","repeatBlock","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifFalseFlow","ifTrueExpr","ifFalseExpr","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","terminated","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","precomputeExpression","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","argumentExpressions","thisArg","compileCallDirect","valueExpression","elementType","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","valueExpr","valueWithCorrectType","tee","thisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","Type_0_is_not_generic","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","compileCallInlineUnchecked","numArgumentsInclThis","previousFlow","thisLocal","paramExpr","argumentLocal","bodyStatement","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","Optional_parameter_must_have_an_initializer","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","retainConstantType","scopedThis","superType","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStaticString","stringValue","stringSegment","stringLength","stringBuffer","stringOffset","stringType","isStatic","arrayInstance","arrayType","elementCount","nativeElementType","byteLength","Int32Array","Float32Array","Float64Array","usizeTypeSize","arraySize","bufferTotalSize","clz","data","writeI64","writeI32","writeF32","writeF64","nativeArrayType","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","currentClassInstance","makeAllocate","ifThenExpr","ifElseExpr","ifThenType","ifElseType","ifThenAllocates","ifElseAllocates","getValue","nativeOne","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","compileAllocate","field","nativeFieldType","builtinsFile","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","t","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","typeParameter","parseTypeParameter","Type_parameter_list_cannot_be_empty","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","isInterface","Interface_declaration_cannot_have_implements_clause","parseClassMember","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","precedence","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","Precedence","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","IDLBuilder","indentLevel","build","isConst","indent","typeToString","i64_to_string","members_1","members_1_1","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","ctor","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Break","Switch","CallImport","CallIndirect","SetGlobal","Store","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Return","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setNoMemory","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","enableFeature","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","wasm","WebAssembly","Instance","low","high","unsigned","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","Math","pow","fromString","radix","RangeError","radixToPower","parseInt","power","mul","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","toNumber","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","ne","lessThan","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","greaterThanOrEqual","gte","ge","compare","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","toUnsigned","shru","shr","shl","floor","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","i64_div","i64_div_u","i64_rem","i64_rem_u","i64_xor","i64_shr","i64_eq","minSafeF32","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","minSafeF64","maxSafeF64","fround","readI32","readI64","readF32","readF64","valueI64","indentX1","indentX2","indentX4","separator","ipos","dirname","origin","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","compiler","evaluateConstantType","tempLocal0","tempLocal1","evaluateConstantOffset","alignLog2","fieldName","Type_0_has_no_property_1","abort","operandExprs","signatureParts","nativeParamTypes","operandType","deferASM","deferASMCall","typeArgument","valueType","allocateInternalName","allocatePrototype","An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf","allocateInstance","abortInternalName","abortPrototype","abortInstance","messageArg","filenameArg","binaryen","Binaryen","key","_malloc","_free","move_memory","dest","src","_memmove","HEAPU8","previousPrint","print","x","_BinaryenModulePrint","_BinaryenModulePrintAsmjs","globalScope","HEAP","HEAP_OFFSET","oldHeap","copyWithin","UnreachableError","captureStackTrace","stack","AssertionError","defineProperties","writable","MIN_POSITIVE_VALUE","EPSILON","clz32","abs","trunc","round","sqrt","y","sign","isTrueish","undefined","fromCodePoint","Number","isInteger","isArray"],"mappings":"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KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MA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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__22__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 28);\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  Options\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n\r\n  typesToString\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  Range,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  TypeParameterNode,\r\n  ParameterKind,\r\n  SignatureNode,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  ElementAccessExpression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  StringLiteralExpression,\r\n  CallExpression,\r\n\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  decoratorNameToKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  BinaryOp,\r\n  UnaryOp,\r\n\r\n  getExpressionId,\r\n  getGetLocalIndex,\r\n  isTeeLocal,\r\n  getSetLocalValue,\r\n  getBinaryOp,\r\n  getConstValueI32,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getUnaryOp,\r\n  getExpressionType,\r\n  getLoadBytes,\r\n  isLoadSigned,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getCallTarget,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getConstValueI64Low\r\n} from \"./module\";\r\nimport { CharCode } from \"./util\";\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Delimiter used between a function and its inner elements. */\r\nexport const INNER_DELIMITER = \"~\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"~lib\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n\r\n/** Represents a yet unresolved export. */\r\nclass QueuedExport {\r\n  isReExport: bool;\r\n  referencedName: string;\r\n  member: ExportMember;\r\n}\r\n\r\n/** Represents a yet unresolved import. */\r\nclass QueuedImport {\r\n  internalName: string;\r\n  referencedName: string;\r\n  referencedNameAlt: string;\r\n  declaration: ImportDeclaration;\r\n}\r\n\r\n/** Represents a type alias. */\r\nclass TypeAlias {\r\n  typeParameters: TypeParameterNode[] | null;\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents the kind of an operator overload. */\r\nexport enum OperatorKind {\r\n  INVALID,\r\n\r\n  // indexed access\r\n  INDEXED_GET,            // a[]\r\n  INDEXED_SET,            // a[]=b\r\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\r\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\r\n\r\n  // binary\r\n  ADD,                    // a + b\r\n  SUB,                    // a - b\r\n  MUL,                    // a * b\r\n  DIV,                    // a / b\r\n  REM,                    // a % b\r\n  POW,                    // a ** b\r\n  BITWISE_AND,            // a & b\r\n  BITWISE_OR,             // a | b\r\n  BITWISE_XOR,            // a ^ b\r\n  BITWISE_SHL,            // a << b\r\n  BITWISE_SHR,            // a >> b\r\n  BITWISE_SHR_U,          // a >>> b\r\n  EQ,                     // a == b\r\n  NE,                     // a != b\r\n  GT,                     // a > b\r\n  GE,                     // a >= b\r\n  LT,                     // a < b\r\n  LE,                     // a <= b\r\n\r\n  // unary prefix\r\n  PLUS,                   // +a\r\n  MINUS,                  // -a\r\n  NOT,                    // !a\r\n  BITWISE_NOT,            // ~a\r\n  PREFIX_INC,             // ++a\r\n  PREFIX_DEC,             // --a\r\n\r\n  // unary postfix\r\n  POSTFIX_INC,            // a++\r\n  POSTFIX_DEC             // a--\r\n\r\n  // not overridable:\r\n  // IDENTITY             // a === b\r\n  // LOGICAL_AND          // a && b\r\n  // LOGICAL_OR           // a || b\r\n}\r\n\r\n/** Returns the operator kind represented by the specified decorator and string argument. */\r\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\r\n  // TODO: unary prefix and postfix\r\n  assert(arg.length);\r\n  switch (arg.charCodeAt(0)) {\r\n    case CharCode.OPENBRACKET: {\r\n      switch (arg) {\r\n        case \"[]\" : return OperatorKind.INDEXED_GET;\r\n        case \"[]=\": return OperatorKind.INDEXED_SET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.OPENBRACE: {\r\n      switch (arg) {\r\n        case \"{}\" : return OperatorKind.UNCHECKED_INDEXED_GET;\r\n        case \"{}=\": return OperatorKind.UNCHECKED_INDEXED_SET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.PLUS: {\r\n      if (arg.length == 1) return OperatorKind.ADD;\r\n      break;\r\n    }\r\n    case CharCode.MINUS: {\r\n      if (arg.length == 1) return OperatorKind.SUB;\r\n      break;\r\n    }\r\n    case CharCode.ASTERISK: {\r\n      switch (arg) {\r\n        case \"*\" : return OperatorKind.MUL;\r\n        case \"**\": return OperatorKind.POW;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.SLASH: {\r\n      if (arg.length == 1) return OperatorKind.DIV;\r\n      break;\r\n    }\r\n    case CharCode.PERCENT: {\r\n      if (arg.length == 1) return OperatorKind.REM;\r\n      break;\r\n    }\r\n    case CharCode.AMPERSAND: {\r\n      if (arg.length == 1) return OperatorKind.BITWISE_AND;\r\n      break;\r\n    }\r\n    case CharCode.BAR: {\r\n      if (arg.length == 1) return OperatorKind.BITWISE_OR;\r\n      break;\r\n    }\r\n    case CharCode.CARET: {\r\n      if (arg.length == 1) return OperatorKind.BITWISE_XOR;\r\n      break;\r\n    }\r\n    case CharCode.EQUALS: {\r\n      if (arg == \"==\") return OperatorKind.EQ;\r\n      break;\r\n    }\r\n    case CharCode.EXCLAMATION: {\r\n      if (arg == \"!=\") return OperatorKind.NE;\r\n      break;\r\n    }\r\n    case CharCode.GREATERTHAN: {\r\n      switch (arg) {\r\n        case \">\" : return OperatorKind.GT;\r\n        case \">=\": return OperatorKind.GE;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.LESSTHAN: {\r\n      switch (arg) {\r\n        case \"<\" : return OperatorKind.LT;\r\n        case \"<=\": return OperatorKind.LE;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return OperatorKind.INVALID;\r\n}\r\n\r\nconst noTypesYet = new Map<string,Type>();\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Array of source files. */\r\n  sources: Source[];\r\n  /** Diagnostic offset used where repeatedly obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n  /** Elements by internal name. */\r\n  elementsLookup: Map<string,Element> = new Map();\r\n  /** Class and function instances by internal name. */\r\n  instancesLookup: Map<string,Element> = new Map();\r\n  /** Types by internal name. */\r\n  typesLookup: Map<string,Type> = noTypesYet;\r\n  /** Declared type aliases. */\r\n  typeAliases: Map<string,TypeAlias> = new Map();\r\n  /** File-level exports by exported name. */\r\n  fileLevelExports: Map<string,Element> = new Map();\r\n  /** Module-level exports by exported name. */\r\n  moduleLevelExports: Map<string,Element> = new Map();\r\n  /** Array prototype reference. */\r\n  arrayPrototype: ClassPrototype | null = null;\r\n  /** ArrayBufferView prototype reference. */\r\n  arrayBufferViewPrototype: InterfacePrototype | null = null;\r\n  /** String instance reference. */\r\n  stringInstance: Class | null = null;\r\n\r\n  /** Target expression of the previously resolved property or element access. */\r\n  resolvedThisExpression: Expression | null = null;\r\n  /** Element expression of the previously resolved element access. */\r\n  resolvedElementExpression : Expression | null = null;\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.sources = [];\r\n  }\r\n\r\n  /** Gets a source by its exact path. */\r\n  getSource(normalizedPath: string): Source | null {\r\n    var sources = this.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      let source = sources[i];\r\n      if (source.normalizedPath == normalizedPath) return source;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the source for the specified possibly ambiguous path. */\r\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\r\n    return (\r\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\r\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\r\n      this.getSource(LIBRARY_PREFIX + normalizedPathWithoutExtension + \".ts\") ||\r\n      this.getSource(LIBRARY_PREFIX + normalizedPathWithoutExtension + \"/index.ts\")\r\n    );\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n    this.typesLookup = new Map([\r\n      [\"i8\", Type.i8],\r\n      [\"i16\", Type.i16],\r\n      [\"i32\", Type.i32],\r\n      [\"i64\", Type.i64],\r\n      [\"isize\", options.isizeType],\r\n      [\"u8\", Type.u8],\r\n      [\"u16\", Type.u16],\r\n      [\"u32\", Type.u32],\r\n      [\"u64\", Type.u64],\r\n      [\"usize\", options.usizeType],\r\n      [\"bool\", Type.bool],\r\n      [\"f32\", Type.f32],\r\n      [\"f64\", Type.f64],\r\n      [\"void\", Type.void],\r\n      [\"number\", Type.f64],\r\n      [\"boolean\", Type.bool]\r\n    ]);\r\n\r\n    var queuedExports = new Map<string,QueuedExport>();\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedExtends = new Array<ClassPrototype>();\r\n    var queuedImplements = new Array<ClassPrototype>();\r\n\r\n    // build initial lookup maps of internal names to declarations\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeAlias(<TypeDeclaration>statement);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0; i < queuedImports.length;) {\r\n      let queuedImport = queuedImports[i];\r\n      let element = this.tryResolveImport(queuedImport.referencedName, queuedExports);\r\n      if (element) {\r\n        this.elementsLookup.set(queuedImport.internalName, element);\r\n        queuedImports.splice(i, 1);\r\n      } else {\r\n        if (element = this.tryResolveImport(queuedImport.referencedNameAlt, queuedExports)) {\r\n          this.elementsLookup.set(queuedImport.internalName, element);\r\n          queuedImports.splice(i, 1);\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Module_0_has_no_exported_member_1,\r\n            queuedImport.declaration.range,\r\n            (<ImportStatement>queuedImport.declaration.parent).path.value,\r\n            queuedImport.declaration.externalName.text\r\n          );\r\n          ++i;\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [exportName, queuedExport] of queuedExports) {\r\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\r\n      let element: Element | null;\r\n      do {\r\n        if (currentExport.isReExport) {\r\n          if (element = this.fileLevelExports.get(currentExport.referencedName)) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n            break;\r\n          }\r\n          currentExport = queuedExports.get(currentExport.referencedName);\r\n          if (!currentExport) {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.member.externalName.range,\r\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\r\n              queuedExport.member.externalName.text\r\n            );\r\n          }\r\n        } else {\r\n          if (\r\n            // normal export\r\n            (element = this.elementsLookup.get(currentExport.referencedName)) ||\r\n            // library re-export\r\n            (element = this.elementsLookup.get(currentExport.member.name.text))\r\n          ) {\r\n            this.setExportAndCheckLibrary(\r\n              exportName,\r\n              element,\r\n              currentExport.member.externalName\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Cannot_find_name_0,\r\n              queuedExport.member.range, queuedExport.member.name.text\r\n            );\r\n          }\r\n          break;\r\n        }\r\n      } while (currentExport);\r\n    }\r\n\r\n    // resolve base prototypes of derived classes\r\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\r\n      let derivedPrototype = queuedExtends[i];\r\n      let derivedDeclaration = derivedPrototype.declaration;\r\n      let derivedType = assert(derivedDeclaration.extendsType);\r\n      let baseElement = this.resolveIdentifier(derivedType.name, null); // reports\r\n      if (!baseElement) continue;\r\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let basePrototype = <ClassPrototype>baseElement;\r\n        derivedPrototype.basePrototype = basePrototype;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          derivedType.range\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    var globalAliases = options.globalAliases;\r\n    if (globalAliases) {\r\n      for (let [alias, name] of globalAliases) {\r\n        if (!name.length) continue; // explicitly disabled\r\n        let element = this.elementsLookup.get(name);\r\n        if (element) this.elementsLookup.set(alias, element);\r\n        else throw new Error(\"element not found: \" + name);\r\n      }\r\n    }\r\n\r\n    // register 'Array'\r\n    var arrayPrototype = this.elementsLookup.get(\"Array\");\r\n    if (arrayPrototype) {\r\n      assert(arrayPrototype.kind == ElementKind.CLASS_PROTOTYPE);\r\n      this.arrayPrototype = <ClassPrototype>arrayPrototype;\r\n    }\r\n\r\n    // register 'ArrayBufferView'\r\n    var arrayBufferViewPrototype = this.elementsLookup.get(\"ArrayBufferView\");\r\n    if (arrayBufferViewPrototype) {\r\n      assert(arrayBufferViewPrototype.kind == ElementKind.INTERFACE_PROTOTYPE);\r\n      this.arrayBufferViewPrototype = <InterfacePrototype>arrayBufferViewPrototype;\r\n    }\r\n\r\n    // register 'String'\r\n    var stringPrototype = this.elementsLookup.get(\"String\");\r\n    if (stringPrototype) {\r\n      assert(stringPrototype.kind == ElementKind.CLASS_PROTOTYPE);\r\n      let stringInstance = (<ClassPrototype>stringPrototype).resolve(null); // reports\r\n      if (stringInstance) {\r\n        if (this.typesLookup.has(\"string\")) {\r\n          let declaration = (<ClassPrototype>stringPrototype).declaration;\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, declaration.programLevelInternalName\r\n          );\r\n        } else {\r\n          this.stringInstance = stringInstance;\r\n          this.typesLookup.set(\"string\", stringInstance.type);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tries to resolve an import by traversing exports and queued exports. */\r\n  private tryResolveImport(\r\n    referencedName: string,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): Element | null {\r\n    var element: Element | null;\r\n    var fileLevelExports = this.fileLevelExports;\r\n    do {\r\n      if (element = fileLevelExports.get(referencedName)) return element;\r\n      let queuedExport = queuedExports.get(referencedName);\r\n      if (!queuedExport) return null;\r\n      if (queuedExport.isReExport) {\r\n        referencedName = queuedExport.referencedName;\r\n        continue;\r\n      }\r\n      return this.elementsLookup.get(queuedExport.referencedName);\r\n    } while (true);\r\n  }\r\n\r\n  private filterDecorators(decorators: DecoratorNode[], acceptedFlags: DecoratorFlags): DecoratorFlags {\r\n    var presentFlags = DecoratorFlags.NONE;\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      let kind = decoratorNameToKind(decorator.name);\r\n      let flag = decoratorKindToFlag(kind);\r\n      if (flag) {\r\n        if (!(acceptedFlags & flag)) {\r\n          this.error(\r\n            DiagnosticCode.Decorator_0_is_not_valid_here,\r\n            decorator.range, decorator.name.range.toString()\r\n          );\r\n        } else if (presentFlags & flag) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_decorator,\r\n            decorator.range, decorator.name.range.toString()\r\n          );\r\n        } else {\r\n          presentFlags |= flag;\r\n        }\r\n      }\r\n    }\r\n    return presentFlags;\r\n  }\r\n\r\n  /** Processes global options, if present. */\r\n  private checkGlobalOptions(\r\n    element: Element,\r\n    declaration: DeclarationStatement\r\n  ): void {\r\n    var parentNode = declaration.parent;\r\n    if (\r\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\r\n      (declaration.range.source.is(CommonFlags.BUILTIN)) ||\r\n      (\r\n        declaration.range.source.isLibrary &&\r\n        element.is(CommonFlags.EXPORT) &&\r\n        (\r\n          assert(parentNode).kind == NodeKind.SOURCE ||\r\n          (\r\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\r\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\r\n          )\r\n        )\r\n    ) {\r\n      let globalName = declaration.programLevelInternalName;\r\n      if (this.elementsLookup.has(globalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, element.internalName\r\n        );\r\n      } else {\r\n        this.elementsLookup.set(globalName, element);\r\n        if (element.is(CommonFlags.BUILTIN)) element.internalName = globalName;\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeClass(\r\n    declaration: ClassDeclaration,\r\n    queuedExtends: ClassPrototype[],\r\n    queuedImplements: ClassPrototype[],\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var simpleName = declaration.name.text;\r\n    var prototype = new ClassPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      decorators\r\n        ? this.filterDecorators(decorators,\r\n            DecoratorFlags.GLOBAL |\r\n            DecoratorFlags.SEALED |\r\n            DecoratorFlags.UNMANAGED\r\n          )\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    if (implementsTypes) {\r\n      let numImplementsTypes = implementsTypes.length;\r\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (numImplementsTypes) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\r\n            Range.join(\r\n              declaration.name.range,\r\n              implementsTypes[numImplementsTypes - 1].range\r\n            )\r\n          );\r\n        }\r\n\r\n      // remember classes that implement interfaces\r\n      } else if (numImplementsTypes) {\r\n        queuedImplements.push(prototype);\r\n      }\r\n    }\r\n\r\n    // remember classes that extend another one\r\n    if (declaration.extendsType) queuedExtends.push(prototype);\r\n\r\n    // add as namespace member if applicable\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // otherwise add to file-level exports if exported\r\n    } else if (prototype.is(CommonFlags.EXPORT)) {\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"class member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeField(\r\n    declaration: FieldDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var decorators = declaration.decorators;\r\n\r\n    // static fields become global variables\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      let staticField = new Global(\r\n        this,\r\n        name,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration,\r\n        decorators\r\n          ? this.filterDecorators(decorators, DecoratorFlags.NONE)\r\n          : DecoratorFlags.NONE\r\n      );\r\n      staticField.parent = classPrototype;\r\n      classPrototype.members.set(name, staticField);\r\n      this.elementsLookup.set(internalName, staticField);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        staticField.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance fields are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(name)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instanceField = new FieldPrototype(\r\n        classPrototype,\r\n        name,\r\n        internalName,\r\n        declaration\r\n      );\r\n      if (decorators) this.filterDecorators(decorators, DecoratorFlags.NONE);\r\n      classPrototype.instanceMembers.set(name, instanceField);\r\n      // TBD: no need to mark as MODULE_EXPORT\r\n    }\r\n  }\r\n\r\n  private initializeMethod(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var prototype: FunctionPrototype | null = null;\r\n\r\n    var decorators = declaration.decorators;\r\n    var decoratorFlags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      decoratorFlags = this.filterDecorators(decorators,\r\n        DecoratorFlags.OPERATOR_BINARY |\r\n        DecoratorFlags.INLINE\r\n      );\r\n    }\r\n\r\n    // static methods become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      if (classPrototype.members) {\r\n        if (classPrototype.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.members = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      classPrototype.members.set(simpleName, prototype);\r\n      this.elementsLookup.set(internalName, prototype);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance methods are remembered until resolved\r\n    } else {\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      prototype = new FunctionPrototype(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\r\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\r\n      // }\r\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\r\n        if (classPrototype.constructorPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\r\n            declaration.name.range\r\n          );\r\n        } else {\r\n          prototype.set(CommonFlags.CONSTRUCTOR);\r\n          classPrototype.constructorPrototype = prototype;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers.set(simpleName, prototype);\r\n      }\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n\r\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\r\n  }\r\n\r\n  private checkOperatorOverloads(\r\n    decorators: DecoratorNode[] | null,\r\n    prototype: FunctionPrototype,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        switch (decorator.decoratorKind) {\r\n          case DecoratorKind.OPERATOR:\r\n          case DecoratorKind.OPERATOR_BINARY:\r\n          case DecoratorKind.OPERATOR_PREFIX:\r\n          case DecoratorKind.OPERATOR_POSTFIX: {\r\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n            if (numArgs == 1) {\r\n              let firstArg = (<Expression[]>decorator.arguments)[0];\r\n              if (\r\n                firstArg.kind == NodeKind.LITERAL &&\r\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n              ) {\r\n                let kind = operatorKindFromDecorator(\r\n                  decorator.decoratorKind,\r\n                  (<StringLiteralExpression>firstArg).value\r\n                );\r\n                if (kind == OperatorKind.INVALID) {\r\n                  this.error(\r\n                    DiagnosticCode.Operation_not_supported,\r\n                    firstArg.range\r\n                  );\r\n                } else {\r\n                  let overloads = classPrototype.overloadPrototypes;\r\n                  if (overloads.has(kind)) {\r\n                    this.error(\r\n                      DiagnosticCode.Duplicate_function_implementation,\r\n                      firstArg.range\r\n                    );\r\n                  } else {\r\n                    prototype.operatorKind = kind;\r\n                    overloads.set(kind, prototype);\r\n                  }\r\n                }\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.String_literal_expected,\r\n                  firstArg.range\r\n                );\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                decorator.range, \"1\", numArgs.toString(0)\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeAccessor(\r\n    declaration: MethodDeclaration,\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    var simpleName = declaration.name.text;\r\n    var internalPropertyName = declaration.fileLevelInternalName;\r\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    var isNew = false;\r\n    if (propertyElement) {\r\n      if (\r\n        propertyElement.kind != ElementKind.PROPERTY ||\r\n        (isGetter\r\n          ? (<Property>propertyElement).getterPrototype\r\n          : (<Property>propertyElement).setterPrototype\r\n        ) != null\r\n      ) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalPropertyName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      propertyElement = new Property(\r\n        this,\r\n        simpleName,\r\n        internalPropertyName,\r\n        classPrototype\r\n      );\r\n      isNew = true;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var decoratorFlags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      decoratorFlags = this.filterDecorators(decorators,\r\n        DecoratorFlags.INLINE\r\n      );\r\n    }\r\n\r\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\r\n\r\n    // static accessors become global functions\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\r\n      if (this.elementsLookup.has(staticName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, staticName\r\n        );\r\n        return;\r\n      }\r\n      let staticPrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        staticName,\r\n        declaration,\r\n        null,\r\n        decoratorFlags\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = staticPrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = staticPrototype;\r\n      }\r\n      if (isNew) {\r\n        if (classPrototype.members) {\r\n          if (classPrototype.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, staticName\r\n            );\r\n            return;\r\n          }\r\n        } else {\r\n          classPrototype.members = new Map();\r\n        }\r\n        classPrototype.members.set(simpleName, propertyElement); // check above\r\n      } else {\r\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\r\n      }\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n\r\n    // instance accessors are remembered until resolved\r\n    } else {\r\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\r\n      if (classPrototype.instanceMembers) {\r\n        if (classPrototype.instanceMembers.has(baseName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalPropertyName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        classPrototype.instanceMembers = new Map();\r\n      }\r\n      let instancePrototype = new FunctionPrototype(\r\n        this,\r\n        baseName,\r\n        instanceName,\r\n        declaration,\r\n        classPrototype,\r\n        decoratorFlags\r\n      );\r\n      if (isGetter) {\r\n        (<Property>propertyElement).getterPrototype = instancePrototype;\r\n      } else {\r\n        (<Property>propertyElement).setterPrototype = instancePrototype;\r\n      }\r\n      classPrototype.instanceMembers.set(baseName, propertyElement);\r\n      this.elementsLookup.set(internalPropertyName, propertyElement);\r\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\r\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\r\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeEnum(\r\n    declaration: EnumDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var element = new Enum(this, simpleName, internalName, declaration);\r\n    element.parent = namespace;\r\n    this.elementsLookup.set(internalName, element);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, element);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, element);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        element.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, element);\r\n      }\r\n    }\r\n\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n\r\n    this.checkGlobalOptions(element, declaration);\r\n  }\r\n\r\n  private initializeEnumValue(\r\n    declaration: EnumValueDeclaration,\r\n    enm: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (enm.members) {\r\n      if (enm.members.has(name)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      enm.members = new Map();\r\n    }\r\n    var value = new EnumValue(enm, this, name, internalName, declaration);\r\n    enm.members.set(name, value);\r\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\r\n      value.set(CommonFlags.MODULE_EXPORT);\r\n    }\r\n  }\r\n\r\n  private initializeExports(\r\n    statement: ExportStatement,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var members = statement.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      this.initializeExport(members[i], statement.internalPath, queuedExports);\r\n    }\r\n  }\r\n\r\n  private setExportAndCheckLibrary(\r\n    name: string,\r\n    element: Element,\r\n    identifier: IdentifierExpression\r\n  ): void {\r\n    this.fileLevelExports.set(name, element);\r\n    if (identifier.range.source.isLibrary) { // add global alias\r\n      if (this.elementsLookup.has(identifier.text)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          identifier.range, identifier.text\r\n        );\r\n      } else {\r\n        element.internalName = identifier.text;\r\n        this.elementsLookup.set(identifier.text, element);\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeExport(\r\n    member: ExportMember,\r\n    internalPath: string | null,\r\n    queuedExports: Map<string,QueuedExport>\r\n  ): void {\r\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\r\n    if (this.fileLevelExports.has(externalName)) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.externalName.range, externalName\r\n      );\r\n      return;\r\n    }\r\n    var referencedName: string;\r\n    var referencedElement: Element | null;\r\n    var queuedExport: QueuedExport | null;\r\n\r\n    // export local element\r\n    if (internalPath == null) {\r\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the element exists\r\n      if (referencedElement = this.elementsLookup.get(referencedName)) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = false;\r\n      queuedExport.referencedName = referencedName; // -> internal name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n\r\n    // export external element\r\n    } else {\r\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\r\n\r\n      // resolve right away if the export exists\r\n      referencedElement = this.elementsLookup.get(referencedName);\r\n      if (referencedElement) {\r\n        this.setExportAndCheckLibrary(\r\n          externalName,\r\n          referencedElement,\r\n          member.externalName\r\n        );\r\n        return;\r\n      }\r\n\r\n      // walk already known queued exports\r\n      let seen = new Set<QueuedExport>();\r\n      while (queuedExport = queuedExports.get(referencedName)) {\r\n        if (queuedExport.isReExport) {\r\n          referencedElement = this.fileLevelExports.get(queuedExport.referencedName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          referencedName = queuedExport.referencedName;\r\n          if (seen.has(queuedExport)) break;\r\n          seen.add(queuedExport);\r\n        } else {\r\n          referencedElement = this.elementsLookup.get(queuedExport.referencedName);\r\n          if (referencedElement) {\r\n            this.setExportAndCheckLibrary(\r\n              externalName,\r\n              referencedElement,\r\n              member.externalName\r\n            );\r\n            return;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n\r\n      // otherwise queue it\r\n      if (queuedExports.has(externalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          member.externalName.range, externalName\r\n        );\r\n        return;\r\n      }\r\n      queuedExport = new QueuedExport();\r\n      queuedExport.isReExport = true;\r\n      queuedExport.referencedName = referencedName; // -> export name\r\n      queuedExport.member = member;\r\n      queuedExports.set(externalName, queuedExport);\r\n    }\r\n  }\r\n\r\n  private initializeFunction(\r\n    declaration: FunctionDeclaration,\r\n    namespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n    var simpleName = declaration.name.text;\r\n    var decorators = declaration.decorators;\r\n    var prototype = new FunctionPrototype(\r\n      this,\r\n      simpleName,\r\n      internalName,\r\n      declaration,\r\n      null,\r\n      decorators\r\n        ? this.filterDecorators(decorators,\r\n            DecoratorFlags.GLOBAL |\r\n            DecoratorFlags.INLINE\r\n          )\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(simpleName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.parent = namespace;\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeImports(\r\n    statement: ImportStatement,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) {\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          statement.internalPath,\r\n          queuedExports, queuedImports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\r\n      let simpleName = statement.namespaceName.text;\r\n      let internalName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        simpleName\r\n      );\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          statement.namespaceName.range,\r\n          internalName\r\n        );\r\n        return;\r\n      }\r\n      this.error( // TODO\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.range\r\n      );\r\n    }\r\n  }\r\n\r\n  private initializeImport(\r\n    declaration: ImportDeclaration,\r\n    internalPath: string,\r\n    queuedExports: Map<string,QueuedExport>,\r\n    queuedImports: QueuedImport[]\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var referencedName = internalPath + PATH_DELIMITER + declaration.externalName.text;\r\n\r\n    // resolve right away if the exact export exists\r\n    var element: Element | null;\r\n    if (element = this.fileLevelExports.get(referencedName)) {\r\n      this.elementsLookup.set(internalName, element);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    const indexPart = PATH_DELIMITER + \"index\";\r\n    var queuedImport = new QueuedImport();\r\n    queuedImport.internalName = internalName;\r\n    if (internalPath.endsWith(indexPart)) {\r\n      queuedImport.referencedName = referencedName; // try exact first\r\n      queuedImport.referencedNameAlt = (\r\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\r\n        declaration.externalName.text\r\n      );\r\n    } else {\r\n      queuedImport.referencedName = referencedName; // try exact first\r\n      queuedImport.referencedNameAlt = (\r\n        internalPath +\r\n        indexPart +\r\n        PATH_DELIMITER +\r\n        declaration.externalName.text\r\n      );\r\n    }\r\n    queuedImport.declaration = declaration;\r\n    queuedImports.push(queuedImport);\r\n  }\r\n\r\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    if (this.elementsLookup.has(internalName)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, internalName\r\n      );\r\n      return;\r\n    }\r\n\r\n    var decorators = declaration.decorators;\r\n    var prototype = new InterfacePrototype(\r\n      this,\r\n      declaration.name.text,\r\n      internalName,\r\n      declaration,\r\n      decorators\r\n        ? this.filterDecorators(decorators, DecoratorFlags.GLOBAL)\r\n        : DecoratorFlags.NONE\r\n    );\r\n    prototype.parent = namespace;\r\n    this.elementsLookup.set(internalName, prototype);\r\n\r\n    if (namespace) {\r\n      if (namespace.members) {\r\n        if (namespace.members.has(prototype.internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        namespace.members = new Map();\r\n      }\r\n      namespace.members.set(prototype.internalName, prototype);\r\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\r\n      if (this.fileLevelExports.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        return;\r\n      }\r\n      this.fileLevelExports.set(internalName, prototype);\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        prototype.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, prototype);\r\n      }\r\n    }\r\n\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"interface member expected\");\r\n        }\r\n      }\r\n    }\r\n\r\n    this.checkGlobalOptions(prototype, declaration);\r\n  }\r\n\r\n  private initializeNamespace(\r\n    declaration: NamespaceDeclaration,\r\n    queuedExtends: ClassPrototype[],\r\n    queuedImplements: ClassPrototype[],\r\n    parentNamespace: Element | null = null\r\n  ): void {\r\n    var internalName = declaration.fileLevelInternalName;\r\n    var simpleName = declaration.name.text;\r\n    var namespace = this.elementsLookup.get(internalName);\r\n    if (!namespace) {\r\n      namespace = new Namespace(this, simpleName, internalName, declaration);\r\n      namespace.parent = parentNamespace;\r\n      this.elementsLookup.set(internalName, namespace);\r\n      this.checkGlobalOptions(namespace, declaration);\r\n    }\r\n\r\n    if (parentNamespace) {\r\n      if (parentNamespace.members) {\r\n        if (parentNamespace.members.has(simpleName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n      } else {\r\n        parentNamespace.members = new Map();\r\n      }\r\n      parentNamespace.members.set(simpleName, namespace);\r\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n      }\r\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\r\n      let existingExport = this.fileLevelExports.get(internalName);\r\n      if (existingExport) {\r\n        if (!existingExport.is(CommonFlags.EXPORT)) {\r\n          this.error(\r\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n            declaration.name.range, namespace.internalName\r\n          ); // recoverable\r\n        }\r\n        namespace = existingExport; // join\r\n      } else {\r\n        this.fileLevelExports.set(internalName, namespace);\r\n      }\r\n      if (declaration.range.source.isEntry) {\r\n        if (this.moduleLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n          return;\r\n        }\r\n        namespace.set(CommonFlags.MODULE_EXPORT);\r\n        this.moduleLevelExports.set(internalName, namespace);\r\n      }\r\n    }\r\n\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      switch (members[i].kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\r\n          // TODO: what about namespaced types?\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            members[i].range\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>members[i], namespace);\r\n          break;\r\n        }\r\n        default: {\r\n          throw new Error(\"namespace member expected\");\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\r\n    // type aliases are program globals\r\n    // TODO: what about namespaced types?\r\n    var name = declaration.name.text;\r\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\r\n      this.error(\r\n        DiagnosticCode.Duplicate_identifier_0,\r\n        declaration.name.range, name\r\n      );\r\n      return;\r\n    }\r\n    var alias = new TypeAlias();\r\n    alias.typeParameters = declaration.typeParameters;\r\n    alias.type = declaration.type;\r\n    this.typeAliases.set(name, alias);\r\n  }\r\n\r\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let decorators = declaration.decorators;\r\n      let internalName = declaration.fileLevelInternalName;\r\n      if (this.elementsLookup.has(internalName)) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, internalName\r\n        );\r\n        continue;\r\n      }\r\n      let simpleName = declaration.name.text;\r\n      let global = new Global(\r\n        this,\r\n        simpleName,\r\n        internalName,\r\n        Type.void, // resolved later on\r\n        declaration,\r\n        decorators\r\n          ? this.filterDecorators(decorators,\r\n              DecoratorFlags.GLOBAL\r\n            )\r\n          : DecoratorFlags.NONE\r\n      );\r\n      global.parent = namespace;\r\n      this.elementsLookup.set(internalName, global);\r\n\r\n      if (namespace) {\r\n        if (namespace.members) {\r\n          if (namespace.members.has(simpleName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n        } else {\r\n          namespace.members = new Map();\r\n        }\r\n        namespace.members.set(simpleName, global);\r\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n        }\r\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\r\n        if (this.fileLevelExports.has(internalName)) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range, internalName\r\n          );\r\n        } else {\r\n          this.fileLevelExports.set(internalName, global);\r\n        }\r\n        if (declaration.range.source.isEntry) {\r\n          if (this.moduleLevelExports.has(internalName)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, internalName\r\n            );\r\n            continue;\r\n          }\r\n          global.set(CommonFlags.MODULE_EXPORT);\r\n          this.moduleLevelExports.set(internalName, global);\r\n        }\r\n      }\r\n      this.checkGlobalOptions(global, declaration);\r\n    }\r\n  }\r\n\r\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\r\n  resolveSignature(\r\n    node: SignatureNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Signature | null {\r\n    var explicitThisType = node.explicitThisType;\r\n    var thisType: Type | null = null;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!thisType) return null;\r\n    }\r\n    var parameterTypeNodes = node.parameters;\r\n    var numParameters = parameterTypeNodes.length;\r\n    var parameterTypes = new Array<Type>(numParameters);\r\n    var parameterNames = new Array<string>(numParameters);\r\n    var requiredParameters = 0;\r\n    var hasRest = false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let parameterTypeNode = parameterTypeNodes[i];\r\n      switch (parameterTypeNode.parameterKind) {\r\n        case ParameterKind.DEFAULT: {\r\n          requiredParameters = i + 1;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          assert(i == numParameters);\r\n          hasRest = true;\r\n          break;\r\n        }\r\n      }\r\n      let parameterType = this.resolveType(\r\n        assert(parameterTypeNode.type),\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterTypeNode.name.text;\r\n    }\r\n    var returnTypeNode = node.returnType;\r\n    var returnType: Type | null;\r\n    if (returnTypeNode) {\r\n      returnType = this.resolveType(\r\n        returnTypeNode,\r\n        contextualTypeArguments,\r\n        reportNotFound\r\n      );\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Type.void;\r\n    }\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n    signature.hasRest = hasRest;\r\n    return signature;\r\n  }\r\n\r\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    node: CommonTypeNode,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    reportNotFound: bool = true\r\n  ): Type | null {\r\n    if (node.kind == NodeKind.SIGNATURE) {\r\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportNotFound);\r\n      if (!signature) return null;\r\n      return Type.u32.asFunction(signature);\r\n    }\r\n    var typeNode = <TypeNode>node;\r\n    var simpleName = typeNode.name.text;\r\n    var globalName = simpleName;\r\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName;\r\n\r\n    var element: Element | null;\r\n    if (\r\n      (element = this.elementsLookup.get(localName)) || // file-global\r\n      (element = this.elementsLookup.get(globalName))   // program-global\r\n    ) {\r\n      switch (element.kind) {\r\n        case ElementKind.ENUM: return Type.i32;\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          let instance = (<ClassPrototype>element).resolveUsingTypeArguments(\r\n            typeNode.typeArguments,\r\n            contextualTypeArguments,\r\n            null\r\n          ); // reports\r\n          return instance ? instance.type : null;\r\n        }\r\n      }\r\n    }\r\n\r\n    // check (global) type alias\r\n    var alias = this.typeAliases.get(simpleName);\r\n    if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportNotFound);\r\n\r\n    // resolve parameters\r\n    if (typeNode.typeArguments) {\r\n      let k = typeNode.typeArguments.length;\r\n      let paramTypes = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let paramType = this.resolveType( // reports\r\n          typeNode.typeArguments[i],\r\n          contextualTypeArguments,\r\n          reportNotFound\r\n        );\r\n        if (!paramType) return null;\r\n        paramTypes[i] = paramType;\r\n      }\r\n\r\n      if (k) { // can't be a placeholder if it has parameters\r\n        let instanceKey = typesToString(paramTypes);\r\n        if (instanceKey.length) {\r\n          localName += \"<\" + instanceKey + \">\";\r\n          globalName += \"<\" + instanceKey + \">\";\r\n        }\r\n      } else if (contextualTypeArguments) {\r\n        let placeholderType = contextualTypeArguments.get(globalName);\r\n        if (placeholderType) return placeholderType;\r\n      }\r\n    }\r\n\r\n    var type: Type | null;\r\n\r\n    // check file-global / program-global type\r\n    if ((type = this.typesLookup.get(localName)) || (type = this.typesLookup.get(globalName))) {\r\n      return type;\r\n    }\r\n\r\n    if (reportNotFound) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        typeNode.name.range, globalName\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    typeParameters: TypeParameterNode[],\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): Type[] | null {\r\n    var parameterCount = typeParameters.length;\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (parameterCount != argumentCount) {\r\n      if (argumentCount) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          Range.join(\r\n            (<TypeNode[]>typeArgumentNodes)[0].range,\r\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n          ),\r\n          parameterCount.toString(10), argumentCount.toString(10)\r\n        );\r\n      } else if (alternativeReportNode) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(parameterCount);\r\n    for (let i = 0; i < parameterCount; ++i) {\r\n      let type = this.resolveType( // reports\r\n        (<TypeNode[]>typeArgumentNodes)[i],\r\n        contextualTypeArguments,\r\n        true\r\n      );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves an identifier to the element it refers to. */\r\n  resolveIdentifier(\r\n    identifier: IdentifierExpression,\r\n    contextualFunction: Function | null,\r\n    contextualEnum: Enum | null = null\r\n  ): Element | null {\r\n    var name = identifier.text;\r\n\r\n    var element: Element | null;\r\n    var namespace: Element | null;\r\n\r\n    // check siblings\r\n    if (contextualEnum) {\r\n\r\n      if (\r\n        contextualEnum.members &&\r\n        (element = contextualEnum.members.get(name)) &&\r\n        element.kind == ElementKind.ENUMVALUE\r\n      ) {\r\n        this.resolvedThisExpression = null;\r\n        this.resolvedElementExpression = null;\r\n        return element; // ENUMVALUE\r\n      }\r\n\r\n    } else if (contextualFunction) {\r\n\r\n      // check locals\r\n      if (element = contextualFunction.flow.getScopedLocal(name)) {\r\n        this.resolvedThisExpression = null;\r\n        this.resolvedElementExpression = null;\r\n        return element; // LOCAL\r\n      }\r\n\r\n      // check outer scope locals\r\n      // let outerScope = contextualFunction.outerScope;\r\n      // while (outerScope) {\r\n      //   if (element = outerScope.getScopedLocal(name)) {\r\n      //     let scopedLocal = <Local>element;\r\n      //     let scopedGlobal = scopedLocal.scopedGlobal;\r\n      //     if (!scopedGlobal) scopedGlobal = outerScope.addScopedGlobal(scopedLocal);\r\n      //     if (!resolvedElement) resolvedElement = new ResolvedElement();\r\n      //     return resolvedElement.set(scopedGlobal);\r\n      //   }\r\n      //   outerScope = outerScope.currentFunction.outerScope;\r\n      // }\r\n\r\n      // search contextual parent namespaces if applicable\r\n      if (namespace = contextualFunction.prototype.parent) {\r\n        do {\r\n          if (element = this.elementsLookup.get(namespace.internalName + STATIC_DELIMITER + name)) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return element; // LOCAL\r\n          }\r\n        } while (namespace = namespace.parent);\r\n      }\r\n    }\r\n\r\n    // search current file\r\n    if (element = this.elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\r\n      this.resolvedThisExpression = null;\r\n      this.resolvedElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    // search global scope\r\n    if (element = this.elementsLookup.get(name)) {\r\n      this.resolvedThisExpression = null;\r\n      this.resolvedElementExpression = null;\r\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\r\n    }\r\n\r\n    this.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      identifier.range, name\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a property access to the element it refers to. */\r\n  resolvePropertyAccess(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualFunction: Function\r\n  ): Element | null {\r\n    // start by resolving the lhs target (expression before the last dot)\r\n    var targetExpression = propertyAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, contextualFunction); // reports\r\n    if (!target) return null;\r\n\r\n    // at this point we know exactly what the target is, so look up the element within\r\n    var propertyName = propertyAccess.property.text;\r\n\r\n    // Resolve variable-likes to the class type they reference first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let classReference = (<VariableLikeElement>target).type.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = assert((<Property>target).getterPrototype).resolve(); // reports\r\n        if (!getter) return null;\r\n        let classReference = getter.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.resolvedElementExpression;\r\n        if (elementExpression) {\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementExpression.range, (<Class>target).internalName\r\n            );\r\n            return null;\r\n          }\r\n          let returnType = indexedGet.signature.returnType;\r\n          if (!(target = returnType.classReference)) {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, returnType.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          let members = target.members;\r\n          let member: Element | null;\r\n          if (members && (member = members.get(propertyName))) {\r\n            this.resolvedThisExpression = targetExpression;\r\n            this.resolvedElementExpression = null;\r\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\r\n          }\r\n          // traverse inherited static members on the base prototype if target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // traverse inherited instance members on the base class if target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        let members = target.members;\r\n        let member: Element | null;\r\n        if (members && (member = members.get(propertyName))) {\r\n          this.resolvedThisExpression = targetExpression;\r\n          this.resolvedElementExpression = null;\r\n          return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      propertyAccess.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveElementAccess(\r\n    elementAccess: ElementAccessExpression,\r\n    contextualFunction: Function\r\n  ): Element | null {\r\n    var targetExpression = elementAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, contextualFunction);\r\n    if (!target) return null;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL:\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (target = type.classReference) {\r\n          this.resolvedThisExpression = targetExpression;\r\n          this.resolvedElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: { // element access on element access\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            elementAccess.range, (<Class>target).internalName\r\n          );\r\n          return null;\r\n        }\r\n        let returnType = indexedGet.signature.returnType;\r\n        if (target = returnType.classReference) {\r\n          this.resolvedThisExpression = targetExpression;\r\n          this.resolvedElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      targetExpression.range\r\n    );\r\n    return null;\r\n  }\r\n\r\n  resolveExpression(\r\n    expression: Expression,\r\n    contextualFunction: Function\r\n  ): Element | null {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) {\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        let type = this.resolveType((<AssertionExpression>expression).toType); // reports\r\n        if (type) {\r\n          let classType = type.classReference;\r\n          if (classType) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return classType;\r\n          }\r\n        }\r\n        return null;\r\n      }\r\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case NodeKind.THIS: { // -> Class / ClassPrototype\r\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\r\n          if (explicitLocal) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return explicitLocal;\r\n          }\r\n        }\r\n        let parent = contextualFunction.parent;\r\n        if (parent) {\r\n          this.resolvedThisExpression = null;\r\n          this.resolvedElementExpression = null;\r\n          return parent;\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.SUPER: { // -> Class\r\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\r\n          if (explicitLocal) {\r\n            this.resolvedThisExpression = null;\r\n            this.resolvedElementExpression = null;\r\n            return explicitLocal;\r\n          }\r\n        }\r\n        let parent = contextualFunction.parent;\r\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n          this.resolvedThisExpression = null;\r\n          this.resolvedElementExpression = null;\r\n          return parent;\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        return null;\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction);\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        switch ((<LiteralExpression>expression).literalKind) {\r\n          case LiteralKind.STRING: {\r\n            this.resolvedThisExpression = expression;\r\n            this.resolvedElementExpression = null;\r\n            return this.stringInstance;\r\n          }\r\n          // case LiteralKind.ARRAY: // TODO\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccess(\r\n          <PropertyAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccess(\r\n          <ElementAccessExpression>expression,\r\n          contextualFunction\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        let targetExpression = (<CallExpression>expression).expression;\r\n        let target = this.resolveExpression(targetExpression, contextualFunction); // reports\r\n        if (!target) return null;\r\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n          let instance = (<FunctionPrototype>target).resolveUsingTypeArguments( // reports\r\n            (<CallExpression>expression).typeArguments,\r\n            contextualFunction.flow.contextualTypeArguments,\r\n            expression\r\n          );\r\n          if (!instance) return null;\r\n          let returnType = instance.signature.returnType;\r\n          let classType = returnType.classReference;\r\n          if (classType) {\r\n            // reuse resolvedThisExpression (might be property access)\r\n            // reuse resolvedElementExpression (might be element access)\r\n            return classType;\r\n          } else {\r\n            let signature = returnType.signatureReference;\r\n            if (signature) {\r\n              let functionTarget = signature.cachedFunctionTarget;\r\n              if (!functionTarget) {\r\n                functionTarget = new FunctionTarget(this, signature);\r\n                signature.cachedFunctionTarget = functionTarget;\r\n              }\r\n              // reuse resolvedThisExpression (might be property access)\r\n              // reuse resolvedElementExpression (might be element access)\r\n              return functionTarget;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            targetExpression.range, target.internalName\r\n          );\r\n          return null;\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return null;\r\n  }\r\n}\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE\r\n}\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n\r\n  // Extended modifiers usually derived from basic modifiers\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 13,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 14,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 15,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 16,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 17,\r\n  /** Is an arrow function. */\r\n  ARROW = 1 << 18,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 19,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 20,\r\n\r\n  // Compilation states\r\n\r\n  /** Is a builtin. */\r\n  BUILTIN = 1 << 21,\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 22,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 23,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 24,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 25,\r\n  /** Is a virtual method. */\r\n  VIRTUAL = 1 << 26\r\n}\r\n\r\nexport enum DecoratorFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n  /** Is a program global. */\r\n  GLOBAL = 1 << 0,\r\n  /** Is a binary operator overload. */\r\n  OPERATOR_BINARY = 1 << 1,\r\n  /** Is a unary prefix operator overload. */\r\n  OPERATOR_PREFIX = 1 << 2,\r\n  /** Is a unary postfix operator overload. */\r\n  OPERATOR_POSTFIX = 1 << 3,\r\n  /** Is an unmanaged class. */\r\n  UNMANAGED = 1 << 4,\r\n  /** Is a sealed class. */\r\n  SEALED = 1 << 5,\r\n  /** Is always inlined. */\r\n  INLINE = 1 << 6\r\n}\r\n\r\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\r\n  switch (kind) {\r\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\r\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\r\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\r\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\r\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\r\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\r\n    default: return DecoratorFlags.NONE;\r\n  }\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Specific element kind. */\r\n  kind: ElementKind;\r\n  /** Containing {@link Program}. */\r\n  program: Program;\r\n  /** Simple name. */\r\n  simpleName: string;\r\n  /** Internal name referring to this element. */\r\n  internalName: string;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Decorator flags indicating annotated traits. */\r\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\r\n  /** Namespaced member elements. */\r\n  members: Map<string,Element> | null = null;\r\n  /** Parent element, if applicable. */\r\n  parent: Element | null = null;\r\n\r\n  /** Constructs a new element, linking it to its containing {@link Program}. */\r\n  protected constructor(program: Program, simpleName: string, internalName: string) {\r\n    this.program = program;\r\n    this.simpleName = simpleName;\r\n    this.internalName = internalName;\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n  /** Tests if this element has a specific decorator flag or flags. */\r\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\r\n}\r\n\r\n/** A namespace. */\r\nexport class Namespace extends Element {\r\n\r\n  // All elements have namespace semantics. This is an explicitly declared one.\r\n  kind = ElementKind.NAMESPACE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: NamespaceDeclaration; // more specific\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: NamespaceDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends Element {\r\n\r\n  kind = ElementKind.ENUM;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumDeclaration;\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends Element {\r\n\r\n  kind = ElementKind.ENUMVALUE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: EnumValueDeclaration;\r\n  /** Constant value, if applicable. */\r\n  constantValue: i32 = 0;\r\n\r\n  constructor(\r\n    enm: Enum,\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: EnumValueDeclaration\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = enm;\r\n    this.declaration = declaration;\r\n  }\r\n}\r\n\r\nexport const enum ConstantValueKind {\r\n  NONE,\r\n  INTEGER,\r\n  FLOAT\r\n}\r\n\r\nexport class VariableLikeElement extends Element {\r\n\r\n  // kind varies\r\n\r\n  /** Declaration reference. */\r\n  declaration: VariableLikeDeclarationStatement | null;\r\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\r\n  type: Type;\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  protected constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.type = type;\r\n    this.declaration = declaration;\r\n  }\r\n\r\n  withConstantIntegerValue(lo: i32, hi: i32): this {\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = i64_new(lo, hi);\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n\r\n  withConstantFloatValue(value: f64): this {\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\r\n    return this;\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  kind = ElementKind.GLOBAL;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName, type, declaration);\r\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.type = type; // resolved later if `void`\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n\r\n  // not an Element on its own\r\n\r\n  /** Parameter name. */\r\n  name: string;\r\n  /** Parameter type. */\r\n  type: Type;\r\n  /** Parameter initializer. */\r\n  initializer: Expression | null;\r\n\r\n  /** Constructs a new function parameter. */\r\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.initializer = initializer;\r\n  }\r\n}\r\n\r\n/** A function local. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  kind = ElementKind.LOCAL;\r\n\r\n  /** Local index. */\r\n  index: i32;\r\n  /** Respective scoped global, if any. */\r\n  scopedGlobal: Global | null = null;\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    index: i32,\r\n    type: Type,\r\n    declaration: VariableLikeDeclarationStatement | null = null\r\n  ) {\r\n    super(program, simpleName, simpleName, type, declaration);\r\n    this.index = index;\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FunctionDeclaration;\r\n  /** If an instance method, the class prototype reference. */\r\n  classPrototype: ClassPrototype | null;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Function> = new Map();\r\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\r\n  classTypeArguments: Type[] | null = null;\r\n  /** Operator kind, if an overload. */\r\n  operatorKind: OperatorKind = OperatorKind.INVALID;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FunctionDeclaration,\r\n    classPrototype: ClassPrototype | null = null,\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.classPrototype = classPrototype;\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    functionTypeArguments: Type[] | null = null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var instanceKey = functionTypeArguments ? typesToString(functionTypeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    var declaration = this.declaration;\r\n    var isInstance = this.is(CommonFlags.INSTANCE);\r\n    var classPrototype = this.classPrototype;\r\n\r\n    // inherit contextual type arguments as provided. might be overridden.\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(\r\n          inheritedName,\r\n          inheritedType\r\n        );\r\n      }\r\n    }\r\n\r\n    // override with class type arguments if a partially resolved instance method\r\n    var classTypeArguments = this.classTypeArguments;\r\n    if (classTypeArguments) { // set only if partially resolved\r\n      assert(this.is(CommonFlags.INSTANCE));\r\n      let classDeclaration = assert(classPrototype).declaration;\r\n      let classTypeParameters = classDeclaration.typeParameters;\r\n      let numClassTypeParameters = classTypeParameters.length;\r\n      assert(numClassTypeParameters == classTypeArguments.length);\r\n      for (let i = 0; i < numClassTypeParameters; ++i) {\r\n        contextualTypeArguments.set(\r\n          classTypeParameters[i].name.text,\r\n          classTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!classTypeArguments);\r\n    }\r\n\r\n    // override with function specific type arguments\r\n    var signatureNode = declaration.signature;\r\n    var functionTypeParameters = declaration.typeParameters;\r\n    var numFunctionTypeArguments: i32;\r\n    if (functionTypeArguments && (numFunctionTypeArguments = functionTypeArguments.length)) {\r\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        contextualTypeArguments.set(\r\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\r\n          functionTypeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\r\n    }\r\n\r\n    // resolve class if an instance method\r\n    var classInstance: Class | null = null;\r\n    var thisType: Type | null = null;\r\n    if (isInstance) {\r\n      classInstance = assert(classPrototype).resolve(classTypeArguments, contextualTypeArguments); // reports\r\n      if (!classInstance) return null;\r\n      thisType = classInstance.type;\r\n      contextualTypeArguments.set(\"this\", thisType);\r\n    }\r\n\r\n    // resolve signature node\r\n    var signatureParameters = signatureNode.parameters;\r\n    var signatureParameterCount = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(signatureParameterCount);\r\n    var parameterNames = new Array<string>(signatureParameterCount);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < signatureParameterCount; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = assert(parameterDeclaration.type);\r\n      let parameterType = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    var returnType: Type;\r\n    if (this.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (this.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = assert(signatureNode.returnType);\r\n      let type = this.program.resolveType(typeNode, contextualTypeArguments, true); // reports\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\r\n    instance = new Function(\r\n      this,\r\n      internalName,\r\n      signature,\r\n      classInstance\r\n        ? classInstance\r\n        : classPrototype,\r\n      contextualTypeArguments\r\n    );\r\n    this.instances.set(instanceKey, instance);\r\n    this.program.instancesLookup.set(internalName, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves this prototype partially by applying the specified inherited class type arguments. */\r\n  resolvePartial(classTypeArguments: Type[] | null): FunctionPrototype | null {\r\n    assert(this.is(CommonFlags.INSTANCE));\r\n    var classPrototype = assert(this.classPrototype);\r\n\r\n    if (!(classTypeArguments && classTypeArguments.length)) return this; // no need to clone\r\n\r\n    var simpleName = this.simpleName;\r\n    var partialKey = typesToString(classTypeArguments);\r\n    var partialPrototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\r\n      this.declaration,\r\n      classPrototype,\r\n      this.decoratorFlags\r\n    );\r\n    partialPrototype.flags = this.flags;\r\n    partialPrototype.operatorKind = this.operatorKind;\r\n    partialPrototype.classTypeArguments = classTypeArguments;\r\n    return partialPrototype;\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments( // reports\r\n        assert(this.declaration.typeParameters),\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        reportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  /** Resolves the type arguments to use when compiling a built-in call. Must be a built-in. */\r\n  resolveBuiltinTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null\r\n  ): Type[] | null {\r\n    assert(this.is(CommonFlags.BUILTIN));\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (typeArgumentNodes) {\r\n      let k = typeArgumentNodes.length;\r\n      resolvedTypeArguments = new Array<Type>(k);\r\n      for (let i = 0; i < k; ++i) {\r\n        let resolvedType = this.program.resolveType( // reports\r\n          typeArgumentNodes[i],\r\n          contextualTypeArguments,\r\n          true\r\n        );\r\n        if (!resolvedType) return null;\r\n        resolvedTypeArguments[i] = resolvedType;\r\n      }\r\n    }\r\n    return resolvedTypeArguments;\r\n  }\r\n\r\n  toString(): string { return this.simpleName; }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends Element {\r\n\r\n  kind = ElementKind.FUNCTION;\r\n\r\n  /** Prototype reference. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** Map of locals by name. */\r\n  localsByName: Map<string,Local> = new Map();\r\n  /** Array of locals by index. */\r\n  localsByIndex: Local[] = [];\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Current break context label. */\r\n  breakContext: string | null = null;\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Current control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] = [];\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n  /** The outer scope, if a function expression. */\r\n  outerScope: Flow | null = null;\r\n\r\n  private nextBreakId: i32 = 0;\r\n  private breakStack: i32[] | null = null;\r\n  nextInlineId: i32 = 0;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    prototype: FunctionPrototype,\r\n    internalName: string,\r\n    signature: Signature,\r\n    parent: Element | null = null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.parent = parent;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.contextualTypeArguments = contextualTypeArguments;\r\n    if (!(prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN) || prototype.is(CommonFlags.DECLARE))) {\r\n      let localIndex = 0;\r\n      if (parent && parent.kind == ElementKind.CLASS) {\r\n        assert(this.is(CommonFlags.INSTANCE));\r\n        let local = new Local(\r\n          prototype.program,\r\n          \"this\",\r\n          localIndex++,\r\n          assert(signature.thisType)\r\n        );\r\n        this.localsByName.set(\"this\", local);\r\n        this.localsByIndex[local.index] = local;\r\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\r\n        if (inheritedTypeArguments) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n            if (!this.contextualTypeArguments.has(inheritedName)) {\r\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        let local = new Local(\r\n          prototype.program,\r\n          parameterName,\r\n          localIndex++,\r\n          parameterType\r\n          // FIXME: declaration?\r\n        );\r\n        this.localsByName.set(parameterName, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var local = new Local(\r\n      this.prototype.program,\r\n      name\r\n        ? name\r\n        : \"var$\" + localIndex.toString(10),\r\n      localIndex,\r\n      type,\r\n      declaration\r\n    );\r\n    if (name) {\r\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\r\n      this.localsByName.set(name, local);\r\n    }\r\n    this.localsByIndex[local.index] = local;\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  private tempI32s: Local[] | null = null;\r\n  private tempI64s: Local[] | null = null;\r\n  private tempF32s: Local[] | null = null;\r\n  private tempF64s: Local[] | null = null;\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type, wrapped: bool = false): Local {\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s;\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s;\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s;\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s;\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps && temps.length) {\r\n      local = temps.pop();\r\n      local.type = type;\r\n      local.flags = CommonFlags.NONE;\r\n    } else {\r\n      local = this.addLocal(type);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.flow.setLocalWrapped(local.index, wrapped);\r\n    }\r\n    return local;\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    if (local.is(CommonFlags.INLINED)) return;\r\n    assert(local.index >= 0);\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    assert(local.index >= 0);\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\r\n    var temps: Local[];\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = this.tempI32s || (this.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = this.tempI64s || (this.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = this.tempF32s || (this.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = this.tempF64s || (this.tempF64s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps.length) {\r\n      local = temps[temps.length - 1];\r\n      local.type = type;\r\n    } else {\r\n      local = this.addLocal(type);\r\n      temps.push(local);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.flow.setLocalWrapped(local.index, wrapped);\r\n    }\r\n    return local;\r\n  }\r\n\r\n  /** Enters a(nother) break context. */\r\n  enterBreakContext(): string {\r\n    var id = this.nextBreakId++;\r\n    if (!this.breakStack) this.breakStack = [ id ];\r\n    else this.breakStack.push(id);\r\n    return this.breakContext = id.toString(10);\r\n  }\r\n\r\n  /** Leaves the current break context. */\r\n  leaveBreakContext(): void {\r\n    assert(this.breakStack != null);\r\n    var length = (<i32[]>this.breakStack).length;\r\n    assert(length > 0);\r\n    (<i32[]>this.breakStack).pop();\r\n    if (length > 1) {\r\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\r\n    } else {\r\n      this.breakContext = null;\r\n      this.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakContext = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n        let debugLocation = debugLocations[i];\r\n        module.setDebugLocation(\r\n          ref,\r\n          debugLocation.debugInfoRef,\r\n          debugLocation.source.debugInfoIndex,\r\n          debugLocation.line,\r\n          debugLocation.column\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Returns the TypeScript representation of this function. */\r\n  toString(): string { return this.prototype.simpleName; }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  kind = ElementKind.FUNCTION_TARGET;\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(program: Program, signature: Signature) {\r\n    super(program, \"\", \"\");\r\n    var simpleName = signature.toSignatureString();\r\n    this.simpleName = simpleName;\r\n    this.internalName = simpleName;\r\n    this.signature = signature;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends Element {\r\n\r\n  kind = ElementKind.FIELD_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: FieldDeclaration;\r\n  /** Parent class prototype. */\r\n  classPrototype: ClassPrototype;\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    classPrototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: FieldDeclaration\r\n  ) {\r\n    super(classPrototype.program, simpleName, internalName);\r\n    this.classPrototype = classPrototype;\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  kind = ElementKind.FIELD;\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(\r\n    prototype: FieldPrototype,\r\n    internalName: string,\r\n    type: Type,\r\n    declaration: FieldDeclaration,\r\n    parent: Class\r\n  ) {\r\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.type = type;\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class Property extends Element {\r\n\r\n  kind = ElementKind.PROPERTY;\r\n\r\n  /** Parent class prototype. */\r\n  parent: ClassPrototype;\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    parent: ClassPrototype\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.parent = parent;\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends Element {\r\n\r\n  kind = ElementKind.CLASS_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: ClassDeclaration;\r\n  /** Resolved instances. */\r\n  instances: Map<string,Class> = new Map();\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n  /** Operator overload prototypes. */\r\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\r\n\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: ClassDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName);\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags;\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Resolves this prototype to an instance using the specified concrete type arguments. */\r\n  resolve(\r\n    typeArguments: Type[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n    var instance = this.instances.get(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // inherit contextual type arguments\r\n    var inheritedTypeArguments = contextualTypeArguments;\r\n    contextualTypeArguments = new Map();\r\n    if (inheritedTypeArguments) {\r\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\r\n        contextualTypeArguments.set(inheritedName, inheritedType);\r\n      }\r\n    }\r\n\r\n    var declaration = this.declaration;\r\n    var baseClass: Class | null = null;\r\n    if (declaration.extendsType) {\r\n      let baseClassType = this.program.resolveType(declaration.extendsType, null); // reports\r\n      if (!baseClassType) return null;\r\n      if (!(baseClass = baseClassType.classReference)) {\r\n        this.program.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          declaration.extendsType.range\r\n        );\r\n        return null;\r\n      }\r\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\r\n        this.program.error(\r\n          DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n          declaration.extendsType.range, baseClass.internalName\r\n        );\r\n        return null;\r\n      }\r\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != this.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        this.program.error(\r\n          DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\r\n          Range.join(declaration.name.range, declaration.extendsType.range)\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // override call specific contextual type arguments if provided\r\n    var i: i32, k: i32;\r\n    if (typeArguments) {\r\n      if ((k = typeArguments.length) != declaration.typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n      for (i = 0; i < k; ++i) {\r\n        contextualTypeArguments.set(declaration.typeParameters[i].name.text, typeArguments[i]);\r\n      }\r\n    } else if (declaration.typeParameters.length) {\r\n      throw new Error(\"type argument count mismatch\");\r\n    }\r\n\r\n    var simpleName = this.simpleName;\r\n    var internalName = this.internalName;\r\n    if (instanceKey.length) {\r\n      simpleName += \"<\" + instanceKey + \">\";\r\n      internalName += \"<\" + instanceKey + \">\";\r\n    }\r\n    instance = new Class(this, simpleName, internalName, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    this.instances.set(instanceKey, instance);\r\n    this.program.instancesLookup.set(internalName, instance);\r\n\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n      if (baseClass.members) {\r\n        if (!instance.members) instance.members = new Map();\r\n        for (let inheritedMember of baseClass.members.values()) {\r\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Resolve constructor\r\n    if (this.constructorPrototype) {\r\n      let partialConstructor = this.constructorPrototype.resolvePartial(typeArguments); // reports\r\n      if (partialConstructor) instance.constructorInstance = partialConstructor.resolve(); // reports\r\n    }\r\n\r\n    // Resolve instance members\r\n    if (this.instanceMembers) {\r\n      for (let member of this.instanceMembers.values()) {\r\n        switch (member.kind) {\r\n\r\n          // Lay out fields in advance\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\r\n            if (!fieldDeclaration.type) {\r\n              throw new Error(\"type expected\"); // TODO: check if parent class defines a type\r\n            }\r\n            let fieldType = this.program.resolveType( // reports\r\n              fieldDeclaration.type,\r\n              instance.contextualTypeArguments\r\n            );\r\n            if (fieldType) {\r\n              let fieldInstance = new Field(\r\n                <FieldPrototype>member,\r\n                internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\r\n                fieldType,\r\n                fieldDeclaration,\r\n                instance\r\n              );\r\n              switch (fieldType.byteSize) { // align\r\n                case 1: break;\r\n                case 2: {\r\n                  if (memoryOffset & 1) ++memoryOffset;\r\n                  break;\r\n                }\r\n                case 4: {\r\n                  if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1;\r\n                  break;\r\n                }\r\n                case 8: {\r\n                  if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1;\r\n                  break;\r\n                }\r\n                default: assert(false);\r\n              }\r\n              fieldInstance.memoryOffset = memoryOffset;\r\n              memoryOffset += fieldType.byteSize;\r\n              instance.members.set(member.simpleName, fieldInstance);\r\n            }\r\n            break;\r\n          }\r\n\r\n          // Partially resolve methods as these might have type arguments on their own\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let partialPrototype = (<FunctionPrototype>member).resolvePartial(typeArguments); // reports\r\n            if (partialPrototype) {\r\n              partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\r\n              instance.members.set(member.simpleName, partialPrototype);\r\n            }\r\n            break;\r\n          }\r\n\r\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\r\n          case ElementKind.PROPERTY: {\r\n            if (!instance.members) instance.members = new Map();\r\n            let getterPrototype = assert((<Property>member).getterPrototype);\r\n            let setterPrototype = (<Property>member).setterPrototype;\r\n            let instanceProperty = new Property(\r\n              this.program,\r\n              member.simpleName,\r\n              internalName + INSTANCE_DELIMITER + member.simpleName,\r\n              this\r\n            );\r\n            let partialGetterPrototype = getterPrototype.resolvePartial(typeArguments);\r\n            if (!partialGetterPrototype) return null;\r\n            partialGetterPrototype.internalName = (\r\n              internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName\r\n            );\r\n            instanceProperty.getterPrototype = partialGetterPrototype;\r\n            if (setterPrototype) {\r\n              let partialSetterPrototype = setterPrototype.resolvePartial(typeArguments);\r\n              if (!partialSetterPrototype) return null;\r\n              partialSetterPrototype.internalName = (\r\n                internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName\r\n              );\r\n              instanceProperty.setterPrototype = partialSetterPrototype;\r\n            }\r\n            instance.members.set(member.simpleName, instanceProperty);\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Fully resolve operator overloads (don't have type parameters on their own)\r\n    for (let [kind, prototype] of this.overloadPrototypes) {\r\n      assert(kind != OperatorKind.INVALID);\r\n      let operatorInstance: Function | null;\r\n      if (prototype.is(CommonFlags.INSTANCE)) {\r\n        let operatorPartial = prototype.resolvePartial(typeArguments); // reports\r\n        if (!operatorPartial) continue;\r\n        operatorInstance = operatorPartial.resolve(); // reports\r\n      } else {\r\n        operatorInstance = prototype.resolve(); // reports\r\n      }\r\n      if (!operatorInstance) continue;\r\n      let overloads = instance.overloads;\r\n      if (!overloads) instance.overloads = overloads = new Map();\r\n      overloads.set(kind, operatorInstance);\r\n    }\r\n\r\n    instance.currentMemoryOffset = memoryOffset; // offsetof<this>() is the class' byte size in memory\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to resolving this prototype to an instance. */\r\n  resolveUsingTypeArguments(\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    alternativeReportNode: Node | null\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n    if (this.is(CommonFlags.GENERIC)) {\r\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\r\n      resolvedTypeArguments = this.program.resolveTypeArguments(\r\n        this.declaration.typeParameters,\r\n        typeArgumentNodes,\r\n        contextualTypeArguments,\r\n        alternativeReportNode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n    } else {\r\n      assert(typeArgumentNodes == null || !typeArgumentNodes.length);\r\n    }\r\n    return this.resolve(resolvedTypeArguments, contextualTypeArguments);\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends Element {\r\n\r\n  kind = ElementKind.CLASS;\r\n\r\n  /** Prototype reference. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Resolved class type. */\r\n  type: Type;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n  /** Operator overloads. */\r\n  overloads: Map<OperatorKind,Function> | null = null;\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    prototype: ClassPrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] | null = null,\r\n    base: Class | null = null\r\n  ) {\r\n    super(prototype.program, simpleName, internalName);\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.typeArguments = typeArguments;\r\n    this.type = prototype.program.options.usizeType.asClass(this);\r\n    this.base = base;\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      let inheritedTypeArguments = base.contextualTypeArguments;\r\n      if (inheritedTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let [baseName, baseType] of inheritedTypeArguments) {\r\n          this.contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply instance-specific contextual type arguments\r\n    var declaration = this.prototype.declaration;\r\n    var i: i32, k: i32;\r\n    if (declaration) { // irrelevant for built-ins\r\n      let typeParameters = declaration.typeParameters;\r\n      if (typeArguments) {\r\n        if ((k = typeArguments.length) != typeParameters.length) {\r\n          throw new Error(\"type argument count mismatch\");\r\n        }\r\n        if (k) {\r\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n          for (i = 0; i < k; ++i) {\r\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n          }\r\n        }\r\n      } else if (typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do if (current == target) return true;\r\n    while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  /** Looks up the operator overload of the specified kind. */\r\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\r\n    if (unchecked) {\r\n      switch (kind) {\r\n        case OperatorKind.INDEXED_GET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        case OperatorKind.INDEXED_SET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    var instance: Class | null = this;\r\n    do {\r\n      let overloads = instance.overloads;\r\n      if (overloads) {\r\n        let overload = overloads.get(kind);\r\n        if (overload) return overload;\r\n      }\r\n    } while (instance = instance.base);\r\n    return null;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.simpleName;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype {\r\n\r\n  kind = ElementKind.INTERFACE_PROTOTYPE;\r\n\r\n  /** Declaration reference. */\r\n  declaration: InterfaceDeclaration; // more specific\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    program: Program,\r\n    simpleName: string,\r\n    internalName: string,\r\n    declaration: InterfaceDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(program, simpleName, internalName, declaration, decoratorFlags);\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class {\r\n\r\n  kind = ElementKind.INTERFACE;\r\n\r\n  /** Prototype reference. */\r\n  prototype: InterfacePrototype; // more specific\r\n  /** Base interface, if applcable. */\r\n  base: Interface | null; // more specific\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    prototype: InterfacePrototype,\r\n    simpleName: string,\r\n    internalName: string,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(prototype, simpleName, internalName, typeArguments, base);\r\n  }\r\n}\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  /** This branch always returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This branch always throws. */\r\n  THROWS = 1 << 1,\r\n  /** This branch always breaks. */\r\n  BREAKS = 1 << 2,\r\n  /** This branch always continues. */\r\n  CONTINUES = 1 << 3,\r\n  /** This branch always allocates. Constructors only. */\r\n  ALLOCATES = 1 << 4,\r\n\r\n  /** This branch conditionally returns in a child branch. */\r\n  CONDITIONALLY_RETURNS = 1 << 5,\r\n  /** This branch conditionally throws in a child branch. */\r\n  CONDITIONALLY_THROWS = 1 << 6,\r\n  /** This branch conditionally breaks in a child branch. */\r\n  CONDITIONALLY_BREAKS = 1 << 7,\r\n  /** This branch conditionally continues in a child branch. */\r\n  CONDITIONALLY_CONTINUES = 1 << 8,\r\n  /** This branch conditionally allocates in a child branch. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 9,\r\n\r\n  /** This branch is part of inlining a function. */\r\n  INLINE_CONTEXT = 1 << 10,\r\n  /** This branch explicitly requests no bounds checking. */\r\n  UNCHECKED_CONTEXT = 1 << 11,\r\n  /** This branch returns a properly wrapped value. */\r\n  RETURNS_WRAPPED = 1 << 12,\r\n\r\n  /** This branch is terminated if any of these flags is set. */\r\n  TERMINATED = FlowFlags.RETURNS | FlowFlags.THROWS | FlowFlags.BREAKS | FlowFlags.CONTINUES\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  currentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** The label we break to when encountering a return statement, when inlining. */\r\n  returnLabel: string | null;\r\n  /** The current return type. */\r\n  returnType: Type;\r\n  /** The current contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n  /** Local variable wrap states for the first 64 locals. */\r\n  wrappedLocals: I64;\r\n  /** Local variable wrap states for locals with index >= 64. */\r\n  wrappedLocalsExt: I64[] | null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(currentFunction: Function): Flow {\r\n    var parentFlow = new Flow();\r\n    parentFlow.parent = null;\r\n    parentFlow.flags = FlowFlags.NONE;\r\n    parentFlow.currentFunction = currentFunction;\r\n    parentFlow.continueLabel = null;\r\n    parentFlow.breakLabel = null;\r\n    parentFlow.returnLabel = null;\r\n    parentFlow.returnType = currentFunction.signature.returnType;\r\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\r\n    parentFlow.wrappedLocals = i64_new(0);\r\n    parentFlow.wrappedLocalsExt = null;\r\n    return parentFlow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this flow has one of the specified flags. */\r\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Enters a new branch or scope and returns the new flow. */\r\n  enterBranchOrScope(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.currentFunction = this.currentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    branch.returnLabel = this.returnLabel;\r\n    branch.returnType = this.returnType;\r\n    branch.contextualTypeArguments = this.contextualTypeArguments;\r\n    branch.wrappedLocals = this.wrappedLocals;\r\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\r\n    return branch;\r\n  }\r\n\r\n  /** Leaves the current branch or scope and returns the parent flow. */\r\n  leaveBranchOrScope(propagate: bool = true): Flow {\r\n    var parent = assert(this.parent);\r\n\r\n    // Free block-scoped locals\r\n    if (this.scopedLocals) {\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          this.currentFunction.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n\r\n    // Propagate conditionaal flags to parent\r\n    if (propagate) {\r\n      if (this.is(FlowFlags.RETURNS)) {\r\n        parent.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n      }\r\n      if (this.is(FlowFlags.THROWS)) {\r\n        parent.set(FlowFlags.CONDITIONALLY_THROWS);\r\n      }\r\n      if (this.is(FlowFlags.BREAKS) && parent.breakLabel == this.breakLabel) {\r\n        parent.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n      }\r\n      if (this.is(FlowFlags.CONTINUES) && parent.continueLabel == this.continueLabel) {\r\n        parent.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n      }\r\n      if (this.is(FlowFlags.ALLOCATES)) {\r\n        parent.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n      }\r\n    }\r\n    return parent;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(type: Type, name: string, wrapped: bool, declaration?: VariableDeclaration): Local {\r\n    var scopedLocal = this.currentFunction.getTempLocal(type, false);\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (declaration) {\r\n          this.currentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range\r\n          );\r\n        } else assert(false);\r\n        return existingLocal;\r\n      }\r\n    }\r\n    scopedLocal.set(CommonFlags.SCOPED);\r\n    this.scopedLocals.set(name, scopedLocal);\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.setLocalWrapped(scopedLocal.index, wrapped);\r\n    }\r\n    return scopedLocal;\r\n  }\r\n\r\n  /** Adds a new scoped alias for the specified local. */\r\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        let declaration = existingLocal.declaration;\r\n        if (declaration) {\r\n          this.currentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            declaration.name.range\r\n          );\r\n        } else assert(false);\r\n        return existingLocal;\r\n      }\r\n    }\r\n    assert(index < this.currentFunction.localsByIndex.length);\r\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\r\n      this.currentFunction.program,\r\n      name,\r\n      index,\r\n      type,\r\n      null\r\n    );\r\n    this.scopedLocals.set(name, scopedAlias);\r\n    return scopedAlias;\r\n  }\r\n\r\n  /** Gets the local of the specified name in the current scope. */\r\n  getScopedLocal(name: string): Local | null {\r\n    var local: Local | null;\r\n    var current: Flow | null = this;\r\n    do {\r\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\r\n        return local;\r\n      }\r\n    } while (current = current.parent);\r\n    return this.currentFunction.localsByName.get(name);\r\n  }\r\n\r\n  /** Tests if the local with the specified index is considered wrapped. */\r\n  isLocalWrapped(index: i32): bool {\r\n    var map: I64;\r\n    var ext: I64[] | null;\r\n    if (index < 64) {\r\n      if (index < 0) return true; // inlined constant\r\n      map = this.wrappedLocals;\r\n    } else if (ext = this.wrappedLocalsExt) {\r\n      let i = ((index - 64) / 64) | 0;\r\n      if (i >= ext.length) return false;\r\n      map = ext[i];\r\n      index -= (i + 1) * 64;\r\n    } else {\r\n      return false;\r\n    }\r\n    return i64_ne(\r\n      i64_and(\r\n        map,\r\n        i64_shl(\r\n          i64_one,\r\n          i64_new(index)\r\n        )\r\n      ),\r\n      i64_zero\r\n    );\r\n  }\r\n\r\n  /** Sets if the local with the specified index is considered wrapped. */\r\n  setLocalWrapped(index: i32, wrapped: bool): void {\r\n    var map: I64;\r\n    var off: i32 = -1;\r\n    if (index < 64) {\r\n      if (index < 0) return; // inlined constant\r\n      map = this.wrappedLocals;\r\n    } else {\r\n      let ext = this.wrappedLocalsExt;\r\n      off = ((index - 64) / 64) | 0;\r\n      if (!ext) {\r\n        this.wrappedLocalsExt = ext = new Array(off + 1);\r\n        ext.length = 0;\r\n      }\r\n      while (ext.length <= off) ext.push(i64_new(0));\r\n      map = ext[off];\r\n      index -= (off + 1) * 64;\r\n    }\r\n    map = wrapped\r\n      ? i64_or(\r\n          map,\r\n          i64_shl(\r\n            i64_one,\r\n            i64_new(index)\r\n          )\r\n        )\r\n      : i64_and(\r\n          map,\r\n          i64_not(\r\n            i64_shl(\r\n              i64_one,\r\n              i64_new(index)\r\n            )\r\n          )\r\n        );\r\n    if (off >= 0) (<I64[]>this.wrappedLocalsExt)[off] = map;\r\n    else this.wrappedLocals = map;\r\n  }\r\n\r\n  /** Inherits flags and local wrap states from the specified flow (e.g. on inner block). */\r\n  inherit(other: Flow): void {\r\n    this.flags |= other.flags & (\r\n      FlowFlags.RETURNS |\r\n      FlowFlags.RETURNS_WRAPPED |\r\n      FlowFlags.THROWS |\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.ALLOCATES\r\n    );\r\n    this.wrappedLocals = other.wrappedLocals;\r\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\r\n  }\r\n\r\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. on then/else branches). */\r\n  inheritMutual(left: Flow, right: Flow): void {\r\n    // flags set in both arms\r\n    this.flags |= left.flags & right.flags & (\r\n      FlowFlags.RETURNS |\r\n      FlowFlags.RETURNS_WRAPPED |\r\n      FlowFlags.THROWS |\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.ALLOCATES\r\n    );\r\n    // locals wrapped in both arms\r\n    this.wrappedLocals = i64_and(\r\n      left.wrappedLocals,\r\n      right.wrappedLocals\r\n    );\r\n    var leftExt = left.wrappedLocalsExt;\r\n    var rightExt = right.wrappedLocalsExt;\r\n    if (leftExt != null && rightExt != null) {\r\n      let thisExt = this.wrappedLocalsExt;\r\n      let minLength = min(leftExt.length, rightExt.length);\r\n      if (minLength) {\r\n        if (!thisExt) thisExt = new Array(minLength);\r\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\r\n        for (let i = 0; i < minLength; ++i) {\r\n          thisExt[i] = i64_and(\r\n            leftExt[i],\r\n            rightExt[i]\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\r\n   * expression might already have overflown and returns `false` only if the operation neglects\r\n   * any possibly combination of garbage bits being present.\r\n   */\r\n  canOverflow(expr: ExpressionRef, type: Type): bool {\r\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\r\n    // opportunities here, obviously.\r\n    assert(type != Type.void);\r\n\r\n    // types other than i8, u8, i16, u16 and bool do not overflow\r\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\r\n\r\n    var operand: ExpressionRef;\r\n    switch (getExpressionId(expr)) {\r\n\r\n      // overflows if the local isn't wrapped or the conversion does\r\n      case ExpressionId.GetLocal: {\r\n        let currentFunction = this.currentFunction;\r\n        let local = currentFunction.localsByIndex[getGetLocalIndex(expr)];\r\n        return !currentFunction.flow.isLocalWrapped(local.index)\r\n            || canConversionOverflow(local.type, type);\r\n      }\r\n\r\n      // overflows if the value does\r\n      case ExpressionId.SetLocal: {\r\n        assert(isTeeLocal(expr));\r\n        return this.canOverflow(getSetLocalValue(expr), type);\r\n      }\r\n\r\n      // never overflows because globals are wrapped on set\r\n      case ExpressionId.GetGlobal: return false;\r\n\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64:\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64:\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtU32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtU64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64:\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeU32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeU64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64:\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtU32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtU64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64:\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeU32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeU64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: return false;\r\n\r\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\r\n          case BinaryOp.MulI32: {\r\n            return !(\r\n              (\r\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryRight(expr), type)\r\n                  )\r\n                )\r\n              ) || (\r\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryLeft(expr), type)\r\n                  )\r\n                )\r\n              )\r\n            );\r\n          }\r\n\r\n          // result won't overflow if one side is a constant less than this type's mask or one side\r\n          // is wrapped\r\n          case BinaryOp.AndI32: {\r\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\r\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\r\n            return !(\r\n              (\r\n                (\r\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              ) || (\r\n                (\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              )\r\n            );\r\n          }\r\n\r\n          // overflows if the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShlI32: {\r\n            let shift = 32 - type.size;\r\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\r\n                || getConstValueI32(operand) < shift;\r\n          }\r\n\r\n          // overflows if the value does and the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShrI32: {\r\n            let shift = 32 - type.size;\r\n            return this.canOverflow(getBinaryLeft(expr), type) && (\r\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\r\n              getConstValueI32(operand) < shift\r\n            );\r\n          }\r\n\r\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\r\n          // wrapped, it can't overflow.\r\n          case BinaryOp.ShrU32: {\r\n            let shift = 32 - type.size;\r\n            return type.is(TypeFlags.SIGNED)\r\n              ? !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) > shift // must clear MSB\r\n                )\r\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) >= shift // can leave MSB\r\n                );\r\n          }\r\n\r\n          // overflows if any side does\r\n          case BinaryOp.DivU32:\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemU32: {\r\n            return this.canOverflow(getBinaryLeft(expr), type)\r\n                || this.canOverflow(getBinaryRight(expr), type);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: return false;\r\n\r\n          // overflow if the maximum result (32) cannot be represented in the target type\r\n          case UnaryOp.ClzI32:\r\n          case UnaryOp.CtzI32:\r\n          case UnaryOp.PopcntI32: return type.size < 7;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the value cannot be represented in the target type\r\n      case ExpressionId.Const: {\r\n        let value: i32 = 0;\r\n        switch (getExpressionType(expr)) {\r\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\r\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\r\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\r\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\r\n          default: assert(false);\r\n        }\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\r\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\r\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\r\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\r\n          case TypeKind.BOOL: return (value & ~1) != 0;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the conversion does\r\n      case ExpressionId.Load: {\r\n        let fromType: Type;\r\n        switch (getLoadBytes(expr)) {\r\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\r\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\r\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\r\n        }\r\n        return canConversionOverflow(fromType, type);\r\n      }\r\n\r\n      // overflows if the result does, which is either\r\n      // - the last expression of the block, by contract, if the block doesn't have a label\r\n      // - the last expression or the value of an inner br if the block has a label (TODO)\r\n      case ExpressionId.Block: {\r\n        if (!getBlockName(expr)) {\r\n          let size = assert(getBlockChildCount(expr));\r\n          let last = getBlockChild(expr, size - 1);\r\n          return this.canOverflow(last, type);\r\n        }\r\n        // actually, brs with a value that'd be handled here is not emitted atm\r\n        break;\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.If: {\r\n        return this.canOverflow(getIfTrue(expr), type)\r\n            || this.canOverflow(assert(getIfFalse(expr)), type);\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.Select: {\r\n        return this.canOverflow(getSelectThen(expr), type)\r\n            || this.canOverflow(getSelectElse(expr), type);\r\n      }\r\n\r\n      // overflows if the call does not return a wrapped value or the conversion does\r\n      case ExpressionId.Call: {\r\n        let program = this.currentFunction.program;\r\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\r\n        assert(instance.kind == ElementKind.FUNCTION);\r\n        let returnType = (<Function>instance).signature.returnType;\r\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\r\n            || canConversionOverflow(returnType, type);\r\n      }\r\n\r\n      // doesn't technically overflow\r\n      case ExpressionId.Unreachable: return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\r\n  finalize(): void {\r\n    assert(this.parent == null); // must be the topmost parent flow\r\n    this.continueLabel = null;\r\n    this.breakLabel = null;\r\n    this.returnLabel = null;\r\n    this.contextualTypeArguments = null;\r\n  }\r\n}\r\n\r\n/** Tests if a conversion from one type to another can technically overflow. */\r\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\r\n  var fromSize = fromType.byteSize;\r\n  var toSize = toType.byteSize;\r\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\r\n      || fromSize > toSize\r\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\r\n}\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./charcode\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(message.range, useColors));\r\n    }\r\n\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) sb.push(\"~\");\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport {\r\n  Target\r\n} from \"./compiler\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type Index = u32;\r\n\r\nexport enum NativeType {\r\n  None = _BinaryenTypeNone(),\r\n  I32 = _BinaryenTypeInt32(),\r\n  I64 = _BinaryenTypeInt64(),\r\n  F32 = _BinaryenTypeFloat32(),\r\n  F64 =  _BinaryenTypeFloat64(),\r\n  Unreachable = _BinaryenTypeUnreachable(),\r\n  Auto = _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallImport = _BinaryenCallImportId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  GetLocal = _BinaryenGetLocalId(),\r\n  SetLocal = _BinaryenSetLocalId(),\r\n  GetGlobal = _BinaryenGetGlobalId(),\r\n  SetGlobal = _BinaryenSetGlobalId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicWake = _BinaryenAtomicWakeId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\r\n\r\n  // see: https://github.com/WebAssembly/sign-extension-ops\r\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\r\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\r\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\r\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\r\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64()\r\n}\r\n\r\nexport enum HostOp {\r\n  PageSize = _BinaryenPageSize(),\r\n  CurrentMemory = _BinaryenCurrentMemory(),\r\n  GrowMemory = _BinaryenGrowMemory(),\r\n  HasFeature = _BinaryenHasFeature(),\r\n\r\n  // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  // MoveMemory\r\n  // SetMemory\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n\r\n  private cachedByValue: usize;\r\n\r\n  /** Maximum number of pages when targeting WASM32. */\r\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\r\n\r\n  /** Maximum number of pages when targeting WASM64. */\r\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.cachedByValue = allocate_memory(16);\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.cachedByValue = allocate_memory(3 * 8); // LLVM C-ABI, max used is 3 * usize\r\n      return module;\r\n    } finally {\r\n      free_memory(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunctionType(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunctionType(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  // constants\r\n\r\n  createI32(value: i32): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF32(value: f32): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF64(value: f64): ExpressionRef {\r\n    var out = this.cachedByValue;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  createUnary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  createBinary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  createHost(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createGetLocal(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenGetLocal(this.ref, index, type);\r\n  }\r\n\r\n  createTeeLocal(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenTeeLocal(this.ref, index, value);\r\n  }\r\n\r\n  createGetGlobal(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenGetGlobal(this.ref, cStr, type);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createLoad(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\r\n  }\r\n\r\n  createStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\r\n  }\r\n\r\n  createAtomicLoad(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  createAtomicStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicRMW(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicCmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  createAtomicWait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  createAtomicWake(\r\n    ptr: ExpressionRef,\r\n    wakeCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  createSetLocal(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSetLocal(this.ref, index, value);\r\n  }\r\n\r\n  createSetGlobal(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenSetGlobal(this.ref, cStr, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBlock(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    var cArr = allocPtrArray(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createBreak(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenBreak(this.ref, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createDrop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  createLoop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = allocString(label);\r\n    try {\r\n      return _BinaryenLoop(this.ref, cStr, body);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createIf(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createNop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  createReturn(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  createSelect(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createSwitch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = allocString(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = allocString(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n      for (let i = numNames - 1; i >= 0; --i) free_memory(strs[i]);\r\n    }\r\n  }\r\n\r\n  createCall(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallImport(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = allocString(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  createCallIndirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cArr = allocPtrArray(operands);\r\n    var cStr = allocString(typeName);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  createUnreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = allocString(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      free_memory(cArr);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = allocString(name);\r\n    try {\r\n      _BinaryenRemoveFunction(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  private cachedTemporaryName: usize = 0;\r\n  private hasTemporaryFunction: bool = false;\r\n\r\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\r\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\r\n    var tempName = this.cachedTemporaryName;\r\n    if (!tempName) this.cachedTemporaryName = tempName = allocString(\"\"); // works because strings are interned\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\r\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  removeTemporaryFunction(): void {\r\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\r\n    var tempName = assert(this.cachedTemporaryName);\r\n    _BinaryenRemoveFunction(this.ref, tempName);\r\n    _BinaryenRemoveFunctionType(this.ref, tempName);\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalName);\r\n    try {\r\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n    } finally {\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = allocString(externalName);\r\n    try {\r\n      _BinaryenRemoveExport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = allocString(internalName);\r\n    var cStr2 = allocString(externalModuleName);\r\n    var cStr3 = allocString(externalBaseName);\r\n    try {\r\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n    } finally {\r\n      free_memory(cStr3);\r\n      free_memory(cStr2);\r\n      free_memory(cStr1);\r\n    }\r\n  }\r\n\r\n  removeImport(internalName: string): void {\r\n    var cStr = allocString(internalName);\r\n    try {\r\n      _BinaryenRemoveImport(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null\r\n  ): void {\r\n    var cStr = allocString(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      offs[i] = target == Target.WASM64\r\n        ? this.createI64(i64_low(offset), i64_high(offset))\r\n        : this.createI32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocI32Array(offs);\r\n    var cArr3 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\r\n    } finally {\r\n      free_memory(cArr3);\r\n      free_memory(cArr2);\r\n      free_memory(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) free_memory(segs[i]);\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(funcs: FunctionRef[]): void {\r\n    var cArr = allocPtrArray(funcs);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      free_memory(cArr);\r\n      for (let i = numNames; i >= 0; --i) {\r\n        free_memory(names[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  private cachedPrecomputeName: usize = 0;\r\n  private cachedPrecomputeNames: usize = 0;\r\n\r\n  precomputeFunction(func: FunctionRef): void {\r\n    var names = this.cachedPrecomputeNames;\r\n    if (!names) {\r\n      let name = allocString(\"precompute\");\r\n      this.cachedPrecomputeName = name;\r\n      this.cachedPrecomputeNames = names = allocI32Array([ name ]);\r\n    }\r\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.cachedByValue;\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) free_memory(cStr);\r\n      if (binaryPtr) free_memory(binaryPtr);\r\n      if (sourceMapPtr) free_memory(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  dispose(): void {\r\n    assert(this.ref);\r\n    free_memory(this.cachedByValue);\r\n    free_memory(this.cachedTemporaryName);\r\n    free_memory(this.cachedPrecomputeName);\r\n    free_memory(this.cachedPrecomputeNames);\r\n    _BinaryenModuleDispose(this.ref);\r\n    this.ref = 0;\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(\r\n    expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n        switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.createI32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.createI64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.createF32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.createF64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        return _BinaryenGetLocal(this.ref,\r\n          _BinaryenGetLocalGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GetGlobal: {\r\n        let globalName = _BinaryenGetGlobalGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return (\r\n          _BinaryenLoadIsAtomic(expr)\r\n            ? _BinaryenAtomicLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n            : _BinaryenLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenLoadGetAlign(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n        );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      free_memory(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\n// expressions\r\n\r\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\r\n  return _BinaryenExpressionGetId(expr);\r\n}\r\n\r\nexport function getExpressionType(expr: ExpressionRef): NativeType {\r\n  return _BinaryenExpressionGetType(expr);\r\n}\r\n\r\nexport function getConstValueI32(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI32(expr);\r\n}\r\n\r\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64Low(expr);\r\n}\r\n\r\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64High(expr);\r\n}\r\n\r\nexport function getConstValueF32(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF32(expr);\r\n}\r\n\r\nexport function getConstValueF64(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF64(expr);\r\n}\r\n\r\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenGetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenSetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSetLocalGetValue(expr);\r\n}\r\n\r\nexport function isTeeLocal(expr: ExpressionRef): bool {\r\n  return _BinaryenSetLocalIsTee(expr);\r\n}\r\n\r\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\r\n  return _BinaryenBinaryGetOp(expr);\r\n}\r\n\r\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetLeft(expr);\r\n}\r\n\r\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetRight(expr);\r\n}\r\n\r\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\r\n  return _BinaryenUnaryGetOp(expr);\r\n}\r\n\r\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenUnaryGetValue(expr);\r\n}\r\n\r\nexport function getLoadBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetBytes(expr);\r\n}\r\n\r\nexport function getLoadOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetOffset(expr);\r\n}\r\n\r\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoadGetPtr(expr);\r\n}\r\n\r\nexport function isLoadSigned(expr: ExpressionRef): bool {\r\n  return _BinaryenLoadIsSigned(expr);\r\n}\r\n\r\nexport function getStoreBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetBytes(expr);\r\n}\r\n\r\nexport function getStoreOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetOffset(expr);\r\n}\r\n\r\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetPtr(expr);\r\n}\r\n\r\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetValue(expr);\r\n}\r\n\r\nexport function getBlockName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBlockGetName(expr));\r\n}\r\n\r\nexport function getBlockChildCount(expr: ExpressionRef): Index {\r\n  return _BinaryenBlockGetNumChildren(expr);\r\n}\r\n\r\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenBlockGetChild(expr, index);\r\n}\r\n\r\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetCondition(expr);\r\n}\r\n\r\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfTrue(expr);\r\n}\r\n\r\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfFalse(expr);\r\n}\r\n\r\nexport function getLoopName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenLoopGetName(expr));\r\n}\r\n\r\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoopGetBody(expr);\r\n}\r\n\r\nexport function getBreakName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBreakGetName(expr));\r\n}\r\n\r\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBreakGetCondition(expr);\r\n}\r\n\r\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfTrue(expr);\r\n}\r\n\r\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfFalse(expr);\r\n}\r\n\r\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetCondition(expr);\r\n}\r\n\r\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenDropGetValue(expr);\r\n}\r\n\r\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenReturnGetValue(expr);\r\n}\r\n\r\nexport function getCallTarget(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenCallGetTarget(expr));\r\n}\r\n\r\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenHostGetOp(expr);\r\n}\r\n\r\nexport function getHostOperandCount(expr: ExpressionRef): Index {\r\n  return _BinaryenHostGetNumOperands(expr);\r\n}\r\n\r\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenHostGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenHostGetNameOperand(expr));\r\n}\r\n\r\n// functions\r\n\r\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\r\n  return _BinaryenFunctionGetBody(func);\r\n}\r\n\r\nexport function getFunctionName(func: FunctionRef): string | null {\r\n  return readString(_BinaryenFunctionGetName(func));\r\n}\r\n\r\nexport function getFunctionParamCount(func: FunctionRef): Index {\r\n  return _BinaryenFunctionGetNumParams(func);\r\n}\r\n\r\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\r\n  return _BinaryenFunctionGetParam(func, index);\r\n}\r\n\r\nexport function getFunctionResultType(func: FunctionRef): NativeType {\r\n  return _BinaryenFunctionGetResult(func);\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate();\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      free_memory(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\r\n  }\r\n}\r\n\r\n// export function hasSideEffects(expr: ExpressionRef): bool {\r\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\r\n//     case ExpressionId.GetLocal:\r\n//     case ExpressionId.GetGlobal:\r\n//     case ExpressionId.Const:\r\n//     case ExpressionId.Nop:\r\n//     case ExpressionId.Unreachable: {\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.Block: {\r\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\r\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\r\n//       }\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.If: {\r\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\r\n//     }\r\n//     case ExpressionId.Unary: {\r\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Binary: {\r\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\r\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\r\n//     }\r\n//     case ExpressionId.Drop: {\r\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Select: {\r\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\r\n//     }\r\n//   }\r\n//   return true;\r\n// }\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = allocate_memory(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = allocate_memory(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocPtrArray(ptrs: usize[] | null): usize {\r\n  return allocI32Array(ptrs); // TODO: WASM64 one day\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = allocate_memory(stringLengthUTF8(str) + 1);\r\n  // the following is based on Emscripten's stringToUTF8Array\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    arr.push(cp);\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath,\r\n  CharCode\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  TYPE,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n  SIGNATURE,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n  /** Parent node. */\r\n  parent: Node | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n\r\n  // types\r\n\r\n  static createType(\r\n    name: IdentifierExpression,\r\n    typeArguments: CommonTypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): TypeNode {\r\n    var type = new TypeNode();\r\n    type.range = range;\r\n    type.name = name; name.parent = type;\r\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): TypeNode {\r\n    return Node.createType(\r\n      Node.createIdentifierExpression(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createSignature(\r\n    parameters: ParameterNode[],\r\n    returnType: CommonTypeNode,\r\n    explicitThisType: TypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): SignatureNode {\r\n    var sig = new SignatureNode();\r\n    sig.range = range;\r\n    sig.parameters = parameters; setParent(parameters, sig);\r\n    sig.returnType = returnType; returnType.parent = sig;\r\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\r\n    sig.isNullable = isNullable;\r\n    return sig;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    name: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.arguments = args; if (args) setParent(args, stmt);\r\n    stmt.decoratorKind = decoratorNameToKind(name);\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: CommonTypeNode,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.toType = toType; toType.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left; left.parent = expr;\r\n    expr.right = right; right.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions; setParent(expressions, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.elementExpression = element; element.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.flags = declaration.flags & CommonFlags.ARROW;\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\r\n    expr.arguments = args; setParent(args, expr);\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression; expression.parent = expr;\r\n    expr.property = property; property.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition; condition.parent = expr;\r\n    expr.ifThen = ifThen; ifThen.parent = expr;\r\n    expr.ifElse = ifElse; ifElse.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand; operand.parent = expr;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    implementsTypes: TypeNode[] | null, // can't be functions\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier; identifier.parent = stmt;\r\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label; if (label) label.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.values = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[],\r\n    path: StringLiteralExpression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.externalName = externalName; externalName.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.name = name; name.parent = elem;\r\n    if (!externalName) {\r\n      externalName = name;\r\n    } else {\r\n      externalName.parent = elem;\r\n    }\r\n    elem.externalName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression; expression.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\r\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    stmt.normalizedPath = resolvePath(\r\n      normalizePath(path.value),\r\n      range.source.normalizedPath\r\n    );\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    externalName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.externalName = externalName; externalName.parent = elem;\r\n    if (!name) {\r\n      name = externalName;\r\n    } else {\r\n      name.parent = elem;\r\n    }\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[],\r\n    extendsType: TypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.type = type; if (type) type.parent = stmt;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\r\n    stmt.condition = condition; if (condition) condition.parent = stmt;\r\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.signature = signature; signature.parent = stmt;\r\n    stmt.body = body; if (body) body.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.members = members; setParent(members, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; if (value) value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.cases = cases; setParent(cases, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label; if (label) label.parent = elem;\r\n    elem.statements = statements; setParent(statements, elem);\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value; value.parent = stmt;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements; setParent(statements, stmt);\r\n    stmt.catchVariable = catchVariable;\r\n    if (catchVariable) catchVariable.parent = stmt;\r\n    stmt.catchStatements = catchStatements;\r\n    if (catchStatements) setParent(catchStatements, stmt);\r\n    stmt.finallyStatements = finallyStatements;\r\n    if (finallyStatements) setParent(finallyStatements, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: CommonTypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name; name.parent = stmt;\r\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\r\n    stmt.type = alias; alias.parent = stmt;\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.declarations = declarations; setParent(declarations, stmt);\r\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name; name.parent = elem;\r\n    elem.type = type; if (type) type.parent = elem;\r\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition; condition.parent = stmt;\r\n    stmt.statement = statement; statement.parent = stmt;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class CommonTypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type annotation. */\r\nexport class TypeNode extends CommonTypeNode {\r\n  kind = NodeKind.TYPE;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Type argument references. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: CommonTypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n}\r\n\r\n/** Represents a function signature. */\r\nexport class SignatureNode extends CommonTypeNode {\r\n  kind = NodeKind.SIGNATURE;\r\n\r\n  /** Accepted parameters. */\r\n  parameters: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: CommonTypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: TypeNode | null; // can't be a function\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  OPERATOR_BINARY,\r\n  OPERATOR_PREFIX,\r\n  OPERATOR_POSTFIX,\r\n  UNMANAGED,\r\n  SEALED,\r\n  INLINE\r\n}\r\n\r\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\r\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\r\n  // @global, @inline, @operator, @sealed, @unmanaged\r\n  if (name.kind == NodeKind.IDENTIFIER) {\r\n    let nameStr = (<IdentifierExpression>name).text;\r\n    assert(nameStr.length);\r\n    switch (nameStr.charCodeAt(0)) {\r\n      case CharCode.g: {\r\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\r\n        break;\r\n      }\r\n      case CharCode.i: {\r\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\r\n        break;\r\n      }\r\n      case CharCode.o: {\r\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\r\n        break;\r\n      }\r\n      case CharCode.s: {\r\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\r\n        break;\r\n      }\r\n      case CharCode.u: {\r\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\r\n        break;\r\n      }\r\n    }\r\n  } else if (\r\n    name.kind == NodeKind.PROPERTYACCESS &&\r\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\r\n  ) {\r\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\r\n    assert(nameStr.length);\r\n    let propStr = (<PropertyAccessExpression>name).property.text;\r\n    assert(propStr.length);\r\n    // @operator.binary, @operator.prefix, @operator.postfix\r\n    if (nameStr == \"operator\") {\r\n      switch (propStr.charCodeAt(0)) {\r\n        case CharCode.b: {\r\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\r\n          break;\r\n        }\r\n        case CharCode.p: {\r\n          switch (propStr) {\r\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\r\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return DecoratorKind.CUSTOM;\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: CommonTypeNode;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    this.internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n\r\n  protected cachedProgramLevelInternalName: string | null = null;\r\n  protected cachedFileLevelInternalName: string | null = null;\r\n\r\n  /** Gets the mangled program-level internal name of this declaration. */\r\n  get programLevelInternalName(): string {\r\n    if (!this.cachedProgramLevelInternalName) {\r\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\r\n    }\r\n    return this.cachedProgramLevelInternalName;\r\n  }\r\n\r\n  /** Gets the mangled file-level internal name of this declaration. */\r\n  get fileLevelInternalName(): string {\r\n    if (!this.cachedFileLevelInternalName) {\r\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\r\n    }\r\n    return this.cachedFileLevelInternalName;\r\n  }\r\n\r\n  /** Tests if this is a top-level declaration within its source file. */\r\n  get isTopLevel(): bool {\r\n    var parent = this.parent;\r\n    if (!parent) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\r\n      return false;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE;\r\n  }\r\n\r\n  /** Tests if this declaration is a top-level export within its source file. */\r\n  get isTopLevelExport(): bool {\r\n    var parent = this.parent;\r\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\r\n      return false;\r\n    }\r\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\r\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\r\n    }\r\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\r\n    }\r\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\r\n  }\r\n\r\n  /** Tests if this declaration needs an explicit export. */\r\n  needsExplicitExport(member: ExportMember): bool {\r\n    // This is necessary because module-level exports are automatically created\r\n    // for top level declarations of all sorts. This function essentially tests\r\n    // that there isn't a otherwise duplicate top-level export already.\r\n    return (\r\n      member.name.text != member.externalName.text || // if aliased\r\n      this.range.source != member.range.source ||     // if a re-export\r\n      !this.isTopLevelExport                          // if not top-level\r\n    );\r\n  }\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: CommonTypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[];\r\n  /** Base class type being extended, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Interface types being implemented, if any. */\r\n  implementsTypes: TypeNode[] | null; // can't be functions\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Identifier being exported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier seen when imported again. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members. */\r\n  members: ExportMember[];\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index within the constructor, if applicable. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: SignatureNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Tests if a specific decorator is present within the specified decorators. */\r\nexport function hasDecorator(name: string, decorators: DecoratorNode[] | null): bool {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let expression = decorators[i].name;\r\n      if (expression.kind == NodeKind.IDENTIFIER && (<IdentifierExpression>expression).text == name) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Mangles a declaration's name to an internal name. */\r\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\r\n  var name = declaration.name.text;\r\n  var parent = declaration.parent;\r\n  if (!parent) return name;\r\n  if (\r\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\r\n    parent.kind == NodeKind.VARIABLE\r\n  ) { // skip over\r\n    if (!(parent = parent.parent)) return name;\r\n  }\r\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\r\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\r\n      declaration.is(CommonFlags.STATIC)\r\n        ? STATIC_DELIMITER\r\n        : INSTANCE_DELIMITER\r\n    ) + name;\r\n  }\r\n  if (\r\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\r\n    parent.kind == NodeKind.ENUMDECLARATION\r\n  ) {\r\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\r\n           STATIC_DELIMITER + name;\r\n  }\r\n  return asGlobal\r\n    ? name\r\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n// Helpers\r\n\r\n/** Sets the parent node on an array of nodes. */\r\nfunction setParent(nodes: Node[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    nodes[i].parent = parent;\r\n  }\r\n}\r\n\r\n/** Sets the parent node on an array of nullable nodes. */\r\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\r\n  for (let i = 0, k = nodes.length; i < k; ++i) {\r\n    let node = nodes[i];\r\n    if (node) node.parent = parent;\r\n  }\r\n}\r\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport enum IdentifierHandling {\r\n  DEFAULT,\r\n  PREFER,\r\n  ALWAYS\r\n}\r\n\r\nexport function tokenFromKeyword(text: string): Token {\r\n  assert(text.length);\r\n  switch (text.charCodeAt(0)) {\r\n    case CharCode.a: {\r\n      switch (text) {\r\n        case \"abstract\": return Token.ABSTRACT;\r\n        case \"as\": return Token.AS;\r\n        case \"async\": return Token.ASYNC;\r\n        case \"await\": return Token.AWAIT;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.b: {\r\n      switch (text) {\r\n        case \"break\": return Token.BREAK;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.c: {\r\n      switch (text) {\r\n        case \"case\": return Token.CASE;\r\n        case \"catch\": return Token.CATCH;\r\n        case \"class\": return Token.CLASS;\r\n        case \"continue\": return Token.CONTINUE;\r\n        case \"const\": return Token.CONST;\r\n        case \"constructor\": return Token.CONSTRUCTOR;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.d: {\r\n      switch (text) {\r\n        case \"debugger\": return Token.DEBUGGER;\r\n        case \"declare\": return Token.DECLARE;\r\n        case \"default\": return Token.DEFAULT;\r\n        case \"delete\": return Token.DELETE;\r\n        case \"do\": return Token.DO;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.e: {\r\n      switch (text) {\r\n        case \"else\": return Token.ELSE;\r\n        case \"enum\": return Token.ENUM;\r\n        case \"export\": return Token.EXPORT;\r\n        case \"extends\": return Token.EXTENDS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.f: {\r\n      switch (text) {\r\n        case \"false\": return Token.FALSE;\r\n        case \"finally\": return Token.FINALLY;\r\n        case \"for\": return Token.FOR;\r\n        case \"from\": return Token.FROM;\r\n        case \"function\": return Token.FUNCTION;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.g: {\r\n      switch (text) {\r\n        case \"get\": return Token.GET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.i: {\r\n      switch (text) {\r\n        case \"if\": return Token.IF;\r\n        case \"implements\": return Token.IMPLEMENTS;\r\n        case \"import\": return Token.IMPORT;\r\n        case \"in\": return Token.IN;\r\n        case \"instanceof\": return Token.INSTANCEOF;\r\n        case \"interface\": return Token.INTERFACE;\r\n        case \"is\": return Token.IS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.k: {\r\n      switch (text) {\r\n        case \"keyof\": return Token.KEYOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.l: {\r\n      switch (text) {\r\n        case \"let\": return Token.LET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.m: {\r\n      switch (text) {\r\n        case \"module\": return Token.MODULE;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.n: {\r\n      switch (text) {\r\n        case \"namespace\": return Token.NAMESPACE;\r\n        case \"new\": return Token.NEW;\r\n        case \"null\": return Token.NULL;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.o: {\r\n      switch (text) {\r\n        case \"of\": return Token.OF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.p: {\r\n      switch (text) {\r\n        case \"package\": return Token.PACKAGE;\r\n        case \"private\": return Token.PRIVATE;\r\n        case \"protected\": return Token.PROTECTED;\r\n        case \"public\": return Token.PUBLIC;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.r: {\r\n      switch (text) {\r\n        case \"readonly\": return Token.READONLY;\r\n        case \"return\": return Token.RETURN;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.s: {\r\n      switch (text) {\r\n        case \"set\": return Token.SET;\r\n        case \"static\": return Token.STATIC;\r\n        case \"super\": return Token.SUPER;\r\n        case \"switch\": return Token.SWITCH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.t: {\r\n      switch (text) {\r\n        case \"this\": return Token.THIS;\r\n        case \"throw\": return Token.THROW;\r\n        case \"true\": return Token.TRUE;\r\n        case \"try\": return Token.TRY;\r\n        case \"type\": return Token.TYPE;\r\n        case \"typeof\": return Token.TYPEOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.v: {\r\n      switch (text) {\r\n        case \"var\": return Token.VAR;\r\n        case \"void\": return Token.VOID;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.w: {\r\n      switch (text) {\r\n        case \"while\": return Token.WHILE;\r\n        case \"with\": return Token.WITH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.y: {\r\n      switch (text) {\r\n        case \"yield\": return Token.YIELD;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return Token.INVALID;\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.GET:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics ? diagnostics : new Array();\r\n\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < this.end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(identifierHandling);\r\n  }\r\n\r\n  private unsafeNext(\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxTokenLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (\r\n            ++this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          ) {\r\n            ++this.pos;\r\n          }\r\n          break;\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < this.end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < this.end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < this.end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < this.end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < this.end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFromKeyword(keywordText);\r\n              if (\r\n                keywordToken != Token.INVALID &&\r\n                identifierHandling !== IdentifierHandling.ALWAYS &&\r\n                !(\r\n                  identifierHandling === IdentifierHandling.PREFER &&\r\n                  tokenIsAlsoIdentifier(keywordToken)\r\n                )\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        while (--this.tokenPos > posBefore) {\r\n          if (isLineBreak(text.charCodeAt(this.tokenPos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skipIdentifier(): bool {\r\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.PREFER);\r\n  }\r\n\r\n  skipIdentifierName(): bool {\r\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.ALWAYS);\r\n  }\r\n\r\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    while (\r\n      ++this.pos < this.end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c)) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    if (++this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.SLASH && !escaped) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var flags = 0;\r\n    while (this.pos < this.end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.X:\r\n        case CharCode.x:\r\n        case CharCode.B:\r\n        case CharCode.b:\r\n        case CharCode.O:\r\n        case CharCode.o: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < this.end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\r\n        return false;\r\n      }\r\n      if (c < CharCode._0 || c > CharCode._9) break;\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.X:\r\n        case CharCode.x: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.B:\r\n        case CharCode.b: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.O:\r\n        case CharCode.o: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_16 = i64_new(16, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 16 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = value * 16 + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.A, 0)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = value * 16 + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_mul(value, i64_16),\r\n          i64_new(10 + c - CharCode.a, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_10 = i64_new(10, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_8 = i64_new(8, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = value * 8 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_8),\r\n          i64_new(c - CharCode._0, 0)\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0, 0);\r\n    var i64_2 = i64_new(2, 0);\r\n    var i64_1 = i64_new(1, 0);\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode._0) {\r\n        // value = value * 2;\r\n        value = i64_mul(\r\n          value,\r\n          i64_2\r\n        );\r\n      } else if (c == CharCode._1) {\r\n        // value = value * 2 + 1;\r\n        value = i64_add(\r\n          i64_mul(value, i64_2),\r\n          i64_1\r\n        );\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    var start = this.pos;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.E || c == CharCode.e) {\r\n        if (\r\n          ++this.pos < this.end && (\r\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\r\n            text.charCodeAt(this.pos) == CharCode.PLUS\r\n          ) &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = value * 16 + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = value * 16 + 10 + c - CharCode.A;\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = value * 16 + 10 + c - CharCode.a;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var text = this.source.text;\r\n    if (this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, this.end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\r\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a pointer type. */\r\n  POINTER = 1 << 4,\r\n  /** Is smaller than 32-bits. */\r\n  SHORT = 1 << 5,\r\n  /** Is larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9\r\n}\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying signature reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n  /** Cached nullable type, if non-nullable. */\r\n  private cachedNullableType: Type | null = null;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Returns the int type of this type. Defaults to `Type.i32` if this is not an int type. */\r\n  get intType(): Type {\r\n    switch (this.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.I32:\r\n      case TypeKind.I64:\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.U32:\r\n      case TypeKind.U64:\r\n      case TypeKind.USIZE: return this;\r\n      case TypeKind.BOOL:\r\n      default: return Type.i32;\r\n    }\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\r\n    return ~0 >>> (targetType.size - size);\r\n  }\r\n\r\n  /** Tests if this type has (all of) the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.cachedNullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\r\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.cachedNullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to a target of the specified type. */\r\n  isAssignableTo(target: Type, signednessIsImportant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (currentClass = this.classReference) {\r\n          if (targetClass = target.classReference) {\r\n            return currentClass.isAssignableTo(targetClass);\r\n          }\r\n        } else if (currentFunction = this.signatureReference) {\r\n          if (targetFunction = target.signatureReference) {\r\n            return currentFunction.isAssignableTo(targetFunction);\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (!signednessIsImportant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Determines the common compatible type of two types, if any. */\r\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\r\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to its TypeScript representation. */\r\n  toString(kindOnly: bool = false): string {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: {\r\n        let functionType = this.signatureReference;\r\n        return kindOnly || !functionType ? \"u32\" : functionType.toString(true);\r\n      }\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: {\r\n        let classType = this.classReference;\r\n        return kindOnly || !classType ? \"usize\" : classType.toString();\r\n      }\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(0);\r\n      case TypeKind.F32: return module.createF32(0);\r\n      case TypeKind.F64: return module.createF64(0);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(1);\r\n      case TypeKind.F32: return module.createF32(1);\r\n      case TypeKind.F64: return module.createF64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(-1, -1);\r\n      case TypeKind.F32: return module.createF32(-1);\r\n      case TypeKind.F64: return module.createF64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      default: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"I\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"F\";\r\n      case TypeKind.VOID: return \"v\";\r\n    }\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\r\n  return sb.join(\",\");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getDefaultParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) return false; // TODO\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) return false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = target.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts a signature to a function type string. */\r\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\r\n    var sb = [];\r\n    if (thisType) sb.push(thisType.toSignatureString());\r\n    if (parameterTypes) {\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    sb.push(returnType.toSignatureString());\r\n    return sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(includeThis: bool = false): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      if (includeThis) {\r\n        sb.push(\"this: \");\r\n        sb.push(thisType.toString());\r\n        index = 1;\r\n      }\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) sb.push((<string[]>names)[i]);\r\n        else sb.push(getDefaultParameterName(i));\r\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\r\n        else sb.push(\": \");\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached default parameter names used where names are unknown.\r\nvar cachedDefaultParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached default parameter name for the specified index. */\r\nexport function getDefaultParameterName(index: i32): string {\r\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\r\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\r\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedDefaultParameterNames[index - 1];\r\n}\r\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Enum_member_must_have_initializer = 1061,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    default: return \"\";\n  }\n}\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  compileCall as compileBuiltinCall,\r\n  compileAllocate as compileBuiltinAllocate,\r\n  compileAbort as compileBuiltinAbort\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getFunctionBody,\r\n  getGetLocalIndex\r\n} from \"./module\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  Namespace,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  FlowFlags,\r\n  CommonFlags,\r\n  ConstantValueKind,\r\n  Flow,\r\n  OperatorKind,\r\n  DecoratorFlags,\r\n\r\n  PATH_DELIMITER,\r\n  INNER_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX\r\n} from \"./program\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  TypeNode,\r\n  Source,\r\n  Range,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FunctionDeclaration,\r\n  ForStatement,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableDeclaration,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n  FieldDeclaration\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64\r\n} from \"./util\";\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64\r\n}\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, compiles everything instead of just reachable code. */\r\n  noTreeShaking: bool = false;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, does not set up a memory. */\r\n  noMemory: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: u32 = 0;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** Global aliases. */\r\n  globalAliases: Map<string,string> | null = null;\r\n  /** Additional features to activate. */\r\n  features: Feature = Feature.NONE;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n\r\n  /** Tests if a specific feature is activated. */\r\n  hasFeature(feature: Feature): bool {\r\n    return (this.features & feature) != 0;\r\n  }\r\n}\r\n\r\n/** Indicates specific features to activate. */\r\nexport const enum Feature {\r\n  /** No additional features. */\r\n  NONE = 0,\r\n  /** Sign extension operations. */\r\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\r\n  /** Mutable global imports and exports. */\r\n  MUTABLE_GLOBAL = 1 << 1  // see: https://github.com/WebAssembly/mutable-global\r\n}\r\n\r\n/** Indicates the desired kind of a conversion. */\r\nexport const enum ConversionKind {\r\n  /** No conversion. */\r\n  NONE,\r\n  /** Implicit conversion. */\r\n  IMPLICIT,\r\n  /** Explicit conversion. */\r\n  EXPLICIT\r\n}\r\n\r\n/** Indicates the desired wrap mode of a conversion. */\r\nexport const enum WrapMode {\r\n  /** No wrapping. */\r\n  NONE,\r\n  /** Wrap small integer values. */\r\n  WRAP\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current function in compilation. */\r\n  currentFunction: Function;\r\n  /** Outer function in compilation, if compiling a function expression. */\r\n  outerFunction: Function | null = null;\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function being compiled. */\r\n  startFunction: Function;\r\n  /** Start function statements. */\r\n  startFunctionBody: ExpressionRef[] = [];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = [];\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: Function[] = [];\r\n  /** Argument count helper global. */\r\n  argcVar: GlobalRef = 0;\r\n  /** Argument count helper setter. */\r\n  argcSet: FunctionRef = 0;\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\r\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\r\n      max(options.memoryBase, 8)\r\n    );\r\n    this.module = Module.create();\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the start function wrapping top-level statements, of all files.\r\n    var startFunctionPrototype = assert(program.elementsLookup.get(\"start\"));\r\n    assert(startFunctionPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    var startFunctionInstance = new Function(\r\n      <FunctionPrototype>startFunctionPrototype,\r\n      startFunctionPrototype.internalName,\r\n      new Signature([], Type.void)\r\n    );\r\n    this.startFunction = startFunctionInstance;\r\n    this.currentFunction = startFunctionInstance;\r\n\r\n    // compile entry file(s) while traversing reachable elements\r\n    var sources = program.sources;\r\n    for (let i = 0, k = sources.length; i < k; ++i) {\r\n      if (sources[i].isEntry) this.compileSource(sources[i]);\r\n    }\r\n\r\n    // compile the start function if not empty\r\n    var startFunctionBody = this.startFunctionBody;\r\n    if (startFunctionBody.length) {\r\n      let signature = startFunctionInstance.signature;\r\n      let funcRef = module.addFunction(\r\n        startFunctionInstance.internalName,\r\n        this.ensureFunctionType(\r\n          signature.parameterTypes,\r\n          signature.returnType,\r\n          signature.thisType\r\n        ),\r\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n        module.createBlock(null, startFunctionBody)\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n      module.setStart(funcRef);\r\n    }\r\n\r\n    // set up static memory segments and the heap base pointer\r\n    if (!options.noMemory) {\r\n      let memoryOffset = this.memoryOffset;\r\n      memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n      this.memoryOffset = memoryOffset;\r\n      if (options.isWasm64) {\r\n        module.addGlobal(\r\n          \"HEAP_BASE\",\r\n          NativeType.I64,\r\n          false,\r\n          module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n        );\r\n      } else {\r\n        module.addGlobal(\r\n          \"HEAP_BASE\",\r\n          NativeType.I32,\r\n          false,\r\n          module.createI32(i64_low(memoryOffset))\r\n        );\r\n      }\r\n\r\n      // determine initial page size\r\n      let pages = i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0));\r\n      module.setMemory(\r\n        i64_low(pages),\r\n        this.options.isWasm64\r\n          ? Module.MAX_MEMORY_WASM64\r\n          : Module.MAX_MEMORY_WASM32,\r\n        this.memorySegments,\r\n        options.target,\r\n        \"memory\"\r\n      );\r\n    }\r\n\r\n    // import memory if requested (default memory is named '0' by Binaryen)\r\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    var functionTableSize = functionTable.length;\r\n    var functionTableExported = false;\r\n    if (functionTableSize) {\r\n      let entries = new Array<FunctionRef>(functionTableSize);\r\n      for (let i = 0; i < functionTableSize; ++i) {\r\n        entries[i] = functionTable[i].ref;\r\n      }\r\n      module.setFunctionTable(entries);\r\n      module.addTableExport(\"0\", \"table\");\r\n      functionTableExported = true;\r\n    }\r\n\r\n    // import table if requested (default table is named '0' by Binaryen)\r\n    if (options.importTable) {\r\n      module.addTableImport(\"0\", \"env\", \"table\");\r\n      if (!functionTableExported) module.addTableExport(\"0\", \"table\");\r\n    }\r\n\r\n    return module;\r\n  }\r\n\r\n  // sources\r\n\r\n  /** Compiles a source by looking it up by path first. */\r\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\r\n    if (source) this.compileSource(source);\r\n    else {\r\n      this.error(\r\n        DiagnosticCode.File_0_not_found,\r\n        reportNode.range, normalizedPathWithoutExtension\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Compiles a source. */\r\n  compileSource(source: Source): void {\r\n    if (source.is(CommonFlags.COMPILED)) return;\r\n    source.set(CommonFlags.COMPILED);\r\n\r\n    // compile top-level statements\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    var isEntry = source.isEntry;\r\n    var startFunction = this.startFunction;\r\n    var startFunctionBody = this.startFunctionBody;\r\n    var statements = source.statements;\r\n    for (let i = 0, k = statements.length; i < k; ++i) {\r\n      let statement = statements[i];\r\n      switch (statement.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<ClassDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: break;\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\r\n            !(<FunctionDeclaration>statement).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.IMPORT: {\r\n          this.compileSourceByPath(\r\n            (<ImportStatement>statement).normalizedPath,\r\n            (<ImportStatement>statement).path\r\n          );\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\r\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\r\n          if (variableInit) startFunctionBody.push(variableInit);\r\n          break;\r\n        }\r\n        case NodeKind.EXPORT: {\r\n          if ((<ExportStatement>statement).normalizedPath != null) {\r\n            this.compileSourceByPath(\r\n              <string>(<ExportStatement>statement).normalizedPath,\r\n              <StringLiteralExpression>(<ExportStatement>statement).path\r\n            );\r\n          }\r\n          if (noTreeShaking || isEntry) {\r\n            this.compileExportStatement(<ExportStatement>statement);\r\n          }\r\n          break;\r\n        }\r\n        default: { // otherwise a top-level statement that is part of the start function's body\r\n          let previousFunction = this.currentFunction;\r\n          this.currentFunction = startFunction;\r\n          startFunctionBody.push(this.compileStatement(statement));\r\n          this.currentFunction = previousFunction;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // globals\r\n\r\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\r\n    // look up the initialized program element\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.GLOBAL);\r\n    if (!this.compileGlobal(<Global>element)) return null; // reports\r\n    return <Global>element;\r\n  }\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED)) return true;\r\n    global.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var declaration = global.declaration;\r\n    var initExpr: ExpressionRef = 0;\r\n\r\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\r\n      if (declaration) {\r\n\r\n        // resolve now if annotated\r\n        if (declaration.type) {\r\n          let resolvedType = this.program.resolveType(declaration.type); // reports\r\n          if (!resolvedType) return false;\r\n          if (resolvedType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              declaration.type.range\r\n            );\r\n            return false;\r\n          }\r\n          global.type = resolvedType;\r\n\r\n        // infer from initializer if not annotated\r\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\r\n          initExpr = this.compileExpression( // reports\r\n            declaration.initializer,\r\n            Type.void,\r\n            ConversionKind.NONE,\r\n            WrapMode.WRAP\r\n          );\r\n          if (this.currentType == Type.void) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\r\n            );\r\n            return false;\r\n          }\r\n          global.type = this.currentType;\r\n\r\n        // must either be annotated or have an initializer\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            declaration.name.range.atEnd\r\n          );\r\n          return false;\r\n        }\r\n      } else {\r\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\r\n      }\r\n    }\r\n\r\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\r\n    if (global.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) return true;\r\n\r\n    var nativeType = global.type.toNativeType();\r\n    var isConstant = global.isAny(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n\r\n    // handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // constant global\r\n      if (isConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          global.parent\r\n            ? global.parent.simpleName\r\n            : \"env\",\r\n          global.simpleName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          assert(declaration).range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // the MVP does not yet support initializer expressions other than constant values (and\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // inlined constant can be compiled as-is\r\n    if (global.is(CommonFlags.INLINED)) {\r\n      initExpr = this.compileInlineConstant(global, global.type, true);\r\n\r\n    } else {\r\n\r\n      // evaluate initializer if present\r\n      if (declaration && declaration.initializer) {\r\n        if (!initExpr) {\r\n          initExpr = this.compileExpression(\r\n            declaration.initializer,\r\n            global.type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP\r\n          );\r\n        }\r\n\r\n        // check if the initializer is constant\r\n        if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n\r\n          // if a constant global, check if the initializer becomes constant after precompute\r\n          if (isConstant) {\r\n            initExpr = this.precomputeExpressionRef(initExpr);\r\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                declaration.range\r\n              );\r\n              initializeInStart = true;\r\n            }\r\n          } else {\r\n            initializeInStart = true;\r\n          }\r\n        }\r\n\r\n      // initialize to zero if there's no initializer\r\n      } else {\r\n        initExpr = global.type.toNativeZero(module);\r\n      }\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\r\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\r\n\r\n    } else { // compile as-is\r\n\r\n      if (isConstant) {\r\n        let exprType = getExpressionType(initExpr);\r\n        switch (exprType) {\r\n          case NativeType.I32: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\r\n            break;\r\n          }\r\n          case NativeType.I64: {\r\n            global.constantValueKind = ConstantValueKind.INTEGER;\r\n            global.constantIntegerValue = i64_new(\r\n              getConstValueI64Low(initExpr),\r\n              getConstValueI64High(initExpr)\r\n            );\r\n            break;\r\n          }\r\n          case NativeType.F32: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = getConstValueF32(initExpr);\r\n            break;\r\n          }\r\n          case NativeType.F64: {\r\n            global.constantValueKind = ConstantValueKind.FLOAT;\r\n            global.constantFloatValue = getConstValueF64(initExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return false;\r\n          }\r\n        }\r\n        global.set(CommonFlags.INLINED); // inline the value from now on\r\n        if (global.is(CommonFlags.MODULE_EXPORT)) {\r\n          module.addGlobal(internalName, nativeType, false, initExpr);\r\n          module.addGlobalExport(internalName, mangleExportName(global));\r\n        } else if (declaration && declaration.isTopLevel) { // might become re-exported\r\n          module.addGlobal(internalName, nativeType, false, initExpr);\r\n        }\r\n\r\n      } else /* mutable */ {\r\n        module.addGlobal(internalName, nativeType, !isConstant, initExpr);\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // enums\r\n\r\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.ENUM);\r\n    if (!this.compileEnum(<Enum>element)) return null;\r\n    return <Enum>element;\r\n  }\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueDeclaration = val.declaration;\r\n        val.set(CommonFlags.COMPILED);\r\n        if (val.is(CommonFlags.INLINED)) {\r\n          if (element.declaration.isTopLevelExport) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              false, // constant\r\n              module.createI32(val.constantValue)\r\n            );\r\n          }\r\n        } else {\r\n          let initExpr: ExpressionRef;\r\n          if (valueDeclaration.value) {\r\n            initExpr = this.compileExpression(\r\n              <Expression>valueDeclaration.value,\r\n              Type.i32,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE\r\n            );\r\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n              initExpr = this.precomputeExpressionRef(initExpr);\r\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n                if (element.is(CommonFlags.CONST)) {\r\n                  this.warning(\r\n                    DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                    valueDeclaration.range\r\n                  );\r\n                }\r\n                initInStart = true;\r\n              }\r\n            }\r\n          } else if (previousValue == null) {\r\n            initExpr = module.createI32(0);\r\n          } else if (previousValue.is(CommonFlags.INLINED)) {\r\n            initExpr = module.createI32(previousValue.constantValue + 1);\r\n          } else {\r\n            // in TypeScript this errors with TS1061, but actually we can do:\r\n            initExpr = module.createBinary(BinaryOp.AddI32,\r\n              module.createGetGlobal(previousValue.internalName, NativeType.I32),\r\n              module.createI32(1)\r\n            );\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.warning(\r\n                DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n                valueDeclaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n          if (initInStart) {\r\n            module.addGlobal(\r\n              val.internalName,\r\n              NativeType.I32,\r\n              true, // mutable\r\n              module.createI32(0)\r\n            );\r\n            this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\r\n          } else {\r\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n            if (getExpressionType(initExpr) == NativeType.I32) {\r\n              val.constantValue = getConstValueI32(initExpr);\r\n              val.set(CommonFlags.INLINED);\r\n            } else {\r\n              assert(false);\r\n              val.constantValue = 0;\r\n            }\r\n          }\r\n        }\r\n        previousValue = <EnumValue>val;\r\n\r\n        // export values if the enum is exported\r\n        if (element.is(CommonFlags.MODULE_EXPORT)) {\r\n          if (member.is(CommonFlags.INLINED) || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n            module.addGlobalExport(member.internalName, mangleExportName(member));\r\n          } else if (valueDeclaration) {\r\n            this.warning(\r\n              DiagnosticCode.Cannot_export_a_mutable_global,\r\n              valueDeclaration.range\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // functions\r\n\r\n  /** Compiles a top-level function given its declaration. */\r\n  compileFunctionDeclaration(\r\n    declaration: FunctionDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ): Function | null {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n    return this.compileFunctionUsingTypeArguments( // reports\r\n      <FunctionPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      null, // no outer scope (is top level)\r\n      (<FunctionPrototype>element).declaration.name\r\n    );\r\n  }\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null,\r\n    outerScope: Flow | null,\r\n    reportNode: Node\r\n  ): Function | null {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      reportNode\r\n    );\r\n    if (!instance) return null;\r\n    instance.outerScope = outerScope;\r\n    if (!this.compileFunction(instance)) return null; // reports\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  private ensureFunctionType(\r\n    parameterTypes: Type[] | null,\r\n    returnType: Type,\r\n    thisType: Type | null = null\r\n  ): FunctionTypeRef {\r\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    if (parameterTypes) {\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        paramTypes[index] = parameterTypes[i].toNativeType();\r\n      }\r\n    }\r\n    var resultType = returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\r\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!instance.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN));\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    // check that modifiers are matching\r\n    var declaration = instance.prototype.declaration;\r\n    var body = declaration.body;\r\n    if (body) {\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          declaration.name.range\r\n        );\r\n      }\r\n    }\r\n\r\n    var ref: FunctionRef;\r\n    var signature = instance.signature;\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n    if (body) {\r\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\r\n      let returnType = instance.signature.returnType;\r\n\r\n      // compile body\r\n      let previousFunction = this.currentFunction;\r\n      this.currentFunction = instance;\r\n      let flow = instance.flow;\r\n      let stmt: ExpressionRef;\r\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\r\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\r\n        assert(instance.is(CommonFlags.ARROW));\r\n        stmt = this.compileExpression(\r\n          (<ExpressionStatement>body).expression,\r\n          returnType,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        flow.set(FlowFlags.RETURNS);\r\n        if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n        flow.finalize();\r\n      } else {\r\n        assert(body.kind == NodeKind.BLOCK);\r\n        stmt = this.compileStatement(body);\r\n        flow.finalize();\r\n        if (isConstructor) {\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          assert(instance.is(CommonFlags.INSTANCE));\r\n\r\n          // implicitly return `this` if the constructor doesn't always return on its own\r\n          if (!flow.is(FlowFlags.RETURNS)) {\r\n\r\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\r\n            if (flow.is(FlowFlags.ALLOCATES)) {\r\n              stmt = module.createBlock(null, [\r\n                stmt,\r\n                module.createGetLocal(0, nativeSizeType)\r\n              ], nativeSizeType);\r\n\r\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\r\n            } else {\r\n              let parent = assert(instance.parent);\r\n              assert(parent.kind == ElementKind.CLASS);\r\n              stmt = module.createBlock(null, [\r\n                stmt,\r\n                module.createTeeLocal(0,\r\n                  this.makeConditionalAllocate(<Class>parent, declaration.name)\r\n                )\r\n              ], nativeSizeType);\r\n            }\r\n          }\r\n\r\n        // make sure all branches return\r\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\r\n          this.error(\r\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n            declaration.signature.returnType.range\r\n          );\r\n        }\r\n      }\r\n      this.currentFunction = previousFunction;\r\n\r\n      // create the function\r\n      ref = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        stmt\r\n      );\r\n\r\n    } else {\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n\r\n      // create the function import\r\n      let parent = instance.prototype.parent;\r\n      ref = module.addFunctionImport(\r\n        instance.internalName,\r\n        parent\r\n          ? parent.simpleName\r\n          : \"env\",\r\n        instance.simpleName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    // check module-level export\r\n    if (instance.is(CommonFlags.MODULE_EXPORT)) {\r\n      if (signature.requiredParameters < signature.parameterTypes.length) {\r\n        // export the trampoline if the function takes optional parameters\r\n        instance = this.ensureTrampoline(instance);\r\n        this.ensureArgcSet();\r\n      }\r\n      module.addFunctionExport(instance.internalName, mangleExportName(instance));\r\n    }\r\n\r\n    instance.finalize(module, ref);\r\n    return true;\r\n  }\r\n\r\n  // namespaces\r\n\r\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\r\n    var members = declaration.members;\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<ClassDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<InterfaceDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileEnumDeclaration(<EnumDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          if (\r\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\r\n            !(<FunctionDeclaration>member).isGeneric\r\n          ) {\r\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\r\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\r\n            if (variableInit) this.startFunctionBody.push(variableInit);\r\n          }\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n  }\r\n\r\n  compileNamespace(ns: Namespace): void {\r\n    if (!ns.members) return;\r\n\r\n    var noTreeShaking = this.options.noTreeShaking;\r\n    for (let element of ns.members.values()) {\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking ||\r\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            (\r\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\r\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n          ) {\r\n            this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null, // no contextual type arguments\r\n              null, // no outer scope\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          this.compileGlobal(<Global>element);\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // exports\r\n\r\n  compileExportStatement(statement: ExportStatement): void {\r\n    var module = this.module;\r\n    var exports = this.program.fileLevelExports;\r\n    var members = statement.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      let internalExportName = (\r\n        statement.range.source.internalPath +\r\n        PATH_DELIMITER +\r\n        member.externalName.text\r\n      );\r\n      let element = exports.get(internalExportName);\r\n      if (!element) continue; // reported in Program#initialize\r\n      switch (element.kind) {\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\r\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.ENUM: {\r\n          this.compileEnum(<Enum>element);\r\n          break;\r\n        }\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          if (\r\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\r\n            statement.range.source.isEntry\r\n          ) {\r\n            let functionInstance = this.compileFunctionUsingTypeArguments(\r\n              <FunctionPrototype>element,\r\n              [],\r\n              null, // no contextual type arguments\r\n              null, // no outer scope\r\n              (<FunctionPrototype>element).declaration.name\r\n            );\r\n            if (functionInstance) {\r\n              let functionDeclaration = functionInstance.prototype.declaration;\r\n              if (functionDeclaration && functionDeclaration.needsExplicitExport(member)) {\r\n                module.addFunctionExport(functionInstance.internalName, member.externalName.text);\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.GLOBAL: {\r\n          if (this.compileGlobal(<Global>element) && statement.range.source.isEntry) {\r\n            let globalDeclaration = (<Global>element).declaration;\r\n            if (globalDeclaration && globalDeclaration.needsExplicitExport(member)) {\r\n              if ((<Global>element).is(CommonFlags.INLINED)) {\r\n                module.addGlobalExport(element.internalName, member.externalName.text);\r\n              } else {\r\n                this.warning(\r\n                  DiagnosticCode.Cannot_export_a_mutable_global,\r\n                  member.range\r\n                );\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          this.compileNamespace(<Namespace>element);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // classes\r\n\r\n  compileClassDeclaration(\r\n    declaration: ClassDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\r\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n    this.compileClassUsingTypeArguments(\r\n      <ClassPrototype>element,\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n  }\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = prototype.resolveUsingTypeArguments( // reports\r\n      typeArguments,\r\n      contextualTypeArguments,\r\n      alternativeReportNode\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    var staticMembers = instance.prototype.members;\r\n    if (staticMembers) {\r\n      for (let element of staticMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.GLOBAL: {\r\n            this.compileGlobal(<Global>element);\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [], null, null,\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [], null, null,\r\n                getter.declaration.name\r\n              );\r\n            }\r\n            let setter = (<Property>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [], null, null,\r\n                setter.declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    var ctorInstance = instance.constructorInstance;\r\n    if (ctorInstance) this.compileFunction(ctorInstance);\r\n    var instanceMembers = instance.members;\r\n    if (instanceMembers) {\r\n      for (let element of instanceMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                instance.contextualTypeArguments,\r\n                null, // no outer scope\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FIELD: {\r\n            element.set(CommonFlags.COMPILED);\r\n            if (!instance.is(CommonFlags.MODULE_EXPORT) || element.is(CommonFlags.PRIVATE)) break;\r\n            let module = this.module;\r\n            let name = (<Field>element).simpleName;\r\n            let type = (<Field>element).type;\r\n            let nativeType = type.toNativeType();\r\n            let offset = (<Field>element).memoryOffset;\r\n            let usizeType = this.options.usizeType;\r\n            let nativeSizeType = this.options.nativeSizeType;\r\n\r\n            // export an implicit getter: get:fieldName(this: usize) -> fieldType\r\n            let getterName = mangleExportName(element, GETTER_PREFIX + name);\r\n            module.addFunction(\r\n              getterName,\r\n              this.ensureFunctionType(null, type, usizeType),\r\n              null,\r\n              module.createLoad(\r\n                type.byteSize,\r\n                type.is(TypeFlags.SIGNED),\r\n                module.createGetLocal(0, nativeSizeType),\r\n                nativeType,\r\n                offset\r\n              )\r\n            );\r\n            module.addFunctionExport(getterName, getterName);\r\n\r\n            // export an implicit setter: set:fieldName(this: usize, value: fieldType) -> void\r\n            if (element.is(CommonFlags.READONLY)) break;\r\n            let setterName = mangleExportName(element, SETTER_PREFIX + name);\r\n            module.addFunction(\r\n              setterName,\r\n              this.ensureFunctionType([ type ], Type.void, usizeType),\r\n              null,\r\n              module.createStore(\r\n                type.byteSize,\r\n                module.createGetLocal(0, nativeSizeType),\r\n                module.createGetLocal(1, nativeType),\r\n                nativeType,\r\n                offset\r\n              )\r\n            );\r\n            module.addFunctionExport(setterName, setterName);\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [], instance.contextualTypeArguments, null,\r\n                getter.declaration.name\r\n              );\r\n            }\r\n            let setter = (<Property>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [], instance.contextualTypeArguments, null,\r\n                setter.declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // memory\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  // function table\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // statements\r\n\r\n  compileStatement(statement: Statement): ExpressionRef {\r\n    var module = this.module;\r\n    var stmt: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        stmt = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        stmt = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        stmt = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        stmt = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!stmt) stmt = module.createNop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // type declarations must be top-level because function bodies are evaluated when\r\n        // reachaable only.\r\n        if (this.currentFunction == this.startFunction) {\r\n          return module.createNop();\r\n        }\r\n        // otherwise fall-through\r\n      }\r\n      default: {\r\n        assert(false);\r\n        stmt = module.createUnreachable();\r\n      }\r\n    }\r\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\r\n    return stmt;\r\n  }\r\n\r\n  compileStatements(statements: Statement[]): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    var stmts = new Array<ExpressionRef>(numStatements);\r\n    var count = 0;\r\n    var flow = this.currentFunction.flow;\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      let stmt = this.compileStatement(statements[i]);\r\n      if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n        stmts[count++] = stmt;\r\n        if (flow.isAny(FlowFlags.TERMINATED)) break;\r\n      }\r\n    }\r\n    stmts.length = count;\r\n    return stmts;\r\n  }\r\n\r\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\r\n    var statements = statement.statements;\r\n\r\n    // Not actually a branch, but can contain its own scoped variables.\r\n    var blockFlow = this.currentFunction.flow.enterBranchOrScope();\r\n    this.currentFunction.flow = blockFlow;\r\n\r\n    var stmts = this.compileStatements(statements);\r\n    var stmt = stmts.length == 0\r\n      ? this.module.createNop()\r\n      : stmts.length == 1\r\n        ? stmts[0]\r\n        : this.module.createBlock(null, stmts, NativeType.None);\r\n\r\n    // Switch back to the parent flow\r\n    var parentFlow = blockFlow.leaveBranchOrScope();\r\n    this.currentFunction.flow = parentFlow;\r\n    parentFlow.inherit(blockFlow);\r\n    return stmt;\r\n  }\r\n\r\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var flow = this.currentFunction.flow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.BREAKS);\r\n    return module.createBreak(breakLabel);\r\n  }\r\n\r\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFunction.flow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES);\r\n    return module.createBreak(continueLabel);\r\n  }\r\n\r\n  compileDoStatement(statement: DoStatement): ExpressionRef {\r\n    var currentFunction = this.currentFunction;\r\n    var module = this.module;\r\n\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n    // TODO: check if condition is always false and if so, omit it?\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.leaveBranchOrScope();\r\n    currentFunction.leaveBreakContext();\r\n\r\n    return module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        flow.isAny(FlowFlags.BREAKS | FlowFlags.CONTINUES | FlowFlags.RETURNS)\r\n          ? body // skip trailing continue if unnecessary\r\n          : module.createBlock(null, [\r\n              body,\r\n              module.createBreak(continueLabel, condExpr)\r\n            ], NativeType.None)\r\n      )\r\n    ], NativeType.None);\r\n  }\r\n\r\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\r\n    return this.module.createNop();\r\n  }\r\n\r\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\r\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\r\n    if (this.currentType != Type.void) {\r\n      expr = this.module.createDrop(expr);\r\n      this.currentType = Type.void;\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileForStatement(statement: ForStatement): ExpressionRef {\r\n    // A for statement initiates a new branch with its own scoped variables\r\n    // possibly declared in its initializer, and break context.\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = flow.breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n    var repeatLabel = \"repeat|\" + label;\r\n\r\n    // Compile in correct order\r\n    var module = this.module;\r\n    var initExpr = statement.initializer\r\n      ? this.compileStatement(<Statement>statement.initializer)\r\n      : 0;\r\n    var condExpr: ExpressionRef = 0;\r\n    var alwaysTrue = true;\r\n    if (statement.condition) {\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n      // check if the condition is always true\r\n      let condPre = this.precomputeExpressionRef(condExpr);\r\n      if (getExpressionId(condPre) == ExpressionId.Const) {\r\n        assert(getExpressionType(condPre) == NativeType.I32);\r\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\r\n        // TODO: could skip compilation if the condition is always false here, but beware that the\r\n        // initializer could still declare new 'var's that are used later on.\r\n      }\r\n      // recompile to original\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n    } else {\r\n      // omitted condition is always true\r\n      condExpr = module.createI32(1);\r\n      alwaysTrue = true;\r\n    }\r\n    var incrExpr = statement.incrementor\r\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n      : 0;\r\n    var bodyExpr = this.compileStatement(statement.statement);\r\n\r\n    // Switch back to the parent flow\r\n    var parentFlow = flow.leaveBranchOrScope();\r\n    if (alwaysTrue) parentFlow.inherit(flow);\r\n    currentFunction.flow = parentFlow;\r\n    currentFunction.leaveBreakContext();\r\n\r\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\r\n    if (initExpr) breakBlock.push(initExpr);\r\n\r\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\r\n    if (parentFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) {\r\n      repeatBlock.push(\r\n        module.createBlock(continueLabel, [ // inner 'continue' block\r\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\r\n          bodyExpr\r\n        ], NativeType.None)\r\n      );\r\n    } else { // can omit the 'continue' block\r\n      repeatBlock.push(\r\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\r\n      );\r\n      repeatBlock.push(bodyExpr);\r\n    }\r\n    if (incrExpr) repeatBlock.push(incrExpr);\r\n    repeatBlock.push(\r\n      module.createBreak(repeatLabel)\r\n    );\r\n\r\n    breakBlock.push(\r\n      module.createLoop(repeatLabel,\r\n        module.createBlock(null, repeatBlock, NativeType.None)\r\n      )\r\n    );\r\n\r\n    var expr = module.createBlock(breakLabel, breakBlock, NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, append a hint for Binaryen\r\n    if (flow.isAny(FlowFlags.RETURNS | FlowFlags.THROWS)) {\r\n      expr = module.createBlock(null, [\r\n        expr,\r\n        module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileIfStatement(statement: IfStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary branches if the condition is constant\r\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        return getConstValueI32(condExprPrecomp)\r\n          ? this.compileStatement(ifTrue)\r\n          : ifFalse\r\n            ? this.compileStatement(ifFalse)\r\n            : module.createNop();\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var ifTrueFlow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = ifTrueFlow;\r\n    var ifTrueExpr = this.compileStatement(ifTrue);\r\n    currentFunction.flow = ifTrueFlow.leaveBranchOrScope();\r\n\r\n    var ifFalseFlow: Flow | null;\r\n    var ifFalseExpr: ExpressionRef = 0;\r\n    if (ifFalse) {\r\n      ifFalseFlow = currentFunction.flow.enterBranchOrScope();\r\n      currentFunction.flow = ifFalseFlow;\r\n      ifFalseExpr = this.compileStatement(ifFalse);\r\n      let parentFlow = ifFalseFlow.leaveBranchOrScope();\r\n      currentFunction.flow = parentFlow;\r\n      parentFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\r\n    }\r\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\r\n  }\r\n\r\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var expr: ExpressionRef = 0;\r\n    var flow = currentFunction.flow;\r\n\r\n    // Remember that this flow returns\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    if (statement.value) {\r\n      let returnType = flow.returnType;\r\n      expr = this.compileExpression(\r\n        statement.value,\r\n        returnType,\r\n        ConversionKind.IMPLICIT,\r\n        currentFunction.is(CommonFlags.MODULE_EXPORT)\r\n          ? WrapMode.WRAP\r\n          : WrapMode.NONE\r\n      );\r\n\r\n      // Remember whether returning a properly wrapped value\r\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n    }\r\n\r\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\r\n    return flow.is(FlowFlags.INLINE_CONTEXT)\r\n      ? module.createBreak(assert(flow.returnLabel), 0, expr)\r\n      : module.createReturn(expr);\r\n  }\r\n\r\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n    if (!numCases) {\r\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    }\r\n\r\n    // Everything within a switch uses the same break context\r\n    var context = currentFunction.enterBreakContext();\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = currentFunction.getTempLocal(Type.u32, false);\r\n    var tempLocalIndex = tempLocal.index;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.createSetLocal( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.createBinary(BinaryOp.EqI32,\r\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\r\n    var alwaysReturns = true;\r\n    var alwaysReturnsWrapped = true;\r\n    var alwaysThrows = true;\r\n    var alwaysAllocates = true;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n\r\n      // Each switch case initiates a new branch\r\n      let flow = currentFunction.flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      let breakLabel = \"break|\" + context;\r\n      flow.breakLabel = breakLabel;\r\n\r\n      let isLast = i == numCases - 1;\r\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\r\n      stmts[0] = currentBlock;\r\n      let count = 1;\r\n      let terminated = false;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        let stmt = this.compileStatement(statements[j]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          stmts[count++] = stmt;\r\n          if (flow.isAny(FlowFlags.TERMINATED)) {\r\n            terminated = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      stmts.length = count;\r\n      if (terminated || isLast) {\r\n        if (!flow.is(FlowFlags.RETURNS)) alwaysReturns = false;\r\n        if (!flow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\r\n        if (!flow.is(FlowFlags.THROWS)) alwaysThrows = false;\r\n        if (!flow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\r\n      }\r\n\r\n      // Switch back to the parent flow\r\n      currentFunction.flow = flow.leaveBranchOrScope(false);\r\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\r\n    }\r\n    currentFunction.leaveBreakContext();\r\n\r\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\r\n    if (defaultIndex >= 0) {\r\n      let flow = currentFunction.flow;\r\n      if (alwaysReturns) flow.set(FlowFlags.RETURNS);\r\n      if (alwaysReturnsWrapped) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n      if (alwaysThrows) flow.set(FlowFlags.THROWS);\r\n      if (alwaysAllocates) flow.set(FlowFlags.ALLOCATES);\r\n    }\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\r\n    var flow = this.currentFunction.flow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS);\r\n\r\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    return compileBuiltinAbort(this, null, statement);\r\n  }\r\n\r\n  compileTryStatement(statement: TryStatement): ExpressionRef {\r\n    // TODO\r\n    // can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  /**\r\n   * Compiles a variable statement. Returns `0` if an initializer is not\r\n   * necessary.\r\n   */\r\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\r\n    var program = this.program;\r\n    var currentFunction = this.currentFunction;\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n\r\n    // top-level variables and constants become globals\r\n    if (isKnownGlobal || (\r\n      currentFunction == this.startFunction &&\r\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\r\n    )) {\r\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\r\n      // though such variables could also become start function locals if, and only if, not used\r\n      // within any function declared in the same source, which is unknown at this point. the only\r\n      // efficient way to deal with this would be to keep track of all occasions it is used and\r\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\r\n      for (let i = 0; i < numDeclarations; ++i) {\r\n        this.compileGlobalDeclaration(declarations[i]);\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    // other variables become locals\r\n    var initializers = new Array<ExpressionRef>();\r\n    var flow = this.currentFunction.flow;\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let initExpr: ExpressionRef = 0;\r\n      if (declaration.type) {\r\n        type = program.resolveType( // reports\r\n          declaration.type,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          initExpr = this.compileExpression( // reports\r\n            declaration.initializer,\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\r\n        initExpr = this.compileExpression( // reports\r\n          declaration.initializer,\r\n          Type.void,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n      let isInlined = false;\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        if (initExpr) {\r\n          initExpr = this.precomputeExpressionRef(initExpr);\r\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\r\n            let local = new Local(program, name, -1, type);\r\n            switch (getExpressionType(initExpr)) {\r\n              case NativeType.I32: {\r\n                local = local.withConstantIntegerValue(getConstValueI32(initExpr), 0);\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local = local.withConstantIntegerValue(\r\n                  getConstValueI64Low(initExpr),\r\n                  getConstValueI64High(initExpr)\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                return this.module.createUnreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = currentFunction.flow.scopedLocals;\r\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return this.module.createUnreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isInlined = true;\r\n          } else {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n      if (!isInlined) {\r\n        let local: Local;\r\n        if (\r\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\r\n          flow.is(FlowFlags.INLINE_CONTEXT)\r\n        ) { // here: not top-level\r\n          local = flow.addScopedLocal(type, name, false, declaration); // reports\r\n        } else {\r\n          local = currentFunction.addLocal(type, name, declaration); // reports\r\n        }\r\n        if (initExpr) {\r\n          initializers.push(this.compileAssignmentWithValue(declaration.name, initExpr));\r\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\r\n          }\r\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped(local.index, true); // zero\r\n        }\r\n      }\r\n    }\r\n    return initializers.length   // we can unwrap these here because the\r\n      ? initializers.length == 1 // source didn't tell us exactly what to do\r\n        ? initializers[0]\r\n        : this.module.createBlock(null, initializers, NativeType.None)\r\n      : 0;\r\n  }\r\n\r\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n  }\r\n\r\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // The condition does not yet initialize a branch\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary loops if the condition is constant\r\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    // Statements initiate a new branch with its own break context\r\n    var currentFunction = this.currentFunction;\r\n    var label = currentFunction.enterBreakContext();\r\n    var flow = currentFunction.flow.enterBranchOrScope();\r\n    currentFunction.flow = flow;\r\n    var breakLabel = \"break|\" + label;\r\n    flow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    flow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var alwaysReturns = false; // CONDITION_IS_ALWAYS_TRUE && flow.is(FlowFlags.RETURNS);\r\n    // TODO: evaluate if condition is always true\r\n\r\n    // Switch back to the parent flow\r\n    currentFunction.flow = flow.leaveBranchOrScope();\r\n    currentFunction.leaveBreakContext();\r\n\r\n    var expr = module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createIf(condExpr,\r\n          flow.isAny(FlowFlags.CONTINUES | FlowFlags.BREAKS | FlowFlags.RETURNS)\r\n            ? body // skip trailing continue if unnecessary\r\n            : module.createBlock(null, [\r\n                body,\r\n                module.createBreak(continueLabel)\r\n              ], NativeType.None)\r\n        )\r\n      )\r\n    ], NativeType.None);\r\n\r\n    // If the loop is guaranteed to run and return, propagate that and append a hint\r\n    if (alwaysReturns) {\r\n      expr = module.createBlock(null, [\r\n        expr,\r\n        module.createUnreachable()\r\n      ]);\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  // expressions\r\n\r\n  /**\r\n   * Compiles the value of an inlined constant element.\r\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\r\n   *  is precomputed according to context.\r\n   */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    retainType: bool\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !retainType &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.createI32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.createI64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.createI64(0);\r\n      }\r\n      case TypeKind.F64: {\r\n        if (!(element.is(CommonFlags.BUILTIN) && contextualType == Type.f32)) {\r\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\r\n        }\r\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\r\n        this.currentType = Type.f32;\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n\r\n    var expr: ExpressionRef;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.SUPER:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(\r\n          <IdentifierExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    var currentType = this.currentType;\r\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\r\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\r\n      this.currentType = contextualType;\r\n    } else if (wrapMode == WrapMode.WRAP) {\r\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\r\n    }\r\n\r\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n    return expr;\r\n  }\r\n\r\n  compileExpressionRetainType(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.compileExpression(\r\n      expression,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      wrapMode\r\n    );\r\n  }\r\n\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.precomputeExpressionRef(\r\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\r\n    );\r\n  }\r\n\r\n  precomputeExpressionRef(expr: ExpressionRef): ExpressionRef {\r\n    var module = this.module;\r\n    var type = this.currentType;\r\n    var nativeType = type.toNativeType();\r\n    var funcRef = module.addTemporaryFunction(nativeType, null, expr);\r\n    module.runPasses([ \"precompute\" ], funcRef);\r\n    var ret = getFunctionBody(funcRef);\r\n    module.removeTemporaryFunction();\r\n    return ret;\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    fromType: Type,\r\n    toType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    assert(conversionKind != ConversionKind.NONE);\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) {\r\n      return module.createDrop(expr);\r\n    }\r\n\r\n    if (conversionKind == ConversionKind.IMPLICIT && !fromType.isAssignableTo(toType)) {\r\n      this.error(\r\n        DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      ); // recoverable\r\n    }\r\n\r\n    // TODO: make this a proper switch?\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.createDrop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      // i64 to ...\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32 or smaller\r\n        if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\r\n        }\r\n\r\n      // i32 or smaller to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.createUnary(\r\n          toType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\r\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\r\n        );\r\n        wrapMode = WrapMode.NONE;\r\n\r\n      // i32 to i32\r\n      } else {\r\n        // small i32 to ...\r\n        if (fromType.is(TypeFlags.SHORT)) {\r\n          // small i32 to larger i32\r\n          if (fromType.size < toType.size) {\r\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\r\n            wrapMode = WrapMode.NONE;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return wrapMode == WrapMode.WRAP\r\n      ? this.ensureSmallIntegerWrap(expr, toType)\r\n      : expr;\r\n  }\r\n\r\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\r\n    var toType = this.program.resolveType( // reports\r\n      expression.toType,\r\n      this.currentFunction.flow.contextualTypeArguments\r\n    );\r\n    if (!toType) return this.module.createUnreachable();\r\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n  }\r\n\r\n  private f32ModInstance: Function | null = null;\r\n  private f64ModInstance: Function | null = null;\r\n  private f32PowInstance: Function | null = null;\r\n  private f64PowInstance: Function | null = null;\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n\r\n    var operator = expression.operator;\r\n    switch (operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.LT);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.GT);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.LE);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.GE);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        if (operator == Token.EQUALS_EQUALS) { // check operator overload\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, right, expression);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        if (operator == Token.EXCLAMATION_EQUALS) { // check operator overload\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, right, expression);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.ADD);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // addition might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.SUB);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // subtraction might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.MUL);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK_ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.POW);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        let instance: Function | null;\r\n\r\n        // Mathf.pow if lhs is f32 (result is f32)\r\n        if (this.currentType.kind == TypeKind.F32) {\r\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f32PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f32PowInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n          }\r\n\r\n        // Math.pow otherwise (result is f64)\r\n        // TODO: should the result be converted back?\r\n        } else {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            this.currentType,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE,\r\n            left\r\n          );\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f64PowInstance)) {\r\n            let namespace = this.program.elementsLookup.get(\"Math\");\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f64PowInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n          }\r\n        }\r\n        if (!(instance && this.compileFunction(instance))) {\r\n          expr = module.createUnreachable();\r\n        } else {\r\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.DIV);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\r\n          case TypeKind.I16: // ^\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.REM);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let instance = this.f32ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f32ModInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let instance = this.f64ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.elementsLookup.get(\"Math\");\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f64ModInstance = instance = (<FunctionPrototype>prototype).resolve();\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.WRAP); // !\r\n        leftType = this.currentType; // ^ must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: { // TODO: check operator overload\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.WRAP);\r\n        leftType = this.currentType; // ^ clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n          }\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: operator overload?\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overloadd\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        let classReference = leftType.classReference;\r\n        if (classReference) {\r\n          let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\r\n          if (overload) {\r\n            expr = this.compileBinaryOverload(overload, left, right, expression);\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n          this.makeIsTrueish(leftExpr, this.currentType);\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            rightExpr,\r\n            expr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFunction.flow;\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            rightExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            )\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\r\n          expr = this.module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            expr,\r\n            rightExpr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFunction.flow;\r\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            ),\r\n            rightExpr\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  compileUnaryOverload(\r\n    operatorInstance: Function,\r\n    value: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n      // checks and recompiles the argument according to its actual annotated type\r\n      var argumentExpressions: Expression[];\r\n      var thisArg: ExpressionRef = 0;\r\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n        let parent = assert(operatorInstance.parent);\r\n        assert(parent.kind == ElementKind.CLASS);\r\n        thisArg = this.compileExpression(value, (<Class>parent).type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        argumentExpressions = [];\r\n      } else {\r\n        argumentExpressions = [ value ];\r\n      }\r\n      return this.compileCallDirect(\r\n        operatorInstance,\r\n        argumentExpressions,\r\n        reportNode,\r\n        thisArg,\r\n        operatorInstance.hasDecorator(DecoratorFlags.INLINE)\r\n      );\r\n  }\r\n\r\n  compileBinaryOverload(\r\n    operatorInstance: Function,\r\n    left: Expression,\r\n    right: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    // checks and recompiles the arguments according to their actual annotated types\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      let parent = assert(operatorInstance.parent);\r\n      assert(parent.kind == ElementKind.CLASS);\r\n      thisArg = this.compileExpression(left, (<Class>parent).type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      argumentExpressions = [ right ];\r\n    } else {\r\n      argumentExpressions = [ left, right ];\r\n    }\r\n    var ret = this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg,\r\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\r\n    );\r\n    return ret;\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var program = this.program;\r\n    var currentFunction = this.currentFunction;\r\n    var target = program.resolveExpression(expression, currentFunction); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var elementType: Type;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\r\n        // fall-through\r\n      }\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        elementType = (<VariableLikeElement>target).type;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prototype = (<Property>target).setterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(); // reports\r\n          if (!instance) return this.module.createUnreachable();\r\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n          elementType = instance.signature.parameterTypes[0];\r\n          break;\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n          expression.range, (<Property>target).internalName\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (program.resolvedElementExpression) { // indexed access\r\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n            if (!indexedGet) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            }\r\n            return this.module.createUnreachable();\r\n          }\r\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\r\n          elementType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    var valueExpr = this.compileExpression(valueExpression, elementType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    return this.compileAssignmentWithValue(\r\n      expression,\r\n      valueExpr,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileAssignmentWithValue(\r\n    expression: Expression,\r\n    valueWithCorrectType: ExpressionRef,\r\n    tee: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var target = this.program.resolveExpression(expression, this.currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let type = (<Local>target).type;\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let flow = this.currentFunction.flow;\r\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\r\n        }\r\n        return tee\r\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\r\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\r\n        let type = (<Global>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range,\r\n            target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\r\n        if (tee) {\r\n          let nativeType = type.toNativeType();\r\n          let internalName = target.internalName;\r\n          return module.createBlock(null, [ // emulated teeGlobal\r\n            module.createSetGlobal(internalName, valueWithCorrectType),\r\n            module.createGetGlobal(internalName, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        const declaration = (<Field>target).declaration;\r\n        if (\r\n          (<Field>target).is(CommonFlags.READONLY) &&\r\n          !(\r\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\r\n            declaration == null ||\r\n            declaration.initializer != null\r\n          )\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Field>target).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let thisExpression = assert(this.program.resolvedThisExpression);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        let type = (<Field>target).type;\r\n        this.currentType = tee ? type : Type.void;\r\n        let nativeType = type.toNativeType();\r\n        if (type.kind == TypeKind.BOOL) {\r\n          // make sure bools are wrapped (usually are) when storing as 8 bits\r\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\r\n        }\r\n        if (tee) {\r\n          let currentFunction = this.currentFunction;\r\n          let flow = currentFunction.flow;\r\n          let tempLocal = currentFunction.getAndFreeTempLocal(\r\n            type,\r\n            !flow.canOverflow(valueWithCorrectType, type)\r\n          );\r\n          let tempLocalIndex = tempLocal.index;\r\n          // TODO: simplify if valueWithCorrectType has no side effects\r\n          return module.createBlock(null, [\r\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\r\n            module.createStore(\r\n              type.byteSize,\r\n              thisExpr,\r\n              module.createGetLocal(tempLocalIndex, nativeType),\r\n              nativeType,\r\n              (<Field>target).memoryOffset\r\n            ),\r\n            module.createGetLocal(tempLocalIndex, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createStore(\r\n            type.byteSize,\r\n            thisExpr,\r\n            valueWithCorrectType,\r\n            nativeType,\r\n            (<Field>target).memoryOffset\r\n          );\r\n        }\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let setterPrototype = (<Property>target).setterPrototype;\r\n        if (setterPrototype) {\r\n          let setterInstance = setterPrototype.resolve(); // reports\r\n          if (!setterInstance) return module.createUnreachable();\r\n\r\n          // call just the setter if the return value isn't of interest\r\n          if (!tee) {\r\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n              let thisExpression = assert(this.program.resolvedThisExpression);\r\n              let thisExpr = this.compileExpressionRetainType(\r\n                thisExpression,\r\n                this.options.usizeType,\r\n                WrapMode.NONE\r\n              );\r\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\r\n            } else {\r\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\r\n            }\r\n          }\r\n\r\n          // otherwise call the setter first, then the getter\r\n          let getterPrototype = (<Property>target).getterPrototype;\r\n          assert(getterPrototype != null); // must have one if there is a setter\r\n          let getterInstance = (<FunctionPrototype>getterPrototype).resolve(); // reports\r\n          if (!getterInstance) return module.createUnreachable();\r\n          let returnType = getterInstance.signature.returnType;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\r\n            let thisExpression = assert(this.program.resolvedThisExpression);\r\n            let thisExpr = this.compileExpressionRetainType(\r\n              thisExpression,\r\n              this.options.usizeType,\r\n              WrapMode.NONE\r\n            );\r\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType, false);\r\n            let tempLocalIndex = tempLocal.index;\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ // set and remember the target\r\n                module.createTeeLocal(tempLocalIndex, thisExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(getterInstance, [ // get from remembered target\r\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\r\n              ])\r\n            ], nativeReturnType);\r\n          } else {\r\n            // note that this must be performed here because `resolved` is shared\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\r\n              this.makeCallDirect(getterInstance)\r\n            ], nativeReturnType);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.program.resolvedElementExpression;\r\n        if (elementExpression) {\r\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              expression.range, target.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              expression.range, target.internalName\r\n            );\r\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\r\n            return module.createUnreachable();\r\n          }\r\n          let targetType = (<Class>target).type;\r\n          let thisExpression = assert(this.program.resolvedThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          let elementExpr = this.compileExpression(\r\n            elementExpression,\r\n            Type.i32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          if (tee) {\r\n            let currentFunction = this.currentFunction;\r\n            let tempLocalTarget = currentFunction.getTempLocal(targetType, false);\r\n            let tempLocalElement = currentFunction.getAndFreeTempLocal(this.currentType, false);\r\n            let returnType = indexedGet.signature.returnType;\r\n            this.currentFunction.freeTempLocal(tempLocalTarget);\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(indexedSet, [\r\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\r\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(indexedGet, [\r\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n              ])\r\n            ], returnType.toNativeType());\r\n          } else {\r\n            return this.makeCallDirect(indexedSet, [\r\n              thisExpr,\r\n              elementExpr,\r\n              valueWithCorrectType\r\n            ]);\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var target = this.program.resolveExpression(expression.expression, currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (target.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n        let typeArguments = expression.typeArguments;\r\n\r\n        // builtins handle present respectively omitted type arguments on their own\r\n        if (prototype.is(CommonFlags.AMBIENT | CommonFlags.BUILTIN)) {\r\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\r\n        }\r\n\r\n        let instance: Function | null = null;\r\n\r\n        // resolve generic call if type arguments have been provided\r\n        if (typeArguments) {\r\n          if (!prototype.is(CommonFlags.GENERIC)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              expression.expression.range, prototype.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          instance = prototype.resolveUsingTypeArguments( // reports\r\n            typeArguments,\r\n            this.currentFunction.flow.contextualTypeArguments,\r\n            expression\r\n          );\r\n\r\n        // infer generic call if type arguments have been omitted\r\n        } else if (prototype.is(CommonFlags.GENERIC)) {\r\n          let inferredTypes = new Map<string,Type | null>();\r\n          let typeParameters = assert(prototype.declaration.typeParameters);\r\n          let numTypeParameters = typeParameters.length;\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            inferredTypes.set(typeParameters[i].name.text, null);\r\n          }\r\n          // let numInferred = 0;\r\n          let parameterTypes = prototype.declaration.signature.parameters;\r\n          let numParameterTypes = parameterTypes.length;\r\n          let argumentExpressions = expression.arguments;\r\n          let numArguments = argumentExpressions.length;\r\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\r\n          for (let i = 0; i < numParameterTypes; ++i) {\r\n            let typeNode = parameterTypes[i].type;\r\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\r\n            let argumentExpression = i < numArguments\r\n              ? argumentExpressions[i]\r\n              : prototype.declaration.signature.parameters[i].initializer;\r\n            if (!argumentExpression) { // missing initializer -> too few arguments\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            if (name !== null && inferredTypes.has(name)) {\r\n              let inferredType = inferredTypes.get(name);\r\n              if (inferredType) {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\r\n                let commonType: Type | null;\r\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\r\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\r\n                    this.error(\r\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\r\n                    );\r\n                    return module.createUnreachable();\r\n                  }\r\n                }\r\n                inferredType = commonType;\r\n              } else {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\r\n                inferredType = this.currentType;\r\n                // ++numInferred;\r\n              }\r\n              inferredTypes.set(name, inferredType);\r\n            } else {\r\n              let concreteType = this.program.resolveType(\r\n                parameterTypes[i].type,\r\n                this.currentFunction.flow.contextualTypeArguments,\r\n                true\r\n              );\r\n              if (!concreteType) return module.createUnreachable();\r\n              argumentExprs[i] = this.compileExpression(\r\n                argumentExpression,\r\n                concreteType,\r\n                ConversionKind.IMPLICIT,\r\n                WrapMode.NONE\r\n              );\r\n            }\r\n          }\r\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\r\n            resolvedTypeArguments[i] = inferredType;\r\n          }\r\n          instance = prototype.resolve(\r\n            resolvedTypeArguments,\r\n            this.currentFunction.flow.contextualTypeArguments\r\n          );\r\n          if (!instance) return this.module.createUnreachable();\r\n          return this.makeCallDirect(instance, argumentExprs);\r\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\r\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\r\n          // so inlining can be performed in `makeCallDirect` instead?\r\n\r\n        // otherwise resolve the non-generic call as usual\r\n        } else {\r\n          instance = prototype.resolve(\r\n            null,\r\n            this.currentFunction.flow.contextualTypeArguments\r\n          );\r\n        }\r\n        if (!instance) return this.module.createUnreachable();\r\n\r\n        // compile 'this' expression if an instance method\r\n        let thisExpr: ExpressionRef = 0;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          thisExpr = this.compileExpressionRetainType(\r\n            assert(this.program.resolvedThisExpression),\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n\r\n        return this.compileCallDirect(\r\n          instance,\r\n          expression.arguments,\r\n          expression,\r\n          thisExpr,\r\n          instance.hasDecorator(DecoratorFlags.INLINE)\r\n        );\r\n      }\r\n\r\n      // indirect call: index argument with signature (non-generic, can't be inlined)\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>target).type.signatureReference) {\r\n          indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>target).type.signatureReference) {\r\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>target).type;\r\n        if (signature = type.signatureReference) {\r\n          let thisExpression = assert(this.program.resolvedThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          indexArg = module.createLoad(\r\n            4,\r\n            false,\r\n            thisExpr,\r\n            NativeType.I32,\r\n            (<Field>target).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Field>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>target).signature;\r\n        indexArg = this.compileExpression(\r\n          expression.expression,\r\n          (<FunctionTarget>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: // TODO\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression\r\n    );\r\n  }\r\n\r\n  private compileCallExpressionBuiltin(\r\n    prototype: FunctionPrototype,\r\n    expression: CallExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var expr = compileBuiltinCall( // reports\r\n      this,\r\n      prototype,\r\n      prototype.resolveBuiltinTypeArguments(\r\n        expression.typeArguments,\r\n        this.currentFunction.flow.contextualTypeArguments\r\n      ),\r\n      expression.arguments,\r\n      contextualType,\r\n      expression\r\n    );\r\n    if (!expr) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    inline: bool = false\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    // Inline if explicitly requested\r\n    if (inline) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      return this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\r\n    }\r\n\r\n    // Otherwise compile to just a call\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallDirect(instance, operands);\r\n  }\r\n\r\n  // Depends on being pre-checked in compileCallDirect\r\n  private compileCallInlineUnchecked(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    var currentFunction = this.currentFunction;\r\n    var module = this.module;\r\n    var declaration = instance.prototype.declaration;\r\n\r\n    // Create an empty child flow with its own scope and mark it for inlining\r\n    var previousFlow = currentFunction.flow;\r\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\r\n    var returnType = instance.signature.returnType;\r\n    var flow = Flow.create(currentFunction);\r\n    flow.set(FlowFlags.INLINE_CONTEXT);\r\n    flow.returnLabel = returnLabel;\r\n    flow.returnType = returnType;\r\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\r\n\r\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\r\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\r\n    var body = [];\r\n    if (thisArg) {\r\n      let parent = assert(instance.parent);\r\n      assert(parent.kind == ElementKind.CLASS);\r\n      if (getExpressionId(thisArg) == ExpressionId.GetLocal) {\r\n        flow.addScopedLocalAlias(\r\n          getGetLocalIndex(thisArg),\r\n          (<Class>parent).type,\r\n          \"this\"\r\n        );\r\n      } else {\r\n        let thisLocal = flow.addScopedLocal((<Class>parent).type, \"this\", false);\r\n        body.push(\r\n          module.createSetLocal(thisLocal.index, thisArg)\r\n        );\r\n      }\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i) {\r\n      let paramExpr = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      if (getExpressionId(paramExpr) == ExpressionId.GetLocal) {\r\n        flow.addScopedLocalAlias(\r\n          getGetLocalIndex(paramExpr),\r\n          parameterTypes[i],\r\n          signature.getParameterName(i)\r\n        );\r\n        // inherits wrap status\r\n      } else {\r\n        let argumentLocal = flow.addScopedLocal(\r\n          parameterTypes[i],\r\n          signature.getParameterName(i),\r\n          !flow.canOverflow(paramExpr, parameterTypes[i])\r\n        );\r\n        body.push(\r\n          module.createSetLocal(argumentLocal.index, paramExpr)\r\n        );\r\n      }\r\n    }\r\n\r\n    // Compile optional parameter initializers in the scope of the inlined flow\r\n    currentFunction.flow = flow;\r\n    var numParameters = signature.parameterTypes.length;\r\n    for (let i = numArguments; i < numParameters; ++i) {\r\n      let initExpr = this.compileExpression(\r\n        assert(declaration.signature.parameters[i].initializer),\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.WRAP\r\n      );\r\n      let argumentLocal = flow.addScopedLocal(\r\n        parameterTypes[i],\r\n        signature.getParameterName(i),\r\n        !flow.canOverflow(initExpr, parameterTypes[i])\r\n      );\r\n      body.push(\r\n        module.createSetLocal(argumentLocal.index, initExpr)\r\n      );\r\n    }\r\n\r\n    // Compile the called function's body in the scope of the inlined flow\r\n    var bodyStatement = assert(declaration.body);\r\n    if (bodyStatement.kind == NodeKind.BLOCK) {\r\n      let statements = (<BlockStatement>bodyStatement).statements;\r\n      for (let i = 0, k = statements.length; i < k; ++i) {\r\n        let stmt = this.compileStatement(statements[i]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          body.push(stmt);\r\n          if (flow.isAny(FlowFlags.TERMINATED)) break;\r\n        }\r\n      }\r\n    } else {\r\n      body.push(this.compileStatement(bodyStatement));\r\n    }\r\n\r\n    // Free any new scoped locals and reset to the original flow\r\n    var scopedLocals = flow.scopedLocals;\r\n    if (scopedLocals) {\r\n      for (let scopedLocal of scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          currentFunction.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      flow.scopedLocals = null;\r\n    }\r\n    flow.finalize();\r\n    this.currentFunction.flow = previousFlow;\r\n    this.currentType = returnType;\r\n\r\n    // Check that all branches are terminated\r\n    if (returnType != Type.void && !flow.isAny(FlowFlags.TERMINATED)) {\r\n      this.error(\r\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n        declaration.signature.returnType.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    return module.createBlock(returnLabel, body, returnType.toNativeType());\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameters;\r\n    var commonReturnType = originalSignature.returnType;\r\n    var commonThisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\r\n    var trampolineName = originalName + \"|trampoline\";\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampoline = new Function(\r\n      original.prototype,\r\n      trampolineName,\r\n      trampolineSignature,\r\n      original.parent,\r\n      original.contextualTypeArguments\r\n    );\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFunction = this.currentFunction;\r\n    this.currentFunction = trampoline;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.createBlock(names[0], [\r\n      module.createBlock(\"oob\", [\r\n        module.createSwitch(names, \"oob\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.createBinary(\r\n                BinaryOp.SubI32,\r\n                module.createGetGlobal(\"~argc\", NativeType.I32),\r\n                module.createI32(minArguments)\r\n              )\r\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\r\n        )\r\n      ]),\r\n      module.createUnreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      let declaration = originalParameterDeclarations[minArguments + i];\r\n      let initializer = declaration.initializer;\r\n      let initExpr: ExpressionRef;\r\n      if (initializer) {\r\n        initExpr = module.createSetLocal(operandIndex,\r\n          this.compileExpression(\r\n            initializer,\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP\r\n          )\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\r\n          declaration.range\r\n        );\r\n        initExpr = module.createUnreachable();\r\n      }\r\n      body = module.createBlock(names[i + 1], [\r\n        body,\r\n        initExpr,\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\r\n    }\r\n    this.currentFunction = previousFunction;\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var funcRef = module.addFunction(\r\n      trampolineName,\r\n      this.ensureFunctionType(\r\n        trampolineSignature.parameterTypes,\r\n        trampolineSignature.returnType,\r\n        trampolineSignature.thisType\r\n      ),\r\n      typesToNativeTypes(trampoline.additionalLocals),\r\n      module.createBlock(null, [\r\n        body,\r\n        module.createCall(\r\n          originalName,\r\n          forwardedOperands,\r\n          commonReturnType.toNativeType()\r\n        )\r\n      ], commonReturnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper global is present and returns its name. */\r\n  private ensureArgcVar(): string {\r\n    var internalName = \"~argc\";\r\n    if (!this.argcVar) {\r\n      let module = this.module;\r\n      this.argcVar = module.addGlobal(\r\n        internalName,\r\n        NativeType.I32,\r\n        true,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper setter is present and returns its name. */\r\n  private ensureArgcSet(): string {\r\n    var internalName = \"~setargc\";\r\n    if (!this.argcSet) {\r\n      let module = this.module;\r\n      this.argcSet = module.addFunction(internalName,\r\n        this.ensureFunctionType([ Type.u32 ], Type.void),\r\n        null,\r\n        module.createSetGlobal(this.ensureArgcVar(),\r\n          module.createGetLocal(0, NativeType.I32)\r\n        )\r\n      );\r\n      module.addFunctionExport(internalName, \"_setargc\");\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.createUnreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      let parameterNodes = instance.prototype.declaration.signature.parameters;\r\n      let allOptionalsAreConstant = true;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        let initializer = parameterNodes[i].initializer;\r\n        if (!(initializer && initializer.kind == NodeKind.LITERAL)) {\r\n          // TODO: other kinds might be constant as well\r\n          // NOTE: if the initializer is missing this is reported in ensureTrampoline below\r\n          allOptionalsAreConstant = false;\r\n          break;\r\n        }\r\n      }\r\n      if (allOptionalsAreConstant) { // inline into the call\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(\r\n            this.compileExpression(\r\n              <Expression>parameterNodes[i].initializer,\r\n              parameterTypes[i],\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE\r\n            )\r\n          );\r\n        }\r\n      } else { // otherwise fill up with zeroes and call the trampoline\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(parameterTypes[i].toNativeZero(module));\r\n        }\r\n        if (!isCallImport) {\r\n          let original = instance;\r\n          instance = this.ensureTrampoline(instance);\r\n          if (!this.compileFunction(instance)) return module.createUnreachable();\r\n          instance.flow.flags = original.flow.flags;\r\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\r\n          let nativeReturnType = returnType.toNativeType();\r\n          this.currentType = returnType;\r\n          return module.createBlock(null, [\r\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\r\n            module.createCall(instance.internalName, operands, nativeReturnType)\r\n          ], nativeReturnType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // otherwise just call through\r\n    this.currentType = returnType;\r\n    if (isCallImport) return module.createCallImport(instance.internalName, operands, returnType.toNativeType());\r\n    var ret = module.createCall(instance.internalName, operands, returnType.toNativeType());\r\n    return ret;\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    this.currentType = returnType;\r\n    return module.createBlock(null, [\r\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\r\n        module.createI32(numArguments)\r\n      ),\r\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\r\n    ], returnType.toNativeType()); // not necessarily wrapped\r\n  }\r\n\r\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(\r\n        expressions[i],\r\n        Type.void, // drop all\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(\r\n      expressions[numExpressions],\r\n      contextualType, // except last\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE\r\n    );\r\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\r\n    var target = this.program.resolveElementAccess(expression, this.currentFunction); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS: {\r\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            expression.expression.range, (<Class>target).internalName\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        let thisArg = this.compileExpression(\r\n          expression.expression,\r\n          (<Class>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        return this.compileCallDirect(indexedGet, [\r\n          expression.elementExpression\r\n        ], expression, thisArg);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\r\n    var declaration = expression.declaration;\r\n    var name = declaration.name;\r\n    var simpleName = (name.text.length\r\n      ? name.text\r\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\r\n    var currentFunction = this.currentFunction;\r\n    var prototype = new FunctionPrototype(\r\n      this.program,\r\n      simpleName,\r\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\r\n      declaration,\r\n      null,\r\n      DecoratorFlags.NONE\r\n    );\r\n    var flow = currentFunction.flow;\r\n    var instance = this.compileFunctionUsingTypeArguments(\r\n      prototype,\r\n      [],\r\n      flow.contextualTypeArguments,\r\n      flow,\r\n      declaration\r\n    );\r\n    if (!instance) return this.module.createUnreachable();\r\n    this.currentType = instance.signature.type; // TODO: get cached type?\r\n    // NOTE that, in order to make this work in every case, the function must be represented by a\r\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.createUnreachable()\r\n      : this.module.createI32(index);\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (!contextualType.classReference) {\r\n          this.currentType = options.usizeType;\r\n        }\r\n        return options.isWasm64\r\n          ? module.createI64(0)\r\n          : module.createI32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        let flow = currentFunction.flow;\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.getScopedLocal(\"this\");\r\n          if (scopedThis) {\r\n            this.currentType = scopedThis.type;\r\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\r\n          }\r\n        }\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.parent);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let thisType = (<Class>parent).type;\r\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // must be conditional because `this` could have been provided by a derived class\r\n              this.currentType = thisType;\r\n              return module.createTeeLocal(0,\r\n                this.makeConditionalAllocate(<Class>parent, expression)\r\n              );\r\n            }\r\n          }\r\n          this.currentType = thisType;\r\n          return module.createGetLocal(0, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let flow = currentFunction.flow;\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.getScopedLocal(\"this\");\r\n          if (scopedThis) {\r\n            let scopedThisClass = assert(scopedThis.type.classReference);\r\n            let base = scopedThisClass.base;\r\n            if (base) {\r\n              this.currentType = base.type;\r\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\r\n            }\r\n          }\r\n        }\r\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\r\n          let parent = assert(currentFunction.parent);\r\n          assert(parent.kind == ElementKind.CLASS);\r\n          let base = (<Class>parent).base;\r\n          if (base) {\r\n            let superType = base.type;\r\n            this.currentType = superType;\r\n            return module.createGetLocal(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // otherwise resolve\r\n    var target = this.program.resolveIdentifier( // reports\r\n      expression,\r\n      currentFunction,\r\n      this.currentEnum\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        if ((<Local>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\r\n        }\r\n        let localType = (<Local>target).type;\r\n        let localIndex = (<Local>target).index;\r\n        assert(localIndex >= 0);\r\n        this.currentType = localType;\r\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return this.module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!target.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return this.module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = (<FunctionPrototype>target).resolve(\r\n          null,\r\n          currentFunction.flow.contextualTypeArguments\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.createI32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    implicitNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitNegate);\r\n        let classType = contextualType.classReference;\r\n        if (\r\n          classType &&\r\n          classType.prototype == this.program.arrayPrototype\r\n        ) {\r\n          return this.compileArrayLiteral(\r\n            assert(classType.typeArguments)[0],\r\n            (<ArrayLiteralExpression>expression).elementExpressions,\r\n            expression\r\n          );\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.createF32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.createF64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        switch (contextualType.kind) {\r\n\r\n          // compile to contextualType if matching\r\n\r\n          case TypeKind.I8: {\r\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U8: {\r\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I16: {\r\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.U16: {\r\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.BOOL: {\r\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (!this.options.isWasm64) {\r\n              if (i64_is_i32(intValue) || i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\r\n              break;\r\n            }\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          }\r\n          case TypeKind.F32: {\r\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            break; // compiles to best fitting type below, being dropped\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n\r\n        // otherwise compile to best fitting native type\r\n\r\n        if (i64_is_i32(intValue)) {\r\n          this.currentType = Type.i32;\r\n          return module.createI32(i64_low(intValue));\r\n        } else {\r\n          this.currentType = Type.i64;\r\n          return module.createI64(i64_low(intValue), i64_high(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitNegate);\r\n        return this.compileStaticString((<StringLiteralExpression>expression).value);\r\n      }\r\n      // case LiteralKind.OBJECT:\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileStaticString(stringValue: string): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var stringSegments = this.stringSegments;\r\n\r\n    var stringSegment: MemorySegment | null = stringSegments.get(stringValue);\r\n    if (!stringSegment) {\r\n      let stringLength = stringValue.length;\r\n      let stringBuffer = new Uint8Array(4 + stringLength * 2);\r\n      stringBuffer[0] =  stringLength         & 0xff;\r\n      stringBuffer[1] = (stringLength >>>  8) & 0xff;\r\n      stringBuffer[2] = (stringLength >>> 16) & 0xff;\r\n      stringBuffer[3] = (stringLength >>> 24) & 0xff;\r\n      for (let i = 0; i < stringLength; ++i) {\r\n        stringBuffer[4 + i * 2] =  stringValue.charCodeAt(i)        & 0xff;\r\n        stringBuffer[5 + i * 2] = (stringValue.charCodeAt(i) >>> 8) & 0xff;\r\n      }\r\n      stringSegment = this.addMemorySegment(stringBuffer, options.usizeType.byteSize);\r\n      stringSegments.set(stringValue, stringSegment);\r\n    }\r\n    var stringOffset = stringSegment.offset;\r\n    var stringType = this.program.typesLookup.get(\"string\");\r\n    this.currentType = stringType ? stringType : options.usizeType;\r\n    if (options.isWasm64) {\r\n      return module.createI64(i64_low(stringOffset), i64_high(stringOffset));\r\n    }\r\n    assert(i64_is_i32(stringOffset));\r\n    return module.createI32(i64_low(stringOffset));\r\n  }\r\n\r\n  compileArrayLiteral(elementType: Type, expressions: (Expression | null)[], reportNode: Node): ExpressionRef {\r\n    var isStatic = true;\r\n    var module = this.module;\r\n\r\n    // obtain the array type\r\n    var arrayPrototype = assert(this.program.arrayPrototype);\r\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\r\n    var arrayInstance = (<ClassPrototype>arrayPrototype).resolve([ elementType ]);\r\n    if (!arrayInstance) return module.createUnreachable();\r\n    var arrayType = arrayInstance.type;\r\n\r\n    var elementCount = expressions.length;\r\n    if (elementCount) { // non-empty static or dynamic\r\n      let nativeElementType = elementType.toNativeType();\r\n      let values: usize;\r\n      let byteLength: usize;\r\n      switch (nativeElementType) {\r\n        case NativeType.I32: {\r\n          values = changetype<usize>(new Int32Array(elementCount));\r\n          byteLength = elementCount * 4;\r\n          break;\r\n        }\r\n        case NativeType.I64: {\r\n          values = changetype<usize>(new Array<I64>(elementCount));\r\n          byteLength = elementCount * 8;\r\n          break;\r\n        }\r\n        case NativeType.F32: {\r\n          values = changetype<usize>(new Float32Array(elementCount));\r\n          byteLength = elementCount * 4;\r\n          break;\r\n        }\r\n        case NativeType.F64: {\r\n          values = changetype<usize>(new Float64Array(elementCount));\r\n          byteLength = elementCount * 8;\r\n          break;\r\n        }\r\n        default: {\r\n          assert(false);\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n\r\n      // precompute value expressions\r\n      let exprs = new Array<ExpressionRef>(elementCount);\r\n      let expr: BinaryenExpressionRef;\r\n      for (let i = 0; i < elementCount; ++i) {\r\n        exprs[i] = expressions[i]\r\n          ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          : elementType.toNativeZero(module);\r\n        if (isStatic) {\r\n          expr = this.precomputeExpressionRef(exprs[i]);\r\n          if (getExpressionId(expr) == ExpressionId.Const) {\r\n            assert(getExpressionType(expr) == nativeElementType);\r\n            switch (nativeElementType) {\r\n              case NativeType.I32: {\r\n                changetype<i32[]>(values)[i] = getConstValueI32(expr);\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                changetype<I64[]>(values)[i] = i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                changetype<f32[]>(values)[i] = getConstValueF32(expr);\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                changetype<f64[]>(values)[i] = getConstValueF64(expr);\r\n                break;\r\n              }\r\n              default: assert(false); // checked above\r\n            }\r\n          } else {\r\n            // TODO: emit a warning if declared 'const'\r\n            // if (isConst) {\r\n            //   this.warn(\r\n            //     DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n            //     reportNode.range\r\n            //   );\r\n            // }\r\n            isStatic = false;\r\n          }\r\n        }\r\n      }\r\n\r\n      let usizeTypeSize = this.options.usizeType.byteSize;\r\n      if (isStatic) { // non-empty, all elements can be precomputed\r\n\r\n        // Create a combined static memory segment composed of:\r\n        // Array struct + ArrayBuffer struct + aligned ArrayBuffer data\r\n\r\n        let arraySize = usizeTypeSize + 4; // buffer_ & length_\r\n        let bufferHeaderSize = (4 + 7) & ~7; // aligned byteLength (8)\r\n        let bufferTotalSize = 1 << (32 - clz(byteLength + bufferHeaderSize - 1)); // see internals\r\n        let data = new Uint8Array(arraySize + bufferTotalSize);\r\n        let segment = this.addMemorySegment(data);\r\n        let offset = 0;\r\n\r\n        // write Array struct\r\n        if (usizeTypeSize == 8) {\r\n          writeI64(i64_add(segment.offset, i64_new(arraySize)), data, offset); // buffer_ @ segment[arSize]\r\n          offset += 8;\r\n        } else {\r\n          assert(i64_high(segment.offset) == 0);\r\n          writeI32(i64_low(segment.offset) + arraySize, data, offset); // buffer_ @ segment[arSize]\r\n          offset += 4;\r\n        }\r\n        writeI32(elementCount, data, offset); // length_\r\n        offset += 4;\r\n        assert(offset == arraySize);\r\n\r\n        // write ArrayBuffer struct\r\n        writeI32(byteLength, data, offset);\r\n        offset += bufferHeaderSize; // incl. alignment\r\n\r\n        // write ArrayBuffer data\r\n        switch (nativeElementType) {\r\n          case NativeType.I32: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeI32(changetype<i32[]>(values)[i], data, offset); offset += 4;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.I64: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeI64(changetype<I64[]>(values)[i], data, offset); offset += 8;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.F32: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeF32(changetype<f32[]>(values)[i], data, offset); offset += 4;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.F64: {\r\n            for (let i = 0; i < elementCount; ++i) {\r\n              writeF64(changetype<f64[]>(values)[i], data, offset); offset += 8;\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        assert(offset <= arraySize + bufferTotalSize);\r\n\r\n        this.currentType = arrayType;\r\n        return usizeTypeSize == 8\r\n          ? module.createI64(\r\n              i64_low(segment.offset),\r\n              i64_high(segment.offset)\r\n            )\r\n          : module.createI32(\r\n              i64_low(segment.offset)\r\n            );\r\n\r\n      } else { // non-empty, some elements can't be precomputed\r\n\r\n        this.currentType = arrayType;\r\n        let setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\r\n        if (!setter) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n            reportNode.range, arrayInstance.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let nativeArrayType = arrayType.toNativeType();\r\n        let currentFunction = this.currentFunction;\r\n        let tempLocal = currentFunction.getTempLocal(arrayType, false);\r\n        let stmts = new Array<ExpressionRef>(2 + elementCount);\r\n        let index = 0;\r\n        stmts[index++] = module.createSetLocal(tempLocal.index,\r\n          this.makeCallDirect(assert(arrayInstance.constructorInstance), [\r\n            module.createI32(0), // this\r\n            module.createI32(elementCount)\r\n          ])\r\n        );\r\n        for (let i = 0; i < elementCount; ++i) {\r\n          stmts[index++] = this.makeCallDirect(setter, [\r\n            module.createGetLocal(tempLocal.index, nativeArrayType), // this\r\n            module.createI32(i),\r\n            exprs[i]\r\n          ]);\r\n        }\r\n        assert(index + 1 == stmts.length);\r\n        stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\r\n        currentFunction.freeTempLocal(tempLocal);\r\n        this.currentType = arrayType;\r\n        return module.createBlock(null, stmts, nativeArrayType);\r\n      }\r\n\r\n    } else { // empty, TBD: cache this somehow?\r\n      this.currentType = arrayType;\r\n      return this.makeCallDirect(assert(arrayInstance.constructorInstance), [\r\n        module.createI32(0), // this\r\n        module.createI32(0)\r\n      ]);\r\n    }\r\n  }\r\n\r\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var options = this.options;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // obtain the class being instantiated\r\n    var target = this.program.resolveExpression( // reports\r\n      expression.expression,\r\n      currentFunction\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        expression.expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>target;\r\n    var classInstance = classPrototype.resolveUsingTypeArguments( // reports\r\n      expression.typeArguments,\r\n      currentFunction.flow.contextualTypeArguments,\r\n      expression\r\n    );\r\n    if (!classInstance) return module.createUnreachable();\r\n\r\n    var expr: ExpressionRef;\r\n\r\n    // traverse to the first matching constructor\r\n    var currentClassInstance: Class | null = classInstance;\r\n    var constructorInstance = classInstance.constructorInstance;\r\n    while (!constructorInstance && (currentClassInstance = classInstance.base)) {\r\n      constructorInstance = currentClassInstance.constructorInstance;\r\n    }\r\n\r\n    // if a constructor is present, call it with a zero `this`\r\n    if (constructorInstance) {\r\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\r\n        options.usizeType.toNativeZero(module)\r\n      );\r\n\r\n    // otherwise simply allocate a new instance and initialize its fields\r\n    } else {\r\n      expr = this.makeAllocate(classInstance, expression);\r\n    }\r\n\r\n    this.currentType = classInstance.type;\r\n    return expr;\r\n  }\r\n\r\n  compileParenthesizedExpression(\r\n    expression: ParenthesizedExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    // does not change types, just order\r\n    return this.compileExpression(\r\n      expression.expression,\r\n      contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var program = this.program;\r\n    var module = this.module;\r\n\r\n    var target = program.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: { // static property\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        let parent = (<EnumValue>target).parent;\r\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\r\n        if (!this.compileEnum(<Enum>parent)) {\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          return module.createI32((<EnumValue>target).constantValue);\r\n        }\r\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        let thisExpression = assert(program.resolvedThisExpression);\r\n        assert((<Field>target).memoryOffset >= 0);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        this.currentType = (<Field>target).type;\r\n        return module.createLoad(\r\n          (<Field>target).type.byteSize,\r\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          thisExpr,\r\n          (<Field>target).type.toNativeType(),\r\n          (<Field>target).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property (here: getter)\r\n        let prototype = (<Property>target).getterPrototype;\r\n        if (prototype) {\r\n          let instance = prototype.resolve(null); // reports\r\n          if (!instance) return module.createUnreachable();\r\n          let signature = instance.signature;\r\n          if (!this.checkCallSignature( // reports\r\n            signature,\r\n            0,\r\n            instance.is(CommonFlags.INSTANCE),\r\n            propertyAccess\r\n          )) {\r\n            return module.createUnreachable();\r\n          }\r\n          if (instance.is(CommonFlags.INSTANCE)) {\r\n            let parent = assert(instance.parent);\r\n            assert(parent.kind == ElementKind.CLASS);\r\n            let thisExpression = assert(program.resolvedThisExpression);\r\n            let thisExpr = this.compileExpressionRetainType(\r\n              thisExpression,\r\n              this.options.usizeType,\r\n              WrapMode.NONE\r\n            );\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess, thisExpr);\r\n          } else {\r\n            this.currentType = signature.returnType;\r\n            return this.compileCallDirect(instance, [], propertyAccess);\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.range, (<Property>target).simpleName, (<Property>target).parent.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    if (\r\n      !this.options.noTreeShaking ||\r\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\r\n    ) {\r\n      // Try to eliminate unnecesssary branches if the condition is constant\r\n      let condExprPrecomp = this.precomputeExpressionRef(condExpr);\r\n      if (\r\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n        getExpressionType(condExprPrecomp) == NativeType.I32\r\n      ) {\r\n        return getConstValueI32(condExprPrecomp)\r\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\r\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n\r\n      // Otherwise recompile to the original and let the optimizer decide\r\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n        condExpr = this.makeIsTrueish(\r\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n          this.currentType\r\n        );\r\n      }\r\n    }\r\n\r\n    var ifThenExpr: ExpressionRef;\r\n    var ifElseExpr: ExpressionRef;\r\n    var ifThenType: Type;\r\n    var ifElseType: Type;\r\n\r\n    // if part of a constructor, keep track of memory allocations\r\n    if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n      let flow = currentFunction.flow;\r\n\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\r\n      ifThenType = this.currentType;\r\n      let ifThenAllocates = flow.is(FlowFlags.ALLOCATES);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n\r\n      flow = flow.enterBranchOrScope();\r\n      currentFunction.flow = flow;\r\n      ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n      ifElseType = this.currentType;\r\n      let ifElseAllocates = flow.is(FlowFlags.ALLOCATES);\r\n      flow = flow.leaveBranchOrScope();\r\n      currentFunction.flow = flow;\r\n\r\n      if (ifThenAllocates && ifElseAllocates) flow.set(FlowFlags.ALLOCATES);\r\n\r\n    // otherwise simplify\r\n    } else {\r\n      ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\r\n      ifThenType = this.currentType;\r\n      ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n      ifElseType = this.currentType;\r\n    }\r\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\r\n    if (!commonType) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, ifThenType.toString(), ifElseType.toString()\r\n      );\r\n      this.currentType = contextualType;\r\n      return this.module.createUnreachable();\r\n    }\r\n    ifThenExpr = this.convertExpression(\r\n      ifThenExpr,\r\n      ifThenType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifThen\r\n    );\r\n    ifElseExpr = this.convertExpression(\r\n      ifElseExpr,\r\n      ifElseType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifElse\r\n    );\r\n    this.currentType = commonType;\r\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\r\n  }\r\n\r\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression( // reports\r\n      expression.operand,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) {\r\n      // shortcut if compiling the getter already failed\r\n      return getValue;\r\n    }\r\n    var currentType = this.currentType;\r\n\r\n    var op: BinaryOp;\r\n    var nativeType: NativeType;\r\n    var nativeOne: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            op = BinaryOp.AddI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.AddI64\r\n              : BinaryOp.AddI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.AddI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.AddF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.AddF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        if (currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            op = BinaryOp.SubI32;\r\n            nativeType = NativeType.I32;\r\n            nativeOne = module.createI32(1);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: // TODO: check operator overload\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            op = options.isWasm64\r\n              ? BinaryOp.SubI64\r\n              : BinaryOp.SubI32;\r\n            nativeType = options.nativeSizeType;\r\n            nativeOne = currentType.toNativeOne(module);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            op = BinaryOp.SubI64;\r\n            nativeType = NativeType.I64;\r\n            nativeOne = module.createI64(1);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            op = BinaryOp.SubF32;\r\n            nativeType = NativeType.F32;\r\n            nativeOne = module.createF32(1);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            op = BinaryOp.SubF64;\r\n            nativeType = NativeType.F64;\r\n            nativeOne = module.createF64(1);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // simplify if dropped anyway\r\n    if (contextualType == Type.void) {\r\n      return this.compileAssignmentWithValue(expression.operand,\r\n        module.createBinary(op,\r\n          getValue,\r\n          nativeOne\r\n        ),\r\n        false\r\n      );\r\n    }\r\n\r\n    // otherwise use a temp local for the intermediate value (always possibly overflows)\r\n    var tempLocal = currentFunction.getTempLocal(currentType, false);\r\n    var setValue = this.compileAssignmentWithValue(expression.operand,\r\n      module.createBinary(op,\r\n        this.module.createGetLocal(tempLocal.index, nativeType),\r\n        nativeOne\r\n      ),\r\n      false\r\n    );\r\n    this.currentType = assert(tempLocal).type;\r\n    currentFunction.freeTempLocal(<Local>tempLocal);\r\n\r\n    var localIndex = (<Local>tempLocal).index;\r\n    return module.createBlock(null, [\r\n      module.createSetLocal(localIndex, getValue),\r\n      setValue,\r\n      module.createGetLocal(localIndex, nativeType)\r\n    ], nativeType); // result of 'x++' / 'x--' might overflow\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\r\n          // compileExpression normally does this:\r\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n        } else {\r\n          expr = this.compileExpression(\r\n            expression.operand,\r\n            contextualType == Type.void\r\n              ? Type.i32\r\n              : contextualType,\r\n            ConversionKind.NONE,\r\n            WrapMode.NONE\r\n          );\r\n          switch (this.currentType.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.I16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U8:\r\n            case TypeKind.U16:\r\n            case TypeKind.U32:\r\n            case TypeKind.BOOL: {\r\n              expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\r\n              break;\r\n            }\r\n            case TypeKind.USIZE: {\r\n              if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n                this.error(\r\n                  DiagnosticCode.Operation_not_supported,\r\n                  expression.range\r\n                );\r\n                return module.createUnreachable();\r\n              }\r\n              // fall-through\r\n            }\r\n            case TypeKind.ISIZE: {\r\n              expr = module.createBinary(\r\n                this.options.isWasm64\r\n                  ? BinaryOp.SubI64\r\n                  : BinaryOp.SubI32,\r\n                this.currentType.toNativeZero(module),\r\n                expr\r\n              );\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: {\r\n              expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\r\n              break;\r\n            }\r\n            case TypeKind.F32: {\r\n              expr = module.createUnary(UnaryOp.NegF32, expr);\r\n              break;\r\n            }\r\n            case TypeKind.F64: {\r\n              expr = module.createUnary(UnaryOp.NegF64, expr);\r\n              break;\r\n            }\r\n            default: {\r\n              assert(false);\r\n              expr = module.createUnreachable();\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n        expr = this.makeIsFalseish(expr, this.currentType);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          contextualType == Type.void\r\n            ? ConversionKind.NONE\r\n            : ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            // fall-through\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              this.currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        // it might make sense to implement typeof in a way that a generic function can detect\r\n        // whether its type argument is a class type or string. that could then be used, for\r\n        // example, to generate hash codes for sets and maps, depending on the kind of type\r\n        // parameter we have. ideally the comparison would not involve actual string comparison and\r\n        // limit available operations to hard-coded string literals.\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\r\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFunction.flow;\r\n    switch (type.kind) {\r\n      case TypeKind.I8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(24)\r\n                ),\r\n                module.createI32(24)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.I16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(16)\r\n                ),\r\n                module.createI32(16)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xffff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.BOOL: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0x1)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\r\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return module.createUnary(UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createUnary(UnaryOp.EqzI64, expr);\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\r\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return expr;\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return type.size == 64\r\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\r\n          : expr;\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(0);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an allocation expression for an instance of the specified class. */\r\n  makeAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\r\n    var module = this.module;\r\n    var currentFunction = this.currentFunction;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n\r\n    // allocate the necessary memory and tee the pointer to a temp. local for reuse\r\n    var tempLocal = currentFunction.getTempLocal(classInstance.type, false);\r\n    var initializers = new Array<ExpressionRef>();\r\n    initializers.push(\r\n      module.createSetLocal(tempLocal.index,\r\n        compileBuiltinAllocate(this, classInstance, reportNode)\r\n      )\r\n    );\r\n\r\n    // apply field initializers\r\n    if (classInstance.members) {\r\n      for (let member of classInstance.members.values()) {\r\n        if (member.kind == ElementKind.FIELD) {\r\n          let field = <Field>member;\r\n          let fieldType = field.type;\r\n          let nativeFieldType = fieldType.toNativeType();\r\n          let fieldDeclaration = field.prototype.declaration;\r\n          assert(!field.isAny(CommonFlags.CONST));\r\n          if (fieldDeclaration.initializer) { // use initializer\r\n            initializers.push(module.createStore(fieldType.byteSize,\r\n              module.createGetLocal(tempLocal.index, nativeSizeType),\r\n              this.compileExpression( // reports\r\n                fieldDeclaration.initializer,\r\n                fieldType,\r\n                ConversionKind.IMPLICIT,\r\n                WrapMode.NONE\r\n              ),\r\n              nativeFieldType,\r\n              field.memoryOffset\r\n            ));\r\n          } else { // initialize with zero\r\n            // TODO: might be unnecessary if the ctor initializes the field\r\n            let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\r\n            initializers.push(module.createStore(fieldType.byteSize,\r\n              module.createGetLocal(tempLocal.index, nativeSizeType),\r\n              parameterIndex >= 0 // initialized via parameter\r\n                ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\r\n                : fieldType.toNativeZero(module),\r\n                nativeFieldType,\r\n              field.memoryOffset\r\n            ));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // return `this`\r\n    initializers.push(\r\n      module.createGetLocal(tempLocal.index, nativeSizeType)\r\n    );\r\n\r\n    currentFunction.freeTempLocal(tempLocal);\r\n    this.currentType = classInstance.type;\r\n    return module.createBlock(null, initializers, nativeSizeType);\r\n  }\r\n\r\n  /** Makes a conditional allocation expression inside of the constructor of the specified class. */\r\n  makeConditionalAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\r\n    // requires that `this` is the first local\r\n    var module = this.module;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    this.currentType = classInstance.type;\r\n    return module.createIf(\r\n      nativeSizeType == NativeType.I64\r\n        ? module.createBinary(\r\n            BinaryOp.NeI64,\r\n            module.createGetLocal(0, NativeType.I64),\r\n            module.createI64(0)\r\n          )\r\n        : module.createGetLocal(0, NativeType.I32),\r\n      module.createGetLocal(0, nativeSizeType),\r\n      module.createTeeLocal(0,\r\n        this.makeAllocate(classInstance, reportNode)\r\n      )\r\n    );\r\n  }\r\n\r\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\r\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\r\n    var currentFunction = this.currentFunction;\r\n    var source = range.source;\r\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\r\n    range.debugInfoRef = expr;\r\n    currentFunction.debugLocations.push(range);\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\nfunction mangleExportName(element: Element, simpleName: string = element.simpleName): string {\r\n  switch (element.kind) {\r\n    case ElementKind.FUNCTION: {\r\n      let parent = (<Function>element).parent || (<Function>element).prototype.parent;\r\n      return parent\r\n        ? mangleExportName(parent)\r\n        + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\r\n        + simpleName\r\n        : simpleName;\r\n    }\r\n    case ElementKind.FIELD: {\r\n      let parent = assert((<Field>element).parent);\r\n      return mangleExportName(parent)\r\n          + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\r\n          + simpleName;\r\n    }\r\n    case ElementKind.ENUMVALUE: {\r\n      let parent = assert((<EnumValue>element).parent);\r\n      return mangleExportName(parent)\r\n          + (element.is(CommonFlags.INSTANCE) ? INSTANCE_DELIMITER : STATIC_DELIMITER)\r\n          + simpleName;\r\n    }\r\n    case ElementKind.CLASS: {\r\n      let parent = (<Class>element).prototype.parent;\r\n      return parent\r\n        ? mangleExportName(parent)\r\n        + STATIC_DELIMITER\r\n        + simpleName\r\n        : simpleName;\r\n    }\r\n    default: {\r\n      let parent = element.parent;\r\n      return parent\r\n        ? mangleExportName(parent)\r\n        + STATIC_DELIMITER\r\n        + simpleName\r\n        : simpleName;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  Program,\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler,\r\n  IdentifierHandling\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  SignatureNode,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionExpression,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath\r\n} from \"./ast\";\r\n\r\nconst builtinsFile = LIBRARY_PREFIX + \"builtins.ts\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Source file names to be requested next. */\r\n  backlog: string[] = new Array();\r\n  /** Source file names already seen, that is processed or backlogged. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Source file names already completely processed. */\r\n  donelog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n\r\n    // check if already processed\r\n    if (this.donelog.has(internalPath)) return;\r\n    this.donelog.add(internalPath); // do not parse again\r\n    this.seenlog.add(internalPath); // do not request again\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n          ? SourceKind.LIBRARY\r\n          : SourceKind.DEFAULT\r\n    );\r\n    var program = this.program;\r\n    program.sources.push(source);\r\n\r\n    // mark the special builtins library file\r\n    if (source.normalizedPath == builtinsFile) {\r\n      source.set(CommonFlags.BUILTIN);\r\n    }\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn);\r\n      if (statement) {\r\n        statement.parent = source;\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: Node | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) {\r\n        this.skipStatement(tn);\r\n        continue;\r\n      }\r\n      if (!decorators) decorators = [];\r\n      decorators.push(decorator);\r\n    }\r\n\r\n    // mark builtins\r\n    flags |= (tn.source.flags & CommonFlags.BUILTIN);\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (tn.skip(Token.DEFAULT)) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          tn.range()\r\n        );\r\n      }\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n          break;\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        }\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (!tn.skip(Token.CLASS)) {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n          break;\r\n        } else {\r\n          tn.discard(state);\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        // fall through\r\n      }\r\n      case Token.CLASS:\r\n      case Token.INTERFACE: {\r\n        tn.next();\r\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExport(tn, flags, startPos);\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    this.donelog.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): CommonTypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    var type: CommonTypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseSignature(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'void'\r\n    } else if (token == Token.VOID) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createType(\r\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let parameters = new Array<TypeNode>();\r\n      let nullable = false;\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          parameters.push(<TypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\r\n\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(\r\n        Node.createIdentifierExpression(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function signature, as used in type declarations. */\r\n  tryParseSignature(\r\n    tn: Tokenizer\r\n  ): SignatureNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: TypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.TYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <TypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skipIdentifier()) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createSignature(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skipIdentifier()) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var flags = parentFlags;\r\n\r\n    var type: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n      if (!member) return null;\r\n      members.push(<EnumValueDeclaration>member);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEBRACE)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters = new Array<TypeParameterNode>();\r\n    while (!tn.skip(Token.GREATERTHAN)) {\r\n      let typeParameter = this.parseTypeParameter(tn);\r\n      if (!typeParameter) return null;\r\n      typeParameters.push(<TypeParameterNode>typeParameter);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.GREATERTHAN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    if (typeParameters.length === 0) {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <TypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private parseParametersThis: TypeNode | null = null;\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n    var thisType: CommonTypeNode | null = null;\r\n\r\n    // check if there is a leading `this` parameter\r\n    this.parseParametersThis = null;\r\n    if (tn.skip(Token.THIS)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        thisType = this.parseType(tn); // reports\r\n        if (!thisType) return null;\r\n        if (thisType.kind == NodeKind.TYPE) {\r\n          this.parseParametersThis = <TypeNode>thisType;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            thisType.range\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n        return null;\r\n      }\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          return parameters;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let param = this.parseParameter(tn, isConstructor); // reports\r\n      if (!param) return null;\r\n      if (seenRest && !reportedRest) {\r\n        this.error(\r\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n          seenRest.name.range\r\n        );\r\n        reportedRest = true;\r\n      }\r\n      switch (param.parameterKind) {\r\n        default: {\r\n          if (seenOptional) {\r\n            this.error(\r\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n              param.name.range\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ParameterKind.OPTIONAL: {\r\n          seenOptional = true;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          seenRest = param;\r\n          break;\r\n        }\r\n      }\r\n      parameters.push(param);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (isConstructor) {\r\n      if (tn.skip(Token.PUBLIC)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PUBLIC;\r\n      } else if (tn.skip(Token.PROTECTED)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PROTECTED;\r\n      } else if (tn.skip(Token.PRIVATE)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PRIVATE;\r\n      }\r\n      if (tn.peek() == Token.READONLY) {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek() != Token.COLON) { // modifier\r\n          tn.discard(state);\r\n          if (!startRange) startRange = tn.range();\r\n          accessFlags |= CommonFlags.READONLY;\r\n        } else { // identifier\r\n          tn.reset(state);\r\n        }\r\n      }\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skipIdentifier()) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: CommonTypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n    var thisType = this.parseParametersThis;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var isArrow = false;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skipIdentifier()) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      isArrow = true;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    isArrow: bool,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n      this.error(\r\n        DiagnosticCode.Type_expected,\r\n        returnType.range\r\n      ); // recoverable\r\n    }\r\n\r\n    if (isArrow) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null, // TODO?\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null;\r\n    if (isArrow) {\r\n      body = this.parseStatement(tn, false);\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClassOrInterface(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at ('class' | 'interface'):\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    var isInterface = tn.token == Token.INTERFACE;\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    } else {\r\n      typeParameters = [];\r\n    }\r\n\r\n    var extendsType: TypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.TYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <TypeNode>t;\r\n    }\r\n\r\n    var implementsTypes: TypeNode[] | null = null;\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        if (!isInterface) {\r\n          if (!implementsTypes) implementsTypes = [];\r\n          implementsTypes.push(<TypeNode>type);\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration: ClassDeclaration;\r\n    if (isInterface) {\r\n      assert(!implementsTypes);\r\n      declaration = Node.createInterfaceDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    } else {\r\n      declaration = Node.createClassDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        implementsTypes,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (!member) return null;\r\n        member.parent = declaration;\r\n        members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return declaration;\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n\r\n    var decorators = new Array<DecoratorNode>();\r\n    while (tn.skip(Token.AT)) {\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) break;\r\n      decorators.push(<DecoratorNode>decorator);\r\n    }\r\n\r\n    var flags = parent.flags & CommonFlags.AMBIENT; // inherit\r\n\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      flags |= CommonFlags.PUBLIC;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      flags |= CommonFlags.PRIVATE;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      flags |= CommonFlags.PROTECTED;\r\n    }\r\n\r\n    var staticStart: i32 = 0;\r\n    var staticEnd: i32 = 0;\r\n    var abstractStart: i32 = 0;\r\n    var abstractEnd: i32 = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        flags |= (CommonFlags.ABSTRACT | CommonFlags.INSTANCE);\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      } else {\r\n        flags |= CommonFlags.INSTANCE;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) {\r\n        flags |= CommonFlags.GENERIC_CONTEXT;\r\n      }\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.skip(Token.READONLY)) {\r\n      flags |= CommonFlags.READONLY;\r\n      readonlyStart = tn.tokenPos;\r\n      readonlyEnd = tn.pos;\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (tn.skip(Token.GET)) {\r\n      if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.GET;\r\n        isGetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.SET)) {\r\n      if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n        flags |= CommonFlags.SET | CommonFlags.SET;\r\n        isSetter = true;\r\n        setStart = tn.tokenPos;\r\n        setEnd = tn.pos;\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n    } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n      flags |= CommonFlags.CONSTRUCTOR;\r\n      isConstructor = true;\r\n      if (flags & CommonFlags.STATIC) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(staticStart, staticEnd), \"static\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n      if (flags & CommonFlags.READONLY) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (!isConstructor && !tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = isConstructor\r\n      ? Node.createConstructorExpression(tn.range())\r\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      let thisType = this.parseParametersThis;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            implicitFieldDeclaration.parent = parent;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createSignature(\r\n        parameters,\r\n        returnType,\r\n        thisType,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let ns = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, ns);\r\n          if (!member) return null;\r\n          member.parent = ns;\r\n          members.push(member);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ns;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    startPos: i32\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseExportMember(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n      let path: StringLiteralExpression | null = null;\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifierName()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      members = new Array();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseImportDeclaration(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.backlog.push(internalPath);\r\n          this.seenlog.add(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifierName()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skipIdentifier()) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skipIdentifier()) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(IdentifierHandling.PREFER);\r\n    var startPos = tn.tokenPos;\r\n    var expr: Expression | null = null;\r\n\r\n    if (token == Token.NULL) {\r\n      return Node.createNullExpression(tn.range());\r\n    }\r\n    if (token == Token.TRUE) {\r\n      return Node.createTrueExpression(tn.range());\r\n    }\r\n    if (token == Token.FALSE) {\r\n      return Node.createFalseExpression(tn.range());\r\n    }\r\n\r\n    var p = determinePrecedenceStart(token);\r\n    if (p != Precedence.INVALID) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, p);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    switch (token) {\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            true\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(IdentifierHandling.PREFER)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // can be both\r\n                case Token.QUESTION:   // optional parameter or ternary\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        while (!tn.skip(Token.CLOSEBRACKET)) {\r\n          if (tn.peek() == Token.COMMA) {\r\n            expr = null; // omitted\r\n          } else {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n          }\r\n          elementExpressions.push(expr);\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACKET)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"]\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Expression_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): CommonTypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments = new Array<CommonTypeNode>();\r\n    do {\r\n      if (tn.peek() === Token.GREATERTHAN) {\r\n        break;\r\n      }\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!expr) return null;\r\n      args.push(expr);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = 0\r\n  ): Expression | null {\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    var startPos = expr.range.start;\r\n\r\n    // CallExpression with type arguments\r\n    var typeArguments: CommonTypeNode[] | null;\r\n    while (\r\n      // there might be better ways to distinguish a LESSTHAN from a CALL with type arguments\r\n      (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) ||\r\n      tn.skip(Token.OPENPAREN)\r\n    ) {\r\n      let args = this.parseArguments(tn);\r\n      if (!args) return null;\r\n      expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn);\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn);\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA ? Precedence.COMMA + 1 : 0);\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n          next = this.parseExpression(tn,\r\n            isRightAssociative(token)\r\n              ? nextPrecedence\r\n              : nextPrecedence + 1\r\n          );\r\n          if (!next) return null;\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (next.kind == NodeKind.IDENTIFIER) {\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // join\r\n              let propertyCall = <CallExpression>next;\r\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\r\n                propertyCall.expression = Node.createPropertyAccessExpression(\r\n                  expr,\r\n                  <IdentifierExpression>propertyCall.expression,\r\n                  tn.range(startPos, tn.pos)\r\n                );\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.Identifier_expected,\r\n                  propertyCall.expression.range\r\n                );\r\n                return null;\r\n              }\r\n              expr = propertyCall;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.SEMICOLON      // end of the statement for sure\r\n      ) {\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  // skipBlock(tn: Tokenizer): void {\r\n  //   var depth = 0;\r\n  //   var token: Token;\r\n  //   do {\r\n  //     token = tn.next();\r\n  //     if (token == Token.OPENBRACE) {\r\n  //       ++depth;\r\n  //     } else if (token == Token.CLOSEBRACE) {\r\n  //       if (depth) --depth;\r\n  //       if (!depth) break; // done\r\n  //     }\r\n  //   } while (token != Token.ENDOFFILE);\r\n  // }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING,\r\n  INVALID = -1\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): i32 {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): i32 {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\r\n    default: return Precedence.INVALID;\r\n  }\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  CommonFlags,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Field,\r\n  Function,\r\n  FunctionPrototype,\r\n  Class,\r\n  ClassPrototype,\r\n  Namespace,\r\n  ConstantValueKind,\r\n  Interface,\r\n  Property\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Whether to include private members */\r\n  includePrivate: bool;\r\n  /** Elements still to do. */\r\n  todo: Element[] = [];\r\n  /** Already seen elements. */\r\n  seen: Set<Element> = new Set();\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    this.program = program;\r\n    this.includePrivate;\r\n  }\r\n\r\n  /** Walks all exports and calls the respective handlers. */\r\n  walk(): void {\r\n    for (let element of this.program.moduleLevelExports.values()) this.visitElement(element);\r\n    var todo = this.todo;\r\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\r\n  }\r\n\r\n  /** Visits an element.*/\r\n  visitElement(element: Element): void {\r\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.visitFunctionInstances(<FunctionPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        this.visitClassInstances(<ClassPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prop = <Property>element;\r\n        let getter = prop.getterPrototype;\r\n        if (getter) this.visitFunctionInstances(getter);\r\n        let setter = prop.setterPrototype;\r\n        if (setter) this.visitFunctionInstances(setter);\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if (hasCompiledMember(element)) this.visitNamespace(element);\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  private visitFunctionInstances(element: FunctionPrototype): void {\r\n    for (let instance of element.instances.values()) {\r\n      if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\r\n    }\r\n  }\r\n\r\n  private visitClassInstances(element: ClassPrototype): void {\r\n    for (let instance of element.instances.values()) {\r\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\r\n    }\r\n  }\r\n\r\n  abstract visitGlobal(element: Global): void;\r\n  abstract visitEnum(element: Enum): void;\r\n  abstract visitFunction(element: Function): void;\r\n  abstract visitClass(element: Class): void;\r\n  abstract visitInterface(element: Interface): void;\r\n  abstract visitField(element: Field): void;\r\n  abstract visitNamespace(element: Element): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) sb.push(\"const \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) sb.push(\"const \");\r\n          else sb.push(\"readonly \");\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    // TODO\r\n  }\r\n\r\n  visitNamespace(element: Namespace): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.STATIC)) {\r\n      if (isConst) sb.push(\"static readonly \");\r\n      else sb.push(\"static \");\r\n    } else {\r\n      if (isConst) sb.push(\"const \");\r\n      else sb.push(\"var \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"enum \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            sb.push((<EnumValue>member).constantValue.toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) this.visitNamespace(element);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.GET)) {\r\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n      sb.push(\";\\n\");\r\n      return;\r\n    } else {\r\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\r\n      sb.push(element.simpleName);\r\n    }\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\r\n      sb.push(\")\");\r\n    } else {\r\n      sb.push(\"): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n    }\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\r\n      sb.push(\"class \");\r\n    }\r\n    sb.push(element.simpleName);\r\n    var base = element.base;\r\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\r\n      sb.push(\" extends \");\r\n      sb.push(base.simpleName); // TODO: fqn\r\n    }\r\n    sb.push(\" {\\n\");\r\n    var members = element.prototype.members; // static\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    var ctor = element.constructorInstance;\r\n    if (ctor) this.visitFunction(ctor);\r\n    members = element.members; // instance\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n    sb.push(element.simpleName);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitNamespace(element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"namespace \");\r\n      sb.push(element.simpleName);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    sb.push(\"export default ASModule;\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Tests if a namespace-like element has at least one compiled member. */\r\nfunction hasCompiledMember(element: Element): bool {\r\n  var members = element.members;\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      switch (member.kind) {\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          for (let instance of (<FunctionPrototype>member).instances.values()) {\r\n            if (instance.is(CommonFlags.COMPILED)) return true;\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          for (let instance of (<ClassPrototype>member).instances.values()) {\r\n            if (instance.is(CommonFlags.COMPILED)) return true;\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  getFunctionName,\r\n  getFunctionBody,\r\n  getFunctionParamCount,\r\n  getFunctionParamType,\r\n  getFunctionResultType,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfCondition,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getLoopName,\r\n  getLoopBody,\r\n  getBreakName,\r\n  getBreakCondition,\r\n  getGetLocalIndex,\r\n  getSetLocalIndex,\r\n  getSetLocalValue,\r\n  getLoadOffset,\r\n  getLoadPtr,\r\n  getStoreOffset,\r\n  getStorePtr,\r\n  getStoreValue,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getUnaryOp,\r\n  getUnaryValue,\r\n  getBinaryOp,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getSelectCondition,\r\n  getDropValue,\r\n  getReturnValue,\r\n  getHostOp,\r\n  getHostOperand\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\r\n    var body = getFunctionBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(getFunctionResultType(func)));\r\n    this.push(\" \");\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = getExpressionId(expr);\r\n    var type = getExpressionType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = getBlockName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = getBlockChildCount(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(getBlockChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          if (nested = getIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(getIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = getLoopName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(getLoopBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = getBreakCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = getBreakName(expr)) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallImport:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getGetLocalIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.SetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getSetLocalIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(getSetLocalValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GetGlobal:\r\n      case ExpressionId.SetGlobal: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getLoadOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getLoadPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getStoreOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getStorePtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getStoreValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(getConstValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(getConstValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(getConstValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(getSelectThen(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectElse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(getDropValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = getReturnValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (getHostOp(expr)) {\r\n          case HostOp.CurrentMemory: {\r\n            this.push(\"current_memory()\");\r\n            return;\r\n          }\r\n          case HostOp.GrowMemory: {\r\n            this.push(\"grow_memory(\");\r\n            this.decompileExpression(getHostOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicWake:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport {\r\n  Compiler,\r\n  Options,\r\n  Target,\r\n  Feature\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  Decompiler\r\n} from \"./decompiler\";\r\n\r\nimport {\r\n  IDLBuilder,\r\n  TSDBuilder\r\n} from \"./definitions\";\r\n\r\nimport {\r\n  DiagnosticMessage,\r\n  DiagnosticCategory,\r\n  formatDiagnosticMessage\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module\r\n} from \"./module\";\r\n\r\nimport {\r\n  Parser\r\n} from \"./parser\";\r\n\r\nimport {\r\n  Program,\r\n  LIBRARY_PREFIX\r\n} from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) parser = new Parser();\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noTreeShaking` option. */\r\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\r\n  options.noTreeShaking = noTreeShaking;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `noMemory` option. */\r\nexport function setNoMemory(options: Options, noMemory: bool): void {\r\n  options.noMemory = noMemory;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(name, alias);\r\n}\r\n\r\n/** Sign extension operations. */\r\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\r\n/** Mutable global imports and exports. */\r\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\r\n\r\n/** Enables a specific feature. */\r\nexport function enableFeature(options: Options, feature: Feature): void {\r\n  options.features |= feature;\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX };\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_zero = Long.ZERO;\r\n\r\nglobal.i64_one = Long.ONE;\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_eq = function(left, right) {\r\n  return left.eq(right);\r\n};\r\n\r\nglobal.i64_ne = function(left, right) {\r\n  return left.ne(right);\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","/** @module util *//***/\r\n\r\n/** Reads a 32-bit integer from the specified buffer. */\r\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8\r\n       | buffer[offset + 2] << 16\r\n       | buffer[offset + 3] << 24;\r\n}\r\n\r\n/** Writes a 32-bit integer to the specified buffer. */\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\n/** Reads a 64-bit integer from the specified buffer. */\r\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\r\n  var lo = readI32(buffer, offset);\r\n  var hi = readI32(buffer, offset + 4);\r\n  return i64_new(lo, hi);\r\n}\r\n\r\n/** Writes a 64-bit integer to the specified buffer. */\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\n/** Reads a 32-bit float from the specified buffer. */\r\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\r\n  return i32_as_f32(readI32(buffer, offset));\r\n}\r\n\r\n/** Writes a 32-bit float to the specified buffer. */\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\n/** Reads a 64-bit float from the specified buffer. */\r\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\r\n  return i64_as_f64(readI64(buffer, offset));\r\n}\r\n\r\n/** Writes a 64-bit float to the specified buffer. */\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode.DOLLAR\r\n      || c == CharCode._\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + (hi - lo) / 2;\r\n    mid -= mid % 2;\r\n    if (map[mid] <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < map[mid]) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\n import {\r\n  Compiler,\r\n  ConversionKind,\r\n  WrapMode\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI64High,\r\n  getConstValueI64Low,\r\n  getConstValueI32\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  FunctionPrototype,\r\n  Class,\r\n  Field,\r\n  OperatorKind,\r\n  FlowFlags\r\n} from \"./program\";\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  var arg0: ExpressionRef,\r\n      arg1: ExpressionRef,\r\n      arg2: ExpressionRef,\r\n      ret: ExpressionRef;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once/ it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // types\r\n\r\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.SIGNED)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      compiler.currentType = Type.bool;\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      if (classType) {\r\n        let stringInstance = compiler.program.stringInstance;\r\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\r\n      }\r\n      return module.createI32(0);\r\n    }\r\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      return classType != null && classType.lookupOverload(OperatorKind.INDEXED_GET) != null\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n\r\n    // math\r\n\r\n    case \"clz\": { // clz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ClzI64\r\n              : UnaryOp.ClzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ctz\": { // ctz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.CtzI64\r\n              : UnaryOp.CtzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16: {\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.PopcntI64\r\n              : UnaryOp.PopcntI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\r\n            compiler.currentType\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret; // possibly overflows\r\n    }\r\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\r\n            compiler.currentType\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret; // possibly overflowws\r\n    }\r\n    case \"abs\": { // abs<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          // possibly overflows, e.g. abs<i8>(-128) == 128\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\r\n          ret = module.createSelect( // x > 0 ? x : 0-x\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI32, // ifFalse\r\n              module.createI32(0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32)\r\n            ),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              module.createI32(0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              compiler.options.usizeType.toNativeZero(module),\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            ),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\r\n              compiler.options.usizeType.toNativeZero(module)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal.index, arg0),\r\n            module.createBinary(BinaryOp.SubI64,\r\n              module.createI64(0, 0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n            ),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64),\r\n              module.createI64(0, 0)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"max\": { // max<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"min\": { // min<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let flow = compiler.currentFunction.flow;\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          compiler.currentFunction.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"ceil\": { // ceil<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"floor\": { // floor<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"nearest\": { // nearest<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\r\n      if (operands.length != 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      switch (typeArguments[0].kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            compiler.currentType = typeArguments[0];\r\n            return module.createUnreachable();\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          arg0 = compiler.compileExpression(\r\n            operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: { // small integers and void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return ret;\r\n    }\r\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        // case TypeKind.VOID:\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"trunc\": { // trunc<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments && typeArguments.length) {\r\n        compiler.currentType = typeArguments[0];\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // memory access\r\n\r\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return module.createLoad(\r\n        typeArguments[0].byteSize,\r\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > typeArguments[0].size\r\n          ? (compiler.currentType = contextualType).toNativeType()\r\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\r\n        offset\r\n      );\r\n    }\r\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (operands.length < 2 || operands.length > 3) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n          : ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let type: Type;\r\n      if (\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        (\r\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\r\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateConstantOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\r\n    }\r\n    case \"sizeof\": { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(byteSize);\r\n        } else {\r\n          ret = module.createI64(byteSize, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(byteSize, 0);\r\n        } else {\r\n          ret = module.createI32(byteSize);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"alignof\": { // alignof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      let alignLog2: i32;\r\n      switch (byteSize) {\r\n        case 1: { alignLog2 = 0; break; }\r\n        case 2: { alignLog2 = 1; break; }\r\n        case 4: { alignLog2 = 2; break; }\r\n        case 8: { alignLog2 = 3; break; }\r\n        default: { assert(false); return module.createUnreachable(); }\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(alignLog2);\r\n        } else {\r\n          ret = module.createI64(alignLog2, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(alignLog2, 0);\r\n        } else {\r\n          ret = module.createI32(alignLog2);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length > 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let classType = typeArguments[0].classReference;\r\n      if (!classType) {\r\n        compiler.error( // TODO: better error\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.createI32(offset);\r\n        } else {\r\n          return module.createI64(offset);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.createI64(offset);\r\n        } else {\r\n          return module.createI32(offset);\r\n        }\r\n      }\r\n    }\r\n\r\n    // control flow\r\n\r\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (operands.length != 3) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      }\r\n      let type = compiler.currentType;\r\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg2 = compiler.makeIsTrueish(\r\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\r\n        compiler.currentType\r\n      );\r\n      compiler.currentType = type;\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        default: { // any other value type\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unreachable\": { // unreachable() -> *\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // host operations\r\n\r\n    case \"current_memory\": { // current_memory() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.CurrentMemory);\r\n    }\r\n    case \"grow_memory\": { // grow_memory(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        arg0 = module.createUnreachable();\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\r\n    }\r\n    // see: https://github.com/WebAssembly/bulk-memory-operations\r\n    case \"move_memory\": { // move_memory(dest: usize, src: usize: n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n    case \"set_memory\": { // set_memory(dest: usize, value: u8, n: usize) -> void\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        Type.u32,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      throw new Error(\"not implemented\");\r\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\r\n    }\r\n\r\n    // other\r\n\r\n    case \"changetype\": { // changetype<T!>(value: *) -> T\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpressionRetainType(\r\n        operands[0],\r\n        typeArguments[0],\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = typeArguments[0];\r\n      if (compiler.currentType.size != typeArguments[0].size) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\r\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\r\n      return arg0; // any usize to any usize\r\n    }\r\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else if (operands.length > 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\r\n      }\r\n\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) {\r\n          compiler.currentType = Type.void;\r\n          return module.createNop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.createF32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.createF64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n        compiler.currentType = Type.void;\r\n      } else {\r\n        switch (compiler.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            let flow = compiler.currentFunction.flow;\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(\r\n              compiler.currentType,\r\n              !flow.canOverflow(arg0, compiler.currentType)\r\n            );\r\n            ret = module.createIf(\r\n              module.createTeeLocal(tempLocal.index, arg0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32:\r\n          default: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\r\n            ret = module.createIf(\r\n              module.createTeeLocal(tempLocal.index, arg0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32, false);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF32(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64, false);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF64(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case \"unchecked\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let flow = compiler.currentFunction.flow;\r\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\r\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\r\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\r\n      return ret;\r\n    }\r\n    case \"call_indirect\": { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\r\n      if (operands.length < 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let returnType: Type;\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        returnType = typeArguments[0];\r\n      } else {\r\n        returnType = contextualType;\r\n      }\r\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\r\n      if (compiler.currentType.kind != TypeKind.U32) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          operands[0].range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let numOperands = operands.length - 1;\r\n      let operandExprs = new Array<ExpressionRef>(numOperands);\r\n      let signatureParts = new Array<string>(numOperands + 1);\r\n      let nativeReturnType = returnType.toNativeType();\r\n      let nativeParamTypes = new Array<NativeType>(numOperands);\r\n      for (let i = 0; i < numOperands; ++i) {\r\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\r\n        let operandType = compiler.currentType;\r\n        signatureParts[i] = operandType.toSignatureString();\r\n        nativeParamTypes[i] = operandType.toNativeType();\r\n      }\r\n      signatureParts[numOperands] = returnType.toSignatureString();\r\n      let typeName = signatureParts.join(\"\");\r\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\r\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\r\n      compiler.currentType = returnType;\r\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\r\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\r\n      return module.createCallIndirect(arg0, operandExprs, typeName);\r\n    }\r\n\r\n    // conversions\r\n\r\n    case \"i8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i8,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i16,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"i64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"isize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u8\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u8,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u16\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u16,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"u64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"usize\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"bool\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.bool,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"f32\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.f32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case \"f64\": {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.f64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n  }\r\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\r\n  if (expr) {\r\n    if (typeArguments && typeArguments.length) {\r\n      compiler.error(\r\n        DiagnosticCode.Type_0_is_not_generic,\r\n        reportNode.range, prototype.internalName\r\n      );\r\n    }\r\n    return expr;\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Operation_not_supported,\r\n    reportNode.range\r\n  );\r\n  return module.createUnreachable();\r\n}\r\n\r\n/** Defers an inline-assembler-like call to a built-in function. */\r\nfunction deferASMCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  switch (prototype.internalName) {\r\n\r\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\r\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\r\n    //   and, or, xor, shl, shr_u, shr_s\r\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\r\n\r\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\r\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\r\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\r\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\r\n\r\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\r\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\r\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\r\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\r\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\r\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n\r\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\r\nfunction deferASM(\r\n  name: string,\r\n  compiler: Compiler,\r\n  typeArgument: Type,\r\n  operands: Expression[],\r\n  valueType: Type,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var prototype = assert(compiler.program.elementsLookup.get(name));\r\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\r\n}\r\n\r\n/** Evaluates the constant type of a type argument *or* expression. */\r\nfunction evaluateConstantType(\r\n  compiler: Compiler,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  reportNode: Node\r\n): Type | null {\r\n  if (operands.length == 0) { // requires type argument\r\n    if (!typeArguments || typeArguments.length != 1) {\r\n      compiler.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n      );\r\n      return null;\r\n    }\r\n    return typeArguments[0];\r\n  }\r\n  if (operands.length == 1) { // optional type argument\r\n    if (typeArguments) {\r\n      if (typeArguments.length == 1) {\r\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        if (typeArguments.length) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return null;\r\n        }\r\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      }\r\n    } else {\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n    }\r\n    return compiler.currentType;\r\n  }\r\n  if (typeArguments && typeArguments.length > 1) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.range, \"1\", typeArguments.length.toString(10)\r\n    );\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Expected_0_arguments_but_got_1,\r\n    reportNode.range, \"1\", operands.length.toString(10)\r\n  );\r\n  return null;\r\n}\r\n\r\n/** Evaluates a `constantOffset` argument.*/\r\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I64 ||\r\n      getConstValueI64High(expr) != 0 ||\r\n      (value = getConstValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I32 ||\r\n      (value = getConstValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\nconst allocateInternalName = \"allocate_memory\";\r\n\r\n/** Compiles a memory allocation for an instance of the specified class. */\r\nexport function compileAllocate(\r\n  compiler: Compiler,\r\n  classInstance: Class,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  assert(classInstance.program == program);\r\n  var module = compiler.module;\r\n  var options = compiler.options;\r\n\r\n  var allocatePrototype = program.elementsLookup.get(allocateInternalName);\r\n  if (!allocatePrototype) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_find_name_0,\r\n      reportNode.range, allocateInternalName\r\n    );\r\n    program.info(\r\n      DiagnosticCode.An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf,\r\n      reportNode.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n  if (allocatePrototype.kind != ElementKind.FUNCTION_PROTOTYPE) {\r\n    program.error(\r\n      DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n      reportNode.range, allocatePrototype.internalName\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  var allocateInstance = (<FunctionPrototype>allocatePrototype).resolve(); // reports\r\n  if (!(allocateInstance && compiler.compileFunction(allocateInstance))) return module.createUnreachable();\r\n\r\n  compiler.currentType = classInstance.type;\r\n  return module.createCall(\r\n    allocateInstance.internalName, [\r\n      options.isWasm64\r\n        ? module.createI64(classInstance.currentMemoryOffset)\r\n        : module.createI32(classInstance.currentMemoryOffset)\r\n    ],\r\n    options.nativeSizeType\r\n  );\r\n}\r\n\r\nconst abortInternalName = \"abort\";\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringType = program.typesLookup.get(\"string\"); // might be intended\r\n  if (!stringType) return module.createUnreachable();\r\n\r\n  var abortPrototype = program.elementsLookup.get(abortInternalName); // might be intended\r\n  if (!abortPrototype || abortPrototype.kind != ElementKind.FUNCTION_PROTOTYPE) return module.createUnreachable();\r\n\r\n  var abortInstance = (<FunctionPrototype>abortPrototype).resolve(); // reports\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\r\n\r\n  var messageArg = message != null\r\n    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    : stringType.toNativeZero(module);\r\n\r\n  var filenameArg = compiler.compileStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.createBlock(null, [\r\n    module.createCallImport(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.createI32(reportNode.range.line),\r\n        module.createI32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.createUnreachable()\r\n  ]);\r\n}\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__22__;","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\n\r\nfor (var key in binaryen)\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\"))\r\n    global[key] = binaryen[key];\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.allocate_memory = function(size) {\r\n  if (!size) return 0; // should be safe in our case\r\n  return binaryen._malloc(size);\r\n};\r\n\r\nglobal.free_memory = function(ptr) {\r\n  if (ptr) binaryen._free(ptr);\r\n};\r\n\r\nglobal.move_memory = function(dest, src, n) {\r\n  return binaryen._memmove(dest, src, n);\r\n};\r\n\r\nglobal.store = function(ptr, val) {\r\n  binaryen.HEAPU8[ptr] = val;\r\n};\r\n\r\nglobal.load = function(ptr) {\r\n  return binaryen.HEAPU8[ptr];\r\n};\r\n\r\n// Implement module stubs\r\n\r\nconst Module = require(\"../../module\").Module;\r\n\r\nModule.prototype.toText = function toText() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrint(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n\r\nModule.prototype.toAsmjs = function toAsmjs() {\r\n  var previousPrint = binaryen.print;\r\n  var ret = \"\";\r\n  binaryen.print = function(x) { ret += x + \"\\n\" };\r\n  _BinaryenModulePrintAsmjs(this.ref);\r\n  binaryen.print = previousPrint;\r\n  return ret;\r\n};\r\n","module.exports = globalScope => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n\r\n  globalScope[\"allocate_memory\"] = function allocate_memory(size) {\r\n    if (!(size >>>= 0)) return 0;\r\n\r\n    if (HEAP_OFFSET + size > HEAP.length) {\r\n      var oldHeap = HEAP;\r\n      HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n      HEAP.set(oldHeap);\r\n    }\r\n\r\n    var ptr = HEAP_OFFSET;\r\n    if ((HEAP_OFFSET += size) & 7)\r\n      HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n\r\n    return ptr;\r\n  };\r\n\r\n  globalScope[\"free_memory\"] = function free_memory(ptr) {\r\n    // TODO\r\n  };\r\n\r\n  globalScope[\"move_memory\"] = function move_memory(dest, src, size) {\r\n    HEAP.copyWithin(dest, src, src + size);\r\n  };\r\n\r\n  globalScope[\"store\"] = function store(ptr, value, offset) {\r\n    HEAP[ptr + (offset | 0)] = value;\r\n  };\r\n\r\n  globalScope[\"load\"] = function load(ptr, offset) {\r\n    return HEAP[ptr + (offset | 0)];\r\n  };\r\n};\r\n","module.exports = globalScope => {\r\n  globalScope[\"JSMath\"] = Math;\r\n};\r\n","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value: 127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value: 32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: 0, writable: false },\r\n  \"MAX_VALUE\": { value: 1, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\r\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\r\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"ctz\"] = function ctz(value) {\r\n  var c = Math.clz32(value & -value);\r\n  return value ? 31 - c : c;\r\n};\r\n\r\nglobalScope[\"popcnt\"] = function popcnt(value) {\r\n  value -= value >>> 1 & 0x55555555;\r\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\r\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\r\n};\r\n\r\nglobalScope[\"rotl\"] = function rotl(value, shift) {\r\n  shift &= 31;\r\n  return (value << shift) | (value >>> (32 - shift));\r\n};\r\n\r\nglobalScope[\"rotr\"] = function rotr(value, shift) {\r\n  shift &= 31;\r\n  return (value >>> shift) | (value << (32 - shift));\r\n};\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\n// Adopt code from https://github.com/rfk/wasm-polyfill\r\nglobalScope[\"nearest\"] = function nearest(value) {\r\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\r\n    return 2.0 * Math.round(value * 0.5);\r\n  }\r\n  return Math.round(value);\r\n};\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"copysign\"] = function copysign(x, y) {\r\n  return Math.abs(x) * Math.sign(y);\r\n};\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\r\n  return parseInt(str, undefined) | 0;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isReference\"] = function isClass(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\n\r\nglobalScope[\"unchecked\"] = function(expr) {\r\n  return expr;\r\n};\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nrequire(\"./portable/math\")(globalScope);\r\nrequire(\"./portable/memory\")(globalScope);\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\nimport \"../../../std/portable\";\r\nimport \"./binaryen\";\r\nimport \"./i64\";\r\nimport \"./float\";\r\n"],"sourceRoot":""}