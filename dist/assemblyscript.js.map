{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_MUTABLE_GLOBAL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocArray","feature_1","Feature","target_1","Target","typeinfo_1","Typeinfo","TypeinfoFlags","__export","isPowerOf2","x","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","withRelatedRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","emitDiagnostic","info","infoRelated","warning","warningRelated","error","errorRelated","common_1","tokenizer_1","Token","Range","NodeKind","nodeIsConstantValue","kind","LITERAL","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","nodeIsGenericCallable","Node","createTypeName","typeName","TypeName","identifier","next","createSimpleTypeName","createIdentifierExpression","createNamedType","typeArguments","isNullable","type","NamedTypeNode","createFunctionType","parameters","returnType","explicitThisType","FunctionTypeNode","createOmittedType","createTypeParameter","extendsType","defaultType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","decoratorNameToKind","createComment","node","CommentNode","commentKind","isQuoted","expr","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","declaration","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","values","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","flags","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","createExportDefaultStatement","ExportDefaultStatement","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","localName","exportedName","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","createImportStatementWithWildcard","createImportDeclaration","foreignName","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","arrowKind","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","TypeNode","_super","__extends","_this","apply","TYPENAME","NAMEDTYPE","FUNCTIONTYPE","TYPEPARAMETER","ParameterKind","DecoratorKind","PARAMETER","implicitFieldDeclaration","NONE","is","flag","isAny","set","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","LAZY","OPERATOR","SEALED","UNMANAGED","UNSAFE","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","BINARY","numTypeArguments","numArguments","CLASS","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","STRING","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","SourceKind","Statement","Source","SOURCE","parent","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","LIBRARY","DeclarationStatement","INDEXSIGNATUREDECLARATION","VariableLikeDeclarationStatement","BLOCK","BREAK","CLASSDECLARATION","CONTINUE","DO","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","EXPORTDEFAULT","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","ArrowKind","FUNCTIONDECLARATION","clone","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","endsWith","findDecorator","k","decorator","isTypeOmitted","OperatorKind","diagnostics_1","types_1","ast_1","resolver_1","flow_1","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","operatorKindFromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","Program","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","typeClasses","managedClasses","nextClassId","nativeDummySignature","nativeSource","nativeFile","File","internalName","resolver","Resolver","writeRuntimeHeader","buffer","offset","classInstance","payloadSize","writeI32","id","makeNativeVariableDeclaration","makeNativeTypeDeclaration","makeNativeFunctionDeclaration","makeNativeNamespaceDeclaration","makeNativeFunction","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","GENERIC","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","queuedExportsStar_1","__values","queuedExportsStar_1_1","done","_g","__read","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","lookupForeign","Module_0_has_no_exported_member_1","asImportedNamespace","queuedExports_1","queuedExports_1_1","_h","exports_1","e_3","exports_1_1","_j","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerNativeTypeClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","Class_0_is_sealed_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_k","firstChar","parseInt","Error","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","_l","_m","isEntry","_o","e_6","_p","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","MODULE_EXPORT","instanceMembers","_c","_d","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FIELD","_e","_f","setType","typeKind","className","classElement","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","merged","tryMerge","Duplicate_identifier_0","requireGlobal","lookupExport","fileQueuedExports","checkDecorators","acceptedFlags","decoratorKindToFlag","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeProperty","initializeMethod","STATIC","INTERFACE_PROTOTYPE","READONLY","ABSTRACT","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","AMBIENT","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","Element","program","shadowType","FILE","current","unset","originalDeclaration","actual","isBound","TypedElement","RESOLVED","startFunction","Signature","isImport","lookup","includes","exports_2","exports_2_1","_b","memberName","TYPEDEFINITION","mangleInternalName","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Parameter","Local","index","LOCAL","instances","boundPrototypes","toBound","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","FunctionTarget","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","Field","memoryOffset","firstDeclaration","Property","getterInstance","setterInstance","AcyclicState","_isInterface","constructorPrototype","extends","basePtototype","Class","base","INTERFACE","currentMemoryOffset","constructorInstance","_id","_acyclic","rttiFlags","asClass","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","baseName","baseType","typeParameterNodes","isBuiltinArray","lengthField","lookupOverload","isAssignableTo","target","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","writeField","baseOffset","writeI8","writeI16","writeF32","writeF64","getTypeArgumentsTo","extendedPrototype","getArrayValueType","abvInstance","acyclic","hasCycle","cyclesTo","other","except","classReference","Interface","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","srcMembers_1","srcMembers_1_1","isInstance","asGlobal","NativeType","ExpressionId","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeUnreachable","_BinaryenTypeAuto","FeatureFlags","_BinaryenFeatureAtomics","_BinaryenFeatureMutableGlobals","_BinaryenFeatureNontrappingFPToInt","_BinaryenFeatureSIMD128","_BinaryenFeatureBulkMemory","_BinaryenFeatureSignExt","_BinaryenFeatureExceptionHandling","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenLocalGetId","_BinaryenLocalSetId","_BinaryenGlobalGetId","_BinaryenGlobalSetId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicNotifyId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDBitselectId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","HostOp","_BinaryenMemorySize","_BinaryenMemoryGrow","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","memory","allocate","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","store","_BinaryenLiteralVec128","unary","op","_BinaryenUnary","binary","_BinaryenBinary","host","operands","allocPtrArray","_BinaryenHost","local_get","_BinaryenLocalGet","local_tee","_BinaryenLocalTee","global_get","_BinaryenGlobalGet","load","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","atomic_load","_BinaryenAtomicLoad","atomic_store","_BinaryenAtomicStore","atomic_rmw","_BinaryenAtomicRMW","atomic_cmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","atomic_wait","timeout","expectedType","_BinaryenAtomicWait","atomic_notify","notifyCount","_BinaryenAtomicNotify","local_set","_BinaryenLocalSet","global_set","_BinaryenGlobalSet","block","children","_BinaryenBlock","br","_BinaryenBreak","drop","_BinaryenDrop","loop","_BinaryenLoop","if","_BinaryenIf","nop","_BinaryenNop","return","_BinaryenReturn","select","_BinaryenSelect","switch","defaultName","numNames","strs","_BinaryenSwitch","_BinaryenCall","call_indirect","_BinaryenCallIndirect","unreachable","_BinaryenUnreachable","memory_copy","size","_BinaryenMemoryCopy","memory_fill","_BinaryenMemoryFill","simd_extract","vec","idx","_BinaryenSIMDExtract","simd_replace","_BinaryenSIMDReplace","simd_shuffle","vec1","vec2","mask","_BinaryenSIMDShuffle","simd_bitselect","cond","_BinaryenSIMDBitselect","simd_shift","shift","_BinaryenSIMDShift","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","getFeatures","_BinaryenModuleGetFeatures","setFeatures","featureFlags","_BinaryenModuleSetFeatures","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","_BinaryenExpressionGetId","Return","_BinaryenReturnGetValue","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getLocalGetIndex","getLocalSetIndex","_BinaryenLocalSetGetIndex","getLocalSetValue","_BinaryenLocalSetGetValue","isLocalTee","_BinaryenLocalSetIsTee","getGlobalGetName","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","getCallTarget","_BinaryenCallGetTarget","getCallOperandCount","_BinaryenCallGetNumOperands","getCallOperand","_BinaryenCallGetOperand","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Break","Block","numChildren","traverse","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDBitselect","_BinaryenSIMDBitselectGetLeft","_BinaryenSIMDBitselectGetRight","_BinaryenSIMDBitselectGetCond","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Select","Drop","Host","Nop","program_1","module_1","TypeKind","TypeFlags","v128_zero","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","auto","clz","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isStrictlyAssignableTo","commonDenominator","signednessIsImportant","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","g","e","window","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPE","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","isIllegalVariableIdentifier","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","ReportMode","builtins_1","currentThisExpression","currentElementExpression","resolveType","context","reportMode","REPORT","parameterNodes","parameterNode","REST","parameterTypeNode","Type_expected","returnTypeNode","typeNode","typeArgumentNodes","isSimpleType","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","type_1","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveTypeArguments","Cannot_find_name_0","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","resolveIdentifier","ensureResolvedLazyGlobal","resolvePropertyAccessExpression","propertyAccess","contextualType","targetExpression","resolveExpression","propertyName","indexedGet","arrayType","resolvedType","resolveElementAccessExpression","elementAccess","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","resolveAssertionExpression","resolveUnaryPrefixExpression","resolveUnaryPostfixExpression","resolveBinaryExpression","resolveThisExpression","resolveSuperExpression","actualFunction","resolveLiteralExpression","resolveCallExpression","NONNULL","i64_sub","i64_zero","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","literalType","BuiltinSymbols","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","actualParent","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","functionTypeNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMembers_1","baseMembers_1_1","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","atEnd","fieldInstance","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","LocalFlags","FlowFlags","ANY_CATEGORICAL","ANY_CONDITIONAL","FieldFlags","scopedLocals","fieldFlags","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","createInline","fork","branch","slice","getTempLocal","temps","k_1","unsetLocalFlag","pop","getAutoreleaseLocal","SCOPED","setLocalFlag","RETAINED","freeTempLocal","getAndFreeTempLocal","getScopedLocal","addScopedLocal","scopedLocal","addScopedAlias","existingLocal","scopedAlias","freeScopedLocals","scope","isLocalFlag","defaultIfInlined","isAnyLocalFlag","pushBreakLabel","stack","popBreakLabel","inherit","inheritConditional","CONDITIONALLY_RETAINED","READFROM","CONDITIONALLY_READFROM","WRITTENTO","CONDITIONALLY_WRITTENTO","inheritMutual","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","max","isNonnull","inheritNonnullIfTrue","EqzI32","EqzI64","inheritNonnullIfFalse","EqI32","EqI64","NeI32","NeI64","canOverflow","WRAPPED","canConversionOverflow","global_1","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","MIN_VALUE","fromType","last","instanceName","levels","findUsedLocalsVisit","used","findUsedLocals","Options","importMemory","sharedMemory","importTable","explicitStart","features","feature","Constraints","RuntimeFeatures","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","runtimeFeatures","skippedAutoreleases","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","Atomics","MutableGloabls","SIMD128","BulkMemory","SignExt","compile","startFunctionInstance","startFunctionBody","currentFlow","currentBody","heap_base","rtti_base","files","compileFile","compileExports","startIsEmpty","started","unshift","funcRef","ensureFunctionType","compileVisitGlobals","compileVisitMembers","compileRTTI","i64_align","isSharedMemory","i64_shr_u","ensureModuleExports","members_1","members_1_1","ensureModuleExport","prefix","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","ensureModuleFieldGetter","ensureModuleFieldSetter","isUnmanaged","subPrefix","loadExpr","isManaged","makeRetain","nativeType","nativeSizeType","valueExpr","makeRetainRelease","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","element_1","exportsStar_1","exportsStar_1_1","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","initAutoreleaseSkipped","initializerNode","compileExpression","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","initializeInStart","Mutable_value_cannot_be_inlined","decoratorNodes","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","makeGlobalAssignment","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","MAIN","indexBefore","performAutoreleases","nonNull","temp","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","previousType","An_implementation_cannot_be_declared_in_ambient_contexts","flatten","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureStaticString","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","ensureStaticArrayBuffer","elementType","byteLength","bufferInstance","buf","writeI64","ensureStaticArrayHeader","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","alwaysFalse","terminates","continues","breaks","fallsThrough","alwaysTrue","stmts_1","incrExpr","loopLabel","bodyStatement","needsLabel","ifTrueStmts","ifTrueFlow","ifFalseFlow","ifFalseStmts","valueExpression","constraints","ANY_RETAINED","numCases","tempLocal","tempLocalIndex","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","count","newArgs","compileAbort","numDeclarations","initializers","isConst","_const_declarations_must_be_initialized","CONSTANT","compileInlineConstant","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","convertExpression","ensureSmallIntegerWrap","explicit","Object_is_possibly_null","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","inheritedConstraints","PREFIX","exceptVoid","Expression_is_never_null","tempIndex","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","AllTrueVecI8x16","EqVecI8x16","AnyTrueVecI8x16","NeVecI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","moveAutorelease","rightStmts","makeRelease","retainLeftInThen","makeAssignment","compileUnaryOverload","thisExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr_1","thisExpr","elementExpr","tempLocalTarget","tempLocalElement","makeSkippedRelease","nativeFieldType","nativeThisType","tempThis","tempValue","flow_2","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","inferredTypes","argumentNodes","argumentExprs","templateName","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","argumentExpressions","thisArg","parameterTypes_1","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","usedLocals","paramExpr","paramType","argumentLocal","baseInstance","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","oldExpr","newExpr","temp1","temp2","undoAutorelease","fromInnerFlow","toOuterFlow","clearFlags","lengthBefore","skipAutorelease","expr_1","theOperands","numOperands","isCallImport","allOptionalsAreConstant","expr_2","makeCallIndirect","numExpressions","exprs","contextualSignature","numPresentParameters","thisTypeNode","maybeCompileEnclosingSource","flow_3","actualFunction_1","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","tempDataStart","nativeElementType","bufferAddress","arraySegment","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","compileInstantiate","baseCtor","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","IfThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","thisLocalIndex","makeInstanceOfClass","idTemp","idExpr","conditions","single","Auto","compiler_1","compiler","isAsm","directize","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","SWALLOW","isConstant","sizeof","checkTypeRequired","alignof","ctz","checkArgsOptional","typeArgumentsRange","Type_0_has_no_property_1","popcnt","checkTypeOptional","ClzI64","CtzI64","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","AbsF32","AbsF64","MaxF32","MaxF64","tempLocal0","min","MinF32","MinF64","floor","CeilF32","FloorF32","CeilF64","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","outType","immOffset","evaluateImmediateOffset","immAlign","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","Add","Sub","And","Or","Xor","Xchg","memory_size","MemorySize","memory_grow","MemoryGrow","alreadyUnchecked","call_direct","arg0Type","operandExprs","nativeParamTypes","operandType","instantiate","User_defined_0","Expression_must_be_a_compile_time_constant","off","v128_splat","SplatVecI8x16","SplatVecI16x8","SplatVecI32x4","SplatVecI64x2","SplatVecF32x4","SplatVecF64x2","v128_extract_lane","ExtractLaneSVecI8x16","ExtractLaneUVecI8x16","ExtractLaneSVecI16x8","ExtractLaneUVecI16x8","ExtractLaneVecI32x4","ExtractLaneVecI64x2","ExtractLaneVecF32x4","ExtractLaneVecF64x2","maxIdx","v128_replace_lane","ReplaceLaneVecI8x16","ReplaceLaneVecI16x8","ReplaceLaneVecI32x4","ReplaceLaneVecI64x2","ReplaceLaneVecF32x4","ReplaceLaneVecF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","v128_add","v128_sub","v128_mul","v128_div","v128_add_saturate","v128_sub_saturate","v128_min","v128_max","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","AddVecI8x16","AddVecI16x8","AddVecI32x4","AddVecI64x2","AddVecF32x4","AddVecF64x2","SubVecI8x16","SubVecI16x8","SubVecI32x4","SubVecI64x2","SubVecF32x4","SubVecF64x2","MulVecI8x16","MulVecI16x8","MulVecI32x4","MulVecF32x4","MulVecF64x2","DivVecF32x4","DivVecF64x2","AddSatSVecI8x16","AddSatUVecI8x16","AddSatSVecI16x8","AddSatUVecI16x8","SubSatSVecI8x16","SubSatUVecI8x16","SubSatSVecI16x8","SubSatUVecI16x8","MinVecF32x4","MinVecF64x2","MaxVecF32x4","MaxVecF64x2","EqVecI16x8","EqVecI32x4","EqVecF32x4","EqVecF64x2","NeVecI16x8","NeVecI32x4","NeVecF32x4","NeVecF64x2","LtSVecI8x16","LtUVecI8x16","LtSVecI16x8","LtUVecI16x8","LtSVecI32x4","LtUVecI32x4","LtVecF32x4","LtVecF64x2","LeSVecI8x16","LeUVecI8x16","LeSVecI16x8","LeUVecI16x8","LeSVecI32x4","LeUVecI32x4","LeVecF32x4","LeVecF64x2","GtSVecI8x16","GtUVecI8x16","GtSVecI16x8","GtUVecI16x8","GtSVecI32x4","GtUVecI32x4","GtVecF32x4","GtVecF64x2","GeSVecI8x16","GeUVecI8x16","GeSVecI16x8","GeUVecI16x8","GeSVecI32x4","GeUVecI32x4","GeVecF32x4","GeVecF64x2","v128_neg","v128_abs","v128_sqrt","v128_convert","v128_trunc","NegVecI8x16","NegVecI16x8","NegVecI32x4","NegVecI64x2","NegVecF32x4","NegVecF64x2","AbsVecF32x4","AbsVecF64x2","SqrtVecF32x4","SqrtVecF64x2","ConvertSVecI32x4ToVecF32x4","ConvertUVecI32x4ToVecF32x4","ConvertSVecI64x2ToVecF64x2","ConvertUVecI64x2ToVecF64x2","TruncSatSVecF32x4ToVecI32x4","TruncSatUVecF32x4ToVecI32x4","TruncSatSVecF64x2ToVecI64x2","TruncSatUVecF64x2ToVecI64x2","v128_shl","v128_shr","ShlVecI8x16","ShlVecI16x8","ShlVecI32x4","ShlVecI64x2","ShrSVecI8x16","ShrUVecI8x16","ShrSVecI16x8","ShrUVecI16x8","ShrSVecI32x4","ShrUVecI32x4","ShrSVecI64x2","ShrUVecI64x2","v128_and","v128_or","v128_xor","AndVec128","OrVec128","XorVec128","v128_not","NotVec128","v128_bitselect","v128_any_true","v128_all_true","AnyTrueVecI16x8","AnyTrueVecI32x4","AnyTrueVecI64x2","AllTrueVecI16x8","AllTrueVecI32x4","AllTrueVecI64x2","idof","visit_globals","visit_members","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_u_xor","i32_atomic_rmw16_u_xor","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_s_f32x4_sat","i32x4_trunc_u_f32x4_sat","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_s_f64x2_sat","i64x2_trunc_u_f64x2_sat","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_s_i32x4","f32x4_convert_u_i32x4","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_s_i64x2","f64x2_convert_u_i64x2","v8x16_shuffle","tryDeferASM","messageArg","filenameArg","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","memory_allocate","memory_free","memory_reset","runtime_instanceof","runtime_flags","runtime_allocate","runtime_reallocate","runtime_register","runtime_discard","runtime_makeArray","capabilities","nativeSizeSize","ftype","blocks","outer","lastId","managedClasses_1","managedClasses_1_1","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","fieldOffset","managedClasses_2","managedClasses_2_1","abvPrototype","managedClasses_3","managedClasses_3_1","isAcyclic","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","i64_to_string","ExportsWalker","includePrivate","seen","walk","visitFile","visitElement","visitAlias","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","e_17","e_18","visitNamespace","visitClass","ContractMetadata","viewMethods","changeMethods","NEARBindingsBuilder","typeMapping","u128","nonNullableTypes","generatedEncodeFunctions","generatedDecodeFunctions","exportedClasses","exportedFunctions","classInjections","classRanges","build","generateArgsParser","generateWrapperFunction","visitInterface","fields","map","paramName","forEach","generateDecodeFunction","generateHandlerMethods","generateEncodeFunction","generateFieldEncoder","valuePrefix","fieldsWithTypes","filter","indexOf","generateBasicSetterHandlers","nonBasicFields","generatePushHandler","isArrayType","setterType","setterValueType","matchingFields","fieldTypeName","encodeType","generateArrayHandlerMethods","setterTypeName","encodedTypeName","methodName","tryUsingImport","getFields","sourceExpr","injections","sourcesWithExport","getExports","console","log","importPath","generateHandler","cls","argType","fieldExpr","pushType","__spread","generateFunctionMetadata","res","parameterLen","parameterMap","mainSources","mainSource","copyImports","allImportsStr","concat","bracketIndex","classText","metadata","functionMetadata","JSON","stringify","getImports","declarationsStr","IDLBuilder","indentLevel","indent","typeToString","members_2","members_2_1","name_1","TSDBuilder","unknown","numMembers","members_3","members_3_1","name_2","isInterface","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","parseFunctionExpressionCommon","bodyExpression","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","state_1","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","round","y","sign","isTrueish","fromCodePoint","replaceAll","search","replacment","split","Number","capacity","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","__decorate","unmanaged","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoAssert","setImportMemory","setSharedMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","setExplicitStart","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","buildNEAR","buildRTTI","bitsetIs","bitsetSet","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","makeArray","cloned","makeSet","original_1","original_1_1","v","overrides","original_2","original_2_1","overrides_1","overrides_1_1","overrides_2","overrides_2_1","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","readI8","readI16","readF32","readF64","valueI64"],"mappings":"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C,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,M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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is the main function. */\n  MAIN = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common compiler symbols. */\nexport namespace CommonSymbols {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_MUTABLE_GLOBAL = \"ASC_FEATURE_MUTABLE_GLOBAL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const FixedArray = \"FixedArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  // runtime\n  export const abort = \"abort\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak, CharCode\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(range.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(range.line.toString(10));\n      sb.push(\",\");\n      sb.push(range.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  CommonSymbols,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.ASSERTION: // if kind=NONNULL\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PARENTHESIZED:\n    case NodeKind.PROPERTYACCESS:\n    case NodeKind.SUPER: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    var type = new NamedTypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    var type = new FunctionTypeNode();\n    type.range = range;\n    type.parameters = parameters;\n    type.returnType = returnType;\n    type.explicitThisType = explicitThisType;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return Node.createNamedType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name; // TODO: extract from range\n    expr.symbol = name; // TODO: Symbol.for(name)\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n          normalizedPath = LIBRARY_PREFIX + normalizedPath;\n        }\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    var stmt = new ExportDefaultStatement();\n    stmt.declaration = declaration;\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    stmt.arrowKind = arrowKind;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: TypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  kind = NodeKind.NAMEDTYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: TypeNode[] | null;\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  kind = NodeKind.FUNCTIONTYPE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: TypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: TypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        break;\n      }\n      case CharCode.l: {\n        if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Symbol. */\n  symbol: string; // TODO: symbol\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: TypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n  symbol = CommonSymbols.constructor;\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: TypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n  symbol = CommonSymbols.null_;\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  symbol = CommonSymbols.super_;\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n  symbol = CommonSymbols.this_;\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n  symbol = CommonSymbols.true_;\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n  symbol = CommonSymbols.false_;\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: NamedTypeNode;\n  /** Value type. */\n  valueType: TypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: TypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  kind = NodeKind.EXPORTDEFAULT;\n\n  /** Declaration being exported as default. */\n  declaration: DeclarationStatement;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: FunctionTypeNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: TypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next || name.identifier.text.length);\n  }\n  return false;\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonSymbols,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator,\n  ExportDefaultStatement\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes backing basic types like `i32`. */\n  typeClasses: Map<TypeKind,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Fixed array prototype reference. */\n  fixedArrayPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if not explicitly disabled. */\n  abortInstance: Function | null;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ref: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ref: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ref: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ref: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ref: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ref: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(classInstance.id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    assert(elementsByDeclaration.has(declaration));\n    return elementsByDeclaration.get(declaration)!;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\n    this.registerNativeType(CommonSymbols.void_, Type.void);\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\n      CommonSymbols.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.indexof, new TypeDefinition(\n      CommonSymbols.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.valueof, new TypeDefinition(\n      CommonSymbols.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonSymbols.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonSymbols.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_MUTABLE_GLOBAL, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            queuedImport.localIdentifier.text,\n            element,\n            true // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = queuedImport.localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile\n            ),\n            true // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonSymbols.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonSymbols.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonSymbols.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerNativeTypeClass(TypeKind.I8, CommonSymbols.I8);\n    this.registerNativeTypeClass(TypeKind.I16, CommonSymbols.I16);\n    this.registerNativeTypeClass(TypeKind.I32, CommonSymbols.I32);\n    this.registerNativeTypeClass(TypeKind.I64, CommonSymbols.I64);\n    this.registerNativeTypeClass(TypeKind.ISIZE, CommonSymbols.Isize);\n    this.registerNativeTypeClass(TypeKind.U8, CommonSymbols.U8);\n    this.registerNativeTypeClass(TypeKind.U16, CommonSymbols.U16);\n    this.registerNativeTypeClass(TypeKind.U32, CommonSymbols.U32);\n    this.registerNativeTypeClass(TypeKind.U64, CommonSymbols.U64);\n    this.registerNativeTypeClass(TypeKind.USIZE, CommonSymbols.Usize);\n    this.registerNativeTypeClass(TypeKind.BOOL, CommonSymbols.Bool);\n    this.registerNativeTypeClass(TypeKind.F32, CommonSymbols.F32);\n    this.registerNativeTypeClass(TypeKind.F64, CommonSymbols.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeTypeClass(TypeKind.V128, CommonSymbols.V128);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let firstChar = name.charCodeAt(0);\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n            this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n          } else {\n            let elementsByName = this.elementsByName;\n            let element = elementsByName.get(name);\n            if (element) {\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n              elementsByName.set(alias, element);\n            }\n            else throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonSymbols.Array, ElementKind.CLASS_PROTOTYPE);\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.FixedArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonSymbols.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonSymbols.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.lookupFunction(CommonSymbols.abort); // can be disabled\n    this.allocInstance = this.requireFunction(CommonSymbols.alloc);\n    this.reallocInstance = this.requireFunction(CommonSymbols.realloc);\n    this.freeInstance = this.requireFunction(CommonSymbols.free);\n    this.retainInstance = this.requireFunction(CommonSymbols.retain);\n    this.releaseInstance = this.requireFunction(CommonSymbols.release);\n    this.collectInstance = this.requireFunction(CommonSymbols.collect);\n    this.typeinfoInstance = this.requireFunction(CommonSymbols.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonSymbols.instanceof_);\n    this.visitInstance = this.requireFunction(CommonSymbols.visit);\n    this.allocArrayInstance = this.requireFunction(CommonSymbols.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (!(file.source.isEntry && exports)) continue;\n      for (let element of exports.values()) this.markModuleExport(element);\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a non-generic global function is present and returns it. */\n  private requireFunction(name: string): Function {\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerNativeTypeClass(typeKind: TypeKind, className: string): void {\n    assert(!this.typeClasses.has(typeKind));\n    var element = this.lookupGlobal(className);\n    if (element) {\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n      if (classElement) this.typeClasses.set(typeKind, classElement);\n    }\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let actual = elementsByName.get(name)!;\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (actual !== element) {\n        let merged = tryMerge(elementsByName.get(name)!, element);\n        if (!merged) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, name\n          );\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name);\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = decoratorNameToKind(decorator.name);\n        let flag = decoratorKindToFlag(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning( // TODO: not yet supported\n            DiagnosticCode.Operation_not_supported,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators,\n          (declaration.is(CommonFlags.READONLY)\n            ? DecoratorFlags.INLINE\n            : DecoratorFlags.NONE\n          ) | DecoratorFlags.LAZY | DecoratorFlags.UNSAFE\n        ),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, DecoratorFlags.UNSAFE)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else if (exports.has(\"default\")) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, \"default\"\n        );\n        return;\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, true);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): Namespace | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\n/** Translates a decorator kind to the respective decorator flag. */\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n    case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let actual = members.get(name)!;\n      if (actual.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(actual, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.isLibrary) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element): Namespace {\n    var ns = new Namespace(\n      name,\n      parent,\n      this.program.makeNativeNamespaceDeclaration(name)\n    );\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.type = Type.u32.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonSymbols.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonSymbols.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name);\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program,\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      __s = \"sig:\" + signature.toSignatureString(),\n      __s,\n      program,\n      program.nativeFile\n    );\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = Type.u32.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    do if (current === basePtototype) return true;\n    while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let merged = tryMerge(instanceMembers.get(name)!, element);\n      if (!merged) {\n        this.program.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          element.identifierNode.range, element.identifierNode.text\n        );\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY &&\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    /** Base class, if derived. */\n    base: Class | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n    this.base = base;\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var field = this.lookupInSelf(name);\n    if (field && field.kind == ElementKind.FIELD) {\n      let offset = baseOffset + (<Field>field).memoryOffset;\n      switch ((<Field>field).type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\n    while (current = current.base);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    switch (current.prototype) {\n      case program.i8ArrayPrototype: return Type.i8;\n      case program.i16ArrayPrototype: return Type.i16;\n      case program.i32ArrayPrototype: return Type.i32;\n      case program.i64ArrayPrototype: return Type.i64;\n      case program.u8ArrayPrototype:\n      case program.u8ClampedArrayPrototype: return Type.u8;\n      case program.u16ArrayPrototype: return Type.u16;\n      case program.u32ArrayPrototype: return Type.u32;\n      case program.u64ArrayPrototype: return Type.u64;\n      case program.f32ArrayPrototype: return Type.f32;\n      case program.f64ArrayPrototype: return Type.f64;\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\n      default: assert(false);\n    }\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var members = this.members;\n    if (members) {\n      for (let member of members.values()) {\n        if (\n          member.kind == ElementKind.FIELD &&\n          (current = (<Field>member).type.classReference) !== null &&\n          (\n            current === other ||\n            current.cyclesTo(other, except)\n          )\n        ) return true;\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      base,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  assert(!newer.members);\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./common\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32  = _BinaryenTypeInt32(),\n  I64  = _BinaryenTypeInt64(),\n  F32  = _BinaryenTypeFloat32(),\n  F64  = _BinaryenTypeFloat64(),\n  V128 = _BinaryenTypeVec128(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum FeatureFlags {\n  Atomics = _BinaryenFeatureAtomics(),\n  MutableGloabls = _BinaryenFeatureMutableGlobals(),\n  NontrappingFPToInt = _BinaryenFeatureNontrappingFPToInt(),\n  SIMD128 = _BinaryenFeatureSIMD128(),\n  BulkMemory = _BinaryenFeatureBulkMemory(),\n  SignExt = _BinaryenFeatureSignExt(),\n  ExceptionHandling = _BinaryenFeatureExceptionHandling()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  LocalGet = _BinaryenLocalGetId(),\n  LocalSet = _BinaryenLocalSetId(),\n  GlobalGet = _BinaryenGlobalGetId(),\n  GlobalSet = _BinaryenGlobalSetId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicNotify = _BinaryenAtomicNotifyId(),\n  SIMDExtract = _BinaryenSIMDExtractId(),\n  SIMDReplace = _BinaryenSIMDReplaceId(),\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\n  SIMDBitselect = _BinaryenSIMDBitselectId(),\n  SIMDShift = _BinaryenSIMDShiftId(),\n  MemoryInit = _BinaryenMemoryInitId(),\n  DataDrop = _BinaryenDataDropId(),\n  MemoryCopy = _BinaryenMemoryCopyId(),\n  MemoryFill = _BinaryenMemoryFillId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n\n  // see: https://github.com/WebAssembly/simd\n  SplatVecI8x16 = _BinaryenSplatVecI8x16(),\n  SplatVecI16x8 = _BinaryenSplatVecI16x8(),\n  SplatVecI32x4 = _BinaryenSplatVecI32x4(),\n  SplatVecI64x2 = _BinaryenSplatVecI64x2(),\n  SplatVecF32x4 = _BinaryenSplatVecF32x4(),\n  SplatVecF64x2 = _BinaryenSplatVecF64x2(),\n  NotVec128 = _BinaryenNotVec128(),\n  NegVecI8x16 = _BinaryenNegVecI8x16(),\n  AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\n  AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\n  NegVecI16x8 = _BinaryenNegVecI16x8(),\n  AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\n  AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\n  NegVecI32x4 = _BinaryenNegVecI32x4(),\n  AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\n  AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\n  NegVecI64x2 = _BinaryenNegVecI64x2(),\n  AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\n  AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\n  AbsVecF32x4 = _BinaryenAbsVecF32x4(),\n  NegVecF32x4 = _BinaryenNegVecF32x4(),\n  SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\n  AbsVecF64x2 = _BinaryenAbsVecF64x2(),\n  NegVecF64x2 = _BinaryenNegVecF64x2(),\n  SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\n  TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\n  TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\n  TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\n  TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\n  ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\n  ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\n  ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\n  ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2()\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64(),\n\n  // see: https://github.com/WebAssembly/simd\n  EqVecI8x16 = _BinaryenEqVecI8x16(),\n  NeVecI8x16 = _BinaryenNeVecI8x16(),\n  LtSVecI8x16 = _BinaryenLtSVecI8x16(),\n  LtUVecI8x16 = _BinaryenLtUVecI8x16(),\n  LeSVecI8x16 = _BinaryenLeSVecI8x16(),\n  LeUVecI8x16 = _BinaryenLeUVecI8x16(),\n  GtSVecI8x16 = _BinaryenGtSVecI8x16(),\n  GtUVecI8x16 = _BinaryenGtUVecI8x16(),\n  GeSVecI8x16 = _BinaryenGeSVecI8x16(),\n  GeUVecI8x16 = _BinaryenGeUVecI8x16(),\n  EqVecI16x8 = _BinaryenEqVecI16x8(),\n  NeVecI16x8 = _BinaryenNeVecI16x8(),\n  LtSVecI16x8 = _BinaryenLtSVecI16x8(),\n  LtUVecI16x8 = _BinaryenLtUVecI16x8(),\n  LeSVecI16x8 = _BinaryenLeSVecI16x8(),\n  LeUVecI16x8 = _BinaryenLeUVecI16x8(),\n  GtSVecI16x8 = _BinaryenGtSVecI16x8(),\n  GtUVecI16x8 = _BinaryenGtUVecI16x8(),\n  GeSVecI16x8 = _BinaryenGeSVecI16x8(),\n  GeUVecI16x8 = _BinaryenGeUVecI16x8(),\n  EqVecI32x4 = _BinaryenEqVecI32x4(),\n  NeVecI32x4 = _BinaryenNeVecI32x4(),\n  LtSVecI32x4 = _BinaryenLtSVecI32x4(),\n  LtUVecI32x4 = _BinaryenLtUVecI32x4(),\n  LeSVecI32x4 = _BinaryenLeSVecI32x4(),\n  LeUVecI32x4 = _BinaryenLeUVecI32x4(),\n  GtSVecI32x4 = _BinaryenGtSVecI32x4(),\n  GtUVecI32x4 = _BinaryenGtUVecI32x4(),\n  GeSVecI32x4 = _BinaryenGeSVecI32x4(),\n  GeUVecI32x4 = _BinaryenGeUVecI32x4(),\n  EqVecF32x4 = _BinaryenEqVecF32x4(),\n  NeVecF32x4 = _BinaryenNeVecF32x4(),\n  LtVecF32x4 = _BinaryenLtVecF32x4(),\n  LeVecF32x4 = _BinaryenLeVecF32x4(),\n  GtVecF32x4 = _BinaryenGtVecF32x4(),\n  GeVecF32x4 = _BinaryenGeVecF32x4(),\n  EqVecF64x2 = _BinaryenEqVecF64x2(),\n  NeVecF64x2 = _BinaryenNeVecF64x2(),\n  LtVecF64x2 = _BinaryenLtVecF64x2(),\n  LeVecF64x2 = _BinaryenLeVecF64x2(),\n  GtVecF64x2 = _BinaryenGtVecF64x2(),\n  GeVecF64x2 = _BinaryenGeVecF64x2(),\n  AndVec128 = _BinaryenAndVec128(),\n  OrVec128 = _BinaryenOrVec128(),\n  XorVec128 = _BinaryenXorVec128(),\n  AddVecI8x16 = _BinaryenAddVecI8x16(),\n  AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\n  AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\n  SubVecI8x16 = _BinaryenSubVecI8x16(),\n  SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\n  SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\n  MulVecI8x16 = _BinaryenMulVecI8x16(),\n  AddVecI16x8 = _BinaryenAddVecI16x8(),\n  AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\n  AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\n  SubVecI16x8 = _BinaryenSubVecI16x8(),\n  SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\n  SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\n  MulVecI16x8 = _BinaryenMulVecI16x8(),\n  AddVecI32x4 = _BinaryenAddVecI32x4(),\n  SubVecI32x4 = _BinaryenSubVecI32x4(),\n  MulVecI32x4 = _BinaryenMulVecI32x4(),\n  AddVecI64x2 = _BinaryenAddVecI64x2(),\n  SubVecI64x2 = _BinaryenSubVecI64x2(),\n  AddVecF32x4 = _BinaryenAddVecF32x4(),\n  SubVecF32x4 = _BinaryenSubVecF32x4(),\n  MulVecF32x4 = _BinaryenMulVecF32x4(),\n  DivVecF32x4 = _BinaryenDivVecF32x4(),\n  MinVecF32x4 = _BinaryenMinVecF32x4(),\n  MaxVecF32x4 = _BinaryenMaxVecF32x4(),\n  AddVecF64x2 = _BinaryenAddVecF64x2(),\n  SubVecF64x2 = _BinaryenSubVecF64x2(),\n  MulVecF64x2 = _BinaryenMulVecF64x2(),\n  DivVecF64x2 = _BinaryenDivVecF64x2(),\n  MinVecF64x2 = _BinaryenMinVecF64x2(),\n  MaxVecF64x2 = _BinaryenMaxVecF64x2()\n}\n\nexport enum HostOp {\n  MemorySize = _BinaryenMemorySize(),\n  MemoryGrow = _BinaryenMemoryGrow(),\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneSVecI8x16 = _BinaryenExtractLaneSVecI8x16(),\n  ExtractLaneUVecI8x16 = _BinaryenExtractLaneUVecI8x16(),\n  ExtractLaneSVecI16x8 = _BinaryenExtractLaneSVecI16x8(),\n  ExtractLaneUVecI16x8 = _BinaryenExtractLaneUVecI16x8(),\n  ExtractLaneVecI32x4 = _BinaryenExtractLaneVecI32x4(),\n  ExtractLaneVecI64x2 = _BinaryenExtractLaneVecI64x2(),\n  ExtractLaneVecF32x4 = _BinaryenExtractLaneVecF32x4(),\n  ExtractLaneVecF64x2 = _BinaryenExtractLaneVecF64x2(),\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneVecI8x16 = _BinaryenReplaceLaneVecI8x16(),\n  ReplaceLaneVecI16x8 = _BinaryenReplaceLaneVecI16x8(),\n  ReplaceLaneVecI32x4 = _BinaryenReplaceLaneVecI32x4(),\n  ReplaceLaneVecI64x2 = _BinaryenReplaceLaneVecI64x2(),\n  ReplaceLaneVecF32x4 = _BinaryenReplaceLaneVecF32x4(),\n  ReplaceLaneVecF64x2 = _BinaryenReplaceLaneVecF64x2()\n}\n\nexport enum SIMDShiftOp {\n  ShlVecI8x16 = _BinaryenShlVecI8x16(),\n  ShrSVecI8x16 = _BinaryenShrSVecI8x16(),\n  ShrUVecI8x16 = _BinaryenShrUVecI8x16(),\n  ShlVecI16x8 = _BinaryenShlVecI16x8(),\n  ShrSVecI16x8 = _BinaryenShrSVecI16x8(),\n  ShrUVecI16x8 = _BinaryenShrUVecI16x8(),\n  ShlVecI32x4 = _BinaryenShlVecI32x4(),\n  ShrSVecI32x4 = _BinaryenShrSVecI32x4(),\n  ShrUVecI32x4 = _BinaryenShrUVecI32x4(),\n  ShlVecI64x2 = _BinaryenShlVecI64x2(),\n  ShrSVecI64x2 = _BinaryenShrSVecI64x2(),\n  ShrUVecI64x2 = _BinaryenShrUVecI64x2()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunctionType(this.ref, cStr);\n  }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\n    _BinaryenLiteralVec128(out, out);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalTee(this.ref, index, value);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(typeName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  unreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    try {\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  simd_bitselect(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    cond: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDBitselect(this.ref, vec1, vec2, cond);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    _BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n  }\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Array<i8>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocI32Array(offs);\n    var cArr4 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    } finally {\n      memory.free(cArr4);\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n    }\n  }\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[]\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  getFeatures(): BinaryenFeatureFlags {\n    return _BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: BinaryenFeatureFlags): void {\n    _BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([\n        this.allocStringCached(\"vacuum\"),\n        this.allocStringCached(\"precompute\")\n      ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 2);\n    expr = _BinaryenFunctionGetBody(func);\n    if (_BinaryenExpressionGetId(expr) == ExpressionId.Return) {\n      expr = _BinaryenReturnGetValue(expr);\n    }\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(_BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\n    this.cachedStrings = new Map();\n    memory.free(this.lit);\n    memory.free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.i32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.i64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.f32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.f64(_BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return _BinaryenLocalGet(this.ref,\n          _BinaryenLocalGetGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = _BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGlobalGet(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return _BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return _BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   // TODO: there's more\n//   switch (_BinaryenExpressionGetId(expr)) {\n//     case ExpressionId.LocalGet:\n//     case ExpressionId.GlobalGet:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (_BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(_BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(_BinaryenIfGetCondition(expr), data);\n      visit(_BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = _BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(_BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = _BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(_BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i = 0, n = _BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i = 0, n = _BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(_BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(_BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(_BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(_BinaryenStoreGetPtr(expr), data);\n      visit(_BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(_BinaryenAtomicRMWGetPtr(expr), data);\n      visit(_BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(_BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(_BinaryenAtomicWaitGetPtr(expr), data);\n      visit(_BinaryenAtomicWaitGetExpected(expr), data);\n      visit(_BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(_BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(_BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(_BinaryenSIMDReplaceGetVec(expr), data);\n      visit(_BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(_BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(_BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDBitselect: {\n      visit(_BinaryenSIMDBitselectGetLeft(expr), data);\n      visit(_BinaryenSIMDBitselectGetRight(expr), data);\n      visit(_BinaryenSIMDBitselectGetCond(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(_BinaryenSIMDShiftGetVec(expr), data);\n      visit(_BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(_BinaryenMemoryInitGetDest(expr), data);\n      visit(_BinaryenMemoryInitGetOffset(expr), data);\n      visit(_BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(_BinaryenMemoryCopyGetDest(expr), data);\n      visit(_BinaryenMemoryCopyGetSource(expr), data);\n      visit(_BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(_BinaryenMemoryFillGetDest(expr), data);\n      visit(_BinaryenMemoryFillGetValue(expr), data);\n      visit(_BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(_BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(_BinaryenBinaryGetLeft(expr), data);\n      visit(_BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(_BinaryenSelectGetIfTrue(expr), data);\n      visit(_BinaryenSelectGetIfFalse(expr), data);\n      visit(_BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(_BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(_BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i = 0, n = _BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      // same naming scheme as Binaryen\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"j\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"j\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"d\";\n      case TypeKind.V128: return \"V\";\n      case TypeKind.VOID: return \"v\";\n      default: assert(false);\n    }\n    return \"i\";\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    sb.push(returnType.toSignatureString());\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    return \"FUNCSIG$\" + sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics || new Array();\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos + 1 < end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.x:\n        case CharCode.X:\n        case CharCode.b:\n        case CharCode.B:\n        case CharCode.o:\n        case CharCode.O: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) return false;\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.x:\n        case CharCode.X: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b:\n        case CharCode.B: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o:\n        case CharCode.O: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.e || c == CharCode.E) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 65536) >>> 10) + 0xD800,\n        ((value32 - 65536) & 1023) + 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonSymbols\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token\n} from \"./tokenizer\";\n\nimport {\n  BuiltinSymbols\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n\n    // handle signature\n    if (node.kind == NodeKind.FUNCTIONTYPE) {\n      let explicitThisType = (<FunctionTypeNode>node).explicitThisType;\n      let thisType: Type | null = null;\n      if (explicitThisType) {\n        thisType = this.resolveType(\n          explicitThisType,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!thisType) return null;\n      }\n      let parameterNodes = (<FunctionTypeNode>node).parameters;\n      let numParameters = parameterNodes.length;\n      let parameterTypes = new Array<Type>(numParameters);\n      let parameterNames = new Array<string>(numParameters);\n      let requiredParameters = 0;\n      let hasRest = false;\n      for (let i = 0; i < numParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        switch (parameterNode.parameterKind) {\n          case ParameterKind.DEFAULT: {\n            requiredParameters = i + 1;\n            break;\n          }\n          case ParameterKind.REST: {\n            assert(i == numParameters);\n            hasRest = true;\n            break;\n          }\n        }\n        let parameterTypeNode = parameterNode.type;\n        if (isTypeOmitted(parameterTypeNode)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              parameterTypeNode.range\n            );\n          }\n          return null;\n        }\n        let parameterType = this.resolveType(\n          parameterTypeNode,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!parameterType) return null;\n        parameterTypes[i] = parameterType;\n        parameterNames[i] = parameterNode.name.text;\n      }\n      let returnTypeNode = (<FunctionTypeNode>node).returnType;\n      if (isTypeOmitted(returnTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnTypeNode.range\n          );\n        }\n        return null;\n      }\n      let returnType: Type | null;\n      if (returnTypeNode) {\n        returnType = this.resolveType(\n          returnTypeNode,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!returnType) return null;\n      } else {\n        returnType = Type.void;\n      }\n      let signature = new Signature(parameterTypes, returnType, thisType);\n      signature.parameterNames = parameterNames;\n      signature.requiredParameters = requiredParameters;\n      signature.hasRest = hasRest;\n      return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n\n    // now dealing with TypeNode\n    assert(node.kind == NodeKind.NAMEDTYPE);\n    var typeNode = <NamedTypeNode>node;\n    var typeName = typeNode.name;\n    var typeArgumentNodes = typeNode.typeArguments;\n    var isSimpleType = !typeName.next;\n\n    // look up in contextual type arguments if a simple type\n    if (isSimpleType) {\n      if (contextualTypeArguments && contextualTypeArguments.has(typeName.identifier.text)) {\n        let type = contextualTypeArguments.get(typeName.identifier.text)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                node.range, type.toString()\n              );\n            }\n          }\n          return type.asNullable();\n        }\n        return type;\n      }\n    }\n\n    // look up in context\n    var element = this.resolveTypeName(typeName, context, reportMode);\n    if (!element) return null;\n\n    // use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n      // handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          context,\n          makeMap<string,Type>(contextualTypeArguments), // don't inherit\n          node\n        ); // reports\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                typeNode.name.range, typeName.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // handle built-in types\n      if (isSimpleType) {\n        switch (typeName.identifier.symbol) {\n          case CommonSymbols.native: return this.resolveBuiltinNativeType(typeNode, context, contextualTypeArguments, reportMode);\n          case CommonSymbols.indexof: return this.resolveBuiltinIndexofType(typeNode, context, contextualTypeArguments, reportMode);\n          case CommonSymbols.valueof: return this.resolveBuiltinValueofType(typeNode, context, contextualTypeArguments, reportMode);\n        }\n      }\n\n      // resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          context,\n          contextualTypeArguments = makeMap(contextualTypeArguments), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          typeNode.range, typeName.identifier.text\n        );\n        // recoverable\n      }\n      let type = this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              typeNode.name.range, typeName.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, typeName.identifier.text\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    typeNode: NamedTypeNode,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = typeNode.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], context, contextualTypeArguments, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    typeNode: NamedTypeNode,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = typeNode.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], context, contextualTypeArguments, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    typeNode: NamedTypeNode,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = typeNode.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], context, contextualTypeArguments, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) return overload.signature.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    typeName: TypeName,\n    /** Relative context. */\n    context: Element,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = context.lookup(typeName.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          typeName.range, typeName.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = typeName;\n    var next = typeName.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Actual type parameter nodes. */\n    typeParameters: TypeParameterNode[],\n    /** Type arguments provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<NamedTypeNode[]>typeArgumentNodes)[0].range,\n              (<NamedTypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<NamedTypeNode[]>typeArgumentNodes)[i],\n            context,\n            contextualTypeArguments,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            context,\n            contextualTypeArguments,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      contextualTypeArguments.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the program element it refers to. */\n  resolveIdentifier(\n    /** The expression to resolve. */\n    identifier: IdentifierExpression,\n    /** Optional flow to search for scoped locals. */\n    flow: Flow | null,\n    /** Optional context to search. */\n    context: Element | null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n    if (flow) {\n      if (element = flow.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (context) {\n      if (element = context.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        identifier.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field. */\n  ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var typeNode = global.typeNode;\n    if (!typeNode) return false;\n    var type = this.resolveType( // reports\n      typeNode,\n      global.parent,\n      null,\n      reportMode\n    );\n    if (!type) return false;\n    global.setType(type);\n    return true;\n  }\n\n  /** Resolves a property access expression to the program element it refers to. */\n  resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    propertyAccess: PropertyAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let typeClasses = this.program.typeClasses;\n          if (!type.is(TypeFlags.REFERENCE) && typeClasses.has(type.kind)) {\n            classReference = typeClasses.get(type.kind)!;\n          } else {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n            );\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: { // property access on element access?\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          // let arrayType = this.program.determineBuiltinArrayType(<Class>target);\n          // if (!arrayType) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                elementExpression.range, (<Class>target).internalName\n              );\n              return null;\n            }\n            let arrayType = indexedGet.signature.returnType;\n\n          // }\n          let classReference = arrayType.classReference;\n          if (!classReference) {\n            let typeClasses = this.program.typeClasses;\n            if (!arrayType.is(TypeFlags.REFERENCE) && typeClasses.has(arrayType.kind)) {\n              classReference = typeClasses.get(arrayType.kind)!;\n            } else {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                propertyAccess.property.range, propertyName, arrayType.toString()\n              );\n              return null;\n            }\n          }\n          target = classReference;\n        }\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  /** Resolves an element access expression to the program element it refers to. */\n  resolveElementAccessExpression(\n    /** The expression to resolve. */\n    elementAccess: ElementAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // let arrayType = this.program.determineBuiltinArrayType(<Class>target);\n        // if (!arrayType) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                elementAccess.range, (<Class>target).internalName\n              );\n            }\n            return null;\n          }\n          let arrayType = indexedGet.signature.returnType;\n        // }\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\n          if (target = arrayType.classReference) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = elementAccess.elementExpression;\n            return target;\n          }\n          return null;\n        }\n        this.currentThisExpression = targetExpression;\n        this.currentElementExpression = elementAccess.elementExpression;\n        return target;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Current contextual type. */\n    contextualType: Type\n  ): Type {\n    if (!contextualType.is(TypeFlags.REFERENCE)) {\n      // compile to contextualType if matching\n      switch (contextualType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n        case TypeKind.VOID: break; // best fitting below\n        default: assert(false);\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64;\n  }\n\n  /** Resolves any expression to the program element it refers to. */\n  resolveExpression(\n    /** The expression to resolve. */\n    expression: Expression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // simply skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(\n          <IdentifierExpression>expression,\n          flow, flow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      // TODO: everything else\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an assertion expression to the program element it refers to. */\n  resolveAssertionExpression(\n    /** The expression to resolve. */\n    expression: AssertionExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (expression.assertionKind == AssertionKind.NONNULL) {\n      return this.resolveExpression(\n        expression.expression,\n        flow,\n        contextualType,\n        reportMode\n      );\n    }\n    var type = this.resolveType(\n      assert(expression.toType), // must be set if not NONNULL\n      flow.actualFunction,\n      flow.contextualTypeArguments,\n      reportMode\n    );\n    if (!type) return null;\n    var element: Element | null = type.classReference;\n    if (!element) {\n      let signature = type.signatureReference;\n      if (!signature) return null;\n      element = signature.asFunctionTarget(this.program);\n    }\n    this.currentThisExpression = null;\n    this.currentElementExpression = null;\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to the program element it refers to. */\n  resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPrefixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var operand = expression.operand;\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          let type = this.determineIntegerLiteralType(\n            i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\n            contextualType\n          );\n          let typeClasses = this.program.typeClasses;\n          return typeClasses.has(type.kind) ? typeClasses.get(type.kind)! : null;\n        }\n        return this.resolveExpression(\n          operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.EXCLAMATION: {\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(TypeKind.BOOL) ? typeClasses.get(TypeKind.BOOL)! : null;\n      }\n      case Token.TILDE: {\n        let resolvedOperand = this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n        if (!resolvedOperand) return null;\n        // TODO\n        break;\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an unary postfix expression to the program element it refers to. */\n  resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPostfixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to the program element it refers to. */\n  resolveBinaryExpression(\n    /** The expression to resolve. */\n    expression: BinaryExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to the program element it refers to. */\n  resolveThisExpression(\n    /** The expression to resolve. */\n    expression: ThisExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let thisLocal = flow.lookupLocal(CommonSymbols.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = flow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to the program element it refers to. */\n  resolveSuperExpression(\n    /** The expression to resolve. */\n    expression: SuperExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let superLocal = flow.lookupLocal(CommonSymbols.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = flow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to the program element it refers to. */\n  resolveLiteralExpression(\n    /** The expression to resolve. */\n    expression: LiteralExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (expression.literalKind) {\n      case LiteralKind.INTEGER: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>expression).value,\n          contextualType\n        );\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.FLOAT: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = contextualType == Type.f32 ? Type.f32 : Type.f64;\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.STRING: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        return this.program.stringInstance;\n      }\n      // TODO\n      // case LiteralKind.ARRAY:\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a call expression to the program element it refers to. */\n  resolveCallExpression(\n    /** The expression to resolve. */\n    expression: CallExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = expression.expression;\n    var target = this.resolveExpression( // reports\n      targetExpression,\n      flow,\n      contextualType,\n      reportMode\n    );\n\n    if (!target) return null;\n    if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      // `unchecked(expr: *): *` is special\n      if (\n        (<FunctionPrototype>target).internalName == BuiltinSymbols.unchecked &&\n        expression.arguments.length > 0\n      ) {\n        return this.resolveExpression(expression.arguments[0], flow, contextualType, reportMode);\n      }\n      // otherwise resolve normally\n      let instance = this.resolveFunctionInclTypeArguments(\n        <FunctionPrototype>target,\n        expression.typeArguments,\n        flow.actualFunction,\n        makeMap(flow.contextualTypeArguments), // don't inherit\n        expression,\n        reportMode\n      );\n      if (!instance) return null;\n      let returnType = instance.signature.returnType;\n      let classType = returnType.classReference;\n      if (classType) {\n        // reuse resolvedThisExpression (might be property access)\n        // reuse resolvedElementExpression (might be element access)\n        return classType;\n      } else {\n        let signature = returnType.signatureReference;\n        if (signature) {\n          let functionTarget = signature.asFunctionTarget(this.program);\n          // reuse resolvedThisExpression (might be property access)\n          // reuse resolvedElementExpression (might be element access)\n          return functionTarget;\n        } else {\n          let typeClasses = this.program.typeClasses;\n          if (!returnType.is(TypeFlags.REFERENCE) && typeClasses.has(returnType.kind)) {\n            return typeClasses.get(returnType.kind);\n          }\n        }\n      }\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          targetExpression.range, target.internalName\n        );\n      }\n      return null;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!contextualTypeArguments.has(classTypeParameterName)) {\n            contextualTypeArguments.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!thisType) return null;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          typeNode.range\n        );\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          typeNode.range\n        );\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      contextualTypeArguments\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            contextualTypeArguments.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        contextualTypeArguments.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    var baseClass: Class | null = null;\n    if (basePrototype) {\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      baseClass = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(contextualTypeArguments), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!baseClass) return null;\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      let baseMembers = baseClass.members;\n      if (baseMembers) {\n        let instanceMembers = instance.members;\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve instance members\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            let instanceMembers = instance.members;\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\n            else if (instanceMembers.has(member.name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                (<FieldPrototype>member).identifierNode.range,\n                member.name\n              );\n              break;\n            }\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (baseClass) {\n                let baseMembers = baseClass.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          instance.contextualTypeArguments,\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow returns. */\n  RETURNS = 1 << 0,\n  /** This flow returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow throws. */\n  THROWS = 1 << 3,\n  /** This flow breaks. */\n  BREAKS = 1 << 4,\n  /** This flow continues. */\n  CONTINUES = 1 << 5,\n  /** This flow allocates. Constructors only. */\n  ALLOCATES = 1 << 6,\n  /** This flow calls super. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8,\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally terminates in a child flow. */\n  CONDITIONALLY_TERMINATES = 1 << 11,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 12,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 13,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 14,\n\n  // special\n\n  /** This is an inlining flow. */\n  INLINE_CONTEXT = 1 << 15,\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 16,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is read from. */\n  READFROM = 1 << 3,\n  /** Local is written to. */\n  WRITTENTO = 1 << 4,\n  /** Local is retained. */\n  RETAINED = 1 << 5,\n\n  /** Local is conditionally read from. */\n  CONDITIONALLY_READFROM = 1 << 6,\n  /** Local is conditionally written to. */\n  CONDITIONALLY_WRITTENTO = 1 << 7,\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 8,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = CONSTANT\n                  | WRAPPED\n                  | NONNULL\n                  | READFROM\n                  | WRITTENTO\n                  | RETAINED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = RETAINED\n                  | CONDITIONALLY_READFROM\n                  | CONDITIONALLY_WRITTENTO\n                  | CONDITIONALLY_RETAINED,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED\n}\nexport namespace LocalFlags {\n  export function join(left: LocalFlags, right: LocalFlags): LocalFlags {\n    return ((left & LocalFlags.ANY_CATEGORICAL) & (right & LocalFlags.ANY_CATEGORICAL))\n         |  (left & LocalFlags.ANY_CONDITIONAL) | (right & LocalFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** Flags indicating the current state of a field. */\nexport enum FieldFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Field is initialized. Relevant in constructors. */\n  INITIALIZED = 1 << 0,\n  /** Field is conditionally initialized. Relevant in constructors. */\n  CONDITIONALLY_INITIALIZED = 1 << 1,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = INITIALIZED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = CONDITIONALLY_INITIALIZED\n}\nexport namespace FieldFlags {\n  export function join(left: FieldFlags, right: FieldFlags): FieldFlags {\n    return ((left & FieldFlags.ANY_CATEGORICAL) & (right & FieldFlags.ANY_CATEGORICAL))\n         |  (left & FieldFlags.ANY_CONDITIONAL) | (right & FieldFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Field flags. Relevant in constructors. */\n  fieldFlags: Map<string,FieldFlags> | null = null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.parentFunction = this.parentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps && temps.length) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps && temps.length) {\n        local = temps.pop();\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    this.freeTempLocal(local);\n    return local;\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name);\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          this.parentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range\n          );\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name);\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.localFlags = other.localFlags; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n    var localFlags = other.localFlags;\n    for (let i = 0, k = localFlags.length; i < k; ++i) {\n      let flags = localFlags[i];\n      if (flags & LocalFlags.RETAINED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETAINED);\n      if (flags & LocalFlags.READFROM) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_READFROM);\n      if (flags & LocalFlags.WRITTENTO) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_WRITTENTO);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.set(left.flags & right.flags & FlowFlags.ANY_CATEGORICAL);\n\n    // conditional flags set in any arm\n    this.set(left.flags & FlowFlags.ANY_CONDITIONAL);\n    this.set(right.flags & FlowFlags.ANY_CONDITIONAL);\n\n    // categorical flags in either arm as conditional\n    this.inheritConditional(left);\n    this.inheritConditional(right);\n\n    // categorical local flags set in both arms / conditional local flags set in at least one arm\n    var leftLocalFlags = left.localFlags;\n    var numLeftLocalFlags = leftLocalFlags.length;\n    var rightLocalFlags = right.localFlags;\n    var numRightLocalFlags = rightLocalFlags.length;\n    var combinedFlags = new Array<LocalFlags>(max<i32>(numLeftLocalFlags, numRightLocalFlags));\n    for (let i = 0; i < numLeftLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        unchecked(leftLocalFlags[i]),\n        i < numRightLocalFlags\n          ? unchecked(rightLocalFlags[i])\n          : 0\n      );\n    }\n    for (let i = numLeftLocalFlags; i < numRightLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        0,\n        unchecked(rightLocalFlags[i])\n      );\n    }\n    this.localFlags = combinedFlags;\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(expr: ExpressionRef): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        this.inheritNonnullIfTrue(getLocalSetValue(expr)); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr));\n            this.inheritNonnullIfTrue(getIfTrue(expr));\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr)); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        switch (name) {\n          case program.retainInstance.internalName: {\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0));\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(expr: ExpressionRef): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr)); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          if (\n            (getExpressionType(ifTrue) == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (getExpressionType(ifTrue) == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr));\n            this.inheritNonnullIfFalse(getIfFalse(expr));\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = instancesByName.get(instanceName)!;\n          assert(instance.kind == ElementKind.FUNCTION);\n          let returnType = (<Function>instance).signature.returnType;\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"]\";\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  BuiltinSymbols,\n  compileCall as compileBuiltinCall,\n  compileAbort,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  FeatureFlags,\n  needsExplicitUnreachable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  CommonSymbols,\n  INDEX_SUFFIX,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  NamedTypeNode,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  nodeIsConstantValue,\n  findDecorator,\n  isTypeOmitted,\n  ExportDefaultStatement\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  resolver: Resolver;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    this.resolver = program.resolver;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n    var featureFlags: BinaryenFeatureFlags = 0;\n    if (this.options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (this.options.hasFeature(Feature.MUTABLE_GLOBAL)) featureFlags |= FeatureFlags.MutableGloabls;\n    // if (this.options.hasFeature(Feature.TRUNC_SAT)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (this.options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (this.options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (this.options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    // if (this.options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    this.module.setFeatures(featureFlags);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature([], Type.void));\n    startFunctionInstance.internalName = \"start\";\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add a mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.isEntry) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinSymbols.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinSymbols.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinSymbols.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.block(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, \"__start\");\n    }\n\n    // compile runtime features\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n    module.removeGlobal(BuiltinSymbols.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinSymbols.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\",\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.block(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.isEntry) this.ensureModuleExports(file);\n    }\n    return module;\n  }\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        this.ensureModuleFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\n        if (!element.is(CommonFlags.READONLY)) {\n          this.ensureModuleFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // make the class name itself represent its runtime id\n        if (!(<Class>element).type.isUnmanaged) {\n          let module = this.module;\n          let internalName = (<Class>element).internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  /** Makes a function to get the value of a field of an exported class. */\n  private ensureModuleFieldGetter(name: string, field: Field): void {\n    var module = this.module;\n    var type = field.type;\n    var usizeType = this.options.usizeType;\n    var loadExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, usizeType.toNativeType()),\n      type.toNativeType(), field.memoryOffset\n    );\n    // a user-defined getter would return a retained value, so:\n    if (type.isManaged) loadExpr = this.makeRetain(loadExpr);\n    module.addFunction(\n      name,\n      this.ensureFunctionType(null, type, usizeType),\n      null,\n      loadExpr\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  /** Makes a function to set the value of a field of an exported class. */\n  private ensureModuleFieldSetter(name: string, field: Field): void {\n    var module = this.module;\n    var type = field.type;\n    var nativeType = type.toNativeType();\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var valueExpr = module.local_get(1, nativeType);\n    if (type.isManaged) {\n      valueExpr = this.makeRetainRelease(\n        module.load(type.byteSize, false, // oldRef\n          module.local_get(0, nativeSizeType),\n          nativeType, field.memoryOffset\n        ),\n        valueExpr // newRef\n      );\n    }\n    module.addFunction(\n      name,\n      this.ensureFunctionType([ type ], Type.void, usizeType),\n      null,\n      module.store(\n        type.byteSize,\n        module.local_get(0, nativeSizeType),\n        valueExpr,\n        nativeType,\n        field.memoryOffset\n      )\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) this.compileMembers(element);\n  }\n\n  /** Compiles an element's members. */\n  compileMembers(element: Element): void {\n    var members = element.members;\n    if (members) for (let element of members.values()) this.compileElement(element);\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) {\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\n        varTypes,\n        startFunctionBody.length > 1\n          ? module.block(null, startFunctionBody)\n          : startFunctionBody[0]\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var initAutoreleaseSkipped: bool = false;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinSymbols.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinSymbols.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          global.declaration.range\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      initExpr = type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, type.toNativeZero(module));\n      if (type.isManaged && !initAutoreleaseSkipped) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          initExpr = module.binary(BinaryOp.AddI32,\n            module.global_get(previousValue.internalName, NativeType.I32),\n            module.i32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(val, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n          }\n          val.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): Function | null {\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return null;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n      if (!flow.is(FlowFlags.TERMINATES)) { // TODO: detect if returning an autorelease local?\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getAndFreeTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.if(\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.local_get(thisLocal.index, nativeSizeType)\n              ),\n              module.local_set(thisLocal.index,\n                this.makeRetain(\n                  this.makeAllocation(<Class>classInstance)\n                ),\n              )\n            )\n          );\n          this.makeFieldInitialization(<Class>classInstance, stmts);\n        }\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n\n    var previousType = this.currentType; // remember to retain it if compiling a function lazily\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.drop(\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n      }\n\n      this.compileFunctionBody(instance, stmts);\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        flatten(module, stmts, instance.signature.returnType.toNativeType())\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      funcRef = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                (<FunctionPrototype>element).identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getter = (<PropertyPrototype>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                getter.identifierNode\n              );\n            }\n            let setter = (<PropertyPrototype>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                setter.identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD_PROTOTYPE: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterInstance;\n            if (getter) this.compileFunction(getter);\n            let setter = (<Property>element).setterInstance;\n            if (setter) this.compileFunction(setter);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = segments.get(stringValue)!; // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  ensureStaticArrayBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\n    var pos = runtimeHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    assert(pos == buf.length);\n\n    return this.addMemorySegment(buf);\n  }\n\n  ensureStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.currentMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"data\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    if (statement.kind == NodeKind.EXPORTDEFAULT) {\n      statement = (<ExportDefaultStatement>statement).declaration;\n    }\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        assert(element.kind == ElementKind.ENUM);\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let memberStatements = (<NamespaceDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          assert(element.kind == ElementKind.GLOBAL);\n          if (\n            !element.is(CommonFlags.AMBIENT) && // delay imports\n            !element.hasDecorator(DecoratorFlags.LAZY)\n          ) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).normalizedPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).normalizedPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).normalizedPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  compileStatement(\n    statement: Statement,\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(\n    statements: Statement[],\n    isBody: bool = false,\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow); // TODO: only if not terminated?\n    this.currentFlow = outerFlow;\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* clearFlags */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileDoStatement(\n    statement: DoStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(\n        this.compileStatement(statement.statement)\n      );\n    }\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType\n      )\n    );\n    var alwaysFalse = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) alwaysFalse = true;\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n\n    // (block $break            ;; (1) skip if no breaks\n    //  (loop $continue         ;; (2) skip if skipping (4) + no continues\n    //   (...)                  ;; (3)\n    //   (br_if cond $continue) ;; (4) skip if (3) does not fall through or always false\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough && !alwaysFalse) { // (4)\n      stmts.push(module.br(continueLabel, condExpr));\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough && !alwaysFalse || continues) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (breaks) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    if (!terminates) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  compileForStatement(\n    statement: ForStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    // Set up and use the inner flow\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    // Compile the initializer\n    var initializer = statement.initializer;\n    var initExpr: ExpressionRef = 0;\n    if (initializer) initExpr = this.compileStatement(initializer);\n\n    // Compile the condition\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(<Expression>statement.condition, Type.bool),\n          this.currentType\n        )\n      );\n      // Simplify if the condition is constant\n      if (getExpressionId(condExpr) == ExpressionId.Const) {\n        assert(getExpressionType(condExpr) == NativeType.I32);\n        if (getConstValueI32(condExpr) == /* false */ 0) {\n          let stmts = new Array<ExpressionRef>();\n          if (initExpr) stmts.push(initExpr);\n          this.performAutoreleases(innerFlow, stmts);\n          innerFlow.freeScopedLocals();\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return flatten(module, stmts, NativeType.None);\n        }\n        alwaysTrue = true;\n      }\n    } else { // Omitted condition is always true\n      condExpr = module.i32(1);\n      alwaysTrue = true;\n    }\n    innerFlow.inheritNonnullIfTrue(condExpr);\n\n    // Compile incrementor\n    var incrementor = statement.incrementor;\n    var incrExpr: ExpressionRef = 0;\n    if (incrementor) incrExpr = this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP);\n\n    // Compile body (break: drop out, continue: fall through to incrementor, + loop)\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label; innerFlow.breakLabel = breakLabel;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    var loopLabel = \"loop|\" + label;\n    var bodyStatement = statement.statement;\n    var stmts = new Array<ExpressionRef>();\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>bodyStatement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(bodyStatement));\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n\n    // (block $break          ;; (1) skip label (needed anyway) if skipping (4) + no breaks\n    //  (initializer)         ;; (2) [may be empty]\n    //  (loop $loop           ;; (3) skip if (6) does not fall through + no continues\n    //   (br_if !cond $break) ;; (4) skip if always true\n    //   (block $continue     ;; (5) skip if no continues or nothing else than continue\n    //    (...)               ;; (6)\n    //   )\n    //   (incrementor)        ;; (7) skip if skipping (3) [may be empty]\n    //   (br $loop)           ;; (8) skip if skipping (3)\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n    var needsLabel = !alwaysTrue || breaks;\n\n    var loop = new Array<ExpressionRef>();\n    if (!alwaysTrue) { // (4)\n      loop.push(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    if (continues) { // (5)\n      if (stmts.length > 1 || getExpressionId(stmts[0]) != ExpressionId.Break) { // otherwise lonely continue\n        loop.push(module.block(continueLabel, stmts));\n      }\n    } else {\n      for (let i = 0, k = stmts.length; i < k; ++i) loop.push(stmts[i]);\n    }\n    var expr: ExpressionRef;\n    if (fallsThrough || continues) { // (3)\n      if (incrExpr) loop.push(incrExpr); // (7)\n      this.performAutoreleases(innerFlow, loop);\n      loop.push(module.br(loopLabel)); // (8)\n      if (initExpr) { // (2)\n        expr = module.block(needsLabel ? breakLabel : null, [\n          initExpr,\n          module.loop(loopLabel, module.block(null, loop))\n        ]);\n      } else {\n        expr = module.block(needsLabel ? breakLabel : null, [\n          module.loop(loopLabel, flatten(module, loop, NativeType.None))\n        ]);\n      }\n    } else {\n      if (initExpr) loop.unshift(initExpr); // (2)\n      this.performAutoreleases(innerFlow, loop);\n      expr = module.block(needsLabel ? breakLabel : null, loop);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n    var outerFlow = this.currentFlow;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileStatement(ifTrue)\n        : ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.nop();\n    }\n\n    // Each arm initiates a branch\n    var ifTrueStmts = new Array<ExpressionRef>();\n    var ifTrueFlow = outerFlow.fork();\n    this.currentFlow = ifTrueFlow;\n    ifTrueFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, ifTrueStmts);\n    } else {\n      ifTrueStmts.push(this.compileStatement(ifTrue));\n    }\n    if (!ifTrueFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifTrueFlow, ifTrueStmts);\n    ifTrueFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    if (ifFalse) {\n      let ifFalseFlow = outerFlow.fork();\n      this.currentFlow = ifFalseFlow;\n      ifFalseFlow.inheritNonnullIfFalse(condExpr);\n      let ifFalseStmts = new Array<ExpressionRef>();\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, ifFalseStmts);\n      } else {\n        ifFalseStmts.push(this.compileStatement(ifFalse));\n      }\n      if (!ifFalseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifFalseFlow, ifFalseStmts);\n      ifFalseFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None),\n        flatten(module, ifFalseStmts, NativeType.None)\n      );\n    } else {\n      outerFlow.inheritConditional(ifTrueFlow);\n      if (ifTrueFlow.is(FlowFlags.TERMINATES)) outerFlow.inheritNonnullIfFalse(condExpr);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None)\n      );\n    }\n    // TODO: Detect neglected condition\n    // if (!foo) {\n    //   foo = [notNull]\n    // }\n    // foo // is possibly null\n  }\n\n  compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n      expr = this.compileExpression(valueExpression, returnType, constraints | Constraints.WILL_RETAIN);\n\n      // when returning a local, and it is already retained, skip the final set\n      // of retaining it as the return value and releasing it as a variable\n      if (!this.skippedAutoreleases.has(expr)) {\n        if (returnType.isManaged) {\n          if (getExpressionId(expr) == ExpressionId.LocalGet) {\n            if (flow.isAnyLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED)) {\n              flow.unsetLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED);\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n        }\n      }\n\n      // remember return states\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    // Make sure that the return value is retained for the caller\n    if (returnType.isManaged && !this.skippedAutoreleases.has(expr)) expr = this.makeRetain(expr);\n\n    if (returnType != Type.void && stmts.length) {\n      let temp = flow.getAndFreeTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n    }\n    flow.freeScopedLocals();\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.block(null, stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.block(null, stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.block(null, stmts);\n  }\n\n  compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    this.finishAutoreleases(flow, stmts);\n\n    // TODO: requires exception-handling spec.\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(compileAbort(this, message, statement));\n\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (declaration.initializer) {\n        initExpr = this.compileExpression(declaration.initializer, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, declaration.name.text\n            );\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          if (flow.lookupLocal(name)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                type.toNativeZero(module)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : flatten(module, initializers, NativeType.None);\n  }\n\n  compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  compileWhileStatement(\n    statement: WhileStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // Compile condition\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Simplify if the condition is constant\n    var alwaysTrue = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) return module.nop(); // simplify\n      alwaysTrue = true;\n    }\n\n    // Compile body\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    innerFlow.inheritNonnullIfTrue(condExpr);\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(statement.statement));\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n\n    // (block $break          ;; (1) skip if skipping (3) + no breaks\n    //  (loop $continue       ;; (2) skip if skipping (5) + no continues\n    //   (br_if !cond $break) ;; (3) skip if always true\n    //   (...)                ;; (4)\n    //   (br $continue)       ;; (5) skip if (4) does not fall through\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough) { // (5)\n      this.performAutoreleases(innerFlow, stmts);\n      stmts.push(module.br(continueLabel));\n    }\n    if (!alwaysTrue) { // (3)\n      stmts.unshift(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough || innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (!alwaysTrue || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    this.currentType = contextualType;\n    var expr: ExpressionRef;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileExpression((<ParenthesizedExpression>expression).expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType) {\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, constraints)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    if (this.currentFlow.isNonnull(expr, fromType)) fromType = fromType.nonNullableType;\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        if (fromType.nonNullableType == toType) {\n          this.error(\n            DiagnosticCode.Object_is_possibly_null,\n            reportNode.range\n          ); // recoverable\n        } else {\n          this.error(\n            DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n            reportNode.range, fromType.toString(), toType.toString()\n          ); // recoverable\n        }\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          let module = this.module;\n          let flow = this.currentFlow;\n          let tempIndex = flow.getAndFreeTempLocal(type).index;\n          if (!flow.canOverflow(expr, type)) flow.setLocalFlag(tempIndex, LocalFlags.WRAPPED);\n          flow.setLocalFlag(tempIndex, LocalFlags.NONNULL);\n          expr = module.if(\n            module.local_tee(tempIndex, expr),\n            module.local_get(tempIndex, type.toNativeType()),\n            module.unreachable()\n          );\n        }\n        this.currentType = this.currentType.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueVecI8x16,\n              module.binary(BinaryOp.EqVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueVecI8x16,\n              module.binary(BinaryOp.NeVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInElse = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInElse = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            rightExpr,\n            retainLeftInElse\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType())\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, this.currentType),\n              rightExpr,\n              expr\n            );\n\n          // if not possible, tee left to a temp\n          } else {\n            let tempLocal = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              rightExpr,\n              module.local_get(tempLocal.index, leftType.toNativeType())\n            );\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInThen = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInThen = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n            // TODO: usually, false'ish means left is null, but this might not hold\n            // once implicit conversion with strings is performed and left is \"\", so:\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            retainLeftInThen\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType()),\n            rightExpr\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              expr,\n              rightExpr\n            );\n\n          // if not possible, tee left to a temp. local\n          } else {\n            let tempLocal = flow.getAndFreeTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              module.local_get(tempLocal.index, leftType.toNativeType()),\n              rightExpr\n            );\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = this.resolver.resolveExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      left,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.resolveExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.LOCAL: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.CLASS: {\n        if (elementExpression) { // indexed access\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          // if (isUnchecked) {\n          //   let arrayType = this.program.determineBuiltinArrayType(<Class>target);\n          //   if (arrayType) {\n          //     return compileBuiltinArraySet(\n          //       this,\n          //       <Class>target,\n          //       assert(this.resolver.currentThisExpression),\n          //       elementExpression,\n          //       valueExpression,\n          //       contextualType\n          //     );\n          //   }\n          // }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.unreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    return this.makeAssignment(\n      target,\n      this.compileExpression(valueExpression, targetType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN),\n      expression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? (<Local>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(<Local>target, valueExpr, tee);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? (<Global>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, (<Field>target).internalName\n          );\n          return module.unreachable();\n        }\n        return this.makeFieldAssignment(<Field>target,\n          valueExpr,\n          // FIXME: explicit type (currently fails due to missing null checking)\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.unreachable();\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.unreachable();\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let tempLocal = flow.getAndFreeTempLocal(returnType);\n        let tempLocalIndex = tempLocal.index;\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.local_tee(tempLocalIndex, thisExpr),\n            valueExpr\n          ], valueExpression),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.local_get(tempLocalIndex, nativeReturnType)\n          ], valueExpression)\n        ], nativeReturnType);\n      }\n      case ElementKind.CLASS: {\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        if (indexExpression) {\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              valueExpression.range, target.internalName\n            );\n            return module.unreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              valueExpression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.unreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n          let elementExpr = this.compileExpression(indexExpression, Type.i32, Constraints.CONV_IMPLICIT);\n          if (tee) {\n            let tempLocalTarget = flow.getTempLocal(targetType);\n            let tempLocalElement = flow.getAndFreeTempLocal(this.currentType);\n            let returnType = indexedGet.signature.returnType;\n            flow.freeTempLocal(tempLocalTarget);\n            return module.block(null, [\n              this.makeCallDirect(indexedSet, [\n                module.local_tee(tempLocalTarget.index, thisExpr),\n                module.local_tee(tempLocalElement.index, elementExpr),\n                valueExpr\n              ], valueExpression),\n              this.makeCallDirect(indexedGet, [\n                module.local_get(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.local_get(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ], valueExpression)\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueExpr\n            ], valueExpression);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** The local to assign to. */\n    local: Local,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var type = local.type;\n    assert(type != Type.void);\n    var flow = this.currentFlow;\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.WRITTENTO);\n\n    if (type.isManaged) {\n      let module = this.module;\n      let nativeType = type.toNativeType();\n\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        if (this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeSkippedRelease(\n            module.local_get(localIndex, nativeType), // oldRef\n            valueExpr // newRef\n          );\n          if (tee) { // TEE(local = __skippedRelease(local, value))\n            this.currentType = type;\n            return module.local_tee(localIndex, valueExpr);\n          } else { // local = __skippedRelease(local, value)\n            this.currentType = Type.void;\n            return module.local_set(localIndex, valueExpr);\n          }\n        } else {\n          valueExpr = this.makeRetainRelease(\n            module.local_get(localIndex, nativeType), // oldRef\n            valueExpr // newRef\n          );\n          if (tee) { // TEE(local = __retainRelease(local, value))\n            this.currentType = type;\n            return module.local_tee(localIndex, valueExpr);\n          } else { // local = __retainRelease(local, value)\n            this.currentType = Type.void;\n            return module.local_set(localIndex, valueExpr);\n          }\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // TEE(local = __retain(value, local))\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // local = __retain(value, local)\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // TEE(local = value)\n        this.currentType = type;\n        return this.module.local_tee(localIndex, valueExpr);\n      } else { // local = value\n        this.currentType = Type.void;\n        return this.module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global to assign to. */\n    global: Global,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      if (this.skippedAutoreleases.has(valueExpr)) {\n        if (tee) { // (global = __skippedRelease(global, value)), global\n          this.currentType = type;\n          return module.block(null, [\n            module.global_set(global.internalName,\n              this.makeSkippedRelease(\n                module.global_get(global.internalName, nativeType), // oldRef\n                valueExpr // newRef\n              )\n            ),\n            module.global_get(global.internalName, nativeType)\n          ], nativeType);\n        } else { // global = __skippedRelease(global, value)\n          this.currentType = Type.void;\n          return module.global_set(global.internalName,\n            this.makeSkippedRelease(\n              module.global_get(global.internalName, nativeType), // oldRef\n              valueExpr // newRef\n            )\n          );\n        }\n      } else {\n        if (tee) { // (global = __retainRelease(global, value)), global\n          this.currentType = type;\n          return module.block(null, [\n            module.global_set(global.internalName,\n              this.makeRetainRelease(\n                module.global_get(global.internalName, nativeType), // oldRef\n                valueExpr // newRef\n              )\n            ),\n            module.global_get(global.internalName, nativeType)\n          ], nativeType);\n        } else { // global = __retainRelease(global, value)\n          this.currentType = Type.void;\n          return module.global_set(global.internalName,\n            this.makeRetainRelease(\n              module.global_get(global.internalName, nativeType), // oldRef\n              valueExpr // newRef\n            )\n          );\n        }\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType);\n      if (this.skippedAutoreleases.has(valueExpr)) {\n        if (tee) { // ((t1 = this).field = __skippedRelease(t1.field, t2 = value)), t2\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n          flow.freeTempLocal(tempThis);\n          this.currentType = fieldType;\n          return module.block(null, [\n            module.store(fieldType.byteSize,\n              module.local_tee(tempThis.index, thisExpr),\n              this.makeSkippedRelease(\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                  module.local_get(tempThis.index, nativeThisType),\n                  nativeFieldType, field.memoryOffset\n                ),\n                module.local_tee(tempValue.index, valueExpr), // newRef\n              ),\n              nativeFieldType, field.memoryOffset\n            ),\n            module.local_get(tempValue.index, nativeFieldType)\n          ], nativeFieldType);\n        } else { // (t1 = this).field = __skippedRelease(t1.field, value)\n          flow.freeTempLocal(tempThis);\n          this.currentType = Type.void;\n          return module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeSkippedRelease(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              valueExpr, // newRef\n            ),\n            nativeFieldType, field.memoryOffset\n          );\n        }\n      } else {\n        if (tee) { // ((t1 = this).field = __retainRelease(t1.field, t2 = value)), t2\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n          flow.freeTempLocal(tempThis);\n          this.currentType = fieldType;\n          return module.block(null, [\n            module.store(fieldType.byteSize,\n              module.local_tee(tempThis.index, thisExpr),\n              this.makeRetainRelease(\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                  module.local_get(tempThis.index, nativeThisType),\n                  nativeFieldType, field.memoryOffset\n                ),\n                module.local_tee(tempValue.index, valueExpr) // newRef\n              ),\n              nativeFieldType, field.memoryOffset\n            ),\n            module.local_get(tempValue.index, nativeFieldType)\n          ], nativeFieldType);\n        } else { // (t1 = this).field = __retainRelease(t1.field, value)\n          flow.freeTempLocal(tempThis);\n          this.currentType = Type.void;\n          return module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeRetainRelease(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              valueExpr // newRef\n            ),\n            nativeFieldType, field.memoryOffset\n          );\n        }\n      }\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let tempValue = flow.getAndFreeTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        this.currentType = fieldType;\n        return module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(tempValue.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let theCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.arguments,\n        expression,\n        module.if(\n          module.local_get(thisLocal.index, nativeSizeType),\n          module.local_get(thisLocal.index, nativeSizeType),\n          this.makeRetain(\n            this.makeAllocation(<Class>classInstance)\n          )\n        ),\n        Constraints.WILL_RETAIN\n      );\n      assert(this.skippedAutoreleases.has(theCall)); // guaranteed\n      let stmts: ExpressionRef[] = [\n        module.local_set(thisLocal.index, theCall)\n      ];\n      this.makeFieldInitialization(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.block(null, stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.resolveExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.unreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            flow.actualFunction.parent, // relative to caller\n            makeMap<string,Type>(flow.contextualTypeArguments),\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\n          let numTypeParameters = typeParameterNodes.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameterNodes[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterNodes = prototype.functionTypeNode.parameters;\n          let numParameters = parameterNodes.length;\n          let argumentNodes = expression.arguments;\n          let numArguments = argumentNodes.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameters; ++i) {\n            let typeNode = parameterNodes[i].type;\n            let templateName = typeNode.kind == NodeKind.NAMEDTYPE && !(<NamedTypeNode>typeNode).name.next\n              ? (<NamedTypeNode>typeNode).name.identifier.text\n              : null;\n            let argumentExpression = i < numArguments\n              ? argumentNodes[i]\n              : parameterNodes[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameters.toString(10), numArguments.toString(10)\n              );\n              return module.unreachable();\n            }\n            if (templateName !== null && inferredTypes.has(templateName)) {\n              let inferredType = inferredTypes.get(templateName);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpression(argumentExpression, inferredType);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonDenominator(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonDenominator(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterNodes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.unreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpression(argumentExpression, Type.auto);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(templateName, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterNodes[i].type,\n                flow.actualFunction,\n                flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.unreachable();\n              argumentExprs[i] = this.compileExpression(argumentExpression, concreteType, Constraints.CONV_IMPLICIT);\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameterNodes[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            makeMap<string,Type>(flow.contextualTypeArguments)\n          );\n          if (!instance) return this.module.unreachable();\n          return this.makeCallDirect(instance, argumentExprs, expression, contextualType == Type.void);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(prototype, null);\n        }\n        if (!instance) return this.module.unreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n          indexArg = module.load(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.unreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.unreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, usedLocals);\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        body.push(\n          module.local_set(argumentLocal.index,\n            this.makeRetain(initExpr)\n          )\n        );\n      } else {\n        body.push(\n          module.local_set(argumentLocal.index, initExpr)\n        );\n      }\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var thisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, returnType, thisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    var flow = trampoline.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinSymbols.argc, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinSymbols.argc, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        returnType,\n        thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.block(null, stmts, returnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        BuiltinSymbols.argc,\n        NativeType.I32,\n        true,\n        module.i32(0)\n      );\n    }\n    return BuiltinSymbols.argc;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(BuiltinSymbols.setargc,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.global_set(this.ensureArgcVar(),\n          module.local_get(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(BuiltinSymbols.setargc, \"__setargc\");\n    }\n    return BuiltinSymbols.setargc;\n  }\n\n  // <reference-counting>\n\n  /** Makes retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a retainRelease call, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeRetainRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\n    // if ((t1=newExpr) != (t2=oldExpr)) {\n    //   __retain(t1);\n    //   __release(t2);\n    // }, t1\n    var module = this.module;\n    var flow = this.currentFlow;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = this.options.nativeSizeType;\n    var temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n    var temp2 = flow.getAndFreeTempLocal(usizeType);\n    flow.freeTempLocal(temp1);\n    return module.block(null, [\n      module.if(\n        module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n          module.local_tee(temp1.index, newExpr),\n          module.local_tee(temp2.index, oldExpr)\n        ),\n        module.block(null, [\n          module.drop(\n            this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n          ),\n          this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n        ])\n      ),\n      module.local_get(temp1.index, nativeSizeType)\n    ], nativeSizeType);\n  }\n\n  /** Makes a skippedRelease call, ignoring the new expression's value and releasing the old expression's value, in this order. */\n  makeSkippedRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\n    // TODO: this helper can be eliminated altogether if the current logic holds\n    // (t1=newExpr), __release(oldExpr), t1\n    var module = this.module;\n    var flow = this.currentFlow;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = this.options.nativeSizeType;\n    var temp = flow.getAndFreeTempLocal(usizeType, findUsedLocals(oldExpr));\n    return module.block(null, [\n      module.local_set(temp.index, newExpr),\n      this.makeRelease(oldExpr),\n      module.local_get(temp.index, nativeSizeType)\n    ], nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes an automatic release call at the end of the current flow. */\n  makeAutorelease(expr: ExpressionRef, flow: Flow = this.currentFlow): ExpressionRef {\n    // FIXME: loses track of nonNull state?\n    return this.module.local_tee(flow.getAutoreleaseLocal(this.options.usizeType).index, expr);\n  }\n\n  /** Attempts to undo a final autorelease, returning the index of the previously retaining variable or -1 if not possible. */\n  undoAutorelease(expr: ExpressionRef, flow: Flow): i32 {\n    // NOTE: Can't remove the local.tee completely because it's already compiled\n    // and a child of something else. Preventing the final release however should\n    // make it optimize away.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: { // local.tee(__retain(expr))\n        if (isLocalTee(expr)) {\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            // Assumes that the expression actually belongs to the flow and that\n            // top-level autoreleases are never undone. While that's true, it's\n            // not necessary to check presence in scopedLocals.\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.tee(__retain(expr)) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.undoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Attemps to move a final autorelease from one flow to a parent.\n   * It is crucial that from flow hasn't processed autoreleases yet because otherwise the final\n   * retain would have been written already.\n   */\n  moveAutorelease(expr: ExpressionRef, fromInnerFlow: Flow, toOuterFlow: Flow): ExpressionRef {\n    // NOTE: While this avoids an unnecessary set of retain and release, it cannot\n    // eliminate the now unnecessary temporary local.tee because it is already part of\n    // another expression in the tree. But optimizing should collapse locals again.\n    var index = this.undoAutorelease(expr, fromInnerFlow);\n    return ~index\n      ? this.makeAutorelease(expr, toOuterFlow) // undone, can skip the retain\n      : this.makeAutorelease(this.makeRetain(expr), toOuterFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(flow: Flow, stmts: ExpressionRef[], clearFlags: bool = true): void {\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      for (let local of scopedLocals.values()) {\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (clearFlags) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the value. */\n  performAutoreleasesWithValue(\n    flow: Flow,\n    valueExpr: ExpressionRef,\n    valueType: Type,\n    stmts: ExpressionRef[] | null = null,\n    clearFlags: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, clearFlags);\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getAndFreeTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      let module = this.module;\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      return module.block(null, stmts, nativeType);\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return this.module.block(null, stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued top-level autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(flow: Flow, stmts: ExpressionRef[]): void {\n    var module = this.module;\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      // traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead.\n      let parent: Flow | null;\n      while (parent = flow.parent) flow = parent;\n      this.performAutoreleases(flow, stmts, false);\n    } else {\n      for (let local of flow.parentFunction.localsByIndex) {\n        let localIndex = local.index;\n        if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n          stmts.push(\n            this.makeRelease(\n              module.local_get(localIndex, local.type.toNativeType())\n            )\n          );\n        }\n      }\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr: ExpressionRef;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          let theOperands = assert(operands);\n          assert(theOperands.length);\n          expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n        } else {\n          expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n        }\n        if (this.currentType.isManaged) {\n          if (!skipAutorelease) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (nodeIsConstantValue(initializer.kind)) {\n            operands.push(this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.resolveExpression(initializer, instance.flow, parameterTypes[i]);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(parameterTypes[i].toNativeZero(module));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          return module.block(null, [\n            module.global_set(this.ensureArgcVar(), module.i32(numArguments)),\n            expr\n          ], this.currentType.toNativeType());\n        }\n      }\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    var expr = module.call_indirect(indexArg, operands, signature.toSignatureString());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return module.block(null, [\n      module.global_set(this.ensureArgcVar(), // might be calling a trampoline\n        module.i32(numArguments)\n      ),\n      expr\n    ], this.currentType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.block(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var target = this.resolver.resolveElementAccessExpression(\n      expression,\n      this.currentFlow,\n      contextualType\n    ); // reports\n    if (!target) return this.module.unreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let thisArg = this.compileExpression(expression.expression, (<Class>target).type,\n          Constraints.CONV_IMPLICIT\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg, constraints);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.compileFunctionUsingTypeArguments(\n        prototype,\n        [],\n        contextualTypeArguments\n      );\n      if (!instance) return this.module.unreachable();\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.if(\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.local_get(thisLocal.index, nativeSizeType)\n                  ),\n                  module.local_set(thisLocal.index,\n                    this.makeRetain(\n                      this.makeAllocation(<Class>classInstance)\n                    )\n                  )\n                )\n              ];\n              this.makeFieldInitialization(<Class>classInstance, stmts);\n              stmts.push(\n                module.local_get(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.block(null, stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      flow,\n      this.currentEnum || actualFunction\n    );\n    if (!target) return module.unreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, constraints);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          type = type.nonNullableType;\n        }\n        this.currentType = type;\n        return this.module.local_get(localIndex, type.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.unreachable();\n        }\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = type;\n        return this.module.global_get((<Global>target).internalName, type.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return this.module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\n    var expr = this.compileExpression(expression.expression, this.options.usizeType);\n    var actualType = this.currentType;\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\n    this.currentType = Type.bool;\n    if (!expectedType) return module.unreachable();\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(actualType == expectedType ? 1 : 0)\n      ], NativeType.I32);\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(0)\n      ], NativeType.I32);\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          actualType.toNativeZero(module)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          return module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(tempLocal.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(tempLocal.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.block(null, [\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\n          module.i32(1)\n        ], NativeType.I32);\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          return module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(tempLocal.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(tempLocal.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n        }\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        let classType = contextualType.classReference;\n        if (classType) {\n          if (classType.prototype == this.program.arrayPrototype) {\n            return this.compileArrayLiteral(\n              assert(classType.typeArguments)[0],\n              (<ArrayLiteralExpression>expression).elementExpressions,\n              constraints,\n              expression\n            );\n          }\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    constraints: Constraints,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var program = this.program;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n    var arrayType = arrayInstance.type;\n    var flow = this.currentFlow;\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(arrayType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? module.precomputeExpression(\n            this.compileExpression(<Expression>expression, elementType,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        : elementType.toNativeZero(module);\n      if (getExpressionId(expr) == ExpressionId.Const) {\n        assert(getExpressionType(expr) == nativeElementType);\n      } else {\n        isStatic = false;\n      }\n      values[i] = expr;\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.ensureStaticArrayBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.ensureStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // makeArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], reportNode);\n        this.currentType = arrayType;\n        return this.makeAutorelease(this.makeRetain(expr));\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(0)\n            : module.i32(0)\n        ], reportNode),\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStart.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStart).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        valueExpr = this.makeRetain(valueExpr);\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    return module.block(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getAutoreleaseLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\n        type.byteSize,\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, Constraints.CONV_IMPLICIT),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.local_set(\n      tempLocal.index,\n      this.makeRetain(\n        this.makeAllocation(classReference)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\n\n    this.currentType = classReference.type;\n    return module.block(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      flow\n    );\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        null\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(null, classInstance.type, classInstance.type),\n        null\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0,\n          this.makeRetain(\n            this.makeAllocation(classInstance)\n          )\n        )\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n        )\n      );\n    }\n    this.makeFieldInitialization(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.options.usizeType.toNativeZero(this.module),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(propertyAccess);\n\n    var target = this.resolver.resolvePropertyAccessExpression(propertyAccess, flow, contextualType); // reports\n    if (!target) return module.unreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\n        this.currentType = (<Field>target).type;\n        return module.load(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], propertyAccess, 0);\n        }\n        return module.unreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], propertyAccess,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          propertyAccess.range, (<FunctionPrototype>target).name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.unreachable();\n  }\n\n  compileTernaryExpression(\n    expression: TernaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(expression.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileExpression(ifThen, contextualType)\n        : this.compileExpression(ifElse, contextualType);\n    }\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, contextualType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var IfThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, contextualType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (IfThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!IfThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        IfThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!IfThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      // if (!(constraints & Constraints.WILL_RETAIN)) {\n        ifThenExpr = this.moveAutorelease(ifThenExpr, ifThenFlow, outerFlow);\n        ifElseExpr = this.moveAutorelease(ifElseExpr, ifElseFlow, outerFlow);\n      // }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(IfThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (IfThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n                if (overload) {\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.unreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n                if (overload) {\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.unreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.resolveExpression(expression.operand, flow); // reports\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      this.currentType = Type.void;\n      if (!target) return module.unreachable();\n      return this.makeAssignment(\n        target,\n        expr,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    } else if (!target) {\n      return module.unreachable();\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.resolveExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.unary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.unary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return module.unary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.EqF32, expr, module.f32(0));\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.EqF64, expr, module.f64(0));\n      }\n      default: {\n        assert(false);\n        return module.i32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.NeF32, expr, module.f32(0));\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.NeF64, expr, module.f64(0));\n      }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.currentMemoryOffset)\n        : module.i32(classInstance.currentMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields. */\n  makeFieldInitialization(\n    classInstance: Class,\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return [];\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let initializerNode = field.prototype.initializerNode;\n      if (initializerNode) { // use initializer\n        let initExpr = this.compileExpression(initializerNode, fieldType, // reports\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr);\n        }\n        stmts.push(\n          module.store(fieldType.byteSize,\n            module.local_get(thisLocalIndex, nativeSizeType),\n            initExpr,\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      } else {\n        let parameterIndex = field.prototype.parameterIndex;\n        stmts.push(\n          module.store(fieldType.byteSize,\n            module.local_get(thisLocalIndex, nativeSizeType),\n            parameterIndex >= 0 // initialized via parameter (here: a local)\n              ? module.local_get(\n                  isInline\n                    ? assert(flow.lookupLocal(field.name)).index\n                    : 1 + parameterIndex, // this is local 0\n                  nativeFieldType\n                )\n              : fieldType.toNativeZero(module),\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      }\n    }\n    return stmts;\n  }\n\n  makeInstanceOfClass(\n    expr: ExpressionRef,\n    classInstance: Class\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var idTemp = flow.getTempLocal(Type.i32);\n    var idExpr = module.load(4, false,\n      module.binary(BinaryOp.SubI32,\n        expr,\n        module.i32(this.program.runtimeHeaderSize)\n      ),\n      NativeType.I32\n    );\n    var label = \"instanceof_\" + classInstance.name + \"|\" + flow.pushBreakLabel();\n    var conditions: ExpressionRef[] = [];\n    conditions.push(\n      module.drop( // br_if returns the value too\n        module.br(label,\n          module.binary(BinaryOp.EqI32, // classId == class.id\n            module.local_tee(idTemp.index, idExpr),\n            module.i32(classInstance.id)\n          ),\n          module.i32(1) // ? true\n        )\n      )\n    );\n    // TODO: insert conditions for all possible subclasses (i.e. cat is also animal)\n    // TODO: simplify if there are none\n    conditions.push(\n      module.i32(0) // : false\n    );\n    flow.freeTempLocal(idTemp);\n    flow.popBreakLabel();\n    return module.block(label, conditions, NativeType.I32);\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Flattens a series of expressions to a nop, a single statement or a block depending on statement count. */\nexport function flatten(module: Module, stmts: ExpressionRef[], type: NativeType): ExpressionRef {\n  var length = stmts.length;\n  if (length == 0) return module.nop(); // usually filtered out again\n  if (length == 1) {\n    let single = stmts[0];\n    if (getExpressionType(single) == type) return single;\n    if (getExpressionId(single) == ExpressionId.Block) {\n      let count = getBlockChildCount(single);\n      let children = new Array<ExpressionRef>(count);\n      for (let i = 0; i < count; ++i) children[i] = getBlockChild(single, i);\n      return module.block(getBlockName(single), children, type);\n    }\n  }\n  return module.block(null, stmts,\n    type == NativeType.Auto\n      ? getExpressionType(stmts[length - 1])\n      : type\n  );\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_present_to_use_0 = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Module_cannot_have_multiple_start_functions = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  TODO_Cannot_inline_inferred_calls_and_specific_internals_yet = 224,\n  Expression_is_never_null = 225,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be present to use '{0}'.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Module cannot have multiple start functions.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"TODO: Cannot inline inferred calls and specific internals yet.\";\n    case 225: return \"Expression is never 'null'.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  Constraints,\n  RuntimeFeatures,\n  flatten\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Symbols of various compiler built-ins. */\nexport namespace BuiltinSymbols {\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const call_direct = \"~lib/builtins/call_direct\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n  export const void_ = \"~lib/builtins/void\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_u_xor = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_u_xor = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_s_f32x4_sat = \"~lib/builtins/i32x4.trunc_s_f32x4_sat\";\n  export const i32x4_trunc_u_f32x4_sat = \"~lib/builtins/i32x4.trunc_u_f32x4_sat\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_s_f64x2_sat = \"~lib/builtins/i64x2.trunc_s_f64x2_sat\";\n  export const i64x2_trunc_u_f64x2_sat = \"~lib/builtins/i64x2.trunc_u_f64x2_sat\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_s_i32x4 = \"~lib/builtins/f32x4.convert_s_i32x4\";\n  export const f32x4_convert_u_i32x4 = \"~lib/builtins/f32x4.convert_u_i32x4\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_s_i64x2 = \"~lib/builtins/f64x2.convert_s_i64x2\";\n  export const f64x2_convert_u_i64x2 = \"~lib/builtins/f64x2.convert_u_i64x2\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_allocate = \"~lib/memory/memory.allocate\";\n  export const memory_free = \"~lib/memory/memory.free\";\n  export const memory_reset = \"~lib/memory/memory.reset\";\n\n  // std/runtime.ts\n  export const runtime_instanceof = \"~lib/runtime/runtime.instanceof\";\n  export const runtime_flags = \"~lib/runtime/runtime.flags\";\n  export const runtime_allocate = \"~lib/util/runtime/allocate\";\n  export const runtime_reallocate = \"~lib/util/runtime/reallocate\";\n  export const runtime_register = \"~lib/util/runtime/register\";\n  export const runtime_discard = \"~lib/util/runtime/discard\";\n  export const runtime_makeArray = \"~lib/util/runtime/makeArray\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // compiler generated\n  export const started = \"~lib/started\";\n  export const argc = \"~lib/argc\";\n  export const setargc = \"~lib/setargc\";\n  export const capabilities = \"~lib/capabilities\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  /* Compiler reference. */\n  compiler: Compiler,\n  /** Respective function prototype. */\n  prototype: FunctionPrototype,\n  /** Pre-resolved type arguments. */\n  typeArguments: Type[] | null,\n  /** Operand expressions. */\n  operands: Expression[],\n  /** Contextual type. */\n  contextualType: Type,\n  /** Respective call expression. */\n  reportNode: CallExpression,\n  /** Indicates that contextual type is ASM type. */\n  isAsm: bool = false\n): ExpressionRef {\n  var module = compiler.module;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  // NOTE that consolidation of individual instructions into a single case isn't exactly scientific\n  // below, but rather done to make this file easier to work with. If there was a general rule it'd\n  // most likely be \"three or more instructions that only differ in their actual opcode\".\n\n  var directize = false;\n\n  switch (prototype.internalName) {\n\n    // === Static type evaluation =================================================================\n\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type == Type.bool\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.i32(1);\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.i32(0);\n      let classPrototype = classReference.prototype;\n      return module.i32(classPrototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n    }\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.i32(0);\n      return module.i32(classReference.isArrayLike ? 1 : 0);\n    }\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.signatureReference ? 1 : 0);\n    }\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n    }\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let element = compiler.resolver.resolveExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.void,\n        ReportMode.SWALLOW\n      );\n      return module.i32(element ? 1 : 0);\n    }\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let expr = compiler.compileExpression(operands[0], Type.auto);\n      compiler.currentType = Type.bool;\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinSymbols.isManaged: { // isManaged<T>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.isManaged ? 1 : 0);\n    }\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.i32(byteSize);\n        } else {\n          expr = module.i64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.i64(byteSize, 0);\n        } else {\n          expr = module.i32(byteSize);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      assert(isPowerOf2(byteSize));\n      let alignLog2 = ctz<i32>(byteSize);\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.i32(alignLog2);\n        } else {\n          expr = module.i64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.i64(alignLog2, 0);\n        } else {\n          expr = module.i32(alignLog2);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let classType = typeArguments![0].classReference;\n      if (!classType) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.unreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.unreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(offset);\n        } else {\n          return module.i64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(offset);\n        } else {\n          return module.i32(offset);\n        }\n      }\n    }\n\n    // === Math ===================================================================================\n\n    case BuiltinSymbols.clz: // any_bitcount<T?>(value: T) -> T\n    case BuiltinSymbols.ctz:\n    case BuiltinSymbols.popcnt: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.clz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.ClzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.ClzI64\n                : UnaryOp.ClzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.ClzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.ctz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.CtzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.CtzI64\n                : UnaryOp.CtzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.CtzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.popcnt: {\n          switch (compiler.currentType.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.PopcntI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.PopcntI64\n                : UnaryOp.PopcntI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.PopcntI64; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.binary(BinaryOp.RotlI32, arg0, arg1),\n            type\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.binary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.binary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.binary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflows\n    }\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.binary(BinaryOp.RotrI32, arg0, arg1),\n            type\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.binary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.binary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.binary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflowws\n    }\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFlow;\n\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal1 = flow.getTempLocal(Type.i32);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 31)) ^ (x >> 31)\n          expr = module.binary(BinaryOp.XorI32,\n            module.binary(BinaryOp.AddI32,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(BinaryOp.ShrI32,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  module.i32(31)\n                )\n              ),\n              module.local_get(tempLocalIndex1, NativeType.I32)\n            ),\n            module.local_get(tempLocalIndex2, NativeType.I32)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let options = compiler.options;\n          let flow = compiler.currentFlow;\n          let wasm64 = options.isWasm64;\n\n          let tempLocal1 = flow.getTempLocal(options.usizeType);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          expr = module.binary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n            module.binary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  wasm64 ? module.i64(63) : module.i32(31)\n                )\n              ),\n              module.local_get(tempLocalIndex1, options.nativeSizeType)\n            ),\n            module.local_get(tempLocalIndex2, options.nativeSizeType)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.I64: {\n          let flow = compiler.currentFlow;\n\n          let tempLocal1 = flow.getTempLocal(Type.i64);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 63)) ^ (x >> 63)\n          expr = module.binary(BinaryOp.XorI64,\n            module.binary(BinaryOp.AddI64,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(BinaryOp.ShrI64,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  module.i64(63)\n                )\n              ),\n              module.local_get(tempLocalIndex1, NativeType.I64)\n            ),\n            module.local_get(tempLocalIndex2, NativeType.I64)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n        case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n        case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtI64\n            : BinaryOp.GtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtU64\n            : BinaryOp.GtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.binary(BinaryOp.MaxF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.binary(BinaryOp.MaxF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type);\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\n      flow.freeTempLocal(tempLocal0);\n      return module.select(\n        module.local_tee(tempLocal0.index, arg0),\n        module.local_tee(tempLocal1.index, arg1),\n        module.binary(op,\n          module.local_get(tempLocal0.index, nativeType),\n          module.local_get(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n        case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n        case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtI64\n            : BinaryOp.LtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtU64\n            : BinaryOp.LtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.binary(BinaryOp.MinF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.binary(BinaryOp.MinF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type);\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\n      flow.freeTempLocal(tempLocal0);\n      return module.select(\n        module.local_tee(tempLocal0.index, arg0),\n        module.local_tee(tempLocal1.index, arg1),\n        module.binary(op,\n          module.local_get(tempLocal0.index, nativeType),\n          module.local_get(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.ceil: // any_rounding<T?>(value: T) -> T\n    case BuiltinSymbols.floor: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: return arg0; // considered rounded\n        case TypeKind.F32: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF32\n            : UnaryOp.FloorF32;\n          break;\n        }\n        case TypeKind.F64: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF64\n            : UnaryOp.FloorF64;\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let op: BinaryOp;\n      switch (type.kind) {\n        // TODO: does an integer version make sense?\n        case TypeKind.F32: { op = BinaryOp.CopysignF32; break; }\n        case TypeKind.F64: { op = BinaryOp.CopysignF64; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          let arg0 = compiler.compileExpression(operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            Constraints.CONV_IMPLICIT\n          );\n          expr = module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      compiler.currentType = type;\n      return expr;\n    }\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n\n    // === Memory access ==========================================================================\n\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        contextualType != Type.auto &&\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = outType;\n      return module.load(\n        type.byteSize,\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        outType.toNativeType(),\n        immOffset,\n        immAlign\n      );\n    }\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (operands.length == 4) {\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[3].range, \"Alignment\"\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.void;\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n    }\n\n    // === Atomics ================================================================================\n\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      compiler.currentType = outType;\n      return module.atomic_load(\n        type.byteSize,\n        arg0,\n        outType.toNativeType(),\n        immOffset\n      );\n    }\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n    }\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\n    case BuiltinSymbols.atomic_sub:\n    case BuiltinSymbols.atomic_and:\n    case BuiltinSymbols.atomic_or:\n    case BuiltinSymbols.atomic_xor:\n    case BuiltinSymbols.atomic_xchg: {\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      let op: AtomicRMWOp;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = inType;\n      return module.atomic_rmw(\n        op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize): T\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      let arg2 = compiler.compileExpression(operands[2],\n        inType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(arg2,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[2]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      compiler.currentType = inType;\n      return module.atomic_cmpxchg(\n        type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = compiler.compileExpression(operands[1], type,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg2 = compiler.compileExpression(operands[2],\n        Type.i64,\n        Constraints.CONV_IMPLICIT\n      );\n      compiler.currentType = Type.i32;\n      return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n    }\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = compiler.compileExpression(operands[1],\n        Type.i32,\n        Constraints.CONV_IMPLICIT\n      );\n      compiler.currentType = Type.i32;\n      return module.atomic_notify(arg0, arg1);\n    }\n\n    // === Control flow ===========================================================================\n\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.makeIsTrueish(\n        compiler.compileExpression(operands[2], Type.bool),\n        compiler.currentType // ^\n      );\n      compiler.currentType = type;\n      return module.select(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      checkArgsRequired(operands, 0, reportNode, compiler);\n      return module.unreachable();\n    }\n\n    // === Memory =================================================================================\n\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemorySize);\n    }\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemoryGrow, null, [\n        compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n      ]);\n    }\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_copy(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_fill(arg0, arg1, arg2);\n    }\n\n    // === Helpers ================================================================================\n\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let toType = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], toType);\n      let fromType = compiler.currentType;\n      compiler.currentType = toType;\n      if (fromType.size != toType.size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      return arg0;\n    }\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) {\n        if (typeArguments) {\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\n          compiler.currentType = typeArguments[0].nonNullableType;\n        }\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // return ifTrueish if assertions are disabled\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) { // simplify if dropped anyway\n          compiler.currentType = Type.void;\n          return module.nop();\n        }\n        return arg0;\n      }\n\n      // otherwise call abort if the assertion is false-ish\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n      compiler.currentType = type.nonNullableType;\n      let expr: ExpressionRef;\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        compiler.currentType = Type.void;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.if(\n              module.unary(UnaryOp.EqzI32, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.if(\n              module.unary(UnaryOp.EqzI64, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            expr = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            expr = module.if(\n              module.binary(BinaryOp.EqF32,\n                arg0,\n                module.f32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.if(\n              module.binary(BinaryOp.EqF64,\n                arg0,\n                module.f64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      } else {\n        compiler.currentType = type.nonNullableType;\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFlow;\n            let tempLocal = flow.getAndFreeTempLocal(type);\n            flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED); // arg0 is wrapped\n            expr = module.if(\n              module.local_tee(tempLocal.index, arg0),\n              module.local_get(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64);\n            expr = module.if(\n              module.unary(UnaryOp.EqzI64,\n                module.local_tee(tempLocal.index, arg0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType);\n            expr = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.local_tee(tempLocal.index, arg0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32);\n            expr = module.if(\n              module.binary(BinaryOp.EqF32,\n                module.local_tee(tempLocal.index, arg0),\n                module.f32(0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64);\n            expr = module.if(\n              module.binary(BinaryOp.EqF64,\n                module.local_tee(tempLocal.index, arg0),\n                module.f64(0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let flow = compiler.currentFlow;\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      // eliminate unnecessary tees by preferring contextualType(=void):\n      let expr = compiler.compileExpression(operands[0], contextualType);\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return expr;\n    }\n    case BuiltinSymbols.call_direct: directize = true;\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\n      ) return module.unreachable();\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\n      let arg0 = compiler.compileExpression(operands[0], Type.u32);\n      let arg0Type = compiler.currentType;\n      if (!(\n        arg0Type == Type.u32 ||                                      // either plain index\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\n      )) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.unreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let nativeReturnType = returnType.toNativeType();\n      let parameterTypes = new Array<Type>(numOperands);\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.i32);\n        let operandType = compiler.currentType;\n        parameterTypes[i] = operandType;\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      if (directize) {\n        // if the index expression is precomputable to a constant value, emit a direct call\n        if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n          assert(getExpressionType(arg0) == NativeType.I32);\n          let index = getConstValueI32(arg0);\n          let functionTable = compiler.functionTable;\n          if (index >= 0 && index < functionTable.length) {\n            return module.call(functionTable[index], operandExprs, nativeReturnType);\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.unreachable();\n      }\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.call_indirect(arg0, operandExprs, typeName);\n    }\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\n      ) return module.unreachable();\n      let classInstance = typeArguments![0].classReference;\n      if (!classInstance) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      compiler.currentType = classInstance.type;\n      return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, reportNode);\n    }\n\n    // === User-defined diagnostics ===============================================================\n\n    case BuiltinSymbols.ERROR: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.WARNING: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n    case BuiltinSymbols.INFO: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n\n    // === Portable type conversions ==============================================================\n\n    case BuiltinSymbols.i8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.isize: {\n      let isizeType = compiler.options.isizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = isizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], isizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.usize: {\n      let usizeType = compiler.options.usizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], usizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.bool: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_EXPLICIT);\n    }\n\n    // === SIMD ===================================================================================\n\n    case BuiltinSymbols.v128: // alias for now\n    case BuiltinSymbols.i8x16: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 16, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 16; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI8(getConstValueI32(expr), bytes, i);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i16x8: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 8, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 8; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI16(getConstValueI32(expr), bytes, i << 1);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI32(getConstValueI32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I64);\n          let off = i << 3;\n          writeI32(getConstValueI64Low(expr), bytes, off);\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F32);\n          writeF32(getConstValueF32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F64);\n          writeF64(getConstValueF64(expr), bytes, i << 3);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = UnaryOp.SplatVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = UnaryOp.SplatVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = UnaryOp.SplatVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = UnaryOp.SplatVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? UnaryOp.SplatVecI64x2\n            : UnaryOp.SplatVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = UnaryOp.SplatVecF32x4; break; }\n        case TypeKind.F64: { op = UnaryOp.SplatVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = type;\n        return module.unreachable();\n      }\n      let op: SIMDExtractOp;\n      switch (type.kind) {\n        case TypeKind.I8:  { op = SIMDExtractOp.ExtractLaneSVecI8x16; break; }\n        case TypeKind.U8:  { op = SIMDExtractOp.ExtractLaneUVecI8x16; break; }\n        case TypeKind.I16: { op = SIMDExtractOp.ExtractLaneSVecI16x8; break; }\n        case TypeKind.U16: { op = SIMDExtractOp.ExtractLaneUVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDExtractOp.ExtractLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDExtractOp.ExtractLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneVecI64x2\n            : SIMDExtractOp.ExtractLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDExtractOp.ExtractLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDExtractOp.ExtractLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = type;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      compiler.currentType = type;\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        return module.unreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.unreachable();\n      }\n      return module.simd_extract(op, arg0, idx);\n    }\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: SIMDReplaceOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = SIMDReplaceOp.ReplaceLaneVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = SIMDReplaceOp.ReplaceLaneVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDReplaceOp.ReplaceLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDReplaceOp.ReplaceLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneVecI64x2\n            : SIMDReplaceOp.ReplaceLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDReplaceOp.ReplaceLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDReplaceOp.ReplaceLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.unreachable();\n      }\n      let arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.simd_replace(op, arg0, idx, arg2);\n    }\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let laneWidth = type.byteSize;\n      let laneCount = 16 / laneWidth;\n      assert(isInteger(laneCount) && isPowerOf2(laneCount));\n      if (\n        checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.F32:\n        case TypeKind.F64: break;\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let mask = new Uint8Array(16);\n      let maxIdx = (laneCount << 1) - 1;\n      for (let i = 0; i < laneCount; ++i) {\n        let operand = operands[2 + i];\n        let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n        if (getExpressionId(argN) != ExpressionId.Const) {\n          compiler.error(\n            DiagnosticCode.Expression_must_be_a_compile_time_constant,\n            operand.range\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        assert(getExpressionType(argN) == NativeType.I32);\n        let idx = getConstValueI32(argN);\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operand.range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        switch (laneWidth) {\n          case 1: {\n            writeI8(idx, mask, i);\n            break;\n          }\n          case 2: {\n            let off8 = i << 1;\n            let idx8 = idx << 1;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            break;\n          }\n          case 4: {\n            let off8 = i << 2;\n            let idx8 = idx << 2;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            break;\n          }\n          case 8: {\n            let off8 = i << 3;\n            let idx8 = idx << 3;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            writeI8(idx8 + 4, mask, off8 + 4);\n            writeI8(idx8 + 5, mask, off8 + 5);\n            writeI8(idx8 + 6, mask, off8 + 6);\n            writeI8(idx8 + 7, mask, off8 + 7);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.simd_shuffle(arg0, arg1, mask);\n    }\n    case BuiltinSymbols.v128_add: // any_binary<T!>(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_sub:\n    case BuiltinSymbols.v128_mul:\n    case BuiltinSymbols.v128_div:\n    case BuiltinSymbols.v128_add_saturate:\n    case BuiltinSymbols.v128_sub_saturate:\n    case BuiltinSymbols.v128_min:\n    case BuiltinSymbols.v128_max:\n    case BuiltinSymbols.v128_eq:\n    case BuiltinSymbols.v128_ne:\n    case BuiltinSymbols.v128_lt:\n    case BuiltinSymbols.v128_le:\n    case BuiltinSymbols.v128_gt:\n    case BuiltinSymbols.v128_ge: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_add: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.AddVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.AddVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.AddVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.AddVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.AddVecI64x2\n                : BinaryOp.AddVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.AddVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.AddVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.SubVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.SubVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.SubVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.SubVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.SubVecI64x2\n                : BinaryOp.SubVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.SubVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.SubVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_mul: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.MulVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.MulVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.MulVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.MulVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MulVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.MulVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_div: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.DivVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.DivVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_add_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.AddSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.AddSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.AddSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.AddSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.SubSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.SubSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.SubSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.SubSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_min: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MinVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MinVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_max: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MaxVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MaxVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_eq: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.EqVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.EqVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.EqVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.EqVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.EqVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.EqVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ne: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.NeVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.NeVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.NeVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.NeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.NeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.NeVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_lt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LtSVecI32x4\n                  : BinaryOp.LtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_le: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LeSVecI32x4\n                  : BinaryOp.LeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_gt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GtSVecI32x4\n                  : BinaryOp.GtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ge: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GeSVecI32x4\n                  : BinaryOp.GeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_neg: // any_unary<T!>(a: v128) -> v128\n    case BuiltinSymbols.v128_abs:\n    case BuiltinSymbols.v128_sqrt:\n    case BuiltinSymbols.v128_convert:\n    case BuiltinSymbols.v128_trunc: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_neg: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.NegVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.NegVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.NegVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.NegVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.NegVecI64x2\n                : UnaryOp.NegVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = UnaryOp.NegVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.NegVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_abs: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.AbsVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.AbsVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sqrt: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.SqrtVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.SqrtVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_convert: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.ConvertSVecI32x4ToVecF32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.ConvertUVecI32x4ToVecF32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.ConvertSVecI64x2ToVecF64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.ConvertUVecI64x2ToVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_trunc: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.TruncSatSVecF32x4ToVecI32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.TruncSatUVecF32x4ToVecI32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.TruncSatSVecF64x2ToVecI64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.TruncSatUVecF64x2ToVecI64x2; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.v128_shl: // any_shift<T!>(a: v128, b: i32) -> v128\n    case BuiltinSymbols.v128_shr: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: SIMDShiftOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_shl: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = SIMDShiftOp.ShlVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = SIMDShiftOp.ShlVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = SIMDShiftOp.ShlVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = SIMDShiftOp.ShlVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShlVecI64x2\n                : SIMDShiftOp.ShlVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_shr: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = SIMDShiftOp.ShrSVecI8x16; break; }\n            case TypeKind.U8:  { op = SIMDShiftOp.ShrUVecI8x16; break; }\n            case TypeKind.I16: { op = SIMDShiftOp.ShrSVecI16x8; break; }\n            case TypeKind.U16: { op = SIMDShiftOp.ShrUVecI16x8; break; }\n            case TypeKind.I32: { op = SIMDShiftOp.ShrSVecI32x4; break; }\n            case TypeKind.U32: { op = SIMDShiftOp.ShrUVecI32x4; break; }\n            case TypeKind.I64: { op = SIMDShiftOp.ShrSVecI64x2; break; }\n            case TypeKind.U64: { op = SIMDShiftOp.ShrUVecI64x2; break; }\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrSVecI64x2\n                : SIMDShiftOp.ShrSVecI32x4;\n              break;\n            }\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrUVecI64x2\n                : SIMDShiftOp.ShrUVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.simd_shift(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_and: // any_bitwise_binary(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_or:\n    case BuiltinSymbols.v128_xor: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_and: { op = BinaryOp.AndVec128; break; }\n        case BuiltinSymbols.v128_or:  { op = BinaryOp.OrVec128; break; }\n        case BuiltinSymbols.v128_xor: { op = BinaryOp.XorVec128; break; }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_not: { // any_bitwise_unary(a: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.unary(UnaryOp.NotVec128, arg0);\n    }\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.simd_bitselect(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.v128_any_true: // any_test<T!>(a: v128) -> bool\n    case BuiltinSymbols.v128_all_true: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_any_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AnyTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AnyTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AnyTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AnyTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AnyTrueVecI64x2\n                : UnaryOp.AnyTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_all_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AllTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AllTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AllTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AllTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AllTrueVecI64x2\n                : UnaryOp.AllTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      return module.unary(op, arg0);\n    }\n\n    // === Internal runtime =======================================================================\n\n    case BuiltinSymbols.idof: {\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.u32;\n      if (!type) return module.unreachable();\n      let classReference = type.classReference;\n      if (!classReference || classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      return module.i32(classReference.id);\n    }\n    case BuiltinSymbols.visit_globals: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_globals, [ arg0 ], NativeType.None);\n    }\n    case BuiltinSymbols.visit_members: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_members, [ arg0, arg1 ], NativeType.None);\n    }\n  }\n\n  // try to defer inline asm to a concrete built-in\n  {\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\n    if (expr) {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      return expr;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Cannot_find_name_0,\n    reportNode.expression.range, prototype.internalName\n  );\n  return module.unreachable();\n}\n\n/** Tries to defer an inline-assembler-like call to a built-in function. */\nfunction tryDeferASM(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  if (compiler.options.hasFeature(Feature.THREADS)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\n    }\n  }\n  if (compiler.options.hasFeature(Feature.SIMD)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\n      case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.void, reportNode);\n\n      case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\n      case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\n      case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_s_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_u_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_trunc_s_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_trunc_u_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\n      case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_s_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_u_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\n      case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_s_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_u_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\n    }\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(\n    compiler,\n    <FunctionPrototype>prototype,\n    [ typeArgument ],\n    operands,\n    contextualType,\n    reportNode,\n    /* isAsm */ true\n  );\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringInstance = compiler.program.stringInstance;\n  if (!stringInstance) return module.unreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.unreachable();\n\n  var messageArg: ExpressionRef;\n  if (message !== null) {\n    // The message argument works much like an arm of an IF that does not become executed if the\n    // assertion succeeds respectively is only being computed if the program actually crashes.\n    // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n    // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n    messageArg = compiler.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n  } else {\n    messageArg = stringInstance.type.toNativeZero(module);\n  }\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.block(null, [\n    module.call(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.i32(reportNode.range.line),\n        module.i32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.unreachable()\n  ]);\n}\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var typeRef = compiler.ensureFunctionType([ Type.u32 ], Type.void); // cookie\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  compiler.compileFunction(visitInstance);\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinSymbols.visit_globals, typeRef, [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var ftype = compiler.ensureFunctionType([ usizeType, Type.i32 ], Type.void); // ref, cookie\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(instance.type.isManaged);\n    assert(id == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          visitSig.thisType == instance.type\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        for (let member of members.values()) {\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      flatten(module, code, NativeType.None)\n    );\n    relooper.addBranchForSwitch(outer, block, [ id ]);\n    blocks.push(block);\n  }\n  for (let [id, instance] of managedClasses) {\n    let base = instance.base;\n    if (base) {\n      relooper.addBranch(blocks[id], blocks[base.id]);\n    }\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinSymbols.visit_members, ftype, [ nativeSizeType ], relooper.renderAndDispose(outer, 2));\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(id == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: CallExpression\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  prototype: FunctionPrototype\n): i32 {\n  if (typeArguments) {\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(\n  operands: Expression[],\n  expected: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  if (operands.length != expected) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(\n  operands: Expression[],\n  expectedMinimum: i32,\n  expectedMaximum: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getLocalGetIndex,\n  getLocalSetIndex,\n  getLocalSetValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.LocalGet: {\n        this.push(\"$\");\n        this.push(getLocalGetIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.LocalSet: {\n        this.push(\"$\");\n        this.push(getLocalSetIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getLocalSetValue(expr));\n        return;\n      }\n      case ExpressionId.GlobalGet:\n      case ExpressionId.GlobalSet: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.MemorySize: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.MemoryGrow: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicNotify:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.V128: return \"v128\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\n import {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\nimport { Source, NodeKind, ImportStatement, DeclarationStatement, ExportStatement, Range } from \"./ast\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.isEntry) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var members = file.exports;\n    if (members) {\n      for (let [name, member] of members) this.visitElement(name, member);\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (seen.has(element)) {\n      this.visitAlias(name, element, <string>seen.get(element));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(name, getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(name, setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\nclass FunctionMetadata {\n  name: string;\n  parameters: {[key: string]: string} = {};\n  returnType: string;\n}\n\nclass ContractMetadata {\n  viewMethods: {[key: string]: FunctionMetadata} = {};\n  changeMethods: {[key: string]: FunctionMetadata} = {};\n}\n\n// TODO: Extract this into separate module, preferrable pluggable\nexport class NEARBindingsBuilder extends ExportsWalker {\n  private typeMapping: { [key: string]: string } = {\n    \"i32\": \"Integer\",\n    \"u32\": \"Integer\",\n    \"i64\": \"String\",\n    \"u64\": \"String\",\n    \"String\": \"String\",\n    \"bool\": \"Boolean\",\n    \"Uint8Array\": \"String\",\n    \"u128\": \"String\"\n  };\n\n  private nonNullableTypes = [\"i32\", \"u32\", \"i64\", \"u64\", \"bool\"];\n\n  private sb: string[] = [];\n  private generatedEncodeFunctions = new Set<string>();\n  private generatedDecodeFunctions = new Set<string>();\n  private exportedClasses: Class[] = [];\n  private exportedFunctions: Function[] = [];\n  classInjections = new Map<string, string>();\n  classRanges = new Map<string, Range>();\n\n  static build(program: Program): string {\n    return new NEARBindingsBuilder(program).build();\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    // Do nothing\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    // Do nothing\n  }\n\n  visitClass(name: string, element: Class): void {\n    this.classRanges.set(element.name, element.declaration.range);\n    if (!element.is(CommonFlags.MODULE_EXPORT)) {\n      return;\n    }\n    this.exportedClasses.push(element);\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (!element.is(CommonFlags.MODULE_EXPORT)) {\n      return;\n    }\n    this.generateArgsParser(element);\n    this.generateWrapperFunction(element);\n    this.exportedFunctions.push(element);\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    // Do nothing\n  }\n\n  visitField(name: string, element: Field): void {\n    throw new Error(\"Shouldn't be called\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    // Do nothing\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // Do nothing\n  }\n\n  private generateArgsParser(element: Function) {\n    let signature = element.signature;\n    let fields = signature.parameterNames ? signature.parameterNames.map((paramName, i) => {\n      return { name: paramName, type: signature.parameterTypes[i] };\n    }) : [];\n    fields.forEach(field => this.generateDecodeFunction(field.type));\n    this.sb.push(`export class __near_ArgsParser_${element.name} extends ThrowingJSONHandler {\n        buffer: Uint8Array;\n        decoder: JSONDecoder<__near_ArgsParser_${element.name}>;\n        handledRoot: boolean = false;\n      `);\n    if (signature.parameterNames) {\n      fields.forEach((field) => {\n        this.sb.push(`__near_param_${field.name}: ${this.typeName(field.type)};`);\n      });\n      this.generateHandlerMethods(\"this.__near_param_\", fields);\n    } else {\n      this.generateHandlerMethods(\"this.__near_param_\", []);\n    }\n    this.sb.push(`}`);\n  }\n\n  private generateWrapperFunction(element: Function) {\n    let signature = element.signature;\n    let returnType = signature.returnType;\n    this.generateEncodeFunction(returnType);\n    this.sb.push(`export function ${element.name}(): void {\n      // Reading input bytes.\n      let json = storage._internalReadBytes(4, 0, 0);\n      let handler = new __near_ArgsParser_${element.name}();\n      handler.buffer = json;\n      handler.decoder = new JSONDecoder<__near_ArgsParser_${element.name}>(handler);\n      handler.decoder.deserialize(json);`);\n    if (returnType != Type.void) {\n      this.sb.push(`let result = wrapped_${element.name}(`);\n    } else {\n      this.sb.push(`wrapped_${element.name}(`);\n    }\n    if (signature.parameterNames) {\n      this.sb.push(signature.parameterNames.map(paramName => `handler.__near_param_${paramName}`).join(\",\"));\n    }\n    this.sb.push(\");\");\n    if (returnType != Type.void) {\n      this.sb.push(`\n        let encoder = new JSONEncoder();\n      `);\n      this.generateFieldEncoder(returnType, \"null\", \"result\");\n      this.sb.push(`\n        let val = encoder.serialize();\n        return_value(val.byteLength, <usize>val.buffer);\n      `);\n    }\n    this.sb.push(`}`);\n  }\n\n  private generateHandlerMethods(valuePrefix: string, fields: any[]) : void {\n    let fieldsWithTypes = (types: string[]): any[] =>\n      fields.filter(field => types.indexOf(this.typeName(field.type)) != -1);\n\n    this.generateBasicSetterHandlers(valuePrefix, \"Integer\", \"i64\", fieldsWithTypes([\"i32\", \"u32\"]));\n    this.generateBasicSetterHandlers(valuePrefix, \"String\", \"String\", fieldsWithTypes([\"String\", \"i64\", \"u64\", \"Uint8Array\", \"u128\"]));\n    this.generateBasicSetterHandlers(valuePrefix, \"Boolean\", \"bool\", fieldsWithTypes([\"bool\"]));\n\n    this.sb.push(\"setNull(name: string): void {\");\n    fields.forEach((field) => {\n      this.sb.push(`if (name == \"${field.name}\") {\n        ${valuePrefix}${field.name} = <${this.typeName(field.type)}>null;\n        return;\n      }`);\n    });\n    this.sb.push(`\n      super.setNull(name);\n    }`);\n\n    let nonBasicFields = fields.filter(field => field.type.classReference);\n    this.sb.push(`\n      pushObject(name: string): bool {`);\n    this.sb.push(`if (!this.handledRoot) {\n      assert(name == null);\n      this.handledRoot = true;\n      return true;\n    } else {\n      assert(name != null);\n    }`);\n    this.generatePushHandler(valuePrefix, nonBasicFields.filter(field => !this.isArrayType(field.type)));\n    this.sb.push(`\n        return super.pushObject(name);\n      }`);\n    this.sb.push(`\n      pushArray(name: string): bool {`);\n    this.generatePushHandler(valuePrefix, nonBasicFields.filter(field => this.isArrayType(field.type)));\n    this.sb.push(`\n        return super.pushArray(name);\n      }`);\n  }\n\n  private generateBasicSetterHandlers(valuePrefix: string, setterType: string, setterValueType: string, matchingFields: any[]) {\n    if (matchingFields.length > 0) {\n      this.sb.push(`set${setterType}(name: string, value: ${setterValueType}): void {`);\n      matchingFields.forEach(field => {\n        let fieldTypeName = this.typeName(field.type);\n        if (setterType == \"String\" && fieldTypeName != \"String\") {\n          if (fieldTypeName == \"Uint8Array\") {\n            this.sb.push(`if (name == \"${field.name}\") {\n              ${valuePrefix}${field.name} = base64.decode(value);\n              return; \n            }`);\n          } else if (fieldTypeName == \"u128\") {\n            this.sb.push(`if (name == \"${field.name}\") {\n              ${valuePrefix}${field.name} = u128.fromString(value);\n              return;\n            }`);\n          } else {\n            let className = field.type == \"u64\" ? \"U64\" : \"I64\";\n            this.sb.push(`if (name == \"${field.name}\") {\n              ${valuePrefix}${field.name} = ${className}.parseInt(value);\n              return;\n            }`);\n          }\n        } else {\n          this.sb.push(`if (name == \"${field.name}\") {\n            ${valuePrefix}${field.name} = <${fieldTypeName}>value;\n            return;\n          }`);\n        }\n      });\n      this.sb.push(`\n        super.set${setterType}(name, value);\n      }`);\n    }\n  }\n\n  private generatePushHandler(valuePrefix: string, fields: any[]) {\n    fields.forEach((field) => {\n      if (!(this.typeName(field.type) in this.typeMapping)) {\n        this.sb.push(`if (name == \"${field.name}\") {\n          ${valuePrefix}${field.name} = __near_decode_${this.encodeType(field.type)}(this.buffer, this.decoder.state);\n          return false;\n        }`);\n      }\n    });\n  }\n\n  private generateArrayHandlerMethods(valuePrefix: string, fieldType: Type) : void {\n    let fieldTypeName = this.typeName(fieldType);\n    let setterTypeName = this.typeMapping[fieldTypeName];\n    if (setterTypeName) {\n      if (fieldTypeName == \"u64\" || fieldTypeName == \"i64\") {\n        let className = fieldTypeName == \"u64\" ? \"U64\" : \"I64\";\n        this.sb.push(`setString(name: string, value: string): void {\n          ${valuePrefix}.push(${className}.parseInt(value));\n        }`);\n      } else if (fieldTypeName == \"Uint8Array\") {\n        this.sb.push(`setString(name: string, value: string): void {\n          ${valuePrefix}.push(base64.decode(value));\n        }`);\n      } else {\n        let valueType = fieldTypeName;\n        if (valueType == \"u32\" || valueType == \"i32\") {\n          valueType = \"i64\";\n        }\n        this.sb.push(`set${setterTypeName}(name: string, value: ${valueType}): void {\n          ${valuePrefix}.push(<${fieldTypeName}>value);\n        }`);\n      }\n      this.sb.push(`setNull(name: string): void {\n        ${valuePrefix}.push(<${fieldTypeName}>null);\n      }\n      pushArray(name: string): bool {\n        assert(name == null && !this.handledRoot);\n        this.handledRoot = true;\n        return true;\n      }`);\n    } else {\n      this.sb.push(`pushObject(name: string): bool {\n        ${valuePrefix}.push(__near_decode_${this.encodeType(fieldType)}(this.buffer, this.decoder.state));\n        return false;\n      }\n      pushArray(name: string): bool {\n        assert(name == null);\n        if (!this.handledRoot) {\n          this.handledRoot = true;\n          return true;\n        }\n        ${valuePrefix}.push(__near_decode_${this.encodeType(fieldType)}(this.buffer, this.decoder.state));\n        return false;\n      }`);\n    }\n  }\n\n\n  private generateEncodeFunction(type: Type) {\n    if (!type.classReference) {\n      return;\n    }\n\n    let encodedTypeName = this.encodeType(type);\n    let typeName = this.typeName(type);\n    if (this.generatedEncodeFunctions.has(encodedTypeName) || typeName in this.typeMapping) {\n      return;\n    }\n    this.generatedEncodeFunctions.add(encodedTypeName);\n\n    let methodName = `__near_encode_${encodedTypeName}`;\n    if (this.tryUsingImport(type, methodName)) {\n      return;\n    }\n\n    if (this.isArrayType(type)) {\n      // Array\n      this.generateEncodeFunction(type.classReference.typeArguments![0]);\n\n      this.sb.push(`export function __near_encode_${encodedTypeName}(\n          value: ${typeName},\n          encoder: JSONEncoder): void {`);\n      this.sb.push(`for (let i = 0; i < value.length; i++) {`);\n      this.generateFieldEncoder(type.classReference.typeArguments![0], \"null\", \"value[i]\");\n      this.sb.push(\"}\");\n\n    } else {\n      // Object\n      this.getFields(type.classReference).forEach(field => {\n        this.generateEncodeFunction(field.type);\n      });\n\n      this.sb.push(`export function __near_encode_${encodedTypeName}(\n          value: ${typeName},\n          encoder: JSONEncoder): void {`);\n      this.getFields(type.classReference).forEach(field => {\n        let fieldType = field.type;\n        let fieldName = field.name;\n        let sourceExpr = `value.${fieldName}`;\n        this.generateFieldEncoder(fieldType, `\"${fieldName}\"`, sourceExpr);\n      });\n    }\n\n    this.sb.push(\"}\");\n    let className = this.typeName(type);\n\n    let injections = `\n        static decode(json: Uint8Array): ${className} {\n          let value = new ${className}();\n          value.decode(json);\n          return value;\n        }\n\n        decode(json: Uint8Array): ${className} {\n          __near_decode_${typeName}(json, null, this);\n          return this;\n        }\n\n        private _encoder(): JSONEncoder {\n          let encoder: JSONEncoder = new JSONEncoder();\n          encoder.pushObject(null);\n          __near_encode_${typeName}(this, encoder);\n          encoder.popObject();\n          return encoder;\n        }\n\n        encode(): Uint8Array {\n          return this._encoder().serialize();\n        }\n\n        toString(): string {\n          return this._encoder().toString();\n        }\n      `;\n    this.classInjections.set(type.classReference.name, injections);\n  }\n\n  private tryUsingImport(type: Type, methodName: string): bool {\n    let sourcesWithExport = this.program.sources.filter(source =>\n      this.getExports(source).filter(d => d.name.text == methodName).length > 0);\n\n    if (sourcesWithExport.length == 0) {\n      return false;\n    }\n\n    if (sourcesWithExport.length > 1) {\n      console.log(`WARN: more than one file exporting ${methodName}: ${sourcesWithExport.map(s => s.normalizedPath)}`);\n    }\n\n    let importPath = sourcesWithExport[0].normalizedPath.replace('.ts', '');\n    this.sb.push(`import { ${methodName} } from \"./${importPath}\";`);\n    return true;\n  }\n\n  private generateHandler(type: Type) {\n    let typeName = this.encodeType(type);\n    this.sb.push(`export class __near_JSONHandler_${typeName} extends ThrowingJSONHandler {\n      buffer: Uint8Array;\n      decoder: JSONDecoder<__near_JSONHandler_${typeName}>;\n      handledRoot: boolean = false;\n      value: ${this.typeName(type)};\n      \n      constructor(value_: ${this.typeName(type)}) {\n        super();\n        this.value = value_;\n      }\n    `);\n    if (this.isArrayType(type)) {\n      this.generateArrayHandlerMethods(\"this.value\", type.classReference!.typeArguments![0]);\n    } else {\n      this.generateHandlerMethods(\"this.value.\", this.getFields(type.classReference!));\n    }\n    this.sb.push(\"}\\n\");\n  }\n\n  private encodeType(type: Type) : string {\n    return (<any>this.typeName(type))\n      .replace(/_/g, '__')\n      .replace(/>/g, '')\n      .replace(/</g, '_');\n  }\n\n  private typeName(type: Type): string {\n    if (!type.classReference) {\n      return type.toString();\n    }\n    let cls = type.classReference;\n    if (cls.typeArguments && cls.typeArguments.length > 0) {\n      return cls.prototype.name + \"<\" +\n        cls.typeArguments.map(argType => this.typeName(argType)).join(\", \") +\n        \">\"\n    }\n    return cls.prototype.name;\n  }\n\n  private generateDecodeFunction(type: Type) {\n    if (!type.classReference) {\n      return;\n    }\n\n    let encodedTypeName = this.encodeType(type);\n    let typeName = this.typeName(type);\n    if (this.generatedDecodeFunctions.has(encodedTypeName) || typeName in this.typeMapping) {\n      return;\n    }\n    this.generatedDecodeFunctions.add(encodedTypeName);\n\n    let methodName = `__near_decode_${encodedTypeName}`;\n    if (this.tryUsingImport(type, methodName)) {\n      return;\n    }\n\n    this.generateHandler(type);\n    if (this.isArrayType(type)) {\n      // Array\n      this.generateDecodeFunction(type.classReference.typeArguments![0]);\n    } else {\n      // Object\n      this.getFields(type.classReference).forEach(field => {\n        this.generateDecodeFunction(field.type);\n      });\n    }\n\n    this.sb.push(`export function __near_decode_${encodedTypeName}(\n        buffer: Uint8Array, state: DecoderState, value: ${typeName} = null):${typeName} {\n      if (value == null) {\n        value = new ${typeName}();\n      }\n      let handler = new __near_JSONHandler_${encodedTypeName}(value);\n      handler.buffer = buffer;\n      handler.decoder = new JSONDecoder<__near_JSONHandler_${encodedTypeName}>(handler);\n      handler.decoder.deserialize(buffer, state);\n      return value;\n    }\\n`);\n  }\n\n  private generateFieldEncoder(fieldType: Type, fieldExpr: string, sourceExpr: string) {\n    let fieldTypeName = this.typeName(fieldType);\n    let setterType = this.typeMapping[fieldTypeName];\n    if (!setterType) {\n      // Object / array\n      let pushType = this.isArrayType(fieldType) ? \"Array\" : \"Object\";\n      this.sb.push(`if (${sourceExpr} != null) {\n          encoder.push${pushType}(${fieldExpr});\n          __near_encode_${this.encodeType(fieldType)}(${sourceExpr}, encoder);\n          encoder.pop${pushType}();\n        } else {\n          encoder.setNull(${fieldExpr});\n        }`);\n    } else {\n      // Basic types\n      if (this.nonNullableTypes.indexOf(fieldTypeName) != -1) {\n        if ([\"i64\", \"u64\"].indexOf(fieldTypeName) != -1) {\n          this.sb.push(`encoder.set${setterType}(${fieldExpr}, ${sourceExpr}.toString());`);\n        } else {\n          this.sb.push(`encoder.set${setterType}(${fieldExpr}, ${sourceExpr});`);\n        }\n      } else if (fieldTypeName == \"Uint8Array\") {\n        this.sb.push(`if (${sourceExpr} != null) {\n            encoder.setString(${fieldExpr}, base64.encode(${sourceExpr}));\n          } else {\n            encoder.setNull(${fieldExpr});\n          };`);\n      } else if (fieldTypeName == \"u128\") {\n        this.sb.push(`if (${sourceExpr} != null) {\n            encoder.setString(${fieldExpr}, ${sourceExpr}.toString());\n          } else {\n            encoder.setNull(${fieldExpr});\n          };`);\n      } else {\n        this.sb.push(`if (${sourceExpr} != null) {\n            encoder.set${setterType}(${fieldExpr}, ${sourceExpr});\n          } else {\n            encoder.setNull(${fieldExpr});\n          }`);\n      }\n    }\n  }\n\n  private isArrayType(type: Type): bool {\n    return !!(type.classReference && type.classReference.prototype.name == \"Array\" && type.classReference.typeArguments);\n  }\n\n  private getFields(element: Class): Field[] {\n    if (!element.members) {\n      return [];\n    }\n\n    return <Field[]>[...element.members.values()].filter(member => member instanceof Field);\n  }\n\n  private generateFunctionMetadata(func: Function): FunctionMetadata {\n    let res: FunctionMetadata = {name: func.name, parameters: {}, returnType: this.typeName(func.signature.returnType)};\n    let parameterLen = func.signature.parameterTypes.length;\n    let parameterMap = res.parameters;\n    for (let i = 0; i < parameterLen; i++) {\n      let parameterName = func.signature.getParameterName(i);\n      let parameterType = func.signature.parameterTypes[i];\n      parameterMap[parameterName] = this.typeName(parameterType);\n      // parameterMap.set(parameterName, parameterType);\n    }\n    return res;\n  }\n\n  build(): string {\n    let mainSources = this.program.sources\n      .filter(s => s.isEntry && !s.normalizedPath.startsWith(\"~lib\"));\n    assert(mainSources.length == 1);\n    let mainSource = mainSources[0];\n    this.copyImports(mainSource);\n\n    this.walk();\n\n    this.exportedClasses.forEach(c => {\n      this.generateEncodeFunction(c.type);\n      this.generateDecodeFunction(c.type);\n    });\n\n    let allExported = <Element[]>this.exportedFunctions.filter(e => e.is(CommonFlags.MODULE_EXPORT));\n    let allImportsStr = allExported.map(c => `${c.name} as wrapped_${c.name}`).join(\", \");\n\n    this.sb = [`\n      import { storage, near, base64 } from \"./near\";\n      import { JSONEncoder } from \"./json/encoder\";\n      import { JSONDecoder, ThrowingJSONHandler, DecoderState } from \"./json/decoder\";\n      import {${allImportsStr}} from \"./${mainSource.normalizedPath.replace(\".ts\", \"\")}\";\n      \n      // Runtime functions\n      @external(\"env\", \"return_value\")\n      declare function return_value(value_len: usize, value_ptr: usize): void;\n    `].concat(this.sb);\n\n    for (let [key, value] of this.classRanges) {\n      let injections = this.classInjections.get(key);\n      if (injections) {\n        let str = value.toString();\n        let bracketIndex = str.lastIndexOf(\"}\");\n        let classText = str.substring(0, bracketIndex) + `\\n${injections}\\n}`;\n        this.sb.push(classText);\n      }\n    }\n\n    // generate metadata for main.ts\n    if (mainSource.normalizedPath == \"main.ts\") {\n      let metadata = new ContractMetadata();\n      for (let func of this.exportedFunctions) {\n        let functionMetadata = this.generateFunctionMetadata(func);\n        if (func.decoratorNodes && func.decoratorNodes.filter(n => n.name.range.toString() == \"view_method\")) {\n          metadata.viewMethods[func.name] = functionMetadata;\n        } else {\n          metadata.changeMethods[func.name] = functionMetadata;\n        }\n      }\n      this.sb.push(`export function metadata(): string {\n      return ${global.JSON.stringify(global.JSON.stringify(metadata))};\n    }`);\n    }\n\n    return this.sb.join(\"\\n\");\n  }\n\n  private copyImports(mainSource: Source): any {\n    this.getImports(mainSource).forEach(statement => {\n      if (statement.declarations) {\n        let declarationsStr = statement.declarations!\n          .map(declaration => `${declaration.foreignName.text} as ${declaration.name.text}`)\n          .join(\",\");\n        this.sb.push(`import {${declarationsStr}} from \"${statement.path.value}\";`);\n      }\n    });\n  }\n\n  private getImports(source: Source): ImportStatement[] {\n    return <ImportStatement[]>source.statements\n      .filter(statement => statement.kind == NodeKind.IMPORT);\n  }\n\n  private getExports(source: Source): DeclarationStatement[] {\n    let declarations = <DeclarationStatement[]>source.statements\n      .filter(statement =>\n        statement.kind == NodeKind.FUNCTIONDECLARATION ||\n        statement.kind == NodeKind.CLASSDECLARATION);\n    return declarations.filter(d => d.is(CommonFlags.EXPORT));\n  }\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n  private unknown: Set<string> = new Set();\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(name, element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"export class \");\n    }\n    sb.push(name);\n    // var base = element.base;\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n    //   sb.push(\" extends \");\n    //   sb.push(base.name); // TODO: fqn\n    // }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\" = typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n      let current = first;\n      let parameters: NamedTypeNode[] | null = null;\n      let nullable = false;\n\n      // Identifier ('.' Identifier)+\n      while (tn.skip(Token.DOT)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n          current.next = next;\n          current = next;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range(tn.pos)\n          );\n          return null;\n        }\n      }\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [<NamedTypeNode>parameter];\n          else parameters.push(<NamedTypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(first, parameters || [], nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createFunctionType(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      if (!typeParameters) typeParameters = [ typeParameter ];\n      else typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!(typeParameters && typeParameters.length)) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>t;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>t;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [<NamedTypeNode>type];\n          else implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = [<DecoratorNode>decorator];\n        else decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators && decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return identifier;\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments: TypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\n\n    var startPos = expr.range.start;\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (tn.skipIdentifier()) {\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            } else {\n              next = this.parseExpression(tn,\n                isRightAssociative(token)\n                  ? nextPrecedence\n                  : nextPrecedence + 1\n              );\n              if (!next) return null;\n            }\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            next = this.parseExpression(tn,\n              isRightAssociative(token)\n                ? nextPrecedence\n                : nextPrecedence + 1\n            );\n            if (!next) return null;\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression\n  ): Expression {\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: TypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) break;\n        expr = Node.createCallExpression( // is again callable\n          expr,\n          typeArguments,\n          args,\n          tn.range(expr.range.start, tn.pos)\n        );\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nArray.create = function(capacity) {\n  var arr = new Array(capacity);\n  arr.length = 0;\n  return arr;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  }\n});\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\n      HEAP.fill(value, dest, dest + size);\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    },\n    reset: globalScope[\"__memory_reset\"] || function reset() {\n      HEAP = new Uint8Array(0);\n      HEAP_OFFSET = 0;\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[(ptr | 0) + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[(ptr | 0) + (offset | 0)];\n};\n\nglobalScope[\"unmanaged\"] = function() {};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 2, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 3, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 4 // see: https://github.com/WebAssembly/threads\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Value is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Value is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { Decompiler } from \"./decompiler\";\nimport { IDLBuilder, TSDBuilder, NEARBindingsBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Parser } from \"./parser\";\nimport { Program } from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n// TODO: Make pluggable tree walkers instead of hardcoding various formats here\nexport function buildNEAR(program: Program): string {\n  return NEARBindingsBuilder.build(program);\n}\n\n/** Builds a JSON file of a program's runtime type information. */\nexport function buildRTTI(program: Program): string {\n  var sb = new Array<string>();\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \\\"\");\n    sb.push(cls.internalName);\n    sb.push(\"\\\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    let base = cls.base;\n    sb.push(\"    \");\n    sb.push(base ? base.id.toString() : \"0\");\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \");\n    sb.push(cls.rttiFlags.toString());\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ]\\n}\\n\");\n  return sb.join(\"\");\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util\";\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let cloned = new Array<V>(original.length);\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n"],"sourceRoot":""}