{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__19__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","null_","true_","false_","this_","super_","constructor","LibrarySymbols","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_MUTABLE_GLOBAL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","String","Array","ArrayBuffer","Math","Mathf","memory","allocate","abort","main","length","byteLength","pow","mod","__export","isPowerOf2","x","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","withRelatedRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","emitDiagnostic","info","infoRelated","warning","warningRelated","error","errorRelated","OperatorKind","common_1","diagnostics_1","types_1","ast_1","resolver_1","flow_1","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","operatorKindFromDecorator","decoratorKind","arg","DecoratorKind","OPERATOR","OPERATOR_BINARY","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","OPERATOR_PREFIX","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","OPERATOR_POSTFIX","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","Program","_super","_this","sources","diagnosticsOffset","explicitStartFunction","filesByName","Map","elementsByName","elementsByDeclaration","instancesByName","typeClasses","arrayBufferInstance","arrayPrototype","stringInstance","abortInstance","memoryAllocateInstance","hasGC","gcAllocateInstance","gcLinkInstance","gcMarkInstance","gcHeaderSize","gcHookOffset","nativeDummySignature","nativeSource","Source","SourceKind","LIBRARY","nativeFile","File","set","internalName","resolver","Resolver","__extends","makeNativeVariableDeclaration","flags","NONE","Node","createVariableDeclaration","createIdentifierExpression","makeNativeTypeDeclaration","identifier","createTypeDeclaration","createOmittedType","makeNativeFunctionDeclaration","createFunctionDeclaration","createSignature","createType","createSimpleTypeName","makeNativeNamespaceDeclaration","createNamespaceDeclaration","makeNativeFunction","signature","parent","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","declaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","EXPORT","GENERIC","BUILTIN","hasFeature","registerConstantInteger","i64_new","isWasm64","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","k","file","statements","j","statement","kind","NodeKind","initializeExports","IMPORT","initializeImports","VARIABLE","initializeVariables","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","FUNCTIONDECLARATION","initializeFunction","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeDefinition","queuedExportsStar_1","__values","queuedExportsStar_1_1","next","done","_g","__read","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","element","lookupForeign","Module_0_has_no_exported_member_1","localName","asImportedNamespace","queuedExports_1","queuedExports_1_1","_h","exports_1","exports_1_1","_j","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","registerNativeTypeClass","thisPrototype","extendsNode","baseElement","resolveTypeName","CLASS_PROTOTYPE","basePrototype","hasDecorator","SEALED","Class_0_is_sealed_and_cannot_be_extended","identifierNode","UNMANAGED","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Range","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_k","alias","Error","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","parameterTypes","signatureReference","returnType","byteSize","_l","values","_m","isEntry","_o","_p","markModuleExport","MODULE_EXPORT","instanceMembers","_c","_d","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FUNCTION","FIELD","CLASS","members","_e","_f","type","setType","typeKind","className","classElement","is","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","merged","tryMerge","Duplicate_identifier_0","elements","foreignName","lookupExport","fileQueuedExports","checkDecorators","decorators","acceptedFlags","decorator","flag","decoratorKindToFlag","decoratorNameToKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","GLOBAL","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","extendsType","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeProperty","initializeMethod","INDEXSIGNATUREDECLARATION","STATIC","INTERFACE_PROTOTYPE","READONLY","INLINE","LAZY","ABSTRACT","FieldPrototype","addInstance","isStatic","CONSTRUCTOR","checkOperatorOverloads","classPrototype","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","internalPath","queued","endsWith","path","exportedName","Export_declaration_conflicts_with_exported_declaration_of_0","declarations","initializeImport","namespaceName","validDecorators","AMBIENT","EXTERNAL","INSTANCE","FILE","START","Module_cannot_have_multiple_start_functions","findDecorator","InterfacePrototype","Namespace","DECLARE","Element","program","shadowType","current","originalDeclaration","actual","isBound","TypedElement","apply","RESOLVED","startFunction","Signature","isImport","lookup","includes","exports_2","exports_2_1","_b","memberName","TYPEDEFINITION","mangleInternalName","typeParameters","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","initializer","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","Parameter","Local","index","LOCAL","instances","boundPrototypes","body","arrowKind","toBound","classInstance","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","FunctionTarget","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","parameterIndex","Field","memoryOffset","firstDeclaration","Property","getterInstance","setterInstance","_isInterface","constructorPrototype","extends","basePtototype","Class","typeArguments","base","INTERFACE","currentMemoryOffset","constructorInstance","gcHookIndex","asClass","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","baseName","baseType","typeParameterNodes","numTypeArguments","isAssignableTo","target","lookupOverload","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","Interface","older","newer","copyMembers","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","srcMembers_1","srcMembers_1_1","isInstance","asGlobal","NativeType","ExpressionId","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDBitselectId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","HostOp","_BinaryenCurrentMemory","_BinaryenGrowMemory","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","MemorySegment","buffer","offset","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createV128","bytes","store","_BinaryenLiteralVec128","createUnary","op","expr","_BinaryenUnary","createBinary","left","right","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","signed","ptr","align","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","label","children","None","_BinaryenBlock","createBreak","condition","_BinaryenBreak","createDrop","expression","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","ifTrue","ifFalse","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","createMemoryCopy","size","_BinaryenMemoryCopy","createMemoryFill","_BinaryenMemoryFill","createSIMDExtract","vec","idx","_BinaryenSIMDExtract","createSIMDReplace","_BinaryenSIMDReplace","createSIMDShuffle","vec1","vec2","mask","_BinaryenSIMDShuffle","createSIMDBitselect","cond","_BinaryenSIMDBitselect","createSIMDShift","shift","_BinaryenSIMDShift","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","externalName","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","GetLocal","_BinaryenGetLocalGetIndex","GetGlobal","globalName","_BinaryenGetGlobalGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getGetLocalIndex","getSetLocalIndex","_BinaryenSetLocalGetIndex","getSetLocalValue","_BinaryenSetLocalGetValue","isTeeLocal","_BinaryenSetLocalIsTee","getGetGlobalName","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","getCallTarget","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Return","Break","Block","numChildren","tokenizer_1","Token","nodeIsConstantValue","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","nodeIsGenericCallable","createTypeName","TypeName","isNullable","TypeNode","createTypeParameter","defaultType","elem","TypeParameterNode","createParameter","ParameterNode","parameterKind","parameters","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","createComment","node","CommentNode","commentKind","isQuoted","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","toType","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","createVariableStatement","VariableStatement","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","TYPENAME","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","SIGNATURE","nameStr","propStr","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","BINARY","COMMA","FLOAT","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","SOURCE","tokenizer","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","DeclarationStatement","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FOR","ArrowKind","clone","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","isTypeOmitted","program_1","module_1","TypeKind","TypeFlags","v128_zero","cachedNullableType","ceil","classReference","nonNullableType","isize64","isize32","usize64","usize32","isManaged","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isStrictlyAssignableTo","commonDenominator","signednessIsImportant","kindOnly","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","g","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveType","context","reportMode","REPORT","parameterNodes","parameterNode","REST","parameterTypeNode","Type_expected","returnTypeNode","typeNode","typeArgumentNodes","possiblyPlaceholder","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","Expected_0_type_arguments_but_got_1","typeArgument","resolveTypeArguments","Cannot_find_name_0","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","resolveIdentifier","ensureResolvedLazyGlobal","resolvePropertyAccessExpression","propertyAccess","contextualType","targetExpression","resolveExpression","propertyName","indexedGet","Index_signature_is_missing_in_type_0","resolveElementAccessExpression","elementAccess","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","resolveAssertionExpression","resolveUnaryPrefixExpression","resolveUnaryPostfixExpression","resolveBinaryExpression","resolveThisExpression","resolveSuperExpression","actualFunction","resolveLiteralExpression","resolveCallExpression","NONNULL","i64_sub","i64_zero","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","literalType","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","actualParent","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMembers_1","baseMembers_1_1","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","atEnd","fieldInstance","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","builtins_1","Options","WASM32","importMemory","sharedMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","CompilerSymbols","Compiler","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","needsIterateRoots","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","currentFlow","currentBody","BuiltinSymbols","HEAP_BASE","files","compileFile","compileExports","funcRef","ensureFunctionType","i64_align","isSharedMemory","i64_shr_u","makeModuleExports","compileIterateRoots","members_1","members_1_1","makeModuleExport","prefix","instanceName","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","nativeType","nativeSizeType","getterName","setterName","subPrefix","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","element_1","exportsStar_1","exportsStar_1_1","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","numLocals","initExpr","initializerNode","resolvedType","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileExpression","Compiling_constant_with_non_constant_initializer_as_mutable","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","MAIN","canOverflow","started","unshift","EqzI32","thisLocalIndex","EqzI64","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","An_implementation_cannot_be_declared_in_ambient_contexts","decoratorNodes","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","Nop","isLastStatementInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","inherit","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","continueLabel","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","pushBreakLabel","condExpr","makeIsTrueish","popBreakLabel","terminated","unset","block","repeatLabel","alwaysTrue","condPre","incrExpr","bodyStatement","bodyExpr","usesContinue","inheritConditional","breakBlock","repeatBlock","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","inheritMutual","inlineReturnLabel","numCases","tempLocal","getTempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","EqI32","freeTempLocal","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","numDeclarations","initializers","isInlined","parentFunction","scopedLocals","_const_declarations_must_be_initialized","addScopedLocal","compileAssignmentWithValue","setLocalWrapped","compileInlineConstant","retainType","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","fromType","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","NeF32","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","NeF64","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","NeI64","WrapI64","ExtendI32","ExtendU32","PREFIX","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","LtI32","LtI64","LtU32","LtU64","LtF32","LtF64","GtI32","GtI64","GtU32","GtU64","GtF32","GtF64","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","EqI64","EqF32","EqF64","AllTrueVecI8x16","EqVecI8x16","NeI32","AnyTrueVecI8x16","NeVecI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI32","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","RemI32","RemI64","RemU32","RemU64","intType","ShlI32","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI32","ShrI64","ShrU32","ShrU64","AndI32","AndI64","OrI32","OrI64","XorI32","XorI64","getAndFreeTempLocal","compileUnaryOverload","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","valueWithCorrectType","tee","thisExpression","thisExpr","flow_2","nativeReturnType","thisExpr_1","elementExpr","tempLocalTarget","tempLocalElement","flow_3","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","inferredTypes","argumentNodes","numArguments","argumentExprs","templateName","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","compileCallInlinePrechecked","pop","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","createInline","baseInstance","addScopedAlias","paramExpr","argumentLocal","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","numOperands","isCallImport","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","contextualSignature","numPresentParameters","thisTypeNode","maybeCompileEnclosingSource","retainConstantType","flow_4","actualFunction_1","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","stringValue","stringSegment","headerSize","totalSize","buf","writeI32","ensureGCHook","writeI16","stringOffset","ensureStaticArray","elementType","usizeTypeSize","bufferInstance","bufferHeaderSize","bufferTotalSize","clz","writeI8","writeI64","writeF32","writeF64","bufferOffset","arrayInstance","arrayHeaderSize","arrayOffset","buffer_offset","length_offset","isConst","compiledValues","constantValues","nativeElementType","arrayType","nativeArrayType","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","compileInstantiate","baseCtor","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","compileGetter","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","calcValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","allocateInstance","nativeFieldType","FlowFlags","wrappedLocals","wrappedLocalsExt","inlineFunction","branch","slice","wrapped","temps","scopedLocal","existingLocal","SCOPED","scopedAlias","scope","isLocalWrapped","bitsetIs","ext","bitsetSet","id","stack","other","i64_and","leftExt","rightExt","thisExt","minLength","min","canConversionOverflow","SetLocal","global_1","ClzI32","CtzI32","PopcntI32","MIN_VALUE","last","If","Select","Call","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","Loop","Switch","CallIndirect","SetGlobal","Store","i64_to_string","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","ExportsWalker","includePrivate","todo","seen","Set","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","isInterface","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","parseFunctionExpressionCommon","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","Float64Array","Uint32Array","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","abs","floor","trunc","round","sqrt","y","sign","isTrueish","radix","parseInt","undefined","fromCodePoint","Number","isInteger","isArray","signbit","Boolean","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","Float32Array","Int32Array","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","compiler","evaluateConstantType","isFloat","isSigned","isReference","isString","isArrayLike","isFunction","isDefined","SWALLOW","isConstant","expr_1","ctz","popcnt","rotl","rotr","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","tempLocal0","copysign","nearest","reinterpret","evaluateImmediateOffset","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","atomic_load","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","RMWOp","Add","Sub","And","Or","Xor","Xchg","atomic_cmpxchg","atomic_wait","hasError","atomic_notify","sizeof","alignof","alignLog2","Type_0_has_no_property_1","select","unreachable","memory_size","memory_grow","memory_copy","memory_fill","alreadyUnchecked","call_indirect","operandExprs","signatureParts","nativeParamTypes","operandType","instantiate","User_defined_0","expr_2","Expression_must_be_a_compile_time_constant","expr_3","expr_4","expr_5","off","expr_6","expr_7","v128_splat","SplatVecI8x16","SplatVecI16x8","SplatVecI32x4","SplatVecI64x2","SplatVecF32x4","SplatVecF64x2","v128_extract_lane","ExtractLaneSVecI8x16","ExtractLaneUVecI8x16","ExtractLaneSVecI16x8","ExtractLaneUVecI16x8","ExtractLaneVecI32x4","ExtractLaneVecI64x2","ExtractLaneVecF32x4","ExtractLaneVecF64x2","maxIdx","v128_replace_lane","ReplaceLaneVecI8x16","ReplaceLaneVecI16x8","ReplaceLaneVecI32x4","ReplaceLaneVecI64x2","ReplaceLaneVecF32x4","ReplaceLaneVecF64x2","v128_shuffle","laneWidth","laneCount","off8","idx8","v128_add","AddVecI8x16","AddVecI16x8","AddVecI32x4","AddVecI64x2","AddVecF32x4","AddVecF64x2","v128_sub","SubVecI8x16","SubVecI16x8","SubVecI32x4","SubVecI64x2","SubVecF32x4","SubVecF64x2","v128_mul","MulVecI8x16","MulVecI16x8","MulVecI32x4","MulVecF32x4","MulVecF64x2","v128_div","DivVecF32x4","DivVecF64x2","v128_neg","NegVecI8x16","NegVecI16x8","NegVecI32x4","NegVecI64x2","NegVecF32x4","NegVecF64x2","v128_add_saturate","AddSatSVecI8x16","AddSatUVecI8x16","AddSatSVecI16x8","AddSatUVecI16x8","v128_sub_saturate","SubSatSVecI8x16","SubSatUVecI8x16","SubSatSVecI16x8","SubSatUVecI16x8","v128_shl","ShlVecI8x16","ShlVecI16x8","ShlVecI32x4","ShlVecI64x2","v128_shr","ShrSVecI8x16","ShrUVecI8x16","ShrSVecI16x8","ShrUVecI16x8","ShrSVecI32x4","ShrUVecI32x4","ShrSVecI64x2","ShrUVecI64x2","v128_and","AndVec128","v128_or","OrVec128","v128_xor","XorVec128","v128_not","NotVec128","v128_bitselect","v128_any_true","AnyTrueVecI16x8","AnyTrueVecI32x4","AnyTrueVecI64x2","v128_all_true","AllTrueVecI16x8","AllTrueVecI32x4","AllTrueVecI64x2","v128_min","MinVecF32x4","MinVecF64x2","v128_max","MaxVecF32x4","MaxVecF64x2","v128_abs","AbsVecF32x4","AbsVecF64x2","v128_sqrt","SqrtVecF32x4","SqrtVecF64x2","v128_eq","EqVecI16x8","EqVecI32x4","EqVecF32x4","EqVecF64x2","v128_ne","NeVecI16x8","NeVecI32x4","NeVecF32x4","NeVecF64x2","v128_lt","LtSVecI8x16","LtUVecI8x16","LtSVecI16x8","LtUVecI16x8","LtSVecI32x4","LtUVecI32x4","LtVecF32x4","LtVecF64x2","v128_le","LeSVecI8x16","LeUVecI8x16","LeSVecI16x8","LeUVecI16x8","LeSVecI32x4","LeUVecI32x4","LeVecF32x4","LeVecF64x2","v128_gt","GtSVecI8x16","GtUVecI8x16","GtSVecI16x8","GtUVecI16x8","GtSVecI32x4","GtUVecI32x4","GtVecF32x4","GtVecF64x2","v128_ge","GeSVecI8x16","GeUVecI8x16","GeSVecI16x8","GeUVecI16x8","GeSVecI32x4","GeUVecI32x4","GeVecF32x4","GeVecF64x2","v128_convert","ConvertSVecI32x4ToVecF32x4","ConvertUVecI32x4ToVecF32x4","ConvertSVecI64x2ToVecF64x2","ConvertUVecI64x2ToVecF64x2","v128_trunc","TruncSatSVecF32x4ToVecI32x4","TruncSatUVecF32x4ToVecI32x4","TruncSatSVecF64x2ToVecI64x2","TruncSatUVecF64x2ToVecI64x2","iterateRoots","expr_8","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_u_add","i32_atomic_rmw16_u_add","i32_atomic_rmw_add","i64_atomic_rmw8_u_add","i64_atomic_rmw16_u_add","i64_atomic_rmw32_u_add","i64_atomic_rmw_add","i32_atomic_rmw8_u_sub","i32_atomic_rmw16_u_sub","i32_atomic_rmw_sub","i64_atomic_rmw8_u_sub","i64_atomic_rmw16_u_sub","i64_atomic_rmw32_u_sub","i64_atomic_rmw_sub","i32_atomic_rmw8_u_and","i32_atomic_rmw16_u_and","i32_atomic_rmw_and","i64_atomic_rmw8_u_and","i64_atomic_rmw16_u_and","i64_atomic_rmw32_u_and","i64_atomic_rmw_and","i32_atomic_rmw8_u_or","i32_atomic_rmw16_u_or","i32_atomic_rmw_or","i64_atomic_rmw8_u_or","i64_atomic_rmw16_u_or","i64_atomic_rmw32_u_or","i64_atomic_rmw_or","i32_atomic_rmw8_u_xor","i32_atomic_rmw16_u_xor","i32_atomic_rmw_xor","i64_atomic_rmw8_u_xor","i64_atomic_rmw16_u_xor","i64_atomic_rmw32_u_xor","i64_atomic_rmw_xor","i32_atomic_rmw8_u_xchg","i32_atomic_rmw16_u_xchg","i32_atomic_rmw_xchg","i64_atomic_rmw8_u_xchg","i64_atomic_rmw16_u_xchg","i64_atomic_rmw32_u_xchg","i64_atomic_rmw_xchg","i32_atomic_rmw8_u_cmpxchg","i32_atomic_rmw16_u_cmpxchg","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_u_cmpxchg","i64_atomic_rmw16_u_cmpxchg","i64_atomic_rmw32_u_cmpxchg","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","i32_notify","i64_notify","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_s_f32x4_sat","i32x4_trunc_u_f32x4_sat","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_s_f64x2_sat","i64x2_trunc_u_f64x2_sat","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_s_i32x4","f32x4_convert_u_i32x4","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_s_i64x2","f64x2_convert_u_i64x2","v8x16_shuffle","tryDeferASM","messageArg","filenameArg","existingIndex","isDeclaredInLibrary","gcPrototype","gcInstance","nativeSizeSize","funcName","map","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","makeArray","cloned","makeSet","original_1","original_1_1","v","overrides","original_2","original_2_1","overrides_1","overrides_1_1","overrides_2","overrides_2_1","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","readI8","readI16","readF32","readF64","valueI64","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoAssert","setImportMemory","setSharedMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD"],"mappings":"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M,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__19__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n","/**\r\n * Common constants.\r\n * @module common\r\n *//***/\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\r\n  DEFINITE_ASSIGNMENT = 1 << 13,\r\n\r\n  // Extended modifiers usually derived from basic modifiers\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 14,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 15,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 16,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 17,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 18,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 19,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 20,\r\n\r\n  // Compilation states\r\n\r\n  /** Is resolved. */\r\n  RESOLVED = 1 << 21,\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 22,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 23,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 24,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 25,\r\n  /** Is a virtual method. */\r\n  VIRTUAL = 1 << 26,\r\n  /** Is the main function. */\r\n  MAIN = 1 << 27,\r\n\r\n  // Other\r\n\r\n  QUOTED = 1 << 28\r\n}\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Delimiter used between a function and its inner elements. */\r\nexport const INNER_DELIMITER = \"~\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"~lib\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n/** Path index suffix. */\r\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\r\n\r\n/** Common compiler symbols. */\r\nexport namespace CommonSymbols {\r\n  // special\r\n  export const EMPTY = \"\";\r\n  // types\r\n  export const i8 = \"i8\";\r\n  export const i16 = \"i16\";\r\n  export const i32 = \"i32\";\r\n  export const i64 = \"i64\";\r\n  export const isize = \"isize\";\r\n  export const u8 = \"u8\";\r\n  export const u16 = \"u16\";\r\n  export const u32 = \"u32\";\r\n  export const u64 = \"u64\";\r\n  export const usize = \"usize\";\r\n  export const bool = \"bool\";\r\n  export const f32 = \"f32\";\r\n  export const f64 = \"f64\";\r\n  export const v128 = \"v128\";\r\n  export const i8x16 = \"i8x16\";\r\n  export const u8x16 = \"u8x16\";\r\n  export const i16x8 = \"i16x8\";\r\n  export const u16x8 = \"u16x8\";\r\n  export const i32x4 = \"i32x4\";\r\n  export const u32x4 = \"u32x4\";\r\n  export const i64x2 = \"i64x2\";\r\n  export const u64x2 = \"u64x2\";\r\n  export const f32x4 = \"f32x4\";\r\n  export const f64x2 = \"f64x2\";\r\n  export const void_ = \"void\";\r\n  export const number = \"number\";\r\n  export const boolean = \"boolean\";\r\n  export const string = \"string\";\r\n  export const native = \"native\";\r\n  // aliases\r\n  export const null_ = \"null\";\r\n  export const true_ = \"true\";\r\n  export const false_ = \"false\";\r\n  // objects\r\n  export const this_ = \"this\";\r\n  export const super_ = \"super\";\r\n  export const constructor = \"constructor\";\r\n}\r\n\r\n/** Common standard library symbols. */\r\nexport namespace LibrarySymbols {\r\n  // constants\r\n  export const ASC_TARGET = \"ASC_TARGET\";\r\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\r\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\r\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\r\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\r\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\r\n  export const ASC_FEATURE_MUTABLE_GLOBAL = \"ASC_FEATURE_MUTABLE_GLOBAL\";\r\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\r\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\r\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\r\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\r\n  // classes\r\n  export const I8 = \"I8\";\r\n  export const I16 = \"I16\";\r\n  export const I32 = \"I32\";\r\n  export const I64 = \"I64\";\r\n  export const Isize = \"Isize\";\r\n  export const U8 = \"U8\";\r\n  export const U16 = \"U16\";\r\n  export const U32 = \"U32\";\r\n  export const U64 = \"U64\";\r\n  export const Usize = \"Usize\";\r\n  export const Bool = \"Bool\";\r\n  export const F32 = \"F32\";\r\n  export const F64 = \"F64\";\r\n  export const V128 = \"V128\";\r\n  export const String = \"String\";\r\n  export const Array = \"Array\";\r\n  export const ArrayBuffer = \"ArrayBuffer\";\r\n  export const Math = \"Math\";\r\n  export const Mathf = \"Mathf\";\r\n  // runtime\r\n  export const memory = \"memory\";\r\n  export const allocate = \"allocate\";\r\n  export const abort = \"abort\";\r\n  export const main = \"main\";\r\n  // other\r\n  export const length = \"length\";\r\n  export const byteLength = \"byteLength\";\r\n  export const pow = \"pow\";\r\n  export const mod = \"mod\";\r\n}\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./bitset\";\r\nexport * from \"./charcode\";\r\nexport * from \"./collections\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n\r\n/** Tests if `x` is a power of two. */\r\nexport function isPowerOf2(x: i32): bool {\r\n  return x != 0 && (x & (x - 1)) == 0;\r\n}\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n  /** Related range, if any. */\r\n  relatedRange: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Adds a related source range to this message. */\r\n  withRelatedRange(range: Range): this {\r\n    this.relatedRange = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(range, useColors));\r\n    }\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n\r\n    let relatedRange = message.relatedRange;\r\n    if (relatedRange) {\r\n      if (showContext) {\r\n        sb.push(\"\\n\");\r\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\r\n      }\r\n      sb.push(\"\\n\");\r\n      sb.push(\" in \");\r\n      sb.push(range.source.normalizedPath);\r\n      sb.push(\"(\");\r\n      sb.push(range.line.toString(10));\r\n      sb.push(\",\");\r\n      sb.push(range.column.toString(10));\r\n      sb.push(\")\");\r\n    }\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) sb.push(\"~\");\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    relatedRange: Range | null,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    if (relatedRange) message.relatedRange = relatedRange;\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message with a related range. */\r\n  infoRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message with a related range. */\r\n  warningRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message with a related range. */\r\n  errorRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  INNER_DELIMITER,\r\n  LIBRARY_SUBST,\r\n  INDEX_SUFFIX,\r\n  CommonSymbols,\r\n  LibrarySymbols\r\n} from \"./common\";\r\n\r\nimport {\r\n  Options,\r\n  Feature\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  Range,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n  SignatureNode,\r\n  TypeParameterNode,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  ArrowKind,\r\n\r\n  Expression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  decoratorNameToKind,\r\n  findDecorator\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  FunctionRef\r\n} from \"./module\";\r\n\r\nimport {\r\n  CharCode\r\n} from \"./util\";\r\n\r\nimport {\r\n  Resolver\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Flow\r\n} from \"./flow\";\r\n\r\n/** Represents a yet unresolved `import`. */\r\nclass QueuedImport {\r\n  constructor(\r\n    /** File being imported into. */\r\n    public localFile: File,\r\n    /** Identifier within the local file. */\r\n    public localIdentifier: IdentifierExpression,\r\n    /** Identifier within the other file. Is an `import *` if not set. */\r\n    public foreignIdentifier: IdentifierExpression | null,\r\n    /** Path to the other file. */\r\n    public foreignPath: string,\r\n    /** Alternative path to the other file. */\r\n    public foreignPathAlt: string\r\n  ) {}\r\n}\r\n\r\n/** Represents a yet unresolved `export`. */\r\nclass QueuedExport {\r\n  constructor(\r\n    /** Identifier within the local file. */\r\n    public localIdentifier: IdentifierExpression,\r\n    /** Identifier within the other file. */\r\n    public foreignIdentifier: IdentifierExpression,\r\n    /** Path to the other file if a re-export. */\r\n    public foreignPath: string | null,\r\n    /** Alternative path to the other file if a re-export. */\r\n    public foreignPathAlt: string | null\r\n  ) {}\r\n}\r\n\r\n/** Represents a yet unresolved `export *`. */\r\nclass QueuedExportStar {\r\n  // stored in a map with localFile as the key\r\n  constructor(\r\n    /** Path to the other file. */\r\n    public foreignPath: string,\r\n    /** Alternative path to the other file. */\r\n    public foreignPathAlt: string,\r\n    /** Reference to the path literal for reporting. */\r\n    public pathLiteral: StringLiteralExpression\r\n  ) {}\r\n}\r\n\r\n/** Represents the kind of an operator overload. */\r\nexport enum OperatorKind {\r\n  INVALID,\r\n\r\n  // indexed access\r\n  INDEXED_GET,            // a[]\r\n  INDEXED_SET,            // a[]=b\r\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\r\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\r\n\r\n  // binary\r\n  ADD,                    // a + b\r\n  SUB,                    // a - b\r\n  MUL,                    // a * b\r\n  DIV,                    // a / b\r\n  REM,                    // a % b\r\n  POW,                    // a ** b\r\n  BITWISE_AND,            // a & b\r\n  BITWISE_OR,             // a | b\r\n  BITWISE_XOR,            // a ^ b\r\n  BITWISE_SHL,            // a << b\r\n  BITWISE_SHR,            // a >> b\r\n  BITWISE_SHR_U,          // a >>> b\r\n  EQ,                     // a == b\r\n  NE,                     // a != b\r\n  GT,                     // a > b\r\n  GE,                     // a >= b\r\n  LT,                     // a < b\r\n  LE,                     // a <= b\r\n\r\n  // unary prefix\r\n  PLUS,                   // +a\r\n  MINUS,                  // -a\r\n  NOT,                    // !a\r\n  BITWISE_NOT,            // ~a\r\n  PREFIX_INC,             // ++a\r\n  PREFIX_DEC,             // --a\r\n\r\n  // unary postfix\r\n  POSTFIX_INC,            // a++\r\n  POSTFIX_DEC             // a--\r\n\r\n  // not overridable:\r\n  // IDENTITY             // a === b\r\n  // LOGICAL_AND          // a && b\r\n  // LOGICAL_OR           // a || b\r\n}\r\n\r\n/** Returns the operator kind represented by the specified decorator and string argument. */\r\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\r\n  assert(arg.length);\r\n  switch (decoratorKind) {\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.OPENBRACKET: {\r\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\r\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\r\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.ADD;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.SUB;\r\n          break;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          if (arg == \"*\") return OperatorKind.MUL;\r\n          if (arg == \"**\") return OperatorKind.POW;\r\n          break;\r\n        }\r\n        case CharCode.SLASH: {\r\n          if (arg == \"/\") return OperatorKind.DIV;\r\n          break;\r\n        }\r\n        case CharCode.PERCENT: {\r\n          if (arg == \"%\") return OperatorKind.REM;\r\n          break;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\r\n          break;\r\n        }\r\n        case CharCode.BAR: {\r\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\r\n          break;\r\n        }\r\n        case CharCode.CARET: {\r\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\r\n          break;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          if (arg == \"==\") return OperatorKind.EQ;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!=\") return OperatorKind.NE;\r\n          break;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          if (arg == \">\") return OperatorKind.GT;\r\n          if (arg == \">=\") return OperatorKind.GE;\r\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\r\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\r\n          break;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          if (arg == \"<\") return OperatorKind.LT;\r\n          if (arg == \"<=\") return OperatorKind.LE;\r\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_PREFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.PLUS;\r\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.MINUS;\r\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!\") return OperatorKind.NOT;\r\n          break;\r\n        }\r\n        case CharCode.TILDE: {\r\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_POSTFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return OperatorKind.INVALID;\r\n}\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Resolver instance. */\r\n  resolver: Resolver;\r\n  /** Array of sources. */\r\n  sources: Source[] = [];\r\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n  /** Special native code source. */\r\n  nativeSource: Source;\r\n  /** Special native code file. */\r\n  nativeFile: File;\r\n  /** Explicitly annotated start function. */\r\n  explicitStartFunction: FunctionPrototype | null = null;\r\n\r\n  // lookup maps\r\n\r\n  /** Files by unique internal name. */\r\n  filesByName: Map<string,File> = new Map();\r\n  /** Elements by unique internal name in element space. */\r\n  elementsByName: Map<string,Element> = new Map();\r\n  /** Elements by declaration. */\r\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\r\n  /** Element instances by unique internal name. */\r\n  instancesByName: Map<string,Element> = new Map();\r\n  /** Classes backing basic types like `i32`. */\r\n  typeClasses: Map<TypeKind,Class> = new Map();\r\n\r\n  // runtime references\r\n\r\n  /** ArrayBuffer instance reference. */\r\n  arrayBufferInstance: Class | null = null;\r\n  /** Array prototype reference. */\r\n  arrayPrototype: ClassPrototype | null = null;\r\n  /** String instance reference. */\r\n  stringInstance: Class | null = null;\r\n  /** Abort function reference, if present. */\r\n  abortInstance: Function | null = null;\r\n  /** Memory allocation function. */\r\n  memoryAllocateInstance: Function | null = null;\r\n\r\n  // gc integration\r\n\r\n  /** Whether a garbage collector is present or not. */\r\n  hasGC: bool = false;\r\n  /** Garbage collector allocation function. */\r\n  gcAllocateInstance: Function | null = null;\r\n  /** Garbage collector link function called when a managed object is referenced from a parent. */\r\n  gcLinkInstance: Function | null = null;\r\n  /** Garbage collector mark function called to on reachable managed objects. */\r\n  gcMarkInstance: Function | null = null;\r\n  /** Size of a managed object header. */\r\n  gcHeaderSize: u32 = 0;\r\n  /** Offset of the GC hook. */\r\n  gcHookOffset: u32 = 0;\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(\r\n    /** Shared array of diagnostic messages (emitted so far). */\r\n    diagnostics: DiagnosticMessage[] | null = null\r\n  ) {\r\n    super(diagnostics);\r\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY);\r\n    this.nativeSource = nativeSource;\r\n    var nativeFile = new File(this, nativeSource);\r\n    this.nativeFile = nativeFile;\r\n    this.filesByName.set(nativeFile.internalName, nativeFile);\r\n    this.resolver = new Resolver(this);\r\n  }\r\n\r\n  /** Creates a native variable declaration. */\r\n  makeNativeVariableDeclaration(\r\n    /** The simple name of the variable */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `CONST`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): VariableDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createVariableDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      null, null, null, flags, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native type declaration. */\r\n  makeNativeTypeDeclaration(\r\n    /** The simple name of the type. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): TypeDeclaration {\r\n    var range = this.nativeSource.range;\r\n    var identifier = Node.createIdentifierExpression(name, range);\r\n    return Node.createTypeDeclaration(\r\n      identifier,\r\n      null,\r\n      Node.createOmittedType(range),\r\n      null, flags, range\r\n    );\r\n  }\r\n\r\n  // a dummy signature for programmatically generated native functions\r\n  private nativeDummySignature: SignatureNode | null = null;\r\n\r\n  /** Creates a native function declaration. */\r\n  makeNativeFunctionDeclaration(\r\n    /** The simple name of the function. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): FunctionDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createFunctionDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      null,\r\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createSignature([],\r\n        Node.createType( // ^ AST signature doesn't really matter, is overridden anyway\r\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\r\n          null, false, range\r\n        ),\r\n        null, false, range)\r\n      ),\r\n      null, null, flags, ArrowKind.NONE, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native namespace declaration. */\r\n  makeNativeNamespaceDeclaration(\r\n    /** The simple name of the namespace. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): NamespaceDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createNamespaceDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      [], null, flags, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native function. */\r\n  makeNativeFunction(\r\n    /** The simple name of the function. */\r\n    name: string,\r\n    /** Concrete function signature. */\r\n    signature: Signature,\r\n    /** Parent element, usually a file, class or namespace. */\r\n    parent: Element = this.nativeFile,\r\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\r\n    flags: CommonFlags = CommonFlags.NONE,\r\n    /** Decorator flags representing built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ): Function {\r\n    return new Function(\r\n      name,\r\n      new FunctionPrototype(\r\n        name,\r\n        parent,\r\n        this.makeNativeFunctionDeclaration(name, flags),\r\n        decoratorFlags\r\n      ),\r\n      signature\r\n    );\r\n  }\r\n\r\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\r\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement {\r\n    var elementsByDeclaration = this.elementsByDeclaration;\r\n    assert(elementsByDeclaration.has(declaration));\r\n    return elementsByDeclaration.get(declaration)!;\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n\r\n    // register native types\r\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\r\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\r\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\r\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\r\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\r\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\r\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\r\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\r\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\r\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\r\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\r\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\r\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\r\n    this.registerNativeType(CommonSymbols.void_, Type.void);\r\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\r\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\r\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\r\n      CommonSymbols.native,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\r\n      DecoratorFlags.BUILTIN\r\n    ));\r\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\r\n\r\n    // register compiler hints\r\n    this.registerConstantInteger(LibrarySymbols.ASC_TARGET, Type.i32,\r\n      i64_new(options.isWasm64 ? 2 : 1));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_NO_ASSERT, Type.bool,\r\n      i64_new(options.noAssert ? 1 : 0, 0));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_MEMORY_BASE, Type.i32,\r\n      i64_new(options.memoryBase, 0));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\r\n      i64_new(options.optimizeLevelHint, 0));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_SHRINK_LEVEL, Type.i32,\r\n      i64_new(options.shrinkLevelHint, 0));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_MUTABLE_GLOBAL, Type.bool,\r\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\r\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_SIMD, Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_THREADS, Type.bool,\r\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\r\n\r\n    // remember deferred elements\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\r\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\r\n    var queuedExtends = new Array<ClassPrototype>();\r\n    var queuedImplements = new Array<ClassPrototype>();\r\n\r\n    // initialize relevant declaration-like statements of the entire program\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n      let file = new File(this, source);\r\n      this.filesByName.set(file.internalName, file);\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports * should be linkable now that all files have been processed\r\n    for (let [file, exportsStar] of queuedExportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        let exportStar = exportsStar[i];\r\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\r\n        if (!foreignFile) {\r\n          this.error(\r\n            DiagnosticCode.File_0_not_found,\r\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\r\n          );\r\n          continue;\r\n        }\r\n        file.ensureExportStar(foreignFile);\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\r\n      let queuedImport = queuedImports[i];\r\n      let foreignIdentifier = queuedImport.foreignIdentifier;\r\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\r\n        let element = this.lookupForeign(\r\n          foreignIdentifier.text,\r\n          queuedImport.foreignPath,\r\n          queuedImport.foreignPathAlt,\r\n          queuedExports\r\n        );\r\n        if (element) {\r\n          queuedImport.localFile.add(\r\n            queuedImport.localIdentifier.text,\r\n            element,\r\n            true // isImport\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Module_0_has_no_exported_member_1,\r\n            foreignIdentifier.range,\r\n            queuedImport.foreignPath,\r\n            foreignIdentifier.text\r\n          );\r\n        }\r\n      } else { // i.e. import * as bar from \"./bar\"\r\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\r\n        if (foreignFile) {\r\n          let localFile = queuedImport.localFile;\r\n          let localName = queuedImport.localIdentifier.text;\r\n          localFile.add(\r\n            localName,\r\n            foreignFile.asImportedNamespace(\r\n              localName,\r\n              localFile\r\n            ),\r\n            true // isImport\r\n          );\r\n        } else {\r\n          assert(false); // already reported by the parser not finding the file\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [file, exports] of queuedExports) {\r\n      for (let [exportName, queuedExport] of exports) {\r\n        let localName = queuedExport.localIdentifier.text;\r\n        let foreignPath = queuedExport.foreignPath;\r\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\r\n          let element = this.lookupForeign(\r\n            localName,\r\n            foreignPath,\r\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\r\n            queuedExports\r\n          );\r\n          if (element) {\r\n            file.ensureExport(exportName, element);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.localIdentifier.range,\r\n              foreignPath, localName\r\n            );\r\n          }\r\n        } else { // i.e. export { foo [as bar] }\r\n          let element = file.lookupInSelf(localName);\r\n          if (element) {\r\n            file.ensureExport(exportName, element);\r\n          } else {\r\n            let globalElement = this.lookupGlobal(localName);\r\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\r\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Module_0_has_no_exported_member_1,\r\n                queuedExport.foreignIdentifier.range,\r\n                file.internalName, queuedExport.foreignIdentifier.text\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // register classes backing basic types\r\n    this.registerNativeTypeClass(TypeKind.I8, LibrarySymbols.I8);\r\n    this.registerNativeTypeClass(TypeKind.I16, LibrarySymbols.I16);\r\n    this.registerNativeTypeClass(TypeKind.I32, LibrarySymbols.I32);\r\n    this.registerNativeTypeClass(TypeKind.I64, LibrarySymbols.I64);\r\n    this.registerNativeTypeClass(TypeKind.ISIZE, LibrarySymbols.Isize);\r\n    this.registerNativeTypeClass(TypeKind.U8, LibrarySymbols.U8);\r\n    this.registerNativeTypeClass(TypeKind.U16, LibrarySymbols.U16);\r\n    this.registerNativeTypeClass(TypeKind.U32, LibrarySymbols.U32);\r\n    this.registerNativeTypeClass(TypeKind.U64, LibrarySymbols.U64);\r\n    this.registerNativeTypeClass(TypeKind.USIZE, LibrarySymbols.Usize);\r\n    this.registerNativeTypeClass(TypeKind.BOOL, LibrarySymbols.Bool);\r\n    this.registerNativeTypeClass(TypeKind.F32, LibrarySymbols.F32);\r\n    this.registerNativeTypeClass(TypeKind.F64, LibrarySymbols.F64);\r\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeTypeClass(TypeKind.V128, LibrarySymbols.V128);\r\n\r\n    // resolve base prototypes of derived classes\r\n    var resolver = this.resolver;\r\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\r\n      let thisPrototype = queuedExtends[i];\r\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\r\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\r\n      if (!baseElement) continue;\r\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let basePrototype = <ClassPrototype>baseElement;\r\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\r\n          this.error(\r\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\r\n          );\r\n        }\r\n        if (\r\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\r\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\r\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\r\n          );\r\n        }\r\n        thisPrototype.basePrototype = basePrototype;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          extendsNode.range\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    {\r\n      let globalAliases = options.globalAliases;\r\n      if (globalAliases) {\r\n        for (let [alias, name] of globalAliases) {\r\n          if (!name.length) continue; // explicitly disabled\r\n          let elementsByName = this.elementsByName;\r\n          let element = elementsByName.get(name);\r\n          if (element) {\r\n            if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\r\n            elementsByName.set(alias, element);\r\n          }\r\n          else throw new Error(\"no such global element: \" + name);\r\n        }\r\n      }\r\n    }\r\n\r\n    // register global library elements\r\n    {\r\n      let element: Element | null;\r\n      if (element = this.lookupGlobal(LibrarySymbols.String)) {\r\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n        this.stringInstance = resolver.resolveClass(<ClassPrototype>element, null);\r\n      }\r\n      if (element = this.lookupGlobal(LibrarySymbols.ArrayBuffer)) {\r\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n        this.arrayBufferInstance = resolver.resolveClass(<ClassPrototype>element, null);\r\n      }\r\n      if (element = this.lookupGlobal(LibrarySymbols.Array)) {\r\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n        this.arrayPrototype = <ClassPrototype>element;\r\n      }\r\n      if (element = this.lookupGlobal(LibrarySymbols.abort)) {\r\n        assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n        this.abortInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\r\n      }\r\n      if (element = this.lookupGlobal(LibrarySymbols.memory)) {\r\n        if (element = element.lookupInSelf(LibrarySymbols.allocate)) {\r\n          assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n          this.memoryAllocateInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\r\n        }\r\n      }\r\n    }\r\n\r\n    // register GC hooks if present\r\n    // FIXME: think about a better way than globals to model this, maybe a GC namespace that can be\r\n    // dynamically extended by a concrete implementation but then has `@unsafe` methods that normal\r\n    // code cannot call without explicitly enabling it with a flag.\r\n    if (\r\n      this.elementsByName.has(\"__gc_allocate\") &&\r\n      this.elementsByName.has(\"__gc_link\") &&\r\n      this.elementsByName.has(\"__gc_mark\")\r\n    ) {\r\n      // __gc_allocate(usize, (ref: usize) => void): usize\r\n      let element = <Element>this.elementsByName.get(\"__gc_allocate\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcAllocateInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\r\n      let signature = gcAllocateInstance.signature;\r\n      assert(signature.parameterTypes.length == 2);\r\n      assert(signature.parameterTypes[0] == this.options.usizeType);\r\n      assert(signature.parameterTypes[1].signatureReference);\r\n      assert(signature.returnType == this.options.usizeType);\r\n\r\n      // __gc_link(usize, usize): void\r\n      element = <Element>this.elementsByName.get(\"__gc_link\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcLinkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\r\n      signature = gcLinkInstance.signature;\r\n      assert(signature.parameterTypes.length == 2);\r\n      assert(signature.parameterTypes[0] == this.options.usizeType);\r\n      assert(signature.parameterTypes[1] == this.options.usizeType);\r\n      assert(signature.returnType == Type.void);\r\n\r\n      // __gc_mark(usize): void\r\n      element = <Element>this.elementsByName.get(\"__gc_mark\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcMarkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\r\n      signature = gcMarkInstance.signature;\r\n      assert(signature.parameterTypes.length == 1);\r\n      assert(signature.parameterTypes[0] == this.options.usizeType);\r\n      assert(signature.returnType == Type.void);\r\n\r\n      this.gcAllocateInstance = gcAllocateInstance;\r\n      this.gcLinkInstance = gcLinkInstance;\r\n      this.gcMarkInstance = gcMarkInstance;\r\n      let gcHookOffset = 2 * options.usizeType.byteSize; // .next + .prev\r\n      this.gcHookOffset =  gcHookOffset;\r\n      this.gcHeaderSize = (gcHookOffset + 4 + 7) & ~7;   // + .hook index + alignment\r\n      this.hasGC = true;\r\n    }\r\n\r\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\r\n    for (let file of this.filesByName.values()) {\r\n      let exports = file.exports;\r\n      if (!(file.source.isEntry && exports)) continue;\r\n      for (let element of exports.values()) this.markModuleExport(element);\r\n    }\r\n  }\r\n\r\n  /** Marks an element and its children as a module export. */\r\n  private markModuleExport(element: Element): void {\r\n    element.set(CommonFlags.MODULE_EXPORT);\r\n    switch (element.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\r\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\r\n        if (getterPrototype) this.markModuleExport(getterPrototype);\r\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\r\n        if (setterPrototype) this.markModuleExport(setterPrototype);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY:\r\n      case ElementKind.FUNCTION:\r\n      case ElementKind.FIELD:\r\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\r\n    }\r\n    {\r\n      let members = element.members;\r\n      if (members) for (let member of members.values()) this.markModuleExport(member);\r\n    }\r\n  }\r\n\r\n  /** Registers a native type with the program. */\r\n  private registerNativeType(name: string, type: Type): void {\r\n    var element = new TypeDefinition(\r\n      name,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\r\n      DecoratorFlags.BUILTIN\r\n    );\r\n    element.setType(type);\r\n    this.nativeFile.add(name, element);\r\n  }\r\n\r\n  /** Registers the backing class of a native type. */\r\n  private registerNativeTypeClass(typeKind: TypeKind, className: string): void {\r\n    assert(!this.typeClasses.has(typeKind));\r\n    var element = this.lookupGlobal(className);\r\n    if (element) {\r\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\r\n      if (classElement) this.typeClasses.set(typeKind, classElement);\r\n    }\r\n  }\r\n\r\n  /** Registers a constant integer value within the global scope. */\r\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\r\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\r\n    var global = new Global(\r\n      name,\r\n      this.nativeFile,\r\n      DecoratorFlags.NONE,\r\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\r\n    );\r\n    global.setConstantIntegerValue(value, type);\r\n    this.nativeFile.add(name, global);\r\n  }\r\n\r\n  /** Registers a constant float value within the global scope. */\r\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\r\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\r\n    var global = new Global(\r\n      name,\r\n      this.nativeFile,\r\n      DecoratorFlags.NONE,\r\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\r\n    );\r\n    global.setConstantFloatValue(value, type);\r\n    this.nativeFile.add(name, global);\r\n  }\r\n\r\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\r\n  ensureGlobal(name: string, element: DeclaredElement): void {\r\n    var elementsByName = this.elementsByName;\r\n    if (elementsByName.has(name)) {\r\n      let actual = elementsByName.get(name);\r\n      // NOTE: this is effectively only performed when merging native types with\r\n      // their respective namespaces in std/builtins, but can also trigger when a\r\n      // user has multiple global elements of the same name in different files,\r\n      // which might result in unexpected shared symbols accross files. considering\r\n      // this a wonky feature for now that we might want to revisit later.\r\n      if (actual !== element) {\r\n        let merged = tryMerge(elementsByName.get(name)!, element);\r\n        if (!merged) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            element.identifierNode.range, name\r\n          );\r\n          return;\r\n        }\r\n        element = merged;\r\n      }\r\n    }\r\n    elementsByName.set(name, element);\r\n  }\r\n\r\n  /** Looks up the element of the specified name in the global scope. */\r\n  lookupGlobal(name: string): Element | null {\r\n    var elements = this.elementsByName;\r\n    if (elements.has(name)) return elements.get(name);\r\n    return null;\r\n  }\r\n\r\n  /** Tries to locate a foreign file given its normalized path. */\r\n  private lookupForeignFile(\r\n    /** Normalized path to the other file. */\r\n    foreignPath: string,\r\n    /** Alternative normalized path to the other file. */\r\n    foreignPathAlt: string\r\n  ): File | null {\r\n    var filesByName = this.filesByName;\r\n    return filesByName.has(foreignPath)\r\n         ? filesByName.get(foreignPath)!\r\n         : filesByName.has(foreignPathAlt)\r\n         ? filesByName.get(foreignPathAlt)!\r\n         : null;\r\n  }\r\n\r\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\r\n  private lookupForeign(\r\n    /** Identifier within the other file. */\r\n    foreignName: string,\r\n    /** Normalized path to the other file. */\r\n    foreignPath: string,\r\n    /** Alternative normalized path to the other file. */\r\n    foreignPathAlt: string,\r\n    /** So far queued exports. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): DeclaredElement | null {\r\n    do {\r\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\r\n      if (!foreignFile) return null; // no such file\r\n\r\n      // search already resolved exports\r\n      let element = foreignFile.lookupExport(foreignName);\r\n      if (element) return element;\r\n\r\n      // otherwise traverse queued exports\r\n      if (queuedExports.has(foreignFile)) {\r\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\r\n        if (fileQueuedExports.has(foreignName)) {\r\n          let queuedExport = fileQueuedExports.get(foreignName)!;\r\n          if (queuedExport.foreignPath) { // imported from another file\r\n            foreignName = queuedExport.localIdentifier.text;\r\n            foreignPath = queuedExport.foreignPath;\r\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\r\n            continue;\r\n          } else { // local element of this file\r\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\r\n            if (element) return element;\r\n          }\r\n        }\r\n      }\r\n      break;\r\n    } while (true);\r\n    return null;\r\n  }\r\n\r\n  /** Validates that only supported decorators are present. */\r\n  private checkDecorators(\r\n    /** Decorators present on an element. */\r\n    decorators: DecoratorNode[] | null,\r\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\r\n    acceptedFlags: DecoratorFlags\r\n  ): DecoratorFlags {\r\n    var flags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        let kind = decoratorNameToKind(decorator.name);\r\n        let flag = decoratorKindToFlag(kind);\r\n        if (flag) {\r\n          if (flag == DecoratorFlags.BUILTIN) {\r\n            if (decorator.range.source.isLibrary) {\r\n              flags |= flag;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Decorator_0_is_not_valid_here,\r\n                decorator.range, decorator.name.range.toString()\r\n              );\r\n            }\r\n          } else if (!(acceptedFlags & flag)) {\r\n            this.error(\r\n              DiagnosticCode.Decorator_0_is_not_valid_here,\r\n              decorator.range, decorator.name.range.toString()\r\n            );\r\n          } else if (flags & flag) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_decorator,\r\n              decorator.range, decorator.name.range.toString()\r\n            );\r\n          } else {\r\n            flags |= flag;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return flags;\r\n  }\r\n\r\n  /** Initializes a class declaration. */\r\n  private initializeClass(\r\n    /** The declaration to initialize. */\r\n    declaration: ClassDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: ClassPrototype[],\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new ClassPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL |\r\n        DecoratorFlags.SEALED |\r\n        DecoratorFlags.UNMANAGED\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    if (implementsTypes) {\r\n      let numImplementsTypes = implementsTypes.length;\r\n      // cannot implement interfaces when unmanaged\r\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (numImplementsTypes) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\r\n            Range.join(\r\n              declaration.name.range,\r\n              implementsTypes[numImplementsTypes - 1].range\r\n            )\r\n          );\r\n        }\r\n      } else if (numImplementsTypes) {\r\n        // remember classes that implement interfaces\r\n        for (let i = 0; i < numImplementsTypes; ++i) {\r\n          this.warning( // TODO: not yet supported\r\n            DiagnosticCode.Operation_not_supported,\r\n            implementsTypes[i].range\r\n          );\r\n        }\r\n        queuedImplements.push(element);\r\n      }\r\n    }\r\n    // remember classes that extend another class\r\n    if (declaration.extendsType) queuedExtends.push(element);\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\r\n        default: assert(false); // class member expected\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Initializes a field of a class or interface. */\r\n  private initializeField(\r\n    /** The declaration to initialize. */\r\n    declaration: FieldDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var decorators = declaration.decorators;\r\n    var element: DeclaredElement;\r\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\r\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\r\n      element = new Global(\r\n        name,\r\n        parent,\r\n        this.checkDecorators(decorators,\r\n          (declaration.is(CommonFlags.READONLY)\r\n            ? DecoratorFlags.INLINE\r\n            : DecoratorFlags.NONE\r\n          ) | DecoratorFlags.LAZY\r\n        ),\r\n        declaration\r\n      );\r\n      if (!parent.add(name, element)) return;\r\n    } else { // actual instance field\r\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\r\n      element = new FieldPrototype(\r\n        name,\r\n        parent,\r\n        declaration,\r\n        this.checkDecorators(decorators, DecoratorFlags.NONE)\r\n      );\r\n      if (!parent.addInstance(name, element)) return;\r\n    }\r\n  }\r\n\r\n  /** Initializes a method of a class or interface. */\r\n  private initializeMethod(\r\n    /** The declaration to initialize. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var isStatic = declaration.is(CommonFlags.STATIC);\r\n    var acceptedFlags = DecoratorFlags.INLINE;\r\n    if (!declaration.is(CommonFlags.GENERIC)) {\r\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\r\n                    |  DecoratorFlags.OPERATOR_PREFIX\r\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\r\n    }\r\n    var element = new FunctionPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, acceptedFlags)\r\n    );\r\n    if (isStatic) { // global function\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n      if (!parent.add(name, element)) return;\r\n    } else { // actual instance method\r\n      if (!parent.addInstance(name, element)) return;\r\n    }\r\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\r\n  }\r\n\r\n  /** Checks that operator overloads are generally valid, if present. */\r\n  private checkOperatorOverloads(\r\n    /** Decorators to check. */\r\n    decorators: DecoratorNode[] | null,\r\n    /** Decorated method. */\r\n    prototype: FunctionPrototype,\r\n    /** Parent class. */\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        switch (decorator.decoratorKind) {\r\n          case DecoratorKind.OPERATOR:\r\n          case DecoratorKind.OPERATOR_BINARY:\r\n          case DecoratorKind.OPERATOR_PREFIX:\r\n          case DecoratorKind.OPERATOR_POSTFIX: {\r\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n            if (numArgs == 1) {\r\n              let firstArg = (<Expression[]>decorator.arguments)[0];\r\n              if (\r\n                firstArg.kind == NodeKind.LITERAL &&\r\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n              ) {\r\n                let kind = operatorKindFromDecorator(\r\n                  decorator.decoratorKind,\r\n                  (<StringLiteralExpression>firstArg).value\r\n                );\r\n                if (kind == OperatorKind.INVALID) {\r\n                  this.error(\r\n                    DiagnosticCode.Operation_not_supported,\r\n                    firstArg.range\r\n                  );\r\n                } else {\r\n                  let overloads = classPrototype.overloadPrototypes;\r\n                  if (overloads.has(kind)) {\r\n                    this.error(\r\n                      DiagnosticCode.Duplicate_function_implementation,\r\n                      firstArg.range\r\n                    );\r\n                  } else {\r\n                    prototype.operatorKind = kind;\r\n                    overloads.set(kind, prototype);\r\n                  }\r\n                }\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.String_literal_expected,\r\n                  firstArg.range\r\n                );\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                decorator.range, \"1\", numArgs.toString(10)\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\r\n  private ensureProperty(\r\n    /** The declaration of the getter or setter introducing the property. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): PropertyPrototype | null {\r\n    var name = declaration.name.text;\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let parentMembers = parent.members;\r\n      if (parentMembers && parentMembers.has(name)) {\r\n        let element = <Element>parentMembers.get(name)!;\r\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\r\n      } else {\r\n        let element = new PropertyPrototype(name, parent, declaration);\r\n        if (!parent.add(name, element)) return null;\r\n        return element;\r\n      }\r\n    } else {\r\n      let parentMembers = parent.instanceMembers;\r\n      if (parentMembers && parentMembers.has(name)) {\r\n        let element = <Element>parentMembers.get(name);\r\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\r\n      } else {\r\n        let element = new PropertyPrototype(name, parent, declaration);\r\n        if (!parent.addInstance(name, element)) return null;\r\n        return element;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Duplicate_property_0,\r\n      declaration.name.range, name\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Initializes a property of a class. */\r\n  private initializeProperty(\r\n    /** The declaration of the getter or setter. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var property = this.ensureProperty(declaration, parent);\r\n    if (!property) return;\r\n    var name = declaration.name.text;\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    if (isGetter) {\r\n      if (property.getterPrototype) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_property_0,\r\n          declaration.name.range, name\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      if (property.setterPrototype) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_property_0,\r\n          declaration.name.range, name\r\n        );\r\n        return;\r\n      }\r\n    }\r\n    var element = new FunctionPrototype(\r\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\r\n      property,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.INLINE\r\n      )\r\n    );\r\n    if (isGetter) {\r\n      property.getterPrototype = element;\r\n    } else {\r\n      property.setterPrototype = element;\r\n    }\r\n  }\r\n\r\n  /** Initializes an enum. */\r\n  private initializeEnum(\r\n    /** The declaration to initialize. */\r\n    declaration: EnumDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new Enum(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL |\r\n        DecoratorFlags.INLINE |\r\n        DecoratorFlags.LAZY\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n  }\r\n\r\n  /** Initializes an enum value. */\r\n  private initializeEnumValue(\r\n    /** The declaration to initialize. */\r\n    declaration: EnumValueDeclaration,\r\n    /** Parent enum. */\r\n    parent: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new EnumValue(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.NONE\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n  }\r\n\r\n  /** Initializes an `export` statement. */\r\n  private initializeExports(\r\n    /** The statement to initialize. */\r\n    statement: ExportStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>,\r\n    /** So far queued `export *`s. */\r\n    queuedExportsStar: Map<File,QueuedExportStar[]>\r\n  ): void {\r\n    var members = statement.members;\r\n    if (members) { // export { foo, bar } [from \"./baz\"]\r\n      for (let i = 0, k = members.length; i < k; ++i) {\r\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\r\n      }\r\n    } else { // export * from \"./baz\"\r\n      let queued: QueuedExportStar[];\r\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\r\n      else queuedExportsStar.set(parent, queued = []);\r\n      let foreignPath = assert(statement.internalPath); // must be set for export *\r\n      queued.push(new QueuedExportStar(\r\n        foreignPath,\r\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n          : foreignPath + INDEX_SUFFIX,\r\n        assert(statement.path)\r\n      ));\r\n    }\r\n  }\r\n\r\n  /** Initializes a single `export` member. Does not handle `export *`. */\r\n  private initializeExport(\r\n    /** The member to initialize. */\r\n    member: ExportMember,\r\n    /** Local file. */\r\n    localFile: File,\r\n    /** Path to the other file, if present. */\r\n    foreignPath: string | null,\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var localName = member.localName.text;\r\n    var foreignName = member.exportedName.text;\r\n\r\n    // check for duplicates\r\n    var element = localFile.lookupExport(foreignName);\r\n    if (element) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.exportedName.range, foreignName\r\n      );\r\n      return;\r\n    }\r\n    // local element, i.e. export { foo [as bar] }\r\n    if (foreignPath === null) {\r\n\r\n      // resolve right away if the local element already exists\r\n      if (element = localFile.lookupInSelf(localName)) {\r\n        localFile.ensureExport(foreignName, element);\r\n\r\n      // otherwise queue it\r\n      } else {\r\n        let queued: Map<string,QueuedExport>;\r\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\r\n        else queuedExports.set(localFile, queued = new Map());\r\n        queued.set(foreignName, new QueuedExport(\r\n          member.localName,\r\n          member.exportedName,\r\n          null, null\r\n        ));\r\n      }\r\n\r\n    // foreign element, i.e. export { foo } from \"./bar\"\r\n    } else {\r\n      let queued: Map<string,QueuedExport>;\r\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\r\n      else queuedExports.set(localFile, queued = new Map());\r\n      queued.set(foreignName, new QueuedExport(\r\n        member.localName,\r\n        member.exportedName,\r\n        foreignPath,\r\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n          : foreignPath + INDEX_SUFFIX\r\n      ));\r\n    }\r\n  }\r\n\r\n  /** Initializes an `import` statement. */\r\n  private initializeImports(\r\n    /** The statement to initialize. */\r\n    statement: ImportStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `import`s. */\r\n    queuedImports: QueuedImport[],\r\n    /** SO far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          parent,\r\n          statement.internalPath,\r\n          queuedImports,\r\n          queuedExports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\r\n      queuedImports.push(new QueuedImport(\r\n        parent,\r\n        statement.namespaceName,\r\n        null, // indicates import *\r\n        statement.internalPath,\r\n        statement.internalPath + INDEX_SUFFIX\r\n      ));\r\n    } else {\r\n      // import \"./foo\"\r\n    }\r\n  }\r\n\r\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\r\n  private initializeImport( // { foo [as bar] }\r\n    /** The declaration to initialize. */\r\n    declaration: ImportDeclaration,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** Path to the other file. */\r\n    foreignPath: string,\r\n    /** So far queued `import`s. */\r\n    queuedImports: QueuedImport[],\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n      : foreignPath + INDEX_SUFFIX;\r\n\r\n    // resolve right away if the element exists\r\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\r\n    if (element) {\r\n      parent.add(declaration.name.text, element, true);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    queuedImports.push(new QueuedImport(\r\n      parent,\r\n      declaration.name,\r\n      declaration.foreignName,\r\n      foreignPath,\r\n      foreignPathAlt\r\n    ));\r\n  }\r\n\r\n  /** Initializes a function. Does not handle methods. */\r\n  private initializeFunction(\r\n    /** The declaration to initialize. */\r\n    declaration: FunctionDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var validDecorators = DecoratorFlags.NONE;\r\n    if (declaration.is(CommonFlags.AMBIENT)) {\r\n      validDecorators |= DecoratorFlags.EXTERNAL;\r\n    } else {\r\n      validDecorators |= DecoratorFlags.INLINE;\r\n    }\r\n    if (!declaration.is(CommonFlags.INSTANCE)) {\r\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\r\n        validDecorators |= DecoratorFlags.GLOBAL;\r\n      }\r\n    }\r\n    if (!declaration.is(CommonFlags.GENERIC)) {\r\n      if (parent.kind == ElementKind.FILE && (<File>parent).source.isEntry) {\r\n        validDecorators |= DecoratorFlags.START;\r\n      }\r\n    }\r\n    var element = new FunctionPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, validDecorators)\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n    if (element.hasDecorator(DecoratorFlags.START)) {\r\n      if (this.explicitStartFunction) {\r\n        this.error(\r\n          DiagnosticCode.Module_cannot_have_multiple_start_functions,\r\n          assert(findDecorator(DecoratorKind.START, declaration.decorators)).range\r\n        );\r\n      } else this.explicitStartFunction = element;\r\n    }\r\n  }\r\n\r\n  /** Initializes an interface. */\r\n  private initializeInterface(\r\n    /** The declaration to initialize. */\r\n    declaration: InterfaceDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new InterfacePrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\r\n          }\r\n          break;\r\n        }\r\n        default: assert(false); // interface member expected\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Initializes a namespace. */\r\n  private initializeNamespace(\r\n    /** The declaration to initialize. */\r\n    declaration: NamespaceDeclaration,\r\n    /** Parent element, usually a file or another namespace. */\r\n    parent: Element,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: ClassPrototype[],\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new Namespace(name, parent, declaration);\r\n    if (!parent.add(name, element)) return;\r\n    element = assert(parent.lookupInSelf(name)); // possibly merged\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>member, element, queuedExtends, queuedImplements);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>member, element);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>member, element);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>member, element);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>member, element, queuedExtends, queuedImplements);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          this.initializeTypeDefinition(<TypeDeclaration>member, element);\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>member, element);\r\n          break;\r\n        }\r\n        default: assert(false); // namespace member expected\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Initializes a `type` definition. */\r\n  private initializeTypeDefinition(\r\n    /** The declaration to initialize. */\r\n    declaration: TypeDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new TypeDefinition(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\r\n    );\r\n    parent.add(name, element); // reports\r\n  }\r\n\r\n  /** Initializes a variable statement. */\r\n  private initializeVariables(\r\n    /** The statement to initialize. */\r\n    statement: VariableStatement,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\r\n      if (declaration.is(CommonFlags.DECLARE)) {\r\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\r\n      }\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        acceptedFlags |= DecoratorFlags.INLINE;\r\n      }\r\n      let element = new Global(\r\n        name,\r\n        parent,\r\n        this.checkDecorators(declaration.decorators, acceptedFlags),\r\n        declaration\r\n      );\r\n      if (!parent.add(name, element)) continue; // reports\r\n    }\r\n  }\r\n}\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link PropertyPrototype}.  */\r\n  PROPERTY_PROTOTYPE,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE,\r\n  /** A {@link File}. */\r\n  FILE,\r\n  /** A {@link TypeDefinition}.  */\r\n  TYPEDEFINITION,\r\n}\r\n\r\n/** Indicates built-in decorators that are present. */\r\nexport enum DecoratorFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n  /** Is a program global. */\r\n  GLOBAL = 1 << 0,\r\n  /** Is a binary operator overload. */\r\n  OPERATOR_BINARY = 1 << 1,\r\n  /** Is a unary prefix operator overload. */\r\n  OPERATOR_PREFIX = 1 << 2,\r\n  /** Is a unary postfix operator overload. */\r\n  OPERATOR_POSTFIX = 1 << 3,\r\n  /** Is an unmanaged class. */\r\n  UNMANAGED = 1 << 4,\r\n  /** Is a sealed class. */\r\n  SEALED = 1 << 5,\r\n  /** Is always inlined. */\r\n  INLINE = 1 << 6,\r\n  /** Is using a different external name. */\r\n  EXTERNAL = 1 << 7,\r\n  /** Is a builtin. */\r\n  BUILTIN = 1 << 8,\r\n  /** Is compiled lazily. */\r\n  LAZY = 1 << 9,\r\n  /** Is the explicit start function. */\r\n  START = 1 << 10\r\n}\r\n\r\n/** Translates a decorator kind to the respective decorator flag. */\r\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\r\n  switch (kind) {\r\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\r\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\r\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\r\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\r\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\r\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\r\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\r\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\r\n    case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\r\n    case DecoratorKind.START: return DecoratorFlags.START;\r\n    default: return DecoratorFlags.NONE;\r\n  }\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Parent element. */\r\n  parent: Element;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Decorator flags indicating annotated traits. */\r\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\r\n  /** Member elements. */\r\n  members: Map<string,DeclaredElement> | null = null;\r\n  /** Shadowing type in type space, if any. */\r\n  shadowType: TypeDefinition | null = null;\r\n\r\n  /** Constructs a new program element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    public kind: ElementKind,\r\n    /** Simple name. */\r\n    public name: string,\r\n    /** Internal name referring to this element. */\r\n    public internalName: string,\r\n    /** Containing {@link Program}. */\r\n    public program: Program,\r\n    /** Parent element. */\r\n    parent: Element | null\r\n  ) {\r\n    this.program = program;\r\n    this.name = name;\r\n    this.internalName = internalName;\r\n    if (parent) {\r\n      this.parent = parent;\r\n    } else {\r\n      assert(this.kind == ElementKind.FILE);\r\n      this.parent = this; // special case to keep this.parent non-nullable\r\n    }\r\n  }\r\n\r\n  /** Gets the enclosing file. */\r\n  get file(): File {\r\n    var current: Element = this;\r\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\r\n    while (true);\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n  /** Tests if this element has a specific decorator flag or flags. */\r\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\r\n\r\n  /** Looks up the element with the specified name within this element. */\r\n  lookupInSelf(name: string): DeclaredElement | null {\r\n    var members = this.members;\r\n    if (members && members.has(name)) return members.get(name)!;\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the element with the specified name relative to this element, like in JS. */\r\n  abstract lookup(name: string): Element | null;\r\n\r\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\r\n  add(name: string, element: DeclaredElement): bool {\r\n    var originalDeclaration = element.declaration;\r\n    var members = this.members;\r\n    if (!members) this.members = members = new Map();\r\n    else if (members.has(name)) {\r\n      let actual = members.get(name)!;\r\n      if (actual.parent !== this) {\r\n        // override non-own element\r\n      } else {\r\n        let merged = tryMerge(actual, element);\r\n        if (merged) {\r\n          element = merged; // use merged element\r\n        } else {\r\n          this.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            element.identifierNode.range, element.identifierNode.text\r\n          );\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    members.set(name, element);\r\n    var program = this.program;\r\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\r\n      // prefer unbound prototypes in global lookup maps\r\n      program.elementsByName.set(element.internalName, element);\r\n      program.elementsByDeclaration.set(originalDeclaration, element);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** Returns a string representation of this element. */\r\n  toString(): string {\r\n    return ElementKind[this.kind] + \":\" + this.internalName;\r\n  }\r\n}\r\n\r\n/** Base class of elements with an associated declaration statement. */\r\nexport abstract class DeclaredElement extends Element {\r\n\r\n  /** Constructs a new declared program element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    kind: ElementKind,\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Internal name referring to this element. */\r\n    internalName: string,\r\n    /** Containing {@link Program}. */\r\n    program: Program,\r\n    /** Parent element. */\r\n    parent: Element | null,\r\n    /** Declaration reference. */\r\n    public declaration: DeclarationStatement\r\n  ) {\r\n    super(kind, name, internalName, program, parent);\r\n    // It is necessary to have access to identifiers of all members and exports\r\n    // for reporting purposes and this is the lowest common denominator. Comes\r\n    // at the expense of not having more specific type information in derived\r\n    // classes, though. Instead, derived classes implement getters for other\r\n    // important AST nodes directly through manual casting, allowing the resolver\r\n    // etc. to not worry about actual declarations.\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags; // inherit\r\n  }\r\n\r\n  /** Tests if this element is a library element. */\r\n  get isDeclaredInLibrary(): bool {\r\n    return this.declaration.range.source.isLibrary;\r\n  }\r\n\r\n  /** Gets the associated identifier node. */\r\n  get identifierNode(): IdentifierExpression {\r\n    return this.declaration.name;\r\n  }\r\n\r\n  /** Gets the assiciated decorator nodes. */\r\n  get decoratorNodes(): DecoratorNode[] | null {\r\n    return this.declaration.decorators;\r\n  }\r\n}\r\n\r\n/** Base class of elements that can be resolved to a concrete type. */\r\nexport abstract class TypedElement extends DeclaredElement {\r\n\r\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\r\n  type: Type = Type.void;\r\n\r\n  /** Sets the resolved type of this element. */\r\n  setType(type: Type): void {\r\n    assert(!this.is(CommonFlags.RESOLVED));\r\n    this.type = type;\r\n    this.set(CommonFlags.RESOLVED);\r\n  }\r\n}\r\n\r\n/** A file representing the implicit top-level namespace of a source. */\r\nexport class File extends Element {\r\n\r\n  /** File exports. */\r\n  exports: Map<string,DeclaredElement> | null = null;\r\n  /** File re-exports. */\r\n  exportsStar: File[] | null = null;\r\n  /** Top-level start function of this file. */\r\n  startFunction: Function;\r\n\r\n  /** Constructs a new file. */\r\n  constructor(\r\n    /** Program this file belongs to. */\r\n    program: Program,\r\n    /** Source of this file. */\r\n    public source: Source\r\n  ) {\r\n    super(\r\n      ElementKind.FILE,\r\n      source.normalizedPath,\r\n      source.internalPath,\r\n      program,\r\n      null // special case for files\r\n    );\r\n    this.source = source;\r\n    assert(!program.filesByName.has(this.internalName));\r\n    program.filesByName.set(this.internalName, this);\r\n    var startFunction = this.program.makeNativeFunction(\r\n      \"start:\" + this.internalName,\r\n      new Signature(null, Type.void),\r\n      this\r\n    );\r\n    startFunction.internalName = startFunction.name;\r\n    this.startFunction = startFunction;\r\n  }\r\n\r\n  /* @override */\r\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\r\n    if (!super.add(name, element)) return false;\r\n    element = assert(this.lookupInSelf(name)); // possibly merged\r\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\r\n      this.ensureExport(\r\n        element.name,\r\n        element\r\n      );\r\n    }\r\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) this.program.ensureGlobal(name, element);\r\n    return true;\r\n  }\r\n\r\n  /* @override */\r\n  lookupInSelf(name: string): DeclaredElement | null {\r\n    var element = super.lookupInSelf(name);\r\n    if (element) return element;\r\n    var exportsStar = this.exportsStar;\r\n    if (exportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    var element = this.lookupInSelf(name);\r\n    if (element) return element;\r\n    return this.program.lookupGlobal(name);\r\n  }\r\n\r\n  /** Ensures that an element is an export of this file. */\r\n  ensureExport(name: string, element: DeclaredElement): void {\r\n    var exports = this.exports;\r\n    if (!exports) this.exports = exports = new Map();\r\n    exports.set(name, element);\r\n    if (this.source.isLibrary) this.program.ensureGlobal(name, element);\r\n  }\r\n\r\n  /** Ensures that another file is a re-export of this file. */\r\n  ensureExportStar(file: File): void {\r\n    var exportsStar = this.exportsStar;\r\n    if (!exportsStar) this.exportsStar = exportsStar = [];\r\n    else if (exportsStar.includes(file)) return;\r\n    exportsStar.push(file);\r\n  }\r\n\r\n  /** Looks up the export of the specified name. */\r\n  lookupExport(name: string): DeclaredElement | null {\r\n    var exports = this.exports;\r\n    if (exports && exports.has(name)) return exports.get(name)!;\r\n    var exportsStar = this.exportsStar;\r\n    if (exportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        let element = exportsStar[i].lookupExport(name);\r\n        if (element) return element;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Creates an imported namespace from this file. */\r\n  asImportedNamespace(name: string, parent: Element): Namespace {\r\n    var ns = new Namespace(\r\n      name,\r\n      parent,\r\n      this.program.makeNativeNamespaceDeclaration(name)\r\n    );\r\n    var exports = this.exports;\r\n    if (exports) {\r\n      for (let [memberName, member] of exports) {\r\n        ns.add(memberName, member);\r\n      }\r\n    }\r\n    return ns;\r\n  }\r\n}\r\n\r\n/** A type definition. */\r\nexport class TypeDefinition extends TypedElement {\r\n\r\n  /** Constructs a new type definition. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: TypeDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.TYPEDEFINITION,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<TypeDeclaration>this.declaration).typeParameters;\r\n  }\r\n\r\n  /** Gets the associated type node. */\r\n  get typeNode(): CommonTypeNode {\r\n    return (<TypeDeclaration>this.declaration).type;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A namespace that differs from a file in being user-declared with a name. */\r\nexport class Namespace extends DeclaredElement {\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or another namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: NamespaceDeclaration\r\n  ) {\r\n    super(\r\n      ElementKind.NAMESPACE,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.lookupInSelf(name)\r\n        || this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends TypedElement {\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: EnumDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.ENUM,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.setType(Type.i32);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.lookupInSelf(name)\r\n        || this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** Indicates the kind of an inlined constant value. */\r\nexport const enum ConstantValueKind {\r\n  /** No constant value. */\r\n  NONE,\r\n  /** Constant integer value. */\r\n  INTEGER,\r\n  /** Constant float value. */\r\n  FLOAT\r\n}\r\n\r\n/** Base class of all variable-like program elements. */\r\nexport abstract class VariableLikeElement extends TypedElement {\r\n\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  /** Constructs a new variable-like element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    kind: ElementKind,\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or class. */\r\n    parent: Element,\r\n    /** Declaration reference. Creates a native declaration if omitted. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      kind,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.flags = declaration.flags;\r\n  }\r\n\r\n  /** Gets the associated type node.s */\r\n  get typeNode(): CommonTypeNode | null {\r\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\r\n  }\r\n\r\n  /** Gets the associated initializer node. */\r\n  get initializerNode(): Expression | null {\r\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\r\n  }\r\n\r\n  /** Applies a constant integer value to this element. */\r\n  setConstantIntegerValue(value: I64, type: Type): void {\r\n    assert(type.is(TypeFlags.INTEGER));\r\n    this.type = type;\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\r\n  }\r\n\r\n  /** Applies a constant float value to this element. */\r\n  setConstantFloatValue(value: f64, type: Type): void {\r\n    assert(type.is(TypeFlags.FLOAT));\r\n    this.type = type;\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\r\n  }\r\n\r\n  /** @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends VariableLikeElement {\r\n\r\n  /** Constructs a new enum value. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent enum. */\r\n    parent: Enum,\r\n    /** Declaration reference. */\r\n    declaration: EnumValueDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.ENUMVALUE,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.setType(Type.i32);\r\n  }\r\n\r\n  /** Gets the associated value node. */\r\n  get valueNode(): Expression | null {\r\n    return (<EnumValueDeclaration>this.declaration).value;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  /** Constructs a new global variable. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or static class. */\r\n    parent: Element,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags,\r\n    /** Declaration reference. Creates a native declaration if omitted. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      ElementKind.GLOBAL,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n  /** Constructs a new function parameter. */\r\n  constructor(\r\n    /** Parameter name. */\r\n    public name: string,\r\n    /** Parameter type. */\r\n    public type: Type,\r\n    /** Parameter initializer, if present. */\r\n    public initializer: Expression | null = null\r\n  ) {}\r\n}\r\n\r\n/** A local variable. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  /** Constructs a new local variable. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\r\n    public index: i32,\r\n    /** Resolved type. */\r\n    type: Type,\r\n    /** Parent function. */\r\n    parent: Function,\r\n    /** Declaration reference. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      ElementKind.LOCAL,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.index = index;\r\n    assert(type != Type.void);\r\n    this.setType(type);\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends DeclaredElement {\r\n\r\n  /** Operator kind, if an overload. */\r\n  operatorKind: OperatorKind = OperatorKind.INVALID;\r\n  /** Already resolved instances. */\r\n  instances: Map<string,Function> | null = null;\r\n\r\n  /** Clones of this prototype that are bounds to specific classes. */\r\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    /** Simple na,e */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or class (if a method). */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: FunctionDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<FunctionDeclaration>this.declaration).typeParameters;\r\n  }\r\n\r\n  /** Gets the associated signature node. */\r\n  get signatureNode(): SignatureNode {\r\n    return (<FunctionDeclaration>this.declaration).signature;\r\n  }\r\n\r\n  /** Gets the associated body node. */\r\n  get bodyNode(): Statement | null {\r\n    return (<FunctionDeclaration>this.declaration).body;\r\n  }\r\n\r\n  /** Gets the arrow function kind. */\r\n  get arrowKind(): ArrowKind {\r\n    return (<FunctionDeclaration>this.declaration).arrowKind;\r\n  }\r\n\r\n  /** Tests if this prototype is bound to a class. */\r\n  get isBound(): bool {\r\n    var parent = this.parent;\r\n    return parent.kind == ElementKind.CLASS\r\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\r\n  }\r\n\r\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\r\n  toBound(classInstance: Class): FunctionPrototype {\r\n    assert(this.is(CommonFlags.INSTANCE));\r\n    assert(!this.isBound);\r\n    var boundPrototypes = this.boundPrototypes;\r\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\r\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\r\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\r\n    var bound = new FunctionPrototype(\r\n      this.name,\r\n      classInstance, // !\r\n      <MethodDeclaration>declaration,\r\n      this.decoratorFlags\r\n    );\r\n    bound.flags = this.flags;\r\n    bound.operatorKind = this.operatorKind;\r\n    // NOTE: this.instances holds instances per bound class / unbound\r\n    boundPrototypes.set(classInstance, bound);\r\n    return bound;\r\n  }\r\n\r\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\r\n  getResolvedInstance(instanceKey: string): Function | null {\r\n    var instances = this.instances;\r\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\r\n    return null;\r\n  }\r\n\r\n  /** Sets the resolved instance for the specified instance key. */\r\n  setResolvedInstance(instanceKey: string, instance: Function): void {\r\n    var instances = this.instances;\r\n    if (!instances) this.instances = instances = new Map();\r\n    else assert(!instances.has(instanceKey));\r\n    instances.set(instanceKey, instance);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends TypedElement {\r\n\r\n  /** Function prototype. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** Map of locals by name. */\r\n  localsByName: Map<string,Local> = new Map();\r\n  /** Array of locals by index. */\r\n  localsByIndex: Local[] = [];\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Default control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] = [];\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n\r\n  /** Counting id of inline operations involving this function. */\r\n  nextInlineId: i32 = 0;\r\n  /** Counting id of anonymous inner functions. */\r\n  nextAnonymousId: i32 = 0;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\r\n    nameInclTypeParameters: string,\r\n    /** Respective function prototype. */\r\n    prototype: FunctionPrototype,\r\n    /** Concrete signature. */\r\n    signature: Signature, // pre-resolved\r\n    /** Contextual type arguments inherited from its parent class, if any. */\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION,\r\n      nameInclTypeParameters,\r\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\r\n      prototype.program,\r\n      prototype.parent,\r\n      prototype.declaration\r\n    );\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.contextualTypeArguments = contextualTypeArguments;\r\n    this.type = Type.u32.asFunction(signature);\r\n    if (!prototype.is(CommonFlags.AMBIENT)) {\r\n      let localIndex = 0;\r\n      if (this.is(CommonFlags.INSTANCE)) {\r\n        let local = new Local(\r\n          CommonSymbols.this_,\r\n          localIndex++,\r\n          assert(signature.thisType),\r\n          this\r\n        );\r\n        this.localsByName.set(CommonSymbols.this_, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        let local = new Local(\r\n          parameterName,\r\n          localIndex++,\r\n          parameterType,\r\n          this\r\n        );\r\n        this.localsByName.set(parameterName, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var localName = name !== null\r\n      ? name\r\n      : \"var$\" + localIndex.toString();\r\n    var local = new Local(\r\n      localName,\r\n      localIndex,\r\n      type,\r\n      this,\r\n      declaration || this.program.makeNativeVariableDeclaration(localName)\r\n    );\r\n    if (name) {\r\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\r\n      this.localsByName.set(name, local);\r\n    }\r\n    this.localsByIndex[local.index] = local;\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    var locals = this.localsByName;\r\n    if (locals.has(name)) return locals.get(name);\r\n    return this.parent.lookup(name);\r\n  }\r\n\r\n  // used by flows to keep track of temporary locals\r\n  tempI32s: Local[] | null = null;\r\n  tempI64s: Local[] | null = null;\r\n  tempF32s: Local[] | null = null;\r\n  tempF64s: Local[] | null = null;\r\n  tempV128s: Local[] | null = null;\r\n\r\n  // used by flows to keep track of break labels\r\n  nextBreakId: i32 = 0;\r\n  breakStack: i32[] | null = null;\r\n  breakLabel: string | null = null;\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakLabel = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n        let debugLocation = debugLocations[i];\r\n        module.setDebugLocation(\r\n          ref,\r\n          debugLocation.debugInfoRef,\r\n          debugLocation.source.debugInfoIndex,\r\n          debugLocation.line,\r\n          debugLocation.column\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(\r\n    /** Concrete signature. */\r\n    signature: Signature,\r\n    /** Program reference. */\r\n    program: Program,\r\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION_TARGET,\r\n      __s = \"sig:\" + signature.toSignatureString(),\r\n      __s,\r\n      program,\r\n      program.nativeFile\r\n    );\r\n    this.signature = signature;\r\n    this.flags = CommonFlags.RESOLVED;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return null;\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends DeclaredElement {\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent class. */\r\n    parent: ClassPrototype,\r\n    /** Declaration reference. */\r\n    declaration: FieldDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.FIELD_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type node. */\r\n  get typeNode(): CommonTypeNode | null {\r\n    return (<FieldDeclaration>this.declaration).type;\r\n  }\r\n\r\n  /** Gets the associated initializer node. */\r\n  get initializerNode(): Expression | null {\r\n    return (<FieldDeclaration>this.declaration).initializer;\r\n  }\r\n\r\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\r\n  get parameterIndex(): i32 {\r\n    return (<FieldDeclaration>this.declaration).parameterIndex;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(\r\n    /** Respective field prototype. */\r\n    prototype: FieldPrototype,\r\n    /** Parent class. */\r\n    parent: Class,\r\n    /** Concrete type. */\r\n    type: Type\r\n  ) {\r\n    super(\r\n      ElementKind.FIELD,\r\n      prototype.name,\r\n      parent,\r\n      <VariableLikeDeclarationStatement>prototype.declaration\r\n    );\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    assert(type != Type.void);\r\n    this.setType(type);\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class PropertyPrototype extends DeclaredElement {\r\n\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent class. */\r\n    parent: ClassPrototype,\r\n    /** Declaration of the getter or setter introducing the property. */\r\n    firstDeclaration: FunctionDeclaration\r\n  ) {\r\n    super(\r\n      ElementKind.PROPERTY_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      firstDeclaration\r\n    );\r\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved property. */\r\nexport class Property extends VariableLikeElement {\r\n\r\n  /** Prototype reference. */\r\n  prototype: PropertyPrototype;\r\n  /** Getter instance. */\r\n  getterInstance: Function | null = null;\r\n  /** Setter instance. */\r\n  setterInstance: Function | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    /** Respective property prototype. */\r\n    prototype: PropertyPrototype,\r\n    /** Parent element, usually a static class prototype or class instance. */\r\n    parent: Element\r\n  ) {\r\n    super(\r\n      ElementKind.PROPERTY,\r\n      prototype.name,\r\n      parent,\r\n      prototype.program.makeNativeVariableDeclaration(\r\n        prototype.name,\r\n        prototype.is(CommonFlags.INSTANCE)\r\n          ? CommonFlags.INSTANCE\r\n          : CommonFlags.NONE\r\n      )\r\n    );\r\n    this.prototype = prototype;\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends DeclaredElement {\r\n\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n  /** Operator overload prototypes. */\r\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\r\n  /** Already resolved instances. */\r\n  instances: Map<string,Class> | null = null;\r\n\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: ClassDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\r\n    _isInterface: bool = false // FIXME\r\n  ) {\r\n    super(\r\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<ClassDeclaration>this.declaration).typeParameters;\r\n  }\r\n  /** Gets the associated extends node. */\r\n  get extendsNode(): TypeNode | null {\r\n    return (<ClassDeclaration>this.declaration).extendsType;\r\n  }\r\n  /** Gets the associated implements nodes. */\r\n  get implementsNodes(): TypeNode[] | null {\r\n    return (<ClassDeclaration>this.declaration).implementsTypes;\r\n  }\r\n\r\n  /** Tests if this prototype extends the specified. */\r\n  extends(basePtototype: ClassPrototype | null): bool {\r\n    var current: ClassPrototype | null = this;\r\n    do {\r\n      if (current === basePtototype) return true;\r\n    } while (current = current.basePrototype);\r\n    return false;\r\n  }\r\n\r\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\r\n  addInstance(name: string, element: DeclaredElement): bool {\r\n    var originalDeclaration = element.declaration;\r\n    var instanceMembers = this.instanceMembers;\r\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\r\n    else if (instanceMembers.has(name)) {\r\n      let merged = tryMerge(instanceMembers.get(name)!, element);\r\n      if (!merged) {\r\n        this.program.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          element.identifierNode.range, element.identifierNode.text\r\n        );\r\n        return false;\r\n      }\r\n      element = merged;\r\n    }\r\n    instanceMembers.set(name, element);\r\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\r\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\r\n    }\r\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\r\n    return true;\r\n  }\r\n\r\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\r\n  getResolvedInstance(instanceKey: string): Class | null {\r\n    var instances = this.instances;\r\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\r\n    return null;\r\n  }\r\n\r\n  /** Sets the resolved instance for the specified instance key. */\r\n  setResolvedInstance(instanceKey: string, instance: Class): void {\r\n    var instances = this.instances;\r\n    if (!instances) this.instances = instances = new Map();\r\n    else assert(!instances.has(instanceKey));\r\n    instances.set(instanceKey, instance);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends TypedElement {\r\n\r\n  /** Class prototype. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n  /** Operator overloads. */\r\n  overloads: Map<OperatorKind,Function> | null = null;\r\n  /** Function index of the GC hook. */\r\n  gcHookIndex: u32 = <u32>-1;\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\r\n    nameInclTypeParameters: string,\r\n    /** The respective class prototype. */\r\n    prototype: ClassPrototype,\r\n    /** Concrete type arguments, if any. */\r\n    typeArguments: Type[] | null = null,\r\n    /** Base class, if derived. */\r\n    base: Class | null = null,\r\n    _isInterface: bool = false // FIXME\r\n  ) {\r\n    super(\r\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\r\n      nameInclTypeParameters,\r\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\r\n      prototype.program,\r\n      prototype.parent,\r\n      prototype.declaration\r\n    );\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.typeArguments = typeArguments;\r\n    this.setType(this.program.options.usizeType.asClass(this));\r\n    this.base = base;\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      let inheritedTypeArguments = base.contextualTypeArguments;\r\n      if (inheritedTypeArguments) {\r\n        let contextualTypeArguments = this.contextualTypeArguments;\r\n        for (let [baseName, baseType] of inheritedTypeArguments) {\r\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\r\n          contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply pre-checked instance-specific contextual type arguments\r\n    var typeParameters = prototype.typeParameterNodes;\r\n    if (typeArguments) {\r\n      let numTypeArguments = typeArguments.length;\r\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n      if (numTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let i = 0; i < numTypeArguments; ++i) {\r\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n        }\r\n      }\r\n    } else if (typeParameters && typeParameters.length) {\r\n      throw new Error(\"type argument count mismatch\");\r\n    }\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do if (current == target) return true;\r\n    while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  /** Looks up the operator overload of the specified kind. */\r\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\r\n    if (unchecked) {\r\n      switch (kind) {\r\n        case OperatorKind.INDEXED_GET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        case OperatorKind.INDEXED_SET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    var instance: Class | null = this;\r\n    do {\r\n      let overloads = instance.overloads;\r\n      if (overloads) {\r\n        let overload = overloads.get(kind);\r\n        if (overload) return overload;\r\n      }\r\n    } while (instance = instance.base);\r\n    return null;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n\r\n  /** Calculates the memory offset of the specified field. */\r\n  offsetof(fieldName: string): u32 {\r\n    var members = assert(this.members);\r\n    assert(members.has(fieldName));\r\n    var field = <Element>members.get(fieldName);\r\n    assert(field.kind == ElementKind.FIELD);\r\n    return (<Field>field).memoryOffset;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype { // FIXME\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    name: string,\r\n    parent: Element,\r\n    declaration: InterfaceDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      decoratorFlags,\r\n      true\r\n    );\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class { // FIXME\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    nameInclTypeParameters: string,\r\n    prototype: InterfacePrototype,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(\r\n      nameInclTypeParameters,\r\n      prototype,\r\n      typeArguments,\r\n      base,\r\n      true\r\n    );\r\n  }\r\n}\r\n\r\n/** Registers a concrete element with a program. */\r\nfunction registerConcreteElement(program: Program, element: Element): void {\r\n  assert(!program.instancesByName.has(element.internalName));\r\n  program.instancesByName.set(element.internalName, element);\r\n}\r\n\r\n/** Attempts to merge two elements. Returns the merged element on success. */\r\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\r\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\r\n  // suggesting to just merge what seems to be possible for now and revisit later.\r\n  assert(older.program === newer.program);\r\n  assert(!newer.members);\r\n  var merged: DeclaredElement | null = null;\r\n  switch (older.kind) {\r\n    case ElementKind.FUNCTION_PROTOTYPE: {\r\n      switch (newer.kind) {\r\n        case ElementKind.NAMESPACE: {\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n          break;\r\n        }\r\n        case ElementKind.TYPEDEFINITION: {\r\n          if (!older.shadowType) {\r\n            older.shadowType = <TypeDefinition>newer;\r\n            copyMembers(newer, older);\r\n            merged = <DeclaredElement>older;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.CLASS_PROTOTYPE:\r\n    case ElementKind.ENUM: {\r\n      if (newer.kind == ElementKind.NAMESPACE) {\r\n        copyMembers(newer, older);\r\n        merged = <DeclaredElement>older;\r\n        break;\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.NAMESPACE: {\r\n      switch (newer.kind) {\r\n        case ElementKind.ENUM:\r\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\r\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\r\n          copyMembers(older, newer);\r\n          merged = <DeclaredElement>newer;\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n          break;\r\n        }\r\n        case ElementKind.TYPEDEFINITION: {\r\n          if (!older.shadowType) {\r\n            older.shadowType = <TypeDefinition>newer;\r\n            copyMembers(newer, older);\r\n            merged = <DeclaredElement>older;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.GLOBAL: {\r\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\r\n        if (!older.shadowType) {\r\n          older.shadowType = <TypeDefinition>newer;\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.TYPEDEFINITION: {\r\n      switch (newer.kind) {\r\n        case ElementKind.GLOBAL:\r\n        case ElementKind.FUNCTION_PROTOTYPE:\r\n        case ElementKind.NAMESPACE: {\r\n          if (!newer.shadowType) {\r\n            newer.shadowType = <TypeDefinition>older;\r\n            copyMembers(older, newer);\r\n            merged = <DeclaredElement>newer;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  if (merged) {\r\n    if (older.is(CommonFlags.EXPORT) != newer.is(CommonFlags.EXPORT)) {\r\n      older.program.error(\r\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n        merged.identifierNode.range, merged.identifierNode.text\r\n      );\r\n    }\r\n  }\r\n  return merged;\r\n}\r\n\r\n/** Copies the members of `src` to `dest`. */\r\nfunction copyMembers(src: Element, dest: Element): void {\r\n  var srcMembers = src.members;\r\n  if (srcMembers) {\r\n    let destMembers = dest.members;\r\n    if (!destMembers) dest.members = destMembers = new Map();\r\n    for (let [memberName, member] of srcMembers) {\r\n      destMembers.set(memberName, member);\r\n    }\r\n  }\r\n}\r\n\r\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\r\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\r\n  switch (parent.kind) {\r\n    case ElementKind.FILE: {\r\n      if (asGlobal) return name;\r\n      return parent.internalName + PATH_DELIMITER + name;\r\n    }\r\n    case ElementKind.FUNCTION: {\r\n      if (asGlobal) return name;\r\n      assert(!isInstance);\r\n      return parent.internalName + INNER_DELIMITER + name;\r\n    }\r\n    default: {\r\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\r\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport {\r\n  Target\r\n} from \"./compiler\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type RelooperRef = usize;\r\nexport type RelooperBlockRef = usize;\r\nexport type Index = u32;\r\n\r\nexport enum NativeType {\r\n  None = _BinaryenTypeNone(),\r\n  I32  = _BinaryenTypeInt32(),\r\n  I64  = _BinaryenTypeInt64(),\r\n  F32  = _BinaryenTypeFloat32(),\r\n  F64  = _BinaryenTypeFloat64(),\r\n  V128 = _BinaryenTypeVec128(),\r\n  Unreachable = _BinaryenTypeUnreachable(),\r\n  Auto = _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  GetLocal = _BinaryenGetLocalId(),\r\n  SetLocal = _BinaryenSetLocalId(),\r\n  GetGlobal = _BinaryenGetGlobalId(),\r\n  SetGlobal = _BinaryenSetGlobalId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicWake = _BinaryenAtomicWakeId(),\r\n  SIMDExtract = _BinaryenSIMDExtractId(),\r\n  SIMDReplace = _BinaryenSIMDReplaceId(),\r\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\r\n  SIMDBitselect = _BinaryenSIMDBitselectId(),\r\n  SIMDShift = _BinaryenSIMDShiftId(),\r\n  MemoryInit = _BinaryenMemoryInitId(),\r\n  DataDrop = _BinaryenDataDropId(),\r\n  MemoryCopy = _BinaryenMemoryCopyId(),\r\n  MemoryFill = _BinaryenMemoryFillId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\r\n\r\n  // see: https://github.com/WebAssembly/sign-extension-ops\r\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\r\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\r\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\r\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\r\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n\r\n  // see: https://github.com/WebAssembly/simd\r\n  SplatVecI8x16 = _BinaryenSplatVecI8x16(),\r\n  SplatVecI16x8 = _BinaryenSplatVecI16x8(),\r\n  SplatVecI32x4 = _BinaryenSplatVecI32x4(),\r\n  SplatVecI64x2 = _BinaryenSplatVecI64x2(),\r\n  SplatVecF32x4 = _BinaryenSplatVecF32x4(),\r\n  SplatVecF64x2 = _BinaryenSplatVecF64x2(),\r\n  NotVec128 = _BinaryenNotVec128(),\r\n  NegVecI8x16 = _BinaryenNegVecI8x16(),\r\n  AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\r\n  AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\r\n  NegVecI16x8 = _BinaryenNegVecI16x8(),\r\n  AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\r\n  AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\r\n  NegVecI32x4 = _BinaryenNegVecI32x4(),\r\n  AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\r\n  AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\r\n  NegVecI64x2 = _BinaryenNegVecI64x2(),\r\n  AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\r\n  AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\r\n  AbsVecF32x4 = _BinaryenAbsVecF32x4(),\r\n  NegVecF32x4 = _BinaryenNegVecF32x4(),\r\n  SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\r\n  AbsVecF64x2 = _BinaryenAbsVecF64x2(),\r\n  NegVecF64x2 = _BinaryenNegVecF64x2(),\r\n  SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\r\n  TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\r\n  TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\r\n  TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\r\n  TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\r\n  ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\r\n  ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\r\n  ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\r\n  ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2()\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64(),\r\n\r\n  // see: https://github.com/WebAssembly/simd\r\n  EqVecI8x16 = _BinaryenEqVecI8x16(),\r\n  NeVecI8x16 = _BinaryenNeVecI8x16(),\r\n  LtSVecI8x16 = _BinaryenLtSVecI8x16(),\r\n  LtUVecI8x16 = _BinaryenLtUVecI8x16(),\r\n  LeSVecI8x16 = _BinaryenLeSVecI8x16(),\r\n  LeUVecI8x16 = _BinaryenLeUVecI8x16(),\r\n  GtSVecI8x16 = _BinaryenGtSVecI8x16(),\r\n  GtUVecI8x16 = _BinaryenGtUVecI8x16(),\r\n  GeSVecI8x16 = _BinaryenGeSVecI8x16(),\r\n  GeUVecI8x16 = _BinaryenGeUVecI8x16(),\r\n  EqVecI16x8 = _BinaryenEqVecI16x8(),\r\n  NeVecI16x8 = _BinaryenNeVecI16x8(),\r\n  LtSVecI16x8 = _BinaryenLtSVecI16x8(),\r\n  LtUVecI16x8 = _BinaryenLtUVecI16x8(),\r\n  LeSVecI16x8 = _BinaryenLeSVecI16x8(),\r\n  LeUVecI16x8 = _BinaryenLeUVecI16x8(),\r\n  GtSVecI16x8 = _BinaryenGtSVecI16x8(),\r\n  GtUVecI16x8 = _BinaryenGtUVecI16x8(),\r\n  GeSVecI16x8 = _BinaryenGeSVecI16x8(),\r\n  GeUVecI16x8 = _BinaryenGeUVecI16x8(),\r\n  EqVecI32x4 = _BinaryenEqVecI32x4(),\r\n  NeVecI32x4 = _BinaryenNeVecI32x4(),\r\n  LtSVecI32x4 = _BinaryenLtSVecI32x4(),\r\n  LtUVecI32x4 = _BinaryenLtUVecI32x4(),\r\n  LeSVecI32x4 = _BinaryenLeSVecI32x4(),\r\n  LeUVecI32x4 = _BinaryenLeUVecI32x4(),\r\n  GtSVecI32x4 = _BinaryenGtSVecI32x4(),\r\n  GtUVecI32x4 = _BinaryenGtUVecI32x4(),\r\n  GeSVecI32x4 = _BinaryenGeSVecI32x4(),\r\n  GeUVecI32x4 = _BinaryenGeUVecI32x4(),\r\n  EqVecF32x4 = _BinaryenEqVecF32x4(),\r\n  NeVecF32x4 = _BinaryenNeVecF32x4(),\r\n  LtVecF32x4 = _BinaryenLtVecF32x4(),\r\n  LeVecF32x4 = _BinaryenLeVecF32x4(),\r\n  GtVecF32x4 = _BinaryenGtVecF32x4(),\r\n  GeVecF32x4 = _BinaryenGeVecF32x4(),\r\n  EqVecF64x2 = _BinaryenEqVecF64x2(),\r\n  NeVecF64x2 = _BinaryenNeVecF64x2(),\r\n  LtVecF64x2 = _BinaryenLtVecF64x2(),\r\n  LeVecF64x2 = _BinaryenLeVecF64x2(),\r\n  GtVecF64x2 = _BinaryenGtVecF64x2(),\r\n  GeVecF64x2 = _BinaryenGeVecF64x2(),\r\n  AndVec128 = _BinaryenAndVec128(),\r\n  OrVec128 = _BinaryenOrVec128(),\r\n  XorVec128 = _BinaryenXorVec128(),\r\n  AddVecI8x16 = _BinaryenAddVecI8x16(),\r\n  AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\r\n  AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\r\n  SubVecI8x16 = _BinaryenSubVecI8x16(),\r\n  SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\r\n  SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\r\n  MulVecI8x16 = _BinaryenMulVecI8x16(),\r\n  AddVecI16x8 = _BinaryenAddVecI16x8(),\r\n  AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\r\n  AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\r\n  SubVecI16x8 = _BinaryenSubVecI16x8(),\r\n  SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\r\n  SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\r\n  MulVecI16x8 = _BinaryenMulVecI16x8(),\r\n  AddVecI32x4 = _BinaryenAddVecI32x4(),\r\n  SubVecI32x4 = _BinaryenSubVecI32x4(),\r\n  MulVecI32x4 = _BinaryenMulVecI32x4(),\r\n  AddVecI64x2 = _BinaryenAddVecI64x2(),\r\n  SubVecI64x2 = _BinaryenSubVecI64x2(),\r\n  AddVecF32x4 = _BinaryenAddVecF32x4(),\r\n  SubVecF32x4 = _BinaryenSubVecF32x4(),\r\n  MulVecF32x4 = _BinaryenMulVecF32x4(),\r\n  DivVecF32x4 = _BinaryenDivVecF32x4(),\r\n  MinVecF32x4 = _BinaryenMinVecF32x4(),\r\n  MaxVecF32x4 = _BinaryenMaxVecF32x4(),\r\n  AddVecF64x2 = _BinaryenAddVecF64x2(),\r\n  SubVecF64x2 = _BinaryenSubVecF64x2(),\r\n  MulVecF64x2 = _BinaryenMulVecF64x2(),\r\n  DivVecF64x2 = _BinaryenDivVecF64x2(),\r\n  MinVecF64x2 = _BinaryenMinVecF64x2(),\r\n  MaxVecF64x2 = _BinaryenMaxVecF64x2()\r\n}\r\n\r\nexport enum HostOp {\r\n  CurrentMemory = _BinaryenCurrentMemory(),\r\n  GrowMemory = _BinaryenGrowMemory(),\r\n\r\n  // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  // MoveMemory\r\n  // SetMemory\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport enum SIMDExtractOp {\r\n  ExtractLaneSVecI8x16 = _BinaryenExtractLaneSVecI8x16(),\r\n  ExtractLaneUVecI8x16 = _BinaryenExtractLaneUVecI8x16(),\r\n  ExtractLaneSVecI16x8 = _BinaryenExtractLaneSVecI16x8(),\r\n  ExtractLaneUVecI16x8 = _BinaryenExtractLaneUVecI16x8(),\r\n  ExtractLaneVecI32x4 = _BinaryenExtractLaneVecI32x4(),\r\n  ExtractLaneVecI64x2 = _BinaryenExtractLaneVecI64x2(),\r\n  ExtractLaneVecF32x4 = _BinaryenExtractLaneVecF32x4(),\r\n  ExtractLaneVecF64x2 = _BinaryenExtractLaneVecF64x2(),\r\n}\r\n\r\nexport enum SIMDReplaceOp {\r\n  ReplaceLaneVecI8x16 = _BinaryenReplaceLaneVecI8x16(),\r\n  ReplaceLaneVecI16x8 = _BinaryenReplaceLaneVecI16x8(),\r\n  ReplaceLaneVecI32x4 = _BinaryenReplaceLaneVecI32x4(),\r\n  ReplaceLaneVecI64x2 = _BinaryenReplaceLaneVecI64x2(),\r\n  ReplaceLaneVecF32x4 = _BinaryenReplaceLaneVecF32x4(),\r\n  ReplaceLaneVecF64x2 = _BinaryenReplaceLaneVecF64x2()\r\n}\r\n\r\nexport enum SIMDShiftOp { // FIXME: seems to be missing in binaryen-c.h\r\n  ShlVecI8x16,\r\n  ShrSVecI8x16,\r\n  ShrUVecI8x16,\r\n  ShlVecI16x8,\r\n  ShrSVecI16x8,\r\n  ShrUVecI16x8,\r\n  ShlVecI32x4,\r\n  ShrSVecI32x4,\r\n  ShrUVecI32x4,\r\n  ShlVecI64x2,\r\n  ShrSVecI64x2,\r\n  ShrUVecI64x2\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n\r\n  private lit: usize;\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\r\n      return module;\r\n    } finally {\r\n      memory.free(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunctionType(name: string): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveFunctionType(this.ref, cStr);\r\n  }\r\n\r\n  // constants\r\n\r\n  createI32(value: i32): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF32(value: f32): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF64(value: f64): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createV128(bytes: Uint8Array): ExpressionRef {\r\n    assert(bytes.length == 16);\r\n    var out = this.lit;\r\n    // FIXME: does this work or do we need to malloc?\r\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\r\n    _BinaryenLiteralVec128(out, out);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  createUnary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  createBinary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  createHost(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createGetLocal(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenGetLocal(this.ref, index, type);\r\n  }\r\n\r\n  createTeeLocal(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenTeeLocal(this.ref, index, value);\r\n  }\r\n\r\n  createGetGlobal(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenGetGlobal(this.ref, cStr, type);\r\n  }\r\n\r\n  createLoad(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0,\r\n    align: Index = bytes // naturally aligned by default\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\r\n  }\r\n\r\n  createStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0,\r\n    align: Index = bytes // naturally aligned by default\r\n  ): ExpressionRef {\r\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\r\n  }\r\n\r\n  createAtomicLoad(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  createAtomicStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicRMW(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicCmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  createAtomicWait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  createAtomicWake(\r\n    ptr: ExpressionRef,\r\n    wakeCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  createSetLocal(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSetLocal(this.ref, index, value);\r\n  }\r\n\r\n  createSetGlobal(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenSetGlobal(this.ref, cStr, value);\r\n  }\r\n\r\n  createBlock(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    var cArr = allocPtrArray(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createBreak(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    return _BinaryenBreak(this.ref, cStr, condition, value);\r\n  }\r\n\r\n  createDrop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  createLoop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    return _BinaryenLoop(this.ref, cStr, body);\r\n  }\r\n\r\n  createIf(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createNop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  createReturn(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  createSelect(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createSwitch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = this.allocStringCached(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = this.allocStringCached(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createCall(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createCallIndirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(typeName);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createUnreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // bulk memory\r\n\r\n  createMemoryCopy(\r\n    dest: ExpressionRef,\r\n    source: ExpressionRef,\r\n    size: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\r\n  }\r\n\r\n  createMemoryFill(\r\n    dest: ExpressionRef,\r\n    value: ExpressionRef,\r\n    size: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\r\n  }\r\n\r\n  // simd\r\n\r\n  createSIMDExtract(\r\n    op: SIMDExtractOp,\r\n    vec: ExpressionRef,\r\n    idx: u8\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\r\n  }\r\n\r\n  createSIMDReplace(\r\n    op: SIMDReplaceOp,\r\n    vec: ExpressionRef,\r\n    idx: u8,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\r\n  }\r\n\r\n  createSIMDShuffle(\r\n    vec1: ExpressionRef,\r\n    vec2: ExpressionRef,\r\n    mask: Uint8Array\r\n  ): ExpressionRef {\r\n    assert(mask.length == 16);\r\n    var cArr = allocU8Array(mask);\r\n    try {\r\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createSIMDBitselect(\r\n    vec1: ExpressionRef,\r\n    vec2: ExpressionRef,\r\n    cond: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDBitselect(this.ref, vec1, vec2, cond);\r\n  }\r\n\r\n  createSIMDShift(\r\n    op: SIMDShiftOp,\r\n    vec: ExpressionRef,\r\n    shift: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n  }\r\n\r\n  removeGlobal(\r\n    name: string\r\n  ): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveGlobal(this.ref, cStr);\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveFunction(this.ref, cStr);\r\n  }\r\n\r\n  private hasTemporaryFunction: bool = false;\r\n\r\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\r\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\r\n    var tempName = this.allocStringCached(\"\");\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\r\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeTemporaryFunction(): void {\r\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\r\n    var tempName = this.allocStringCached(\"\");\r\n    _BinaryenRemoveFunction(this.ref, tempName);\r\n    _BinaryenRemoveFunctionType(this.ref, tempName);\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = this.allocStringCached(externalName);\r\n    _BinaryenRemoveExport(this.ref, cStr);\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    shared: bool = false,\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n  }\r\n\r\n  /** Unlimited memory constant. */\r\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null,\r\n    shared: bool = false\r\n  ): void {\r\n    var cStr = this.allocStringCached(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      offs[i] = target == Target.WASM64\r\n        ? this.createI64(i64_low(offset), i64_high(offset))\r\n        : this.createI32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocI32Array(offs);\r\n    var cArr3 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k, shared);\r\n    } finally {\r\n      memory.free(cArr3);\r\n      memory.free(cArr2);\r\n      memory.free(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(\r\n    initial: Index,\r\n    maximum: Index,\r\n    funcs: string[]\r\n  ): void {\r\n    var numNames = funcs.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = this.allocStringCached(funcs[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  getOptimizeLevel(): i32 {\r\n    return _BinaryenGetOptimizeLevel();\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  getShrinkLevel(): i32 {\r\n    return _BinaryenGetShrinkLevel();\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      memory.free(cArr);\r\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\r\n    }\r\n  }\r\n\r\n  private cachedPrecomputeNames: usize = 0;\r\n\r\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\r\n    // remember the previous optimize levels and set to max instead, to be sure\r\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\r\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\r\n    var previousDebugInfo = _BinaryenGetDebugInfo();\r\n    _BinaryenSetOptimizeLevel(4);\r\n    _BinaryenSetShrinkLevel(0);\r\n    _BinaryenSetDebugInfo(false);\r\n\r\n    // wrap the expression in a temp. function and run the precompute pass on it\r\n    var type = _BinaryenExpressionGetType(expr);\r\n    var func = this.addTemporaryFunction(type, null, expr);\r\n    var names = this.cachedPrecomputeNames;\r\n    if (!names) {\r\n      this.cachedPrecomputeNames = names = allocI32Array([ this.allocStringCached(\"precompute\") ]);\r\n    }\r\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\r\n    expr = _BinaryenFunctionGetBody(func);\r\n    this.removeTemporaryFunction();\r\n\r\n    // reset optimize levels to previous\r\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\r\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\r\n    _BinaryenSetDebugInfo(previousDebugInfo);\r\n    return expr;\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.lit; // safe to reuse as long as..\r\n    assert(_BinaryenSizeofLiteral() >= 12);\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) memory.free(cStr);\r\n      if (binaryPtr) memory.free(binaryPtr);\r\n      if (sourceMapPtr) memory.free(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  private cachedStrings: Map<string,usize> = new Map();\r\n\r\n  private allocStringCached(str: string | null): usize {\r\n    if (str == null) return 0;\r\n    var cachedStrings = this.cachedStrings;\r\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\r\n    var ptr = allocString(str);\r\n    cachedStrings.set(str, ptr);\r\n    return ptr;\r\n  }\r\n\r\n  dispose(): void {\r\n    assert(this.ref);\r\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\r\n    this.cachedStrings = new Map();\r\n    memory.free(this.lit);\r\n    memory.free(this.cachedPrecomputeNames);\r\n    this.cachedPrecomputeNames = 0;\r\n    _BinaryenModuleDispose(this.ref);\r\n    this.ref = 0;\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(\r\n    expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n        switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.createI32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.createI64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.createF32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.createF64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        return _BinaryenGetLocal(this.ref,\r\n          _BinaryenGetLocalGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GetGlobal: {\r\n        let globalName = _BinaryenGetGlobalGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return (\r\n          _BinaryenLoadIsAtomic(expr)\r\n            ? _BinaryenAtomicLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n            : _BinaryenLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenLoadGetAlign(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n        );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\n// expressions\r\n\r\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\r\n  return _BinaryenExpressionGetId(expr);\r\n}\r\n\r\nexport function getExpressionType(expr: ExpressionRef): NativeType {\r\n  return _BinaryenExpressionGetType(expr);\r\n}\r\n\r\nexport function getConstValueI32(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI32(expr);\r\n}\r\n\r\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64Low(expr);\r\n}\r\n\r\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64High(expr);\r\n}\r\n\r\nexport function getConstValueF32(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF32(expr);\r\n}\r\n\r\nexport function getConstValueF64(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF64(expr);\r\n}\r\n\r\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenGetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenSetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSetLocalGetValue(expr);\r\n}\r\n\r\nexport function isTeeLocal(expr: ExpressionRef): bool {\r\n  return _BinaryenSetLocalIsTee(expr);\r\n}\r\n\r\nexport function getGetGlobalName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenGetGlobalGetName(expr));\r\n}\r\n\r\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\r\n  return _BinaryenBinaryGetOp(expr);\r\n}\r\n\r\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetLeft(expr);\r\n}\r\n\r\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetRight(expr);\r\n}\r\n\r\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\r\n  return _BinaryenUnaryGetOp(expr);\r\n}\r\n\r\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenUnaryGetValue(expr);\r\n}\r\n\r\nexport function getLoadBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetBytes(expr);\r\n}\r\n\r\nexport function getLoadOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetOffset(expr);\r\n}\r\n\r\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoadGetPtr(expr);\r\n}\r\n\r\nexport function isLoadSigned(expr: ExpressionRef): bool {\r\n  return _BinaryenLoadIsSigned(expr);\r\n}\r\n\r\nexport function getStoreBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetBytes(expr);\r\n}\r\n\r\nexport function getStoreOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetOffset(expr);\r\n}\r\n\r\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetPtr(expr);\r\n}\r\n\r\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetValue(expr);\r\n}\r\n\r\nexport function getBlockName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBlockGetName(expr));\r\n}\r\n\r\nexport function getBlockChildCount(expr: ExpressionRef): Index {\r\n  return _BinaryenBlockGetNumChildren(expr);\r\n}\r\n\r\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenBlockGetChild(expr, index);\r\n}\r\n\r\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetCondition(expr);\r\n}\r\n\r\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfTrue(expr);\r\n}\r\n\r\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfFalse(expr);\r\n}\r\n\r\nexport function getLoopName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenLoopGetName(expr));\r\n}\r\n\r\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoopGetBody(expr);\r\n}\r\n\r\nexport function getBreakName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBreakGetName(expr));\r\n}\r\n\r\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBreakGetCondition(expr);\r\n}\r\n\r\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfTrue(expr);\r\n}\r\n\r\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfFalse(expr);\r\n}\r\n\r\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetCondition(expr);\r\n}\r\n\r\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenDropGetValue(expr);\r\n}\r\n\r\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenReturnGetValue(expr);\r\n}\r\n\r\nexport function getCallTarget(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenCallGetTarget(expr));\r\n}\r\n\r\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenHostGetOp(expr);\r\n}\r\n\r\nexport function getHostOperandCount(expr: ExpressionRef): Index {\r\n  return _BinaryenHostGetNumOperands(expr);\r\n}\r\n\r\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenHostGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenHostGetNameOperand(expr));\r\n}\r\n\r\n// functions\r\n\r\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\r\n  return _BinaryenFunctionGetBody(func);\r\n}\r\n\r\nexport function getFunctionName(func: FunctionRef): string | null {\r\n  return readString(_BinaryenFunctionGetName(func));\r\n}\r\n\r\nexport function getFunctionParamCount(func: FunctionRef): Index {\r\n  return _BinaryenFunctionGetNumParams(func);\r\n}\r\n\r\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\r\n  return _BinaryenFunctionGetParam(func, index);\r\n}\r\n\r\nexport function getFunctionResultType(func: FunctionRef): NativeType {\r\n  return _BinaryenFunctionGetResult(func);\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate(module.ref);\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    condition: ExpressionRef = 0,\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    indexes: i32[],\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\r\n  }\r\n}\r\n\r\n// export function hasSideEffects(expr: ExpressionRef): bool {\r\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\r\n//     case ExpressionId.GetLocal:\r\n//     case ExpressionId.GetGlobal:\r\n//     case ExpressionId.Const:\r\n//     case ExpressionId.Nop:\r\n//     case ExpressionId.Unreachable: {\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.Block: {\r\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\r\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\r\n//       }\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.If: {\r\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\r\n//     }\r\n//     case ExpressionId.Unary: {\r\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Binary: {\r\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\r\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\r\n//     }\r\n//     case ExpressionId.Drop: {\r\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Select: {\r\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\r\n//     }\r\n//   }\r\n//   return true;\r\n// }\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = memory.allocate(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = memory.allocate(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocPtrArray(ptrs: usize[] | null): usize {\r\n  return allocI32Array(ptrs); // TODO: WASM64 one day\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\r\n  // the following is based on Emscripten's stringToUTF8Array\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    arr.push(cp);\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n\r\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\r\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\r\n  // not applicable if pushing a value to the stack\r\n  switch (_BinaryenExpressionGetType(expr)) {\r\n    case NativeType.I32:\r\n    case NativeType.I64:\r\n    case NativeType.F32:\r\n    case NativeType.F64: return false;\r\n  }\r\n  switch (_BinaryenExpressionGetId(expr)) {\r\n    case ExpressionId.Unreachable:\r\n    case ExpressionId.Return: return false;\r\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\r\n    case ExpressionId.Block: {\r\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\r\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\r\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  CommonSymbols,\r\n  PATH_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath,\r\n  CharCode\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  TYPE,\r\n  TYPENAME,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n  SIGNATURE,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  CLASS,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  INSTANCEOF,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INDEXSIGNATUREDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Checks if a node represents a constant value. */\r\nexport function nodeIsConstantValue(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.LITERAL:\r\n    case NodeKind.NULL:\r\n    case NodeKind.TRUE:\r\n    case NodeKind.FALSE: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable. */\r\nexport function nodeIsCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.ASSERTION: // if kind=NONNULL\r\n    case NodeKind.CALL:\r\n    case NodeKind.ELEMENTACCESS:\r\n    case NodeKind.PARENTHESIZED:\r\n    case NodeKind.PROPERTYACCESS:\r\n    case NodeKind.SUPER: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable with generic arguments. */\r\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.PROPERTYACCESS: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n\r\n  // types\r\n\r\n  static createTypeName(\r\n    name: IdentifierExpression,\r\n    range: Range\r\n  ): TypeName {\r\n    var typeName = new TypeName();\r\n    typeName.range = range;\r\n    typeName.identifier = name;\r\n    typeName.next = null;\r\n    return typeName;\r\n  }\r\n\r\n  static createSimpleTypeName(\r\n    name: string,\r\n    range: Range\r\n  ): TypeName {\r\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\r\n  }\r\n\r\n  static createType(\r\n    name: TypeName,\r\n    typeArguments: CommonTypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): TypeNode {\r\n    var type = new TypeNode();\r\n    type.range = range;\r\n    type.name = name;\r\n    type.typeArguments = typeArguments;\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): TypeNode {\r\n    return Node.createType(\r\n      Node.createSimpleTypeName(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    defaultType: TypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name;\r\n    elem.extendsType = extendsType;\r\n    elem.defaultType = defaultType;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name;\r\n    elem.type = type;\r\n    elem.initializer = initializer;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createSignature(\r\n    parameters: ParameterNode[],\r\n    returnType: CommonTypeNode,\r\n    explicitThisType: TypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): SignatureNode {\r\n    var sig = new SignatureNode();\r\n    sig.range = range;\r\n    sig.parameters = parameters;\r\n    sig.returnType = returnType;\r\n    sig.explicitThisType = explicitThisType;\r\n    sig.isNullable = isNullable;\r\n    return sig;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    name: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = name;\r\n    stmt.arguments = args;\r\n    stmt.decoratorKind = decoratorNameToKind(name);\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range,\r\n    isQuoted: bool = false\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name; // TODO: extract from range\r\n    expr.symbol = name; // TODO: Symbol.for(name)\r\n    expr.isQuoted = isQuoted;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements;\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: CommonTypeNode | null,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression;\r\n    expr.toType = toType;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left;\r\n    expr.right = right;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.typeArguments = typeArgs;\r\n    expr.arguments = args;\r\n    return expr;\r\n  }\r\n\r\n  static createClassExpression(\r\n    declaration: ClassDeclaration\r\n  ): ClassExpression {\r\n    var expr = new ClassExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions;\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.elementExpression = element;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createInstanceOfExpression(\r\n    expression: Expression,\r\n    isType: CommonTypeNode,\r\n    range: Range\r\n  ): InstanceOfExpression {\r\n    var expr = new InstanceOfExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.isType = isType;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.typeArguments = typeArgs;\r\n    expr.arguments = args;\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createObjectLiteralExpression(\r\n    names: IdentifierExpression[],\r\n    values: Expression[],\r\n    range: Range\r\n  ): ObjectLiteralExpression {\r\n    var expr = new ObjectLiteralExpression();\r\n    expr.range = range;\r\n    expr.names = names;\r\n    expr.values = values;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.property = property;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition;\r\n    expr.ifThen = ifThen;\r\n    expr.ifElse = ifElse;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements;\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    extendsType: TypeNode | null, // can't be a function\r\n    implementsTypes: TypeNode[] | null, // can't be functions\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.extendsType = extendsType;\r\n    stmt.implementsTypes = implementsTypes;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement;\r\n    stmt.condition = condition;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.values = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[] | null,\r\n    path: StringLiteralExpression | null,\r\n    isDeclare: bool,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.members = members;\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    stmt.isDeclare = isDeclare;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name;\r\n    stmt.externalName = externalName;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.localName = name;\r\n    if (!externalName) externalName = name;\r\n    elem.exportedName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.ifTrue = ifTrue;\r\n    stmt.ifFalse = ifFalse;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls;\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    stmt.normalizedPath = resolvePath(\r\n      normalizePath(path.value),\r\n      range.source.normalizedPath\r\n    );\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    foreignName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.foreignName = foreignName;\r\n    if (!name) name = foreignName;\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    extendsType: TypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.extendsType = extendsType;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.type = type;\r\n    stmt.initializer = initializer;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer;\r\n    stmt.condition = condition;\r\n    stmt.incrementor = incrementor;\r\n    stmt.statement = statement;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    arrowKind: ArrowKind,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.signature = signature;\r\n    stmt.body = body;\r\n    stmt.decorators = decorators;\r\n    stmt.arrowKind = arrowKind;\r\n    return stmt;\r\n  }\r\n\r\n  static createIndexSignatureDeclaration(\r\n    keyType: TypeNode,\r\n    valueType: CommonTypeNode,\r\n    range: Range\r\n  ): IndexSignatureDeclaration {\r\n    var elem = new IndexSignatureDeclaration();\r\n    elem.range = range;\r\n    elem.keyType = keyType;\r\n    elem.valueType = valueType;\r\n    return elem;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.signature = signature;\r\n    stmt.body = body;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.cases = cases;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label;\r\n    elem.statements = statements;\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements;\r\n    stmt.catchVariable = catchVariable;\r\n    stmt.catchStatements = catchStatements;\r\n    stmt.finallyStatements = finallyStatements;\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: CommonTypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.type = alias;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = declarations;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name;\r\n    elem.type = type;\r\n    elem.initializer = initializer;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.statement = statement;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class CommonTypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type name. */\r\nexport class TypeName extends Node {\r\n  kind = NodeKind.TYPENAME;\r\n\r\n  /** Identifier of this part. */\r\n  identifier: IdentifierExpression;\r\n  /** Next part of the type name or `null` if this is the last part. */\r\n  next: TypeName | null;\r\n}\r\n\r\n/** Represents a type annotation. */\r\nexport class TypeNode extends CommonTypeNode {\r\n  kind = NodeKind.TYPE;\r\n\r\n  /** Type name. */\r\n  name: TypeName;\r\n  /** Type argument references. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Default type if omitted, if any. */\r\n  defaultType: TypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: CommonTypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n/** Represents a function signature. */\r\nexport class SignatureNode extends CommonTypeNode {\r\n  kind = NodeKind.SIGNATURE;\r\n\r\n  /** Accepted parameters. */\r\n  parameters: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: CommonTypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: TypeNode | null; // can't be a function\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  OPERATOR_BINARY,\r\n  OPERATOR_PREFIX,\r\n  OPERATOR_POSTFIX,\r\n  UNMANAGED,\r\n  SEALED,\r\n  INLINE,\r\n  EXTERNAL,\r\n  BUILTIN,\r\n  LAZY,\r\n  START\r\n}\r\n\r\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\r\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\r\n  // @global, @inline, @operator, @sealed, @unmanaged\r\n  if (name.kind == NodeKind.IDENTIFIER) {\r\n    let nameStr = (<IdentifierExpression>name).text;\r\n    assert(nameStr.length);\r\n    switch (nameStr.charCodeAt(0)) {\r\n      case CharCode.b: {\r\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\r\n        break;\r\n      }\r\n      case CharCode.e: {\r\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\r\n        break;\r\n      }\r\n      case CharCode.g: {\r\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\r\n        break;\r\n      }\r\n      case CharCode.i: {\r\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\r\n        break;\r\n      }\r\n      case CharCode.l: {\r\n        if (nameStr == \"lazy\") return DecoratorKind.LAZY;\r\n        break;\r\n      }\r\n      case CharCode.o: {\r\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\r\n        break;\r\n      }\r\n      case CharCode.s: {\r\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\r\n        if (nameStr == \"start\") return DecoratorKind.START;\r\n        break;\r\n      }\r\n      case CharCode.u: {\r\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\r\n        break;\r\n      }\r\n    }\r\n  } else if (\r\n    name.kind == NodeKind.PROPERTYACCESS &&\r\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\r\n  ) {\r\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\r\n    assert(nameStr.length);\r\n    let propStr = (<PropertyAccessExpression>name).property.text;\r\n    assert(propStr.length);\r\n    // @operator.binary, @operator.prefix, @operator.postfix\r\n    if (nameStr == \"operator\") {\r\n      switch (propStr.charCodeAt(0)) {\r\n        case CharCode.b: {\r\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\r\n          break;\r\n        }\r\n        case CharCode.p: {\r\n          switch (propStr) {\r\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\r\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return DecoratorKind.CUSTOM;\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n  /** Symbol. */\r\n  symbol: string; // TODO: symbol\r\n  /** Whether quoted or not. */\r\n  isQuoted: bool;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS,\r\n  NONNULL\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: CommonTypeNode | null;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n}\r\n\r\n/** Represents a class expression using the 'class' keyword. */\r\nexport class ClassExpression extends Expression {\r\n  kind = NodeKind.CLASS;\r\n\r\n  /** Inline class declaration. */\r\n  declaration: ClassDeclaration;\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n  symbol = CommonSymbols.constructor;\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an `instanceof` expression. */\r\nexport class InstanceOfExpression extends Expression {\r\n  kind = NodeKind.INSTANCEOF;\r\n\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Type to test for. */\r\n  isType: CommonTypeNode;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n  symbol = CommonSymbols.null_;\r\n}\r\n\r\n/** Represents an object literal expression. */\r\nexport class ObjectLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.OBJECT;\r\n\r\n  /** Field names. */\r\n  names: IdentifierExpression[];\r\n  /** Field values. */\r\n  values: Expression[];\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n  symbol = CommonSymbols.super_;\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n  symbol = CommonSymbols.this_;\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n  symbol = CommonSymbols.true_;\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n  symbol = CommonSymbols.false_;\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Simple path (last part without extension). */\r\n  simplePath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n  /** Re-exported sources. */\r\n  exportPaths: Set<string> | null = null;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    var internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.internalPath = internalPath;\r\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\r\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n/** Represents an index signature declaration. */\r\nexport class IndexSignatureDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\r\n\r\n  /** Key type. */\r\n  keyType: TypeNode;\r\n  /** Value type. */\r\n  valueType: CommonTypeNode;\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: CommonTypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Base class type being extended, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Interface types being implemented, if any. */\r\n  implementsTypes: TypeNode[] | null; // can't be functions\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Local identifier. */\r\n  localName: IdentifierExpression;\r\n  /** Exported identifier. */\r\n  exportedName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members if a set of named exports, or `null` if a file export. */\r\n  members: ExportMember[] | null;\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n  /** Whether this is a declared export. */\r\n  isDeclare: bool;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Indicates the kind of an array function. */\r\nexport const enum ArrowKind {\r\n  /** Not an arrow function. */\r\n  NONE,\r\n  /** Parenthesized parameter list. */\r\n  ARROW_PARENTHESIZED,\r\n  /** Single parameter without parenthesis. */\r\n  ARROW_SINGLE\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: SignatureNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n  /** Arrow function kind, if applicable. */\r\n  arrowKind: ArrowKind;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n\r\n  /** Clones this function declaration. */\r\n  clone(): FunctionDeclaration {\r\n    return Node.createFunctionDeclaration(\r\n      this.name,\r\n      this.typeParameters,\r\n      this.signature,\r\n      this.body,\r\n      this.decorators,\r\n      this.flags,\r\n      this.arrowKind,\r\n      this.range\r\n    );\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  foreignName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Finds the first decorator matching the specified kind. */\r\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      if (decorator.decoratorKind == kind) return decorator;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n/** Tests if the specified type node represents an omitted type. */\r\nexport function isTypeOmitted(type: CommonTypeNode): bool {\r\n  if (type.kind == NodeKind.TYPE) {\r\n    let name = (<TypeNode>type).name;\r\n    return !(name.next || name.identifier.text.length);\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget,\r\n  Program,\r\n  DecoratorFlags\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // vectors\r\n\r\n  /** A 128-bit vector. */\r\n  V128,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a pointer type. */\r\n  POINTER = 1 << 4,\r\n  /** Is smaller than 32-bits. */\r\n  SHORT = 1 << 5,\r\n  /** Is larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9,\r\n  /** Is a vector type. */\r\n  VECTOR = 1 << 10\r\n}\r\n\r\nconst v128_zero = new Uint8Array(16);\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying signature reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n  /** Cached nullable type, if non-nullable. */\r\n  private cachedNullableType: Type | null = null;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Returns the closest int type representing this type. */\r\n  get intType(): Type {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return Type.i8;\r\n      case TypeKind.I16: return Type.i16;\r\n      case TypeKind.F32:\r\n      case TypeKind.I32: return Type.i32;\r\n      case TypeKind.F64:\r\n      case TypeKind.I64: return Type.i64;\r\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\r\n      case TypeKind.U8: return Type.u8;\r\n      case TypeKind.U16: return Type.u16;\r\n      case TypeKind.U32: return Type.u32;\r\n      case TypeKind.U64: return Type.u64;\r\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\r\n      case TypeKind.BOOL:\r\n      default: return Type.i32;\r\n    }\r\n  }\r\n\r\n  /** Tests if this is a managed type that needs GC hooks. */\r\n  isManaged(program: Program): bool {\r\n    if (program.hasGC) {\r\n      let classReference = this.classReference;\r\n      return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\r\n    return ~0 >>> (targetType.size - size);\r\n  }\r\n\r\n  /** Tests if this type has (all of) the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.cachedNullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.cachedNullableType.nonNullableType = this;\r\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\r\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.cachedNullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\r\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\r\n          if (currentClass = this.classReference) {\r\n            if (targetClass = target.classReference) {\r\n              return currentClass.isAssignableTo(targetClass);\r\n            }\r\n          } else if (currentFunction = this.signatureReference) {\r\n            if (targetFunction = target.signatureReference) {\r\n              return currentFunction.isAssignableTo(targetFunction);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (\r\n            !signednessIsRelevant ||\r\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\r\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\r\n          ) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      } else if (this.is(TypeFlags.VECTOR)) {\r\n        if (target.is(TypeFlags.VECTOR)) {\r\n          return this.size == target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\r\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\r\n    else if (target.is(TypeFlags.REFERENCE)) return false;\r\n    if (this.is(TypeFlags.INTEGER)) {\r\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\r\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\r\n      );\r\n    }\r\n    return this.kind == target.kind;\r\n  }\r\n\r\n  /** Determines the common denominator type of two types, if there is any. */\r\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\r\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to its TypeScript representation. */\r\n  toString(kindOnly: bool = false): string {\r\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\r\n      let classReference = this.classReference;\r\n      if (classReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? classReference.name + \" | null\"\r\n          : classReference.name;\r\n      }\r\n      let signatureReference = this.signatureReference;\r\n      if (signatureReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\r\n          : signatureReference.toString(true);\r\n      }\r\n      assert(false);\r\n    }\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: return \"usize\";\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.V128: return \"v128\";\r\n      default: assert(false);\r\n      case TypeKind.VOID: return \"void\";\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.V128: return NativeType.V128;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(0);\r\n      case TypeKind.F32: return module.createF32(0);\r\n      case TypeKind.F64: return module.createF64(0);\r\n      case TypeKind.V128: return module.createV128(v128_zero);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.V128:\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(1);\r\n      case TypeKind.F32: return module.createF32(1);\r\n      case TypeKind.F64: return module.createF64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.V128:\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(-1, -1);\r\n      case TypeKind.F32: return module.createF32(-1);\r\n      case TypeKind.F64: return module.createF64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      default: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"I\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"F\";\r\n      case TypeKind.V128: return \"v\";\r\n      case TypeKind.VOID: return \"_\";\r\n    }\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 128-bit vector. */\r\n  static readonly v128: Type = new Type(TypeKind.V128,\r\n    TypeFlags.VECTOR   |\r\n    TypeFlags.VALUE, 128\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\r\n  return sb.join(\",\");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n  }\r\n\r\n  asFunctionTarget(program: Program): FunctionTarget {\r\n    var target = this.cachedFunctionTarget;\r\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\r\n    else assert(target.program == program);\r\n    return target;\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getDefaultParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) return false; // TODO\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) return false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = target.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts a signature to a function type string. */\r\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\r\n    var sb = [];\r\n    if (thisType) sb.push(thisType.toSignatureString());\r\n    if (parameterTypes) {\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    sb.push(returnType.toSignatureString());\r\n    return sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(includeThis: bool = false): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      if (includeThis) {\r\n        sb.push(\"this: \");\r\n        sb.push(thisType.toString());\r\n        index = 1;\r\n      }\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) sb.push((<string[]>names)[i]);\r\n        else sb.push(getDefaultParameterName(i));\r\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\r\n        else sb.push(\": \");\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached default parameter names used where names are unknown.\r\nvar cachedDefaultParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached default parameter name for the specified index. */\r\nexport function getDefaultParameterName(index: i32): string {\r\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\r\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\r\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedDefaultParameterNames[index - 1];\r\n}\r\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport enum IdentifierHandling {\r\n  DEFAULT,\r\n  PREFER,\r\n  ALWAYS\r\n}\r\n\r\nexport function tokenFromKeyword(text: string): Token {\r\n  assert(text.length);\r\n  switch (text.charCodeAt(0)) {\r\n    case CharCode.a: {\r\n      switch (text) {\r\n        case \"abstract\": return Token.ABSTRACT;\r\n        case \"as\": return Token.AS;\r\n        case \"async\": return Token.ASYNC;\r\n        case \"await\": return Token.AWAIT;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.b: {\r\n      switch (text) {\r\n        case \"break\": return Token.BREAK;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.c: {\r\n      switch (text) {\r\n        case \"case\": return Token.CASE;\r\n        case \"catch\": return Token.CATCH;\r\n        case \"class\": return Token.CLASS;\r\n        case \"continue\": return Token.CONTINUE;\r\n        case \"const\": return Token.CONST;\r\n        case \"constructor\": return Token.CONSTRUCTOR;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.d: {\r\n      switch (text) {\r\n        case \"debugger\": return Token.DEBUGGER;\r\n        case \"declare\": return Token.DECLARE;\r\n        case \"default\": return Token.DEFAULT;\r\n        case \"delete\": return Token.DELETE;\r\n        case \"do\": return Token.DO;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.e: {\r\n      switch (text) {\r\n        case \"else\": return Token.ELSE;\r\n        case \"enum\": return Token.ENUM;\r\n        case \"export\": return Token.EXPORT;\r\n        case \"extends\": return Token.EXTENDS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.f: {\r\n      switch (text) {\r\n        case \"false\": return Token.FALSE;\r\n        case \"finally\": return Token.FINALLY;\r\n        case \"for\": return Token.FOR;\r\n        case \"from\": return Token.FROM;\r\n        case \"function\": return Token.FUNCTION;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.g: {\r\n      switch (text) {\r\n        case \"get\": return Token.GET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.i: {\r\n      switch (text) {\r\n        case \"if\": return Token.IF;\r\n        case \"implements\": return Token.IMPLEMENTS;\r\n        case \"import\": return Token.IMPORT;\r\n        case \"in\": return Token.IN;\r\n        case \"instanceof\": return Token.INSTANCEOF;\r\n        case \"interface\": return Token.INTERFACE;\r\n        case \"is\": return Token.IS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.k: {\r\n      switch (text) {\r\n        case \"keyof\": return Token.KEYOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.l: {\r\n      switch (text) {\r\n        case \"let\": return Token.LET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.m: {\r\n      switch (text) {\r\n        case \"module\": return Token.MODULE;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.n: {\r\n      switch (text) {\r\n        case \"namespace\": return Token.NAMESPACE;\r\n        case \"new\": return Token.NEW;\r\n        case \"null\": return Token.NULL;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.o: {\r\n      switch (text) {\r\n        case \"of\": return Token.OF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.p: {\r\n      switch (text) {\r\n        case \"package\": return Token.PACKAGE;\r\n        case \"private\": return Token.PRIVATE;\r\n        case \"protected\": return Token.PROTECTED;\r\n        case \"public\": return Token.PUBLIC;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.r: {\r\n      switch (text) {\r\n        case \"readonly\": return Token.READONLY;\r\n        case \"return\": return Token.RETURN;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.s: {\r\n      switch (text) {\r\n        case \"set\": return Token.SET;\r\n        case \"static\": return Token.STATIC;\r\n        case \"super\": return Token.SUPER;\r\n        case \"switch\": return Token.SWITCH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.t: {\r\n      switch (text) {\r\n        case \"this\": return Token.THIS;\r\n        case \"throw\": return Token.THROW;\r\n        case \"true\": return Token.TRUE;\r\n        case \"try\": return Token.TRY;\r\n        case \"type\": return Token.TYPE;\r\n        case \"typeof\": return Token.TYPEOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.v: {\r\n      switch (text) {\r\n        case \"var\": return Token.VAR;\r\n        case \"void\": return Token.VOID;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.w: {\r\n      switch (text) {\r\n        case \"while\": return Token.WHILE;\r\n        case \"with\": return Token.WITH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.y: {\r\n      switch (text) {\r\n        case \"yield\": return Token.YIELD;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return Token.INVALID;\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.FOR:\r\n    case Token.GET:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE:\r\n    case Token.VOID: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics ? diagnostics : new Array();\r\n\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < this.end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(identifierHandling);\r\n  }\r\n\r\n  private unsafeNext(\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxTokenLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (!(\r\n            ++this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          )) break;\r\n          // otherwise fall-through\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (chr == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (isDecimalDigit(chr)) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\r\n              chr == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < this.end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (chr == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < this.end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < this.end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (chr == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < this.end) {\r\n                chr = text.charCodeAt(this.pos);\r\n                if (chr == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < this.end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (chr == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < this.end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFromKeyword(keywordText);\r\n              if (\r\n                keywordToken !== Token.INVALID &&\r\n                identifierHandling !== IdentifierHandling.ALWAYS &&\r\n                !(\r\n                  identifierHandling === IdentifierHandling.PREFER &&\r\n                  tokenIsAlsoIdentifier(keywordToken)\r\n                )\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\r\n          if (isLineBreak(text.charCodeAt(pos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\r\n    return this.skip(Token.IDENTIFIER, identifierHandling);\r\n  }\r\n\r\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    while (\r\n      ++this.pos < this.end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c)) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    if (++this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (!escaped && c == CharCode.SLASH) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var flags = 0;\r\n    while (this.pos < this.end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var text = this.source.text;\r\n    if (this.pos + 1 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.x:\r\n        case CharCode.X:\r\n        case CharCode.b:\r\n        case CharCode.B:\r\n        case CharCode.o:\r\n        case CharCode.O: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < this.end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) {\r\n        return false;\r\n      }\r\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\r\n      // does not validate separator placement (this is done in readXYInteger)\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.x:\r\n        case CharCode.X: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.b:\r\n        case CharCode.B: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.o:\r\n        case CharCode.O: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_4 = i64_new(4);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = (value << 4) + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = (value << 4) + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(10 + c - CharCode.A)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = (value << 4) + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(10 + c - CharCode.a)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_10 = i64_new(10);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_3 = i64_new(3);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = (value << 3) + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_shl(value, i64_3),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_1 = i64_new(1);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode._0) {\r\n        // value = (value << 1);\r\n        value = i64_shl(value, i64_1);\r\n      } else if (c == CharCode._1) {\r\n        // value = (value << 1) + 1;\r\n        value = i64_add(\r\n          i64_shl(value, i64_1),\r\n          i64_1\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    // TODO: numeric separators (parseFloat can't handle these)\r\n    var start = this.pos;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.e || c == CharCode.E) {\r\n        if (\r\n          ++this.pos < this.end &&\r\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = (value << 4) + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = (value << 4) + c + (10 - CharCode.A);\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = (value << 4) + c + (10 - CharCode.a);\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var text = this.source.text;\r\n    if (this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, this.end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        ((value32 - 65536) >>> 10) + 0xD800,\r\n        ((value32 - 65536) & 1023) + 0xDC00\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\r\n * Resolve infrastructure to obtain types and elements.\r\n * @module resolver\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticEmitter,\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Program,\r\n  ElementKind,\r\n  OperatorKind,\r\n  Element,\r\n  Class,\r\n  ClassPrototype,\r\n  Function,\r\n  FunctionPrototype,\r\n  VariableLikeElement,\r\n  Property,\r\n  PropertyPrototype,\r\n  Field,\r\n  FieldPrototype,\r\n  Global,\r\n  TypeDefinition\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  Flow\r\n} from \"./flow\";\r\n\r\nimport {\r\n  SignatureNode,\r\n  ParameterKind,\r\n  CommonTypeNode,\r\n  NodeKind,\r\n  TypeNode,\r\n  TypeName,\r\n  TypeParameterNode,\r\n  Node,\r\n  Range,\r\n  IdentifierExpression,\r\n  CallExpression,\r\n  ElementAccessExpression,\r\n  PropertyAccessExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  AssertionExpression,\r\n  Expression,\r\n  IntegerLiteralExpression,\r\n  UnaryPrefixExpression,\r\n  UnaryPostfixExpression,\r\n  AssertionKind,\r\n  BinaryExpression,\r\n  ThisExpression,\r\n  SuperExpression,\r\n  isTypeOmitted\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  Signature,\r\n  typesToString,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  CommonSymbols\r\n} from \"./common\";\r\n\r\nimport {\r\n  makeMap,\r\n  isPowerOf2\r\n} from \"./util\";\r\n\r\nimport {\r\n  Token\r\n} from \"./tokenizer\";\r\n\r\n/** Indicates whether errors are reported or not. */\r\nexport enum ReportMode {\r\n  /** Report errors. */\r\n  REPORT,\r\n  /** Swallow errors. */\r\n  SWALLOW\r\n}\r\n\r\n/** Provides tools to resolve types and expressions. */\r\nexport class Resolver extends DiagnosticEmitter {\r\n\r\n  /** The program this resolver belongs to. */\r\n  program: Program;\r\n\r\n  /** Target expression of the previously resolved property or element access. */\r\n  currentThisExpression: Expression | null = null;\r\n  /** Element expression of the previously resolved element access. */\r\n  currentElementExpression : Expression | null = null;\r\n\r\n  /** Constructs the resolver for the specified program. */\r\n  constructor(\r\n    /** The program to construct a resolver for. */\r\n    program: Program\r\n  ) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n  }\r\n\r\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    /** The type to resolve. */\r\n    node: CommonTypeNode,\r\n    /** Relative context. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n\r\n    // handle signature\r\n    if (node.kind == NodeKind.SIGNATURE) {\r\n      let explicitThisType = (<SignatureNode>node).explicitThisType;\r\n      let thisType: Type | null = null;\r\n      if (explicitThisType) {\r\n        thisType = this.resolveType(\r\n          explicitThisType,\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!thisType) return null;\r\n      }\r\n      let parameterNodes = (<SignatureNode>node).parameters;\r\n      let numParameters = parameterNodes.length;\r\n      let parameterTypes = new Array<Type>(numParameters);\r\n      let parameterNames = new Array<string>(numParameters);\r\n      let requiredParameters = 0;\r\n      let hasRest = false;\r\n      for (let i = 0; i < numParameters; ++i) {\r\n        let parameterNode = parameterNodes[i];\r\n        switch (parameterNode.parameterKind) {\r\n          case ParameterKind.DEFAULT: {\r\n            requiredParameters = i + 1;\r\n            break;\r\n          }\r\n          case ParameterKind.REST: {\r\n            assert(i == numParameters);\r\n            hasRest = true;\r\n            break;\r\n          }\r\n        }\r\n        let parameterTypeNode = parameterNode.type;\r\n        if (isTypeOmitted(parameterTypeNode)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              parameterTypeNode.range\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        let parameterType = this.resolveType(\r\n          parameterTypeNode,\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!parameterType) return null;\r\n        parameterTypes[i] = parameterType;\r\n        parameterNames[i] = parameterNode.name.text;\r\n      }\r\n      let returnTypeNode = (<SignatureNode>node).returnType;\r\n      if (isTypeOmitted(returnTypeNode)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnTypeNode.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let returnType: Type | null;\r\n      if (returnTypeNode) {\r\n        returnType = this.resolveType(\r\n          returnTypeNode,\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Type.void;\r\n      }\r\n      let signature = new Signature(parameterTypes, returnType, thisType);\r\n      signature.parameterNames = parameterNames;\r\n      signature.requiredParameters = requiredParameters;\r\n      signature.hasRest = hasRest;\r\n      return node.isNullable ? signature.type.asNullable() : signature.type;\r\n    }\r\n\r\n    // now dealing with TypeNode\r\n    assert(node.kind == NodeKind.TYPE);\r\n    var typeNode = <TypeNode>node;\r\n    var typeName = typeNode.name;\r\n    var typeArgumentNodes = typeNode.typeArguments;\r\n    var possiblyPlaceholder = !typeName.next;\r\n\r\n    // look up in contextual type arguments if possibly a placeholder\r\n    if (possiblyPlaceholder) {\r\n      if (contextualTypeArguments && contextualTypeArguments.has(typeName.identifier.text)) {\r\n        let type = contextualTypeArguments.get(typeName.identifier.text)!;\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, type.toString()\r\n            );\r\n          }\r\n        }\r\n        if (node.isNullable) {\r\n          if (!type.is(TypeFlags.REFERENCE)) {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n                node.range, type.toString()\r\n              );\r\n            }\r\n          }\r\n          return type.asNullable();\r\n        }\r\n        return type;\r\n      }\r\n    }\r\n\r\n    // look up in context\r\n    var element = this.resolveTypeName(typeName, context, reportMode);\r\n    if (!element) return null;\r\n\r\n    // use shadow type if present (i.e. namespace sharing a type)\r\n    if (element.shadowType) {\r\n      element = element.shadowType;\r\n\r\n    } else {\r\n      // handle enums (become i32)\r\n      if (element.kind == ElementKind.ENUM) {\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, element.internalName\r\n            );\r\n          }\r\n        }\r\n        if (node.isNullable) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n              node.range, element.name\r\n            );\r\n          }\r\n        }\r\n        return Type.i32;\r\n      }\r\n\r\n      // handle classes\r\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let instance = this.resolveClassInclTypeArguments(\r\n          <ClassPrototype>element,\r\n          typeArgumentNodes,\r\n          context,\r\n          makeMap<string,Type>(contextualTypeArguments), // don't inherit\r\n          node\r\n        ); // reports\r\n        if (!instance) return null;\r\n        return node.isNullable ? instance.type.asNullable() : instance.type;\r\n      }\r\n    }\r\n\r\n    // handle type definitions\r\n    if (element.kind == ElementKind.TYPEDEFINITION) {\r\n\r\n      // shortcut already resolved (mostly builtins)\r\n      if (element.is(CommonFlags.RESOLVED)) {\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, element.internalName\r\n            );\r\n          }\r\n        }\r\n        let type = (<TypeDefinition>element).type;\r\n        if (node.isNullable) {\r\n          if (!type.is(TypeFlags.REFERENCE)) {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n                typeNode.name.range, typeName.identifier.text\r\n              );\r\n            }\r\n          } else {\r\n            return type.asNullable();\r\n          }\r\n        }\r\n        return type;\r\n      }\r\n\r\n      // handle special native type\r\n      if (possiblyPlaceholder && typeName.identifier.text == CommonSymbols.native) {\r\n        if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        let typeArgument = this.resolveType(\r\n          typeArgumentNodes[0],\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!typeArgument) return null;\r\n        switch (typeArgument.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: return Type.i32;\r\n          case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\r\n          case TypeKind.I64: return Type.i64;\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: return Type.u32;\r\n          case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\r\n          case TypeKind.U64: return Type.u64;\r\n          case TypeKind.F32: return Type.f32;\r\n          case TypeKind.F64: return Type.f64;\r\n          case TypeKind.V128: return Type.v128;\r\n          case TypeKind.VOID: return Type.void;\r\n          default: assert(false);\r\n        }\r\n      }\r\n\r\n      // resolve normally\r\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\r\n      let typeArguments: Type[] | null = null;\r\n      if (typeParameterNodes) {\r\n        typeArguments = this.resolveTypeArguments(\r\n          typeParameterNodes,\r\n          typeArgumentNodes,\r\n          context,\r\n          contextualTypeArguments = makeMap(contextualTypeArguments), // inherit\r\n          node,\r\n          reportMode\r\n        );\r\n        if (!typeArguments) return null;\r\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          typeNode.range, typeName.identifier.text\r\n        );\r\n        // recoverable\r\n      }\r\n      return this.resolveType(\r\n        (<TypeDefinition>element).typeNode,\r\n        element,\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        typeNode.name.range, typeName.identifier.text\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a type name to the program element it refers to. */\r\n  resolveTypeName(\r\n    /** The type name to resolve. */\r\n    typeName: TypeName,\r\n    /** Relative context. */\r\n    context: Element,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var element = context.lookup(typeName.identifier.text);\r\n    if (!element) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Cannot_find_name_0,\r\n          typeName.range, typeName.identifier.text\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var prev = typeName;\r\n    var next = typeName.next;\r\n    while (next) {\r\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            next.range, next.identifier.text, prev.identifier.text\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      prev = next;\r\n      next = next.next;\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    /** Actual type parameter nodes. */\r\n    typeParameters: TypeParameterNode[],\r\n    /** Type arguments provided. */\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    /** Relative context. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\r\n    /** Alternative report node in case of empty type arguments. */\r\n    alternativeReportNode: Node | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type[] | null {\r\n    var minParameterCount = 0;\r\n    var maxParameterCount = 0;\r\n    for (let i = 0; i < typeParameters.length; ++i) {\r\n      if (!typeParameters[i].defaultType) ++minParameterCount;\r\n      ++maxParameterCount;\r\n    }\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        argumentCount\r\n          ? Range.join(\r\n              (<TypeNode[]>typeArgumentNodes)[0].range,\r\n              (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n            )\r\n          : assert(alternativeReportNode).range,\r\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\r\n        argumentCount.toString(10)\r\n      );\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(maxParameterCount);\r\n    for (let i = 0; i < maxParameterCount; ++i) {\r\n      let type = i < argumentCount\r\n        ? this.resolveType( // reports\r\n            (<TypeNode[]>typeArgumentNodes)[i],\r\n            context,\r\n            contextualTypeArguments,\r\n            reportMode\r\n          )\r\n        : this.resolveType( // reports\r\n            assert(typeParameters[i].defaultType),\r\n            context,\r\n            contextualTypeArguments,\r\n            reportMode\r\n          );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      contextualTypeArguments.set(typeParameters[i].name.text, type);\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves an identifier to the program element it refers to. */\r\n  resolveIdentifier(\r\n    /** The expression to resolve. */\r\n    identifier: IdentifierExpression,\r\n    /** Optional flow to search for scoped locals. */\r\n    flow: Flow | null,\r\n    /** Optional context to search. */\r\n    context: Element | null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var name = identifier.text;\r\n    var element: Element | null;\r\n    if (flow) {\r\n      if (element = flow.lookup(name)) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return element;\r\n      }\r\n    }\r\n    if (context) {\r\n      if (element = context.lookup(name)) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return element;\r\n      }\r\n    }\r\n    if (element = this.program.lookupGlobal(name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        identifier.range, name\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a lazily compiled global, i.e. a static class field. */\r\n  ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\r\n    if (global.is(CommonFlags.RESOLVED)) return true;\r\n    var typeNode = global.typeNode;\r\n    if (!typeNode) return false;\r\n    var type = this.resolveType( // reports\r\n      typeNode,\r\n      global.parent,\r\n      null,\r\n      reportMode\r\n    );\r\n    if (!type) return false;\r\n    global.setType(type);\r\n    return true;\r\n  }\r\n\r\n  /** Resolves a property access expression to the program element it refers to. */\r\n  resolvePropertyAccessExpression(\r\n    /** The expression to resolve. */\r\n    propertyAccess: PropertyAccessExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = propertyAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\r\n    if (!target) return null;\r\n    var propertyName = propertyAccess.property.text;\r\n\r\n    // Resolve variable-likes to their class type first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\r\n        let classReference = type.classReference;\r\n        if (!classReference) {\r\n          let typeClasses = this.program.typeClasses;\r\n          if (!type.is(TypeFlags.REFERENCE) && typeClasses.has(type.kind)) {\r\n            classReference = typeClasses.get(type.kind)!;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static\r\n        let getterInstance = this.resolveFunction( // reports\r\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n        if (!getterInstance) return null;\r\n        let classReference = getterInstance.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance\r\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\r\n        let classReference = getterInstance.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: { // property access on element access?\r\n        let elementExpression = this.currentElementExpression;\r\n        if (elementExpression) {\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementExpression.range, (<Class>target).internalName\r\n            );\r\n            return null;\r\n          }\r\n          let returnType = indexedGet.signature.returnType;\r\n          if (!(target = returnType.classReference)) {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, returnType.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          let members = target.members;\r\n          if (members && members.has(propertyName)) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = null;\r\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\r\n          }\r\n          // traverse inherited static members on the base prototype if target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // traverse inherited instance members on the base class if target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        let members = target.members;\r\n        if (members && members.has(propertyName)) {\r\n          this.currentThisExpression = targetExpression;\r\n          this.currentElementExpression = null;\r\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      propertyAccess.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an element access expression to the program element it refers to. */\r\n  resolveElementAccessExpression(\r\n    /** The expression to resolve. */\r\n    elementAccess: ElementAccessExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = elementAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\r\n    if (!target) return null;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (target = type.classReference) {\r\n          this.currentThisExpression = targetExpression;\r\n          this.currentElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n        if (!indexedGet) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementAccess.range, (<Class>target).internalName\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\r\n          let returnType = indexedGet.signature.returnType;\r\n          if (target = returnType.classReference) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = elementAccess.elementExpression;\r\n            return target;\r\n          }\r\n          return null;\r\n        }\r\n        this.currentThisExpression = targetExpression;\r\n        this.currentElementExpression = elementAccess.elementExpression;\r\n        return target;\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        targetExpression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Determines the final type of an integer literal given the specified contextual type. */\r\n  determineIntegerLiteralType(\r\n    /** Integer literal value. */\r\n    intValue: I64,\r\n    /** Current contextual type. */\r\n    contextualType: Type\r\n  ): Type {\r\n    if (!contextualType.is(TypeFlags.REFERENCE)) {\r\n      // compile to contextualType if matching\r\n      switch (contextualType.kind) {\r\n        case TypeKind.I8: {\r\n          if (i64_is_i8(intValue)) return Type.i8;\r\n          break;\r\n        }\r\n        case TypeKind.U8: {\r\n          if (i64_is_u8(intValue)) return Type.u8;\r\n          break;\r\n        }\r\n        case TypeKind.I16: {\r\n          if (i64_is_i16(intValue)) return Type.i16;\r\n          break;\r\n        }\r\n        case TypeKind.U16: {\r\n          if (i64_is_u16(intValue)) return Type.u16;\r\n          break;\r\n        }\r\n        case TypeKind.I32: {\r\n          if (i64_is_i32(intValue)) return Type.i32;\r\n          break;\r\n        }\r\n        case TypeKind.U32: {\r\n          if (i64_is_u32(intValue)) return Type.u32;\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: {\r\n          if (i64_is_bool(intValue)) return Type.bool;\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_i32(intValue)) return Type.isize32;\r\n            break;\r\n          }\r\n          return Type.isize64;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_u32(intValue)) return Type.usize32;\r\n            break;\r\n          }\r\n          return Type.usize64;\r\n        }\r\n        case TypeKind.I64: return Type.i64;\r\n        case TypeKind.U64: return Type.u64;\r\n        case TypeKind.F32: return Type.f32;\r\n        case TypeKind.F64: return Type.f64;\r\n        case TypeKind.VOID: break; // best fitting below\r\n        default: assert(false);\r\n      }\r\n    }\r\n    // otherwise compile to best fitting native type\r\n    if (i64_is_i32(intValue)) return Type.i32;\r\n    if (i64_is_u32(intValue)) return Type.u32;\r\n    return Type.i64;\r\n  }\r\n\r\n  /** Resolves any expression to the program element it refers to. */\r\n  resolveExpression(\r\n    /** The expression to resolve. */\r\n    expression: Expression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) { // simply skip\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        return this.resolveAssertionExpression(\r\n          <AssertionExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        return this.resolveUnaryPrefixExpression(\r\n          <UnaryPrefixExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        return this.resolveUnaryPostfixExpression(\r\n          <UnaryPostfixExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.BINARY: {\r\n        return this.resolveBinaryExpression(\r\n          <BinaryExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.THIS: {\r\n        return this.resolveThisExpression(\r\n          <ThisExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.SUPER: {\r\n        return this.resolveSuperExpression(\r\n          <SuperExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(\r\n          <IdentifierExpression>expression,\r\n          flow, flow.actualFunction, reportMode\r\n        );\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        return this.resolveLiteralExpression(\r\n          <LiteralExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccessExpression(\r\n          <ElementAccessExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        return this.resolveCallExpression(\r\n          <CallExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      // TODO: everything else\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an assertion expression to the program element it refers to. */\r\n  resolveAssertionExpression(\r\n    /** The expression to resolve. */\r\n    expression: AssertionExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (expression.assertionKind == AssertionKind.NONNULL) {\r\n      return this.resolveExpression(\r\n        expression.expression,\r\n        flow,\r\n        contextualType,\r\n        reportMode\r\n      );\r\n    }\r\n    var type = this.resolveType(\r\n      assert(expression.toType), // must be set if not NONNULL\r\n      flow.actualFunction,\r\n      flow.contextualTypeArguments,\r\n      reportMode\r\n    );\r\n    if (!type) return null;\r\n    var element: Element | null = type.classReference;\r\n    if (!element) {\r\n      let signature = type.signatureReference;\r\n      if (!signature) return null;\r\n      element = signature.asFunctionTarget(this.program);\r\n    }\r\n    this.currentThisExpression = null;\r\n    this.currentElementExpression = null;\r\n    return element;\r\n  }\r\n\r\n  /** Resolves an unary prefix expression to the program element it refers to. */\r\n  resolveUnaryPrefixExpression(\r\n    /** The expression to resolve. */\r\n    expression: UnaryPrefixExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var operand = expression.operand;\r\n    // TODO: operator overloads\r\n    switch (expression.operator) {\r\n      case Token.MINUS: {\r\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\r\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\r\n          let type = this.determineIntegerLiteralType(\r\n            i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\r\n            contextualType\r\n          );\r\n          let typeClasses = this.program.typeClasses;\r\n          return typeClasses.has(type.kind) ? typeClasses.get(type.kind)! : null;\r\n        }\r\n        return this.resolveExpression(\r\n          operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n      }\r\n      case Token.PLUS:\r\n      case Token.PLUS_PLUS:\r\n      case Token.MINUS_MINUS: {\r\n        return this.resolveExpression(\r\n          expression.operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        let typeClasses = this.program.typeClasses;\r\n        return typeClasses.has(TypeKind.BOOL) ? typeClasses.get(TypeKind.BOOL)! : null;\r\n      }\r\n      case Token.TILDE: {\r\n        let resolvedOperand = this.resolveExpression(\r\n          expression.operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n        if (!resolvedOperand) return null;\r\n        // TODO\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an unary postfix expression to the program element it refers to. */\r\n  resolveUnaryPostfixExpression(\r\n    /** The expression to resolve. */\r\n    expression: UnaryPostfixExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    // TODO: operator overloads\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS:\r\n      case Token.MINUS_MINUS: {\r\n        return this.resolveExpression(\r\n          expression.operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n      }\r\n      default: assert(false);\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a binary expression to the program element it refers to. */\r\n  resolveBinaryExpression(\r\n    /** The expression to resolve. */\r\n    expression: BinaryExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    // TODO\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a this expression to the program element it refers to. */\r\n  resolveThisExpression(\r\n    /** The expression to resolve. */\r\n    expression: ThisExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      let thisLocal = flow.lookupLocal(CommonSymbols.this_);\r\n      if (thisLocal) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return thisLocal;\r\n      }\r\n    }\r\n    var parent = flow.actualFunction.parent;\r\n    if (parent) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return parent;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a super expression to the program element it refers to. */\r\n  resolveSuperExpression(\r\n    /** The expression to resolve. */\r\n    expression: SuperExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      let superLocal = flow.lookupLocal(CommonSymbols.super_);\r\n      if (superLocal) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return superLocal;\r\n      }\r\n    }\r\n    var parent: Element | null = flow.actualFunction.parent;\r\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return parent;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a literal expression to the program element it refers to. */\r\n  resolveLiteralExpression(\r\n    /** The expression to resolve. */\r\n    expression: LiteralExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.INTEGER: {\r\n        this.currentThisExpression = expression;\r\n        this.currentElementExpression = null;\r\n        let literalType = this.determineIntegerLiteralType(\r\n          (<IntegerLiteralExpression>expression).value,\r\n          contextualType\r\n        );\r\n        let typeClasses = this.program.typeClasses;\r\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        this.currentThisExpression = expression;\r\n        this.currentElementExpression = null;\r\n        let literalType = contextualType == Type.f32 ? Type.f32 : Type.f64;\r\n        let typeClasses = this.program.typeClasses;\r\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\r\n      }\r\n      case LiteralKind.STRING: {\r\n        this.currentThisExpression = expression;\r\n        this.currentElementExpression = null;\r\n        return this.program.stringInstance;\r\n      }\r\n      // TODO\r\n      // case LiteralKind.ARRAY:\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a call expression to the program element it refers to. */\r\n  resolveCallExpression(\r\n    /** The expression to resolve. */\r\n    expression: CallExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = expression.expression;\r\n    var target = this.resolveExpression( // reports\r\n      targetExpression,\r\n      flow,\r\n      contextualType,\r\n      reportMode\r\n    );\r\n    if (!target) return null;\r\n    if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n      let instance = this.resolveFunctionInclTypeArguments(\r\n        <FunctionPrototype>target,\r\n        expression.typeArguments,\r\n        flow.actualFunction,\r\n        makeMap(flow.contextualTypeArguments), // don't inherit\r\n        expression,\r\n        reportMode\r\n      );\r\n      if (!instance) return null;\r\n      let returnType = instance.signature.returnType;\r\n      let classType = returnType.classReference;\r\n      if (classType) {\r\n        // reuse resolvedThisExpression (might be property access)\r\n        // reuse resolvedElementExpression (might be element access)\r\n        return classType;\r\n      } else {\r\n        let signature = returnType.signatureReference;\r\n        if (signature) {\r\n          let functionTarget = signature.asFunctionTarget(this.program);\r\n          // reuse resolvedThisExpression (might be property access)\r\n          // reuse resolvedElementExpression (might be element access)\r\n          return functionTarget;\r\n        }\r\n      }\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n          targetExpression.range, target.internalName\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a function prototype using the specified concrete type arguments. */\r\n  resolveFunction(\r\n    /** The prototype of the function. */\r\n    prototype: FunctionPrototype,\r\n    /** Concrete type arguments. */\r\n    typeArguments: Type[] | null,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\r\n      ? prototype.parent.parent\r\n      : prototype.parent;\r\n    var classInstance: Class | null = null; // if an instance method\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Instance method prototypes are pre-bound to their concrete class as their parent\r\n    if (prototype.is(CommonFlags.INSTANCE)) {\r\n      assert(actualParent.kind == ElementKind.CLASS);\r\n      classInstance = <Class>actualParent;\r\n\r\n      // check if this exact concrete class and function combination is known already\r\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\r\n      if (resolvedInstance) return resolvedInstance;\r\n\r\n      // inherit class specific type arguments\r\n      let classTypeArguments = classInstance.typeArguments;\r\n      if (classTypeArguments) {\r\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\r\n        let numClassTypeArguments = classTypeParameters.length;\r\n        assert(numClassTypeArguments == classTypeParameters.length);\r\n        for (let i = 0; i < numClassTypeArguments; ++i) {\r\n          let classTypeParameterName = classTypeParameters[i].name.text;\r\n          if (!contextualTypeArguments.has(classTypeParameterName)) {\r\n            contextualTypeArguments.set(\r\n              classTypeParameterName,\r\n              classTypeArguments[i]\r\n            );\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\r\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\r\n      if (resolvedInstance) return resolvedInstance;\r\n    }\r\n\r\n    // override whatever is contextual with actual function type arguments\r\n    var signatureNode = prototype.signatureNode;\r\n    var typeParameterNodes = prototype.typeParameterNodes;\r\n    var numFunctionTypeArguments: i32;\r\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\r\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        contextualTypeArguments.set(\r\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\r\n          typeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\r\n    }\r\n\r\n    // resolve `this` type if applicable\r\n    var thisType: Type | null = null;\r\n    var explicitThisType = signatureNode.explicitThisType;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        prototype.parent, // relative to function\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!thisType) return null;\r\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\r\n    } else if (classInstance) {\r\n      thisType = classInstance.type;\r\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\r\n    }\r\n\r\n    // resolve parameter types\r\n    var signatureParameters = signatureNode.parameters;\r\n    var numSignatureParameters = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(numSignatureParameters);\r\n    var parameterNames = new Array<string>(numSignatureParameters);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < numSignatureParameters; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = parameterDeclaration.type;\r\n      if (isTypeOmitted(typeNode)) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          typeNode.range\r\n        );\r\n        return null;\r\n      }\r\n      let parameterType = this.resolveType(\r\n        typeNode,\r\n        prototype.parent, // relative to function\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    // resolve return type\r\n    var returnType: Type;\r\n    if (prototype.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = signatureNode.returnType;\r\n      if (isTypeOmitted(typeNode)) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          typeNode.range\r\n        );\r\n        return null;\r\n      }\r\n      let type = this.resolveType(\r\n        typeNode,\r\n        prototype.parent, // relative to function\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var nameInclTypeParameters = prototype.name;\r\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\r\n    var instance = new Function(\r\n      nameInclTypeParameters,\r\n      prototype,\r\n      signature,\r\n      contextualTypeArguments\r\n    );\r\n    prototype.setResolvedInstance(instanceKey, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\r\n  resolveFunctionInclTypeArguments(\r\n    /** The prototype of the function. */\r\n    prototype: FunctionPrototype,\r\n    /** Type arguments provided. */\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    /** Relative context. Type arguments are resolved from here. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type>,\r\n    /** The node to use when reporting intermediate errors. */\r\n    reportNode: Node,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\r\n      ? prototype.parent.parent\r\n      : prototype.parent;\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n\r\n      // If this is an instance method, first apply the class's type arguments\r\n      if (prototype.is(CommonFlags.INSTANCE)) {\r\n        assert(actualParent.kind == ElementKind.CLASS);\r\n        let classTypeArguments = (<Class>actualParent).typeArguments;\r\n        if (classTypeArguments) {\r\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\r\n          let numClassTypeArguments = classTypeArguments.length;\r\n          assert(numClassTypeArguments == typeParameterNodes.length);\r\n          for (let i = 0; i < numClassTypeArguments; ++i) {\r\n            contextualTypeArguments.set(\r\n              typeParameterNodes[i].name.text,\r\n              classTypeArguments[i]\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.typeParameterNodes),\r\n        typeArgumentNodes,\r\n        context,\r\n        contextualTypeArguments,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveFunction(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      contextualTypeArguments,\r\n      reportMode\r\n    );\r\n  }\r\n\r\n  /** Resolves a class prototype using the specified concrete type arguments. */\r\n  resolveClass(\r\n    /** The prototype of the class. */\r\n    prototype: ClassPrototype,\r\n    /** Concrete type arguments. */\r\n    typeArguments: Type[] | null,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Check if this exact instance has already been resolved\r\n    var instance = prototype.getResolvedInstance(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // Insert contextual type arguments for this operation. Internally, this method is always\r\n    // called with matching type parameter / argument counts.\r\n    if (typeArguments) {\r\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\r\n      let numTypeParameters = typeParameterNodes.length;\r\n      let numTypeArguments = typeArguments.length;\r\n      assert(numTypeArguments == numTypeParameters);\r\n      for (let i = 0; i < numTypeArguments; ++i) {\r\n        contextualTypeArguments.set(typeParameterNodes[i].name.text, typeArguments[i]);\r\n      }\r\n    } else {\r\n      let typeParameterNodes = prototype.typeParameterNodes;\r\n      assert(!(typeParameterNodes && typeParameterNodes.length));\r\n    }\r\n\r\n    // Resolve base class if applicable\r\n    var basePrototype = prototype.basePrototype;\r\n    var baseClass: Class | null = null;\r\n    if (basePrototype) {\r\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\r\n      baseClass = this.resolveClassInclTypeArguments(\r\n        basePrototype,\r\n        extendsNode.typeArguments,\r\n        prototype.parent, // relative to derived class\r\n        makeMap(contextualTypeArguments), // don't inherit\r\n        extendsNode,\r\n        reportMode\r\n      );\r\n      if (!baseClass) return null;\r\n    }\r\n\r\n    // Construct the instance and remember that it has been resolved already\r\n    var nameInclTypeParamters = prototype.name;\r\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\r\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    prototype.setResolvedInstance(instanceKey, instance);\r\n\r\n    // Inherit base class members and set up the initial memory offset for own fields\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      let baseMembers = baseClass.members;\r\n      if (baseMembers) {\r\n        let instanceMembers = instance.members;\r\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\r\n        for (let [baseMemberName, baseMember] of baseMembers) {\r\n          instanceMembers.set(baseMemberName, baseMember);\r\n        }\r\n      }\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n    }\r\n\r\n    // Resolve instance members\r\n    var instanceMemberPrototypes = prototype.instanceMembers;\r\n    if (instanceMemberPrototypes) {\r\n      for (let member of instanceMemberPrototypes.values()) {\r\n        switch (member.kind) {\r\n\r\n          // Lay out fields in advance\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            let instanceMembers = instance.members;\r\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\r\n            else if (instanceMembers.has(member.name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                (<FieldPrototype>member).identifierNode.range,\r\n                member.name\r\n              );\r\n              break;\r\n            }\r\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\r\n            let fieldType: Type | null = null;\r\n            // TODO: handle duplicate non-private fields specifically?\r\n            if (!fieldTypeNode) {\r\n              if (baseClass) {\r\n                let baseMembers = baseClass.members;\r\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\r\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\r\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\r\n                    assert(baseField.kind == ElementKind.FIELD);\r\n                    fieldType = (<Field>baseField).type;\r\n                  }\r\n                }\r\n              }\r\n              if (!fieldType) {\r\n                if (reportMode == ReportMode.REPORT) {\r\n                  this.error(\r\n                    DiagnosticCode.Type_expected,\r\n                    (<FieldPrototype>member).identifierNode.range.atEnd\r\n                  );\r\n                }\r\n              }\r\n            } else {\r\n              fieldType = this.resolveType(\r\n                fieldTypeNode,\r\n                prototype.parent, // relative to class\r\n                instance.contextualTypeArguments,\r\n                reportMode\r\n              );\r\n            }\r\n            if (!fieldType) break; // did report above\r\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\r\n            assert(isPowerOf2(fieldType.byteSize));\r\n            let mask = fieldType.byteSize - 1;\r\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\r\n            fieldInstance.memoryOffset = memoryOffset;\r\n            memoryOffset += fieldType.byteSize;\r\n            instance.add(member.name, fieldInstance); // reports\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\r\n            instance.add(boundPrototype.name, boundPrototype); // reports\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY_PROTOTYPE: {\r\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\r\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\r\n            if (getterPrototype) {\r\n              let getterInstance = this.resolveFunction(\r\n                getterPrototype.toBound(instance),\r\n                null,\r\n                makeMap(instance.contextualTypeArguments),\r\n                reportMode\r\n              );\r\n              if (getterInstance) {\r\n                propertyInstance.getterInstance = getterInstance;\r\n                propertyInstance.setType(getterInstance.signature.returnType);\r\n              }\r\n            }\r\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\r\n            if (setterPrototype) {\r\n              let setterInstance = this.resolveFunction(\r\n                setterPrototype.toBound(instance),\r\n                null,\r\n                makeMap(instance.contextualTypeArguments),\r\n                reportMode\r\n              );\r\n              if (setterInstance) {\r\n                propertyInstance.setterInstance = setterInstance;\r\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\r\n                  assert(setterInstance.signature.parameterTypes.length == 1);\r\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\r\n                }\r\n              }\r\n            }\r\n            instance.add(propertyInstance.name, propertyInstance); // reports\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Finalize memory offset\r\n    instance.currentMemoryOffset = memoryOffset;\r\n\r\n    // Link _own_ constructor if present\r\n    {\r\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\r\n      if (ctorPrototype && ctorPrototype.parent === instance) {\r\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n        let ctorInstance = this.resolveFunction(\r\n          <FunctionPrototype>ctorPrototype,\r\n          null,\r\n          instance.contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\r\n      }\r\n    }\r\n\r\n    // Fully resolve operator overloads (don't have type parameters on their own)\r\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\r\n      assert(kind != OperatorKind.INVALID);\r\n      let operatorInstance: Function | null;\r\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\r\n        let boundPrototype = overloadPrototype.toBound(instance);\r\n        operatorInstance = this.resolveFunction(\r\n          boundPrototype,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      } else {\r\n        operatorInstance = this.resolveFunction(\r\n          overloadPrototype,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      }\r\n      if (!operatorInstance) continue;\r\n      let overloads = instance.overloads;\r\n      if (!overloads) instance.overloads = overloads = new Map();\r\n      overloads.set(kind, operatorInstance);\r\n    }\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a class prototype by first resolving the specified type arguments. */\r\n  resolveClassInclTypeArguments(\r\n    /** The prototype of the class. */\r\n    prototype: ClassPrototype,\r\n    /** Type argument nodes provided. */\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    /** Relative context. Type arguments are resolved from here. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type>,\r\n    /** The node to use when reporting intermediate errors. */\r\n    reportNode: Node,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.typeParameterNodes), // must be present if generic\r\n        typeArgumentNodes,\r\n        context,\r\n        contextualTypeArguments,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveClass(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      contextualTypeArguments,\r\n      reportMode\r\n    );\r\n  }\r\n}\r\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  compileCall as compileBuiltinCall,\r\n  compileAbort,\r\n  compileIterateRoots,\r\n  ensureGCHook,\r\n  BuiltinSymbols\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName,\r\n  needsExplicitUnreachable\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  INSTANCE_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  LibrarySymbols,\r\n  CommonSymbols,\r\n  INDEX_SUFFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  ConstantValueKind,\r\n  OperatorKind,\r\n  DecoratorFlags,\r\n  PropertyPrototype,\r\n  File,\r\n  mangleInternalName\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  Flow\r\n} from \"./flow\";\r\n\r\nimport {\r\n  Resolver, ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  TypeNode,\r\n  Range,\r\n  DecoratorKind,\r\n  AssertionKind,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FieldDeclaration,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InstanceOfExpression,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ObjectLiteralExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n\r\n  nodeIsConstantValue,\r\n  findDecorator,\r\n  isTypeOmitted\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64,\r\n  makeMap\r\n} from \"./util\";\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64\r\n}\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\r\n  sharedMemory: i32 = 0;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: i32 = 0;\r\n  /** Global aliases. */\r\n  globalAliases: Map<string,string> | null = null;\r\n  /** Additional features to activate. */\r\n  features: Feature = Feature.NONE;\r\n\r\n  /** Hinted optimize level. Not applied by the compiler itself. */\r\n  optimizeLevelHint: i32 = 0;\r\n  /** Hinted shrink level. Not applied by the compiler itself. */\r\n  shrinkLevelHint: i32 = 0;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n\r\n  /** Tests if a specific feature is activated. */\r\n  hasFeature(feature: Feature): bool {\r\n    return (this.features & feature) != 0;\r\n  }\r\n}\r\n\r\n/** Indicates specific features to activate. */\r\nexport const enum Feature {\r\n  /** No additional features. */\r\n  NONE = 0,\r\n  /** Sign extension operations. */\r\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\r\n  /** Mutable global imports and exports. */\r\n  MUTABLE_GLOBAL = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\r\n  /** Bulk memory operations. */\r\n  BULK_MEMORY = 1 << 2, // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  /** SIMD types and operations. */\r\n  SIMD = 1 << 3, // see: https://github.com/WebAssembly/simd\r\n  /** Threading and atomic operations. */\r\n  THREADS = 1 << 4 // see: https://github.com/WebAssembly/threads\r\n}\r\n\r\n/** Indicates the desired kind of a conversion. */\r\nexport const enum ConversionKind {\r\n  /** No conversion. */\r\n  NONE,\r\n  /** Implicit conversion. */\r\n  IMPLICIT,\r\n  /** Explicit conversion. */\r\n  EXPLICIT\r\n}\r\n\r\n/** Indicates the desired wrap mode of a conversion. */\r\nexport const enum WrapMode {\r\n  /** No wrapping. */\r\n  NONE,\r\n  /** Wrap small integer values. */\r\n  WRAP\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Resolver reference. */\r\n  resolver: Resolver;\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current control flow. */\r\n  currentFlow: Flow;\r\n  /** Current inline functions stack. */\r\n  currentInlineFunctions: Function[] = [];\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function statements. */\r\n  currentBody: ExpressionRef[];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = [];\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: string[] = [ \"null\" ];\r\n  /** Argument count helper global. */\r\n  argcVar: GlobalRef = 0;\r\n  /** Argument count helper setter. */\r\n  argcSet: FunctionRef = 0;\r\n  /** Indicates whether the iterateRoots function must be generated. */\r\n  needsIterateRoots: bool = false;\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    this.resolver = program.resolver;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\r\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\r\n      max(options.memoryBase, 8)\r\n    );\r\n    this.module = Module.create();\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the main start function\r\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature([], Type.void));\r\n    startFunctionInstance.internalName = \"start\";\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.currentFlow = startFunctionInstance.flow;\r\n    this.currentBody = startFunctionBody;\r\n\r\n    // add a mutable heap base dummy\r\n    if (options.isWasm64) {\r\n      module.addGlobal(\r\n        BuiltinSymbols.HEAP_BASE,\r\n        NativeType.I64,\r\n        true,\r\n        module.createI64(0, 0)\r\n      );\r\n    } else {\r\n      module.addGlobal(\r\n        BuiltinSymbols.HEAP_BASE,\r\n        NativeType.I32,\r\n        false,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n\r\n    // compile entry file(s) while traversing reachable elements\r\n    var files = program.filesByName;\r\n    for (let file of files.values()) {\r\n      if (file.source.isEntry) {\r\n        this.compileFile(file);\r\n        this.compileExports(file);\r\n      }\r\n    }\r\n\r\n    // compile the start function if not empty or called by main\r\n    var explicitStartFunction = program.explicitStartFunction;\r\n    if (startFunctionBody.length || explicitStartFunction) {\r\n      let signature = startFunctionInstance.signature;\r\n      let funcRef = module.addFunction(\r\n        startFunctionInstance.internalName,\r\n        this.ensureFunctionType(\r\n          signature.parameterTypes,\r\n          signature.returnType,\r\n          signature.thisType\r\n        ),\r\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n        module.createBlock(null, startFunctionBody)\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n      if (!explicitStartFunction) module.setStart(funcRef);\r\n    }\r\n\r\n    // update the heap base pointer\r\n    var memoryOffset = this.memoryOffset;\r\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n    this.memoryOffset = memoryOffset;\r\n    module.removeGlobal(BuiltinSymbols.HEAP_BASE);\r\n    if (options.isWasm64) {\r\n      module.addGlobal(\r\n        BuiltinSymbols.HEAP_BASE,\r\n        NativeType.I64,\r\n        false,\r\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n      );\r\n    } else {\r\n      module.addGlobal(\r\n        BuiltinSymbols.HEAP_BASE,\r\n        NativeType.I32,\r\n        false,\r\n        module.createI32(i64_low(memoryOffset))\r\n      );\r\n    }\r\n\r\n    // set up memory\r\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\r\n    module.setMemory(\r\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\r\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\r\n        : 0,\r\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\r\n      this.memorySegments,\r\n      options.target,\r\n      \"memory\"\r\n    );\r\n\r\n    // import memory if requested (default memory is named '0' by Binaryen)\r\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\r\n    module.addTableExport(\"0\", \"table\");\r\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.createBlock(null, []));\r\n\r\n    // import table if requested (default table is named '0' by Binaryen)\r\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\r\n\r\n    // set up module exports\r\n    for (let file of this.program.filesByName.values()) {\r\n      if (file.source.isEntry) this.makeModuleExports(file);\r\n    }\r\n\r\n    // set up gc\r\n    if (this.needsIterateRoots) compileIterateRoots(this);\r\n\r\n    return module;\r\n  }\r\n\r\n  /** Applies the respective module exports for the specified file. */\r\n  private makeModuleExports(file: File): void {\r\n    var members = file.exports;\r\n    if (members) for (let [name, member] of members) this.makeModuleExport(name, member);\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar)  {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.makeModuleExports(exportsStar[i]);\r\n    }\r\n  }\r\n\r\n  /** Applies the respective module export(s) for the specified element. */\r\n  private makeModuleExport(name: string, element: Element, prefix: string = \"\"): void {\r\n    switch (element.kind) {\r\n\r\n      // traverse instances\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instances = (<FunctionPrototype>element).instances;\r\n        if (instances) {\r\n          for (let instance of instances.values()) {\r\n            let instanceName = name;\r\n            if (instance.is(CommonFlags.GENERIC)) {\r\n              let fullName = instance.internalName;\r\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n            }\r\n            this.makeModuleExport(instanceName, instance, prefix);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        let instances = (<ClassPrototype>element).instances;\r\n        if (instances) {\r\n          for (let instance of instances.values()) {\r\n            let instanceName = name;\r\n            if (instance.is(CommonFlags.GENERIC)) {\r\n              let fullName = instance.internalName;\r\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n            }\r\n            this.makeModuleExport(instanceName, instance, prefix);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getter = (<PropertyPrototype>element).getterPrototype;\r\n        let setter = (<PropertyPrototype>element).setterPrototype;\r\n        if (getter) this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n\r\n      // export concrete elements\r\n      case ElementKind.GLOBAL: {\r\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_export_a_mutable_global,\r\n            (<Global>element).identifierNode.range\r\n          );\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.ENUMVALUE: {\r\n        if (!assert(element.parent).is(CommonFlags.CONST) && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_export_a_mutable_global,\r\n            (<EnumValue>element).identifierNode.range\r\n          );\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION: {\r\n        let instance = <Function>element;\r\n        let signature = instance.signature;\r\n        if (signature.requiredParameters < signature.parameterTypes.length) {\r\n          // utilize trampoline to fill in omitted arguments\r\n          instance = this.ensureTrampoline(instance);\r\n          this.ensureArgcSet();\r\n        }\r\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = (<Property>element).getterInstance;\r\n        if (getter) this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        let setter = (<Property>element).setterInstance;\r\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let module = this.module;\r\n        let type = (<Field>element).type;\r\n        let nativeType = type.toNativeType();\r\n        let offset = (<Field>element).memoryOffset;\r\n        let usizeType = this.options.usizeType;\r\n        let nativeSizeType = this.options.nativeSizeType;\r\n\r\n        // make a getter\r\n        let getterName = prefix + GETTER_PREFIX + name;\r\n        module.addFunction(\r\n          getterName,\r\n          this.ensureFunctionType(null, type, usizeType),\r\n          null,\r\n          module.createLoad(\r\n            type.byteSize,\r\n            type.is(TypeFlags.SIGNED),\r\n            module.createGetLocal(0, nativeSizeType),\r\n            nativeType,\r\n            offset\r\n          )\r\n        );\r\n        module.addFunctionExport(getterName, getterName);\r\n\r\n        // make a setter\r\n        if (!element.is(CommonFlags.READONLY)) {\r\n          let setterName = prefix + SETTER_PREFIX + name;\r\n          module.addFunction(\r\n            setterName,\r\n            this.ensureFunctionType([ type ], Type.void, usizeType),\r\n            null,\r\n            module.createStore(\r\n              type.byteSize,\r\n              module.createGetLocal(0, nativeSizeType),\r\n              module.createGetLocal(1, nativeType),\r\n              nativeType,\r\n              offset\r\n            )\r\n          );\r\n          module.addFunctionExport(setterName, setterName);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // just traverse members below\r\n      case ElementKind.ENUM:\r\n      case ElementKind.CLASS:\r\n      case ElementKind.NAMESPACE:\r\n      case ElementKind.FILE:\r\n      case ElementKind.TYPEDEFINITION: break;\r\n\r\n      default: assert(false); // unexpected module export\r\n    }\r\n\r\n    // traverse members\r\n    var members = element.members;\r\n    if (members) {\r\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\r\n        ? INSTANCE_DELIMITER\r\n        : STATIC_DELIMITER\r\n      );\r\n      if (\r\n        element.kind == ElementKind.NAMESPACE ||\r\n        element.kind == ElementKind.FILE\r\n      ) {\r\n        for (let member of members.values()) {\r\n          if (!member.is(CommonFlags.EXPORT)) continue;\r\n          this.makeModuleExport(member.name, member, subPrefix);\r\n        }\r\n      } else {\r\n        for (let member of members.values()) {\r\n          if (member.is(CommonFlags.PRIVATE)) continue;\r\n          this.makeModuleExport(member.name, member, subPrefix);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // general\r\n\r\n  /** Compiles any element. */\r\n  compileElement(element: Element, compileMembers: bool = true): void {\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        this.compileGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        this.compileEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        if (!element.is(CommonFlags.GENERIC)) {\r\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        if (!element.is(CommonFlags.GENERIC)) {\r\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\r\n        if (getterPrototype) {\r\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\r\n        }\r\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\r\n        if (setterPrototype) {\r\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE:\r\n      case ElementKind.TYPEDEFINITION:\r\n      case ElementKind.ENUMVALUE: break;\r\n      default: assert(false, ElementKind[element.kind]);\r\n    }\r\n    if (compileMembers) this.compileMembers(element);\r\n  }\r\n\r\n  /** Compiles an element's members. */\r\n  compileMembers(element: Element): void {\r\n    var members = element.members;\r\n    if (members) for (let element of members.values()) this.compileElement(element);\r\n  }\r\n\r\n  /** Compiles a file's exports. */\r\n  compileExports(file: File): void {\r\n    var exports = file.exports;\r\n    if (exports) for (let element of exports.values()) this.compileElement(element);\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar) for (let exportStar of exportsStar) this.compileFile(exportStar);\r\n  }\r\n\r\n  // files\r\n\r\n  /** Compiles the file matching the specified path. */\r\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var file: File;\r\n    var filesByName = this.program.filesByName;\r\n    var pathWithIndex: string;\r\n    if (filesByName.has(normalizedPathWithoutExtension)) {\r\n      file = filesByName.get(normalizedPathWithoutExtension)!;\r\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\r\n      file = filesByName.get(pathWithIndex)!;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.File_0_not_found,\r\n        reportNode.range, normalizedPathWithoutExtension\r\n      );\r\n      return;\r\n    }\r\n    this.compileFile(file);\r\n  }\r\n\r\n  /** Compiles the specified file. */\r\n  compileFile(file: File): void {\r\n    if (file.is(CommonFlags.COMPILED)) return;\r\n    file.set(CommonFlags.COMPILED);\r\n\r\n    // compile top-level statements within the file's start function\r\n    var startFunction = file.startFunction;\r\n    var previousBody = this.currentBody;\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.currentBody = startFunctionBody;\r\n\r\n    // compile top-level statements\r\n    var previousFlow = this.currentFlow;\r\n    this.currentFlow = startFunction.flow;\r\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\r\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\r\n    }\r\n    this.currentFlow = previousFlow;\r\n    this.currentBody = previousBody;\r\n\r\n    // if top-level statements are present, make the per-file start function and call it in start\r\n    if (startFunctionBody.length) {\r\n      let module = this.module;\r\n      let locals = startFunction.localsByIndex;\r\n      let numLocals = locals.length;\r\n      let varTypes = new Array<NativeType>(numLocals);\r\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\r\n      module.addFunction(\r\n        startFunction.internalName,\r\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\r\n        varTypes,\r\n        startFunctionBody.length > 1\r\n          ? module.createBlock(null, startFunctionBody)\r\n          : startFunctionBody[0]\r\n      );\r\n      previousBody.push(\r\n        module.createCall(startFunction.internalName, null, NativeType.None)\r\n      );\r\n    }\r\n  }\r\n\r\n  // globals\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED)) return true;\r\n    global.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var initExpr: ExpressionRef = 0;\r\n    var typeNode = global.typeNode;\r\n    var initializerNode = global.initializerNode;\r\n\r\n    if (!global.is(CommonFlags.RESOLVED)) {\r\n\r\n      // resolve now if annotated\r\n      if (typeNode) {\r\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\r\n        if (!resolvedType) return false;\r\n        if (resolvedType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            typeNode.range\r\n          );\r\n          return false;\r\n        }\r\n        global.setType(resolvedType);\r\n\r\n      // infer from initializer if not annotated\r\n      } else if (initializerNode) { // infer type using void/NONE for literal inference\r\n        let previousFlow = this.currentFlow;\r\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = global.file.startFunction.flow;\r\n        }\r\n        initExpr = this.compileExpressionRetainType( // reports\r\n          initializerNode,\r\n          Type.void,\r\n          WrapMode.WRAP\r\n        );\r\n        this.currentFlow = previousFlow;\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          return false;\r\n        }\r\n        global.setType(this.currentType);\r\n\r\n      // must either be annotated or have an initializer\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          global.identifierNode.range.atEnd\r\n        );\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\r\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) return true;\r\n\r\n    var nativeType = global.type.toNativeType();\r\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n\r\n    // handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // constant global\r\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        mangleImportName(global, global.declaration);\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          mangleImportName_moduleName,\r\n          mangleImportName_elementName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          global.declaration.range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // the MVP does not yet support initializer expressions other than constant values (and constant\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // evaluate initializer if present\r\n    if (initializerNode) {\r\n      if (!initExpr) {\r\n        let previousFlow = this.currentFlow;\r\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = global.file.startFunction.flow;\r\n        }\r\n        initExpr = this.compileExpression(\r\n          initializerNode,\r\n          global.type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.WRAP\r\n        );\r\n        this.currentFlow = previousFlow;\r\n      }\r\n\r\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n        if (isDeclaredConstant) {\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              initializerNode.range\r\n            );\r\n            initializeInStart = true;\r\n          }\r\n        } else {\r\n          initializeInStart = true;\r\n        }\r\n      }\r\n\r\n      // explicitly inline if annotated\r\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\r\n        if (!initializeInStart) { // reported above\r\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\r\n          let exprType = getExpressionType(initExpr);\r\n          switch (exprType) {\r\n            case NativeType.I32: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\r\n              break;\r\n            }\r\n            case NativeType.I64: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(\r\n                getConstValueI64Low(initExpr),\r\n                getConstValueI64High(initExpr)\r\n              );\r\n              break;\r\n            }\r\n            case NativeType.F32: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF32(initExpr);\r\n              break;\r\n            }\r\n            case NativeType.F64: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF64(initExpr);\r\n              break;\r\n            }\r\n            default: {\r\n              assert(false);\r\n              return false;\r\n            }\r\n          }\r\n          global.set(CommonFlags.INLINED); // inline the value from now on\r\n        }\r\n      }\r\n\r\n    // initialize to zero if there's no initializer\r\n    } else {\r\n      initExpr = global.type.toNativeZero(module);\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\r\n        this.error(\r\n          DiagnosticCode.Decorator_0_is_not_valid_here,\r\n          global.identifierNode.range, \"inline\"\r\n        );\r\n      }\r\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\r\n      this.currentBody.push(module.createSetGlobal(internalName, initExpr));\r\n\r\n    } else if (!global.hasDecorator(DecoratorFlags.INLINE)) { // compile normally\r\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // enums\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n    var previousValueIsMut = false;\r\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueNode = val.valueNode;\r\n        val.set(CommonFlags.COMPILED);\r\n        let previousFlow = this.currentFlow;\r\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = element.file.startFunction.flow;\r\n        }\r\n        let initExpr: ExpressionRef;\r\n        if (valueNode) {\r\n          initExpr = this.compileExpression(\r\n            valueNode,\r\n            Type.i32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            if (element.is(CommonFlags.CONST)) {\r\n              initExpr = module.precomputeExpression(initExpr);\r\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n                this.error(\r\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                  valueNode.range\r\n                );\r\n                initInStart = true;\r\n              }\r\n            } else {\r\n              initInStart = true;\r\n            }\r\n          }\r\n        } else if (previousValue == null) {\r\n          initExpr = module.createI32(0);\r\n        } else {\r\n          if (previousValueIsMut) {\r\n            this.error(\r\n              DiagnosticCode.Enum_member_must_have_initializer,\r\n              (<EnumValue>member).identifierNode.range.atEnd\r\n            );\r\n          }\r\n          initExpr = module.createBinary(BinaryOp.AddI32,\r\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\r\n            module.createI32(1)\r\n          );\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.error(\r\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                member.declaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n        }\r\n        this.currentFlow = previousFlow;\r\n        if (initInStart) {\r\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\r\n          this.currentBody.push(\r\n            module.createSetGlobal(val.internalName, initExpr)\r\n          );\r\n          previousValueIsMut = true;\r\n        } else {\r\n          if (isInline) {\r\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\r\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\r\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n            }\r\n          } else {\r\n            module.addGlobal(val.internalName, NativeType.I32, true, initExpr);\r\n          }\r\n          previousValueIsMut = false;\r\n        }\r\n        previousValue = <EnumValue>val;\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // functions\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> = makeMap(),\r\n    alternativeReportNode: Node | null = null\r\n  ): Function | null {\r\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\r\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      prototype.parent, // relative to itself\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return null;\r\n    if (!this.compileFunction(instance)) return null; // reports\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  ensureFunctionType(\r\n    parameterTypes: Type[] | null,\r\n    returnType: Type,\r\n    thisType: Type | null = null\r\n  ): FunctionTypeRef {\r\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    if (parameterTypes) {\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        paramTypes[index] = parameterTypes[i].toNativeType();\r\n      }\r\n    }\r\n    var resultType = returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\r\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles the body of a function within the specified flow. */\r\n  private compileFunctionBody(instance: Function): ExpressionRef[] {\r\n    var module = this.module;\r\n    var bodyNode = assert(instance.prototype.bodyNode);\r\n    var returnType = instance.signature.returnType;\r\n    var flow = this.currentFlow;\r\n\r\n    // compile statements\r\n    var stmts: BinaryenExportRef[];\r\n    if (bodyNode.kind == NodeKind.BLOCK) {\r\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true);\r\n    } else {\r\n      // must be an expression statement if not a block\r\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\r\n\r\n      // must be an arrow function\r\n      assert(instance.prototype.arrowKind);\r\n\r\n      // none of the following can be an arrow function\r\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\r\n\r\n      let stmt = this.compileExpression(\r\n        (<ExpressionStatement>bodyNode).expression,\r\n        returnType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      flow.set(FlowFlags.RETURNS);\r\n      if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n      stmts = [ stmt ];\r\n    }\r\n\r\n    // make the main function call `start` implicitly, but only once\r\n    if (instance.prototype == this.program.explicitStartFunction) {\r\n      module.addGlobal(CompilerSymbols.started, NativeType.I32, true, module.createI32(0));\r\n      stmts.unshift(\r\n        module.createIf(\r\n          module.createUnary(\r\n            UnaryOp.EqzI32,\r\n            module.createGetGlobal(CompilerSymbols.started, NativeType.I32)\r\n          ),\r\n          module.createBlock(null, [\r\n            module.createCall(\"start\", null, NativeType.None),\r\n            module.createSetGlobal(CompilerSymbols.started, module.createI32(1))\r\n          ])\r\n        )\r\n      );\r\n    }\r\n\r\n    // make constructors return their instance pointer\r\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\r\n      let nativeSizeType = this.options.nativeSizeType;\r\n      assert(instance.is(CommonFlags.INSTANCE));\r\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n\r\n      if (!flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n        let thisLocalIndex = flow.is(FlowFlags.INLINE_CONTEXT)\r\n          ? assert(flow.lookupLocal(CommonSymbols.this_)).index\r\n          : 0;\r\n\r\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\r\n        if (!flow.is(FlowFlags.ALLOCATES)) {\r\n          // {\r\n          //   if (!this) this = <ALLOC>\r\n          //   this.a = X\r\n          //   this.b = Y\r\n          // }\r\n          stmts.push(\r\n            module.createIf(\r\n              module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n                module.createGetLocal(thisLocalIndex, nativeSizeType)\r\n              ),\r\n              module.createSetLocal(thisLocalIndex,\r\n                this.makeAllocation(<Class>classInstance)\r\n              )\r\n            )\r\n          );\r\n          this.makeFieldInitialization(<Class>classInstance, stmts);\r\n        }\r\n\r\n        // implicitly return `this`\r\n        stmts.push(\r\n          module.createGetLocal(thisLocalIndex, nativeSizeType)\r\n        );\r\n      }\r\n\r\n      // check that super has been called if this is a derived class\r\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\r\n        this.error(\r\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\r\n          instance.prototype.declaration.range\r\n        );\r\n      }\r\n\r\n    // if this is a normal function, make sure that all branches return\r\n    } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\r\n      this.error(\r\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n        instance.prototype.signatureNode.returnType.range\r\n      );\r\n    }\r\n\r\n    return stmts;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var signature = instance.signature;\r\n    var bodyNode = instance.prototype.bodyNode;\r\n\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var funcRef: FunctionRef;\r\n\r\n    // concrete function\r\n    if (bodyNode) {\r\n\r\n      // must not be ambient\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          instance.identifierNode.range\r\n        );\r\n      }\r\n\r\n      // cannot have an annotated external name\r\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\r\n        let decoratorNodes = instance.decoratorNodes;\r\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          decorator.range\r\n        );\r\n      }\r\n\r\n      // compile body in this function's context\r\n      let previousFlow = this.currentFlow;\r\n      this.currentFlow = instance.flow;\r\n      let stmts = this.compileFunctionBody(instance);\r\n      this.currentFlow = previousFlow;\r\n\r\n      // create the function\r\n      funcRef = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        stmts.length\r\n          ? stmts.length == 1\r\n            ? stmts[0]\r\n            : module.createBlock(null, stmts, instance.signature.returnType.toNativeType())\r\n          : module.createNop()\r\n      );\r\n\r\n    // imported function\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          instance.identifierNode.range\r\n        );\r\n      }\r\n\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\r\n\r\n      // create the import\r\n      funcRef = module.addFunctionImport(\r\n        instance.internalName,\r\n        mangleImportName_moduleName,\r\n        mangleImportName_elementName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    instance.finalize(module, funcRef);\r\n    return true;\r\n  }\r\n\r\n  // classes\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> = makeMap(),\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = this.resolver.resolveClassInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      prototype.parent, // relative to itself\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n    var prototype = instance.prototype;\r\n    var staticMembers = (<ClassPrototype>prototype).members;\r\n    if (staticMembers) {\r\n      for (let element of staticMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.GLOBAL: {\r\n            this.compileGlobal(<Global>element);\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                (<FunctionPrototype>element).identifierNode\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY_PROTOTYPE: {\r\n            let getter = (<PropertyPrototype>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                getter.identifierNode\r\n              );\r\n            }\r\n            let setter = (<PropertyPrototype>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                setter.identifierNode\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n          }\r\n        }\r\n      }\r\n    }\r\n    var ctorInstance = instance.constructorInstance;\r\n    if (ctorInstance) this.compileFunction(ctorInstance);\r\n    var instanceMembers = instance.members;\r\n    if (instanceMembers) {\r\n      for (let element of instanceMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(instance.contextualTypeArguments),\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            element.set(CommonFlags.COMPILED);\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterInstance;\r\n            if (getter) this.compileFunction(getter);\r\n            let setter = (<Property>element).setterInstance;\r\n            if (setter) this.compileFunction(setter);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // memory\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  // function table\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func.internalName);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // statements\r\n\r\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\r\n    switch (statement.kind) {\r\n      case NodeKind.CLASSDECLARATION: {\r\n        let memberStatements = (<ClassDeclaration>statement).members;\r\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\r\n          this.compileTopLevelStatement(memberStatements[i], body);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.ENUMDECLARATION: {\r\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\r\n        assert(element.kind == ElementKind.ENUM);\r\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case NodeKind.NAMESPACEDECLARATION: {\r\n        let memberStatements = (<NamespaceDeclaration>statement).members;\r\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\r\n          this.compileTopLevelStatement(memberStatements[i], body);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        let declarations = (<VariableStatement>statement).declarations;\r\n        for (let i = 0, k = declarations.length; i < k; ++i) {\r\n          let element = this.program.getElementByDeclaration(declarations[i]);\r\n          assert(element.kind == ElementKind.GLOBAL);\r\n          if (\r\n            !element.is(CommonFlags.AMBIENT) && // delay imports\r\n            !element.hasDecorator(DecoratorFlags.LAZY)\r\n          ) this.compileGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.FIELDDECLARATION: {\r\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\r\n        if (element.kind == ElementKind.GLOBAL) { // static\r\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.EXPORT: {\r\n        if ((<ExportStatement>statement).normalizedPath != null) {\r\n          this.compileFileByPath(\r\n            <string>(<ExportStatement>statement).normalizedPath,\r\n            <StringLiteralExpression>(<ExportStatement>statement).path\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.IMPORT: {\r\n        this.compileFileByPath(\r\n          (<ImportStatement>statement).normalizedPath,\r\n          (<ImportStatement>statement).path\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTIONDECLARATION:\r\n      case NodeKind.METHODDECLARATION:\r\n      case NodeKind.INTERFACEDECLARATION:\r\n      case NodeKind.INDEXSIGNATUREDECLARATION:\r\n      case NodeKind.TYPEDECLARATION: break;\r\n      default: { // otherwise a top-level statement that is part of the start function's body\r\n        let stmt = this.compileStatement(statement);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  compileStatement(statement: Statement, isLastStatementInBody: bool = false): ExpressionRef {\r\n    var module = this.module;\r\n    var stmt: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        stmt = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        stmt = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        stmt = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastStatementInBody);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        stmt = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!stmt) stmt = module.createNop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // TODO: integrate inner type declaration into flow\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          statement.range\r\n        );\r\n        stmt = module.createUnreachable();\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        stmt = module.createUnreachable();\r\n      }\r\n    }\r\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\r\n    return stmt;\r\n  }\r\n\r\n  compileStatements(statements: Statement[], isBody: bool = false): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    var stmts = new Array<ExpressionRef>(numStatements);\r\n    stmts.length = 0;\r\n    var flow = this.currentFlow;\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\r\n      switch (getExpressionId(stmt)) {\r\n        case ExpressionId.Block: {\r\n          if (!getBlockName(stmt)) {\r\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: stmts.push(stmt);\r\n        case ExpressionId.Nop:\r\n      }\r\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.createUnreachable());\r\n        break;\r\n      }\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\r\n    var statements = statement.statements;\r\n    var outerFlow = this.currentFlow;\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n\r\n    var stmts = this.compileStatements(statements);\r\n    var stmt = stmts.length == 0\r\n      ? this.module.createNop()\r\n      : stmts.length == 1\r\n        ? stmts[0]\r\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\r\n\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.inherit(innerFlow);\r\n    this.currentFlow = outerFlow;\r\n    return stmt;\r\n  }\r\n\r\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var flow = this.currentFlow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.BREAKS);\r\n    return module.createBreak(breakLabel);\r\n  }\r\n\r\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFlow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES);\r\n    return module.createBreak(continueLabel);\r\n  }\r\n\r\n  compileDoStatement(statement: DoStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var outerFlow = this.currentFlow;\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n    // TODO: check if condition is always false and if so, omit it (just a block)\r\n\r\n    // Switch back to the parent flow\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    this.currentFlow = outerFlow;\r\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    outerFlow.inherit(innerFlow);\r\n\r\n    var block: ExpressionRef[] = [\r\n      module.createLoop(continueLabel,\r\n        terminated\r\n          ? body // skip trailing continue if unnecessary\r\n          : module.createBlock(null, [\r\n              body,\r\n              module.createBreak(continueLabel, condExpr)\r\n            ], NativeType.None)\r\n      )\r\n    ];\r\n    if (terminated) block.push(module.createUnreachable());\r\n    return module.createBlock(breakLabel, block);\r\n  }\r\n\r\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\r\n    return this.module.createNop();\r\n  }\r\n\r\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\r\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\r\n    if (this.currentType != Type.void) {\r\n      expr = this.module.createDrop(expr);\r\n      this.currentType = Type.void;\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileForStatement(statement: ForStatement): ExpressionRef {\r\n    // A for statement initiates a new branch with its own scoped variables\r\n    // possibly declared in its initializer, and break context.\r\n    var outerFlow = this.currentFlow;\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n    var repeatLabel = \"repeat|\" + label;\r\n\r\n    // Compile in correct order\r\n    var module = this.module;\r\n    var initExpr = statement.initializer\r\n      ? this.compileStatement(<Statement>statement.initializer)\r\n      : 0;\r\n    var condExpr: ExpressionRef = 0;\r\n    var alwaysTrue = false;\r\n    if (statement.condition) {\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n      // check if the condition is always true\r\n      let condPre = module.precomputeExpression(condExpr);\r\n      if (getExpressionId(condPre) == ExpressionId.Const) {\r\n        assert(getExpressionType(condPre) == NativeType.I32);\r\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\r\n        // TODO: could skip compilation if the condition is always false here, but beware that the\r\n        // initializer could still declare new 'var's that are used later on.\r\n      }\r\n      // recompile to original\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n    } else {\r\n      // omitted condition is always true\r\n      condExpr = module.createI32(1);\r\n      alwaysTrue = true;\r\n    }\r\n    var incrExpr = statement.incrementor\r\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n      : 0;\r\n    var bodyStatement = statement.statement;\r\n    var bodyExpr = bodyStatement.kind == NodeKind.BLOCK && (<BlockStatement>bodyStatement).statements.length == 1\r\n      ? this.compileStatement((<BlockStatement>bodyStatement).statements[0])\r\n      : this.compileStatement(bodyStatement);\r\n\r\n    // Switch back to the parent flow\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    this.currentFlow = outerFlow;\r\n    var usesContinue = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\r\n    else outerFlow.inheritConditional(innerFlow);\r\n\r\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\r\n    if (initExpr) breakBlock.push(initExpr);\r\n\r\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\r\n    if (usesContinue) {\r\n      repeatBlock.push(\r\n        module.createBlock(continueLabel, [ // inner 'continue' block\r\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\r\n          bodyExpr\r\n        ], NativeType.None)\r\n      );\r\n    } else { // can omit the 'continue' block\r\n      repeatBlock.push(\r\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\r\n      );\r\n      repeatBlock.push(bodyExpr);\r\n    }\r\n    if (incrExpr) repeatBlock.push(incrExpr);\r\n    repeatBlock.push(\r\n      module.createBreak(repeatLabel)\r\n    );\r\n\r\n    breakBlock.push(\r\n      module.createLoop(repeatLabel, module.createBlock(null, repeatBlock, NativeType.None))\r\n    );\r\n\r\n    return module.createBlock(breakLabel, breakBlock);\r\n  }\r\n\r\n  compileIfStatement(statement: IfStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n    var outerFlow = this.currentFlow;\r\n    var actualFunction = outerFlow.actualFunction;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    // Try to eliminate unnecesssary branches if the condition is constant\r\n    var condExprPrecomp = module.precomputeExpression(condExpr);\r\n    if (\r\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n      getExpressionType(condExprPrecomp) == NativeType.I32\r\n    ) {\r\n      return getConstValueI32(condExprPrecomp)\r\n        ? this.compileStatement(ifTrue)\r\n        : ifFalse\r\n          ? this.compileStatement(ifFalse)\r\n          : module.createNop();\r\n\r\n    // Otherwise recompile to the original and let the optimizer decide\r\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var ifTrueFlow = outerFlow.fork();\r\n    this.currentFlow = ifTrueFlow;\r\n    var ifTrueExpr = this.compileStatement(ifTrue);\r\n    ifTrueFlow.freeScopedLocals();\r\n    this.currentFlow = outerFlow;\r\n\r\n    var ifFalseExpr: ExpressionRef = 0;\r\n    if (ifFalse) {\r\n      let ifFalseFlow = outerFlow.fork();\r\n      this.currentFlow = ifFalseFlow;\r\n      ifFalseExpr = this.compileStatement(ifFalse);\r\n      ifFalseFlow.freeScopedLocals();\r\n      this.currentFlow = outerFlow;\r\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\r\n    } else {\r\n      outerFlow.inheritConditional(ifTrueFlow);\r\n    }\r\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\r\n  }\r\n\r\n  compileReturnStatement(statement: ReturnStatement, isLastStatementInBody: bool): ExpressionRef {\r\n    var module = this.module;\r\n    var expr: ExpressionRef = 0;\r\n    var flow = this.currentFlow;\r\n    var returnType = flow.returnType;\r\n\r\n    // Remember that this flow returns\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    if (statement.value) {\r\n      if (returnType == Type.void) {\r\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n          statement.value.range, this.currentType.toString(), returnType.toString()\r\n        );\r\n        this.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      expr = this.compileExpression(\r\n        statement.value,\r\n        returnType,\r\n        ConversionKind.IMPLICIT,\r\n        flow.actualFunction.is(CommonFlags.MODULE_EXPORT)\r\n          ? WrapMode.WRAP\r\n          : WrapMode.NONE\r\n      );\r\n\r\n      // Remember whether returning a properly wrapped value\r\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n\r\n    } else if (returnType != Type.void) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        statement.range, \"void\", returnType.toString()\r\n      );\r\n      expr = module.createUnreachable();\r\n    }\r\n\r\n    // If the last statement anyway, make it the block's return value\r\n    if (isLastStatementInBody) return expr ? expr : module.createNop();\r\n\r\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) return module.createBreak(assert(flow.inlineReturnLabel), 0, expr);\r\n\r\n    return module.createReturn(expr);\r\n  }\r\n\r\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n    if (!numCases) {\r\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    }\r\n\r\n    // Everything within a switch uses the same break context\r\n    var outerFlow = this.currentFlow;\r\n    var context = outerFlow.pushBreakLabel();\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = outerFlow.getTempLocal(Type.u32, false);\r\n    var tempLocalIndex = tempLocal.index;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.createSetLocal( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.createBinary(BinaryOp.EqI32,\r\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    outerFlow.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\r\n    var alwaysReturns = true;\r\n    var alwaysReturnsWrapped = true;\r\n    var alwaysThrows = true;\r\n    var alwaysAllocates = true;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n\r\n      // Each switch case initiates a new branch\r\n      let innerFlow = outerFlow.fork();\r\n      this.currentFlow = innerFlow;\r\n      let breakLabel = \"break|\" + context;\r\n      innerFlow.breakLabel = breakLabel;\r\n\r\n      let isLast = i == numCases - 1;\r\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\r\n      stmts[0] = currentBlock;\r\n      let count = 1;\r\n      let terminated = false;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        let stmt = this.compileStatement(statements[j]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          stmts[count++] = stmt;\r\n          if (innerFlow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n            terminated = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      stmts.length = count;\r\n      if (terminated || isLast) {\r\n        if (!innerFlow.is(FlowFlags.RETURNS)) alwaysReturns = false;\r\n        if (!innerFlow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\r\n        if (!innerFlow.is(FlowFlags.THROWS)) alwaysThrows = false;\r\n        if (!innerFlow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\r\n      }\r\n\r\n      // Switch back to the parent flow\r\n      innerFlow.unset(\r\n        FlowFlags.BREAKS |\r\n        FlowFlags.CONDITIONALLY_BREAKS\r\n      );\r\n      innerFlow.freeScopedLocals();\r\n      this.currentFlow = outerFlow;\r\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\r\n    }\r\n    outerFlow.popBreakLabel();\r\n\r\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\r\n    if (defaultIndex >= 0) {\r\n      if (alwaysReturns) outerFlow.set(FlowFlags.RETURNS);\r\n      if (alwaysReturnsWrapped) outerFlow.set(FlowFlags.RETURNS_WRAPPED);\r\n      if (alwaysThrows) outerFlow.set(FlowFlags.THROWS);\r\n      if (alwaysAllocates) outerFlow.set(FlowFlags.ALLOCATES);\r\n    }\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\r\n    var flow = this.currentFlow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS);\r\n\r\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    return compileAbort(this, null, statement);\r\n  }\r\n\r\n  compileTryStatement(statement: TryStatement): ExpressionRef {\r\n    // TODO: can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\r\n  compileVariableStatement(statement: VariableStatement): ExpressionRef {\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n    var flow = this.currentFlow;\r\n    var initializers = new Array<ExpressionRef>();\r\n    var resolver = this.resolver;\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let initExpr: ExpressionRef = 0;\r\n      if (declaration.type) {\r\n        type = resolver.resolveType( // reports\r\n          declaration.type,\r\n          flow.actualFunction,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          initExpr = this.compileExpression( // reports\r\n            declaration.initializer,\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\r\n        initExpr = this.compileExpressionRetainType( // reports\r\n          declaration.initializer,\r\n          Type.void,\r\n          WrapMode.NONE\r\n        );\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n      let isInlined = false;\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        if (initExpr) {\r\n          initExpr = this.module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\r\n            let local = new Local(name, -1, type, flow.parentFunction);\r\n            switch (getExpressionType(initExpr)) {\r\n              case NativeType.I32: {\r\n                local.setConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI32(initExpr),\r\n                    0\r\n                  ),\r\n                  type\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local.setConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI64Low(initExpr),\r\n                    getConstValueI64High(initExpr)\r\n                  ),\r\n                  type\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                return this.module.createUnreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = flow.scopedLocals;\r\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return this.module.createUnreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isInlined = true;\r\n          } else {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n      if (!isInlined) {\r\n        let local: Local;\r\n        if (\r\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\r\n          flow.is(FlowFlags.INLINE_CONTEXT)\r\n        ) { // here: not top-level\r\n          local = flow.addScopedLocal(name, type, false, declaration.name); // reports if duplicate\r\n        } else {\r\n          if (flow.lookupLocal(name)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, name\r\n            );\r\n            continue;\r\n          }\r\n          local = flow.parentFunction.addLocal(type, name, declaration);\r\n        }\r\n        if (initExpr) {\r\n          initializers.push(\r\n            this.compileAssignmentWithValue(declaration.name, initExpr)\r\n          );\r\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\r\n          }\r\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped(local.index, true); // zero\r\n        }\r\n      }\r\n    }\r\n    return initializers.length   // we can unwrap these here because the\r\n      ? initializers.length == 1 // source didn't tell us exactly what to do\r\n        ? initializers[0]\r\n        : this.module.createBlock(null, initializers, NativeType.None)\r\n      : 0;\r\n  }\r\n\r\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n  }\r\n\r\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    // The condition does not yet initialize a branch\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    // Try to eliminate unnecesssary loops if the condition is constant\r\n    var condExprPrecomp = module.precomputeExpression(condExpr);\r\n    if (\r\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n      getExpressionType(condExprPrecomp) == NativeType.I32\r\n    ) {\r\n      if (!getConstValueI32(condExprPrecomp)) return module.createNop();\r\n\r\n    // Otherwise recompile to the original and let the optimizer decide\r\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n    }\r\n\r\n    // Statements initiate a new branch with its own break context\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var alwaysTrue = false; // TODO\r\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\r\n\r\n    // Switch back to the parent flow\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    this.currentFlow = outerFlow;\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\r\n    else outerFlow.inheritConditional(innerFlow);\r\n\r\n    return module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createIf(condExpr,\r\n          terminated\r\n            ? body // skip trailing continue if unnecessary\r\n            : module.createBlock(null, [\r\n                body,\r\n                module.createBreak(continueLabel)\r\n              ], NativeType.None)\r\n        )\r\n      )\r\n    ]);\r\n  }\r\n\r\n  // expressions\r\n\r\n  /**\r\n   * Compiles the value of an inlined constant element.\r\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\r\n   *  is precomputed according to context.\r\n   */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    retainType: bool\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !retainType &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.createI32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.createI64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.createI64(0);\r\n      }\r\n      case TypeKind.F64: {\r\n        // monkey-patch for converting built-in floats to f32 implicitly\r\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\r\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\r\n        }\r\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\r\n        this.currentType = Type.f32;\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n    var expr: ExpressionRef;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.SUPER:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(\r\n          <IdentifierExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.INSTANCEOF: {\r\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n    var currentType = this.currentType;\r\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\r\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\r\n      this.currentType = contextualType;\r\n    } else if (wrapMode == WrapMode.WRAP) {\r\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\r\n    }\r\n\r\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n    return expr;\r\n  }\r\n\r\n  compileExpressionRetainType(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.compileExpression(\r\n      expression,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      wrapMode\r\n    );\r\n  }\r\n\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.module.precomputeExpression(\r\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\r\n    );\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    fromType: Type,\r\n    toType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    assert(conversionKind != ConversionKind.NONE);\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\r\n\r\n    if (!fromType.isAssignableTo(toType)) {\r\n      if (conversionKind == ConversionKind.IMPLICIT) {\r\n        this.error(\r\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n          reportNode.range, fromType.toString(), toType.toString()\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType == Type.bool) {\r\n            expr = module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n            wrapMode = WrapMode.NONE;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType == Type.bool) {\r\n            expr = module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n            wrapMode = WrapMode.NONE;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.createDrop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      // i64 to ...\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32 or smaller\r\n        if (toType == Type.bool) {\r\n          expr = module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n          wrapMode = WrapMode.NONE;\r\n        } else if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\r\n        }\r\n\r\n      // i32 or smaller to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.createUnary(\r\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\r\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\r\n        );\r\n        wrapMode = WrapMode.NONE;\r\n\r\n      // i32 to i32\r\n      } else {\r\n        // small i32 to ...\r\n        if (fromType.is(TypeFlags.SHORT)) {\r\n          // small i32 to larger i32\r\n          if (fromType.size < toType.size) {\r\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\r\n            wrapMode = WrapMode.NONE;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return wrapMode == WrapMode.WRAP\r\n      ? this.ensureSmallIntegerWrap(expr, toType)\r\n      : expr;\r\n  }\r\n\r\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\r\n    switch (expression.assertionKind) {\r\n      case AssertionKind.PREFIX:\r\n      case AssertionKind.AS: {\r\n        let toType = this.resolver.resolveType( // reports\r\n          assert(expression.toType),\r\n          this.currentFlow.actualFunction,\r\n          this.currentFlow.contextualTypeArguments\r\n        );\r\n        if (!toType) return this.module.createUnreachable();\r\n        return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n      }\r\n      case AssertionKind.NONNULL: {\r\n        assert(!expression.toType);\r\n        let expr = this.compileExpressionRetainType(expression.expression, contextualType, WrapMode.NONE);\r\n        this.currentType = this.currentType.nonNullableType;\r\n        return expr;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  private f32ModInstance: Function | null = null;\r\n  private f64ModInstance: Function | null = null;\r\n  private f32PowInstance: Function | null = null;\r\n  private f64PowInstance: Function | null = null;\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n\r\n    var operator = expression.operator;\r\n    switch (operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '==' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.V128: {\r\n            expr = module.createUnary(UnaryOp.AllTrueVecI8x16,\r\n              module.createBinary(BinaryOp.EqVecI8x16, leftExpr, rightExpr)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '!=' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.V128: {\r\n            expr = module.createUnary(UnaryOp.AnyTrueVecI8x16,\r\n              module.createBinary(BinaryOp.NeVecI8x16, leftExpr, rightExpr)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // addition might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // subtraction might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK_ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.POW);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        let instance: Function | null;\r\n\r\n        // Mathf.pow if lhs is f32 (result is f32)\r\n        if (this.currentType.kind == TypeKind.F32) {\r\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f32PowInstance)) {\r\n            let namespace = this.program.lookupGlobal(LibrarySymbols.Mathf);\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(LibrarySymbols.pow) : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n\r\n        // Math.pow otherwise (result is f64)\r\n        // TODO: should the result be converted back?\r\n        } else {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            this.currentType,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE,\r\n            left\r\n          );\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f64PowInstance)) {\r\n            let namespace = this.program.lookupGlobal(LibrarySymbols.Math);\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(LibrarySymbols.pow) : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n        }\r\n        if (!(instance && this.compileFunction(instance))) {\r\n          expr = module.createUnreachable();\r\n        } else {\r\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\r\n          case TypeKind.I16: // ^\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.REM);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let instance = this.f32ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.lookupGlobal(LibrarySymbols.Mathf);\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(LibrarySymbols.mod) : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let instance = this.f64ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.lookupGlobal(LibrarySymbols.Math);\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(LibrarySymbols.mod) : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n          }\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overloadd\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            rightExpr,\r\n            expr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFlow;\r\n          let tempLocal = flow.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            rightExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            )\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\r\n          expr = this.module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            expr,\r\n            rightExpr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFlow;\r\n          let tempLocal = flow.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            ),\r\n            rightExpr\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  compileUnaryOverload(\r\n    operatorInstance: Function,\r\n    value: Expression,\r\n    valueExpr: ExpressionRef,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\r\n      argumentExpressions = [];\r\n    } else {\r\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\r\n    }\r\n    return this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg\r\n    );\r\n  }\r\n\r\n  compileBinaryOverload(\r\n    operatorInstance: Function,\r\n    left: Expression,\r\n    leftExpr: ExpressionRef,\r\n    right: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\r\n      argumentExpressions = [ right ];\r\n    } else {\r\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\r\n    }\r\n    var ret = this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg\r\n    );\r\n    return ret;\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var program = this.program;\r\n    var resolver = program.resolver;\r\n    var flow = this.currentFlow;\r\n    var target = resolver.resolveExpression(expression, flow); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var targetType: Type;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\r\n        // fall-through\r\n      }\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        targetType = (<VariableLikeElement>target).type;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\r\n        if (!setterPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>target).internalName\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!setterInstance) return this.module.createUnreachable();\r\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n        targetType = setterInstance.signature.parameterTypes[0];\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let setterInstance = (<Property>target).setterInstance;\r\n        if (!setterInstance) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>target).internalName\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n        targetType = setterInstance.signature.parameterTypes[0];\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (resolver.currentElementExpression) { // indexed access\r\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n            if (!indexedGet) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            }\r\n            return this.module.createUnreachable();\r\n          }\r\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\r\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    assert(targetType != Type.void);\r\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    return this.compileAssignmentWithValue(\r\n      expression,\r\n      valueExpr,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileAssignmentWithValue(\r\n    expression: Expression,\r\n    valueWithCorrectType: ExpressionRef,\r\n    tee: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var target = this.resolver.resolveExpression(expression, flow); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let type = (<Local>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\r\n        }\r\n        return tee\r\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\r\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\r\n        let type = (<Global>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range,\r\n            target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\r\n        if (tee) {\r\n          let nativeType = type.toNativeType();\r\n          let internalName = target.internalName;\r\n          return module.createBlock(null, [ // emulated teeGlobal\r\n            module.createSetGlobal(internalName, valueWithCorrectType),\r\n            module.createGetGlobal(internalName, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let initializerNode = (<Field>target).initializerNode;\r\n        if (\r\n          (<Field>target).is(CommonFlags.READONLY) &&\r\n          !(\r\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\r\n            initializerNode\r\n          )\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Field>target).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let thisExpression = assert(this.resolver.currentThisExpression);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        let type = (<Field>target).type;\r\n        this.currentType = tee ? type : Type.void;\r\n        let nativeType = type.toNativeType();\r\n        if (type.kind == TypeKind.BOOL) {\r\n          // make sure bools are wrapped (usually are) when storing as 8 bits\r\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\r\n        }\r\n        if (tee) {\r\n          let flow = this.currentFlow;\r\n          let tempLocal = flow.getAndFreeTempLocal(\r\n            type,\r\n            !flow.canOverflow(valueWithCorrectType, type)\r\n          );\r\n          let tempLocalIndex = tempLocal.index;\r\n          // TODO: simplify if valueWithCorrectType has no side effects\r\n          // TODO: call __gc_link here if a GC is present\r\n          return module.createBlock(null, [\r\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\r\n            module.createStore(\r\n              type.byteSize,\r\n              thisExpr,\r\n              module.createGetLocal(tempLocalIndex, nativeType),\r\n              nativeType,\r\n              (<Field>target).memoryOffset\r\n            ),\r\n            module.createGetLocal(tempLocalIndex, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          // TODO: call __gc_link here if a GC is present\r\n          return module.createStore(\r\n            type.byteSize,\r\n            thisExpr,\r\n            valueWithCorrectType,\r\n            nativeType,\r\n            (<Field>target).memoryOffset\r\n          );\r\n        }\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\r\n        if (!setterPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!setterInstance) return module.createUnreachable();\r\n        // call just the setter if the return value isn't of interest\r\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\r\n        // otherwise call the setter first, then the getter\r\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\r\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!getterInstance) return module.createUnreachable();\r\n        let returnType = getterInstance.signature.returnType;\r\n        let nativeReturnType = returnType.toNativeType();\r\n        return module.createBlock(null, [\r\n          this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\r\n          this.makeCallDirect(getterInstance) // sets currentType\r\n        ], nativeReturnType);\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let setterInstance = (<Property>target).setterInstance;\r\n        if (!setterInstance) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        // call just the setter if the return value isn't of interest\r\n        if (!tee) {\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            assert(this.resolver.currentThisExpression),\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\r\n        }\r\n        // otherwise call the setter first, then the getter\r\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\r\n        let returnType = getterInstance.signature.returnType;\r\n        let nativeReturnType = returnType.toNativeType();\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          assert(this.resolver.currentThisExpression),\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        let tempLocal = flow.getAndFreeTempLocal(returnType, false);\r\n        let tempLocalIndex = tempLocal.index;\r\n        return module.createBlock(null, [\r\n          this.makeCallDirect(setterInstance, [ // set and remember the target\r\n            module.createTeeLocal(tempLocalIndex, thisExpr),\r\n            valueWithCorrectType\r\n          ]),\r\n          this.makeCallDirect(getterInstance, [ // get from remembered target\r\n            module.createGetLocal(tempLocalIndex, nativeReturnType)\r\n          ])\r\n        ], nativeReturnType);\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.resolver.currentElementExpression;\r\n        if (elementExpression) {\r\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              expression.range, target.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              expression.range, target.internalName\r\n            );\r\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\r\n            return module.createUnreachable();\r\n          }\r\n          let targetType = (<Class>target).type;\r\n          let thisExpression = assert(this.resolver.currentThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          let elementExpr = this.compileExpression(\r\n            elementExpression,\r\n            Type.i32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          if (tee) {\r\n            let tempLocalTarget = flow.getTempLocal(targetType, false);\r\n            let tempLocalElement = flow.getAndFreeTempLocal(this.currentType, false);\r\n            let returnType = indexedGet.signature.returnType;\r\n            flow.freeTempLocal(tempLocalTarget);\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(indexedSet, [\r\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\r\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(indexedGet, [\r\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n              ])\r\n            ], returnType.toNativeType());\r\n          } else {\r\n            return this.makeCallDirect(indexedSet, [\r\n              thisExpr,\r\n              elementExpr,\r\n              valueWithCorrectType\r\n            ]);\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // handle call to super\r\n    if (expression.expression.kind == NodeKind.SUPER) {\r\n      let flow = this.currentFlow;\r\n      let actualFunction = flow.actualFunction;\r\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n        this.error(\r\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n\r\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      let baseClassInstance = assert((<Class>classInstance).base);\r\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n      let nativeSizeType = this.options.nativeSizeType;\r\n\r\n      // {\r\n      //   this = super(this || <ALLOC>, ...args)\r\n      //   this.a = X\r\n      //   this.b = Y\r\n      // }\r\n      let stmts: ExpressionRef[] = [\r\n        module.createSetLocal(thisLocal.index,\r\n          this.compileCallDirect(\r\n            this.ensureConstructor(baseClassInstance, expression),\r\n            expression.arguments,\r\n            expression,\r\n            module.createIf(\r\n              module.createGetLocal(thisLocal.index, nativeSizeType),\r\n              module.createGetLocal(thisLocal.index, nativeSizeType),\r\n              this.makeAllocation(<Class>classInstance)\r\n            )\r\n          )\r\n        )\r\n      ];\r\n      this.makeFieldInitialization(<Class>classInstance, stmts);\r\n\r\n      // check that super had been called before accessing allocating `this`\r\n      if (flow.isAny(\r\n        FlowFlags.ALLOCATES |\r\n        FlowFlags.CONDITIONALLY_ALLOCATES\r\n      )) {\r\n        this.error(\r\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\r\n      this.currentType = Type.void;\r\n      return module.createBlock(null, stmts);\r\n    }\r\n\r\n    // otherwise resolve normally\r\n    var target = this.resolver.resolveExpression(expression.expression, flow); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (target.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n        let typeArguments = expression.typeArguments;\r\n\r\n        // builtins handle present respectively omitted type arguments on their own\r\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\r\n        }\r\n\r\n        let instance: Function | null = null;\r\n\r\n        // resolve generic call if type arguments have been provided\r\n        if (typeArguments) {\r\n          if (!prototype.is(CommonFlags.GENERIC)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              expression.expression.range, prototype.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          instance = this.resolver.resolveFunctionInclTypeArguments(\r\n            prototype,\r\n            typeArguments,\r\n            flow.actualFunction.parent, // relative to caller\r\n            makeMap<string,Type>(flow.contextualTypeArguments),\r\n            expression\r\n          );\r\n\r\n        // infer generic call if type arguments have been omitted\r\n        } else if (prototype.is(CommonFlags.GENERIC)) {\r\n          let inferredTypes = new Map<string,Type | null>();\r\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\r\n          let numTypeParameters = typeParameterNodes.length;\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            inferredTypes.set(typeParameterNodes[i].name.text, null);\r\n          }\r\n          // let numInferred = 0;\r\n          let parameterNodes = prototype.signatureNode.parameters;\r\n          let numParameters = parameterNodes.length;\r\n          let argumentNodes = expression.arguments;\r\n          let numArguments = argumentNodes.length;\r\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\r\n          for (let i = 0; i < numParameters; ++i) {\r\n            let typeNode = parameterNodes[i].type;\r\n            let templateName = typeNode.kind == NodeKind.TYPE && !(<TypeNode>typeNode).name.next\r\n              ? (<TypeNode>typeNode).name.identifier.text\r\n              : null;\r\n            let argumentExpression = i < numArguments\r\n              ? argumentNodes[i]\r\n              : parameterNodes[i].initializer;\r\n            if (!argumentExpression) { // missing initializer -> too few arguments\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                expression.range, numParameters.toString(10), numArguments.toString(10)\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            if (templateName !== null && inferredTypes.has(templateName)) {\r\n              let inferredType = inferredTypes.get(templateName);\r\n              if (inferredType) {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\r\n                let commonType: Type | null;\r\n                if (!(commonType = Type.commonDenominator(inferredType, this.currentType, true))) {\r\n                  if (!(commonType = Type.commonDenominator(inferredType, this.currentType, false))) {\r\n                    this.error(\r\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n                      parameterNodes[i].type.range, this.currentType.toString(), inferredType.toString()\r\n                    );\r\n                    return module.createUnreachable();\r\n                  }\r\n                }\r\n                inferredType = commonType;\r\n              } else {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\r\n                inferredType = this.currentType;\r\n                // ++numInferred;\r\n              }\r\n              inferredTypes.set(templateName, inferredType);\r\n            } else {\r\n              let concreteType = this.resolver.resolveType(\r\n                parameterNodes[i].type,\r\n                flow.actualFunction,\r\n                flow.contextualTypeArguments\r\n              );\r\n              if (!concreteType) return module.createUnreachable();\r\n              argumentExprs[i] = this.compileExpression(\r\n                argumentExpression,\r\n                concreteType,\r\n                ConversionKind.IMPLICIT,\r\n                WrapMode.NONE\r\n              );\r\n            }\r\n          }\r\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            let inferredType = assert(inferredTypes.get(typeParameterNodes[i].name.text)); // TODO\r\n            resolvedTypeArguments[i] = inferredType;\r\n          }\r\n          instance = this.resolver.resolveFunction(\r\n            prototype,\r\n            resolvedTypeArguments,\r\n            makeMap<string,Type>(flow.contextualTypeArguments)\r\n          );\r\n          if (!instance) return this.module.createUnreachable();\r\n          return this.makeCallDirect(instance, argumentExprs);\r\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\r\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\r\n          // so inlining can be performed in `makeCallDirect` instead?\r\n\r\n        // otherwise resolve the non-generic call as usual\r\n        } else {\r\n          instance = this.resolver.resolveFunction(prototype, null);\r\n        }\r\n        if (!instance) return this.module.createUnreachable();\r\n\r\n        // compile 'this' expression if an instance method\r\n        let thisExpr: ExpressionRef = 0;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          thisExpr = this.compileExpressionRetainType(\r\n            assert(this.resolver.currentThisExpression),\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n\r\n        return this.compileCallDirect(\r\n          instance,\r\n          expression.arguments,\r\n          expression,\r\n          thisExpr\r\n        );\r\n      }\r\n\r\n      // indirect call: index argument with signature (non-generic, can't be inlined)\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>target).type.signatureReference) {\r\n          if ((<Local>target).is(CommonFlags.INLINED)) {\r\n            indexArg = module.createI32(i64_low((<Local>target).constantIntegerValue));\r\n          } else {\r\n            indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\r\n          }\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>target).type.signatureReference) {\r\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>target).type;\r\n        if (signature = type.signatureReference) {\r\n          let thisExpression = assert(this.resolver.currentThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          indexArg = module.createLoad(\r\n            4,\r\n            false,\r\n            thisExpr,\r\n            NativeType.I32,\r\n            (<Field>target).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>target).signature;\r\n        indexArg = this.compileExpression(\r\n          expression.expression,\r\n          (<FunctionTarget>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        break;\r\n      }\r\n\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\r\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\r\n        if (!getterInstance) return module.createUnreachable();\r\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\r\n        signature = this.currentType.signatureReference;\r\n        if (!signature) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, this.currentType.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let getterInstance = assert((<Property>target).getterInstance);\r\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\r\n          this.compileExpressionRetainType(\r\n            assert(this.resolver.currentThisExpression),\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          )\r\n        );\r\n        signature = this.currentType.signatureReference;\r\n        if (!signature) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, this.currentType.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        break;\r\n      }\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression\r\n    );\r\n  }\r\n\r\n  private compileCallExpressionBuiltin(\r\n    prototype: FunctionPrototype,\r\n    expression: CallExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var typeArguments: Type[] | null = null;\r\n\r\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\r\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\r\n    var typeParameterNodes = prototype.typeParameterNodes;\r\n    var typeArgumentNodes = expression.typeArguments;\r\n    if (expression.typeArguments) {\r\n      if (!prototype.is(CommonFlags.GENERIC)) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          expression.range, prototype.internalName\r\n        );\r\n      }\r\n      typeArguments = this.resolver.resolveTypeArguments(\r\n        assert(typeParameterNodes),\r\n        typeArgumentNodes,\r\n        this.currentFlow.actualFunction.parent,\r\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n\r\n    // now compile the builtin, which usually returns a block of code that replaces the call.\r\n    var expr = compileBuiltinCall(\r\n      this,\r\n      prototype,\r\n      typeArguments,\r\n      expression.arguments,\r\n      contextualType,\r\n      expression\r\n    );\r\n    if (!expr) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    // Inline if explicitly requested\r\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      if (this.currentInlineFunctions.includes(instance)) {\r\n        this.warning(\r\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\r\n          reportNode.range, instance.internalName\r\n        );\r\n      } else {\r\n        this.currentInlineFunctions.push(instance);\r\n        let expr = this.compileCallInlinePrechecked(instance, argumentExpressions, thisArg);\r\n        this.currentInlineFunctions.pop();\r\n        return expr;\r\n      }\r\n    }\r\n\r\n    // Otherwise compile to just a call\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallDirect(instance, operands);\r\n  }\r\n\r\n  // Depends on being pre-checked in compileCallDirect\r\n  private compileCallInlinePrechecked(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // Create a new inline flow and use it to compile the function as a block\r\n    var previousFlow = this.currentFlow;\r\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\r\n\r\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\r\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\r\n    var body = [];\r\n\r\n    if (thisArg) {\r\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      let thisType = assert(instance.signature.thisType);\r\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, false);\r\n      body.push(\r\n        module.createSetLocal(thisLocal.index, thisArg)\r\n      );\r\n      let baseInstance = (<Class>classInstance).base;\r\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\r\n    }\r\n\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i) {\r\n      let paramExpr = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let argumentLocal = flow.addScopedLocal(\r\n        signature.getParameterName(i),\r\n        parameterTypes[i],\r\n        !previousFlow.canOverflow(paramExpr, parameterTypes[i])\r\n      );\r\n      body.push(\r\n        module.createSetLocal(argumentLocal.index, paramExpr)\r\n      );\r\n    }\r\n\r\n    // Compile optional parameter initializers in the scope of the inlined flow\r\n    this.currentFlow = flow;\r\n    var numParameters = signature.parameterTypes.length;\r\n    for (let i = numArguments; i < numParameters; ++i) {\r\n      let initExpr = this.compileExpression(\r\n        assert(instance.prototype.signatureNode.parameters[i].initializer),\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.WRAP\r\n      );\r\n      let argumentLocal = flow.addScopedLocal(\r\n        signature.getParameterName(i),\r\n        parameterTypes[i],\r\n        !flow.canOverflow(initExpr, parameterTypes[i])\r\n      );\r\n      body.push(\r\n        module.createSetLocal(argumentLocal.index, initExpr)\r\n      );\r\n    }\r\n\r\n    // Compile the called function's body in the scope of the inlined flow\r\n    {\r\n      let stmts = this.compileFunctionBody(instance);\r\n      for (let i = 0, k = stmts.length; i < k; ++i) body.push(stmts[i]);\r\n    }\r\n\r\n    // Free any new scoped locals and reset to the original flow\r\n    flow.freeScopedLocals();\r\n    var returnType = flow.returnType;\r\n    this.currentFlow = previousFlow;\r\n    this.currentType = returnType;\r\n\r\n    // Create an outer block that we can break to when returning a value out of order\r\n    return module.createBlock(flow.inlineReturnLabel, body, returnType.toNativeType());\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.signatureNode.parameters;\r\n    var commonReturnType = originalSignature.returnType;\r\n    var commonThisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampoline = new Function(\r\n      original.name + \"|trampoline\",\r\n      original.prototype,\r\n      trampolineSignature,\r\n      original.contextualTypeArguments\r\n    );\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFlow = this.currentFlow;\r\n    this.currentFlow = trampoline.flow;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.createBlock(names[0], [\r\n      module.createBlock(\"outOfRange\", [\r\n        module.createSwitch(names, \"outOfRange\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.createBinary(\r\n                BinaryOp.SubI32,\r\n                module.createGetGlobal(CompilerSymbols.argc, NativeType.I32),\r\n                module.createI32(minArguments)\r\n              )\r\n            : module.createGetGlobal(CompilerSymbols.argc, NativeType.I32)\r\n        )\r\n      ]),\r\n      module.createUnreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      let declaration = originalParameterDeclarations[minArguments + i];\r\n      let initializer = declaration.initializer;\r\n      let initExpr: ExpressionRef;\r\n      if (initializer) {\r\n        initExpr = module.createSetLocal(operandIndex,\r\n          this.compileExpression(\r\n            initializer,\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP\r\n          )\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\r\n          declaration.range\r\n        );\r\n        initExpr = module.createUnreachable();\r\n      }\r\n      body = module.createBlock(names[i + 1], [\r\n        body,\r\n        initExpr,\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\r\n    }\r\n    this.currentFlow = previousFlow;\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var funcRef = module.addFunction(\r\n      trampoline.internalName,\r\n      this.ensureFunctionType(\r\n        trampolineSignature.parameterTypes,\r\n        trampolineSignature.returnType,\r\n        trampolineSignature.thisType\r\n      ),\r\n      typesToNativeTypes(trampoline.additionalLocals),\r\n      module.createBlock(null, [\r\n        body,\r\n        module.createCall(\r\n          originalName,\r\n          forwardedOperands,\r\n          commonReturnType.toNativeType()\r\n        )\r\n      ], commonReturnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper global is present and returns its name. */\r\n  private ensureArgcVar(): string {\r\n    if (!this.argcVar) {\r\n      let module = this.module;\r\n      this.argcVar = module.addGlobal(\r\n        CompilerSymbols.argc,\r\n        NativeType.I32,\r\n        true,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n    return CompilerSymbols.argc;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper setter is present and returns its name. */\r\n  private ensureArgcSet(): string {\r\n    var internalName = CompilerSymbols.setargc;\r\n    if (!this.argcSet) {\r\n      let module = this.module;\r\n      this.argcSet = module.addFunction(internalName,\r\n        this.ensureFunctionType([ Type.u32 ], Type.void),\r\n        null,\r\n        module.createSetGlobal(this.ensureArgcVar(),\r\n          module.createGetLocal(0, NativeType.I32)\r\n        )\r\n      );\r\n      module.addFunctionExport(internalName, \"_setargc\");\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.createUnreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      let parameterNodes = instance.prototype.signatureNode.parameters;\r\n      assert(parameterNodes.length == parameterTypes.length);\r\n      let allOptionalsAreConstant = true;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        let initializer = parameterNodes[i].initializer;\r\n        if (!(initializer && nodeIsConstantValue(initializer.kind))) {\r\n          allOptionalsAreConstant = false;\r\n          break;\r\n        }\r\n      }\r\n      if (allOptionalsAreConstant) { // inline into the call\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(\r\n            this.compileExpression(\r\n              <Expression>parameterNodes[i].initializer,\r\n              parameterTypes[i],\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE\r\n            )\r\n          );\r\n        }\r\n      } else { // otherwise fill up with zeroes and call the trampoline\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(parameterTypes[i].toNativeZero(module));\r\n        }\r\n        if (!isCallImport) {\r\n          let original = instance;\r\n          instance = this.ensureTrampoline(instance);\r\n          if (!this.compileFunction(instance)) return module.createUnreachable();\r\n          instance.flow.flags = original.flow.flags;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          this.currentType = returnType;\r\n          return module.createBlock(null, [\r\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\r\n            module.createCall(instance.internalName, operands, nativeReturnType)\r\n          ], nativeReturnType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // otherwise just call through\r\n    this.currentType = returnType;\r\n    return module.createCall(instance.internalName, operands, returnType.toNativeType());\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    this.currentType = returnType;\r\n    return module.createBlock(null, [\r\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\r\n        module.createI32(numArguments)\r\n      ),\r\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\r\n    ], returnType.toNativeType()); // not necessarily wrapped\r\n  }\r\n\r\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(\r\n        expressions[i],\r\n        Type.void, // drop all\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(\r\n      expressions[numExpressions],\r\n      contextualType, // except last\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE\r\n    );\r\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\r\n    var target = this.resolver.resolveElementAccessExpression(\r\n      expression,\r\n      this.currentFlow,\r\n      contextualType\r\n    ); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS: {\r\n        let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            expression.expression.range, (<Class>target).internalName\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        let thisArg = this.compileExpression(\r\n          expression.expression,\r\n          (<Class>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        return this.compileCallDirect(indexedGet, [\r\n          expression.elementExpression\r\n        ], expression, thisArg);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileFunctionExpression(\r\n    expression: FunctionExpression,\r\n    contextualSignature: Signature | null\r\n  ): ExpressionRef {\r\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\r\n    assert(!declaration.typeParameters); // function expression cannot be generic\r\n    var flow = this.currentFlow;\r\n    var actualFunction = flow.actualFunction;\r\n    var prototype = new FunctionPrototype(\r\n      declaration.name.text.length\r\n        ? declaration.name.text\r\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\r\n      actualFunction,\r\n      declaration,\r\n      DecoratorFlags.NONE\r\n    );\r\n    var instance: Function | null;\r\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\r\n\r\n    // compile according to context. this differs from a normal function in that omitted parameter\r\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\r\n    if (contextualSignature) {\r\n      let signatureNode = prototype.signatureNode;\r\n      let parameterNodes = signatureNode.parameters;\r\n      let numPresentParameters = parameterNodes.length;\r\n\r\n      // must not require more than the maximum number of parameters\r\n      let parameterTypes = contextualSignature.parameterTypes;\r\n      let numParameters = parameterTypes.length;\r\n      if (numPresentParameters > numParameters) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          expression.range, numParameters.toString(), numPresentParameters.toString()\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n\r\n      // check non-omitted parameter types\r\n      let parameterNames = new Array<string>(numPresentParameters);\r\n      for (let i = 0; i < numPresentParameters; ++i) {\r\n        let parameterNode = parameterNodes[i];\r\n        parameterNames[i] = parameterNode.name.text; // use actual name\r\n        if (!isTypeOmitted(parameterNode.type)) {\r\n          let resolvedType = this.resolver.resolveType(\r\n            parameterNode.type,\r\n            actualFunction.parent,\r\n            contextualTypeArguments\r\n          );\r\n          if (!resolvedType) return this.module.createUnreachable();\r\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\r\n            );\r\n            return this.module.createUnreachable();\r\n          }\r\n        }\r\n        // any unused parameters are inherited but ignored\r\n      }\r\n\r\n      // check non-omitted return type\r\n      let returnType = contextualSignature.returnType;\r\n      if (!isTypeOmitted(signatureNode.returnType)) {\r\n        let resolvedType = this.resolver.resolveType(\r\n          signatureNode.returnType,\r\n          actualFunction.parent,\r\n          contextualTypeArguments\r\n        );\r\n        if (!resolvedType) return this.module.createUnreachable();\r\n        if (\r\n          returnType == Type.void\r\n            ? resolvedType != Type.void\r\n            : !resolvedType.isStrictlyAssignableTo(returnType)\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n      }\r\n\r\n      // check explicit this type\r\n      let thisType = contextualSignature.thisType;\r\n      let thisTypeNode = signatureNode.explicitThisType;\r\n      if (thisTypeNode) {\r\n        if (!thisType) {\r\n          this.error(\r\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n            thisTypeNode.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        let resolvedType = this.resolver.resolveType(\r\n          thisTypeNode,\r\n          actualFunction.parent,\r\n          contextualTypeArguments\r\n        );\r\n        if (!resolvedType) return this.module.createUnreachable();\r\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n      }\r\n\r\n      let signature = new Signature(parameterTypes, returnType, thisType);\r\n      signature.requiredParameters = numParameters; // !\r\n      signature.parameterNames = parameterNames;\r\n      instance = new Function(\r\n        prototype.name,\r\n        prototype,\r\n        signature,\r\n        contextualTypeArguments\r\n      );\r\n      if (!this.compileFunction(instance)) return this.module.createUnreachable();\r\n      this.currentType = contextualSignature.type;\r\n\r\n    // otherwise compile like a normal function\r\n    } else {\r\n      instance = this.compileFunctionUsingTypeArguments(\r\n        prototype,\r\n        [],\r\n        contextualTypeArguments\r\n      );\r\n      if (!instance) return this.module.createUnreachable();\r\n      this.currentType = instance.signature.type;\r\n    }\r\n\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.createUnreachable()\r\n      : this.module.createI32(index);\r\n  }\r\n\r\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\r\n  private maybeCompileEnclosingSource(expression: Expression): void {\r\n    var internalPath = expression.range.source.internalPath;\r\n    var filesByName = this.program.filesByName;\r\n    assert(filesByName.has(internalPath));\r\n    var enclosingFile = filesByName.get(internalPath)!;\r\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\r\n      this.compileFileByPath(internalPath, expression);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var actualFunction = flow.actualFunction;\r\n\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (!contextualType.classReference) {\r\n          this.currentType = options.usizeType;\r\n        }\r\n        return options.isWasm64\r\n          ? module.createI64(0)\r\n          : module.createI32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\r\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // {\r\n              //   if (!this) this = <ALLOC>\r\n              //   this.a = X\r\n              //   this.b = Y\r\n              //   return this\r\n              // }\r\n              let stmts: ExpressionRef[] = [\r\n                module.createIf(\r\n                  module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n                    module.createGetLocal(thisLocal.index, nativeSizeType)\r\n                  ),\r\n                  module.createSetLocal(thisLocal.index,\r\n                    this.makeAllocation(<Class>classInstance)\r\n                  )\r\n                )\r\n              ];\r\n              this.makeFieldInitialization(<Class>classInstance, stmts);\r\n              stmts.push(\r\n                module.createGetLocal(thisLocal.index, nativeSizeType)\r\n              );\r\n              this.currentType = thisLocal.type;\r\n              return module.createBlock(null, stmts, nativeSizeType);\r\n            }\r\n          }\r\n          // if not a constructor, `this` type can differ\r\n          let thisType = assert(actualFunction.signature.thisType);\r\n          this.currentType = thisType;\r\n          return module.createGetLocal(thisLocal.index, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let flow = this.currentFlow;\r\n        let actualFunction = flow.actualFunction;\r\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\r\n            // TS1034 in the parser effectively limits this to property accesses\r\n            this.error(\r\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\r\n              expression.range\r\n            );\r\n          }\r\n        }\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\r\n          if (scopedThis) {\r\n            let scopedThisClass = assert(scopedThis.type.classReference);\r\n            let base = scopedThisClass.base;\r\n            if (base) {\r\n              this.currentType = base.type;\r\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\r\n            }\r\n          }\r\n        }\r\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\r\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n          let baseClassInstance = (<Class>classInstance).base;\r\n          if (baseClassInstance) {\r\n            let superType = baseClassInstance.type;\r\n            this.currentType = superType;\r\n            return module.createGetLocal(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    this.maybeCompileEnclosingSource(expression);\r\n\r\n    // otherwise resolve\r\n    var target = this.resolver.resolveIdentifier( // reports\r\n      expression,\r\n      flow,\r\n      this.currentEnum || actualFunction\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let localType = (<Local>target).type;\r\n        assert(localType != Type.void);\r\n        if ((<Local>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\r\n        }\r\n        let localIndex = (<Local>target).index;\r\n        assert(localIndex >= 0);\r\n        this.currentType = localType;\r\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return this.module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!target.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\r\n          return this.module.createI32(i64_low((<EnumValue>target).constantIntegerValue));\r\n        }\r\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = this.resolver.resolveFunction(\r\n          <FunctionPrototype>target,\r\n          null,\r\n          makeMap<string,Type>(flow.contextualTypeArguments)\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.createI32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileInstanceOfExpression(\r\n    expression: InstanceOfExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\r\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\r\n    // possible in AS anyway.\r\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\r\n    var actualType = this.currentType;\r\n    var expectedType = this.resolver.resolveType(\r\n      expression.isType,\r\n      this.currentFlow.actualFunction\r\n    );\r\n    this.currentType = Type.bool;\r\n    if (!expectedType) return module.createUnreachable();\r\n\r\n    // instanceof <basicType> must be exact\r\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\r\n      return module.createI32(actualType == expectedType ? 1 : 0);\r\n    }\r\n    // <nullable> instanceof <nonNullable> must be != 0\r\n    if (\r\n      actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE) &&\r\n      actualType.nonNullableType.isAssignableTo(expectedType)\r\n    ) {\r\n      return module.createBinary(\r\n        actualType.is(TypeFlags.LONG)\r\n          ? BinaryOp.NeI64\r\n          : BinaryOp.NeI32,\r\n        expr,\r\n        actualType.toNativeZero(module)\r\n      );\r\n    }\r\n    return module.createI32(actualType.isAssignableTo(expectedType) ? 1 : 0);\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    implicitNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitNegate);\r\n        let classType = contextualType.classReference;\r\n        if (\r\n          classType &&\r\n          classType.prototype == this.program.arrayPrototype\r\n        ) {\r\n          return this.compileArrayLiteral(\r\n            assert(classType.typeArguments)[0],\r\n            (<ArrayLiteralExpression>expression).elementExpressions,\r\n            false, // TODO: isConst?\r\n            expression\r\n          );\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.createF32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.createF64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\r\n        this.currentType = type;\r\n        switch (type.kind) {\r\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\r\n          case TypeKind.I64: return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\r\n          case TypeKind.U64: return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.F32: return module.createF32(i64_to_f32(intValue));\r\n          case TypeKind.F64: return module.createF64(i64_to_f64(intValue));\r\n          default: return module.createI32(i64_low(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitNegate);\r\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\r\n      }\r\n      case LiteralKind.OBJECT: {\r\n        assert(!implicitNegate);\r\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\r\n      }\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\r\n  ensureStaticString(stringValue: string): ExpressionRef {\r\n    var program = this.program;\r\n    var hasGC = program.hasGC;\r\n    var gcHeaderSize = program.gcHeaderSize;\r\n\r\n    var stringInstance = assert(program.stringInstance);\r\n    var stringSegment: MemorySegment;\r\n\r\n    // if the string already exists, reuse it\r\n    var segments = this.stringSegments;\r\n    if (segments.has(stringValue)) {\r\n      stringSegment = <MemorySegment>segments.get(stringValue);\r\n\r\n    // otherwise create it\r\n    } else {\r\n      let length = stringValue.length;\r\n      let headerSize = (stringInstance.currentMemoryOffset + 1) & ~1;\r\n      let totalSize = headerSize + length * 2;\r\n\r\n      let buf: Uint8Array;\r\n      let pos: u32;\r\n\r\n      if (hasGC) {\r\n        buf = new Uint8Array(gcHeaderSize + totalSize);\r\n        pos = gcHeaderSize;\r\n        writeI32(ensureGCHook(this, stringInstance), buf, program.gcHookOffset);\r\n      } else {\r\n        buf = new Uint8Array(totalSize);\r\n        pos = 0;\r\n      }\r\n      writeI32(length, buf, pos + stringInstance.offsetof(LibrarySymbols.length));\r\n      pos += headerSize;\r\n      for (let i = 0; i < length; ++i) {\r\n        writeI16(stringValue.charCodeAt(i), buf, pos + (i << 1));\r\n      }\r\n      stringSegment = this.addMemorySegment(buf);\r\n      segments.set(stringValue, stringSegment);\r\n    }\r\n    var stringOffset = stringSegment.offset;\r\n    if (hasGC) stringOffset = i64_add(stringOffset, i64_new(gcHeaderSize));\r\n\r\n    this.currentType = stringInstance.type;\r\n    if (this.options.isWasm64) {\r\n      return this.module.createI64(i64_low(stringOffset), i64_high(stringOffset));\r\n    } else {\r\n      assert(i64_is_u32(stringOffset));\r\n      return this.module.createI32(i64_low(stringOffset));\r\n    }\r\n  }\r\n\r\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\r\n    return this.ensureStaticString(expression.value);\r\n  }\r\n\r\n  /** Ensures that the specified array exists in static memory and returns a pointer to it. */\r\n  ensureStaticArray(elementType: Type, values: ExpressionRef[]): ExpressionRef {\r\n    var program = this.program;\r\n    var hasGC = program.hasGC;\r\n    var gcHeaderSize = program.gcHeaderSize;\r\n\r\n    var length = values.length;\r\n    var byteSize = elementType.byteSize;\r\n    var byteLength = length * byteSize;\r\n    var usizeTypeSize = this.options.usizeType.byteSize;\r\n\r\n    var buf: Uint8Array;\r\n    var pos: u32;\r\n\r\n    // create the backing ArrayBuffer segment\r\n    var bufferInstance = assert(program.arrayBufferInstance);\r\n    var bufferHeaderSize = (bufferInstance.currentMemoryOffset + 7) & ~7;\r\n    var bufferTotalSize = 1 << (32 - clz(bufferHeaderSize + byteLength - 1));\r\n    if (hasGC) {\r\n      buf = new Uint8Array(gcHeaderSize + bufferTotalSize);\r\n      pos = gcHeaderSize;\r\n      writeI32(ensureGCHook(this, bufferInstance), buf, program.gcHookOffset);\r\n    } else {\r\n      buf = new Uint8Array(bufferTotalSize);\r\n      pos = 0;\r\n    }\r\n    writeI32(byteLength, buf, pos + bufferInstance.offsetof(LibrarySymbols.byteLength));\r\n    pos += bufferHeaderSize;\r\n    var nativeType = elementType.toNativeType();\r\n    switch (nativeType) {\r\n      case NativeType.I32: {\r\n        switch (byteSize) {\r\n          case 1: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI8(getConstValueI32(value), buf, pos);\r\n              pos += 1;\r\n            }\r\n            break;\r\n          }\r\n          case 2: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI16(getConstValueI32(value), buf, pos);\r\n              pos += 2;\r\n            }\r\n            break;\r\n          }\r\n          case 4: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI32(getConstValueI32(value), buf, pos);\r\n              pos += 4;\r\n            }\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF32(getConstValueF32(value), buf, pos);\r\n          pos += 4;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF64(getConstValueF64(value), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    var bufferSegment = this.addMemorySegment(buf);\r\n    var bufferOffset = bufferSegment.offset;\r\n    if (hasGC) bufferOffset = i64_add(bufferOffset, i64_new(gcHeaderSize));\r\n\r\n    // create the Array segment and return a pointer to it\r\n    var arrayPrototype = assert(program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(\r\n      arrayPrototype,\r\n      [ elementType ],\r\n      makeMap<string,Type>()\r\n    ));\r\n    var arrayHeaderSize = (arrayInstance.currentMemoryOffset + 7) & ~7;\r\n    if (hasGC) {\r\n      buf = new Uint8Array(gcHeaderSize + arrayHeaderSize);\r\n      pos = gcHeaderSize;\r\n      writeI32(ensureGCHook(this, arrayInstance), buf, program.gcHookOffset);\r\n    } else {\r\n      buf = new Uint8Array(arrayHeaderSize);\r\n      pos = 0;\r\n    }\r\n    var arraySegment = this.addMemorySegment(buf);\r\n    var arrayOffset = arraySegment.offset;\r\n    if (hasGC) arrayOffset = i64_add(arrayOffset, i64_new(gcHeaderSize));\r\n    this.currentType = arrayInstance.type;\r\n    var buffer_offset = pos + arrayInstance.offsetof(\"buffer_\");\r\n    var length_offset = pos + arrayInstance.offsetof(\"length_\");\r\n    if (usizeTypeSize == 8) {\r\n      writeI64(bufferOffset, buf, buffer_offset);\r\n      writeI32(length, buf, length_offset);\r\n      return this.module.createI64(i64_low(arrayOffset), i64_high(arrayOffset));\r\n    } else {\r\n      assert(i64_is_u32(bufferOffset));\r\n      writeI32(i64_low(bufferOffset), buf, buffer_offset);\r\n      writeI32(length, buf, length_offset);\r\n      assert(i64_is_u32(arrayOffset));\r\n      return this.module.createI32(i64_low(arrayOffset));\r\n    }\r\n  }\r\n\r\n  compileArrayLiteral(\r\n    elementType: Type,\r\n    expressions: (Expression | null)[],\r\n    isConst: bool,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // find out whether all elements are constant (array is static)\r\n    var length = expressions.length;\r\n    var compiledValues = new Array<ExpressionRef>(length);\r\n    var constantValues = new Array<ExpressionRef>(length);\r\n    var nativeElementType = elementType.toNativeType();\r\n    var isStatic = true;\r\n    for (let i = 0; i < length; ++i) {\r\n      let expression = expressions[i];\r\n      let expr = expression\r\n        ? this.compileExpression(<Expression>expression, elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n        : elementType.toNativeZero(module);\r\n      compiledValues[i] = expr;\r\n      if (isStatic) {\r\n        expr = module.precomputeExpression(expr);\r\n        if (getExpressionId(expr) == ExpressionId.Const) {\r\n          assert(getExpressionType(expr) == nativeElementType);\r\n          constantValues[i] = expr;\r\n        } else {\r\n          if (isConst) {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              reportNode.range\r\n            );\r\n          }\r\n          isStatic = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    // make a static array if possible\r\n    if (isStatic) return this.ensureStaticArray(elementType, constantValues);\r\n\r\n    // otherwise obtain the array type\r\n    var arrayPrototype = assert(this.program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(\r\n      <ClassPrototype>arrayPrototype,\r\n      [ elementType ],\r\n      makeMap<string,Type>()\r\n    ));\r\n    var arrayType = arrayInstance.type;\r\n\r\n    // and compile an explicit instantiation\r\n    this.currentType = arrayType;\r\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\r\n    if (!setter) {\r\n      this.error(\r\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n        reportNode.range, arrayInstance.internalName\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var nativeArrayType = arrayType.toNativeType();\r\n    var flow = this.currentFlow;\r\n    var tempLocal = flow.parentFunction.addLocal(arrayType); // can't reuse a temp (used in compiledValues)\r\n    var stmts = new Array<ExpressionRef>(2 + length);\r\n    var index = 0;\r\n    stmts[index++] = module.createSetLocal(tempLocal.index,\r\n      this.makeCallDirect(assert(arrayInstance.constructorInstance), [\r\n        module.createI32(0), // this\r\n        module.createI32(length)\r\n      ])\r\n    );\r\n    for (let i = 0; i < length; ++i) {\r\n      stmts[index++] = this.makeCallDirect(setter, [\r\n        module.createGetLocal(tempLocal.index, nativeArrayType), // this\r\n        module.createI32(i),\r\n        compiledValues[i]\r\n      ]);\r\n    }\r\n    assert(index + 1 == stmts.length);\r\n    stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\r\n    flow.freeTempLocal(tempLocal); // but can be reused now\r\n    this.currentType = arrayType;\r\n    return module.createBlock(null, stmts, nativeArrayType);\r\n  }\r\n\r\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // contextual type must be a class\r\n    var classReference = contextualType.classReference;\r\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, \"<object>\", contextualType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // if present, check that the constructor is compatible with object literals\r\n    var ctor = classReference.constructorInstance;\r\n    if (ctor) {\r\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\r\n      // object literal and use them to call the ctor while not generating a store.\r\n      if (ctor.signature.requiredParameters) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PRIVATE)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PROTECTED)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // check and compile field values\r\n    var names = expression.names;\r\n    var numNames = names.length;\r\n    var values = expression.values;\r\n    var members = classReference.members;\r\n    var hasErrors = false;\r\n    var exprs = new Array<ExpressionRef>(numNames + 2);\r\n    var flow = this.currentFlow;\r\n    var tempLocal = flow.getTempLocal(this.options.usizeType);\r\n    assert(numNames == values.length);\r\n    for (let i = 0, k = numNames; i < k; ++i) {\r\n      let member = members ? members.get(names[i].text) : null;\r\n      if (!member || member.kind != ElementKind.FIELD) {\r\n        this.error(\r\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n          names[i].range, names[i].text, classReference.toString()\r\n        );\r\n        hasErrors = true;\r\n        continue;\r\n      }\r\n      let type = (<Field>member).type;\r\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\r\n        type.byteSize,\r\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\r\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\r\n        type.toNativeType(),\r\n        (<Field>member).memoryOffset\r\n      );\r\n    }\r\n    this.currentType = classReference.type.nonNullableType;\r\n    if (hasErrors) return module.createUnreachable();\r\n\r\n    // allocate a new instance first and assign 'this' to the temp. local\r\n    exprs[0] = module.createSetLocal(\r\n      tempLocal.index,\r\n      this.makeAllocation(classReference)\r\n    );\r\n\r\n    // once all field values have been set, return 'this'\r\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\r\n\r\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\r\n  }\r\n\r\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // obtain the class being instantiated\r\n    var target = this.resolver.resolveExpression( // reports\r\n      expression.expression,\r\n      flow\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        expression.expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>target;\r\n    var classInstance: Class | null = null;\r\n    var typeArguments = expression.typeArguments;\r\n    var classReference: Class | null;\r\n    if (\r\n      !typeArguments &&\r\n      (classReference = contextualType.classReference) !== null &&\r\n      classReference.is(CommonFlags.GENERIC)\r\n    ) {\r\n      classInstance = this.resolver.resolveClass(\r\n        classPrototype,\r\n        classReference.typeArguments,\r\n        makeMap<string,Type>(flow.contextualTypeArguments)\r\n      );\r\n    } else {\r\n      classInstance = this.resolver.resolveClassInclTypeArguments(\r\n        classPrototype,\r\n        typeArguments,\r\n        flow.actualFunction.parent, // relative to caller\r\n        makeMap<string,Type>(flow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n    if (!classInstance) return module.createUnreachable();\r\n    return this.compileInstantiate(classInstance, expression.arguments, expression);\r\n  }\r\n\r\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\r\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\r\n    var instance = classInstance.constructorInstance;\r\n    if (instance) {\r\n      // do not attempt to compile it if inlined anyway\r\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\r\n      return instance;\r\n    }\r\n\r\n    // clone base constructor if a derived class\r\n    var baseClass = classInstance.base;\r\n    if (baseClass) {\r\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\r\n      instance = new Function(\r\n        CommonSymbols.constructor,\r\n        new FunctionPrototype(\r\n          CommonSymbols.constructor,\r\n          classInstance,\r\n          // declaration is important, i.e. to access optional parameter initializers\r\n          (<FunctionDeclaration>baseCtor.declaration).clone()\r\n        ),\r\n        baseCtor.signature,\r\n        null\r\n      );\r\n\r\n    // otherwise make a default constructor\r\n    } else {\r\n      instance = new Function(\r\n        CommonSymbols.constructor,\r\n        new FunctionPrototype(\r\n          CommonSymbols.constructor,\r\n          classInstance,\r\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\r\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\r\n          )\r\n        ),\r\n        new Signature(null, classInstance.type, classInstance.type),\r\n        null\r\n      );\r\n    }\r\n\r\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\r\n    instance.set(CommonFlags.COMPILED);\r\n    instance.prototype.setResolvedInstance(\"\", instance);\r\n    classInstance.constructorInstance = instance;\r\n    var previousFlow = this.currentFlow;\r\n    this.currentFlow = instance.flow;\r\n\r\n    // generate body\r\n    var signature = instance.signature;\r\n    var module = this.module;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    var stmts = new Array<ExpressionRef>();\r\n\r\n    // {\r\n    //   if (!this) this = <ALLOC>\r\n    //   IF_DERIVED: this = super(this, ...args)\r\n    //   this.a = X\r\n    //   this.b = Y\r\n    //   return this\r\n    // }\r\n    stmts.push(\r\n      module.createIf(\r\n        module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n          module.createGetLocal(0, nativeSizeType)\r\n        ),\r\n        module.createSetLocal(0,\r\n          this.makeAllocation(classInstance)\r\n        )\r\n      )\r\n    );\r\n    if (baseClass) {\r\n      let parameterTypes = signature.parameterTypes;\r\n      let numParameters = parameterTypes.length;\r\n      let operands = new Array<ExpressionRef>(1 + numParameters);\r\n      operands[0] = module.createGetLocal(0, nativeSizeType);\r\n      for (let i = 0; i < numParameters; ++i) {\r\n        operands[i + 1] = module.createGetLocal(i + 1, parameterTypes[i].toNativeType());\r\n      }\r\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\r\n      stmts.push(\r\n        module.createSetLocal(0,\r\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands)\r\n        )\r\n      );\r\n    }\r\n    this.makeFieldInitialization(classInstance, stmts);\r\n    stmts.push(\r\n      module.createGetLocal(0, nativeSizeType)\r\n    );\r\n\r\n    // make the function\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var locals = instance.localsByIndex;\r\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\r\n    var numOperands = 1 + signature.parameterTypes.length;\r\n    var numLocals = locals.length;\r\n    if (numLocals > numOperands) {\r\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\r\n    }\r\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes,\r\n      stmts.length == 1\r\n        ? stmts[0]\r\n        : module.createBlock(null, stmts, nativeSizeType)\r\n    );\r\n    instance.finalize(module, funcRef);\r\n    this.currentFlow = previousFlow;\r\n    return instance;\r\n  }\r\n\r\n  compileInstantiate(classInstance: Class, argumentExpressions: Expression[], reportNode: Node): ExpressionRef {\r\n    var ctor = this.ensureConstructor(classInstance, reportNode);\r\n    var expr = this.compileCallDirect(\r\n      ctor,\r\n      argumentExpressions,\r\n      reportNode,\r\n      this.options.usizeType.toNativeZero(this.module)\r\n    );\r\n    this.currentType = classInstance.type;\r\n    return expr;\r\n  }\r\n\r\n  compileParenthesizedExpression(\r\n    expression: ParenthesizedExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    // does not change types, just order\r\n    return this.compileExpression(\r\n      expression.expression,\r\n      contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    this.maybeCompileEnclosingSource(propertyAccess);\r\n\r\n    var target = this.resolver.resolvePropertyAccessExpression(propertyAccess, flow, contextualType); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: { // static field\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\r\n        if (!this.compileEnum(<Enum>theEnum)) {\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\r\n          return module.createI32(i64_low((<EnumValue>target).constantIntegerValue));\r\n        }\r\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        assert((<Field>target).memoryOffset >= 0);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          assert(this.resolver.currentThisExpression),\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        this.currentType = (<Field>target).type;\r\n        return module.createLoad(\r\n          (<Field>target).type.byteSize,\r\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          thisExpr,\r\n          (<Field>target).type.toNativeType(),\r\n          (<Field>target).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\r\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\r\n        if (getterPrototype) {\r\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\r\n          if (getter) return this.compileCallDirect(getter, [], propertyAccess, 0);\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let getterInstance = assert((<Property>target).getterInstance);\r\n        return this.compileCallDirect(getterInstance, [], propertyAccess,\r\n          this.compileExpressionRetainType(\r\n            assert(this.resolver.currentThisExpression),\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          )\r\n        );\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.error(\r\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\r\n          propertyAccess.range, (<FunctionPrototype>target).name\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  private compileGetter(target: PropertyPrototype, reportNode: Node): ExpressionRef {\r\n    var prototype = target.getterPrototype;\r\n    if (prototype) {\r\n      let instance = this.resolver.resolveFunction(prototype, null);\r\n      if (!instance) return this.module.createUnreachable();\r\n      let signature = instance.signature;\r\n      if (!this.checkCallSignature( // reports\r\n        signature,\r\n        0,\r\n        instance.is(CommonFlags.INSTANCE),\r\n        reportNode\r\n      )) {\r\n        return this.module.createUnreachable();\r\n      }\r\n      if (instance.is(CommonFlags.INSTANCE)) {\r\n        let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n        let thisExpression = assert(this.resolver.currentThisExpression); //!!!\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        this.currentType = signature.returnType;\r\n        return this.compileCallDirect(instance, [], reportNode, thisExpr);\r\n      } else {\r\n        this.currentType = signature.returnType;\r\n        return this.compileCallDirect(instance, [], reportNode, 0);\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n        reportNode.range, (<PropertyPrototype>target).name, (<PropertyPrototype>target).parent.toString()\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n  }\r\n\r\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    // Try to eliminate unnecesssary branches if the condition is constant\r\n    var condExprPrecomp = this.module.precomputeExpression(condExpr);\r\n    if (\r\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n      getExpressionType(condExprPrecomp) == NativeType.I32\r\n    ) {\r\n      return getConstValueI32(condExprPrecomp)\r\n        ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\r\n        : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n\r\n    // Otherwise recompile to the original and let the optimizer decide\r\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n    }\r\n\r\n    var ifThenFlow = outerFlow.fork();\r\n    this.currentFlow = ifThenFlow;\r\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\r\n    var ifThenType = this.currentType;\r\n    ifThenFlow.freeScopedLocals();\r\n\r\n    var ifElseFlow = outerFlow.fork();\r\n    this.currentFlow = ifElseFlow;\r\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n    var ifElseType = this.currentType;\r\n    ifElseFlow.freeScopedLocals();\r\n    this.currentFlow = outerFlow;\r\n\r\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\r\n\r\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\r\n    if (!commonType) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, ifThenType.toString(), ifElseType.toString()\r\n      );\r\n      this.currentType = contextualType;\r\n      return this.module.createUnreachable();\r\n    }\r\n    ifThenExpr = this.convertExpression(\r\n      ifThenExpr,\r\n      ifThenType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifThen\r\n    );\r\n    ifElseExpr = this.convertExpression(\r\n      ifElseExpr,\r\n      ifElseType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifElse\r\n    );\r\n    this.currentType = commonType;\r\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\r\n  }\r\n\r\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression( // reports\r\n      expression.operand,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n\r\n    // shortcut if compiling the getter already failed\r\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\r\n\r\n    var currentType = this.currentType;\r\n\r\n    // if the value isn't dropped, a temp. local is required to remember the original value\r\n    var tempLocal: Local | null = null;\r\n    if (contextualType != Type.void) {\r\n      tempLocal = flow.getTempLocal(currentType, false);\r\n      getValue = module.createTeeLocal(\r\n        tempLocal.index,\r\n        getValue\r\n      );\r\n    }\r\n\r\n    var calcValue: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddI32,\r\n              getValue,\r\n              module.createI32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classReference = this.currentType.classReference;\r\n              if (classReference) {\r\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\r\n                if (overload) {\r\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n                  break;\r\n                }\r\n              }\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            calcValue = module.createBinary(\r\n              options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              getValue,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddI64,\r\n              getValue,\r\n              module.createI64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddF32,\r\n              getValue,\r\n              module.createF32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddF64,\r\n              getValue,\r\n              module.createF64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubI32,\r\n              getValue,\r\n              module.createI32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classReference = this.currentType.classReference;\r\n              if (classReference) {\r\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\r\n                if (overload) {\r\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n                  break;\r\n                }\r\n              }\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            calcValue = module.createBinary(\r\n              options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              getValue,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubI64,\r\n              getValue,\r\n              module.createI64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubF32,\r\n              getValue,\r\n              module.createF32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubF64,\r\n              getValue,\r\n              module.createF64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // simplify if dropped anyway\r\n    if (!tempLocal) {\r\n      this.currentType = Type.void;\r\n      return this.compileAssignmentWithValue(expression.operand,\r\n        calcValue,\r\n        false\r\n      );\r\n    }\r\n\r\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\r\n    var setValue = this.compileAssignmentWithValue(expression.operand,\r\n      calcValue, // also tees getValue to tempLocal\r\n      false\r\n    );\r\n\r\n    this.currentType = tempLocal.type;\r\n    flow.freeTempLocal(tempLocal);\r\n    var nativeType = tempLocal.type.toNativeType();\r\n\r\n    return module.createBlock(null, [\r\n      setValue,\r\n      module.createGetLocal(tempLocal.index, nativeType)\r\n    ], nativeType); // result of 'x++' / 'x--' might overflow\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        // nop\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\r\n          // compileExpression normally does this:\r\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n          break;\r\n        }\r\n\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              this.currentType.toNativeZero(module),\r\n              expr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createUnary(UnaryOp.NegF32, expr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createUnary(UnaryOp.NegF64, expr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          // allow '!' for references even without an overload\r\n        }\r\n\r\n        expr = this.makeIsFalseish(expr, this.currentType);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        } else {\r\n          expr = this.convertExpression(\r\n            expr,\r\n            this.currentType, this.currentType.intType,\r\n            ConversionKind.IMPLICIT, WrapMode.NONE,\r\n            expression.operand\r\n          );\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              this.currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\r\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    switch (type.kind) {\r\n      case TypeKind.I8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(24)\r\n                ),\r\n                module.createI32(24)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.I16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(16)\r\n                ),\r\n                module.createI32(16)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xffff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.BOOL: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          // bool is special in that it compares to 0 instead of masking with 0x1\r\n          expr = module.createBinary(BinaryOp.NeI32,\r\n            expr,\r\n            module.createI32(0)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\r\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return module.createUnary(UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createUnary(UnaryOp.EqzI64, expr);\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\r\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return expr;\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return type.size == 64\r\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\r\n          : expr;\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(0);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\r\n  makeAllocation(classInstance: Class): ExpressionRef {\r\n    var program = this.program;\r\n    assert(classInstance.program == program);\r\n    var module = this.module;\r\n    var options = this.options;\r\n\r\n    // __gc_allocate(size, markFn)\r\n    if (program.hasGC && classInstance.type.isManaged(program)) {\r\n      let allocateInstance = assert(program.gcAllocateInstance);\r\n      if (!this.compileFunction(allocateInstance)) return module.createUnreachable();\r\n      this.currentType = classInstance.type;\r\n      return module.createCall(\r\n        allocateInstance.internalName, [\r\n          options.isWasm64\r\n            ? module.createI64(classInstance.currentMemoryOffset)\r\n            : module.createI32(classInstance.currentMemoryOffset),\r\n          module.createI32(\r\n            ensureGCHook(this, classInstance)\r\n          )\r\n        ],\r\n        options.nativeSizeType\r\n      );\r\n\r\n    // memory.allocate(size)\r\n    } else {\r\n      let allocateInstance = program.memoryAllocateInstance;\r\n      if (!allocateInstance || !this.compileFunction(allocateInstance)) return module.createUnreachable();\r\n      this.currentType = classInstance.type;\r\n      return module.createCall(\r\n        allocateInstance.internalName, [\r\n          options.isWasm64\r\n            ? module.createI64(classInstance.currentMemoryOffset)\r\n            : module.createI32(classInstance.currentMemoryOffset)\r\n        ],\r\n        options.nativeSizeType\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Makes the initializers for a class's fields. */\r\n  makeFieldInitialization(classInstance: Class, stmts: ExpressionRef[] = []): ExpressionRef[] {\r\n    var members = classInstance.members;\r\n    if (!members) return [];\r\n\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\r\n    var thisLocalIndex = isInline\r\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\r\n      : 0;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n\r\n    for (let member of members.values()) {\r\n      if (\r\n        member.kind != ElementKind.FIELD || // not a field\r\n        member.parent != classInstance      // inherited field\r\n      ) continue;\r\n\r\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\r\n      let fieldType = field.type;\r\n      let nativeFieldType = fieldType.toNativeType();\r\n      let initializerNode = field.prototype.initializerNode;\r\n      if (initializerNode) { // use initializer\r\n        stmts.push(\r\n          module.createStore(fieldType.byteSize,\r\n            module.createGetLocal(thisLocalIndex, nativeSizeType),\r\n            this.compileExpression( // reports\r\n              initializerNode,\r\n              fieldType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE\r\n            ),\r\n            nativeFieldType,\r\n            field.memoryOffset\r\n          )\r\n        );\r\n      } else {\r\n        let parameterIndex = field.prototype.parameterIndex;\r\n        stmts.push(\r\n          module.createStore(fieldType.byteSize,\r\n            module.createGetLocal(thisLocalIndex, nativeSizeType),\r\n            parameterIndex >= 0 // initialized via parameter (here: a local)\r\n              ? module.createGetLocal(\r\n                  isInline\r\n                    ? assert(flow.lookupLocal(field.name)).index\r\n                    : 1 + parameterIndex, // this is local 0\r\n                  nativeFieldType\r\n                )\r\n              : fieldType.toNativeZero(module),\r\n            nativeFieldType,\r\n            field.memoryOffset\r\n          )\r\n        );\r\n      }\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\r\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\r\n    var parentFunction = this.currentFlow.parentFunction;\r\n    var source = range.source;\r\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\r\n    range.debugInfoRef = expr;\r\n    parentFunction.debugLocations.push(range);\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\nfunction mangleImportName(\r\n  element: Element,\r\n  declaration: DeclarationStatement\r\n): void {\r\n  // by default, use the file name as the module name\r\n  mangleImportName_moduleName = declaration.range.source.simplePath;\r\n  // and the internal name of the element within that file as the element name\r\n  mangleImportName_elementName = mangleInternalName(\r\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\r\n  );\r\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\r\n\r\n  var program = element.program;\r\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\r\n  var args = decorator.arguments;\r\n  if (args && args.length) {\r\n    let arg = args[0];\r\n    // if one argument is given, override just the element name\r\n    // if two arguments are given, override both module and element name\r\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n      if (args.length >= 2) {\r\n        arg = args[1];\r\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n          mangleImportName_moduleName = mangleImportName_elementName;\r\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n          if (args.length > 2) {\r\n            program.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              decorator.range, \"2\", args.length.toString()\r\n            );\r\n          }\r\n        } else {\r\n          program.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            arg.range\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      program.error(\r\n        DiagnosticCode.String_literal_expected,\r\n        arg.range\r\n      );\r\n    }\r\n  } else {\r\n    program.error(\r\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n      decorator.range, \"1\", \"0\"\r\n    );\r\n  }\r\n}\r\n\r\nvar mangleImportName_moduleName: string;\r\nvar mangleImportName_elementName: string;\r\n\r\n/** Special compiler symbols. */\r\nnamespace CompilerSymbols {\r\n  /** Module started global. Used if an explicit start function is present. */\r\n  export const started = \"~lib/started\";\r\n  /** Argument count global. Used to call trampolines for varargs functions. */\r\n  export const argc = \"~lib/argc\";\r\n  /** Argument count setter. Exported for use by host calls. */\r\n  export const setargc = \"~lib/setargc\";\r\n}\r\n","/**\r\n * Generated from diagnosticsMessages.json. Do not edit.\r\n * @module diagnostics\r\n *//***/\r\n\r\n/* tslint:disable:max-line-length */\r\n\r\n/** Enum of available diagnostic codes. */\r\nexport enum DiagnosticCode {\r\n  Operation_not_supported = 100,\r\n  Operation_is_unsafe = 101,\r\n  User_defined_0 = 102,\r\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\r\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\r\n  Type_0_cannot_be_changed_to_type_1 = 202,\r\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\r\n  Basic_type_0_cannot_be_nullable = 204,\r\n  Cannot_export_a_mutable_global = 205,\r\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\r\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\r\n  Unmanaged_classes_cannot_implement_interfaces = 208,\r\n  Invalid_regular_expression_flags = 209,\r\n  Implementation_0_must_match_the_signature_1 = 210,\r\n  Class_0_is_sealed_and_cannot_be_extended = 211,\r\n  Decorator_0_is_not_valid_here = 212,\r\n  Duplicate_decorator = 213,\r\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\r\n  Optional_parameter_must_have_an_initializer = 215,\r\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\r\n  Function_0_cannot_be_inlined_into_itself = 217,\r\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\r\n  Optional_properties_are_not_supported = 219,\r\n  Expression_must_be_a_compile_time_constant = 220,\r\n  Module_cannot_have_multiple_start_functions = 221,\r\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\r\n  _0_must_be_a_power_of_two = 223,\r\n  Unterminated_string_literal = 1002,\r\n  Identifier_expected = 1003,\r\n  _0_expected = 1005,\r\n  A_file_cannot_have_a_reference_to_itself = 1006,\r\n  Trailing_comma_not_allowed = 1009,\r\n  Unexpected_token = 1012,\r\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\r\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\r\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\r\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\r\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\r\n  _0_modifier_cannot_be_used_here = 1042,\r\n  A_rest_parameter_cannot_be_optional = 1047,\r\n  A_rest_parameter_cannot_have_an_initializer = 1048,\r\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\r\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\r\n  A_get_accessor_cannot_have_parameters = 1054,\r\n  Enum_member_must_have_initializer = 1061,\r\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\r\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\r\n  An_accessor_cannot_have_type_parameters = 1094,\r\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\r\n  Type_parameter_list_cannot_be_empty = 1098,\r\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\r\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\r\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\r\n  Expression_expected = 1109,\r\n  Type_expected = 1110,\r\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\r\n  Duplicate_label_0 = 1114,\r\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\r\n  Digit_expected = 1124,\r\n  Hexadecimal_digit_expected = 1125,\r\n  Unexpected_end_of_text = 1126,\r\n  Invalid_character = 1127,\r\n  _case_or_default_expected = 1130,\r\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\r\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\r\n  Type_argument_expected = 1140,\r\n  String_literal_expected = 1141,\r\n  Line_break_not_permitted_here = 1142,\r\n  Declaration_expected = 1146,\r\n  _const_declarations_must_be_initialized = 1155,\r\n  Unterminated_regular_expression_literal = 1161,\r\n  Interface_declaration_cannot_have_implements_clause = 1176,\r\n  Binary_digit_expected = 1177,\r\n  Octal_digit_expected = 1178,\r\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\r\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\r\n  Unterminated_Unicode_escape_sequence = 1199,\r\n  Decorators_are_not_valid_here = 1206,\r\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\r\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\r\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\r\n  A_class_may_only_extend_another_class = 1311,\r\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\r\n  Duplicate_identifier_0 = 2300,\r\n  Cannot_find_name_0 = 2304,\r\n  Module_0_has_no_exported_member_1 = 2305,\r\n  Generic_type_0_requires_1_type_argument_s = 2314,\r\n  Type_0_is_not_generic = 2315,\r\n  Type_0_is_not_assignable_to_type_1 = 2322,\r\n  Index_signature_is_missing_in_type_0 = 2329,\r\n  _this_cannot_be_referenced_in_current_location = 2332,\r\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\r\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\r\n  Property_0_does_not_exist_on_type_1 = 2339,\r\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\r\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\r\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\r\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\r\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\r\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\r\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\r\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\r\n  _get_and_set_accessor_must_have_the_same_type = 2380,\r\n  Constructor_implementation_is_missing = 2390,\r\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\r\n  Multiple_constructor_implementations_are_not_allowed = 2392,\r\n  Duplicate_function_implementation = 2393,\r\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\r\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\r\n  Type_0_has_no_property_1 = 2460,\r\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\r\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\r\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\r\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\r\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\r\n  Index_signature_in_type_0_only_permits_reading = 2542,\r\n  Expected_0_arguments_but_got_1 = 2554,\r\n  Expected_at_least_0_arguments_but_got_1 = 2555,\r\n  Expected_0_type_arguments_but_got_1 = 2558,\r\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\r\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\r\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\r\n  Namespace_0_has_no_exported_member_1 = 2694,\r\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\r\n  Duplicate_property_0 = 2718,\r\n  File_0_not_found = 6054,\r\n  Numeric_separators_are_not_allowed_here = 6188,\r\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\r\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\r\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\r\n}\r\n\r\n/** Translates a diagnostic code to its respective string. */\r\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\r\n  switch (code) {\r\n    case 100: return \"Operation not supported.\";\r\n    case 101: return \"Operation is unsafe.\";\r\n    case 102: return \"User-defined: {0}\";\r\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\r\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\r\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\r\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\r\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\r\n    case 205: return \"Cannot export a mutable global.\";\r\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\r\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\r\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\r\n    case 209: return \"Invalid regular expression flags.\";\r\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\r\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\r\n    case 212: return \"Decorator '{0}' is not valid here.\";\r\n    case 213: return \"Duplicate decorator.\";\r\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\r\n    case 215: return \"Optional parameter must have an initializer.\";\r\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\r\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\r\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\r\n    case 219: return \"Optional properties are not supported.\";\r\n    case 220: return \"Expression must be a compile-time constant.\";\r\n    case 221: return \"Module cannot have multiple start functions.\";\r\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\r\n    case 223: return \"'{0}' must be a power of two.\";\r\n    case 1002: return \"Unterminated string literal.\";\r\n    case 1003: return \"Identifier expected.\";\r\n    case 1005: return \"'{0}' expected.\";\r\n    case 1006: return \"A file cannot have a reference to itself.\";\r\n    case 1009: return \"Trailing comma not allowed.\";\r\n    case 1012: return \"Unexpected token.\";\r\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\r\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\r\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\r\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\r\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\r\n    case 1042: return \"'{0}' modifier cannot be used here.\";\r\n    case 1047: return \"A rest parameter cannot be optional.\";\r\n    case 1048: return \"A rest parameter cannot have an initializer.\";\r\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\r\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\r\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\r\n    case 1061: return \"Enum member must have initializer.\";\r\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\r\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\r\n    case 1094: return \"An accessor cannot have type parameters.\";\r\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\r\n    case 1098: return \"Type parameter list cannot be empty.\";\r\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\r\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\r\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\r\n    case 1109: return \"Expression expected.\";\r\n    case 1110: return \"Type expected.\";\r\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\r\n    case 1114: return \"Duplicate label '{0}'.\";\r\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\r\n    case 1124: return \"Digit expected.\";\r\n    case 1125: return \"Hexadecimal digit expected.\";\r\n    case 1126: return \"Unexpected end of text.\";\r\n    case 1127: return \"Invalid character.\";\r\n    case 1130: return \"'case' or 'default' expected.\";\r\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\r\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\r\n    case 1140: return \"Type argument expected.\";\r\n    case 1141: return \"String literal expected.\";\r\n    case 1142: return \"Line break not permitted here.\";\r\n    case 1146: return \"Declaration expected.\";\r\n    case 1155: return \"'const' declarations must be initialized.\";\r\n    case 1161: return \"Unterminated regular expression literal.\";\r\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\r\n    case 1177: return \"Binary digit expected.\";\r\n    case 1178: return \"Octal digit expected.\";\r\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\r\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\r\n    case 1199: return \"Unterminated Unicode escape sequence.\";\r\n    case 1206: return \"Decorators are not valid here.\";\r\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\r\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\r\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\r\n    case 1311: return \"A class may only extend another class.\";\r\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\r\n    case 2300: return \"Duplicate identifier '{0}'.\";\r\n    case 2304: return \"Cannot find name '{0}'.\";\r\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\r\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\r\n    case 2315: return \"Type '{0}' is not generic.\";\r\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\r\n    case 2329: return \"Index signature is missing in type '{0}'.\";\r\n    case 2332: return \"'this' cannot be referenced in current location.\";\r\n    case 2335: return \"'super' can only be referenced in a derived class.\";\r\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\r\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\r\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\r\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\r\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\r\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\r\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\r\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\r\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\r\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\r\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\r\n    case 2390: return \"Constructor implementation is missing.\";\r\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\r\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\r\n    case 2393: return \"Duplicate function implementation.\";\r\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\r\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\r\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\r\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\r\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\r\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\r\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\r\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\r\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\r\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\r\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\r\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\r\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\r\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\r\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\r\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\r\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\r\n    case 2718: return \"Duplicate property '{0}'.\";\r\n    case 6054: return \"File '{0}' not found.\";\r\n    case 6188: return \"Numeric separators are not allowed here.\";\r\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\r\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\r\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\r\n    default: return \"\";\r\n  }\r\n}\r\n","/**\r\n * A control flow analyzer.\r\n * @module flow\r\n *//***/\r\n\r\nimport {\r\n  Type,\r\n  TypeFlags,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  Local,\r\n  Function,\r\n  Element,\r\n  ElementKind,\r\n  Global\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionId,\r\n  ExpressionRef,\r\n\r\n  getExpressionId,\r\n  getGetLocalIndex,\r\n  isTeeLocal,\r\n  getSetLocalValue,\r\n  getGetGlobalName,\r\n  getBinaryOp,\r\n  BinaryOp,\r\n  getBinaryLeft,\r\n  getConstValueI32,\r\n  getBinaryRight,\r\n  getUnaryOp,\r\n  UnaryOp,\r\n  getExpressionType,\r\n  getConstValueI64Low,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getLoadBytes,\r\n  isLoadSigned,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getCallTarget\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node\r\n} from \"./ast\";\r\n\r\nimport {\r\n  bitsetIs,\r\n  bitsetSet\r\n} from \"./util\";\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  // categorical\r\n\r\n  /** This flow returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This flow returns a wrapped value. */\r\n  RETURNS_WRAPPED = 1 << 1,\r\n  /** This flow throws. */\r\n  THROWS = 1 << 2,\r\n  /** This flow breaks. */\r\n  BREAKS = 1 << 3,\r\n  /** This flow continues. */\r\n  CONTINUES = 1 << 4,\r\n  /** This flow allocates. Constructors only. */\r\n  ALLOCATES = 1 << 5,\r\n  /** This flow calls super. Constructors only. */\r\n  CALLS_SUPER = 1 << 6,\r\n\r\n  // conditional\r\n\r\n  /** This flow conditionally returns in a child flow. */\r\n  CONDITIONALLY_RETURNS = 1 << 7,\r\n  /** This flow conditionally throws in a child flow. */\r\n  CONDITIONALLY_THROWS = 1 << 8,\r\n  /** This flow conditionally breaks in a child flow. */\r\n  CONDITIONALLY_BREAKS = 1 << 9,\r\n  /** This flow conditionally continues in a child flow. */\r\n  CONDITIONALLY_CONTINUES = 1 << 10,\r\n  /** This flow conditionally allocates in a child flow. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 11,\r\n\r\n  // special\r\n\r\n  /** This is an inlining flow. */\r\n  INLINE_CONTEXT = 1 << 12,\r\n  /** This is a flow with explicitly disabled bounds checking. */\r\n  UNCHECKED_CONTEXT = 1 << 13,\r\n\r\n  // masks\r\n\r\n  /** Any terminating flag. */\r\n  ANY_TERMINATING = FlowFlags.RETURNS\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = FlowFlags.RETURNS\r\n                  | FlowFlags.RETURNS_WRAPPED\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES\r\n                  | FlowFlags.ALLOCATES\r\n                  | FlowFlags.CALLS_SUPER,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\r\n                  | FlowFlags.CONDITIONALLY_THROWS\r\n                  | FlowFlags.CONDITIONALLY_BREAKS\r\n                  | FlowFlags.CONDITIONALLY_CONTINUES\r\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  parentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** The current return type. */\r\n  returnType: Type;\r\n  /** The current contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n  /** Local variable wrap states for the first 64 locals. */\r\n  wrappedLocals: I64;\r\n  /** Local variable wrap states for locals with index >= 64. */\r\n  wrappedLocalsExt: I64[] | null;\r\n  /** Function being inlined, when inlining. */\r\n  inlineFunction: Function | null;\r\n  /** The label we break to when encountering a return statement, when inlining. */\r\n  inlineReturnLabel: string | null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(parentFunction: Function): Flow {\r\n    var flow = new Flow();\r\n    flow.parent = null;\r\n    flow.flags = FlowFlags.NONE;\r\n    flow.parentFunction = parentFunction;\r\n    flow.continueLabel = null;\r\n    flow.breakLabel = null;\r\n    flow.returnType = parentFunction.signature.returnType;\r\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\r\n    flow.wrappedLocals = i64_new(0);\r\n    flow.wrappedLocalsExt = null;\r\n    flow.inlineFunction = null;\r\n    flow.inlineReturnLabel = null;\r\n    return flow;\r\n  }\r\n\r\n  /** Creates an inline flow within `currentFunction`. */\r\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\r\n    var flow = Flow.create(parentFunction);\r\n    flow.set(FlowFlags.INLINE_CONTEXT);\r\n    flow.inlineFunction = inlineFunction;\r\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\r\n    flow.returnType = inlineFunction.signature.returnType;\r\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\r\n    return flow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\r\n  get actualFunction(): Function {\r\n    return this.inlineFunction || this.parentFunction;\r\n  }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this flow has one of the specified flags. */\r\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Forks this flow to a child flow. */\r\n  fork(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.parentFunction = this.parentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    branch.returnType = this.returnType;\r\n    branch.contextualTypeArguments = this.contextualTypeArguments;\r\n    branch.wrappedLocals = this.wrappedLocals;\r\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\r\n    branch.inlineFunction = this.inlineFunction;\r\n    branch.inlineReturnLabel = this.inlineReturnLabel;\r\n    return branch;\r\n  }\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type, wrapped: bool = false): Local {\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\r\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\r\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\r\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\r\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps && temps.length) {\r\n      local = temps.pop();\r\n      local.type = type;\r\n      local.flags = CommonFlags.NONE;\r\n    } else {\r\n      local = parentFunction.addLocal(type);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) this.setLocalWrapped(local.index, wrapped);\r\n    return local;\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    if (local.is(CommonFlags.INLINED)) return;\r\n    assert(local.index >= 0);\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\r\n        break;\r\n      }\r\n      case NativeType.V128: {\r\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    assert(local.index >= 0);\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[];\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\r\n        break;\r\n      }\r\n      case NativeType.V128: {\r\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps.length) {\r\n      local = temps[temps.length - 1];\r\n      local.type = type;\r\n    } else {\r\n      local = parentFunction.addLocal(type);\r\n      temps.push(local);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) this.setLocalWrapped(local.index, wrapped);\r\n    return local;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(name: string, type: Type, wrapped: bool, reportNode: Node | null = null): Local {\r\n    var scopedLocal = this.getTempLocal(type, false);\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (reportNode) {\r\n          this.parentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            reportNode.range\r\n          );\r\n        }\r\n        return existingLocal;\r\n      }\r\n    }\r\n    scopedLocal.set(CommonFlags.SCOPED);\r\n    this.scopedLocals.set(name, scopedLocal);\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.setLocalWrapped(scopedLocal.index, wrapped);\r\n    }\r\n    return scopedLocal;\r\n  }\r\n\r\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\r\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (reportNode) {\r\n          this.parentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            reportNode.range\r\n          );\r\n        }\r\n        return existingLocal;\r\n      }\r\n    }\r\n    assert(index < this.parentFunction.localsByIndex.length);\r\n    var scopedAlias = new Local(\r\n      name,\r\n      index,\r\n      type,\r\n      this.parentFunction\r\n    );\r\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\r\n    this.scopedLocals.set(name, scopedAlias);\r\n    return scopedAlias;\r\n  }\r\n\r\n  /** Frees this flow's scoped variables and returns its parent flow. */\r\n  freeScopedLocals(): void {\r\n    if (this.scopedLocals) {\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          this.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n  }\r\n\r\n  /** Looks up the local of the specified name in the current scope. */\r\n  lookupLocal(name: string): Local | null {\r\n    var current: Flow | null = this;\r\n    var scope: Map<String,Local> | null;\r\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\r\n    while (current = current.parent);\r\n    return this.parentFunction.localsByName.get(name);\r\n  }\r\n\r\n  /** Looks up the element with the specified name relative to the scope of this flow. */\r\n  lookup(name: string): Element | null {\r\n    var element = this.lookupLocal(name);\r\n    if (element) return element;\r\n    return this.actualFunction.lookup(name);\r\n  }\r\n\r\n  /** Tests if the value of the local at the specified index is considered wrapped. */\r\n  isLocalWrapped(index: i32): bool {\r\n    if (index < 0) return true; // inlined constant\r\n    if (index < 64) return bitsetIs(this.wrappedLocals, index);\r\n    var ext = this.wrappedLocalsExt;\r\n    var i = ((index - 64) / 64) | 0;\r\n    if (!(ext && i < ext.length)) return false;\r\n    return bitsetIs(ext[i], index - (i + 1) * 64);\r\n  }\r\n\r\n  /** Sets if the value of the local at the specified index is considered wrapped. */\r\n  setLocalWrapped(index: i32, wrapped: bool): void {\r\n    if (index < 0) return; // inlined constant\r\n    if (index < 64) {\r\n      this.wrappedLocals = bitsetSet(this.wrappedLocals, index, wrapped);\r\n      return;\r\n    }\r\n    var ext = this.wrappedLocalsExt;\r\n    var i = ((index - 64) / 64) | 0;\r\n    if (!ext) {\r\n      this.wrappedLocalsExt = ext = new Array(i + 1);\r\n      for (let j = 0; j <= i; ++j) ext[j] = i64_new(0);\r\n    } else {\r\n      while (ext.length <= i) ext.push(i64_new(0));\r\n    }\r\n    ext[i] = bitsetSet(ext[i], index - (i + 1) * 64, wrapped);\r\n  }\r\n\r\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\r\n  pushBreakLabel(): string {\r\n    var parentFunction = this.parentFunction;\r\n    var id = parentFunction.nextBreakId++;\r\n    var stack = parentFunction.breakStack;\r\n    if (!stack) parentFunction.breakStack = [ id ];\r\n    else stack.push(id);\r\n    return parentFunction.breakLabel = id.toString(10);\r\n  }\r\n\r\n  /** Pops the most recent break label from the stack. */\r\n  popBreakLabel(): void {\r\n    var parentFunction = this.parentFunction;\r\n    var stack = assert(parentFunction.breakStack);\r\n    var length = assert(stack.length);\r\n    stack.pop();\r\n    if (length > 1) {\r\n      parentFunction.breakLabel = stack[length - 2].toString(10);\r\n    } else {\r\n      parentFunction.breakLabel = null;\r\n      parentFunction.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\r\n  inherit(other: Flow): void {\r\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\r\n    this.wrappedLocals = other.wrappedLocals;\r\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\r\n  }\r\n\r\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\r\n  inheritConditional(other: Flow): void {\r\n    if (other.is(FlowFlags.RETURNS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n    }\r\n    if (other.is(FlowFlags.THROWS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\r\n    }\r\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n    }\r\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n    }\r\n    if (other.is(FlowFlags.ALLOCATES)) {\r\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n    }\r\n  }\r\n\r\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\r\n  inheritMutual(left: Flow, right: Flow): void {\r\n    // categorical flags set in both arms\r\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\r\n\r\n    // conditional flags set in at least one arm\r\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\r\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\r\n\r\n    // locals wrapped in both arms\r\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\r\n    var leftExt = left.wrappedLocalsExt;\r\n    var rightExt = right.wrappedLocalsExt;\r\n    if (leftExt != null && rightExt != null) {\r\n      let thisExt = this.wrappedLocalsExt;\r\n      let minLength = min(leftExt.length, rightExt.length);\r\n      if (minLength) {\r\n        if (!thisExt) thisExt = new Array(minLength);\r\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\r\n        for (let i = 0; i < minLength; ++i) {\r\n          thisExt[i] = i64_and(\r\n            leftExt[i],\r\n            rightExt[i]\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\r\n   * expression might already have overflown and returns `false` only if the operation neglects\r\n   * any possible combination of garbage bits being present.\r\n   */\r\n  canOverflow(expr: ExpressionRef, type: Type): bool {\r\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\r\n    // opportunities here, obviously.\r\n    assert(type != Type.void);\r\n\r\n    // types other than i8, u8, i16, u16 and bool do not overflow\r\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\r\n\r\n    var operand: ExpressionRef;\r\n    switch (getExpressionId(expr)) {\r\n\r\n      // overflows if the local isn't wrapped or the conversion does\r\n      case ExpressionId.GetLocal: {\r\n        let local = this.parentFunction.localsByIndex[getGetLocalIndex(expr)];\r\n        return !this.isLocalWrapped(local.index)\r\n            || canConversionOverflow(local.type, type);\r\n      }\r\n\r\n      // overflows if the value does\r\n      case ExpressionId.SetLocal: { // tee\r\n        assert(isTeeLocal(expr));\r\n        return this.canOverflow(getSetLocalValue(expr), type);\r\n      }\r\n\r\n      // overflows if the conversion does (globals are wrapped on set)\r\n      case ExpressionId.GetGlobal: {\r\n        // TODO: this is inefficient because it has to read a string\r\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGetGlobalName(expr))));\r\n        assert(global.kind == ElementKind.GLOBAL);\r\n        return canConversionOverflow(assert((<Global>global).type), type);\r\n      }\r\n\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64:\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64:\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtU32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtU64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64:\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeU32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeU64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64:\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtU32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtU64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64:\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeU32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeU64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: return false;\r\n\r\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\r\n          case BinaryOp.MulI32: {\r\n            return !(\r\n              (\r\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryRight(expr), type)\r\n                  )\r\n                )\r\n              ) || (\r\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryLeft(expr), type)\r\n                  )\r\n                )\r\n              )\r\n            );\r\n          }\r\n\r\n          // result won't overflow if one side is a constant less than this type's mask or one side\r\n          // is wrapped\r\n          case BinaryOp.AndI32: {\r\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\r\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\r\n            return !(\r\n              (\r\n                (\r\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              ) || (\r\n                (\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              )\r\n            );\r\n          }\r\n\r\n          // overflows if the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShlI32: {\r\n            let shift = 32 - type.size;\r\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\r\n                || getConstValueI32(operand) < shift;\r\n          }\r\n\r\n          // overflows if the value does and the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShrI32: {\r\n            let shift = 32 - type.size;\r\n            return this.canOverflow(getBinaryLeft(expr), type) && (\r\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\r\n              getConstValueI32(operand) < shift\r\n            );\r\n          }\r\n\r\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\r\n          // wrapped, it can't overflow.\r\n          case BinaryOp.ShrU32: {\r\n            let shift = 32 - type.size;\r\n            return type.is(TypeFlags.SIGNED)\r\n              ? !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) > shift // must clear MSB\r\n                )\r\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) >= shift // can leave MSB\r\n                );\r\n          }\r\n\r\n          // overflows if any side does\r\n          case BinaryOp.DivU32:\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemU32: {\r\n            return this.canOverflow(getBinaryLeft(expr), type)\r\n                || this.canOverflow(getBinaryRight(expr), type);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: return false;\r\n\r\n          // overflow if the maximum result (32) cannot be represented in the target type\r\n          case UnaryOp.ClzI32:\r\n          case UnaryOp.CtzI32:\r\n          case UnaryOp.PopcntI32: return type.size < 7;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the value cannot be represented in the target type\r\n      case ExpressionId.Const: {\r\n        let value: i32 = 0;\r\n        switch (getExpressionType(expr)) {\r\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\r\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\r\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\r\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\r\n          default: assert(false);\r\n        }\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\r\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\r\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\r\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\r\n          case TypeKind.BOOL: return (value & ~1) != 0;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the conversion does\r\n      case ExpressionId.Load: {\r\n        let fromType: Type;\r\n        switch (getLoadBytes(expr)) {\r\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\r\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\r\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\r\n        }\r\n        return canConversionOverflow(fromType, type);\r\n      }\r\n\r\n      // overflows if the result does, which is either\r\n      // - the last expression of the block, by contract, if the block doesn't have a label\r\n      // - the last expression or the value of an inner br if the block has a label (TODO)\r\n      case ExpressionId.Block: {\r\n        if (!getBlockName(expr)) {\r\n          let size = assert(getBlockChildCount(expr));\r\n          let last = getBlockChild(expr, size - 1);\r\n          return this.canOverflow(last, type);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.If: {\r\n        return this.canOverflow(getIfTrue(expr), type)\r\n            || this.canOverflow(assert(getIfFalse(expr)), type);\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.Select: {\r\n        return this.canOverflow(getSelectThen(expr), type)\r\n            || this.canOverflow(getSelectElse(expr), type);\r\n      }\r\n\r\n      // overflows if the call does not return a wrapped value or the conversion does\r\n      case ExpressionId.Call: {\r\n        let program = this.parentFunction.program;\r\n        let instance = assert(program.instancesByName.get(assert(getCallTarget(expr))));\r\n        assert(instance.kind == ElementKind.FUNCTION);\r\n        let returnType = (<Function>instance).signature.returnType;\r\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\r\n            || canConversionOverflow(returnType, type);\r\n      }\r\n\r\n      // doesn't technically overflow\r\n      case ExpressionId.Unreachable: return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\n/** Tests if a conversion from one type to another can technically overflow. */\r\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\r\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\r\n      || fromType.size > toType.size\r\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\r\n}\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  getFunctionName,\r\n  getFunctionBody,\r\n  getFunctionParamCount,\r\n  getFunctionParamType,\r\n  getFunctionResultType,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfCondition,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getLoopName,\r\n  getLoopBody,\r\n  getBreakName,\r\n  getBreakCondition,\r\n  getGetLocalIndex,\r\n  getSetLocalIndex,\r\n  getSetLocalValue,\r\n  getLoadOffset,\r\n  getLoadPtr,\r\n  getStoreOffset,\r\n  getStorePtr,\r\n  getStoreValue,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getUnaryOp,\r\n  getUnaryValue,\r\n  getBinaryOp,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getSelectCondition,\r\n  getDropValue,\r\n  getReturnValue,\r\n  getHostOp,\r\n  getHostOperand\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\r\n    var body = getFunctionBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(getFunctionResultType(func)));\r\n    this.push(\" \");\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = getExpressionId(expr);\r\n    var type = getExpressionType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = getBlockName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = getBlockChildCount(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(getBlockChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          if (nested = getIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(getIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = getLoopName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(getLoopBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = getBreakCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = getBreakName(expr)) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getGetLocalIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.SetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getSetLocalIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(getSetLocalValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GetGlobal:\r\n      case ExpressionId.SetGlobal: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getLoadOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getLoadPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getStoreOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getStorePtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getStoreValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(getConstValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(getConstValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(getConstValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(getSelectThen(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectElse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(getDropValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = getReturnValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (getHostOp(expr)) {\r\n          case HostOp.CurrentMemory: {\r\n            this.push(\"memory.size()\");\r\n            return;\r\n          }\r\n          case HostOp.GrowMemory: {\r\n            this.push(\"memory.grow(\");\r\n            this.decompileExpression(getHostOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicWake:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.V128: return \"v128\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Field,\r\n  Function,\r\n  FunctionPrototype,\r\n  Class,\r\n  ClassPrototype,\r\n  Namespace,\r\n  ConstantValueKind,\r\n  Interface,\r\n  Property,\r\n  PropertyPrototype\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Whether to include private members */\r\n  includePrivate: bool;\r\n  /** Elements still to do. */\r\n  todo: Element[] = [];\r\n  /** Already seen elements. */\r\n  seen: Set<Element> = new Set();\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    this.program = program;\r\n    this.includePrivate;\r\n  }\r\n\r\n  /** Walks all elements and calls the respective handlers. */\r\n  walk(): void {\r\n    for (let file of this.program.filesByName.values()) {\r\n      let members = file.members;\r\n      if (!members) continue;\r\n      for (let member of members.values()) {\r\n        // FIXME: doesn't honor the actual externally visible name\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    var todo = this.todo;\r\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\r\n  }\r\n\r\n  /** Visits an element.*/\r\n  visitElement(element: Element): void {\r\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.visitFunctionInstances(<FunctionPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        this.visitClassInstances(<ClassPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        this.visitPropertyInstances(<PropertyPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prop = <Property>element;\r\n        let getter = prop.getterInstance;\r\n        if (getter) this.visitFunction(getter);\r\n        let setter = prop.setterInstance;\r\n        if (setter) this.visitFunction(setter);\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if (hasCompiledMember(element)) this.visitNamespace(element);\r\n        break;\r\n      }\r\n      case ElementKind.TYPEDEFINITION: break;\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  private visitFunctionInstances(element: FunctionPrototype): void {\r\n    var instances = element.instances;\r\n    if (instances) {\r\n      for (let instance of instances.values()) {\r\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  private visitClassInstances(element: ClassPrototype): void {\r\n    var instances = element.instances;\r\n    if (instances) {\r\n      for (let instance of instances.values()) {\r\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  private visitPropertyInstances(element: PropertyPrototype): void {\r\n    // var instances = element.instances;\r\n    // if (instances) {\r\n    //   for (let instance of instances.values()) {\r\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\r\n    //   }\r\n    // }\r\n    assert(false);\r\n  }\r\n\r\n  abstract visitGlobal(element: Global): void;\r\n  abstract visitEnum(element: Enum): void;\r\n  abstract visitFunction(element: Function): void;\r\n  abstract visitClass(element: Class): void;\r\n  abstract visitInterface(element: Interface): void;\r\n  abstract visitField(element: Field): void;\r\n  abstract visitNamespace(element: Element): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) sb.push(\"const \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(element.name);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) sb.push(\"const \");\r\n          else sb.push(\"readonly \");\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\r\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(element.name);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.name);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.name);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    // TODO\r\n  }\r\n\r\n  visitNamespace(element: Namespace): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.STATIC)) {\r\n      if (isConst) sb.push(\"static readonly \");\r\n      else sb.push(\"static \");\r\n    } else {\r\n      if (isConst) sb.push(\"const \");\r\n      else sb.push(\"var \");\r\n    }\r\n    sb.push(element.name);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"enum \");\r\n    sb.push(element.name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\r\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) this.visitNamespace(element);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.GET)) {\r\n      sb.push(element.identifierNode.text); // 'get:funcName' internally\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n      sb.push(\";\\n\");\r\n      return;\r\n    } else {\r\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\r\n      sb.push(element.name);\r\n    }\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\r\n      sb.push(\")\");\r\n    } else {\r\n      sb.push(\"): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n    }\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\r\n      sb.push(\"class \");\r\n    }\r\n    sb.push(element.name);\r\n    var base = element.base;\r\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\r\n      sb.push(\" extends \");\r\n      sb.push(base.name); // TODO: fqn\r\n    }\r\n    sb.push(\" {\\n\");\r\n    var members = element.parent.members; // static\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    var ctor = element.constructorInstance;\r\n    if (ctor) this.visitFunction(ctor);\r\n    members = element.members; // instance\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n    sb.push(element.name);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitNamespace(element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"namespace \");\r\n      sb.push(element.name);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.V128: return \"v128\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    sb.push(\"export default ASModule;\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Tests if a namespace-like element has at least one compiled member. */\r\nfunction hasCompiledMember(element: Element): bool {\r\n  var members = element.members;\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      switch (member.kind) {\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          let instances = (<FunctionPrototype>member).instances;\r\n          if (instances) {\r\n            for (let instance of instances.values()) {\r\n              if (instance.is(CommonFlags.COMPILED)) return true;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          let instances = (<ClassPrototype>member).instances;\r\n          if (instances) {\r\n            for (let instance of instances.values()) {\r\n              if (instance.is(CommonFlags.COMPILED)) return true;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler,\r\n  IdentifierHandling\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  SignatureNode,\r\n  ArrowKind,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  ClassExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  IndexSignatureDeclaration,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath,\r\n  nodeIsCallable,\r\n  nodeIsGenericCallable\r\n} from \"./ast\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Source file names to be requested next. */\r\n  backlog: string[] = new Array();\r\n  /** Source file names already seen, that is processed or backlogged. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Source file names already completely processed. */\r\n  donelog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n\r\n    // check if already processed\r\n    if (this.donelog.has(internalPath)) return;\r\n    this.donelog.add(internalPath); // do not parse again\r\n    this.seenlog.add(internalPath); // do not request again\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n          ? SourceKind.LIBRARY\r\n          : SourceKind.DEFAULT\r\n    );\r\n    var program = this.program;\r\n    program.sources.push(source);\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn, null);\r\n      if (statement) statements.push(statement);\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: NamespaceDeclaration | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) {\r\n        this.skipStatement(tn);\r\n        continue;\r\n      }\r\n      if (!decorators) decorators = [];\r\n      decorators.push(decorator);\r\n    }\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (tn.skip(Token.DEFAULT)) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          tn.range()\r\n        );\r\n      }\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        }\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (!tn.skip(Token.CLASS)) {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n          break;\r\n        } else {\r\n          tn.discard(state);\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        // fall through\r\n      }\r\n      case Token.CLASS:\r\n      case Token.INTERFACE: {\r\n        tn.next();\r\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    this.donelog.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): CommonTypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    var type: CommonTypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseSignature(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'void'\r\n    } else if (token == Token.VOID) {\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\r\n      let current = first;\r\n      let parameters = new Array<TypeNode>();\r\n      let nullable = false;\r\n\r\n      // Identifier ('.' Identifier)+\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\r\n          current.next = next;\r\n          current = next;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range(tn.pos)\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          parameters.push(<TypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      while (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(first, parameters, nullable, tn.range(startPos, tn.pos));\r\n\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function signature, as used in type declarations. */\r\n  tryParseSignature(\r\n    tn: Tokenizer\r\n  ): SignatureNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: TypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.TYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <TypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skipIdentifier()) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        if (isSignature) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createSignature(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skipIdentifier()) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var flags = parentFlags;\r\n    if (tn.skip(Token.EXCLAMATION)) {\r\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n    }\r\n\r\n    var type: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    var range = Range.join(identifier.range, tn.range());\r\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\r\n      this.error(\r\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n        range);\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      range\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n      if (!member) return null;\r\n      members.push(<EnumValueDeclaration>member);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEBRACE)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters = new Array<TypeParameterNode>();\r\n    var seenOptional = false;\r\n    while (!tn.skip(Token.GREATERTHAN)) {\r\n      let typeParameter = this.parseTypeParameter(tn);\r\n      if (!typeParameter) return null;\r\n      if (typeParameter.defaultType !== null) {\r\n        seenOptional = true;\r\n      } else if (seenOptional) {\r\n        this.error(\r\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\r\n          typeParameter.range\r\n        );\r\n        typeParameter.defaultType = null;\r\n      }\r\n      typeParameters.push(<TypeParameterNode>typeParameter);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.GREATERTHAN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    if (typeParameters.length === 0) {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)? ('=' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <TypeNode>t;\r\n      }\r\n      let defaultType: TypeNode | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        defaultType = <TypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        defaultType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private parseParametersThis: TypeNode | null = null;\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n    var thisType: CommonTypeNode | null = null;\r\n\r\n    // check if there is a leading `this` parameter\r\n    this.parseParametersThis = null;\r\n    if (tn.skip(Token.THIS)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        thisType = this.parseType(tn); // reports\r\n        if (!thisType) return null;\r\n        if (thisType.kind == NodeKind.TYPE) {\r\n          this.parseParametersThis = <TypeNode>thisType;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            thisType.range\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n        return null;\r\n      }\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          return parameters;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let param = this.parseParameter(tn, isConstructor); // reports\r\n      if (!param) return null;\r\n      if (seenRest && !reportedRest) {\r\n        this.error(\r\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n          seenRest.name.range\r\n        );\r\n        reportedRest = true;\r\n      }\r\n      switch (param.parameterKind) {\r\n        default: {\r\n          if (seenOptional) {\r\n            this.error(\r\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n              param.name.range\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ParameterKind.OPTIONAL: {\r\n          seenOptional = true;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          seenRest = param;\r\n          break;\r\n        }\r\n      }\r\n      parameters.push(param);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (isConstructor) {\r\n      if (tn.skip(Token.PUBLIC)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PUBLIC;\r\n      } else if (tn.skip(Token.PROTECTED)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PROTECTED;\r\n      } else if (tn.skip(Token.PRIVATE)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PRIVATE;\r\n      }\r\n      if (tn.peek() == Token.READONLY) {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek() != Token.COLON) { // modifier\r\n          tn.discard(state);\r\n          if (!startRange) startRange = tn.range();\r\n          accessFlags |= CommonFlags.READONLY;\r\n        } else { // identifier\r\n          tn.reset(state);\r\n        }\r\n      }\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skipIdentifier()) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: CommonTypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n    var thisType = this.parseParametersThis;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      ArrowKind.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var arrowKind = ArrowKind.NONE;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skipIdentifier()) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    arrowKind: ArrowKind,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n    }\r\n\r\n    if (arrowKind) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null, // TODO?\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null;\r\n    if (arrowKind) {\r\n      body = this.parseStatement(tn, false);\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      CommonFlags.NONE,\r\n      arrowKind,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClassOrInterface(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at ('class' | 'interface'):\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    var isInterface = tn.token == Token.INTERFACE;\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    var extendsType: TypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.TYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <TypeNode>t;\r\n    }\r\n\r\n    var implementsTypes: TypeNode[] | null = null;\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        if (!isInterface) {\r\n          if (!implementsTypes) implementsTypes = [];\r\n          implementsTypes.push(<TypeNode>type);\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration: ClassDeclaration;\r\n    if (isInterface) {\r\n      assert(!implementsTypes);\r\n      declaration = Node.createInterfaceDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    } else {\r\n      declaration = Node.createClassDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        implementsTypes,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (member) members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return declaration;\r\n  }\r\n\r\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\r\n\r\n    // at 'class': Identifier? '{' ... '}'\r\n\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n\r\n    if (tn.skipIdentifier()) {\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    } else {\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration = Node.createClassDeclaration(\r\n      name,\r\n      [],\r\n      null,\r\n      null,\r\n      members,\r\n      null,\r\n      CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (member) members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return Node.createClassExpression(declaration);\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\r\n\r\n    var decorators = new Array<DecoratorNode>();\r\n    if (tn.skip(Token.AT)) {\r\n      do {\r\n        let decorator = this.parseDecorator(tn);\r\n        if (!decorator) break;\r\n        decorators.push(<DecoratorNode>decorator);\r\n      } while (tn.skip(Token.AT));\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n        );\r\n      }\r\n    }\r\n\r\n    // inherit ambient status\r\n    var flags = parent.flags & CommonFlags.AMBIENT;\r\n\r\n    // implemented methods are virtual\r\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\r\n\r\n    var accessStart = 0;\r\n    var accessEnd = 0;\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"public\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PUBLIC;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"private\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PRIVATE;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"protected\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PROTECTED;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    }\r\n\r\n    var staticStart = 0;\r\n    var staticEnd = 0;\r\n    var abstractStart = 0;\r\n    var abstractEnd = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"static\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      flags |= CommonFlags.INSTANCE;\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        if (isInterface) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(), \"abstract\"\r\n          );\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.skip(Token.READONLY)) {\r\n      flags |= CommonFlags.READONLY;\r\n      readonlyStart = tn.tokenPos;\r\n      readonlyEnd = tn.pos;\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (!isInterface) {\r\n      if (tn.skip(Token.GET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.GET;\r\n          isGetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.SET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.SET;\r\n          isSetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n        flags |= CommonFlags.CONSTRUCTOR;\r\n        isConstructor = true;\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      }\r\n    }\r\n\r\n    var name: IdentifierExpression;\r\n    if (isConstructor) {\r\n      name = Node.createConstructorExpression(tn.range());\r\n    } else {\r\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\r\n        // TODO: also handle symbols, which might have some of these modifiers\r\n        if (flags & CommonFlags.PUBLIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"public\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PROTECTED) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PRIVATE) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\r\n        if (!retIndex) return null;\r\n        tn.skip(Token.SEMICOLON);\r\n        return retIndex;\r\n      }\r\n      if (!tn.skipIdentifier()) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      let thisType = this.parseParametersThis;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createSignature(\r\n        parameters,\r\n        returnType,\r\n        thisType,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\r\n            tn.range(), name.text\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.QUESTION)) {\r\n        this.error(\r\n          DiagnosticCode.Optional_properties_are_not_supported,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      if (tn.skip(Token.EXCLAMATION)) {\r\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let range = tn.range(startPos, tn.pos);\r\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\r\n        this.error(\r\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n          range\r\n        );\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        range\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[]): IndexSignatureDeclaration | null {\r\n\r\n    // at: '[': 'key' ':' Type ']' ':' Type\r\n\r\n    if (decorators.length) {\r\n      this.error(\r\n        DiagnosticCode.Decorators_are_not_valid_here,\r\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n      ); // recoverable\r\n    }\r\n\r\n    var start = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let id = tn.readIdentifier();\r\n      if (id == \"key\") {\r\n        if (tn.skip(Token.COLON)) {\r\n          let keyType = this.parseType(tn);\r\n          if (!keyType) return null;\r\n          if (keyType.kind != NodeKind.TYPE) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              tn.range()\r\n            );\r\n            return null;\r\n          }\r\n          if (tn.skip(Token.CLOSEBRACKET)) {\r\n            if (tn.skip(Token.COLON)) {\r\n              let valueType = this.parseType(tn);\r\n              if (!valueType) return null;\r\n              return Node.createIndexSignatureDeclaration(<TypeNode>keyType, valueType, tn.range(start, tn.pos));\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \":\"\r\n              );\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \":\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"key\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let ns = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, ns);\r\n          if (member) members.push(member);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ns;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    isDeclare: bool\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    var path: StringLiteralExpression | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseExportMember(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\r\n          let internalPath = assert(ret.internalPath);\r\n          let source = tn.source;\r\n          if (!source.exportPaths) source.exportPaths = new Set();\r\n          source.exportPaths.add(internalPath);\r\n          if (!this.seenlog.has(internalPath)) {\r\n            this.backlog.push(internalPath);\r\n            this.seenlog.add(internalPath);\r\n          }\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"from\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      members = new Array();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseImportDeclaration(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.backlog.push(internalPath);\r\n          this.seenlog.add(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skipIdentifier()) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        if (tn.token == Token.ENDOFFILE) return null;\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skipIdentifier()) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(IdentifierHandling.PREFER);\r\n    var startPos = tn.tokenPos;\r\n    var precedence = determinePrecedenceStart(token);\r\n    if (precedence != Precedence.NONE) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, precedence);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var expr: Expression | null = null;\r\n    switch (token) {\r\n\r\n      case Token.NULL: return Node.createNullExpression(tn.range());\r\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\r\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            ArrowKind.ARROW_PARENTHESIZED\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(IdentifierHandling.PREFER)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (\r\n                    !tn.skip(Token.COLON) &&\r\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\r\n                  ) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // optional parameter or parenthesized\r\n                case Token.QUESTION: {\r\n                  if (\r\n                    tn.skip(Token.COLON) ||   // optional parameter with type\r\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\r\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\r\n                  ) {\r\n                    tn.reset(state);\r\n                    return this.parseFunctionExpression(tn);\r\n                  }\r\n                  again = false; // parenthesized\r\n                  break;\r\n                  }\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        while (!tn.skip(Token.CLOSEBRACKET)) {\r\n          if (tn.peek() == Token.COMMA) {\r\n            expr = null; // omitted\r\n          } else {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n          }\r\n          elementExpressions.push(expr);\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACKET)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"]\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // ObjectLiteralExpression\r\n      case Token.OPENBRACE: {\r\n        let startPos = tn.tokenPos;\r\n        let names = new Array<IdentifierExpression>();\r\n        let values = new Array<Expression>();\r\n        let name: IdentifierExpression;\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          if (!tn.skipIdentifier()) {\r\n            if (!tn.skip(Token.STRINGLITERAL)) {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                tn.range(),\r\n              );\r\n              return null;\r\n            }\r\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\r\n            name.isQuoted = true;\r\n          } else {\r\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          }\r\n          names.push(name);\r\n          if (tn.skip(Token.COLON)) {\r\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!value) return null;\r\n            values.push(value);\r\n          } else if (!name.isQuoted) {\r\n            values.push(name);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACE)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"}\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [\r\n              Node.createParameter(\r\n                identifier,\r\n                Node.createOmittedType(identifier.range.atEnd),\r\n                null,\r\n                ParameterKind.DEFAULT,\r\n                identifier.range\r\n              )\r\n            ],\r\n            ArrowKind.ARROW_SINGLE,\r\n            startPos\r\n          );\r\n        }\r\n        return identifier;\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\r\n          this.error(\r\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\r\n            tn.range()\r\n          );\r\n        }\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      case Token.CLASS: {\r\n        return this.parseClassExpression(tn);\r\n      }\r\n      default: {\r\n        if (token == Token.ENDOFFILE) {\r\n          this.error(\r\n            DiagnosticCode.Unexpected_end_of_text,\r\n            tn.range(startPos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Expression_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): CommonTypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments = new Array<CommonTypeNode>();\r\n    do {\r\n      if (tn.peek() === Token.GREATERTHAN) {\r\n        break;\r\n      }\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!expr) return null;\r\n      args.push(expr);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = Precedence.COMMA\r\n  ): Expression | null {\r\n    assert(precedence != Precedence.NONE);\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\r\n\r\n    var startPos = expr.range.start;\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn); // reports\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        case Token.EXCLAMATION: {\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.NONNULL,\r\n            expr,\r\n            null,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // InstanceOfExpression\r\n        case Token.INSTANCEOF: {\r\n          let isType = this.parseType(tn); // reports\r\n          if (!isType) return null;\r\n          expr = Node.createInstanceOfExpression(\r\n            expr,\r\n            isType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn); // reports\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\r\n            ? Precedence.COMMA + 1\r\n            : Precedence.COMMA\r\n          );\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (tn.skipIdentifier()) {\r\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n            } else {\r\n              next = this.parseExpression(tn,\r\n                isRightAssociative(token)\r\n                  ? nextPrecedence\r\n                  : nextPrecedence + 1\r\n              );\r\n              if (!next) return null;\r\n            }\r\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\r\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\r\n              if (!expr) return null;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            next = this.parseExpression(tn,\r\n              isRightAssociative(token)\r\n                ? nextPrecedence\r\n                : nextPrecedence + 1\r\n            );\r\n            if (!next) return null;\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  private joinPropertyCall(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    expr: Expression,\r\n    call: CallExpression\r\n  ): Expression | null {\r\n    var callee = call.expression;\r\n    switch (callee.kind) {\r\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\r\n        call.expression = Node.createPropertyAccessExpression(\r\n          expr,\r\n          <IdentifierExpression>callee,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.CALL: { // join call target und wrap the original call around it\r\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\r\n        if (!inner) return null;\r\n        call.expression = inner;\r\n        call.range = tn.range(startPos, tn.pos);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          call.range\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    return call;\r\n  }\r\n\r\n  private maybeParseCallExpression(\r\n    tn: Tokenizer,\r\n    expr: Expression\r\n  ): Expression {\r\n    if (nodeIsCallable(expr.kind)) {\r\n      let typeArguments: CommonTypeNode[] | null = null;\r\n      while (\r\n        tn.skip(Token.OPENPAREN)\r\n        ||\r\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\r\n      ) {\r\n        let args = this.parseArguments(tn);\r\n        if (!args) break;\r\n        expr = Node.createCallExpression( // is again callable\r\n          expr,\r\n          typeArguments,\r\n          args,\r\n          tn.range(expr.range.start, tn.pos)\r\n        );\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.SEMICOLON      // end of the statement for sure\r\n      ) {\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipBlock(tn: Tokenizer): void {\r\n    // at '{': ... '}'\r\n    var depth = 1;\r\n    var again = true;\r\n    do {\r\n      switch (tn.next()) {\r\n        case Token.ENDOFFILE: {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          again = false;\r\n          break;\r\n        }\r\n        case Token.OPENBRACE: {\r\n          ++depth;\r\n          break;\r\n        }\r\n        case Token.CLOSEBRACE: {\r\n          --depth;\r\n          if (!depth) again = false;\r\n          break;\r\n        }\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (again);\r\n  }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  NONE,\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET:\r\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\n/// <reference path=\"./node.d.ts\" />\r\n\r\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\r\nimport \"../../../std/portable/index\";\r\nimport \"./float\";\r\nimport \"./i64\";\r\n\r\nimport { Module } from \"../../module\";\r\n\r\nModule.prototype.toText = function(this: Module) {\r\n  return binaryen.wrapModule(this.ref).emitStackIR();\r\n};\r\n\r\nModule.prototype.toAsmjs = function(this: Module) {\r\n  return binaryen.wrapModule(this.ref).emitAsmjs();\r\n};\r\n","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\nglobal.binaryen = binaryen;\r\n\r\nfor (var key in binaryen) {\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\r\n}\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.__memory_allocate = binaryen._malloc;\r\nglobal.__memory_free = binaryen._free;\r\nglobal.__memory_copy = binaryen._memmove;\r\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\r\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__19__;","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nglobalScope.ASC_TARGET = 0; // JS\r\nglobalScope.ASC_NO_ASSERT = false;\r\nglobalScope.ASC_MEMORY_BASE = 0;\r\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\r\nglobalScope.ASC_SHRINK_LEVEL = 0;\r\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\r\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\r\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\r\nglobalScope.ASC_FEATURE_SIMD = false;\r\nglobalScope.ASC_FEATURE_THREADS = false;\r\n\r\nvar F64 = new Float64Array(1);\r\nvar U64 = new Uint32Array(F64.buffer);\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value:  127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value:  32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value:   0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value:     0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value:          0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: false, writable: false },\r\n  \"MAX_VALUE\": { value: true,  writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\r\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\r\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"ctz\"] = function ctz(value) {\r\n  var c = Math.clz32(value & -value);\r\n  return value ? 31 - c : c;\r\n};\r\n\r\nglobalScope[\"popcnt\"] = function popcnt(value) {\r\n  value -= value >>> 1 & 0x55555555;\r\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\r\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\r\n};\r\n\r\nglobalScope[\"rotl\"] = function rotl(value, shift) {\r\n  shift &= 31;\r\n  return (value << shift) | (value >>> (32 - shift));\r\n};\r\n\r\nglobalScope[\"rotr\"] = function rotr(value, shift) {\r\n  shift &= 31;\r\n  return (value >>> shift) | (value << (32 - shift));\r\n};\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\n// Adopt code from https://github.com/rfk/wasm-polyfill\r\nglobalScope[\"nearest\"] = function nearest(value) {\r\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\r\n    return 2.0 * Math.round(value * 0.5);\r\n  }\r\n  return Math.round(value);\r\n};\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"copysign\"] = function copysign(x, y) {\r\n  return Math.abs(x) * Math.sign(y);\r\n};\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\r\n  return parseInt(str, undefined) | 0;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isReference\"] = function isReference(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\r\n  return expr\r\n    && typeof expr === 'object'\r\n    && typeof expr.length === 'number'\r\n    && expr.length >= 0\r\n    && Math.trunc(expr.length) === expr.length;\r\n}\r\n\r\nglobalScope[\"isDefined\"] = function isDefined(expr) {\r\n  return typeof expr !== \"undefined\";\r\n}\r\n\r\nglobalScope[\"isConstant\"] = function isConstant(expr) {\r\n  return false;\r\n};\r\n\r\nglobalScope[\"unchecked\"] = function unchecked(expr) {\r\n  return expr;\r\n};\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nglobalScope[\"JSMath\"] = Math;\r\nglobalScope[\"JSMath\"].signbit = function signbit(x) {\r\n  F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\r\n}\r\n\r\nglobalScope[\"memory\"] = (() => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n  return {\r\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\r\n      if (!(size >>>= 0)) return 0;\r\n      if (HEAP_OFFSET + size > HEAP.length) {\r\n        var oldHeap = HEAP;\r\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n        HEAP.set(oldHeap);\r\n      }\r\n      var ptr = HEAP_OFFSET;\r\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n      return ptr;\r\n    },\r\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\r\n      HEAP.fill(value, dest, dest + size);\r\n    },\r\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\r\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\r\n      HEAP.copyWithin(dest, src, src + size);\r\n    },\r\n    reset: globalScope[\"__memory_reset\"] || function reset() {\r\n      HEAP = new Uint8Array(0);\r\n      HEAP_OFFSET = 0;\r\n    }\r\n  };\r\n})();\r\n\r\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\r\n  HEAP[(ptr | 0) + (offset | 0)] = value;\r\n};\r\n\r\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\r\n  return HEAP[(ptr | 0) + (offset | 0)];\r\n};\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_zero = Long.ZERO;\r\n\r\nglobal.i64_one = Long.ONE;\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_eq = function(left, right) {\r\n  return left.eq(right);\r\n};\r\n\r\nglobal.i64_ne = function(left, right) {\r\n  return left.ne(right);\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\n import {\r\n  Compiler,\r\n  ConversionKind,\r\n  WrapMode,\r\n  Feature\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression,\r\n  CallExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  AtomicRMWOp,\r\n  SIMDExtractOp,\r\n  SIMDReplaceOp,\r\n  SIMDShiftOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI64High,\r\n  getConstValueI64Low,\r\n  getConstValueI32,\r\n  getConstValueF32,\r\n  getConstValueF64\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  OperatorKind,\r\n  FunctionPrototype,\r\n  Class,\r\n  Field,\r\n  Global,\r\n  DecoratorFlags,\r\n  ClassPrototype\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags\r\n} from \"./flow\";\r\n\r\nimport {\r\n  ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeF32,\r\n  writeF64,\r\n  isPowerOf2\r\n} from \"./util\";\r\n\r\n/** Symbols of various compiler built-ins. */\r\nexport namespace BuiltinSymbols {\r\n  // std/builtins.ts\r\n  export const isInteger = \"~lib/builtins/isInteger\";\r\n  export const isFloat = \"~lib/builtins/isFloat\";\r\n  export const isSigned = \"~lib/builtins/isSigned\";\r\n  export const isReference = \"~lib/builtins/isReference\";\r\n  export const isString = \"~lib/builtins/isString\";\r\n  export const isArray = \"~lib/builtins/isArray\";\r\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\r\n  export const isFunction = \"~lib/builtins/isFunction\";\r\n  export const isNullable = \"~lib/builtins/isNullable\";\r\n  export const isDefined = \"~lib/builtins/isDefined\";\r\n  export const isConstant = \"~lib/builtins/isConstant\";\r\n  export const isManaged = \"~lib/builtins/isManaged\";\r\n\r\n  export const clz = \"~lib/builtins/clz\";\r\n  export const ctz = \"~lib/builtins/ctz\";\r\n  export const popcnt = \"~lib/builtins/popcnt\";\r\n  export const rotl = \"~lib/builtins/rotl\";\r\n  export const rotr = \"~lib/builtins/rotr\";\r\n  export const abs = \"~lib/builtins/abs\";\r\n  export const max = \"~lib/builtins/max\";\r\n  export const min = \"~lib/builtins/min\";\r\n  export const ceil = \"~lib/builtins/ceil\";\r\n  export const floor = \"~lib/builtins/floor\";\r\n  export const copysign = \"~lib/builtins/copysign\";\r\n  export const nearest = \"~lib/builtins/nearest\";\r\n  export const reinterpret = \"~lib/builtins/reinterpret\";\r\n  export const sqrt = \"~lib/builtins/sqrt\";\r\n  export const trunc = \"~lib/builtins/trunc\";\r\n  export const load = \"~lib/builtins/load\";\r\n  export const store = \"~lib/builtins/store\";\r\n  export const atomic_load = \"~lib/builtins/atomic.load\";\r\n  export const atomic_store = \"~lib/builtins/atomic.store\";\r\n  export const atomic_add = \"~lib/builtins/atomic.add\";\r\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\r\n  export const atomic_and = \"~lib/builtins/atomic.and\";\r\n  export const atomic_or = \"~lib/builtins/atomic.or\";\r\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\r\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\r\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\r\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\r\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\r\n\r\n  export const sizeof = \"~lib/builtins/sizeof\";\r\n  export const alignof = \"~lib/builtins/alignof\";\r\n  export const offsetof = \"~lib/builtins/offsetof\";\r\n  export const select = \"~lib/builtins/select\";\r\n  export const unreachable = \"~lib/builtins/unreachable\";\r\n  export const changetype = \"~lib/builtins/changetype\";\r\n  export const assert = \"~lib/builtins/assert\";\r\n  export const unchecked = \"~lib/builtins/unchecked\";\r\n  export const call_indirect = \"~lib/builtins/call_indirect\";\r\n  export const instantiate = \"~lib/builtins/instantiate\";\r\n\r\n  export const i8 = \"~lib/builtins/i8\";\r\n  export const i16 = \"~lib/builtins/i16\";\r\n  export const i32 = \"~lib/builtins/i32\";\r\n  export const i64 = \"~lib/builtins/i64\";\r\n  export const isize = \"~lib/builtins/isize\";\r\n  export const u8 = \"~lib/builtins/u8\";\r\n  export const u16 = \"~lib/builtins/u16\";\r\n  export const u32 = \"~lib/builtins/u32\";\r\n  export const u64 = \"~lib/builtins/u64\";\r\n  export const usize = \"~lib/builtins/usize\";\r\n  export const bool = \"~lib/builtins/bool\";\r\n  export const f32 = \"~lib/builtins/f32\";\r\n  export const f64 = \"~lib/builtins/f64\";\r\n  export const v128 = \"~lib/builtins/v128\";\r\n  export const void_ = \"~lib/builtins/void\";\r\n\r\n  export const i32_clz = \"~lib/builtins/i32.clz\";\r\n  export const i64_clz = \"~lib/builtins/i64.clz\";\r\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\r\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\r\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\r\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\r\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\r\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\r\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\r\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\r\n\r\n  export const f32_abs = \"~lib/builtins/f32.abs\";\r\n  export const f64_abs = \"~lib/builtins/f64.abs\";\r\n  export const f32_max = \"~lib/builtins/f32.max\";\r\n  export const f64_max = \"~lib/builtins/f64.max\";\r\n  export const f32_min = \"~lib/builtins/f32.min\";\r\n  export const f64_min = \"~lib/builtins/f64.min\";\r\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\r\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\r\n  export const f32_floor = \"~lib/builtins/f32.floor\";\r\n  export const f64_floor = \"~lib/builtins/f64.floor\";\r\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\r\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\r\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\r\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\r\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\r\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\r\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\r\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\r\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\r\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\r\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\r\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\r\n\r\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\r\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\r\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\r\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\r\n  export const i32_load = \"~lib/builtins/i32.load\";\r\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\r\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\r\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\r\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\r\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\r\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\r\n  export const i64_load = \"~lib/builtins/i64.load\";\r\n  export const f32_load = \"~lib/builtins/f32.load\";\r\n  export const f64_load = \"~lib/builtins/f64.load\";\r\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\r\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\r\n  export const i32_store = \"~lib/builtins/i32.store\";\r\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\r\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\r\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\r\n  export const i64_store = \"~lib/builtins/i64.store\";\r\n  export const f32_store = \"~lib/builtins/f32.store\";\r\n  export const f64_store = \"~lib/builtins/f64.store\";\r\n\r\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\r\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\r\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\r\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\r\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\r\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\r\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\r\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\r\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\r\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\r\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\r\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\r\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\r\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\r\n  export const i32_atomic_rmw8_u_add = \"~lib/builtins/i32.atomic.rmw8_u.add\";\r\n  export const i32_atomic_rmw16_u_add = \"~lib/builtins/i32.atomic.rmw16_u.add\";\r\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\r\n  export const i64_atomic_rmw8_u_add = \"~lib/builtins/i64.atomic.rmw8_u.add\";\r\n  export const i64_atomic_rmw16_u_add = \"~lib/builtins/i64.atomic.rmw16_u.add\";\r\n  export const i64_atomic_rmw32_u_add = \"~lib/builtins/i64.atomic.rmw32_u.add\";\r\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\r\n  export const i32_atomic_rmw8_u_sub = \"~lib/builtins/i32.atomic.rmw8_u.sub\";\r\n  export const i32_atomic_rmw16_u_sub = \"~lib/builtins/i32.atomic.rmw16_u.sub\";\r\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\r\n  export const i64_atomic_rmw8_u_sub = \"~lib/builtins/i64.atomic.rmw8_u.sub\";\r\n  export const i64_atomic_rmw16_u_sub = \"~lib/builtins/i64.atomic.rmw16_u.sub\";\r\n  export const i64_atomic_rmw32_u_sub = \"~lib/builtins/i64.atomic.rmw32_u.sub\";\r\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\r\n  export const i32_atomic_rmw8_u_and = \"~lib/builtins/i32.atomic.rmw8_u.and\";\r\n  export const i32_atomic_rmw16_u_and = \"~lib/builtins/i32.atomic.rmw16_u.and\";\r\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\r\n  export const i64_atomic_rmw8_u_and = \"~lib/builtins/i64.atomic.rmw8_u.and\";\r\n  export const i64_atomic_rmw16_u_and = \"~lib/builtins/i64.atomic.rmw16_u.and\";\r\n  export const i64_atomic_rmw32_u_and = \"~lib/builtins/i64.atomic.rmw32_u.and\";\r\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\r\n  export const i32_atomic_rmw8_u_or = \"~lib/builtins/i32.atomic.rmw8_u.or\";\r\n  export const i32_atomic_rmw16_u_or = \"~lib/builtins/i32.atomic.rmw16_u.or\";\r\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\r\n  export const i64_atomic_rmw8_u_or = \"~lib/builtins/i64.atomic.rmw8_u.or\";\r\n  export const i64_atomic_rmw16_u_or = \"~lib/builtins/i64.atomic.rmw16_u.or\";\r\n  export const i64_atomic_rmw32_u_or = \"~lib/builtins/i64.atomic.rmw32_u.or\";\r\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\r\n  export const i32_atomic_rmw8_u_xor = \"~lib/builtins/i32.atomic.rmw8_u.xor\";\r\n  export const i32_atomic_rmw16_u_xor = \"~lib/builtins/i32.atomic.rmw16_u.xor\";\r\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\r\n  export const i64_atomic_rmw8_u_xor = \"~lib/builtins/i64.atomic.rmw8_u.xor\";\r\n  export const i64_atomic_rmw16_u_xor = \"~lib/builtins/i64.atomic.rmw16_u.xor\";\r\n  export const i64_atomic_rmw32_u_xor = \"~lib/builtins/i64.atomic.rmw32_u.xor\";\r\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\r\n  export const i32_atomic_rmw8_u_xchg = \"~lib/builtins/i32.atomic.rmw8_u.xchg\";\r\n  export const i32_atomic_rmw16_u_xchg = \"~lib/builtins/i32.atomic.rmw16_u.xchg\";\r\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\r\n  export const i64_atomic_rmw8_u_xchg = \"~lib/builtins/i64.atomic.rmw8_u.xchg\";\r\n  export const i64_atomic_rmw16_u_xchg = \"~lib/builtins/i64.atomic.rmw16_u.xchg\";\r\n  export const i64_atomic_rmw32_u_xchg = \"~lib/builtins/i64.atomic.rmw32_u.xchg\";\r\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\r\n  export const i32_atomic_rmw8_u_cmpxchg = \"~lib/builtins/i32.atomic.rmw8_u.cmpxchg\";\r\n  export const i32_atomic_rmw16_u_cmpxchg = \"~lib/builtins/i32.atomic.rmw16_u.cmpxchg\";\r\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\r\n  export const i64_atomic_rmw8_u_cmpxchg = \"~lib/builtins/i64.atomic.rmw8_u.cmpxchg\";\r\n  export const i64_atomic_rmw16_u_cmpxchg = \"~lib/builtins/i64.atomic.rmw16_u.cmpxchg\";\r\n  export const i64_atomic_rmw32_u_cmpxchg = \"~lib/builtins/i64.atomic.rmw32_u.cmpxchg\";\r\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\r\n  export const i32_wait = \"~lib/builtins/i32.wait\";\r\n  export const i64_wait = \"~lib/builtins/i64.wait\";\r\n  export const i32_notify = \"~lib/builtins/i32.notify\";\r\n  export const i64_notify = \"~lib/builtins/i64.notify\";\r\n\r\n  export const v128_splat = \"~lib/builtins/v128.splat\";\r\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\r\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\r\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\r\n  export const v128_load = \"~lib/builtins/v128.load\";\r\n  export const v128_store = \"~lib/builtins/v128.store\";\r\n  export const v128_add = \"~lib/builtins/v128.add\";\r\n  export const v128_sub = \"~lib/builtins/v128.sub\";\r\n  export const v128_mul = \"~lib/builtins/v128.mul\";\r\n  export const v128_div = \"~lib/builtins/v128.div\";\r\n  export const v128_neg = \"~lib/builtins/v128.neg\";\r\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\r\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\r\n  export const v128_shl = \"~lib/builtins/v128.shl\";\r\n  export const v128_shr = \"~lib/builtins/v128.shr\";\r\n  export const v128_and = \"~lib/builtins/v128.and\";\r\n  export const v128_or = \"~lib/builtins/v128.or\";\r\n  export const v128_xor = \"~lib/builtins/v128.xor\";\r\n  export const v128_not = \"~lib/builtins/v128.not\";\r\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\r\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\r\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\r\n  export const v128_min = \"~lib/builtins/v128.min\";\r\n  export const v128_max = \"~lib/builtins/v128.max\";\r\n  export const v128_abs = \"~lib/builtins/v128.abs\";\r\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\r\n  export const v128_eq = \"~lib/builtins/v128.eq\";\r\n  export const v128_ne = \"~lib/builtins/v128.ne\";\r\n  export const v128_lt = \"~lib/builtins/v128.lt\";\r\n  export const v128_le = \"~lib/builtins/v128.le\";\r\n  export const v128_gt = \"~lib/builtins/v128.gt\";\r\n  export const v128_ge = \"~lib/builtins/v128.ge\";\r\n  export const v128_convert = \"~lib/builtins/v128.convert\";\r\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\r\n\r\n  export const i8x16 = \"~lib/builtins/i8x16\";\r\n  export const i16x8 = \"~lib/builtins/i16x8\";\r\n  export const i32x4 = \"~lib/builtins/i32x4\";\r\n  export const i64x2 = \"~lib/builtins/i64x2\";\r\n  export const f32x4 = \"~lib/builtins/f32x4\";\r\n  export const f64x2 = \"~lib/builtins/f64x2\";\r\n\r\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\r\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\r\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\r\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\r\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\r\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\r\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\r\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\r\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\r\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\r\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\r\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\r\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\r\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\r\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\r\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\r\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\r\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\r\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\r\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\r\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\r\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\r\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\r\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\r\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\r\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\r\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\r\n\r\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\r\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\r\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\r\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\r\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\r\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\r\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\r\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\r\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\r\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\r\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\r\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\r\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\r\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\r\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\r\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\r\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\r\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\r\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\r\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\r\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\r\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\r\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\r\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\r\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\r\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\r\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\r\n\r\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\r\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\r\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\r\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\r\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\r\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\r\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\r\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\r\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\r\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\r\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\r\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\r\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\r\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\r\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\r\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\r\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\r\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\r\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\r\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\r\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\r\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\r\n  export const i32x4_trunc_s_f32x4_sat = \"~lib/builtins/i32x4.trunc_s_f32x4_sat\";\r\n  export const i32x4_trunc_u_f32x4_sat = \"~lib/builtins/i32x4.trunc_u_f32x4_sat\";\r\n\r\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\r\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\r\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\r\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\r\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\r\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\r\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\r\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\r\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\r\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\r\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\r\n  export const i64x2_trunc_s_f64x2_sat = \"~lib/builtins/i64x2.trunc_s_f64x2_sat\";\r\n  export const i64x2_trunc_u_f64x2_sat = \"~lib/builtins/i64x2.trunc_u_f64x2_sat\";\r\n\r\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\r\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\r\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\r\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\r\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\r\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\r\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\r\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\r\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\r\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\r\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\r\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\r\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\r\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\r\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\r\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\r\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\r\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\r\n  export const f32x4_convert_s_i32x4 = \"~lib/builtins/f32x4.convert_s_i32x4\";\r\n  export const f32x4_convert_u_i32x4 = \"~lib/builtins/f32x4.convert_u_i32x4\";\r\n\r\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\r\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\r\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\r\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\r\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\r\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\r\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\r\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\r\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\r\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\r\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\r\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\r\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\r\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\r\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\r\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\r\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\r\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\r\n  export const f64x2_convert_s_i64x2 = \"~lib/builtins/f64x2.convert_s_i64x2\";\r\n  export const f64x2_convert_u_i64x2 = \"~lib/builtins/f64x2.convert_u_i64x2\";\r\n\r\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\r\n\r\n  // std/diagnostics.ts\r\n  export const ERROR = \"~lib/diagnostics/ERROR\";\r\n  export const WARNING = \"~lib/diagnostics/WARNING\";\r\n  export const INFO = \"~lib/diagnostics/INFO\";\r\n  // std/memory.ts\r\n  export const HEAP_BASE = \"~lib/memory/HEAP_BASE\";\r\n  export const memory_size = \"~lib/memory/memory.size\";\r\n  export const memory_grow = \"~lib/memory/memory.grow\";\r\n  export const memory_copy = \"~lib/memory/memory.copy\";\r\n  export const memory_fill = \"~lib/memory/memory.fill\";\r\n  // std/gc.ts\r\n  export const iterateRoots = \"~lib/gc/iterateRoots\";\r\n}\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: CallExpression\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  var arg0: ExpressionRef,\r\n      arg1: ExpressionRef,\r\n      arg2: ExpressionRef,\r\n      ret: ExpressionRef;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // types\r\n\r\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.SIGNED)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      if (classType) {\r\n        let stringInstance = compiler.program.stringInstance;\r\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\r\n      }\r\n      return module.createI32(0);\r\n    }\r\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classReference = type.classReference;\r\n      if (!classReference) return module.createI32(0);\r\n      let classPrototype = classReference.prototype;\r\n      return module.createI32(\r\n        (<ClassPrototype>classPrototype).extends(compiler.program.arrayPrototype)\r\n          ? 1\r\n          : 0\r\n      );\r\n    }\r\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classReference = type.classReference;\r\n      if (!classReference) return module.createI32(0);\r\n      return module.createI32(\r\n        classReference.lookupInSelf(\"length\") && (\r\n          classReference.lookupOverload(OperatorKind.INDEXED_GET) ||\r\n          classReference.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET)\r\n        ) ? 1 : 0\r\n      );\r\n    }\r\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return module.createI32(type.signatureReference ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return module.createI32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let element = compiler.resolver.resolveExpression(\r\n        operands[0],\r\n        compiler.currentFlow,\r\n        Type.void,\r\n        ReportMode.SWALLOW\r\n      );\r\n      return module.createI32(element ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      compiler.currentType = Type.bool;\r\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isManaged: { // isManaged<T>() -> bool\r\n      if (!compiler.program.hasGC) {\r\n        compiler.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      return classType !== null && !classType.hasDecorator(DecoratorFlags.UNMANAGED)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n\r\n    // math\r\n\r\n    case BuiltinSymbols.clz: { // clz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U16:\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ClzI64\r\n              : UnaryOp.ClzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.ctz: { // ctz<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U16:\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.CtzI64\r\n              : UnaryOp.CtzI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.popcnt: { // popcnt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.BOOL: // usually overflows\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U16:\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.PopcntI64\r\n              : UnaryOp.PopcntI32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\r\n            compiler.currentType\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret; // possibly overflows\r\n    }\r\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          ret = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\r\n            compiler.currentType\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          ret = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0,\r\n            arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret; // possibly overflowws\r\n    }\r\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFlow;\r\n\r\n          // possibly overflows, e.g. abs<i8>(-128) == 128\r\n          let tempLocal1 = flow.getTempLocal(Type.i32, false);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32, false).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          // (x + (x >> 31)) ^ (x >> 31)\r\n          ret = module.createBinary(BinaryOp.XorI32,\r\n            module.createBinary(BinaryOp.AddI32,\r\n              module.createTeeLocal(\r\n                tempLocalIndex2,\r\n                module.createBinary(BinaryOp.ShrI32,\r\n                  module.createTeeLocal(tempLocalIndex1, arg0),\r\n                  module.createI32(31)\r\n                )\r\n              ),\r\n              module.createGetLocal(tempLocalIndex1, NativeType.I32)\r\n            ),\r\n            module.createGetLocal(tempLocalIndex2, NativeType.I32)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let options = compiler.options;\r\n          let flow = compiler.currentFlow;\r\n          let wasm64 = options.isWasm64;\r\n\r\n          let tempLocal1 = flow.getTempLocal(options.usizeType, false);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType, false).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          ret = module.createBinary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\r\n            module.createBinary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\r\n              module.createTeeLocal(\r\n                tempLocalIndex2,\r\n                module.createBinary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\r\n                  module.createTeeLocal(tempLocalIndex1, arg0),\r\n                  wasm64 ? module.createI64(63) : module.createI32(31)\r\n                )\r\n              ),\r\n              module.createGetLocal(tempLocalIndex1, options.nativeSizeType)\r\n            ),\r\n            module.createGetLocal(tempLocalIndex2, options.nativeSizeType)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let flow = compiler.currentFlow;\r\n\r\n          let tempLocal1 = flow.getTempLocal(Type.i64, false);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64, false).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          // (x + (x >> 63)) ^ (x >> 63)\r\n          ret = module.createBinary(BinaryOp.XorI64,\r\n            module.createBinary(BinaryOp.AddI64,\r\n              module.createTeeLocal(\r\n                tempLocalIndex2,\r\n                module.createBinary(BinaryOp.ShrI64,\r\n                  module.createTeeLocal(tempLocalIndex1, arg0),\r\n                  module.createI64(63)\r\n                )\r\n              ),\r\n              module.createGetLocal(tempLocalIndex1, NativeType.I64)\r\n            ),\r\n            module.createGetLocal(tempLocalIndex2, NativeType.I64)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = flow.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = flow.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = flow.getAndFreeTempLocal(Type.i64, false);\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = flow.getAndFreeTempLocal(Type.i64, false);\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.GtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = flow.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = flow.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = flow.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: {\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg0, compiler.currentType)\r\n          );\r\n          let tempLocal1 = flow.getAndFreeTempLocal(\r\n            compiler.currentType,\r\n            !flow.canOverflow(arg1, compiler.currentType)\r\n          );\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = flow.getAndFreeTempLocal(Type.i64, false);\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtI64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.U64: {\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(Type.i64, false);\r\n          let tempLocal1 = flow.getAndFreeTempLocal(Type.i64, false);\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(BinaryOp.LtU64,\r\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\r\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = flow.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          let flow = compiler.currentFlow;\r\n          let tempLocal0 = flow.getTempLocal(compiler.options.usizeType, false);\r\n          let tempLocal1 = flow.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n          flow.freeTempLocal(tempLocal0);\r\n          ret = module.createSelect(\r\n            module.createTeeLocal(tempLocal0.index, arg0),\r\n            module.createTeeLocal(tempLocal1.index, arg1),\r\n            module.createBinary(\r\n              compiler.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\r\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\r\n            )\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: { // void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.ceil: { // ceil<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.floor: { // floor<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\r\n      if (operands.length != 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\r\n        case TypeKind.F32: {\r\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\r\n      if (operands.length != 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      switch (typeArguments[0].kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            compiler.currentType = typeArguments[0];\r\n            return module.createUnreachable();\r\n          }\r\n          // fall-through\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          arg0 = compiler.compileExpression(\r\n            operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          ret = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: { // small integers and void\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        // case TypeKind.VOID:\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\r\n      if (operands.length != 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments && typeArguments.length) {\r\n        compiler.currentType = typeArguments[0];\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      }\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.USIZE: {\r\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = module.createUnreachable();\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: { // any integer\r\n          ret = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n\r\n    // memory access\r\n\r\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, offset?: usize, align?: usize) -> *\r\n      if (operands.length < 1 || operands.length > 3) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let offset = operands.length >= 2 ? evaluateImmediateOffset(compiler, operands[1]) : 0; // reports\r\n      if (offset < 0) return module.createUnreachable();\r\n      let align: i32;\r\n      let naturalAlign = typeArguments[0].byteSize;\r\n      if (operands.length == 3) {\r\n        align = evaluateImmediateOffset(compiler, operands[2]);\r\n        if (align < 0) return module.createUnreachable();\r\n        if (align > naturalAlign) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        if (!isPowerOf2(align)) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_power_of_two,\r\n            operands[2].range, \"Alignment\"\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      } else {\r\n        align = naturalAlign;\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return module.createLoad(\r\n        typeArguments[0].byteSize,\r\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > typeArguments[0].size\r\n          ? (compiler.currentType = contextualType).toNativeType()\r\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\r\n        offset,\r\n        align\r\n      );\r\n    }\r\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: *, offset?: usize, align?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (operands.length < 2 || operands.length > 4) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"4\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n          : ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let type: Type;\r\n      if (\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        (\r\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\r\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n      let offset = operands.length >= 3 ? evaluateImmediateOffset(compiler, operands[2]) : 0; // reports\r\n      if (offset < 0) return module.createUnreachable();\r\n      let align: i32;\r\n      let naturalAlign = typeArguments[0].byteSize;\r\n      if (operands.length == 4) {\r\n        align = evaluateImmediateOffset(compiler, operands[3]);\r\n        if (align < 0) return module.createUnreachable();\r\n        if (align > naturalAlign) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        if (!isPowerOf2(align)) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_power_of_two,\r\n            operands[3].range, \"Alignment\"\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      } else {\r\n        align = naturalAlign;\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset, align);\r\n    }\r\n    case BuiltinSymbols.atomic_load: {\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let offset = operands.length == 2 ? evaluateImmediateOffset(compiler, operands[1]) : 0; // reports\r\n      if (offset < 0) { // reported in evaluateImmediateOffset\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      return module.createAtomicLoad(\r\n        typeArguments[0].byteSize,\r\n        arg0,\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > typeArguments[0].size\r\n          ? (compiler.currentType = contextualType).toNativeType()\r\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\r\n        offset\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: *, immOffset?, immAlign?) -> void\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.void;\r\n      if (operands.length < 2 || operands.length > 3) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n          : ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let type: Type;\r\n      if (\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        (\r\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\r\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n      let offset = operands.length == 3 ? evaluateImmediateOffset(compiler, operands[2]) : 0; // reports\r\n      if (offset < 0) return module.createUnreachable();\r\n      compiler.currentType = Type.void;\r\n      return module.createAtomicStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\r\n    }\r\n    case BuiltinSymbols.atomic_add:  // add<T!>(ptr, value: T, immOffset?: usize): T;\r\n    case BuiltinSymbols.atomic_sub:  // sub<T!>(ptr, value: T, immOffset?: usize): T;\r\n    case BuiltinSymbols.atomic_and:  // and<T!>(ptr, value: T, immOffset?: usize): T;\r\n    case BuiltinSymbols.atomic_or:   // or<T!>(ptr, value: T, immOffset?: usize): T;\r\n    case BuiltinSymbols.atomic_xor:  // xor<T!>(ptr, value: T, immOffset?: usize): T;\r\n    case BuiltinSymbols.atomic_xchg: // xchg<T!>(ptr, value, immOffset?: usize): T;\r\n    {\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (operands.length < 2 || operands.length > 3) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n          : ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n\r\n      let type: Type;\r\n      if (\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        (\r\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\r\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n\r\n      let offset = operands.length == 3 ? evaluateImmediateOffset(compiler, operands[2]) : 0; // reports\r\n      if (offset < 0) return module.createUnreachable();\r\n      let RMWOp: AtomicRMWOp | null = null;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.atomic_add: { RMWOp = AtomicRMWOp.Add; break; }\r\n        case BuiltinSymbols.atomic_sub: { RMWOp = AtomicRMWOp.Sub; break; }\r\n        case BuiltinSymbols.atomic_and: { RMWOp = AtomicRMWOp.And; break; }\r\n        case BuiltinSymbols.atomic_or: { RMWOp = AtomicRMWOp.Or; break; }\r\n        case BuiltinSymbols.atomic_xor: { RMWOp = AtomicRMWOp.Xor; break; }\r\n        case BuiltinSymbols.atomic_xchg: { RMWOp = AtomicRMWOp.Xchg; break; }\r\n      }\r\n      compiler.currentType = typeArguments[0];\r\n      if (RMWOp !== null) {\r\n        return module.createAtomicRMW(\r\n          RMWOp, typeArguments[0].byteSize, offset, arg0, arg1, type.toNativeType()\r\n        );\r\n      } else {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, cOff?: usize): T\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (operands.length < 3 || operands.length > 4) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        if (operands.length < 3) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        } else {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"3\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n          : ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n          : ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n\r\n      let type: Type;\r\n      if (\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        (\r\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\r\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        arg2 = compiler.convertExpression(\r\n          arg2,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[2]\r\n        );\r\n        type = typeArguments[0];\r\n      } else {\r\n        type = compiler.currentType;\r\n      }\r\n\r\n      let offset = operands.length == 4 ? evaluateImmediateOffset(compiler, operands[3]) : 0; // reports\r\n      if (offset < 0) return module.createUnreachable();\r\n      compiler.currentType = typeArguments[0];\r\n      return module.createAtomicCmpxchg(\r\n        typeArguments[0].byteSize, offset, arg0, arg1, arg2, type.toNativeType()\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected:T, timeout: i64): i32;\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      let hasError = typeArguments == null;\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        hasError = true;\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        hasError = true;\r\n      }\r\n\r\n      if (!typeArguments || hasError) {\r\n        return module.createUnreachable();\r\n      }\r\n\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        typeArguments[0],\r\n        typeArguments[0].is(TypeFlags.INTEGER)\r\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n          : ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        Type.i64,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n\r\n      let type: Type = typeArguments[0];\r\n      if (\r\n        typeArguments[0].is(TypeFlags.INTEGER) &&\r\n        (\r\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\r\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        arg2 = compiler.convertExpression(\r\n          arg2,\r\n          compiler.currentType, typeArguments[0],\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[2]\r\n        );\r\n      }\r\n\r\n      return module.createAtomicWait(\r\n        arg0, arg1, arg2, type.toNativeType()\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_notify: { // notify<T!>(ptr: usize, count: u32): u32;\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      let hasError = typeArguments == null;\r\n      if (operands.length != 2) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        hasError = true;\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        hasError = true;\r\n      }\r\n\r\n      if (!typeArguments || hasError) {\r\n        return module.createUnreachable();\r\n      }\r\n\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        Type.i32,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n\r\n      return module.createAtomicWake(\r\n        arg0, arg1\r\n      );\r\n    }\r\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(byteSize);\r\n        } else {\r\n          ret = module.createI64(byteSize, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(byteSize, 0);\r\n        } else {\r\n          ret = module.createI32(byteSize);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length != 0) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      let alignLog2: i32;\r\n      switch (byteSize) {\r\n        case 1: { alignLog2 = 0; break; }\r\n        case 2: { alignLog2 = 1; break; }\r\n        case 4: { alignLog2 = 2; break; }\r\n        case 8: { alignLog2 = 3; break; }\r\n        default: { assert(false, \"unexected byte size\"); return module.createUnreachable(); }\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          ret = module.createI32(alignLog2);\r\n        } else {\r\n          ret = module.createI64(alignLog2, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          ret = module.createI64(alignLog2, 0);\r\n        } else {\r\n          ret = module.createI32(alignLog2);\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (operands.length > 1) {\r\n        if (!(typeArguments && typeArguments.length == 1)) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n          );\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let classType = typeArguments[0].classReference;\r\n      if (!classType) {\r\n        compiler.error( // TODO: better error\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.createI32(offset);\r\n        } else {\r\n          return module.createI64(offset);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.createI64(offset);\r\n        } else {\r\n          return module.createI32(offset);\r\n        }\r\n      }\r\n    }\r\n\r\n    // control flow\r\n\r\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (operands.length != 3) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      }\r\n      let type = compiler.currentType;\r\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg2 = compiler.makeIsTrueish(\r\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\r\n        compiler.currentType\r\n      );\r\n      compiler.currentType = type;\r\n      switch (compiler.currentType.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL:\r\n        default: {\r\n          ret = module.createSelect(arg0, arg1, arg2);\r\n          break;\r\n        }\r\n        case TypeKind.VOID: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          ret = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // host operations\r\n\r\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 0) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.CurrentMemory);\r\n    }\r\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"0\", operands.length.toString(10)\r\n        );\r\n        arg0 = module.createUnreachable();\r\n      } else {\r\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\r\n    }\r\n    // see: https://github.com/WebAssembly/bulk-memory-operations\r\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\r\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\r\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\r\n        compiler.currentType = Type.void;\r\n        if (!instance) return module.createUnreachable();\r\n        return compiler.compileCallDirect(instance, operands, reportNode);\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      let usizeType = compiler.options.usizeType;\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      return module.createMemoryCopy(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\r\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\r\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\r\n        compiler.currentType = Type.void;\r\n        if (!instance) return module.createUnreachable();\r\n        return compiler.compileCallDirect(instance, operands, reportNode);\r\n      }\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      let usizeType = compiler.options.usizeType;\r\n      arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        Type.u32,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      return module.createMemoryFill(arg0, arg1, arg2);\r\n    }\r\n\r\n    // other\r\n\r\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = typeArguments[0];\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpressionRetainType(\r\n        operands[0],\r\n        typeArguments[0],\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = typeArguments[0];\r\n      if (compiler.currentType.size != typeArguments[0].size) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\r\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\r\n      return arg0; // any usize to any usize\r\n    }\r\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\r\n      if (operands.length < 1 || operands.length > 2) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        if (operands.length < 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n            reportNode.range, \"1\", operands.length.toString(10)\r\n          );\r\n        } else if (operands.length > 2) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_arguments_but_got_1,\r\n            reportNode.range, \"2\", operands.length.toString(10)\r\n          );\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      if (typeArguments) {\r\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\r\n        if (typeArguments.length != 1) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      } else {\r\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\r\n      }\r\n\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) {\r\n          compiler.currentType = Type.void;\r\n          return module.createNop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        switch (compiler.currentType.kind) {\r\n          default: { // any integer up to 32-bits incl. bool\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.createF32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.createF64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n        compiler.currentType = Type.void;\r\n      } else {\r\n        switch (compiler.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            let flow = compiler.currentFlow;\r\n            let tempLocal = flow.getAndFreeTempLocal(\r\n              compiler.currentType,\r\n              !flow.canOverflow(arg0, compiler.currentType)\r\n            );\r\n            ret = module.createIf(\r\n              module.createTeeLocal(tempLocal.index, arg0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32:\r\n          default: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i32, false);\r\n            ret = module.createIf(\r\n              module.createTeeLocal(tempLocal.index, arg0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64, false);\r\n            ret = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n            ret = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32, false);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF32(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64, false);\r\n            ret = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF64(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.VOID: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.range\r\n            );\r\n            ret = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.unchecked: {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let flow = compiler.currentFlow;\r\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\r\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\r\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\r\n      return ret;\r\n    }\r\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\r\n      if (operands.length < 1) {\r\n        if (typeArguments) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          if (typeArguments.length != 1) {\r\n            compiler.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              reportNode.range, \"1\", typeArguments.length.toString(10)\r\n            );\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let returnType: Type;\r\n      if (typeArguments) {\r\n        if (typeArguments.length != 1) {\r\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        returnType = typeArguments[0];\r\n      } else {\r\n        returnType = contextualType;\r\n      }\r\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\r\n      if (compiler.currentType.kind != TypeKind.U32) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          operands[0].range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let numOperands = operands.length - 1;\r\n      let operandExprs = new Array<ExpressionRef>(numOperands);\r\n      let signatureParts = new Array<string>(numOperands + 1);\r\n      let nativeReturnType = returnType.toNativeType();\r\n      let nativeParamTypes = new Array<NativeType>(numOperands);\r\n      for (let i = 0; i < numOperands; ++i) {\r\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\r\n        let operandType = compiler.currentType;\r\n        signatureParts[i] = operandType.toSignatureString();\r\n        nativeParamTypes[i] = operandType.toNativeType();\r\n      }\r\n      signatureParts[numOperands] = returnType.toSignatureString();\r\n      let typeName = signatureParts.join(\"\");\r\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\r\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\r\n      compiler.currentType = returnType;\r\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\r\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\r\n      return module.createCallIndirect(arg0, operandExprs, typeName);\r\n    }\r\n    case BuiltinSymbols.instantiate: {\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let classInstance = typeArguments[0].classReference;\r\n      if (!classInstance) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileInstantiate(classInstance, operands, reportNode);\r\n    }\r\n\r\n    // user-defined diagnostic macros\r\n\r\n    case BuiltinSymbols.ERROR: {\r\n      compiler.error(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    case BuiltinSymbols.WARNING: {\r\n      compiler.warning(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createNop();\r\n    }\r\n    case BuiltinSymbols.INFO: {\r\n      compiler.info(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createNop();\r\n    }\r\n\r\n    // conversions\r\n\r\n    case BuiltinSymbols.i8: {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i8,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case BuiltinSymbols.i16: {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i16,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case BuiltinSymbols.i32: {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case BuiltinSymbols.i64: {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.i64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.i64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case BuiltinSymbols.isize: {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.isWasm64\r\n          ? Type.isize64\r\n          : Type.isize32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case BuiltinSymbols.u8: {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u8,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case BuiltinSymbols.u16: {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u16,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case BuiltinSymbols.u32: {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case BuiltinSymbols.u64: {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.u64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.u64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case BuiltinSymbols.usize: {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = compiler.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case BuiltinSymbols.bool: {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.bool,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case BuiltinSymbols.f32: {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.f32,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    case BuiltinSymbols.f64: {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.f64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(\r\n        operands[0],\r\n        Type.f64,\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n\r\n    // === SIMD ===================================================================================\r\n\r\n    // const\r\n\r\n    case BuiltinSymbols.v128: // alias for now\r\n    case BuiltinSymbols.i8x16: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 16) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"16\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 16; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = module.precomputeExpression(\r\n            compiler.compileExpression(value, Type.i8, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          );\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.createUnreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI8(getConstValueI32(expr), bytes, i);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.createV128(bytes);\r\n    }\r\n    case BuiltinSymbols.i16x8: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"8\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 8; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = module.precomputeExpression(\r\n            compiler.compileExpression(value, Type.i16, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          );\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.createUnreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI16(getConstValueI32(expr), bytes, i << 1);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.createV128(bytes);\r\n    }\r\n    case BuiltinSymbols.i32x4: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 4) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"4\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 4; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = module.precomputeExpression(\r\n            compiler.compileExpression(value, Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          );\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.createUnreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI32(getConstValueI32(expr), bytes, i << 2);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.createV128(bytes);\r\n    }\r\n    case BuiltinSymbols.i64x2: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 2) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 2; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = module.precomputeExpression(\r\n            compiler.compileExpression(value, Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          );\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.createUnreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I64);\r\n          let off = i << 3;\r\n          writeI32(getConstValueI64Low(expr), bytes, off);\r\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.createV128(bytes);\r\n    }\r\n    case BuiltinSymbols.f32x4: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 4) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"4\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 4; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = module.precomputeExpression(\r\n            compiler.compileExpression(value, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          );\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.createUnreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.F32);\r\n          writeF32(getConstValueF32(expr), bytes, i << 2);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.createV128(bytes);\r\n    }\r\n    case BuiltinSymbols.f64x2: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 2) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 2; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = module.precomputeExpression(\r\n            compiler.compileExpression(value, Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          );\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.createUnreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.F64);\r\n          writeF64(getConstValueF64(expr), bytes, i << 3);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.createV128(bytes);\r\n    }\r\n\r\n    // v128.*\r\n\r\n    case BuiltinSymbols.v128_splat: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      compiler.currentType = Type.v128;\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments[0];\r\n      if (!type.is(TypeFlags.VALUE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: UnaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:  { op = UnaryOp.SplatVecI8x16; break; }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: { op = UnaryOp.SplatVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = UnaryOp.SplatVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = UnaryOp.SplatVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? UnaryOp.SplatVecI64x2\r\n            : UnaryOp.SplatVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = UnaryOp.SplatVecF32x4; break; }\r\n        case TypeKind.F64: { op = UnaryOp.SplatVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createUnary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_extract_lane: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 2) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments[0];\r\n      if (!type.is(TypeFlags.VALUE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = type;\r\n        return module.createUnreachable();\r\n      }\r\n      let op: SIMDExtractOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:  { op = SIMDExtractOp.ExtractLaneSVecI8x16; break; }\r\n        case TypeKind.U8:  { op = SIMDExtractOp.ExtractLaneUVecI8x16; break; }\r\n        case TypeKind.I16: { op = SIMDExtractOp.ExtractLaneSVecI16x8; break; }\r\n        case TypeKind.U16: { op = SIMDExtractOp.ExtractLaneUVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = SIMDExtractOp.ExtractLaneVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = SIMDExtractOp.ExtractLaneVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? SIMDExtractOp.ExtractLaneVecI64x2\r\n            : SIMDExtractOp.ExtractLaneVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = SIMDExtractOp.ExtractLaneVecF32x4; break; }\r\n        case TypeKind.F64: { op = SIMDExtractOp.ExtractLaneVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          compiler.currentType = type;\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg1 = module.precomputeExpression(\r\n        compiler.compileExpression(operands[1], Type.u8, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n      );\r\n      compiler.currentType = type;\r\n      if (getExpressionId(arg1) != ExpressionId.Const) {\r\n        compiler.error(\r\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n          operands[1].range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      assert(getExpressionType(arg1) == NativeType.I32);\r\n      let maxIdx = (16 / type.byteSize) - 1;\r\n      let idx = getConstValueI32(arg1);\r\n      if (idx < 0 || idx > maxIdx) {\r\n        compiler.error(\r\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      return module.createSIMDExtract(op, arg0, idx);\r\n    }\r\n    case BuiltinSymbols.v128_replace_lane: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      compiler.currentType = Type.v128;\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments[0];\r\n      if (!type.is(TypeFlags.VALUE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: SIMDReplaceOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:  { op = SIMDReplaceOp.ReplaceLaneVecI8x16; break; }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: { op = SIMDReplaceOp.ReplaceLaneVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = SIMDReplaceOp.ReplaceLaneVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = SIMDReplaceOp.ReplaceLaneVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? SIMDReplaceOp.ReplaceLaneVecI64x2\r\n            : SIMDReplaceOp.ReplaceLaneVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = SIMDReplaceOp.ReplaceLaneVecF32x4; break; }\r\n        case TypeKind.F64: { op = SIMDReplaceOp.ReplaceLaneVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg1 = module.precomputeExpression(\r\n        compiler.compileExpression(operands[1], Type.u8, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n      );\r\n      if (getExpressionId(arg1) != ExpressionId.Const) {\r\n        compiler.error(\r\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n          operands[1].range\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      assert(getExpressionType(arg1) == NativeType.I32);\r\n      let maxIdx = (16 / type.byteSize) - 1;\r\n      let idx = getConstValueI32(arg1);\r\n      if (idx < 0 || idx > maxIdx) {\r\n        compiler.error(\r\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg2 = compiler.compileExpression(operands[2], type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createSIMDReplace(op, arg0, idx, arg2);\r\n    }\r\n    case BuiltinSymbols.v128_shuffle: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      compiler.currentType = Type.v128;\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments[0];\r\n      if (!type.is(TypeFlags.VALUE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = type;\r\n        return module.createUnreachable();\r\n      }\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U16:\r\n        case TypeKind.I32:\r\n        case TypeKind.U32:\r\n        case TypeKind.I64:\r\n        case TypeKind.U64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.F32:\r\n        case TypeKind.F64: break;\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          compiler.currentType = type;\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      let laneWidth = type.byteSize;\r\n      let laneCount = 16 / laneWidth;\r\n      if (operands.length != 2 + laneCount) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, (2 + laneCount).toString(), operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      let mask = new Uint8Array(16);\r\n      let maxIdx = (laneCount << 1) - 1;\r\n      for (let i = 0; i < laneCount; ++i) {\r\n        let operand = operands[2 + i];\r\n        arg2 = module.precomputeExpression(\r\n          compiler.compileExpression(operand, Type.u8, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n        );\r\n        if (getExpressionId(arg2) != ExpressionId.Const) {\r\n          compiler.error(\r\n            DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n            operand.range\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.createUnreachable();\r\n        }\r\n        assert(getExpressionType(arg2) == NativeType.I32);\r\n        let idx = getConstValueI32(arg2);\r\n        if (idx < 0 || idx > maxIdx) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operand.range, \"Lane index\", \"0\", maxIdx.toString()\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (laneWidth) {\r\n          case 1: {\r\n            writeI8(idx, mask, i);\r\n            break;\r\n          }\r\n          case 2: {\r\n            let off8 = i << 1;\r\n            let idx8 = idx << 1;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            break;\r\n          }\r\n          case 4: {\r\n            let off8 = i << 2;\r\n            let idx8 = idx << 2;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            writeI8(idx8 + 2, mask, off8 + 2);\r\n            writeI8(idx8 + 3, mask, off8 + 3);\r\n            break;\r\n          }\r\n          case 8: {\r\n            let off8 = i << 3;\r\n            let idx8 = idx << 3;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            writeI8(idx8 + 2, mask, off8 + 2);\r\n            writeI8(idx8 + 3, mask, off8 + 3);\r\n            writeI8(idx8 + 4, mask, off8 + 4);\r\n            writeI8(idx8 + 5, mask, off8 + 5);\r\n            writeI8(idx8 + 6, mask, off8 + 6);\r\n            writeI8(idx8 + 7, mask, off8 + 7);\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.createSIMDShuffle(arg0, arg1, mask);\r\n    }\r\n    case BuiltinSymbols.v128_add: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      compiler.currentType = Type.v128;\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 2) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments[0];\r\n      if (!type.is(TypeFlags.VALUE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:  { op = BinaryOp.AddVecI8x16; break; }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: { op = BinaryOp.AddVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = BinaryOp.AddVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = BinaryOp.AddVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.AddVecI64x2\r\n            : BinaryOp.AddVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = BinaryOp.AddVecF32x4; break; }\r\n        case TypeKind.F64: { op = BinaryOp.AddVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createBinary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_sub: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      compiler.currentType = Type.v128;\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 2) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments[0];\r\n      if (!type.is(TypeFlags.VALUE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:  { op = BinaryOp.SubVecI8x16; break; }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: { op = BinaryOp.SubVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = BinaryOp.SubVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = BinaryOp.SubVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.SubVecI64x2\r\n            : BinaryOp.SubVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = BinaryOp.SubVecF32x4; break; }\r\n        case TypeKind.F64: { op = BinaryOp.SubVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createBinary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_mul: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      compiler.currentType = Type.v128;\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 2) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments[0];\r\n      if (!type.is(TypeFlags.VALUE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:  { op = BinaryOp.MulVecI8x16; break; }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: { op = BinaryOp.MulVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = BinaryOp.MulVecI32x4; break; }\r\n        case TypeKind.F32: { op = BinaryOp.MulVecF32x4; break; }\r\n        case TypeKind.F64: { op = BinaryOp.MulVecF64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          if (!compiler.options.isWasm64) {\r\n            op = BinaryOp.MulVecI32x4;\r\n            break;\r\n          }\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createBinary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_div: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      compiler.currentType = Type.v128;\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 2) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments[0];\r\n      if (!type.is(TypeFlags.VALUE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.F32: { op = BinaryOp.DivVecF32x4; break; }\r\n        case TypeKind.F64: { op = BinaryOp.DivVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createBinary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_neg: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      compiler.currentType = Type.v128;\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments[0];\r\n      if (!type.is(TypeFlags.VALUE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: UnaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:  { op = UnaryOp.NegVecI8x16; break; }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: { op = UnaryOp.NegVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = UnaryOp.NegVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = UnaryOp.NegVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? UnaryOp.NegVecI64x2\r\n            : UnaryOp.NegVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = UnaryOp.NegVecF32x4; break; }\r\n        case TypeKind.F64: { op = UnaryOp.NegVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createUnary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_add_saturate: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      compiler.currentType = Type.v128;\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 2) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments[0];\r\n      if (!type.is(TypeFlags.VALUE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:  { op = BinaryOp.AddSatSVecI8x16; break; }\r\n        case TypeKind.U8:  { op = BinaryOp.AddSatUVecI8x16; break; }\r\n        case TypeKind.I16: { op = BinaryOp.AddSatSVecI16x8; break; }\r\n        case TypeKind.U16: { op = BinaryOp.AddSatUVecI16x8; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createBinary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_sub_saturate: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      compiler.currentType = Type.v128;\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 2) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments[0];\r\n      if (!type.is(TypeFlags.VALUE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:  { op = BinaryOp.SubSatSVecI8x16; break; }\r\n        case TypeKind.U8:  { op = BinaryOp.SubSatUVecI8x16; break; }\r\n        case TypeKind.I16: { op = BinaryOp.SubSatSVecI16x8; break; }\r\n        case TypeKind.U16: { op = BinaryOp.SubSatUVecI16x8; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createBinary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_shl: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      compiler.currentType = Type.v128;\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 2) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments[0];\r\n      if (!type.is(TypeFlags.VALUE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: SIMDShiftOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:  { op = SIMDShiftOp.ShlVecI8x16; break; }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: { op = SIMDShiftOp.ShlVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = SIMDShiftOp.ShlVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = SIMDShiftOp.ShlVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? SIMDShiftOp.ShlVecI64x2\r\n            : SIMDShiftOp.ShlVecI32x4;\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg1 = compiler.compileExpression(operands[1], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createSIMDShift(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_shr: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      compiler.currentType = Type.v128;\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 2) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments[0];\r\n      if (!type.is(TypeFlags.VALUE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: SIMDShiftOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:  { op = SIMDShiftOp.ShrSVecI8x16; break; }\r\n        case TypeKind.U8:  { op = SIMDShiftOp.ShrUVecI8x16; break; }\r\n        case TypeKind.I16: { op = SIMDShiftOp.ShrSVecI16x8; break; }\r\n        case TypeKind.U16: { op = SIMDShiftOp.ShrUVecI16x8; break; }\r\n        case TypeKind.I32: { op = SIMDShiftOp.ShrSVecI32x4; break; }\r\n        case TypeKind.U32: { op = SIMDShiftOp.ShrUVecI32x4; break; }\r\n        case TypeKind.I64: { op = SIMDShiftOp.ShrSVecI64x2; break; }\r\n        case TypeKind.U64: { op = SIMDShiftOp.ShrUVecI64x2; break; }\r\n        case TypeKind.ISIZE: {\r\n          op = compiler.options.isWasm64\r\n          ? SIMDShiftOp.ShrSVecI64x2\r\n          : SIMDShiftOp.ShrSVecI32x4;\r\n        break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? SIMDShiftOp.ShrUVecI64x2\r\n            : SIMDShiftOp.ShrUVecI32x4;\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg1 = compiler.compileExpression(operands[1], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createSIMDShift(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_and: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      compiler.currentType = Type.v128;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 2) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createBinary(BinaryOp.AndVec128, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_or: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      compiler.currentType = Type.v128;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 2) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createBinary(BinaryOp.OrVec128, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_xor: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      compiler.currentType = Type.v128;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 2) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createBinary(BinaryOp.XorVec128, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_not: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      compiler.currentType = Type.v128;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createUnary(UnaryOp.NotVec128, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_bitselect: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      compiler.currentType = Type.v128;\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 3) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"3\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg2 = compiler.compileExpression(operands[2], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createSIMDBitselect(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.v128_any_true: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      compiler.currentType = Type.bool;\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments[0];\r\n      if (!type.is(TypeFlags.VALUE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: UnaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:  { op = UnaryOp.AnyTrueVecI8x16; break; }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: { op = UnaryOp.AnyTrueVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = UnaryOp.AnyTrueVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = UnaryOp.AnyTrueVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? UnaryOp.AnyTrueVecI64x2\r\n            : UnaryOp.AnyTrueVecI32x4;\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.bool;\r\n      return module.createUnary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_all_true: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      compiler.currentType = Type.bool;\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments[0];\r\n      if (!type.is(TypeFlags.VALUE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: UnaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:  { op = UnaryOp.AllTrueVecI8x16; break; }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: { op = UnaryOp.AllTrueVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = UnaryOp.AllTrueVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = UnaryOp.AllTrueVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? UnaryOp.AllTrueVecI64x2\r\n            : UnaryOp.AllTrueVecI32x4;\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.bool;\r\n      return module.createUnary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_min: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      compiler.currentType = Type.v128;\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 2) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments[0];\r\n      if (!type.is(TypeFlags.VALUE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.F32: { op = BinaryOp.MinVecF32x4; break; }\r\n        case TypeKind.F64: { op = BinaryOp.MinVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createBinary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_max: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      compiler.currentType = Type.v128;\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 2) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments[0];\r\n      if (!type.is(TypeFlags.VALUE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.F32: { op = BinaryOp.MaxVecF32x4; break; }\r\n        case TypeKind.F64: { op = BinaryOp.MaxVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createBinary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_abs: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      compiler.currentType = Type.v128;\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments[0];\r\n      if (!type.is(TypeFlags.VALUE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: UnaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.F32: { op = UnaryOp.AbsVecF32x4; break; }\r\n        case TypeKind.F64: { op = UnaryOp.AbsVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createUnary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_sqrt: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      compiler.currentType = Type.v128;\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments[0];\r\n      if (!type.is(TypeFlags.VALUE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: UnaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.F32: { op = UnaryOp.SqrtVecF32x4; break; }\r\n        case TypeKind.F64: { op = UnaryOp.SqrtVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createUnary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_eq: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      compiler.currentType = Type.v128;\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 2) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments[0];\r\n      if (!type.is(TypeFlags.VALUE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:  { op = BinaryOp.EqVecI8x16; break; }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: { op = BinaryOp.EqVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = BinaryOp.EqVecI32x4; break; }\r\n        case TypeKind.F32: { op = BinaryOp.EqVecF32x4; break; }\r\n        case TypeKind.F64: { op = BinaryOp.EqVecF64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          if (!compiler.options.isWasm64) {\r\n            op = BinaryOp.EqVecI32x4;\r\n            break;\r\n          }\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createBinary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_ne: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      compiler.currentType = Type.v128;\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 2) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments[0];\r\n      if (!type.is(TypeFlags.VALUE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:  { op = BinaryOp.NeVecI8x16; break; }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: { op = BinaryOp.NeVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = BinaryOp.NeVecI32x4; break; }\r\n        case TypeKind.F32: { op = BinaryOp.NeVecF32x4; break; }\r\n        case TypeKind.F64: { op = BinaryOp.NeVecF64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          if (!compiler.options.isWasm64) {\r\n            op = BinaryOp.NeVecI32x4;\r\n            break;\r\n          }\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createBinary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_lt: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      compiler.currentType = Type.v128;\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 2) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments[0];\r\n      if (!type.is(TypeFlags.VALUE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:  { op = BinaryOp.LtSVecI8x16; break; }\r\n        case TypeKind.U8:  { op = BinaryOp.LtUVecI8x16; break; }\r\n        case TypeKind.I16: { op = BinaryOp.LtSVecI16x8; break; }\r\n        case TypeKind.U16: { op = BinaryOp.LtUVecI16x8; break; }\r\n        case TypeKind.I32: { op = BinaryOp.LtSVecI32x4; break; }\r\n        case TypeKind.U32: { op = BinaryOp.LtUVecI32x4; break; }\r\n        case TypeKind.F32: { op = BinaryOp.LtVecF32x4; break; }\r\n        case TypeKind.F64: { op = BinaryOp.LtVecF64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          if (!compiler.options.isWasm64) {\r\n            op = type.kind == TypeKind.ISIZE\r\n              ? BinaryOp.LtSVecI32x4\r\n              : BinaryOp.LtUVecI32x4;\r\n            break;\r\n          }\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createBinary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_le: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      compiler.currentType = Type.v128;\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 2) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments[0];\r\n      if (!type.is(TypeFlags.VALUE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:  { op = BinaryOp.LeSVecI8x16; break; }\r\n        case TypeKind.U8:  { op = BinaryOp.LeUVecI8x16; break; }\r\n        case TypeKind.I16: { op = BinaryOp.LeSVecI16x8; break; }\r\n        case TypeKind.U16: { op = BinaryOp.LeUVecI16x8; break; }\r\n        case TypeKind.I32: { op = BinaryOp.LeSVecI32x4; break; }\r\n        case TypeKind.U32: { op = BinaryOp.LeUVecI32x4; break; }\r\n        case TypeKind.F32: { op = BinaryOp.LeVecF32x4; break; }\r\n        case TypeKind.F64: { op = BinaryOp.LeVecF64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          if (!compiler.options.isWasm64) {\r\n            op = type.kind == TypeKind.ISIZE\r\n              ? BinaryOp.LeSVecI32x4\r\n              : BinaryOp.LeUVecI32x4;\r\n            break;\r\n          }\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createBinary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_gt: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      compiler.currentType = Type.v128;\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 2) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments[0];\r\n      if (!type.is(TypeFlags.VALUE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:  { op = BinaryOp.GtSVecI8x16; break; }\r\n        case TypeKind.U8:  { op = BinaryOp.GtUVecI8x16; break; }\r\n        case TypeKind.I16: { op = BinaryOp.GtSVecI16x8; break; }\r\n        case TypeKind.U16: { op = BinaryOp.GtUVecI16x8; break; }\r\n        case TypeKind.I32: { op = BinaryOp.GtSVecI32x4; break; }\r\n        case TypeKind.U32: { op = BinaryOp.GtUVecI32x4; break; }\r\n        case TypeKind.F32: { op = BinaryOp.GtVecF32x4; break; }\r\n        case TypeKind.F64: { op = BinaryOp.GtVecF64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          if (!compiler.options.isWasm64) {\r\n            op = type.kind == TypeKind.ISIZE\r\n              ? BinaryOp.GtSVecI32x4\r\n              : BinaryOp.GtUVecI32x4;\r\n            break;\r\n          }\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createBinary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_ge: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      compiler.currentType = Type.v128;\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 2) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"2\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments[0];\r\n      if (!type.is(TypeFlags.VALUE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:  { op = BinaryOp.GeSVecI8x16; break; }\r\n        case TypeKind.U8:  { op = BinaryOp.GeUVecI8x16; break; }\r\n        case TypeKind.I16: { op = BinaryOp.GeSVecI16x8; break; }\r\n        case TypeKind.U16: { op = BinaryOp.GeUVecI16x8; break; }\r\n        case TypeKind.I32: { op = BinaryOp.GeSVecI32x4; break; }\r\n        case TypeKind.U32: { op = BinaryOp.GeUVecI32x4; break; }\r\n        case TypeKind.F32: { op = BinaryOp.GeVecF32x4; break; }\r\n        case TypeKind.F64: { op = BinaryOp.GeVecF64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          if (!compiler.options.isWasm64) {\r\n            op = type.kind == TypeKind.ISIZE\r\n              ? BinaryOp.GeSVecI32x4\r\n              : BinaryOp.GeUVecI32x4;\r\n            break;\r\n          }\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createBinary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_convert: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      compiler.currentType = Type.v128;\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let fromType = typeArguments[0];\r\n      if (!fromType.is(TypeFlags.VALUE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: UnaryOp;\r\n      switch (fromType.kind) {\r\n        case TypeKind.I32: { op = UnaryOp.ConvertSVecI32x4ToVecF32x4; break; }\r\n        case TypeKind.U32: { op = UnaryOp.ConvertUVecI32x4ToVecF32x4; break; }\r\n        case TypeKind.I64: { op = UnaryOp.ConvertSVecI64x2ToVecF64x2; break; }\r\n        case TypeKind.U64: { op = UnaryOp.ConvertUVecI64x2ToVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createUnary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_trunc: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      compiler.currentType = Type.v128;\r\n      if (!(typeArguments && typeArguments.length == 1)) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString() : \"0\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let toType = typeArguments[0];\r\n      if (!toType.is(TypeFlags.VALUE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: UnaryOp;\r\n      switch (toType.kind) {\r\n        case TypeKind.I32: { op = UnaryOp.TruncSatSVecF32x4ToVecI32x4; break; }\r\n        case TypeKind.U32: { op = UnaryOp.TruncSatUVecF32x4ToVecI32x4; break; }\r\n        case TypeKind.I64: { op = UnaryOp.TruncSatSVecF64x2ToVecI64x2; break; }\r\n        case TypeKind.U64: { op = UnaryOp.TruncSatUVecF64x2ToVecI64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createUnary(op, arg0);\r\n    }\r\n\r\n    // === GC integration =========================================================================\r\n\r\n    case BuiltinSymbols.iterateRoots: {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.range, prototype.internalName\r\n        );\r\n      }\r\n      if (operands.length != 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          reportNode.range, \"1\", operands.length.toString(10)\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\r\n      let type = compiler.currentType;\r\n      let signatureReference = type.signatureReference;\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        !type.is(TypeFlags.REFERENCE) ||\r\n        !signatureReference ||\r\n        signatureReference.parameterTypes.length != 1 ||\r\n        signatureReference.parameterTypes[0] != compiler.options.usizeType\r\n       ) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n          reportNode.range, type.toString(), \"(ref: usize) => void\"\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      // just emit a call even if the function doesn't yet exist\r\n      compiler.needsIterateRoots = true;\r\n      return module.createCall(\"~iterateRoots\", [ expr ], NativeType.None);\r\n    }\r\n  }\r\n\r\n  // try to defer inline asm to a concrete built-in\r\n  var expr = tryDeferASM(compiler, prototype, operands, reportNode);\r\n  if (expr) {\r\n    if (typeArguments) {\r\n      compiler.error(\r\n        DiagnosticCode.Type_0_is_not_generic,\r\n        reportNode.range, prototype.internalName\r\n      );\r\n    }\r\n    return expr;\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Cannot_find_name_0,\r\n    reportNode.expression.range, prototype.internalName\r\n  );\r\n  return module.createUnreachable();\r\n}\r\n\r\n/** Tries to defer an inline-assembler-like call to a built-in function. */\r\nfunction tryDeferASM(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  operands: Expression[],\r\n  reportNode: CallExpression\r\n): ExpressionRef {\r\n  /* tslint:disable:max-line-length */\r\n  switch (prototype.internalName) {\r\n\r\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\r\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\r\n    //   and, or, xor, shl, shr_u, shr_s\r\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\r\n\r\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.u32, reportNode);\r\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.u32, reportNode);\r\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.u64, reportNode);\r\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.u64, reportNode);\r\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.u64, reportNode);\r\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\r\n  }\r\n  if (compiler.options.hasFeature(Feature.THREADS)) {\r\n    switch (prototype.internalName) {\r\n\r\n      case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_u_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_u_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_u_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_u_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_u_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u64, operands, Type.u64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_u_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_u_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_u_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_u_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_u_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u64, operands, Type.u64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_u_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_u_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_u_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_u_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_u_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u64, operands, Type.u64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_u_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_u_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_u_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_u_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_u_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u64, operands, Type.u64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u64, operands, Type.u64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_u_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_u_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_u_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_u_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_u_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u64, operands, Type.u64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_u_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_u_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_u_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_u_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_u_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.u64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u64, operands, Type.u64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i32_notify: return deferASM(BuiltinSymbols.atomic_notify, compiler, Type.i32, operands, Type.u32, reportNode);\r\n      case BuiltinSymbols.i64_notify: return deferASM(BuiltinSymbols.atomic_notify, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    }\r\n  }\r\n  if (compiler.options.hasFeature(Feature.SIMD)) {\r\n    switch (prototype.internalName) {\r\n\r\n      case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.void, reportNode);\r\n\r\n      case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\r\n      case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\r\n      case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\r\n      case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\r\n      case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_trunc_s_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_trunc_u_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u32, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64x2_trunc_s_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_trunc_u_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u64, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\r\n      case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_convert_s_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_convert_u_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\r\n      case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_convert_s_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_convert_u_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\r\n    }\r\n  }\r\n  /* tslint:enable:max-line-length */\r\n  return 0;\r\n}\r\n\r\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\r\nfunction deferASM(\r\n  name: string,\r\n  compiler: Compiler,\r\n  typeArgument: Type,\r\n  operands: Expression[],\r\n  valueType: Type,\r\n  reportNode: CallExpression\r\n): ExpressionRef {\r\n  assert(compiler.program.elementsByName.has(name));\r\n  var prototype = compiler.program.elementsByName.get(name)!;\r\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\r\n}\r\n\r\n/** Evaluates the constant type of a type argument *or* expression. */\r\nfunction evaluateConstantType(\r\n  compiler: Compiler,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  reportNode: Node\r\n): Type | null {\r\n  if (operands.length == 0) { // requires type argument\r\n    if (!typeArguments || typeArguments.length != 1) {\r\n      compiler.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n      );\r\n      return null;\r\n    }\r\n    return typeArguments[0];\r\n  }\r\n  if (operands.length == 1) { // optional type argument\r\n    if (typeArguments) {\r\n      if (typeArguments.length == 1) {\r\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        if (typeArguments.length) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.range, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return null;\r\n        }\r\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      }\r\n    } else {\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n    }\r\n    return compiler.currentType;\r\n  }\r\n  if (typeArguments && typeArguments.length > 1) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.range, \"1\", typeArguments.length.toString(10)\r\n    );\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Expected_0_arguments_but_got_1,\r\n    reportNode.range, \"1\", operands.length.toString(10)\r\n  );\r\n  return null;\r\n}\r\n\r\n/** Evaluates a compile-time constant immediate offset argument.*/\r\nfunction evaluateImmediateOffset(compiler: Compiler, expression: Expression): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I64 ||\r\n      getConstValueI64High(expr) != 0 ||\r\n      (value = getConstValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I32 ||\r\n      (value = getConstValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringInstance = compiler.program.stringInstance;\r\n  if (!stringInstance) return module.createUnreachable();\r\n\r\n  var abortInstance = program.abortInstance;\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\r\n\r\n  var messageArg = message != null\r\n    ? compiler.compileExpression(message, stringInstance.type, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    : stringInstance.type.toNativeZero(module);\r\n\r\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.createBlock(null, [\r\n    module.createCall(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.createI32(reportNode.range.line),\r\n        module.createI32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.createUnreachable()\r\n  ]);\r\n}\r\n\r\n/** Compiles the iterateRoots function if requires. */\r\nexport function compileIterateRoots(compiler: Compiler): void {\r\n  var module = compiler.module;\r\n  var exprs = new Array<ExpressionRef>();\r\n\r\n  for (let element of compiler.program.elementsByName.values()) {\r\n    if (element.kind != ElementKind.GLOBAL) continue;\r\n    let global = <Global>element;\r\n    let classReference = global.type.classReference;\r\n    if (\r\n      global.is(CommonFlags.COMPILED) &&\r\n      classReference !== null &&\r\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\r\n    ) {\r\n      if (global.is(CommonFlags.INLINED)) {\r\n        let value = global.constantIntegerValue;\r\n        exprs.push(\r\n          module.createCallIndirect(\r\n            module.createGetLocal(0, NativeType.I32),\r\n            [\r\n              compiler.options.isWasm64\r\n                ? module.createI64(i64_low(value), i64_high(value))\r\n                : module.createI32(i64_low(value))\r\n            ],\r\n            \"i_\"\r\n          )\r\n        );\r\n      } else {\r\n        exprs.push(\r\n          module.createCallIndirect(\r\n            module.createGetLocal(0, NativeType.I32),\r\n            [\r\n              module.createGetGlobal(\r\n                global.internalName,\r\n                compiler.options.nativeSizeType\r\n              )\r\n            ],\r\n            \"i_\"\r\n          )\r\n        );\r\n      }\r\n    }\r\n  }\r\n  var typeRef = compiler.ensureFunctionType([ Type.i32 ], Type.void);\r\n  module.addFunction(\"~iterateRoots\", typeRef, [],\r\n    exprs.length\r\n      ? module.createBlock(null, exprs)\r\n      : module.createNop()\r\n  );\r\n}\r\n\r\n/** Ensures that the specified class's GC hook exists and returns its function table index. */\r\nexport function ensureGCHook(\r\n  compiler: Compiler,\r\n  classInstance: Class\r\n): u32 {\r\n  var program = compiler.program;\r\n  assert(classInstance.type.isManaged(program));\r\n\r\n  // check if the GC hook has already been created\r\n  {\r\n    let existingIndex = classInstance.gcHookIndex;\r\n    if (existingIndex != <u32>-1) return existingIndex;\r\n  }\r\n\r\n  // check if the class implements a custom GC function (only valid for library elements)\r\n  var members = classInstance.members;\r\n  if (classInstance.isDeclaredInLibrary) {\r\n    if (members !== null && members.has(\"__gc\")) {\r\n      let gcPrototype = assert(members.get(\"__gc\"));\r\n      assert(gcPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcInstance = assert(program.resolver.resolveFunction(<FunctionPrototype>gcPrototype, null));\r\n      assert(gcInstance.is(CommonFlags.PRIVATE | CommonFlags.INSTANCE));\r\n      assert(!gcInstance.isAny(CommonFlags.AMBIENT | CommonFlags.VIRTUAL));\r\n      assert(gcInstance.signature.parameterTypes.length == 0);\r\n      assert(gcInstance.signature.returnType == Type.void);\r\n      gcInstance.internalName = classInstance.internalName + \"~gc\";\r\n      assert(compiler.compileFunction(gcInstance));\r\n      let index = compiler.ensureFunctionTableEntry(gcInstance);\r\n      classInstance.gcHookIndex = index;\r\n      return index;\r\n    }\r\n  }\r\n\r\n  var module = compiler.module;\r\n  var options = compiler.options;\r\n  var nativeSizeType = options.nativeSizeType;\r\n  var nativeSizeSize = options.usizeType.byteSize;\r\n  var body = new Array<ExpressionRef>();\r\n\r\n  // nothing to mark if 'this' is null\r\n  body.push(\r\n    module.createIf(\r\n      module.createUnary(\r\n        options.isWasm64\r\n          ? UnaryOp.EqzI64\r\n          : UnaryOp.EqzI32,\r\n        module.createGetLocal(0, nativeSizeType)\r\n      ),\r\n      module.createReturn()\r\n    )\r\n  );\r\n\r\n  // remember the function index so we don't recurse infinitely\r\n  var functionTable = compiler.functionTable;\r\n  var gcHookIndex = functionTable.length;\r\n  functionTable.push(\"<placeholder>\");\r\n  classInstance.gcHookIndex = gcHookIndex;\r\n\r\n  // if the class extends a base class, call its hook first (calls mark)\r\n  var baseInstance = classInstance.base;\r\n  if (baseInstance) {\r\n    assert(baseInstance.type.isManaged(program));\r\n    body.push(\r\n      module.createCallIndirect(\r\n        module.createI32(\r\n          ensureGCHook(compiler, <Class>baseInstance.type.classReference)\r\n        ),\r\n        [\r\n          module.createGetLocal(0, nativeSizeType)\r\n        ],\r\n        nativeSizeType == NativeType.I64 ? \"I_\" : \"i_\"\r\n      )\r\n    );\r\n\r\n  // if this class is the top-most base class, mark the instance\r\n  } else {\r\n    body.push(\r\n      module.createCall(assert(program.gcMarkInstance).internalName, [\r\n        module.createGetLocal(0, nativeSizeType)\r\n      ], NativeType.None)\r\n    );\r\n  }\r\n\r\n  // mark instances assigned to own fields that are again references\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      if (member.kind == ElementKind.FIELD) {\r\n        if ((<Field>member).parent === classInstance) {\r\n          let type = (<Field>member).type;\r\n          if (type.isManaged(program)) {\r\n            let offset = (<Field>member).memoryOffset;\r\n            assert(offset >= 0);\r\n            body.push(\r\n              module.createCall(assert(program.gcMarkInstance).internalName, [\r\n                module.createLoad(\r\n                  nativeSizeSize,\r\n                  false,\r\n                  module.createGetLocal(0, nativeSizeType),\r\n                  nativeSizeType,\r\n                  offset\r\n                )\r\n              ], NativeType.None)\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // add the function to the module and return its table index\r\n  var funcName = classInstance.internalName + \"~gc\";\r\n  module.addFunction(\r\n    funcName,\r\n    compiler.ensureFunctionType(null, Type.void, options.usizeType),\r\n    null,\r\n    module.createBlock(null, body)\r\n  );\r\n  functionTable[gcHookIndex] = funcName;\r\n  return gcHookIndex;\r\n}\r\n","/** @module util *//***/\r\n\r\n/** Tests if the bit at the specified index is set within a 64-bit map. */\r\nexport function bitsetIs(map: I64, index: i32): bool {\r\n  assert(index >= 0 && index < 64);\r\n  return i64_ne(\r\n    i64_and(\r\n      map,\r\n      i64_shl(\r\n        i64_one,\r\n        i64_new(index)\r\n      )\r\n    ),\r\n    i64_zero\r\n  );\r\n}\r\n\r\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\r\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\r\n  assert(index >= 0 && index < 64);\r\n  return isSet\r\n    ? i64_or(\r\n        map,\r\n        i64_shl(\r\n          i64_one,\r\n          i64_new(index)\r\n        )\r\n      )\r\n    : i64_and(\r\n        map,\r\n        i64_not(\r\n          i64_shl(\r\n            i64_one,\r\n            i64_new(index)\r\n          )\r\n        )\r\n      );\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode.A && c <= CharCode.Z\r\n      || c == CharCode._\r\n      || c == CharCode.DOLLAR\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode._\r\n      || c == CharCode.DOLLAR\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n  var midVal: u16;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + ((hi - lo) >> 1);\r\n    mid -= (mid & 1);\r\n    midVal = map[mid];\r\n    if (midVal <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < midVal) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\r\n  if (original) {\r\n    let cloned = new Array<V>(original.length);\r\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\r\n    return cloned;\r\n  }\r\n  return new Array<V>();\r\n}\r\n\r\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\r\n  if (original) {\r\n    let cloned = new Set<V>();\r\n    for (let v of original) cloned.add(v);\r\n    return cloned;\r\n  }\r\n  return new Set<V>();\r\n}\r\n\r\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\r\n  var cloned = new Map<K,V>();\r\n  if (original) {\r\n    for (let [k, v] of original) cloned.set(k, v);\r\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\r\n  } else if (overrides) {\r\n    for (let [k, v] of overrides) cloned.set(k, v);\r\n  }\r\n  return cloned;\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nimport {\r\n  PATH_DELIMITER\r\n} from \"../common\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + PATH_DELIMITER + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  if (pos <= 1) {\r\n    if (pos == 0) return \".\";\r\n    if (normalizedPath.charCodeAt(0) == separator) {\r\n      return normalizedPath;\r\n    }\r\n  }\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\n/** Reads an 8-bit integer from the specified buffer. */\r\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset];\r\n}\r\n\r\n/** Writes an 8-bit integer to the specified buffer. */\r\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset] = value;\r\n}\r\n\r\n/** Reads a 16-bit integer from the specified buffer. */\r\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8;\r\n}\r\n\r\n/** Writes a 16-bit integer to the specified buffer. */\r\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n}\r\n\r\n/** Reads a 32-bit integer from the specified buffer. */\r\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8\r\n       | buffer[offset + 2] << 16\r\n       | buffer[offset + 3] << 24;\r\n}\r\n\r\n/** Writes a 32-bit integer to the specified buffer. */\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\n/** Reads a 64-bit integer from the specified buffer. */\r\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\r\n  var lo = readI32(buffer, offset);\r\n  var hi = readI32(buffer, offset + 4);\r\n  return i64_new(lo, hi);\r\n}\r\n\r\n/** Writes a 64-bit integer to the specified buffer. */\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\n/** Reads a 32-bit float from the specified buffer. */\r\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\r\n  return i32_as_f32(readI32(buffer, offset));\r\n}\r\n\r\n/** Writes a 32-bit float to the specified buffer. */\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\n/** Reads a 64-bit float from the specified buffer. */\r\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\r\n  return i64_as_f64(readI64(buffer, offset));\r\n}\r\n\r\n/** Writes a 64-bit float to the specified buffer. */\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport {\r\n  Compiler,\r\n  Options,\r\n  Target,\r\n  Feature\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  Decompiler\r\n} from \"./decompiler\";\r\n\r\nimport {\r\n  IDLBuilder,\r\n  TSDBuilder\r\n} from \"./definitions\";\r\n\r\nimport {\r\n  DiagnosticMessage,\r\n  DiagnosticCategory,\r\n  formatDiagnosticMessage\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module\r\n} from \"./module\";\r\n\r\nimport {\r\n  Parser\r\n} from \"./parser\";\r\n\r\nimport {\r\n  Program\r\n} from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) parser = new Parser();\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `sharedMemory` option. */\r\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\r\n  options.sharedMemory = sharedMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(name, alias);\r\n}\r\n\r\n/** Sign extension operations. */\r\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\r\n/** Mutable global imports and exports. */\r\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\r\n/** Bulk memory operations. */\r\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\r\n/** SIMD types and operations. */\r\nexport const FEATURE_SIMD = Feature.SIMD;\r\n/** Threading and atomic operations. */\r\nexport const FEATURE_THREADS = Feature.THREADS;\r\n\r\n/** Enables a specific feature. */\r\nexport function enableFeature(options: Options, feature: Feature): void {\r\n  options.features |= feature;\r\n}\r\n\r\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\r\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\r\n  options.optimizeLevelHint = optimizeLevel;\r\n  options.shrinkLevelHint = shrinkLevel;\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX } from \"./common\";\r\n\r\n// Full API\r\nexport * from \"./ast\";\r\n// export * from \"./binary\";\r\nexport * from \"./common\";\r\nexport * from \"./compiler\";\r\nexport * from \"./decompiler\";\r\nexport * from \"./definitions\";\r\nexport * from \"./diagnosticMessages.generated\";\r\nexport * from \"./diagnostics\";\r\nexport * from \"./flow\";\r\nexport * from \"./module\";\r\nexport * from \"./parser\";\r\nexport * from \"./program\";\r\nexport * from \"./resolver\";\r\nexport * from \"./tokenizer\";\r\nexport * from \"./types\";\r\nexport * from \"./util\";\r\n"],"sourceRoot":""}