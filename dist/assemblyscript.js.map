{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_MUTABLE_GLOBAL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocArray","feature_1","Feature","target_1","Target","typeinfo_1","Typeinfo","TypeinfoFlags","__export","isPowerOf2","x","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","withRelatedRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","emitDiagnostic","info","infoRelated","warning","warningRelated","error","errorRelated","OperatorKind","common_1","diagnostics_1","types_1","ast_1","resolver_1","flow_1","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","operatorKindFromDecorator","decoratorKind","arg","DecoratorKind","OPERATOR","OPERATOR_BINARY","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","OPERATOR_PREFIX","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","OPERATOR_POSTFIX","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","Program","_super","_this","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","typeClasses","managedClasses","nextClassId","nativeDummySignature","nativeSource","Source","SourceKind","LIBRARY","nativeFile","File","set","internalName","resolver","Resolver","__extends","writeRuntimeHeader","buffer","offset","classInstance","payloadSize","writeI32","id","makeNativeVariableDeclaration","flags","NONE","Node","createVariableDeclaration","createIdentifierExpression","makeNativeTypeDeclaration","identifier","createTypeDeclaration","createOmittedType","makeNativeFunctionDeclaration","createFunctionDeclaration","createFunctionType","createNamedType","createSimpleTypeName","makeNativeNamespaceDeclaration","createNamespaceDeclaration","makeNativeFunction","signature","parent","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","declaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","EXPORT","GENERIC","BUILTIN","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","k","file","statements","j","statement","kind","NodeKind","initializeExports","EXPORTDEFAULT","initializeExportDefault","IMPORT","initializeImports","VARIABLE","initializeVariables","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","FUNCTIONDECLARATION","initializeFunction","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeDefinition","queuedExportsStar_1","__values","queuedExportsStar_1_1","next","done","_g","__read","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","element","lookupForeign","Module_0_has_no_exported_member_1","localName","asImportedNamespace","queuedExports_1","queuedExports_1_1","_h","exports_1","e_3","exports_1_1","_j","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerNativeTypeClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","SEALED","Class_0_is_sealed_and_cannot_be_extended","identifierNode","UNMANAGED","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Range","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_k","alias","firstChar","parseInt","Error","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","_l","values","_m","isEntry","_o","e_6","_p","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","MODULE_EXPORT","instanceMembers","_c","_d","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FUNCTION","FIELD","CLASS","members","_e","_f","type","setType","typeKind","className","classElement","is","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","merged","tryMerge","Duplicate_identifier_0","elements","requireGlobal","foreignName","lookupExport","fileQueuedExports","checkDecorators","decorators","acceptedFlags","decorator","flag","decoratorKindToFlag","decoratorNameToKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","GLOBAL","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","extendsType","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeProperty","initializeMethod","INDEXSIGNATUREDECLARATION","STATIC","INTERFACE_PROTOTYPE","READONLY","INLINE","LAZY","UNSAFE","ABSTRACT","FieldPrototype","addInstance","isStatic","CONSTRUCTOR","checkOperatorOverloads","classPrototype","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","internalPath","queued","endsWith","path","exportedName","Export_declaration_conflicts_with_exported_declaration_of_0","declarations","initializeImport","namespaceName","validDecorators","AMBIENT","EXTERNAL","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","Element","program","shadowType","FILE","current","unset","originalDeclaration","actual","isBound","TypedElement","apply","RESOLVED","startFunction","Signature","isImport","lookup","includes","exports_2","exports_2_1","_b","memberName","TYPEDEFINITION","mangleInternalName","typeParameters","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","initializer","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Parameter","Local","index","LOCAL","instances","boundPrototypes","body","arrowKind","toBound","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","FunctionTarget","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","parameterIndex","Field","memoryOffset","firstDeclaration","Property","getterInstance","setterInstance","AcyclicState","_isInterface","constructorPrototype","extends","basePtototype","Class","typeArguments","base","INTERFACE","currentMemoryOffset","constructorInstance","_id","_acyclic","rttiFlags","asClass","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","baseName","baseType","typeParameterNodes","numTypeArguments","isBuiltinArray","lengthField","lookupOverload","isAssignableTo","target","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","writeField","baseOffset","writeI8","writeI16","writeF32","writeF64","getTypeArgumentsTo","extendedPrototype","getArrayValueType","abvInstance","acyclic","hasCycle","cyclesTo","other","except","classReference","Interface","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","srcMembers_1","srcMembers_1_1","isInstance","asGlobal","NativeType","ExpressionId","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeUnreachable","_BinaryenTypeAuto","FeatureFlags","_BinaryenFeatureAtomics","_BinaryenFeatureMutableGlobals","_BinaryenFeatureNontrappingFPToInt","_BinaryenFeatureSIMD128","_BinaryenFeatureBulkMemory","_BinaryenFeatureSignExt","_BinaryenFeatureExceptionHandling","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenLocalGetId","_BinaryenLocalSetId","_BinaryenGlobalGetId","_BinaryenGlobalSetId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicNotifyId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDBitselectId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","HostOp","_BinaryenMemorySize","_BinaryenMemoryGrow","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","memory","allocate","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","store","_BinaryenLiteralVec128","unary","op","expr","_BinaryenUnary","binary","left","right","_BinaryenBinary","host","operands","allocPtrArray","_BinaryenHost","local_get","_BinaryenLocalGet","local_tee","_BinaryenLocalTee","global_get","_BinaryenGlobalGet","load","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","atomic_load","_BinaryenAtomicLoad","atomic_store","_BinaryenAtomicStore","atomic_rmw","_BinaryenAtomicRMW","atomic_cmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","atomic_wait","timeout","expectedType","_BinaryenAtomicWait","atomic_notify","notifyCount","_BinaryenAtomicNotify","local_set","_BinaryenLocalSet","global_set","_BinaryenGlobalSet","block","label","children","_BinaryenBlock","br","condition","_BinaryenBreak","drop","expression","_BinaryenDrop","loop","_BinaryenLoop","if","ifTrue","ifFalse","_BinaryenIf","nop","_BinaryenNop","return","_BinaryenReturn","select","_BinaryenSelect","switch","names","defaultName","numNames","strs","_BinaryenSwitch","returnType","_BinaryenCall","call_indirect","typeName","_BinaryenCallIndirect","unreachable","_BinaryenUnreachable","memory_copy","size","_BinaryenMemoryCopy","memory_fill","_BinaryenMemoryFill","simd_extract","vec","idx","_BinaryenSIMDExtract","simd_replace","_BinaryenSIMDReplace","simd_shuffle","vec1","vec2","mask","_BinaryenSIMDShuffle","simd_bitselect","cond","_BinaryenSIMDBitselect","simd_shift","shift","_BinaryenSIMDShift","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","externalName","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","getFeatures","_BinaryenModuleGetFeatures","setFeatures","featureFlags","_BinaryenModuleSetFeatures","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","_BinaryenExpressionGetId","Return","_BinaryenReturnGetValue","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getLocalGetIndex","getLocalSetIndex","_BinaryenLocalSetGetIndex","getLocalSetValue","_BinaryenLocalSetGetValue","isLocalTee","_BinaryenLocalSetIsTee","getGlobalGetName","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","getCallTarget","_BinaryenCallGetTarget","getCallOperandCount","_BinaryenCallGetNumOperands","getCallOperand","_BinaryenCallGetOperand","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Break","Block","numChildren","traverse","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDBitselect","_BinaryenSIMDBitselectGetLeft","_BinaryenSIMDBitselectGetRight","_BinaryenSIMDBitselectGetCond","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Select","Drop","Host","Nop","tokenizer_1","Token","nodeIsConstantValue","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","nodeIsGenericCallable","createTypeName","TypeName","isNullable","NamedTypeNode","parameters","explicitThisType","FunctionTypeNode","createTypeParameter","defaultType","elem","TypeParameterNode","createParameter","ParameterNode","parameterKind","createDecorator","args","stmt","DecoratorNode","createComment","node","CommentNode","commentKind","isQuoted","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","toType","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportDefaultStatement","ExportDefaultStatement","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","createVariableStatement","VariableStatement","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","TypeNode","TYPENAME","NAMEDTYPE","FUNCTIONTYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","nameStr","propStr","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","BINARY","numArguments","COMMA","FLOAT","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","SOURCE","tokenizer","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","DeclarationStatement","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FOR","ArrowKind","clone","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","findDecorator","isTypeOmitted","program_1","module_1","TypeKind","TypeFlags","v128_zero","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","auto","clz","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isStrictlyAssignableTo","commonDenominator","signednessIsImportant","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPE","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","isIllegalVariableIdentifier","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","g","e","window","ReportMode","builtins_1","currentThisExpression","currentElementExpression","resolveType","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","nameNode","typeArgumentNodes","isSimpleType","simpleName","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","type_1","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveTypeArguments","typeNode","Cannot_find_name_0","parameterNodes","parameterNode","REST","parameterTypeNode","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","resolveExpression","ctxFlow","ctxType","resolveAssertionExpression","resolveUnaryPrefixExpression","resolveUnaryPostfixExpression","resolveBinaryExpression","resolveThisExpression","resolveSuperExpression","resolveIdentifier","actualFunction","resolveLiteralExpression","resolvePropertyAccessExpression","resolveElementAccessExpression","resolveCallExpression","ensureResolvedLazyGlobal","targetNode","propertyName","indexedGet","arrayType","resolvedType","targetExpression","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","NONNULL","i64_sub","i64_zero","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","literalType","BuiltinSymbols","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","actualParent","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","functionTypeNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMembers_1","baseMembers_1_1","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","atEnd","fieldInstance","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","LocalFlags","FlowFlags","ANY_CATEGORICAL","ANY_CONDITIONAL","FieldFlags","scopedLocals","fieldFlags","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","createInline","fork","branch","slice","getTempLocal","temps","k_1","unsetLocalFlag","pop","getAutoreleaseLocal","SCOPED","setLocalFlag","RETAINED","freeTempLocal","getAndFreeTempLocal","getScopedLocal","addScopedLocal","scopedLocal","addScopedAlias","existingLocal","scopedAlias","freeScopedLocals","scope","isLocalFlag","defaultIfInlined","isAnyLocalFlag","pushBreakLabel","stack","popBreakLabel","inherit","inheritConditional","CONDITIONALLY_RETAINED","READFROM","CONDITIONALLY_READFROM","WRITTENTO","CONDITIONALLY_WRITTENTO","inheritMutual","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","max","isNonnull","inheritNonnullIfTrue","EqzI32","EqzI64","inheritNonnullIfFalse","EqI32","EqI64","NeI32","NeI64","canOverflow","WRAPPED","canConversionOverflow","global_1","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","MIN_VALUE","fromType","last","instanceName","levels","findUsedLocalsVisit","used","findUsedLocals","Options","importMemory","sharedMemory","importTable","explicitStart","features","feature","Constraints","RuntimeFeatures","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","runtimeFeatures","skippedAutoreleases","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","Atomics","MutableGloabls","SIMD128","BulkMemory","SignExt","compile","startFunctionInstance","startFunctionBody","currentFlow","currentBody","heap_base","rtti_base","files","compileFile","compileExports","startIsEmpty","started","unshift","funcRef","ensureFunctionType","compileVisitGlobals","compileVisitMembers","compileRTTI","i64_align","isSharedMemory","i64_shr_u","ensureModuleExports","members_1","members_1_1","ensureModuleExport","prefix","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","ensureModuleFieldGetter","ensureModuleFieldSetter","isUnmanaged","subPrefix","loadExpr","isManaged","makeRetain","nativeType","nativeSizeType","valueExpr","makeRetainRelease","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","element_1","exportsStar_1","exportsStar_1_1","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","initAutoreleaseSkipped","initializerNode","compileExpression","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","initializeInStart","Mutable_value_cannot_be_inlined","decoratorNodes","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","makeGlobalAssignment","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","MAIN","indexBefore","performAutoreleases","nonNull","temp","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","previousType","An_implementation_cannot_be_declared_in_ambient_contexts","flatten","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureStaticString","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","ensureStaticArrayBuffer","elementType","byteLength","bufferInstance","buf","writeI64","ensureStaticArrayHeader","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","alwaysFalse","terminates","continues","breaks","fallsThrough","alwaysTrue","stmts_1","incrExpr","loopLabel","bodyStatement","needsLabel","ifTrueStmts","ifTrueFlow","ifFalseFlow","ifFalseStmts","valueExpression","constraints","ANY_RETAINED","numCases","context","tempLocal","tempLocalIndex","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","count","newArgs","compileAbort","numDeclarations","initializers","isConst","_const_declarations_must_be_initialized","CONSTANT","compileInlineConstant","contextualType","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","convertExpression","ensureSmallIntegerWrap","explicit","Object_is_possibly_null","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","inheritedConstraints","PREFIX","exceptVoid","Expression_is_never_null","tempIndex","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","AllTrueVecI8x16","EqVecI8x16","AnyTrueVecI8x16","NeVecI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","moveAutorelease","rightStmts","makeRelease","retainLeftInThen","makeAssignment","compileUnaryOverload","thisExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr_1","thisExpr","elementExpr","tempLocalTarget","tempLocalElement","makeSkippedRelease","nativeFieldType","nativeThisType","tempThis","tempValue","flow_2","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","inferredTypes","argumentNodes","argumentExprs","templateName","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","argumentExpressions","thisArg","parameterTypes_1","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","usedLocals","paramExpr","paramType","argumentLocal","baseInstance","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","oldExpr","newExpr","temp1","temp2","undoAutorelease","fromInnerFlow","toOuterFlow","clearFlags","lengthBefore","skipAutorelease","expr_1","theOperands","numOperands","isCallImport","allOptionalsAreConstant","expr_2","makeCallIndirect","numExpressions","exprs","contextualSignature","numPresentParameters","thisTypeNode","maybeCompileEnclosingSource","flow_3","actualFunction_1","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","tempDataStart","nativeElementType","bufferAddress","arraySegment","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","compileInstantiate","baseCtor","propertyAccess","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","IfThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","thisLocalIndex","makeInstanceOfClass","idTemp","idExpr","conditions","single","Auto","compiler_1","compiler","isAsm","directize","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","SWALLOW","isConstant","sizeof","checkTypeRequired","alignof","ctz","checkArgsOptional","typeArgumentsRange","Type_0_has_no_property_1","popcnt","checkTypeOptional","ClzI64","CtzI64","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","AbsF32","AbsF64","MaxF32","MaxF64","tempLocal0","min","MinF32","MinF64","floor","CeilF32","FloorF32","CeilF64","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","outType","immOffset","evaluateImmediateOffset","immAlign","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","Add","Sub","And","Or","Xor","Xchg","memory_size","MemorySize","memory_grow","MemoryGrow","alreadyUnchecked","call_direct","arg0Type","operandExprs","nativeParamTypes","operandType","instantiate","User_defined_0","Expression_must_be_a_compile_time_constant","off","v128_splat","SplatVecI8x16","SplatVecI16x8","SplatVecI32x4","SplatVecI64x2","SplatVecF32x4","SplatVecF64x2","v128_extract_lane","ExtractLaneSVecI8x16","ExtractLaneUVecI8x16","ExtractLaneSVecI16x8","ExtractLaneUVecI16x8","ExtractLaneVecI32x4","ExtractLaneVecI64x2","ExtractLaneVecF32x4","ExtractLaneVecF64x2","maxIdx","v128_replace_lane","ReplaceLaneVecI8x16","ReplaceLaneVecI16x8","ReplaceLaneVecI32x4","ReplaceLaneVecI64x2","ReplaceLaneVecF32x4","ReplaceLaneVecF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","v128_add","v128_sub","v128_mul","v128_div","v128_add_saturate","v128_sub_saturate","v128_min","v128_max","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","AddVecI8x16","AddVecI16x8","AddVecI32x4","AddVecI64x2","AddVecF32x4","AddVecF64x2","SubVecI8x16","SubVecI16x8","SubVecI32x4","SubVecI64x2","SubVecF32x4","SubVecF64x2","MulVecI8x16","MulVecI16x8","MulVecI32x4","MulVecF32x4","MulVecF64x2","DivVecF32x4","DivVecF64x2","AddSatSVecI8x16","AddSatUVecI8x16","AddSatSVecI16x8","AddSatUVecI16x8","SubSatSVecI8x16","SubSatUVecI8x16","SubSatSVecI16x8","SubSatUVecI16x8","MinVecF32x4","MinVecF64x2","MaxVecF32x4","MaxVecF64x2","EqVecI16x8","EqVecI32x4","EqVecF32x4","EqVecF64x2","NeVecI16x8","NeVecI32x4","NeVecF32x4","NeVecF64x2","LtSVecI8x16","LtUVecI8x16","LtSVecI16x8","LtUVecI16x8","LtSVecI32x4","LtUVecI32x4","LtVecF32x4","LtVecF64x2","LeSVecI8x16","LeUVecI8x16","LeSVecI16x8","LeUVecI16x8","LeSVecI32x4","LeUVecI32x4","LeVecF32x4","LeVecF64x2","GtSVecI8x16","GtUVecI8x16","GtSVecI16x8","GtUVecI16x8","GtSVecI32x4","GtUVecI32x4","GtVecF32x4","GtVecF64x2","GeSVecI8x16","GeUVecI8x16","GeSVecI16x8","GeUVecI16x8","GeSVecI32x4","GeUVecI32x4","GeVecF32x4","GeVecF64x2","v128_neg","v128_abs","v128_sqrt","v128_convert","v128_trunc","NegVecI8x16","NegVecI16x8","NegVecI32x4","NegVecI64x2","NegVecF32x4","NegVecF64x2","AbsVecF32x4","AbsVecF64x2","SqrtVecF32x4","SqrtVecF64x2","ConvertSVecI32x4ToVecF32x4","ConvertUVecI32x4ToVecF32x4","ConvertSVecI64x2ToVecF64x2","ConvertUVecI64x2ToVecF64x2","TruncSatSVecF32x4ToVecI32x4","TruncSatUVecF32x4ToVecI32x4","TruncSatSVecF64x2ToVecI64x2","TruncSatUVecF64x2ToVecI64x2","v128_shl","v128_shr","ShlVecI8x16","ShlVecI16x8","ShlVecI32x4","ShlVecI64x2","ShrSVecI8x16","ShrUVecI8x16","ShrSVecI16x8","ShrUVecI16x8","ShrSVecI32x4","ShrUVecI32x4","ShrSVecI64x2","ShrUVecI64x2","v128_and","v128_or","v128_xor","AndVec128","OrVec128","XorVec128","v128_not","NotVec128","v128_bitselect","v128_any_true","v128_all_true","AnyTrueVecI16x8","AnyTrueVecI32x4","AnyTrueVecI64x2","AllTrueVecI16x8","AllTrueVecI32x4","AllTrueVecI64x2","idof","visit_globals","visit_members","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_u_xor","i32_atomic_rmw16_u_xor","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_s_f32x4_sat","i32x4_trunc_u_f32x4_sat","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_s_f64x2_sat","i64x2_trunc_u_f64x2_sat","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_s_i32x4","f32x4_convert_u_i32x4","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_s_i64x2","f64x2_convert_u_i64x2","v8x16_shuffle","tryDeferASM","messageArg","filenameArg","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","memory_allocate","memory_free","memory_reset","runtime_instanceof","runtime_flags","runtime_allocate","runtime_reallocate","runtime_register","runtime_discard","runtime_makeArray","capabilities","nativeSizeSize","ftype","blocks","outer","lastId","managedClasses_1","managedClasses_1_1","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","fieldOffset","managedClasses_2","managedClasses_2_1","abvPrototype","managedClasses_3","managedClasses_3_1","isAcyclic","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","i64_to_string","ExportsWalker","includePrivate","seen","walk","visitFile","visitElement","visitAlias","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","e_15","e_16","visitNamespace","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","members_2","members_2_1","name_1","visitInterface","TSDBuilder","unknown","numMembers","members_3","members_3_1","name_2","isInterface","Parser","backlog","seenlog","donelog","dependees","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","currentSource","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","getDependee","dependent","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","parseFunctionExpressionCommon","bodyExpression","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","state_1","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","round","y","sign","isTrueish","fromCodePoint","replaceAll","search","replacment","res","split","Number","capacity","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","__decorate","unmanaged","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoAssert","setImportMemory","setSharedMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","setExplicitStart","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","buildRTTI","cls","bitsetIs","map","bitsetSet","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","makeArray","cloned","makeSet","original_1","original_1_1","v","overrides","original_2","original_2_1","overrides_1","overrides_1_1","overrides_2","overrides_2_1","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","readI8","readI16","readF32","readF64","valueI64"],"mappings":"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AM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\r\n * Common constants.\r\n * @module common\r\n *//***/\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\r\n  DEFINITE_ASSIGNMENT = 1 << 13,\r\n\r\n  // Extended modifiers usually derived from basic modifiers\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 14,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 15,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 16,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 17,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 18,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 19,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 20,\r\n\r\n  // Compilation states\r\n\r\n  /** Is resolved. */\r\n  RESOLVED = 1 << 21,\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 22,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 23,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 24,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 25,\r\n  /** Is a virtual method. */\r\n  VIRTUAL = 1 << 26,\r\n  /** Is the main function. */\r\n  MAIN = 1 << 27,\r\n\r\n  // Other\r\n\r\n  /** Is quoted. */\r\n  QUOTED = 1 << 28\r\n}\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Delimiter used between a function and its inner elements. */\r\nexport const INNER_DELIMITER = \"~\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"~lib\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n/** Path index suffix. */\r\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\r\n\r\n/** Common compiler symbols. */\r\nexport namespace CommonSymbols {\r\n  // special\r\n  export const EMPTY = \"\";\r\n  // types\r\n  export const i8 = \"i8\";\r\n  export const i16 = \"i16\";\r\n  export const i32 = \"i32\";\r\n  export const i64 = \"i64\";\r\n  export const isize = \"isize\";\r\n  export const u8 = \"u8\";\r\n  export const u16 = \"u16\";\r\n  export const u32 = \"u32\";\r\n  export const u64 = \"u64\";\r\n  export const usize = \"usize\";\r\n  export const bool = \"bool\";\r\n  export const f32 = \"f32\";\r\n  export const f64 = \"f64\";\r\n  export const v128 = \"v128\";\r\n  export const i8x16 = \"i8x16\";\r\n  export const u8x16 = \"u8x16\";\r\n  export const i16x8 = \"i16x8\";\r\n  export const u16x8 = \"u16x8\";\r\n  export const i32x4 = \"i32x4\";\r\n  export const u32x4 = \"u32x4\";\r\n  export const i64x2 = \"i64x2\";\r\n  export const u64x2 = \"u64x2\";\r\n  export const f32x4 = \"f32x4\";\r\n  export const f64x2 = \"f64x2\";\r\n  export const void_ = \"void\";\r\n  export const number = \"number\";\r\n  export const boolean = \"boolean\";\r\n  export const string = \"string\";\r\n  export const native = \"native\";\r\n  export const indexof = \"indexof\";\r\n  export const valueof = \"valueof\";\r\n  // aliases\r\n  export const null_ = \"null\";\r\n  export const true_ = \"true\";\r\n  export const false_ = \"false\";\r\n  // objects\r\n  export const this_ = \"this\";\r\n  export const super_ = \"super\";\r\n  export const constructor = \"constructor\";\r\n  // constants\r\n  export const ASC_TARGET = \"ASC_TARGET\";\r\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\r\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\r\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\r\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\r\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\r\n  export const ASC_FEATURE_MUTABLE_GLOBAL = \"ASC_FEATURE_MUTABLE_GLOBAL\";\r\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\r\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\r\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\r\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\r\n  // classes\r\n  export const I8 = \"I8\";\r\n  export const I16 = \"I16\";\r\n  export const I32 = \"I32\";\r\n  export const I64 = \"I64\";\r\n  export const Isize = \"Isize\";\r\n  export const U8 = \"U8\";\r\n  export const U16 = \"U16\";\r\n  export const U32 = \"U32\";\r\n  export const U64 = \"U64\";\r\n  export const Usize = \"Usize\";\r\n  export const Bool = \"Bool\";\r\n  export const F32 = \"F32\";\r\n  export const F64 = \"F64\";\r\n  export const V128 = \"V128\";\r\n  export const String = \"String\";\r\n  export const Array = \"Array\";\r\n  export const FixedArray = \"FixedArray\";\r\n  export const Set = \"Set\";\r\n  export const Map = \"Map\";\r\n  export const ArrayBufferView = \"ArrayBufferView\";\r\n  export const ArrayBuffer = \"ArrayBuffer\";\r\n  export const Math = \"Math\";\r\n  export const Mathf = \"Mathf\";\r\n  export const Int8Array = \"Int8Array\";\r\n  export const Int16Array = \"Int16Array\";\r\n  export const Int32Array = \"Int32Array\";\r\n  export const Int64Array = \"Int64Array\";\r\n  export const Uint8Array = \"Uint8Array\";\r\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\r\n  export const Uint16Array = \"Uint16Array\";\r\n  export const Uint32Array = \"Uint32Array\";\r\n  export const Uint64Array = \"Uint64Array\";\r\n  export const Float32Array = \"Float32Array\";\r\n  export const Float64Array = \"Float64Array\";\r\n  // runtime\r\n  export const abort = \"abort\";\r\n  export const pow = \"pow\";\r\n  export const mod = \"mod\";\r\n  export const alloc = \"__alloc\";\r\n  export const realloc = \"__realloc\";\r\n  export const free = \"__free\";\r\n  export const retain = \"__retain\";\r\n  export const release = \"__release\";\r\n  export const collect = \"__collect\";\r\n  export const typeinfo = \"__typeinfo\";\r\n  export const instanceof_ = \"__instanceof\";\r\n  export const visit = \"__visit\";\r\n  export const allocArray = \"__allocArray\";\r\n}\r\n\r\n// shared\r\nexport { Feature } from \"../std/assembly/shared/feature\";\r\nexport { Target } from \"../std/assembly/shared/target\";\r\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./bitset\";\r\nexport * from \"./charcode\";\r\nexport * from \"./collections\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n\r\n/** Tests if `x` is a power of two. */\r\nexport function isPowerOf2(x: i32): bool {\r\n  return x != 0 && (x & (x - 1)) == 0;\r\n}\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak, CharCode\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n  /** Related range, if any. */\r\n  relatedRange: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Adds a related source range to this message. */\r\n  withRelatedRange(range: Range): this {\r\n    this.relatedRange = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(range, useColors));\r\n    }\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n\r\n    let relatedRange = message.relatedRange;\r\n    if (relatedRange) {\r\n      if (showContext) {\r\n        sb.push(\"\\n\");\r\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\r\n      }\r\n      sb.push(\"\\n\");\r\n      sb.push(\" in \");\r\n      sb.push(range.source.normalizedPath);\r\n      sb.push(\"(\");\r\n      sb.push(range.line.toString(10));\r\n      sb.push(\",\");\r\n      sb.push(range.column.toString(10));\r\n      sb.push(\")\");\r\n    }\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) {\r\n      if (isLineBreak(text.charCodeAt(start))) {\r\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\r\n        break;\r\n      }\r\n      sb.push(\"~\");\r\n    }\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    relatedRange: Range | null,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    if (relatedRange) message.relatedRange = relatedRange;\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message with a related range. */\r\n  infoRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message with a related range. */\r\n  warningRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message with a related range. */\r\n  errorRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  INNER_DELIMITER,\r\n  LIBRARY_SUBST,\r\n  INDEX_SUFFIX,\r\n  CommonSymbols,\r\n  Feature,\r\n  Target\r\n} from \"./common\";\r\n\r\nimport {\r\n  Options\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  Range,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n  TypeParameterNode,\r\n  TypeNode,\r\n  NamedTypeNode,\r\n  FunctionTypeNode,\r\n  ArrowKind,\r\n\r\n  Expression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  decoratorNameToKind,\r\n  findDecorator,\r\n  ExportDefaultStatement\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  FunctionRef\r\n} from \"./module\";\r\n\r\nimport {\r\n  CharCode,\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeF32,\r\n  writeF64\r\n} from \"./util\";\r\n\r\nimport {\r\n  Resolver\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Flow\r\n} from \"./flow\";\r\n\r\n/** Represents a yet unresolved `import`. */\r\nclass QueuedImport {\r\n  constructor(\r\n    /** File being imported into. */\r\n    public localFile: File,\r\n    /** Identifier within the local file. */\r\n    public localIdentifier: IdentifierExpression,\r\n    /** Identifier within the other file. Is an `import *` if not set. */\r\n    public foreignIdentifier: IdentifierExpression | null,\r\n    /** Path to the other file. */\r\n    public foreignPath: string,\r\n    /** Alternative path to the other file. */\r\n    public foreignPathAlt: string\r\n  ) {}\r\n}\r\n\r\n/** Represents a yet unresolved `export`. */\r\nclass QueuedExport {\r\n  constructor(\r\n    /** Identifier within the local file. */\r\n    public localIdentifier: IdentifierExpression,\r\n    /** Identifier within the other file. */\r\n    public foreignIdentifier: IdentifierExpression,\r\n    /** Path to the other file if a re-export. */\r\n    public foreignPath: string | null,\r\n    /** Alternative path to the other file if a re-export. */\r\n    public foreignPathAlt: string | null\r\n  ) {}\r\n}\r\n\r\n/** Represents a yet unresolved `export *`. */\r\nclass QueuedExportStar {\r\n  // stored in a map with localFile as the key\r\n  constructor(\r\n    /** Path to the other file. */\r\n    public foreignPath: string,\r\n    /** Alternative path to the other file. */\r\n    public foreignPathAlt: string,\r\n    /** Reference to the path literal for reporting. */\r\n    public pathLiteral: StringLiteralExpression\r\n  ) {}\r\n}\r\n\r\n/** Represents the kind of an operator overload. */\r\nexport enum OperatorKind {\r\n  INVALID,\r\n\r\n  // indexed access\r\n  INDEXED_GET,            // a[]\r\n  INDEXED_SET,            // a[]=b\r\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\r\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\r\n\r\n  // binary\r\n  ADD,                    // a + b\r\n  SUB,                    // a - b\r\n  MUL,                    // a * b\r\n  DIV,                    // a / b\r\n  REM,                    // a % b\r\n  POW,                    // a ** b\r\n  BITWISE_AND,            // a & b\r\n  BITWISE_OR,             // a | b\r\n  BITWISE_XOR,            // a ^ b\r\n  BITWISE_SHL,            // a << b\r\n  BITWISE_SHR,            // a >> b\r\n  BITWISE_SHR_U,          // a >>> b\r\n  EQ,                     // a == b\r\n  NE,                     // a != b\r\n  GT,                     // a > b\r\n  GE,                     // a >= b\r\n  LT,                     // a < b\r\n  LE,                     // a <= b\r\n\r\n  // unary prefix\r\n  PLUS,                   // +a\r\n  MINUS,                  // -a\r\n  NOT,                    // !a\r\n  BITWISE_NOT,            // ~a\r\n  PREFIX_INC,             // ++a\r\n  PREFIX_DEC,             // --a\r\n\r\n  // unary postfix\r\n  POSTFIX_INC,            // a++\r\n  POSTFIX_DEC             // a--\r\n\r\n  // not overridable:\r\n  // IDENTITY             // a === b\r\n  // LOGICAL_AND          // a && b\r\n  // LOGICAL_OR           // a || b\r\n}\r\n\r\n/** Returns the operator kind represented by the specified decorator and string argument. */\r\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\r\n  assert(arg.length);\r\n  switch (decoratorKind) {\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.OPENBRACKET: {\r\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\r\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\r\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.ADD;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.SUB;\r\n          break;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          if (arg == \"*\") return OperatorKind.MUL;\r\n          if (arg == \"**\") return OperatorKind.POW;\r\n          break;\r\n        }\r\n        case CharCode.SLASH: {\r\n          if (arg == \"/\") return OperatorKind.DIV;\r\n          break;\r\n        }\r\n        case CharCode.PERCENT: {\r\n          if (arg == \"%\") return OperatorKind.REM;\r\n          break;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\r\n          break;\r\n        }\r\n        case CharCode.BAR: {\r\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\r\n          break;\r\n        }\r\n        case CharCode.CARET: {\r\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\r\n          break;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          if (arg == \"==\") return OperatorKind.EQ;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!=\") return OperatorKind.NE;\r\n          break;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          if (arg == \">\") return OperatorKind.GT;\r\n          if (arg == \">=\") return OperatorKind.GE;\r\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\r\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\r\n          break;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          if (arg == \"<\") return OperatorKind.LT;\r\n          if (arg == \"<=\") return OperatorKind.LE;\r\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_PREFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.PLUS;\r\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.MINUS;\r\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!\") return OperatorKind.NOT;\r\n          break;\r\n        }\r\n        case CharCode.TILDE: {\r\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_POSTFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return OperatorKind.INVALID;\r\n}\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Resolver instance. */\r\n  resolver: Resolver;\r\n  /** Array of sources. */\r\n  sources: Source[] = [];\r\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n  /** Special native code source. */\r\n  nativeSource: Source;\r\n  /** Special native code file. */\r\n  nativeFile: File;\r\n\r\n  // lookup maps\r\n\r\n  /** Files by unique internal name. */\r\n  filesByName: Map<string,File> = new Map();\r\n  /** Elements by unique internal name in element space. */\r\n  elementsByName: Map<string,Element> = new Map();\r\n  /** Elements by declaration. */\r\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\r\n  /** Element instances by unique internal name. */\r\n  instancesByName: Map<string,Element> = new Map();\r\n  /** Classes backing basic types like `i32`. */\r\n  typeClasses: Map<TypeKind,Class> = new Map();\r\n  /** Managed classes contained in the program, by id. */\r\n  managedClasses: Map<i32,Class> = new Map();\r\n\r\n  // standard references\r\n\r\n  /** ArrayBufferView reference. */\r\n  arrayBufferViewInstance: Class;\r\n  /** ArrayBuffer instance reference. */\r\n  arrayBufferInstance: Class;\r\n  /** Array prototype reference. */\r\n  arrayPrototype: ClassPrototype;\r\n  /** Set prototype reference. */\r\n  setPrototype: ClassPrototype;\r\n  /** Map prototype reference. */\r\n  mapPrototype: ClassPrototype;\r\n  /** Fixed array prototype reference. */\r\n  fixedArrayPrototype: ClassPrototype;\r\n  /** Int8Array prototype. */\r\n  i8ArrayPrototype: ClassPrototype;\r\n  /** Int16Array prototype. */\r\n  i16ArrayPrototype: ClassPrototype;\r\n  /** Int32Array prototype. */\r\n  i32ArrayPrototype: ClassPrototype;\r\n  /** Int64Array prototype. */\r\n  i64ArrayPrototype: ClassPrototype;\r\n  /** Uint8Array prototype. */\r\n  u8ArrayPrototype: ClassPrototype;\r\n  /** Uint8ClampedArray prototype. */\r\n  u8ClampedArrayPrototype: ClassPrototype;\r\n  /** Uint16Array prototype. */\r\n  u16ArrayPrototype: ClassPrototype;\r\n  /** Uint32Array prototype. */\r\n  u32ArrayPrototype: ClassPrototype;\r\n  /** Uint64Array prototype. */\r\n  u64ArrayPrototype: ClassPrototype;\r\n  /** Float32Array prototype. */\r\n  f32ArrayPrototype: ClassPrototype;\r\n  /** Float64Array prototype. */\r\n  f64ArrayPrototype: ClassPrototype;\r\n  /** String instance reference. */\r\n  stringInstance: Class;\r\n  /** Abort function reference, if not explicitly disabled. */\r\n  abortInstance: Function | null;\r\n\r\n  // runtime references\r\n\r\n  /** RT `__alloc(size: usize, id: u32): usize` */\r\n  allocInstance: Function;\r\n  /** RT `__realloc(ref: usize, newSize: usize): usize` */\r\n  reallocInstance: Function;\r\n  /** RT `__free(ref: usize): void` */\r\n  freeInstance: Function;\r\n  /** RT `__retain(ref: usize): usize` */\r\n  retainInstance: Function;\r\n  /** RT `__release(ref: usize): void` */\r\n  releaseInstance: Function;\r\n  /** RT `__collect(): void` */\r\n  collectInstance: Function;\r\n  /** RT `__visit(ref: usize, cookie: u32): void` */\r\n  visitInstance: Function;\r\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\r\n  typeinfoInstance: Function;\r\n  /** RT `__instanceof(ref: usize, superId: u32): bool` */\r\n  instanceofInstance: Function;\r\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\r\n  allocArrayInstance: Function;\r\n\r\n  /** Next class id. */\r\n  nextClassId: u32 = 0;\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(\r\n    /** Shared array of diagnostic messages (emitted so far). */\r\n    diagnostics: DiagnosticMessage[] | null = null\r\n  ) {\r\n    super(diagnostics);\r\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY);\r\n    this.nativeSource = nativeSource;\r\n    var nativeFile = new File(this, nativeSource);\r\n    this.nativeFile = nativeFile;\r\n    this.filesByName.set(nativeFile.internalName, nativeFile);\r\n    this.resolver = new Resolver(this);\r\n  }\r\n\r\n  /** Writes a common runtime header to the specified buffer. */\r\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\r\n    // BLOCK {\r\n    //   mmInfo: usize // WASM64 TODO\r\n    //   gcInfo: u32\r\n    //   rtId: u32\r\n    //   rtSize: u32\r\n    // }\r\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\r\n    writeI32(payloadSize, buffer, offset);\r\n    writeI32(1, buffer, offset + 4); // RC=1\r\n    writeI32(classInstance.id, buffer, offset + 8);\r\n    writeI32(payloadSize, buffer, offset + 12);\r\n  }\r\n\r\n  /** Gets the size of a runtime header. */\r\n  get runtimeHeaderSize(): i32 {\r\n    return 16;\r\n  }\r\n\r\n  /** Creates a native variable declaration. */\r\n  makeNativeVariableDeclaration(\r\n    /** The simple name of the variable */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `CONST`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): VariableDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createVariableDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      null, null, null, flags, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native type declaration. */\r\n  makeNativeTypeDeclaration(\r\n    /** The simple name of the type. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): TypeDeclaration {\r\n    var range = this.nativeSource.range;\r\n    var identifier = Node.createIdentifierExpression(name, range);\r\n    return Node.createTypeDeclaration(\r\n      identifier,\r\n      null,\r\n      Node.createOmittedType(range),\r\n      null, flags, range\r\n    );\r\n  }\r\n\r\n  // a dummy signature for programmatically generated native functions\r\n  private nativeDummySignature: FunctionTypeNode | null = null;\r\n\r\n  /** Creates a native function declaration. */\r\n  makeNativeFunctionDeclaration(\r\n    /** The simple name of the function. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): FunctionDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createFunctionDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      null,\r\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createFunctionType([],\r\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\r\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\r\n          null, false, range\r\n        ),\r\n        null, false, range)\r\n      ),\r\n      null, null, flags, ArrowKind.NONE, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native namespace declaration. */\r\n  makeNativeNamespaceDeclaration(\r\n    /** The simple name of the namespace. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): NamespaceDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createNamespaceDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      [], null, flags, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native function. */\r\n  makeNativeFunction(\r\n    /** The simple name of the function. */\r\n    name: string,\r\n    /** Concrete function signature. */\r\n    signature: Signature,\r\n    /** Parent element, usually a file, class or namespace. */\r\n    parent: Element = this.nativeFile,\r\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\r\n    flags: CommonFlags = CommonFlags.NONE,\r\n    /** Decorator flags representing built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ): Function {\r\n    return new Function(\r\n      name,\r\n      new FunctionPrototype(\r\n        name,\r\n        parent,\r\n        this.makeNativeFunctionDeclaration(name, flags),\r\n        decoratorFlags\r\n      ),\r\n      signature\r\n    );\r\n  }\r\n\r\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\r\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement {\r\n    var elementsByDeclaration = this.elementsByDeclaration;\r\n    assert(elementsByDeclaration.has(declaration));\r\n    return elementsByDeclaration.get(declaration)!;\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n\r\n    // register native types\r\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\r\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\r\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\r\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\r\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\r\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\r\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\r\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\r\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\r\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\r\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\r\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\r\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\r\n    this.registerNativeType(CommonSymbols.void_, Type.void);\r\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\r\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\r\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\r\n      CommonSymbols.native,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\r\n      DecoratorFlags.BUILTIN\r\n    ));\r\n    this.nativeFile.add(CommonSymbols.indexof, new TypeDefinition(\r\n      CommonSymbols.indexof,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(CommonSymbols.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\r\n      DecoratorFlags.BUILTIN\r\n    ));\r\n    this.nativeFile.add(CommonSymbols.valueof, new TypeDefinition(\r\n      CommonSymbols.valueof,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(CommonSymbols.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\r\n      DecoratorFlags.BUILTIN\r\n    ));\r\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\r\n\r\n    // register compiler hints\r\n    this.registerConstantInteger(CommonSymbols.ASC_TARGET, Type.i32,\r\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\r\n    this.registerConstantInteger(CommonSymbols.ASC_NO_ASSERT, Type.bool,\r\n      i64_new(options.noAssert ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_MEMORY_BASE, Type.i32,\r\n      i64_new(options.memoryBase, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\r\n      i64_new(options.optimizeLevelHint, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_SHRINK_LEVEL, Type.i32,\r\n      i64_new(options.shrinkLevelHint, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_MUTABLE_GLOBAL, Type.bool,\r\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\r\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIMD, Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_THREADS, Type.bool,\r\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\r\n\r\n    // remember deferred elements\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\r\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\r\n    var queuedExtends = new Array<ClassPrototype>();\r\n    var queuedImplements = new Array<ClassPrototype>();\r\n\r\n    // initialize relevant declaration-like statements of the entire program\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n      let file = new File(this, source);\r\n      this.filesByName.set(file.internalName, file);\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\r\n            break;\r\n          }\r\n          case NodeKind.EXPORTDEFAULT: {\r\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports * should be linkable now that all files have been processed\r\n    for (let [file, exportsStar] of queuedExportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        let exportStar = exportsStar[i];\r\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\r\n        if (!foreignFile) {\r\n          this.error(\r\n            DiagnosticCode.File_0_not_found,\r\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\r\n          );\r\n          continue;\r\n        }\r\n        file.ensureExportStar(foreignFile);\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\r\n      let queuedImport = queuedImports[i];\r\n      let foreignIdentifier = queuedImport.foreignIdentifier;\r\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\r\n        let element = this.lookupForeign(\r\n          foreignIdentifier.text,\r\n          queuedImport.foreignPath,\r\n          queuedImport.foreignPathAlt,\r\n          queuedExports\r\n        );\r\n        if (element) {\r\n          queuedImport.localFile.add(\r\n            queuedImport.localIdentifier.text,\r\n            element,\r\n            true // isImport\r\n          );\r\n        } else {\r\n          // FIXME: file not found is not reported if this happens?\r\n          this.error(\r\n            DiagnosticCode.Module_0_has_no_exported_member_1,\r\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\r\n          );\r\n        }\r\n      } else { // i.e. import * as bar from \"./bar\"\r\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\r\n        if (foreignFile) {\r\n          let localFile = queuedImport.localFile;\r\n          let localName = queuedImport.localIdentifier.text;\r\n          localFile.add(\r\n            localName,\r\n            foreignFile.asImportedNamespace(\r\n              localName,\r\n              localFile\r\n            ),\r\n            true // isImport\r\n          );\r\n        } else {\r\n          assert(false); // already reported by the parser not finding the file\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [file, exports] of queuedExports) {\r\n      for (let [exportName, queuedExport] of exports) {\r\n        let localName = queuedExport.localIdentifier.text;\r\n        let foreignPath = queuedExport.foreignPath;\r\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\r\n          let element = this.lookupForeign(\r\n            localName,\r\n            foreignPath,\r\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\r\n            queuedExports\r\n          );\r\n          if (element) {\r\n            file.ensureExport(exportName, element);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.localIdentifier.range,\r\n              foreignPath, localName\r\n            );\r\n          }\r\n        } else { // i.e. export { foo [as bar] }\r\n          let element = file.lookupInSelf(localName);\r\n          if (element) {\r\n            file.ensureExport(exportName, element);\r\n          } else {\r\n            let globalElement = this.lookupGlobal(localName);\r\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\r\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Module_0_has_no_exported_member_1,\r\n                queuedExport.foreignIdentifier.range,\r\n                file.internalName, queuedExport.foreignIdentifier.text\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\r\n    assert(this.nextClassId == 0);\r\n    this.arrayBufferInstance = this.requireClass(CommonSymbols.ArrayBuffer);\r\n    assert(this.arrayBufferInstance.id == 0);\r\n    this.stringInstance = this.requireClass(CommonSymbols.String);\r\n    assert(this.stringInstance.id == 1);\r\n    this.arrayBufferViewInstance = this.requireClass(CommonSymbols.ArrayBufferView);\r\n    assert(this.arrayBufferViewInstance.id == 2);\r\n\r\n    // register classes backing basic types\r\n    this.registerNativeTypeClass(TypeKind.I8, CommonSymbols.I8);\r\n    this.registerNativeTypeClass(TypeKind.I16, CommonSymbols.I16);\r\n    this.registerNativeTypeClass(TypeKind.I32, CommonSymbols.I32);\r\n    this.registerNativeTypeClass(TypeKind.I64, CommonSymbols.I64);\r\n    this.registerNativeTypeClass(TypeKind.ISIZE, CommonSymbols.Isize);\r\n    this.registerNativeTypeClass(TypeKind.U8, CommonSymbols.U8);\r\n    this.registerNativeTypeClass(TypeKind.U16, CommonSymbols.U16);\r\n    this.registerNativeTypeClass(TypeKind.U32, CommonSymbols.U32);\r\n    this.registerNativeTypeClass(TypeKind.U64, CommonSymbols.U64);\r\n    this.registerNativeTypeClass(TypeKind.USIZE, CommonSymbols.Usize);\r\n    this.registerNativeTypeClass(TypeKind.BOOL, CommonSymbols.Bool);\r\n    this.registerNativeTypeClass(TypeKind.F32, CommonSymbols.F32);\r\n    this.registerNativeTypeClass(TypeKind.F64, CommonSymbols.F64);\r\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeTypeClass(TypeKind.V128, CommonSymbols.V128);\r\n\r\n    // register views but don't instantiate them yet\r\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int8Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int16Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int32Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int64Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\r\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint16Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint32Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint64Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float32Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float64Array, ElementKind.CLASS_PROTOTYPE);\r\n\r\n    // resolve base prototypes of derived classes\r\n    var resolver = this.resolver;\r\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\r\n      let thisPrototype = queuedExtends[i];\r\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\r\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\r\n      if (!baseElement) continue;\r\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let basePrototype = <ClassPrototype>baseElement;\r\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\r\n          this.error(\r\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\r\n          );\r\n        }\r\n        if (\r\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\r\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\r\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\r\n          );\r\n        }\r\n        thisPrototype.basePrototype = basePrototype;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          extendsNode.range\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    {\r\n      let globalAliases = options.globalAliases;\r\n      if (globalAliases) {\r\n        for (let [alias, name] of globalAliases) {\r\n          if (!name.length) continue; // explicitly disabled\r\n          let firstChar = name.charCodeAt(0);\r\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\r\n            this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\r\n          } else {\r\n            let elementsByName = this.elementsByName;\r\n            let element = elementsByName.get(name);\r\n            if (element) {\r\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\r\n              elementsByName.set(alias, element);\r\n            }\r\n            else throw new Error(\"no such global element: \" + name);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // register stdlib components\r\n    this.arrayPrototype = <ClassPrototype>this.require(CommonSymbols.Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.FixedArray, ElementKind.CLASS_PROTOTYPE);\r\n    this.setPrototype = <ClassPrototype>this.require(CommonSymbols.Set, ElementKind.CLASS_PROTOTYPE);\r\n    this.mapPrototype = <ClassPrototype>this.require(CommonSymbols.Map, ElementKind.CLASS_PROTOTYPE);\r\n    this.abortInstance = this.lookupFunction(CommonSymbols.abort); // can be disabled\r\n    this.allocInstance = this.requireFunction(CommonSymbols.alloc);\r\n    this.reallocInstance = this.requireFunction(CommonSymbols.realloc);\r\n    this.freeInstance = this.requireFunction(CommonSymbols.free);\r\n    this.retainInstance = this.requireFunction(CommonSymbols.retain);\r\n    this.releaseInstance = this.requireFunction(CommonSymbols.release);\r\n    this.collectInstance = this.requireFunction(CommonSymbols.collect);\r\n    this.typeinfoInstance = this.requireFunction(CommonSymbols.typeinfo);\r\n    this.instanceofInstance = this.requireFunction(CommonSymbols.instanceof_);\r\n    this.visitInstance = this.requireFunction(CommonSymbols.visit);\r\n    this.allocArrayInstance = this.requireFunction(CommonSymbols.allocArray);\r\n\r\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\r\n    for (let file of this.filesByName.values()) {\r\n      let exports = file.exports;\r\n      if (!(file.source.isEntry && exports)) continue;\r\n      for (let element of exports.values()) this.markModuleExport(element);\r\n    }\r\n  }\r\n\r\n  /** Requires that a global library element of the specified kind is present and returns it. */\r\n  private require(name: string, kind: ElementKind): Element {\r\n    var element = this.lookupGlobal(name);\r\n    if (!element) throw new Error(\"missing \" + name);\r\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\r\n    return element;\r\n  }\r\n\r\n  /** Requires that a non-generic global class is present and returns it. */\r\n  private requireClass(name: string): Class {\r\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\r\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\r\n    if (!resolved) throw new Error(\"invalid \" + name);\r\n    return resolved;\r\n  }\r\n\r\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\r\n  private lookupFunction(name: string): Function | null {\r\n    var prototype = this.lookupGlobal(name);\r\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\r\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n  }\r\n\r\n  /** Requires that a non-generic global function is present and returns it. */\r\n  private requireFunction(name: string): Function {\r\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\r\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n    if (!resolved) throw new Error(\"invalid \" + name);\r\n    return resolved;\r\n  }\r\n\r\n  /** Marks an element and its children as a module export. */\r\n  private markModuleExport(element: Element): void {\r\n    element.set(CommonFlags.MODULE_EXPORT);\r\n    switch (element.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\r\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\r\n        if (getterPrototype) this.markModuleExport(getterPrototype);\r\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\r\n        if (setterPrototype) this.markModuleExport(setterPrototype);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY:\r\n      case ElementKind.FUNCTION:\r\n      case ElementKind.FIELD:\r\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\r\n    }\r\n    {\r\n      let members = element.members;\r\n      if (members) for (let member of members.values()) this.markModuleExport(member);\r\n    }\r\n  }\r\n\r\n  /** Registers a native type with the program. */\r\n  private registerNativeType(name: string, type: Type): void {\r\n    var element = new TypeDefinition(\r\n      name,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\r\n      DecoratorFlags.BUILTIN\r\n    );\r\n    element.setType(type);\r\n    this.nativeFile.add(name, element);\r\n  }\r\n\r\n  /** Registers the backing class of a native type. */\r\n  private registerNativeTypeClass(typeKind: TypeKind, className: string): void {\r\n    assert(!this.typeClasses.has(typeKind));\r\n    var element = this.lookupGlobal(className);\r\n    if (element) {\r\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\r\n      if (classElement) this.typeClasses.set(typeKind, classElement);\r\n    }\r\n  }\r\n\r\n  /** Registers a constant integer value within the global scope. */\r\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\r\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\r\n    var global = new Global(\r\n      name,\r\n      this.nativeFile,\r\n      DecoratorFlags.NONE,\r\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\r\n    );\r\n    global.setConstantIntegerValue(value, type);\r\n    this.nativeFile.add(name, global);\r\n  }\r\n\r\n  /** Registers a constant float value within the global scope. */\r\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\r\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\r\n    var global = new Global(\r\n      name,\r\n      this.nativeFile,\r\n      DecoratorFlags.NONE,\r\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\r\n    );\r\n    global.setConstantFloatValue(value, type);\r\n    this.nativeFile.add(name, global);\r\n  }\r\n\r\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\r\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\r\n    var elementsByName = this.elementsByName;\r\n    if (elementsByName.has(name)) {\r\n      let actual = elementsByName.get(name)!;\r\n      // NOTE: this is effectively only performed when merging native types with\r\n      // their respective namespaces in std/builtins, but can also trigger when a\r\n      // user has multiple global elements of the same name in different files,\r\n      // which might result in unexpected shared symbols accross files. considering\r\n      // this a wonky feature for now that we might want to revisit later.\r\n      if (actual !== element) {\r\n        let merged = tryMerge(elementsByName.get(name)!, element);\r\n        if (!merged) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            element.identifierNode.range, name\r\n          );\r\n          return element;\r\n        }\r\n        element = merged;\r\n      }\r\n    }\r\n    elementsByName.set(name, element);\r\n    return element;\r\n  }\r\n\r\n  /** Looks up the element of the specified name in the global scope. */\r\n  lookupGlobal(name: string): Element | null {\r\n    var elements = this.elementsByName;\r\n    if (elements.has(name)) return elements.get(name);\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\r\n  requireGlobal(name: string): Element {\r\n    var elements = this.elementsByName;\r\n    if (elements.has(name)) return elements.get(name)!;\r\n    throw new Error(\"missing global\");\r\n  }\r\n\r\n  /** Tries to locate a foreign file given its normalized path. */\r\n  private lookupForeignFile(\r\n    /** Normalized path to the other file. */\r\n    foreignPath: string,\r\n    /** Alternative normalized path to the other file. */\r\n    foreignPathAlt: string\r\n  ): File | null {\r\n    var filesByName = this.filesByName;\r\n    return filesByName.has(foreignPath)\r\n         ? filesByName.get(foreignPath)!\r\n         : filesByName.has(foreignPathAlt)\r\n         ? filesByName.get(foreignPathAlt)!\r\n         : null;\r\n  }\r\n\r\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\r\n  private lookupForeign(\r\n    /** Identifier within the other file. */\r\n    foreignName: string,\r\n    /** Normalized path to the other file. */\r\n    foreignPath: string,\r\n    /** Alternative normalized path to the other file. */\r\n    foreignPathAlt: string,\r\n    /** So far queued exports. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): DeclaredElement | null {\r\n    do {\r\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\r\n      if (!foreignFile) return null; // no such file\r\n\r\n      // search already resolved exports\r\n      let element = foreignFile.lookupExport(foreignName);\r\n      if (element) return element;\r\n\r\n      // otherwise traverse queued exports\r\n      if (queuedExports.has(foreignFile)) {\r\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\r\n        if (fileQueuedExports.has(foreignName)) {\r\n          let queuedExport = fileQueuedExports.get(foreignName)!;\r\n          if (queuedExport.foreignPath) { // imported from another file\r\n            foreignName = queuedExport.localIdentifier.text;\r\n            foreignPath = queuedExport.foreignPath;\r\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\r\n            continue;\r\n          } else { // local element of this file\r\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\r\n            if (element) return element;\r\n          }\r\n        }\r\n      }\r\n      break;\r\n    } while (true);\r\n    return null;\r\n  }\r\n\r\n  /** Validates that only supported decorators are present. */\r\n  private checkDecorators(\r\n    /** Decorators present on an element. */\r\n    decorators: DecoratorNode[] | null,\r\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\r\n    acceptedFlags: DecoratorFlags\r\n  ): DecoratorFlags {\r\n    var flags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        let kind = decoratorNameToKind(decorator.name);\r\n        let flag = decoratorKindToFlag(kind);\r\n        if (flag) {\r\n          if (flag == DecoratorFlags.BUILTIN) {\r\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\r\n              this.error(\r\n                DiagnosticCode.Decorator_0_is_not_valid_here,\r\n                decorator.range, decorator.name.range.toString()\r\n              );\r\n            } else {\r\n              flags |= flag;\r\n            }\r\n          } else if (!(acceptedFlags & flag)) {\r\n            this.error(\r\n              DiagnosticCode.Decorator_0_is_not_valid_here,\r\n              decorator.range, decorator.name.range.toString()\r\n            );\r\n          } else if (flags & flag) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_decorator,\r\n              decorator.range, decorator.name.range.toString()\r\n            );\r\n          } else {\r\n            flags |= flag;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return flags;\r\n  }\r\n\r\n  /** Initializes a class declaration. */\r\n  private initializeClass(\r\n    /** The declaration to initialize. */\r\n    declaration: ClassDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: ClassPrototype[],\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): ClassPrototype | null {\r\n    var name = declaration.name.text;\r\n    var element = new ClassPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL |\r\n        DecoratorFlags.SEALED |\r\n        DecoratorFlags.UNMANAGED\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return null;\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    if (implementsTypes) {\r\n      let numImplementsTypes = implementsTypes.length;\r\n      // cannot implement interfaces when unmanaged\r\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (numImplementsTypes) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\r\n            Range.join(\r\n              declaration.name.range,\r\n              implementsTypes[numImplementsTypes - 1].range\r\n            )\r\n          );\r\n        }\r\n      } else if (numImplementsTypes) {\r\n        // remember classes that implement interfaces\r\n        for (let i = 0; i < numImplementsTypes; ++i) {\r\n          this.warning( // TODO: not yet supported\r\n            DiagnosticCode.Operation_not_supported,\r\n            implementsTypes[i].range\r\n          );\r\n        }\r\n        queuedImplements.push(element);\r\n      }\r\n    }\r\n    // remember classes that extend another class\r\n    if (declaration.extendsType) queuedExtends.push(element);\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\r\n        default: assert(false); // class member expected\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Initializes a field of a class or interface. */\r\n  private initializeField(\r\n    /** The declaration to initialize. */\r\n    declaration: FieldDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var decorators = declaration.decorators;\r\n    var element: DeclaredElement;\r\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\r\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\r\n      element = new Global(\r\n        name,\r\n        parent,\r\n        this.checkDecorators(decorators,\r\n          (declaration.is(CommonFlags.READONLY)\r\n            ? DecoratorFlags.INLINE\r\n            : DecoratorFlags.NONE\r\n          ) | DecoratorFlags.LAZY | DecoratorFlags.UNSAFE\r\n        ),\r\n        declaration\r\n      );\r\n      if (!parent.add(name, element)) return;\r\n    } else { // actual instance field\r\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\r\n      element = new FieldPrototype(\r\n        name,\r\n        parent,\r\n        declaration,\r\n        this.checkDecorators(decorators, DecoratorFlags.UNSAFE)\r\n      );\r\n      if (!parent.addInstance(name, element)) return;\r\n    }\r\n  }\r\n\r\n  /** Initializes a method of a class or interface. */\r\n  private initializeMethod(\r\n    /** The declaration to initialize. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var isStatic = declaration.is(CommonFlags.STATIC);\r\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\r\n    if (!declaration.is(CommonFlags.GENERIC)) {\r\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\r\n                    |  DecoratorFlags.OPERATOR_PREFIX\r\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\r\n    }\r\n    var element = new FunctionPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, acceptedFlags)\r\n    );\r\n    if (isStatic) { // global function\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n      if (!parent.add(name, element)) return;\r\n    } else { // actual instance method\r\n      if (!parent.addInstance(name, element)) return;\r\n    }\r\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\r\n  }\r\n\r\n  /** Checks that operator overloads are generally valid, if present. */\r\n  private checkOperatorOverloads(\r\n    /** Decorators to check. */\r\n    decorators: DecoratorNode[] | null,\r\n    /** Decorated method. */\r\n    prototype: FunctionPrototype,\r\n    /** Parent class. */\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        switch (decorator.decoratorKind) {\r\n          case DecoratorKind.OPERATOR:\r\n          case DecoratorKind.OPERATOR_BINARY:\r\n          case DecoratorKind.OPERATOR_PREFIX:\r\n          case DecoratorKind.OPERATOR_POSTFIX: {\r\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n            if (numArgs == 1) {\r\n              let firstArg = (<Expression[]>decorator.arguments)[0];\r\n              if (\r\n                firstArg.kind == NodeKind.LITERAL &&\r\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n              ) {\r\n                let kind = operatorKindFromDecorator(\r\n                  decorator.decoratorKind,\r\n                  (<StringLiteralExpression>firstArg).value\r\n                );\r\n                if (kind == OperatorKind.INVALID) {\r\n                  this.error(\r\n                    DiagnosticCode.Operation_not_supported,\r\n                    firstArg.range\r\n                  );\r\n                } else {\r\n                  let overloads = classPrototype.overloadPrototypes;\r\n                  if (overloads.has(kind)) {\r\n                    this.error(\r\n                      DiagnosticCode.Duplicate_function_implementation,\r\n                      firstArg.range\r\n                    );\r\n                  } else {\r\n                    prototype.operatorKind = kind;\r\n                    overloads.set(kind, prototype);\r\n                  }\r\n                }\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.String_literal_expected,\r\n                  firstArg.range\r\n                );\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                decorator.range, \"1\", numArgs.toString(10)\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\r\n  private ensureProperty(\r\n    /** The declaration of the getter or setter introducing the property. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): PropertyPrototype | null {\r\n    var name = declaration.name.text;\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let parentMembers = parent.members;\r\n      if (parentMembers && parentMembers.has(name)) {\r\n        let element = <Element>parentMembers.get(name)!;\r\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\r\n      } else {\r\n        let element = new PropertyPrototype(name, parent, declaration);\r\n        if (!parent.add(name, element)) return null;\r\n        return element;\r\n      }\r\n    } else {\r\n      let parentMembers = parent.instanceMembers;\r\n      if (parentMembers && parentMembers.has(name)) {\r\n        let element = <Element>parentMembers.get(name);\r\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\r\n      } else {\r\n        let element = new PropertyPrototype(name, parent, declaration);\r\n        if (!parent.addInstance(name, element)) return null;\r\n        return element;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Duplicate_property_0,\r\n      declaration.name.range, name\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Initializes a property of a class. */\r\n  private initializeProperty(\r\n    /** The declaration of the getter or setter. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var property = this.ensureProperty(declaration, parent);\r\n    if (!property) return;\r\n    var name = declaration.name.text;\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    if (isGetter) {\r\n      if (property.getterPrototype) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_property_0,\r\n          declaration.name.range, name\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      if (property.setterPrototype) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_property_0,\r\n          declaration.name.range, name\r\n        );\r\n        return;\r\n      }\r\n    }\r\n    var element = new FunctionPrototype(\r\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\r\n      property,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\r\n      )\r\n    );\r\n    if (isGetter) {\r\n      property.getterPrototype = element;\r\n    } else {\r\n      property.setterPrototype = element;\r\n    }\r\n  }\r\n\r\n  /** Initializes an enum. */\r\n  private initializeEnum(\r\n    /** The declaration to initialize. */\r\n    declaration: EnumDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): Enum | null {\r\n    var name = declaration.name.text;\r\n    var element = new Enum(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL |\r\n        DecoratorFlags.INLINE |\r\n        DecoratorFlags.LAZY\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return null;\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Initializes an enum value. */\r\n  private initializeEnumValue(\r\n    /** The declaration to initialize. */\r\n    declaration: EnumValueDeclaration,\r\n    /** Parent enum. */\r\n    parent: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new EnumValue(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.NONE\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n  }\r\n\r\n  /** Initializes an `export` statement. */\r\n  private initializeExports(\r\n    /** The statement to initialize. */\r\n    statement: ExportStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>,\r\n    /** So far queued `export *`s. */\r\n    queuedExportsStar: Map<File,QueuedExportStar[]>\r\n  ): void {\r\n    var members = statement.members;\r\n    if (members) { // export { foo, bar } [from \"./baz\"]\r\n      for (let i = 0, k = members.length; i < k; ++i) {\r\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\r\n      }\r\n    } else { // export * from \"./baz\"\r\n      let queued: QueuedExportStar[];\r\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\r\n      else queuedExportsStar.set(parent, queued = []);\r\n      let foreignPath = assert(statement.internalPath); // must be set for export *\r\n      queued.push(new QueuedExportStar(\r\n        foreignPath,\r\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n          : foreignPath + INDEX_SUFFIX,\r\n        assert(statement.path)\r\n      ));\r\n    }\r\n  }\r\n\r\n  /** Initializes a single `export` member. Does not handle `export *`. */\r\n  private initializeExport(\r\n    /** The member to initialize. */\r\n    member: ExportMember,\r\n    /** Local file. */\r\n    localFile: File,\r\n    /** Path to the other file, if present. */\r\n    foreignPath: string | null,\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var localName = member.localName.text;\r\n    var foreignName = member.exportedName.text;\r\n\r\n    // check for duplicates\r\n    var element = localFile.lookupExport(foreignName);\r\n    if (element) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.exportedName.range, foreignName\r\n      );\r\n      return;\r\n    }\r\n    // local element, i.e. export { foo [as bar] }\r\n    if (foreignPath === null) {\r\n\r\n      // resolve right away if the local element already exists\r\n      if (element = localFile.lookupInSelf(localName)) {\r\n        localFile.ensureExport(foreignName, element);\r\n\r\n      // otherwise queue it\r\n      } else {\r\n        let queued: Map<string,QueuedExport>;\r\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\r\n        else queuedExports.set(localFile, queued = new Map());\r\n        queued.set(foreignName, new QueuedExport(\r\n          member.localName,\r\n          member.exportedName,\r\n          null, null\r\n        ));\r\n      }\r\n\r\n    // foreign element, i.e. export { foo } from \"./bar\"\r\n    } else {\r\n      let queued: Map<string,QueuedExport>;\r\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\r\n      else queuedExports.set(localFile, queued = new Map());\r\n      queued.set(foreignName, new QueuedExport(\r\n        member.localName,\r\n        member.exportedName,\r\n        foreignPath,\r\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n          : foreignPath + INDEX_SUFFIX\r\n      ));\r\n    }\r\n  }\r\n\r\n  private initializeExportDefault(\r\n    /** The statement to initialize. */\r\n    statement: ExportDefaultStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: Array<ClassPrototype>,\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): void {\r\n    var declaration = statement.declaration;\r\n    var element: DeclaredElement | null = null;\r\n    switch (declaration.kind) {\r\n      case NodeKind.ENUMDECLARATION: {\r\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTIONDECLARATION: {\r\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\r\n        break;\r\n      }\r\n      case NodeKind.CLASSDECLARATION: {\r\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\r\n        break;\r\n      }\r\n      case NodeKind.INTERFACEDECLARATION: {\r\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\r\n        break;\r\n      }\r\n      case NodeKind.NAMESPACEDECLARATION: {\r\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    if (element) {\r\n      let exports = parent.exports;\r\n      if (!exports) parent.exports = exports = new Map();\r\n      else if (exports.has(\"default\")) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          declaration.name.range, \"default\"\r\n        );\r\n        return;\r\n      }\r\n      exports.set(\"default\", element);\r\n    }\r\n  }\r\n\r\n  /** Initializes an `import` statement. */\r\n  private initializeImports(\r\n    /** The statement to initialize. */\r\n    statement: ImportStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `import`s. */\r\n    queuedImports: QueuedImport[],\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          parent,\r\n          statement.internalPath,\r\n          queuedImports,\r\n          queuedExports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\r\n      queuedImports.push(new QueuedImport(\r\n        parent,\r\n        statement.namespaceName,\r\n        null, // indicates import *\r\n        statement.internalPath,\r\n        statement.internalPath + INDEX_SUFFIX\r\n      ));\r\n    } else {\r\n      // import \"./foo\"\r\n    }\r\n  }\r\n\r\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\r\n  private initializeImport( // { foo [as bar] }\r\n    /** The declaration to initialize. */\r\n    declaration: ImportDeclaration,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** Path to the other file. */\r\n    foreignPath: string,\r\n    /** So far queued `import`s. */\r\n    queuedImports: QueuedImport[],\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n      : foreignPath + INDEX_SUFFIX;\r\n\r\n    // resolve right away if the element exists\r\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\r\n    if (element) {\r\n      parent.add(declaration.name.text, element, true);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    queuedImports.push(new QueuedImport(\r\n      parent,\r\n      declaration.name,\r\n      declaration.foreignName,\r\n      foreignPath,\r\n      foreignPathAlt\r\n    ));\r\n  }\r\n\r\n  /** Initializes a function. Does not handle methods. */\r\n  private initializeFunction(\r\n    /** The declaration to initialize. */\r\n    declaration: FunctionDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): FunctionPrototype | null {\r\n    var name = declaration.name.text;\r\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\r\n    if (declaration.is(CommonFlags.AMBIENT)) {\r\n      validDecorators |= DecoratorFlags.EXTERNAL;\r\n    } else {\r\n      validDecorators |= DecoratorFlags.INLINE;\r\n    }\r\n    if (!declaration.is(CommonFlags.INSTANCE)) {\r\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\r\n        validDecorators |= DecoratorFlags.GLOBAL;\r\n      }\r\n    }\r\n    var element = new FunctionPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, validDecorators)\r\n    );\r\n    if (!parent.add(name, element)) return null;\r\n    return element;\r\n  }\r\n\r\n  /** Initializes an interface. */\r\n  private initializeInterface(\r\n    /** The declaration to initialize. */\r\n    declaration: InterfaceDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): InterfacePrototype | null {\r\n    var name = declaration.name.text;\r\n    var element = new InterfacePrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return null;\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\r\n          }\r\n          break;\r\n        }\r\n        default: assert(false); // interface member expected\r\n      }\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Initializes a namespace. */\r\n  private initializeNamespace(\r\n    /** The declaration to initialize. */\r\n    declaration: NamespaceDeclaration,\r\n    /** Parent element, usually a file or another namespace. */\r\n    parent: Element,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: ClassPrototype[],\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): Namespace | null {\r\n    var name = declaration.name.text;\r\n    var original = new Namespace(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\r\n    );\r\n    if (!parent.add(name, original)) return null;\r\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>member, original);\r\n          break;\r\n        }\r\n        default: assert(false); // namespace member expected\r\n      }\r\n    }\r\n    if (original != element) copyMembers(original, element); // retain original parent\r\n    return element;\r\n  }\r\n\r\n  /** Initializes a `type` definition. */\r\n  private initializeTypeDefinition(\r\n    /** The declaration to initialize. */\r\n    declaration: TypeDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new TypeDefinition(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\r\n    );\r\n    parent.add(name, element); // reports\r\n  }\r\n\r\n  /** Initializes a variable statement. */\r\n  private initializeVariables(\r\n    /** The statement to initialize. */\r\n    statement: VariableStatement,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\r\n      if (declaration.is(CommonFlags.DECLARE)) {\r\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\r\n      }\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        acceptedFlags |= DecoratorFlags.INLINE;\r\n      }\r\n      let element = new Global(\r\n        name,\r\n        parent,\r\n        this.checkDecorators(declaration.decorators, acceptedFlags),\r\n        declaration\r\n      );\r\n      if (!parent.add(name, element)) continue; // reports\r\n    }\r\n  }\r\n\r\n  /** Determines the element type of a built-in array. */\r\n  // determineBuiltinArrayType(target: Class): Type | null {\r\n  //   switch (target.internalName) {\r\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\r\n  //     case BuiltinSymbols.Uint8ClampedArray:\r\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\r\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\r\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\r\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\r\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\r\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\r\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\r\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\r\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\r\n  //   }\r\n  //   var current: Class | null = target;\r\n  //   var arrayPrototype = this.arrayPrototype;\r\n  //   do {\r\n  //     if (current.prototype == arrayPrototype) { // Array<T>\r\n  //       let typeArguments = assert(current.typeArguments);\r\n  //       assert(typeArguments.length == 1);\r\n  //       return typeArguments[0];\r\n  //     }\r\n  //   } while (current = current.base);\r\n  //   return null;\r\n  // }\r\n}\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link PropertyPrototype}.  */\r\n  PROPERTY_PROTOTYPE,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE,\r\n  /** A {@link File}. */\r\n  FILE,\r\n  /** A {@link TypeDefinition}.  */\r\n  TYPEDEFINITION,\r\n}\r\n\r\n/** Indicates built-in decorators that are present. */\r\nexport enum DecoratorFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n  /** Is a program global. */\r\n  GLOBAL = 1 << 0,\r\n  /** Is a binary operator overload. */\r\n  OPERATOR_BINARY = 1 << 1,\r\n  /** Is a unary prefix operator overload. */\r\n  OPERATOR_PREFIX = 1 << 2,\r\n  /** Is a unary postfix operator overload. */\r\n  OPERATOR_POSTFIX = 1 << 3,\r\n  /** Is an unmanaged class. */\r\n  UNMANAGED = 1 << 4,\r\n  /** Is a sealed class. */\r\n  SEALED = 1 << 5,\r\n  /** Is always inlined. */\r\n  INLINE = 1 << 6,\r\n  /** Is using a different external name. */\r\n  EXTERNAL = 1 << 7,\r\n  /** Is a builtin. */\r\n  BUILTIN = 1 << 8,\r\n  /** Is compiled lazily. */\r\n  LAZY = 1 << 9,\r\n  /** Is considered unsafe code. */\r\n  UNSAFE = 1 << 10\r\n}\r\n\r\n/** Translates a decorator kind to the respective decorator flag. */\r\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\r\n  switch (kind) {\r\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\r\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\r\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\r\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\r\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\r\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\r\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\r\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\r\n    case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\r\n    case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\r\n    default: return DecoratorFlags.NONE;\r\n  }\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Parent element. */\r\n  parent: Element;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Decorator flags indicating annotated traits. */\r\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\r\n  /** Member elements. */\r\n  members: Map<string,DeclaredElement> | null = null;\r\n  /** Shadowing type in type space, if any. */\r\n  shadowType: TypeDefinition | null = null;\r\n\r\n  /** Constructs a new program element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    public kind: ElementKind,\r\n    /** Simple name. */\r\n    public name: string,\r\n    /** Internal name referring to this element. */\r\n    public internalName: string,\r\n    /** Containing {@link Program}. */\r\n    public program: Program,\r\n    /** Parent element. */\r\n    parent: Element | null\r\n  ) {\r\n    this.program = program;\r\n    this.name = name;\r\n    this.internalName = internalName;\r\n    if (parent) {\r\n      this.parent = parent;\r\n    } else {\r\n      assert(this.kind == ElementKind.FILE);\r\n      this.parent = this; // special case to keep this.parent non-nullable\r\n    }\r\n  }\r\n\r\n  /** Gets the enclosing file. */\r\n  get file(): File {\r\n    var current: Element = this;\r\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\r\n    while (true);\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n  /** Unsets the specific flag or flags. */\r\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\r\n  /** Tests if this element has a specific decorator flag or flags. */\r\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\r\n\r\n  /** Looks up the element with the specified name within this element. */\r\n  lookupInSelf(name: string): DeclaredElement | null {\r\n    var members = this.members;\r\n    if (members && members.has(name)) return members.get(name)!;\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the element with the specified name relative to this element, like in JS. */\r\n  abstract lookup(name: string): Element | null;\r\n\r\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\r\n  add(name: string, element: DeclaredElement): bool {\r\n    var originalDeclaration = element.declaration;\r\n    var members = this.members;\r\n    if (!members) this.members = members = new Map();\r\n    else if (members.has(name)) {\r\n      let actual = members.get(name)!;\r\n      if (actual.parent !== this) {\r\n        // override non-own element\r\n      } else {\r\n        let merged = tryMerge(actual, element);\r\n        if (merged) {\r\n          element = merged; // use merged element\r\n        } else {\r\n          this.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            element.identifierNode.range, element.identifierNode.text\r\n          );\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    members.set(name, element);\r\n    var program = this.program;\r\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\r\n      // prefer unbound prototypes in global lookup maps\r\n      program.elementsByName.set(element.internalName, element);\r\n      program.elementsByDeclaration.set(originalDeclaration, element);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** Returns a string representation of this element. */\r\n  toString(): string {\r\n    return ElementKind[this.kind] + \":\" + this.internalName;\r\n  }\r\n}\r\n\r\n/** Base class of elements with an associated declaration statement. */\r\nexport abstract class DeclaredElement extends Element {\r\n\r\n  /** Constructs a new declared program element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    kind: ElementKind,\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Internal name referring to this element. */\r\n    internalName: string,\r\n    /** Containing {@link Program}. */\r\n    program: Program,\r\n    /** Parent element. */\r\n    parent: Element | null,\r\n    /** Declaration reference. */\r\n    public declaration: DeclarationStatement\r\n  ) {\r\n    super(kind, name, internalName, program, parent);\r\n    // It is necessary to have access to identifiers of all members and exports\r\n    // for reporting purposes and this is the lowest common denominator. Comes\r\n    // at the expense of not having more specific type information in derived\r\n    // classes, though. Instead, derived classes implement getters for other\r\n    // important AST nodes directly through manual casting, allowing the resolver\r\n    // etc. to not worry about actual declarations.\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags; // inherit\r\n  }\r\n\r\n  /** Tests if this element is a library element. */\r\n  get isDeclaredInLibrary(): bool {\r\n    return this.declaration.range.source.isLibrary;\r\n  }\r\n\r\n  /** Gets the associated identifier node. */\r\n  get identifierNode(): IdentifierExpression {\r\n    return this.declaration.name;\r\n  }\r\n\r\n  /** Gets the assiciated decorator nodes. */\r\n  get decoratorNodes(): DecoratorNode[] | null {\r\n    return this.declaration.decorators;\r\n  }\r\n}\r\n\r\n/** Base class of elements that can be resolved to a concrete type. */\r\nexport abstract class TypedElement extends DeclaredElement {\r\n\r\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\r\n  type: Type = Type.void;\r\n\r\n  /** Sets the resolved type of this element. */\r\n  setType(type: Type): void {\r\n    assert(!this.is(CommonFlags.RESOLVED));\r\n    this.type = type;\r\n    this.set(CommonFlags.RESOLVED);\r\n  }\r\n}\r\n\r\n/** A file representing the implicit top-level namespace of a source. */\r\nexport class File extends Element {\r\n\r\n  /** File exports. */\r\n  exports: Map<string,DeclaredElement> | null = null;\r\n  /** File re-exports. */\r\n  exportsStar: File[] | null = null;\r\n  /** Top-level start function of this file. */\r\n  startFunction: Function;\r\n\r\n  /** Constructs a new file. */\r\n  constructor(\r\n    /** Program this file belongs to. */\r\n    program: Program,\r\n    /** Source of this file. */\r\n    public source: Source\r\n  ) {\r\n    super(\r\n      ElementKind.FILE,\r\n      source.normalizedPath,\r\n      source.internalPath,\r\n      program,\r\n      null // special case for files\r\n    );\r\n    this.source = source;\r\n    assert(!program.filesByName.has(this.internalName));\r\n    program.filesByName.set(this.internalName, this);\r\n    var startFunction = this.program.makeNativeFunction(\r\n      \"start:\" + this.internalName,\r\n      new Signature(null, Type.void),\r\n      this\r\n    );\r\n    startFunction.internalName = startFunction.name;\r\n    this.startFunction = startFunction;\r\n  }\r\n\r\n  /* @override */\r\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\r\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\r\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\r\n    }\r\n    if (!super.add(name, element)) return false;\r\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\r\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\r\n      this.ensureExport(\r\n        element.name,\r\n        element\r\n      );\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /* @override */\r\n  lookupInSelf(name: string): DeclaredElement | null {\r\n    var element = super.lookupInSelf(name);\r\n    if (element) return element;\r\n    var exportsStar = this.exportsStar;\r\n    if (exportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    var element = this.lookupInSelf(name);\r\n    if (element) return element;\r\n    return this.program.lookupGlobal(name);\r\n  }\r\n\r\n  /** Ensures that an element is an export of this file. */\r\n  ensureExport(name: string, element: DeclaredElement): void {\r\n    var exports = this.exports;\r\n    if (!exports) this.exports = exports = new Map();\r\n    exports.set(name, element);\r\n    if (this.source.isLibrary) this.program.ensureGlobal(name, element);\r\n  }\r\n\r\n  /** Ensures that another file is a re-export of this file. */\r\n  ensureExportStar(file: File): void {\r\n    var exportsStar = this.exportsStar;\r\n    if (!exportsStar) this.exportsStar = exportsStar = [];\r\n    else if (exportsStar.includes(file)) return;\r\n    exportsStar.push(file);\r\n  }\r\n\r\n  /** Looks up the export of the specified name. */\r\n  lookupExport(name: string): DeclaredElement | null {\r\n    var exports = this.exports;\r\n    if (exports && exports.has(name)) return exports.get(name)!;\r\n    var exportsStar = this.exportsStar;\r\n    if (exportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        let element = exportsStar[i].lookupExport(name);\r\n        if (element) return element;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Creates an imported namespace from this file. */\r\n  asImportedNamespace(name: string, parent: Element): Namespace {\r\n    var ns = new Namespace(\r\n      name,\r\n      parent,\r\n      this.program.makeNativeNamespaceDeclaration(name)\r\n    );\r\n    var exports = this.exports;\r\n    if (exports) {\r\n      for (let [memberName, member] of exports) {\r\n        ns.add(memberName, member);\r\n      }\r\n    }\r\n    return ns;\r\n  }\r\n}\r\n\r\n/** A type definition. */\r\nexport class TypeDefinition extends TypedElement {\r\n\r\n  /** Constructs a new type definition. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: TypeDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.TYPEDEFINITION,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<TypeDeclaration>this.declaration).typeParameters;\r\n  }\r\n\r\n  /** Gets the associated type node. */\r\n  get typeNode(): TypeNode {\r\n    return (<TypeDeclaration>this.declaration).type;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A namespace that differs from a file in being user-declared with a name. */\r\nexport class Namespace extends DeclaredElement {\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or another namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: NamespaceDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.NAMESPACE,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.lookupInSelf(name)\r\n        || this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends TypedElement {\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: EnumDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.ENUM,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.setType(Type.i32);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.lookupInSelf(name)\r\n        || this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** Indicates the kind of an inlined constant value. */\r\nexport const enum ConstantValueKind {\r\n  /** No constant value. */\r\n  NONE,\r\n  /** Constant integer value. */\r\n  INTEGER,\r\n  /** Constant float value. */\r\n  FLOAT\r\n}\r\n\r\n/** Base class of all variable-like program elements. */\r\nexport abstract class VariableLikeElement extends TypedElement {\r\n\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  /** Constructs a new variable-like element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    kind: ElementKind,\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or class. */\r\n    parent: Element,\r\n    /** Declaration reference. Creates a native declaration if omitted. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      kind,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.flags = declaration.flags;\r\n  }\r\n\r\n  /** Gets the associated type node.s */\r\n  get typeNode(): TypeNode | null {\r\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\r\n  }\r\n\r\n  /** Gets the associated initializer node. */\r\n  get initializerNode(): Expression | null {\r\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\r\n  }\r\n\r\n  /** Applies a constant integer value to this element. */\r\n  setConstantIntegerValue(value: I64, type: Type): void {\r\n    assert(type.is(TypeFlags.INTEGER));\r\n    this.type = type;\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\r\n  }\r\n\r\n  /** Applies a constant float value to this element. */\r\n  setConstantFloatValue(value: f64, type: Type): void {\r\n    assert(type.is(TypeFlags.FLOAT));\r\n    this.type = type;\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\r\n  }\r\n\r\n  /** @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends VariableLikeElement {\r\n\r\n  /** Constructs a new enum value. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent enum. */\r\n    parent: Enum,\r\n    /** Declaration reference. */\r\n    declaration: EnumValueDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.ENUMVALUE,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.setType(Type.i32);\r\n  }\r\n\r\n  /** Whether this enum value is immutable. */\r\n  isImmutable: bool = false;\r\n\r\n  /** Gets the associated value node. */\r\n  get valueNode(): Expression | null {\r\n    return (<EnumValueDeclaration>this.declaration).value;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  /** Constructs a new global variable. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or static class. */\r\n    parent: Element,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags,\r\n    /** Declaration reference. Creates a native declaration if omitted. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      ElementKind.GLOBAL,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n  /** Constructs a new function parameter. */\r\n  constructor(\r\n    /** Parameter name. */\r\n    public name: string,\r\n    /** Parameter type. */\r\n    public type: Type,\r\n    /** Parameter initializer, if present. */\r\n    public initializer: Expression | null = null\r\n  ) {}\r\n}\r\n\r\n/** A local variable. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  /** Constructs a new local variable. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\r\n    public index: i32,\r\n    /** Resolved type. */\r\n    type: Type,\r\n    /** Parent function. */\r\n    parent: Function,\r\n    /** Declaration reference. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      ElementKind.LOCAL,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.index = index;\r\n    assert(type != Type.void);\r\n    this.setType(type);\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends DeclaredElement {\r\n\r\n  /** Operator kind, if an overload. */\r\n  operatorKind: OperatorKind = OperatorKind.INVALID;\r\n  /** Already resolved instances. */\r\n  instances: Map<string,Function> | null = null;\r\n\r\n  /** Clones of this prototype that are bounds to specific classes. */\r\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    /** Simple name */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or class (if a method). */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: FunctionDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<FunctionDeclaration>this.declaration).typeParameters;\r\n  }\r\n\r\n  /** Gets the associated function type node. */\r\n  get functionTypeNode(): FunctionTypeNode {\r\n    return (<FunctionDeclaration>this.declaration).signature;\r\n  }\r\n\r\n  /** Gets the associated body node. */\r\n  get bodyNode(): Statement | null {\r\n    return (<FunctionDeclaration>this.declaration).body;\r\n  }\r\n\r\n  /** Gets the arrow function kind. */\r\n  get arrowKind(): ArrowKind {\r\n    return (<FunctionDeclaration>this.declaration).arrowKind;\r\n  }\r\n\r\n  /** Tests if this prototype is bound to a class. */\r\n  get isBound(): bool {\r\n    var parent = this.parent;\r\n    return parent.kind == ElementKind.CLASS\r\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\r\n  }\r\n\r\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\r\n  toBound(classInstance: Class): FunctionPrototype {\r\n    assert(this.is(CommonFlags.INSTANCE));\r\n    assert(!this.isBound);\r\n    var boundPrototypes = this.boundPrototypes;\r\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\r\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\r\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\r\n    var bound = new FunctionPrototype(\r\n      this.name,\r\n      classInstance, // !\r\n      <MethodDeclaration>declaration,\r\n      this.decoratorFlags\r\n    );\r\n    bound.flags = this.flags;\r\n    bound.operatorKind = this.operatorKind;\r\n    // NOTE: this.instances holds instances per bound class / unbound\r\n    boundPrototypes.set(classInstance, bound);\r\n    return bound;\r\n  }\r\n\r\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\r\n  getResolvedInstance(instanceKey: string): Function | null {\r\n    var instances = this.instances;\r\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\r\n    return null;\r\n  }\r\n\r\n  /** Sets the resolved instance for the specified instance key. */\r\n  setResolvedInstance(instanceKey: string, instance: Function): void {\r\n    var instances = this.instances;\r\n    if (!instances) this.instances = instances = new Map();\r\n    else assert(!instances.has(instanceKey));\r\n    instances.set(instanceKey, instance);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends TypedElement {\r\n\r\n  /** Function prototype. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** Map of locals by name. */\r\n  localsByName: Map<string,Local> = new Map();\r\n  /** Array of locals by index. */\r\n  localsByIndex: Local[] = [];\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Default control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] = [];\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n\r\n  /** Counting id of inline operations involving this function. */\r\n  nextInlineId: i32 = 0;\r\n  /** Counting id of anonymous inner functions. */\r\n  nextAnonymousId: i32 = 0;\r\n  /** Counting id of autorelease variables. */\r\n  nextAutoreleaseId: i32 = 0;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\r\n    nameInclTypeParameters: string,\r\n    /** Respective function prototype. */\r\n    prototype: FunctionPrototype,\r\n    /** Concrete signature. */\r\n    signature: Signature, // pre-resolved\r\n    /** Contextual type arguments inherited from its parent class, if any. */\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION,\r\n      nameInclTypeParameters,\r\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\r\n      prototype.program,\r\n      prototype.parent,\r\n      prototype.declaration\r\n    );\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.contextualTypeArguments = contextualTypeArguments;\r\n    this.type = Type.u32.asFunction(signature);\r\n    if (!prototype.is(CommonFlags.AMBIENT)) {\r\n      let localIndex = 0;\r\n      if (this.is(CommonFlags.INSTANCE)) {\r\n        let local = new Local(\r\n          CommonSymbols.this_,\r\n          localIndex++,\r\n          assert(signature.thisType),\r\n          this\r\n        );\r\n        this.localsByName.set(CommonSymbols.this_, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        let local = new Local(\r\n          parameterName,\r\n          localIndex++,\r\n          parameterType,\r\n          this\r\n        );\r\n        this.localsByName.set(parameterName, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var localName = name !== null\r\n      ? name\r\n      : \"var$\" + localIndex.toString();\r\n    var local = new Local(\r\n      localName,\r\n      localIndex,\r\n      type,\r\n      this,\r\n      declaration || this.program.makeNativeVariableDeclaration(localName)\r\n    );\r\n    if (name) {\r\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\r\n      this.localsByName.set(name, local);\r\n    }\r\n    this.localsByIndex[local.index] = local;\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    var locals = this.localsByName;\r\n    if (locals.has(name)) return locals.get(name);\r\n    return this.parent.lookup(name);\r\n  }\r\n\r\n  // used by flows to keep track of temporary locals\r\n  tempI32s: Local[] | null = null;\r\n  tempI64s: Local[] | null = null;\r\n  tempF32s: Local[] | null = null;\r\n  tempF64s: Local[] | null = null;\r\n  tempV128s: Local[] | null = null;\r\n\r\n  // used by flows to keep track of break labels\r\n  nextBreakId: i32 = 0;\r\n  breakStack: i32[] | null = null;\r\n  breakLabel: string | null = null;\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakLabel = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n        let debugLocation = debugLocations[i];\r\n        module.setDebugLocation(\r\n          ref,\r\n          debugLocation.debugInfoRef,\r\n          debugLocation.source.debugInfoIndex,\r\n          debugLocation.line,\r\n          debugLocation.column\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(\r\n    /** Concrete signature. */\r\n    signature: Signature,\r\n    /** Program reference. */\r\n    program: Program,\r\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION_TARGET,\r\n      __s = \"sig:\" + signature.toSignatureString(),\r\n      __s,\r\n      program,\r\n      program.nativeFile\r\n    );\r\n    this.signature = signature;\r\n    this.flags = CommonFlags.RESOLVED;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return null;\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends DeclaredElement {\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent class. */\r\n    parent: ClassPrototype,\r\n    /** Declaration reference. */\r\n    declaration: FieldDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.FIELD_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type node. */\r\n  get typeNode(): TypeNode | null {\r\n    return (<FieldDeclaration>this.declaration).type;\r\n  }\r\n\r\n  /** Gets the associated initializer node. */\r\n  get initializerNode(): Expression | null {\r\n    return (<FieldDeclaration>this.declaration).initializer;\r\n  }\r\n\r\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\r\n  get parameterIndex(): i32 {\r\n    return (<FieldDeclaration>this.declaration).parameterIndex;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(\r\n    /** Respective field prototype. */\r\n    prototype: FieldPrototype,\r\n    /** Parent class. */\r\n    parent: Class,\r\n    /** Concrete type. */\r\n    type: Type\r\n  ) {\r\n    super(\r\n      ElementKind.FIELD,\r\n      prototype.name,\r\n      parent,\r\n      <VariableLikeDeclarationStatement>prototype.declaration\r\n    );\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    assert(type != Type.void);\r\n    this.setType(type);\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class PropertyPrototype extends DeclaredElement {\r\n\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent class. */\r\n    parent: ClassPrototype,\r\n    /** Declaration of the getter or setter introducing the property. */\r\n    firstDeclaration: FunctionDeclaration\r\n  ) {\r\n    super(\r\n      ElementKind.PROPERTY_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      firstDeclaration\r\n    );\r\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved property. */\r\nexport class Property extends VariableLikeElement {\r\n\r\n  /** Prototype reference. */\r\n  prototype: PropertyPrototype;\r\n  /** Getter instance. */\r\n  getterInstance: Function | null = null;\r\n  /** Setter instance. */\r\n  setterInstance: Function | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    /** Respective property prototype. */\r\n    prototype: PropertyPrototype,\r\n    /** Parent element, usually a static class prototype or class instance. */\r\n    parent: Element\r\n  ) {\r\n    super(\r\n      ElementKind.PROPERTY,\r\n      prototype.name,\r\n      parent,\r\n      prototype.program.makeNativeVariableDeclaration(\r\n        prototype.name,\r\n        prototype.is(CommonFlags.INSTANCE)\r\n          ? CommonFlags.INSTANCE\r\n          : CommonFlags.NONE\r\n      )\r\n    );\r\n    this.prototype = prototype;\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends DeclaredElement {\r\n\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n  /** Operator overload prototypes. */\r\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\r\n  /** Already resolved instances. */\r\n  instances: Map<string,Class> | null = null;\r\n\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: ClassDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\r\n    _isInterface: bool = false // FIXME\r\n  ) {\r\n    super(\r\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<ClassDeclaration>this.declaration).typeParameters;\r\n  }\r\n  /** Gets the associated extends node. */\r\n  get extendsNode(): NamedTypeNode | null {\r\n    return (<ClassDeclaration>this.declaration).extendsType;\r\n  }\r\n  /** Gets the associated implements nodes. */\r\n  get implementsNodes(): NamedTypeNode[] | null {\r\n    return (<ClassDeclaration>this.declaration).implementsTypes;\r\n  }\r\n\r\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\r\n  get isBuiltinArray(): bool {\r\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\r\n    return arrayBufferViewInstance !== null\r\n        && this.extends(arrayBufferViewInstance.prototype);\r\n  }\r\n\r\n  /** Tests if this prototype extends the specified. */\r\n  extends(basePtototype: ClassPrototype | null): bool {\r\n    var current: ClassPrototype | null = this;\r\n    do if (current === basePtototype) return true;\r\n    while (current = current.basePrototype);\r\n    return false;\r\n  }\r\n\r\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\r\n  addInstance(name: string, element: DeclaredElement): bool {\r\n    var originalDeclaration = element.declaration;\r\n    var instanceMembers = this.instanceMembers;\r\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\r\n    else if (instanceMembers.has(name)) {\r\n      let merged = tryMerge(instanceMembers.get(name)!, element);\r\n      if (!merged) {\r\n        this.program.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          element.identifierNode.range, element.identifierNode.text\r\n        );\r\n        return false;\r\n      }\r\n      element = merged;\r\n    }\r\n    instanceMembers.set(name, element);\r\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\r\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\r\n    }\r\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\r\n    return true;\r\n  }\r\n\r\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\r\n  getResolvedInstance(instanceKey: string): Class | null {\r\n    var instances = this.instances;\r\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\r\n    return null;\r\n  }\r\n\r\n  /** Sets the resolved instance for the specified instance key. */\r\n  setResolvedInstance(instanceKey: string, instance: Class): void {\r\n    var instances = this.instances;\r\n    if (!instances) this.instances = instances = new Map();\r\n    else assert(!instances.has(instanceKey));\r\n    instances.set(instanceKey, instance);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\nconst enum AcyclicState {\r\n  UNKNOWN,\r\n  ACYCLIC,\r\n  NOT_ACYCLIC\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends TypedElement {\r\n\r\n  /** Class prototype. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n  /** Operator overloads. */\r\n  overloads: Map<OperatorKind,Function> | null = null;\r\n  /** Unique class id. */\r\n  private _id: u32 = 0;\r\n  /** Remembers acyclic state. */\r\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\r\n  /** Runtime type information flags. */\r\n  rttiFlags: u32 = 0;\r\n\r\n  /** Gets the unique runtime id of this class. */\r\n  get id(): u32 {\r\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\r\n  }\r\n\r\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\r\n  get isBuiltinArray(): bool {\r\n    return this.prototype.isBuiltinArray;\r\n  }\r\n\r\n  /** Tests if this class is array-like. */\r\n  get isArrayLike(): bool {\r\n    if (this.isBuiltinArray) return true;\r\n    var lengthField = this.lookupInSelf(\"length\");\r\n    return lengthField !== null && (\r\n      lengthField.kind == ElementKind.FIELD ||\r\n      (\r\n        lengthField.kind == ElementKind.PROPERTY &&\r\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\r\n      )\r\n    ) && (\r\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\r\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\r\n    );\r\n  }\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\r\n    nameInclTypeParameters: string,\r\n    /** The respective class prototype. */\r\n    prototype: ClassPrototype,\r\n    /** Concrete type arguments, if any. */\r\n    typeArguments: Type[] | null = null,\r\n    /** Base class, if derived. */\r\n    base: Class | null = null,\r\n    _isInterface: bool = false // FIXME\r\n  ) {\r\n    super(\r\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\r\n      nameInclTypeParameters,\r\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\r\n      prototype.program,\r\n      prototype.parent,\r\n      prototype.declaration\r\n    );\r\n    var program = this.program;\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.typeArguments = typeArguments;\r\n    this.setType(program.options.usizeType.asClass(this));\r\n    this.base = base;\r\n\r\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n      let id = program.nextClassId++;\r\n      this._id = id;\r\n      program.managedClasses.set(id, this);\r\n    }\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      let inheritedTypeArguments = base.contextualTypeArguments;\r\n      if (inheritedTypeArguments) {\r\n        let contextualTypeArguments = this.contextualTypeArguments;\r\n        for (let [baseName, baseType] of inheritedTypeArguments) {\r\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\r\n          contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply pre-checked instance-specific contextual type arguments\r\n    var typeParameters = prototype.typeParameterNodes;\r\n    if (typeArguments) {\r\n      let numTypeArguments = typeArguments.length;\r\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n      if (numTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let i = 0; i < numTypeArguments; ++i) {\r\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n        }\r\n      }\r\n    } else if (typeParameters && typeParameters.length) {\r\n      throw new Error(\"type argument count mismatch\");\r\n    }\r\n    registerConcreteElement(program, this);\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do if (current == target) return true;\r\n    while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  /** Looks up the operator overload of the specified kind. */\r\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\r\n    if (unchecked) {\r\n      switch (kind) {\r\n        case OperatorKind.INDEXED_GET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        case OperatorKind.INDEXED_SET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    var instance: Class | null = this;\r\n    do {\r\n      let overloads = instance.overloads;\r\n      if (overloads) {\r\n        let overload = overloads.get(kind);\r\n        if (overload) return overload;\r\n      }\r\n    } while (instance = instance.base);\r\n    return null;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n\r\n  /** Calculates the memory offset of the specified field. */\r\n  offsetof(fieldName: string): u32 {\r\n    var members = assert(this.members);\r\n    assert(members.has(fieldName));\r\n    var field = <Element>members.get(fieldName);\r\n    assert(field.kind == ElementKind.FIELD);\r\n    return (<Field>field).memoryOffset;\r\n  }\r\n\r\n  /** Writes a field value to a buffer and returns the number of bytes written. */\r\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\r\n    var field = this.lookupInSelf(name);\r\n    if (field && field.kind == ElementKind.FIELD) {\r\n      let offset = baseOffset + (<Field>field).memoryOffset;\r\n      switch ((<Field>field).type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8: {\r\n          writeI8(i32(value), buffer, offset);\r\n          return 1;\r\n        }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: {\r\n          writeI16(i32(value), buffer, offset);\r\n          return 2;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          writeI32(i32(value), buffer, offset);\r\n          return 4;\r\n        }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          assert(!this.program.options.isWasm64); // TODO\r\n          writeI32(i32(value), buffer, offset);\r\n          return 4;\r\n        }\r\n        case TypeKind.F32: {\r\n          writeF32(f32(value), buffer, offset);\r\n          return 4;\r\n        }\r\n        case TypeKind.F64: {\r\n          writeF64(f64(value), buffer, offset);\r\n          return 8;\r\n        }\r\n      }\r\n    }\r\n    assert(false);\r\n    return 0;\r\n  }\r\n\r\n  /** Tests if this class extends the specified prototype. */\r\n  extends(prototype: ClassPrototype): bool {\r\n    return this.prototype.extends(prototype);\r\n  }\r\n\r\n  /** Gets the concrete type arguments to the specified extendend prototype. */\r\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\r\n    var current: Class | null = this;\r\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\r\n    while (current = current.base);\r\n    return null;\r\n  }\r\n\r\n  /** Gets the value type of an array. Must be an array. */\r\n  getArrayValueType(): Type {\r\n    var current: Class = this;\r\n    var program = this.program;\r\n    var abvInstance = program.arrayBufferViewInstance;\r\n    while (current.base !== abvInstance) {\r\n      current = assert(current.base);\r\n    }\r\n    switch (current.prototype) {\r\n      case program.i8ArrayPrototype: return Type.i8;\r\n      case program.i16ArrayPrototype: return Type.i16;\r\n      case program.i32ArrayPrototype: return Type.i32;\r\n      case program.i64ArrayPrototype: return Type.i64;\r\n      case program.u8ArrayPrototype:\r\n      case program.u8ClampedArrayPrototype: return Type.u8;\r\n      case program.u16ArrayPrototype: return Type.u16;\r\n      case program.u32ArrayPrototype: return Type.u32;\r\n      case program.u64ArrayPrototype: return Type.u64;\r\n      case program.f32ArrayPrototype: return Type.f32;\r\n      case program.f64ArrayPrototype: return Type.f64;\r\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\r\n      default: assert(false);\r\n    }\r\n    return Type.void;\r\n  }\r\n\r\n  /** Tests if this class is inherently acyclic. */\r\n  get isAcyclic(): bool {\r\n    var acyclic = this._acyclic;\r\n    if (acyclic == AcyclicState.UNKNOWN) {\r\n      let hasCycle = this.cyclesTo(this);\r\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\r\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\r\n    }\r\n    return acyclic == AcyclicState.ACYCLIC;\r\n  }\r\n\r\n  /** Tests if this class potentially forms a reference cycle to another one. */\r\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\r\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\r\n    //\r\n    // - scalars\r\n    // - references to classes that are both acyclic and final (here: Java); and\r\n    // - arrays (in our case: also sets, maps) of either of the above\r\n    //\r\n    // Our implementation, however, treats all objects that do not reference themselves directly\r\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\r\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\r\n\r\n    if (except.has(this)) return false;\r\n    except.add(this); // don't recurse indefinitely\r\n\r\n    // Find out if any field references 'other' directly or indirectly\r\n    var current: Class | null;\r\n    var members = this.members;\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        if (\r\n          member.kind == ElementKind.FIELD &&\r\n          (current = (<Field>member).type.classReference) !== null &&\r\n          (\r\n            current === other ||\r\n            current.cyclesTo(other, except)\r\n          )\r\n        ) return true;\r\n      }\r\n    }\r\n\r\n    // Do the same for non-field data\r\n    var basePrototype: ClassPrototype | null;\r\n\r\n    // Array<T->other?>\r\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\r\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\r\n      assert(typeArguments.length == 1);\r\n      if (\r\n        (current = typeArguments[0].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n\r\n    // Set<K->other?>\r\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\r\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\r\n      assert(typeArguments.length == 1);\r\n      if (\r\n        (current = typeArguments[0].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n\r\n    // Map<K->other?,V->other?>\r\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\r\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\r\n      assert(typeArguments.length == 2);\r\n      if (\r\n        (current = typeArguments[0].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n      if (\r\n        (current = typeArguments[1].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype { // FIXME\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    name: string,\r\n    parent: Element,\r\n    declaration: InterfaceDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      decoratorFlags,\r\n      true\r\n    );\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class { // FIXME\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    nameInclTypeParameters: string,\r\n    prototype: InterfacePrototype,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(\r\n      nameInclTypeParameters,\r\n      prototype,\r\n      typeArguments,\r\n      base,\r\n      true\r\n    );\r\n  }\r\n}\r\n\r\n/** Registers a concrete element with a program. */\r\nfunction registerConcreteElement(program: Program, element: Element): void {\r\n  assert(!program.instancesByName.has(element.internalName));\r\n  program.instancesByName.set(element.internalName, element);\r\n}\r\n\r\n/** Attempts to merge two elements. Returns the merged element on success. */\r\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\r\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\r\n  // suggesting to just merge what seems to be possible for now and revisit later.\r\n  assert(older.program === newer.program);\r\n  assert(!newer.members);\r\n  var merged: DeclaredElement | null = null;\r\n  switch (older.kind) {\r\n    case ElementKind.FUNCTION_PROTOTYPE: {\r\n      switch (newer.kind) {\r\n        case ElementKind.NAMESPACE: {\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n          break;\r\n        }\r\n        case ElementKind.TYPEDEFINITION: {\r\n          if (!older.shadowType) {\r\n            older.shadowType = <TypeDefinition>newer;\r\n            copyMembers(newer, older);\r\n            merged = <DeclaredElement>older;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.CLASS_PROTOTYPE:\r\n    case ElementKind.ENUM: {\r\n      if (newer.kind == ElementKind.NAMESPACE) {\r\n        copyMembers(newer, older);\r\n        merged = <DeclaredElement>older;\r\n        break;\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.NAMESPACE: {\r\n      switch (newer.kind) {\r\n        case ElementKind.ENUM:\r\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\r\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\r\n          copyMembers(older, newer);\r\n          merged = <DeclaredElement>newer;\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n          break;\r\n        }\r\n        case ElementKind.TYPEDEFINITION: {\r\n          if (!older.shadowType) {\r\n            older.shadowType = <TypeDefinition>newer;\r\n            copyMembers(newer, older);\r\n            merged = <DeclaredElement>older;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.GLOBAL: {\r\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\r\n        if (!older.shadowType) {\r\n          older.shadowType = <TypeDefinition>newer;\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.TYPEDEFINITION: {\r\n      switch (newer.kind) {\r\n        case ElementKind.GLOBAL:\r\n        case ElementKind.FUNCTION_PROTOTYPE:\r\n        case ElementKind.NAMESPACE: {\r\n          if (!newer.shadowType) {\r\n            newer.shadowType = <TypeDefinition>older;\r\n            copyMembers(older, newer);\r\n            merged = <DeclaredElement>newer;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  if (merged) {\r\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\r\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\r\n    if (olderIsExport != newerIsExport) {\r\n      older.program.error(\r\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n        merged.identifierNode.range, merged.identifierNode.text\r\n      );\r\n    }\r\n  }\r\n  return merged;\r\n}\r\n\r\n/** Copies the members of `src` to `dest`. */\r\nfunction copyMembers(src: Element, dest: Element): void {\r\n  var srcMembers = src.members;\r\n  if (srcMembers) {\r\n    let destMembers = dest.members;\r\n    if (!destMembers) dest.members = destMembers = new Map();\r\n    for (let [memberName, member] of srcMembers) {\r\n      destMembers.set(memberName, member);\r\n    }\r\n  }\r\n}\r\n\r\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\r\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\r\n  switch (parent.kind) {\r\n    case ElementKind.FILE: {\r\n      if (asGlobal) return name;\r\n      return parent.internalName + PATH_DELIMITER + name;\r\n    }\r\n    case ElementKind.FUNCTION: {\r\n      if (asGlobal) return name;\r\n      assert(!isInstance);\r\n      return parent.internalName + INNER_DELIMITER + name;\r\n    }\r\n    default: {\r\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\r\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport { Target } from \"./common\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type RelooperRef = usize;\r\nexport type RelooperBlockRef = usize;\r\nexport type Index = u32;\r\n\r\nexport enum NativeType {\r\n  None = _BinaryenTypeNone(),\r\n  I32  = _BinaryenTypeInt32(),\r\n  I64  = _BinaryenTypeInt64(),\r\n  F32  = _BinaryenTypeFloat32(),\r\n  F64  = _BinaryenTypeFloat64(),\r\n  V128 = _BinaryenTypeVec128(),\r\n  Unreachable = _BinaryenTypeUnreachable(),\r\n  Auto = _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum FeatureFlags {\r\n  Atomics = _BinaryenFeatureAtomics(),\r\n  MutableGloabls = _BinaryenFeatureMutableGlobals(),\r\n  NontrappingFPToInt = _BinaryenFeatureNontrappingFPToInt(),\r\n  SIMD128 = _BinaryenFeatureSIMD128(),\r\n  BulkMemory = _BinaryenFeatureBulkMemory(),\r\n  SignExt = _BinaryenFeatureSignExt(),\r\n  ExceptionHandling = _BinaryenFeatureExceptionHandling()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  LocalGet = _BinaryenLocalGetId(),\r\n  LocalSet = _BinaryenLocalSetId(),\r\n  GlobalGet = _BinaryenGlobalGetId(),\r\n  GlobalSet = _BinaryenGlobalSetId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicNotify = _BinaryenAtomicNotifyId(),\r\n  SIMDExtract = _BinaryenSIMDExtractId(),\r\n  SIMDReplace = _BinaryenSIMDReplaceId(),\r\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\r\n  SIMDBitselect = _BinaryenSIMDBitselectId(),\r\n  SIMDShift = _BinaryenSIMDShiftId(),\r\n  MemoryInit = _BinaryenMemoryInitId(),\r\n  DataDrop = _BinaryenDataDropId(),\r\n  MemoryCopy = _BinaryenMemoryCopyId(),\r\n  MemoryFill = _BinaryenMemoryFillId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\r\n\r\n  // see: https://github.com/WebAssembly/sign-extension-ops\r\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\r\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\r\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\r\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\r\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n\r\n  // see: https://github.com/WebAssembly/simd\r\n  SplatVecI8x16 = _BinaryenSplatVecI8x16(),\r\n  SplatVecI16x8 = _BinaryenSplatVecI16x8(),\r\n  SplatVecI32x4 = _BinaryenSplatVecI32x4(),\r\n  SplatVecI64x2 = _BinaryenSplatVecI64x2(),\r\n  SplatVecF32x4 = _BinaryenSplatVecF32x4(),\r\n  SplatVecF64x2 = _BinaryenSplatVecF64x2(),\r\n  NotVec128 = _BinaryenNotVec128(),\r\n  NegVecI8x16 = _BinaryenNegVecI8x16(),\r\n  AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\r\n  AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\r\n  NegVecI16x8 = _BinaryenNegVecI16x8(),\r\n  AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\r\n  AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\r\n  NegVecI32x4 = _BinaryenNegVecI32x4(),\r\n  AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\r\n  AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\r\n  NegVecI64x2 = _BinaryenNegVecI64x2(),\r\n  AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\r\n  AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\r\n  AbsVecF32x4 = _BinaryenAbsVecF32x4(),\r\n  NegVecF32x4 = _BinaryenNegVecF32x4(),\r\n  SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\r\n  AbsVecF64x2 = _BinaryenAbsVecF64x2(),\r\n  NegVecF64x2 = _BinaryenNegVecF64x2(),\r\n  SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\r\n  TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\r\n  TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\r\n  TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\r\n  TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\r\n  ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\r\n  ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\r\n  ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\r\n  ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2()\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64(),\r\n\r\n  // see: https://github.com/WebAssembly/simd\r\n  EqVecI8x16 = _BinaryenEqVecI8x16(),\r\n  NeVecI8x16 = _BinaryenNeVecI8x16(),\r\n  LtSVecI8x16 = _BinaryenLtSVecI8x16(),\r\n  LtUVecI8x16 = _BinaryenLtUVecI8x16(),\r\n  LeSVecI8x16 = _BinaryenLeSVecI8x16(),\r\n  LeUVecI8x16 = _BinaryenLeUVecI8x16(),\r\n  GtSVecI8x16 = _BinaryenGtSVecI8x16(),\r\n  GtUVecI8x16 = _BinaryenGtUVecI8x16(),\r\n  GeSVecI8x16 = _BinaryenGeSVecI8x16(),\r\n  GeUVecI8x16 = _BinaryenGeUVecI8x16(),\r\n  EqVecI16x8 = _BinaryenEqVecI16x8(),\r\n  NeVecI16x8 = _BinaryenNeVecI16x8(),\r\n  LtSVecI16x8 = _BinaryenLtSVecI16x8(),\r\n  LtUVecI16x8 = _BinaryenLtUVecI16x8(),\r\n  LeSVecI16x8 = _BinaryenLeSVecI16x8(),\r\n  LeUVecI16x8 = _BinaryenLeUVecI16x8(),\r\n  GtSVecI16x8 = _BinaryenGtSVecI16x8(),\r\n  GtUVecI16x8 = _BinaryenGtUVecI16x8(),\r\n  GeSVecI16x8 = _BinaryenGeSVecI16x8(),\r\n  GeUVecI16x8 = _BinaryenGeUVecI16x8(),\r\n  EqVecI32x4 = _BinaryenEqVecI32x4(),\r\n  NeVecI32x4 = _BinaryenNeVecI32x4(),\r\n  LtSVecI32x4 = _BinaryenLtSVecI32x4(),\r\n  LtUVecI32x4 = _BinaryenLtUVecI32x4(),\r\n  LeSVecI32x4 = _BinaryenLeSVecI32x4(),\r\n  LeUVecI32x4 = _BinaryenLeUVecI32x4(),\r\n  GtSVecI32x4 = _BinaryenGtSVecI32x4(),\r\n  GtUVecI32x4 = _BinaryenGtUVecI32x4(),\r\n  GeSVecI32x4 = _BinaryenGeSVecI32x4(),\r\n  GeUVecI32x4 = _BinaryenGeUVecI32x4(),\r\n  EqVecF32x4 = _BinaryenEqVecF32x4(),\r\n  NeVecF32x4 = _BinaryenNeVecF32x4(),\r\n  LtVecF32x4 = _BinaryenLtVecF32x4(),\r\n  LeVecF32x4 = _BinaryenLeVecF32x4(),\r\n  GtVecF32x4 = _BinaryenGtVecF32x4(),\r\n  GeVecF32x4 = _BinaryenGeVecF32x4(),\r\n  EqVecF64x2 = _BinaryenEqVecF64x2(),\r\n  NeVecF64x2 = _BinaryenNeVecF64x2(),\r\n  LtVecF64x2 = _BinaryenLtVecF64x2(),\r\n  LeVecF64x2 = _BinaryenLeVecF64x2(),\r\n  GtVecF64x2 = _BinaryenGtVecF64x2(),\r\n  GeVecF64x2 = _BinaryenGeVecF64x2(),\r\n  AndVec128 = _BinaryenAndVec128(),\r\n  OrVec128 = _BinaryenOrVec128(),\r\n  XorVec128 = _BinaryenXorVec128(),\r\n  AddVecI8x16 = _BinaryenAddVecI8x16(),\r\n  AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\r\n  AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\r\n  SubVecI8x16 = _BinaryenSubVecI8x16(),\r\n  SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\r\n  SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\r\n  MulVecI8x16 = _BinaryenMulVecI8x16(),\r\n  AddVecI16x8 = _BinaryenAddVecI16x8(),\r\n  AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\r\n  AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\r\n  SubVecI16x8 = _BinaryenSubVecI16x8(),\r\n  SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\r\n  SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\r\n  MulVecI16x8 = _BinaryenMulVecI16x8(),\r\n  AddVecI32x4 = _BinaryenAddVecI32x4(),\r\n  SubVecI32x4 = _BinaryenSubVecI32x4(),\r\n  MulVecI32x4 = _BinaryenMulVecI32x4(),\r\n  AddVecI64x2 = _BinaryenAddVecI64x2(),\r\n  SubVecI64x2 = _BinaryenSubVecI64x2(),\r\n  AddVecF32x4 = _BinaryenAddVecF32x4(),\r\n  SubVecF32x4 = _BinaryenSubVecF32x4(),\r\n  MulVecF32x4 = _BinaryenMulVecF32x4(),\r\n  DivVecF32x4 = _BinaryenDivVecF32x4(),\r\n  MinVecF32x4 = _BinaryenMinVecF32x4(),\r\n  MaxVecF32x4 = _BinaryenMaxVecF32x4(),\r\n  AddVecF64x2 = _BinaryenAddVecF64x2(),\r\n  SubVecF64x2 = _BinaryenSubVecF64x2(),\r\n  MulVecF64x2 = _BinaryenMulVecF64x2(),\r\n  DivVecF64x2 = _BinaryenDivVecF64x2(),\r\n  MinVecF64x2 = _BinaryenMinVecF64x2(),\r\n  MaxVecF64x2 = _BinaryenMaxVecF64x2()\r\n}\r\n\r\nexport enum HostOp {\r\n  MemorySize = _BinaryenMemorySize(),\r\n  MemoryGrow = _BinaryenMemoryGrow(),\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport enum SIMDExtractOp {\r\n  ExtractLaneSVecI8x16 = _BinaryenExtractLaneSVecI8x16(),\r\n  ExtractLaneUVecI8x16 = _BinaryenExtractLaneUVecI8x16(),\r\n  ExtractLaneSVecI16x8 = _BinaryenExtractLaneSVecI16x8(),\r\n  ExtractLaneUVecI16x8 = _BinaryenExtractLaneUVecI16x8(),\r\n  ExtractLaneVecI32x4 = _BinaryenExtractLaneVecI32x4(),\r\n  ExtractLaneVecI64x2 = _BinaryenExtractLaneVecI64x2(),\r\n  ExtractLaneVecF32x4 = _BinaryenExtractLaneVecF32x4(),\r\n  ExtractLaneVecF64x2 = _BinaryenExtractLaneVecF64x2(),\r\n}\r\n\r\nexport enum SIMDReplaceOp {\r\n  ReplaceLaneVecI8x16 = _BinaryenReplaceLaneVecI8x16(),\r\n  ReplaceLaneVecI16x8 = _BinaryenReplaceLaneVecI16x8(),\r\n  ReplaceLaneVecI32x4 = _BinaryenReplaceLaneVecI32x4(),\r\n  ReplaceLaneVecI64x2 = _BinaryenReplaceLaneVecI64x2(),\r\n  ReplaceLaneVecF32x4 = _BinaryenReplaceLaneVecF32x4(),\r\n  ReplaceLaneVecF64x2 = _BinaryenReplaceLaneVecF64x2()\r\n}\r\n\r\nexport enum SIMDShiftOp {\r\n  ShlVecI8x16 = _BinaryenShlVecI8x16(),\r\n  ShrSVecI8x16 = _BinaryenShrSVecI8x16(),\r\n  ShrUVecI8x16 = _BinaryenShrUVecI8x16(),\r\n  ShlVecI16x8 = _BinaryenShlVecI16x8(),\r\n  ShrSVecI16x8 = _BinaryenShrSVecI16x8(),\r\n  ShrUVecI16x8 = _BinaryenShrUVecI16x8(),\r\n  ShlVecI32x4 = _BinaryenShlVecI32x4(),\r\n  ShrSVecI32x4 = _BinaryenShrSVecI32x4(),\r\n  ShrUVecI32x4 = _BinaryenShrUVecI32x4(),\r\n  ShlVecI64x2 = _BinaryenShlVecI64x2(),\r\n  ShrSVecI64x2 = _BinaryenShrSVecI64x2(),\r\n  ShrUVecI64x2 = _BinaryenShrUVecI64x2()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n\r\n  private lit: usize;\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\r\n      return module;\r\n    } finally {\r\n      memory.free(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunctionType(name: string): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveFunctionType(this.ref, cStr);\r\n  }\r\n\r\n  // constants\r\n\r\n  i32(value: i32): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  f32(value: f32): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  f64(value: f64): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  v128(bytes: Uint8Array): ExpressionRef {\r\n    assert(bytes.length == 16);\r\n    var out = this.lit;\r\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\r\n    _BinaryenLiteralVec128(out, out);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  unary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  binary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  host(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  local_get(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenLocalGet(this.ref, index, type);\r\n  }\r\n\r\n  local_tee(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenLocalTee(this.ref, index, value);\r\n  }\r\n\r\n  global_get(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenGlobalGet(this.ref, cStr, type);\r\n  }\r\n\r\n  load(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0,\r\n    align: Index = bytes // naturally aligned by default\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\r\n  }\r\n\r\n  store(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0,\r\n    align: Index = bytes // naturally aligned by default\r\n  ): ExpressionRef {\r\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\r\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\r\n  }\r\n\r\n  atomic_load(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  atomic_store(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  atomic_rmw(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  atomic_cmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  atomic_wait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  atomic_notify(\r\n    ptr: ExpressionRef,\r\n    notifyCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicNotify(this.ref, ptr, notifyCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  local_set(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenLocalSet(this.ref, index, value);\r\n  }\r\n\r\n  global_set(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenGlobalSet(this.ref, cStr, value);\r\n  }\r\n\r\n  block(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    var cArr = allocPtrArray(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  br(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    return _BinaryenBreak(this.ref, cStr, condition, value);\r\n  }\r\n\r\n  drop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  loop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    return _BinaryenLoop(this.ref, cStr, body);\r\n  }\r\n\r\n  if(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  nop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  return(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  select(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  switch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = this.allocStringCached(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = this.allocStringCached(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  call(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  call_indirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(typeName);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  unreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // bulk memory\r\n\r\n  memory_copy(\r\n    dest: ExpressionRef,\r\n    source: ExpressionRef,\r\n    size: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\r\n  }\r\n\r\n  memory_fill(\r\n    dest: ExpressionRef,\r\n    value: ExpressionRef,\r\n    size: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\r\n  }\r\n\r\n  // simd\r\n\r\n  simd_extract(\r\n    op: SIMDExtractOp,\r\n    vec: ExpressionRef,\r\n    idx: u8\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\r\n  }\r\n\r\n  simd_replace(\r\n    op: SIMDReplaceOp,\r\n    vec: ExpressionRef,\r\n    idx: u8,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\r\n  }\r\n\r\n  simd_shuffle(\r\n    vec1: ExpressionRef,\r\n    vec2: ExpressionRef,\r\n    mask: Uint8Array\r\n  ): ExpressionRef {\r\n    assert(mask.length == 16);\r\n    var cArr = allocU8Array(mask);\r\n    try {\r\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  simd_bitselect(\r\n    vec1: ExpressionRef,\r\n    vec2: ExpressionRef,\r\n    cond: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDBitselect(this.ref, vec1, vec2, cond);\r\n  }\r\n\r\n  simd_shift(\r\n    op: SIMDShiftOp,\r\n    vec: ExpressionRef,\r\n    shift: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n  }\r\n\r\n  removeGlobal(\r\n    name: string\r\n  ): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveGlobal(this.ref, cStr);\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveFunction(this.ref, cStr);\r\n  }\r\n\r\n  private hasTemporaryFunction: bool = false;\r\n\r\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\r\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\r\n    var tempName = this.allocStringCached(\"\");\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\r\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeTemporaryFunction(): void {\r\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\r\n    var tempName = this.allocStringCached(\"\");\r\n    _BinaryenRemoveFunction(this.ref, tempName);\r\n    _BinaryenRemoveFunctionType(this.ref, tempName);\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = this.allocStringCached(externalName);\r\n    _BinaryenRemoveExport(this.ref, cStr);\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    shared: bool = false,\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n  }\r\n\r\n  /** Unlimited memory constant. */\r\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null,\r\n    shared: bool = false\r\n  ): void {\r\n    var cStr = this.allocStringCached(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var psvs = new Array<i8>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      psvs[i] = 0; // no passive segments currently\r\n      offs[i] = target == Target.WASM64\r\n        ? this.i64(i64_low(offset), i64_high(offset))\r\n        : this.i32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocU8Array(psvs);\r\n    var cArr3 = allocI32Array(offs);\r\n    var cArr4 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\r\n    } finally {\r\n      memory.free(cArr4);\r\n      memory.free(cArr3);\r\n      memory.free(cArr2);\r\n      memory.free(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(\r\n    initial: Index,\r\n    maximum: Index,\r\n    funcs: string[]\r\n  ): void {\r\n    var numNames = funcs.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = this.allocStringCached(funcs[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  getOptimizeLevel(): i32 {\r\n    return _BinaryenGetOptimizeLevel();\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  getShrinkLevel(): i32 {\r\n    return _BinaryenGetShrinkLevel();\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  getFeatures(): BinaryenFeatureFlags {\r\n    return _BinaryenModuleGetFeatures(this.ref);\r\n  }\r\n\r\n  setFeatures(featureFlags: BinaryenFeatureFlags): void {\r\n    _BinaryenModuleSetFeatures(this.ref, featureFlags);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      memory.free(cArr);\r\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\r\n    }\r\n  }\r\n\r\n  private cachedPrecomputeNames: usize = 0;\r\n\r\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\r\n    // remember the previous optimize levels and set to max instead, to be sure\r\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\r\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\r\n    var previousDebugInfo = _BinaryenGetDebugInfo();\r\n    _BinaryenSetOptimizeLevel(4);\r\n    _BinaryenSetShrinkLevel(0);\r\n    _BinaryenSetDebugInfo(false);\r\n\r\n    // wrap the expression in a temp. function and run the precompute pass on it\r\n    var type = _BinaryenExpressionGetType(expr);\r\n    var func = this.addTemporaryFunction(type, null, expr);\r\n    var names = this.cachedPrecomputeNames;\r\n    if (!names) {\r\n      this.cachedPrecomputeNames = names = allocI32Array([\r\n        this.allocStringCached(\"vacuum\"),\r\n        this.allocStringCached(\"precompute\")\r\n      ]);\r\n    }\r\n    _BinaryenFunctionRunPasses(func, this.ref, names, 2);\r\n    expr = _BinaryenFunctionGetBody(func);\r\n    if (_BinaryenExpressionGetId(expr) == ExpressionId.Return) {\r\n      expr = _BinaryenReturnGetValue(expr);\r\n    }\r\n    this.removeTemporaryFunction();\r\n\r\n    // reset optimize levels to previous\r\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\r\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\r\n    _BinaryenSetDebugInfo(previousDebugInfo);\r\n    return expr;\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.lit; // safe to reuse as long as..\r\n    assert(_BinaryenSizeofLiteral() >= 12);\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) memory.free(cStr);\r\n      if (binaryPtr) memory.free(binaryPtr);\r\n      if (sourceMapPtr) memory.free(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  private cachedStrings: Map<string,usize> = new Map();\r\n\r\n  private allocStringCached(str: string | null): usize {\r\n    if (str == null) return 0;\r\n    var cachedStrings = this.cachedStrings;\r\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\r\n    var ptr = allocString(str);\r\n    cachedStrings.set(str, ptr);\r\n    return ptr;\r\n  }\r\n\r\n  dispose(): void {\r\n    assert(this.ref);\r\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\r\n    this.cachedStrings = new Map();\r\n    memory.free(this.lit);\r\n    memory.free(this.cachedPrecomputeNames);\r\n    this.cachedPrecomputeNames = 0;\r\n    _BinaryenModuleDispose(this.ref);\r\n    this.ref = 0;\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(\r\n    expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n    switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.i32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.i64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.f32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.f64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          case NativeType.V128: {\r\n            // TODO\r\n            return 0;\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        return _BinaryenLocalGet(this.ref,\r\n          _BinaryenLocalGetGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GlobalGet: {\r\n        let globalName = _BinaryenGlobalGetGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGlobalGet(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return (\r\n          _BinaryenLoadIsAtomic(expr)\r\n            ? _BinaryenAtomicLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n            : _BinaryenLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenLoadGetAlign(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n        );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\n// expressions\r\n\r\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\r\n  return _BinaryenExpressionGetId(expr);\r\n}\r\n\r\nexport function getExpressionType(expr: ExpressionRef): NativeType {\r\n  return _BinaryenExpressionGetType(expr);\r\n}\r\n\r\nexport function getConstValueI32(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI32(expr);\r\n}\r\n\r\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64Low(expr);\r\n}\r\n\r\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64High(expr);\r\n}\r\n\r\nexport function getConstValueF32(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF32(expr);\r\n}\r\n\r\nexport function getConstValueF64(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF64(expr);\r\n}\r\n\r\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenLocalGetGetIndex(expr);\r\n}\r\n\r\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenLocalSetGetIndex(expr);\r\n}\r\n\r\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLocalSetGetValue(expr);\r\n}\r\n\r\nexport function isLocalTee(expr: ExpressionRef): bool {\r\n  return _BinaryenLocalSetIsTee(expr);\r\n}\r\n\r\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenGlobalGetGetName(expr));\r\n}\r\n\r\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\r\n  return _BinaryenBinaryGetOp(expr);\r\n}\r\n\r\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetLeft(expr);\r\n}\r\n\r\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetRight(expr);\r\n}\r\n\r\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\r\n  return _BinaryenUnaryGetOp(expr);\r\n}\r\n\r\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenUnaryGetValue(expr);\r\n}\r\n\r\nexport function getLoadBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetBytes(expr);\r\n}\r\n\r\nexport function getLoadOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetOffset(expr);\r\n}\r\n\r\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoadGetPtr(expr);\r\n}\r\n\r\nexport function isLoadSigned(expr: ExpressionRef): bool {\r\n  return _BinaryenLoadIsSigned(expr);\r\n}\r\n\r\nexport function getStoreBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetBytes(expr);\r\n}\r\n\r\nexport function getStoreOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetOffset(expr);\r\n}\r\n\r\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetPtr(expr);\r\n}\r\n\r\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetValue(expr);\r\n}\r\n\r\nexport function getBlockName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBlockGetName(expr));\r\n}\r\n\r\nexport function getBlockChildCount(expr: ExpressionRef): Index {\r\n  return _BinaryenBlockGetNumChildren(expr);\r\n}\r\n\r\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenBlockGetChild(expr, index);\r\n}\r\n\r\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetCondition(expr);\r\n}\r\n\r\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfTrue(expr);\r\n}\r\n\r\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfFalse(expr);\r\n}\r\n\r\nexport function getLoopName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenLoopGetName(expr));\r\n}\r\n\r\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoopGetBody(expr);\r\n}\r\n\r\nexport function getBreakName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBreakGetName(expr));\r\n}\r\n\r\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBreakGetCondition(expr);\r\n}\r\n\r\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfTrue(expr);\r\n}\r\n\r\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfFalse(expr);\r\n}\r\n\r\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetCondition(expr);\r\n}\r\n\r\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenDropGetValue(expr);\r\n}\r\n\r\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenReturnGetValue(expr);\r\n}\r\n\r\nexport function getCallTarget(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenCallGetTarget(expr));\r\n}\r\n\r\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\r\n  return _BinaryenCallGetNumOperands(expr);\r\n}\r\n\r\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenCallGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenHostGetOp(expr);\r\n}\r\n\r\nexport function getHostOperandCount(expr: ExpressionRef): Index {\r\n  return _BinaryenHostGetNumOperands(expr);\r\n}\r\n\r\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenHostGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenHostGetNameOperand(expr));\r\n}\r\n\r\n// functions\r\n\r\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\r\n  return _BinaryenFunctionGetBody(func);\r\n}\r\n\r\nexport function getFunctionName(func: FunctionRef): string | null {\r\n  return readString(_BinaryenFunctionGetName(func));\r\n}\r\n\r\nexport function getFunctionParamCount(func: FunctionRef): Index {\r\n  return _BinaryenFunctionGetNumParams(func);\r\n}\r\n\r\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\r\n  return _BinaryenFunctionGetParam(func, index);\r\n}\r\n\r\nexport function getFunctionResultType(func: FunctionRef): NativeType {\r\n  return _BinaryenFunctionGetResult(func);\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate(module.ref);\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    condition: ExpressionRef = 0,\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    indexes: i32[],\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\r\n  }\r\n}\r\n\r\n// export function hasSideEffects(expr: ExpressionRef): bool {\r\n//   // TODO: there's more\r\n//   switch (_BinaryenExpressionGetId(expr)) {\r\n//     case ExpressionId.LocalGet:\r\n//     case ExpressionId.GlobalGet:\r\n//     case ExpressionId.Const:\r\n//     case ExpressionId.Nop: {\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.Block: {\r\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\r\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\r\n//       }\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.If: {\r\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\r\n//     }\r\n//     case ExpressionId.Unary: {\r\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Binary: {\r\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\r\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\r\n//     }\r\n//     case ExpressionId.Drop: {\r\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Select: {\r\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\r\n//     }\r\n//   }\r\n//   return true;\r\n// }\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = memory.allocate(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = memory.allocate(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocPtrArray(ptrs: usize[] | null): usize {\r\n  return allocI32Array(ptrs); // TODO: WASM64 one day\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\r\n  // the following is based on Emscripten's stringToUTF8Array\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    arr.push(cp);\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n\r\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\r\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\r\n  // not applicable if pushing a value to the stack\r\n  if (_BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\r\n\r\n  switch (_BinaryenExpressionGetId(expr)) {\r\n    case ExpressionId.Unreachable:\r\n    case ExpressionId.Return: return false;\r\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\r\n    case ExpressionId.Block: {\r\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\r\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\r\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/** Traverses all expression members of an expression, calling the given visitor. */\r\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\r\n  switch (getExpressionId(expr)) {\r\n    case ExpressionId.Block: {\r\n      for (let i = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\r\n        visit(_BinaryenBlockGetChild(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.If: {\r\n      visit(_BinaryenIfGetCondition(expr), data);\r\n      visit(_BinaryenIfGetIfTrue(expr), data);\r\n      let ifFalse = _BinaryenIfGetIfFalse(expr);\r\n      if (ifFalse) visit(ifFalse, data);\r\n      break;\r\n    }\r\n    case ExpressionId.Loop: {\r\n      visit(_BinaryenLoopGetBody(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Break: {\r\n      let condition = _BinaryenBreakGetCondition(expr);\r\n      if (condition) visit(condition, data);\r\n      break;\r\n    }\r\n    case ExpressionId.Switch: {\r\n      visit(_BinaryenSwitchGetCondition(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Call: {\r\n      for (let i = 0, n = _BinaryenCallGetNumOperands(expr); i < n; ++i) {\r\n        visit(_BinaryenCallGetOperand(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.CallIndirect: {\r\n      for (let i = 0, n = _BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\r\n        visit(_BinaryenCallIndirectGetOperand(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.LocalGet: {\r\n      break;\r\n    }\r\n    case ExpressionId.LocalSet: {\r\n      visit(_BinaryenLocalSetGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.GlobalGet: {\r\n      break;\r\n    }\r\n    case ExpressionId.GlobalSet: {\r\n      visit(_BinaryenGlobalSetGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Load: {\r\n      visit(_BinaryenLoadGetPtr(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Store: {\r\n      visit(_BinaryenStoreGetPtr(expr), data);\r\n      visit(_BinaryenStoreGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicRMW: {\r\n      visit(_BinaryenAtomicRMWGetPtr(expr), data);\r\n      visit(_BinaryenAtomicRMWGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicCmpxchg: {\r\n      visit(_BinaryenAtomicCmpxchgGetPtr(expr), data);\r\n      visit(_BinaryenAtomicCmpxchgGetExpected(expr), data);\r\n      visit(_BinaryenAtomicCmpxchgGetReplacement(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicWait: {\r\n      visit(_BinaryenAtomicWaitGetPtr(expr), data);\r\n      visit(_BinaryenAtomicWaitGetExpected(expr), data);\r\n      visit(_BinaryenAtomicWaitGetTimeout(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicNotify: {\r\n      visit(_BinaryenAtomicNotifyGetPtr(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDExtract: {\r\n      visit(_BinaryenSIMDExtractGetVec(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDReplace: {\r\n      visit(_BinaryenSIMDReplaceGetVec(expr), data);\r\n      visit(_BinaryenSIMDReplaceGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDShuffle: {\r\n      visit(_BinaryenSIMDShuffleGetLeft(expr), data);\r\n      visit(_BinaryenSIMDShuffleGetRight(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDBitselect: {\r\n      visit(_BinaryenSIMDBitselectGetLeft(expr), data);\r\n      visit(_BinaryenSIMDBitselectGetRight(expr), data);\r\n      visit(_BinaryenSIMDBitselectGetCond(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDShift: {\r\n      visit(_BinaryenSIMDShiftGetVec(expr), data);\r\n      visit(_BinaryenSIMDShiftGetShift(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.MemoryInit: {\r\n      visit(_BinaryenMemoryInitGetDest(expr), data);\r\n      visit(_BinaryenMemoryInitGetOffset(expr), data);\r\n      visit(_BinaryenMemoryInitGetSize(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.DataDrop: {\r\n      break;\r\n    }\r\n    case ExpressionId.MemoryCopy: {\r\n      visit(_BinaryenMemoryCopyGetDest(expr), data);\r\n      visit(_BinaryenMemoryCopyGetSource(expr), data);\r\n      visit(_BinaryenMemoryCopyGetSize(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.MemoryFill: {\r\n      visit(_BinaryenMemoryFillGetDest(expr), data);\r\n      visit(_BinaryenMemoryFillGetValue(expr), data);\r\n      visit(_BinaryenMemoryFillGetSize(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Const: {\r\n      break;\r\n    }\r\n    case ExpressionId.Unary: {\r\n      visit(_BinaryenUnaryGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Binary: {\r\n      visit(_BinaryenBinaryGetLeft(expr), data);\r\n      visit(_BinaryenBinaryGetRight(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Select: {\r\n      visit(_BinaryenSelectGetIfTrue(expr), data);\r\n      visit(_BinaryenSelectGetIfFalse(expr), data);\r\n      visit(_BinaryenSelectGetCondition(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Drop: {\r\n      visit(_BinaryenDropGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Return: {\r\n      visit(_BinaryenReturnGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Host: {\r\n      for (let i = 0, n = _BinaryenHostGetNumOperands(expr); i < n; ++i) {\r\n        visit(_BinaryenHostGetOperand(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.Nop: {\r\n      break;\r\n    }\r\n    case ExpressionId.Unreachable: {\r\n      break;\r\n    }\r\n    default: assert(false);\r\n  }\r\n  return true;\r\n}\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  CommonSymbols,\r\n  PATH_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath,\r\n  CharCode\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  NAMEDTYPE,\r\n  FUNCTIONTYPE,\r\n  TYPENAME,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  CLASS,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  INSTANCEOF,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTDEFAULT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INDEXSIGNATUREDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Checks if a node represents a constant value. */\r\nexport function nodeIsConstantValue(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.LITERAL:\r\n    case NodeKind.NULL:\r\n    case NodeKind.TRUE:\r\n    case NodeKind.FALSE: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable. */\r\nexport function nodeIsCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.ASSERTION: // if kind=NONNULL\r\n    case NodeKind.CALL:\r\n    case NodeKind.ELEMENTACCESS:\r\n    case NodeKind.PARENTHESIZED:\r\n    case NodeKind.PROPERTYACCESS:\r\n    case NodeKind.SUPER: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable with generic arguments. */\r\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.PROPERTYACCESS: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n\r\n  // types\r\n\r\n  static createTypeName(\r\n    name: IdentifierExpression,\r\n    range: Range\r\n  ): TypeName {\r\n    var typeName = new TypeName();\r\n    typeName.range = range;\r\n    typeName.identifier = name;\r\n    typeName.next = null;\r\n    return typeName;\r\n  }\r\n\r\n  static createSimpleTypeName(\r\n    name: string,\r\n    range: Range\r\n  ): TypeName {\r\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\r\n  }\r\n\r\n  static createNamedType(\r\n    name: TypeName,\r\n    typeArguments: TypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): NamedTypeNode {\r\n    var type = new NamedTypeNode();\r\n    type.range = range;\r\n    type.name = name;\r\n    type.typeArguments = typeArguments;\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createFunctionType(\r\n    parameters: ParameterNode[],\r\n    returnType: TypeNode,\r\n    explicitThisType: NamedTypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): FunctionTypeNode {\r\n    var type = new FunctionTypeNode();\r\n    type.range = range;\r\n    type.parameters = parameters;\r\n    type.returnType = returnType;\r\n    type.explicitThisType = explicitThisType;\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): NamedTypeNode {\r\n    return Node.createNamedType(\r\n      Node.createSimpleTypeName(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: NamedTypeNode | null,\r\n    defaultType: NamedTypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name;\r\n    elem.extendsType = extendsType;\r\n    elem.defaultType = defaultType;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: TypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name;\r\n    elem.type = type;\r\n    elem.initializer = initializer;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    name: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = name;\r\n    stmt.arguments = args;\r\n    stmt.decoratorKind = decoratorNameToKind(name);\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range,\r\n    isQuoted: bool = false\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name; // TODO: extract from range\r\n    expr.symbol = name; // TODO: Symbol.for(name)\r\n    expr.isQuoted = isQuoted;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements;\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: TypeNode | null,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression;\r\n    expr.toType = toType;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left;\r\n    expr.right = right;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: TypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.typeArguments = typeArgs;\r\n    expr.arguments = args;\r\n    return expr;\r\n  }\r\n\r\n  static createClassExpression(\r\n    declaration: ClassDeclaration\r\n  ): ClassExpression {\r\n    var expr = new ClassExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions;\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.elementExpression = element;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createInstanceOfExpression(\r\n    expression: Expression,\r\n    isType: TypeNode,\r\n    range: Range\r\n  ): InstanceOfExpression {\r\n    var expr = new InstanceOfExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.isType = isType;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: TypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.typeArguments = typeArgs;\r\n    expr.arguments = args;\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createObjectLiteralExpression(\r\n    names: IdentifierExpression[],\r\n    values: Expression[],\r\n    range: Range\r\n  ): ObjectLiteralExpression {\r\n    var expr = new ObjectLiteralExpression();\r\n    expr.range = range;\r\n    expr.names = names;\r\n    expr.values = values;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.property = property;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition;\r\n    expr.ifThen = ifThen;\r\n    expr.ifElse = ifElse;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements;\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    extendsType: NamedTypeNode | null, // can't be a function\r\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.extendsType = extendsType;\r\n    stmt.implementsTypes = implementsTypes;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement;\r\n    stmt.condition = condition;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.values = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[] | null,\r\n    path: StringLiteralExpression | null,\r\n    isDeclare: bool,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.members = members;\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n          normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n        }\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    stmt.isDeclare = isDeclare;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportDefaultStatement(\r\n    declaration: DeclarationStatement,\r\n    range: Range\r\n  ): ExportDefaultStatement {\r\n    var stmt = new ExportDefaultStatement();\r\n    stmt.declaration = declaration;\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name;\r\n    stmt.externalName = externalName;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.localName = name;\r\n    if (!externalName) externalName = name;\r\n    elem.exportedName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.ifTrue = ifTrue;\r\n    stmt.ifFalse = ifFalse;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls;\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) {\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else {\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    foreignName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.foreignName = foreignName;\r\n    if (!name) name = foreignName;\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    extendsType: NamedTypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.extendsType = extendsType;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: TypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.type = type;\r\n    stmt.initializer = initializer;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer;\r\n    stmt.condition = condition;\r\n    stmt.incrementor = incrementor;\r\n    stmt.statement = statement;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: FunctionTypeNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    arrowKind: ArrowKind,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.signature = signature;\r\n    stmt.body = body;\r\n    stmt.decorators = decorators;\r\n    stmt.arrowKind = arrowKind;\r\n    return stmt;\r\n  }\r\n\r\n  static createIndexSignatureDeclaration(\r\n    keyType: NamedTypeNode,\r\n    valueType: TypeNode,\r\n    range: Range\r\n  ): IndexSignatureDeclaration {\r\n    var elem = new IndexSignatureDeclaration();\r\n    elem.range = range;\r\n    elem.keyType = keyType;\r\n    elem.valueType = valueType;\r\n    return elem;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: FunctionTypeNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.signature = signature;\r\n    stmt.body = body;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.cases = cases;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label;\r\n    elem.statements = statements;\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements;\r\n    stmt.catchVariable = catchVariable;\r\n    stmt.catchStatements = catchStatements;\r\n    stmt.finallyStatements = finallyStatements;\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: TypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.type = alias;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = declarations;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: TypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name;\r\n    elem.type = type;\r\n    elem.initializer = initializer;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.statement = statement;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class TypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type name. */\r\nexport class TypeName extends Node {\r\n  kind = NodeKind.TYPENAME;\r\n\r\n  /** Identifier of this part. */\r\n  identifier: IdentifierExpression;\r\n  /** Next part of the type name or `null` if this is the last part. */\r\n  next: TypeName | null;\r\n}\r\n\r\n/** Represents a named type. */\r\nexport class NamedTypeNode extends TypeNode {\r\n  kind = NodeKind.NAMEDTYPE;\r\n\r\n  /** Type name. */\r\n  name: TypeName;\r\n  /** Type argument references. */\r\n  typeArguments: TypeNode[] | null;\r\n}\r\n\r\n/** Represents a function type. */\r\nexport class FunctionTypeNode extends TypeNode {\r\n  kind = NodeKind.FUNCTIONTYPE;\r\n\r\n  /** Accepted parameters. */\r\n  parameters: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: TypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: NamedTypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: NamedTypeNode | null; // can't be a function\r\n  /** Default type if omitted, if any. */\r\n  defaultType: NamedTypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: TypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  OPERATOR_BINARY,\r\n  OPERATOR_PREFIX,\r\n  OPERATOR_POSTFIX,\r\n  UNMANAGED,\r\n  SEALED,\r\n  INLINE,\r\n  EXTERNAL,\r\n  BUILTIN,\r\n  LAZY,\r\n  UNSAFE\r\n}\r\n\r\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\r\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\r\n  // @global, @inline, @operator, @sealed, @unmanaged\r\n  if (name.kind == NodeKind.IDENTIFIER) {\r\n    let nameStr = (<IdentifierExpression>name).text;\r\n    assert(nameStr.length);\r\n    switch (nameStr.charCodeAt(0)) {\r\n      case CharCode.b: {\r\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\r\n        break;\r\n      }\r\n      case CharCode.e: {\r\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\r\n        break;\r\n      }\r\n      case CharCode.g: {\r\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\r\n        break;\r\n      }\r\n      case CharCode.i: {\r\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\r\n        break;\r\n      }\r\n      case CharCode.l: {\r\n        if (nameStr == \"lazy\") return DecoratorKind.LAZY;\r\n        break;\r\n      }\r\n      case CharCode.o: {\r\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\r\n        break;\r\n      }\r\n      case CharCode.s: {\r\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\r\n        break;\r\n      }\r\n      case CharCode.u: {\r\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\r\n        if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\r\n        break;\r\n      }\r\n    }\r\n  } else if (\r\n    name.kind == NodeKind.PROPERTYACCESS &&\r\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\r\n  ) {\r\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\r\n    assert(nameStr.length);\r\n    let propStr = (<PropertyAccessExpression>name).property.text;\r\n    assert(propStr.length);\r\n    // @operator.binary, @operator.prefix, @operator.postfix\r\n    if (nameStr == \"operator\") {\r\n      switch (propStr.charCodeAt(0)) {\r\n        case CharCode.b: {\r\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\r\n          break;\r\n        }\r\n        case CharCode.p: {\r\n          switch (propStr) {\r\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\r\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return DecoratorKind.CUSTOM;\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n  /** Symbol. */\r\n  symbol: string; // TODO: symbol\r\n  /** Whether quoted or not. */\r\n  isQuoted: bool;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS,\r\n  NONNULL\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: TypeNode | null;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: TypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n\r\n  /** Gets the type arguments range for reporting. */\r\n  get typeArgumentsRange(): Range {\r\n    var typeArguments = this.typeArguments;\r\n    var numTypeArguments: i32;\r\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\r\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\r\n    }\r\n    return this.expression.range;\r\n  }\r\n\r\n  /** Gets the arguments range for reporting. */\r\n  get argumentsRange(): Range {\r\n    var args = this.arguments;\r\n    var numArguments = args.length;\r\n    if (numArguments) {\r\n      return Range.join(args[0].range, args[numArguments - 1].range);\r\n    }\r\n    return this.expression.range;\r\n  }\r\n}\r\n\r\n/** Represents a class expression using the 'class' keyword. */\r\nexport class ClassExpression extends Expression {\r\n  kind = NodeKind.CLASS;\r\n\r\n  /** Inline class declaration. */\r\n  declaration: ClassDeclaration;\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n  symbol = CommonSymbols.constructor;\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an `instanceof` expression. */\r\nexport class InstanceOfExpression extends Expression {\r\n  kind = NodeKind.INSTANCEOF;\r\n\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Type to test for. */\r\n  isType: TypeNode;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n  symbol = CommonSymbols.null_;\r\n}\r\n\r\n/** Represents an object literal expression. */\r\nexport class ObjectLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.OBJECT;\r\n\r\n  /** Field names. */\r\n  names: IdentifierExpression[];\r\n  /** Field values. */\r\n  values: Expression[];\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n  symbol = CommonSymbols.super_;\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n  symbol = CommonSymbols.this_;\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n  symbol = CommonSymbols.true_;\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n  symbol = CommonSymbols.false_;\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Simple path (last part without extension). */\r\n  simplePath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n  /** Re-exported sources. */\r\n  exportPaths: Set<string> | null = null;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    var internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.internalPath = internalPath;\r\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\r\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n/** Represents an index signature declaration. */\r\nexport class IndexSignatureDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\r\n\r\n  /** Key type. */\r\n  keyType: NamedTypeNode;\r\n  /** Value type. */\r\n  valueType: TypeNode;\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: TypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Base class type being extended, if any. */\r\n  extendsType: NamedTypeNode | null; // can't be a function\r\n  /** Interface types being implemented, if any. */\r\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Local identifier. */\r\n  localName: IdentifierExpression;\r\n  /** Exported identifier. */\r\n  exportedName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members if a set of named exports, or `null` if a file export. */\r\n  members: ExportMember[] | null;\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n  /** Whether this is a declared export. */\r\n  isDeclare: bool;\r\n}\r\n\r\n/** Represents an `export default` statement. */\r\nexport class ExportDefaultStatement extends Statement {\r\n  kind = NodeKind.EXPORTDEFAULT;\r\n\r\n  /** Declaration being exported as default. */\r\n  declaration: DeclarationStatement;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Indicates the kind of an array function. */\r\nexport const enum ArrowKind {\r\n  /** Not an arrow function. */\r\n  NONE,\r\n  /** Parenthesized parameter list. */\r\n  ARROW_PARENTHESIZED,\r\n  /** Single parameter without parenthesis. */\r\n  ARROW_SINGLE\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: FunctionTypeNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n  /** Arrow function kind, if applicable. */\r\n  arrowKind: ArrowKind;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n\r\n  /** Clones this function declaration. */\r\n  clone(): FunctionDeclaration {\r\n    return Node.createFunctionDeclaration(\r\n      this.name,\r\n      this.typeParameters,\r\n      this.signature,\r\n      this.body,\r\n      this.decorators,\r\n      this.flags,\r\n      this.arrowKind,\r\n      this.range\r\n    );\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  foreignName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: TypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Finds the first decorator matching the specified kind. */\r\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      if (decorator.decoratorKind == kind) return decorator;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n/** Tests if the specified type node represents an omitted type. */\r\nexport function isTypeOmitted(type: TypeNode): bool {\r\n  if (type.kind == NodeKind.NAMEDTYPE) {\r\n    let name = (<NamedTypeNode>type).name;\r\n    return !(name.next || name.identifier.text.length);\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget,\r\n  Program,\r\n  DecoratorFlags\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // vectors\r\n\r\n  /** A 128-bit vector. */\r\n  V128,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a pointer type. */\r\n  POINTER = 1 << 4,\r\n  /** Is smaller than 32-bits. */\r\n  SHORT = 1 << 5,\r\n  /** Is larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9,\r\n  /** Is a vector type. */\r\n  VECTOR = 1 << 10\r\n}\r\n\r\nconst v128_zero = new Uint8Array(16);\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying signature reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n  /** Cached nullable type, if non-nullable. */\r\n  private cachedNullableType: Type | null = null;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Returns the closest int type representing this type. */\r\n  get intType(): Type {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return Type.i8;\r\n      case TypeKind.I16: return Type.i16;\r\n      case TypeKind.F32:\r\n      case TypeKind.I32: return Type.i32;\r\n      case TypeKind.F64:\r\n      case TypeKind.I64: return Type.i64;\r\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\r\n      case TypeKind.U8: return Type.u8;\r\n      case TypeKind.U16: return Type.u16;\r\n      case TypeKind.U32: return Type.u32;\r\n      case TypeKind.U64: return Type.u64;\r\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\r\n      case TypeKind.BOOL:\r\n      default: return Type.i32;\r\n    }\r\n  }\r\n\r\n  /** Substitutes this type with the auto type if this type is void. */\r\n  get exceptVoid(): Type {\r\n    if (this.kind == TypeKind.VOID) return Type.auto;\r\n    return this;\r\n  }\r\n\r\n  /** Gets this type's logarithmic alignment in memory. */\r\n  get alignLog2(): i32 {\r\n    return 31 - clz<i32>(this.byteSize);\r\n  }\r\n\r\n  /** Tests if this is a managed type that needs GC hooks. */\r\n  get isManaged(): bool {\r\n    var classReference = this.classReference;\r\n    return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\r\n  }\r\n\r\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\r\n  get isUnmanaged(): bool {\r\n    var classReference = this.classReference;\r\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\r\n    return ~0 >>> (targetType.size - size);\r\n  }\r\n\r\n  /** Tests if this type has (all of) the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.cachedNullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.cachedNullableType.nonNullableType = this;\r\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\r\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.cachedNullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\r\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\r\n          if (currentClass = this.classReference) {\r\n            if (targetClass = target.classReference) {\r\n              return currentClass.isAssignableTo(targetClass);\r\n            }\r\n          } else if (currentFunction = this.signatureReference) {\r\n            if (targetFunction = target.signatureReference) {\r\n              return currentFunction.isAssignableTo(targetFunction);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (\r\n            !signednessIsRelevant ||\r\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\r\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\r\n          ) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      } else if (this.is(TypeFlags.VECTOR)) {\r\n        if (target.is(TypeFlags.VECTOR)) {\r\n          return this.size == target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\r\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\r\n    else if (target.is(TypeFlags.REFERENCE)) return false;\r\n    if (this.is(TypeFlags.INTEGER)) {\r\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\r\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\r\n      );\r\n    }\r\n    return this.kind == target.kind;\r\n  }\r\n\r\n  /** Determines the common denominator type of two types, if there is any. */\r\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\r\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to a string. */\r\n  toString(): string {\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      let classReference = this.classReference;\r\n      if (classReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? classReference.internalName + \" | null\"\r\n          : classReference.internalName;\r\n      }\r\n      let signatureReference = this.signatureReference;\r\n      if (signatureReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? \"(\" + signatureReference.toString() + \") | null\"\r\n          : signatureReference.toString();\r\n      }\r\n      assert(false);\r\n    }\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: return \"usize\";\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.V128: return \"v128\";\r\n      default: assert(false);\r\n      case TypeKind.VOID: return \"void\";\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.V128: return NativeType.V128;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.i32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.i64(0);\r\n      case TypeKind.F32: return module.f32(0);\r\n      case TypeKind.F64: return module.f64(0);\r\n      case TypeKind.V128: return module.v128(v128_zero);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.V128:\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.i32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.i64(1);\r\n      case TypeKind.F32: return module.f32(1);\r\n      case TypeKind.F64: return module.f64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.V128:\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.i32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.i64(-1, -1);\r\n      case TypeKind.F32: return module.f32(-1);\r\n      case TypeKind.F64: return module.f64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      // same naming scheme as Binaryen\r\n      case TypeKind.I8:\r\n      case TypeKind.U8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U16:\r\n      case TypeKind.I32:\r\n      case TypeKind.U32:\r\n      case TypeKind.BOOL: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"j\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"j\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"d\";\r\n      case TypeKind.V128: return \"V\";\r\n      case TypeKind.VOID: return \"v\";\r\n      default: assert(false);\r\n    }\r\n    return \"i\";\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 128-bit vector. */\r\n  static readonly v128: Type = new Type(TypeKind.V128,\r\n    TypeFlags.VECTOR   |\r\n    TypeFlags.VALUE, 128\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n\r\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\r\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\r\n  return sb.join(\",\");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n  }\r\n\r\n  asFunctionTarget(program: Program): FunctionTarget {\r\n    var target = this.cachedFunctionTarget;\r\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\r\n    else assert(target.program == program);\r\n    return target;\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getDefaultParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) return false; // TODO\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) return false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = target.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts a signature to a function type string. */\r\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\r\n    var sb = [];\r\n    sb.push(returnType.toSignatureString());\r\n    if (thisType) sb.push(thisType.toSignatureString());\r\n    if (parameterTypes) {\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    return \"FUNCSIG$\" + sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      sb.push(\"this: \");\r\n      assert(!thisType.signatureReference);\r\n      sb.push(thisType.toString());\r\n      index = 1;\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) sb.push((<string[]>names)[i]);\r\n        else sb.push(getDefaultParameterName(i));\r\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\r\n        else sb.push(\": \");\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached default parameter names used where names are unknown.\r\nvar cachedDefaultParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached default parameter name for the specified index. */\r\nexport function getDefaultParameterName(index: i32): string {\r\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\r\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\r\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedDefaultParameterNames[index - 1];\r\n}\r\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport enum IdentifierHandling {\r\n  DEFAULT,\r\n  PREFER,\r\n  ALWAYS\r\n}\r\n\r\nexport function tokenFromKeyword(text: string): Token {\r\n  assert(text.length);\r\n  switch (text.charCodeAt(0)) {\r\n    case CharCode.a: {\r\n      switch (text) {\r\n        case \"abstract\": return Token.ABSTRACT;\r\n        case \"as\": return Token.AS;\r\n        case \"async\": return Token.ASYNC;\r\n        case \"await\": return Token.AWAIT;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.b: {\r\n      switch (text) {\r\n        case \"break\": return Token.BREAK;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.c: {\r\n      switch (text) {\r\n        case \"case\": return Token.CASE;\r\n        case \"catch\": return Token.CATCH;\r\n        case \"class\": return Token.CLASS;\r\n        case \"continue\": return Token.CONTINUE;\r\n        case \"const\": return Token.CONST;\r\n        case \"constructor\": return Token.CONSTRUCTOR;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.d: {\r\n      switch (text) {\r\n        case \"debugger\": return Token.DEBUGGER;\r\n        case \"declare\": return Token.DECLARE;\r\n        case \"default\": return Token.DEFAULT;\r\n        case \"delete\": return Token.DELETE;\r\n        case \"do\": return Token.DO;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.e: {\r\n      switch (text) {\r\n        case \"else\": return Token.ELSE;\r\n        case \"enum\": return Token.ENUM;\r\n        case \"export\": return Token.EXPORT;\r\n        case \"extends\": return Token.EXTENDS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.f: {\r\n      switch (text) {\r\n        case \"false\": return Token.FALSE;\r\n        case \"finally\": return Token.FINALLY;\r\n        case \"for\": return Token.FOR;\r\n        case \"from\": return Token.FROM;\r\n        case \"function\": return Token.FUNCTION;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.g: {\r\n      switch (text) {\r\n        case \"get\": return Token.GET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.i: {\r\n      switch (text) {\r\n        case \"if\": return Token.IF;\r\n        case \"implements\": return Token.IMPLEMENTS;\r\n        case \"import\": return Token.IMPORT;\r\n        case \"in\": return Token.IN;\r\n        case \"instanceof\": return Token.INSTANCEOF;\r\n        case \"interface\": return Token.INTERFACE;\r\n        case \"is\": return Token.IS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.k: {\r\n      switch (text) {\r\n        case \"keyof\": return Token.KEYOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.l: {\r\n      switch (text) {\r\n        case \"let\": return Token.LET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.m: {\r\n      switch (text) {\r\n        case \"module\": return Token.MODULE;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.n: {\r\n      switch (text) {\r\n        case \"namespace\": return Token.NAMESPACE;\r\n        case \"new\": return Token.NEW;\r\n        case \"null\": return Token.NULL;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.o: {\r\n      switch (text) {\r\n        case \"of\": return Token.OF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.p: {\r\n      switch (text) {\r\n        case \"package\": return Token.PACKAGE;\r\n        case \"private\": return Token.PRIVATE;\r\n        case \"protected\": return Token.PROTECTED;\r\n        case \"public\": return Token.PUBLIC;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.r: {\r\n      switch (text) {\r\n        case \"readonly\": return Token.READONLY;\r\n        case \"return\": return Token.RETURN;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.s: {\r\n      switch (text) {\r\n        case \"set\": return Token.SET;\r\n        case \"static\": return Token.STATIC;\r\n        case \"super\": return Token.SUPER;\r\n        case \"switch\": return Token.SWITCH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.t: {\r\n      switch (text) {\r\n        case \"this\": return Token.THIS;\r\n        case \"throw\": return Token.THROW;\r\n        case \"true\": return Token.TRUE;\r\n        case \"try\": return Token.TRY;\r\n        case \"type\": return Token.TYPE;\r\n        case \"typeof\": return Token.TYPEOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.v: {\r\n      switch (text) {\r\n        case \"var\": return Token.VAR;\r\n        case \"void\": return Token.VOID;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.w: {\r\n      switch (text) {\r\n        case \"while\": return Token.WHILE;\r\n        case \"with\": return Token.WITH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.y: {\r\n      switch (text) {\r\n        case \"yield\": return Token.YIELD;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return Token.INVALID;\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.FOR:\r\n    case Token.GET:\r\n    case Token.INSTANCEOF:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.NULL:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE:\r\n    case Token.VOID: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function isIllegalVariableIdentifier(name: string): bool {\r\n  assert(name.length);\r\n  switch (name.charCodeAt(0)) {\r\n    case CharCode.d: return name == \"delete\";\r\n    case CharCode.f: return name == \"for\";\r\n    case CharCode.i: return name == \"instanceof\";\r\n    case CharCode.n: return name == \"null\";\r\n    case CharCode.v: return name == \"void\";\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics || new Array();\r\n\r\n    var end = this.end;\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(identifierHandling);\r\n  }\r\n\r\n  private unsafeNext(\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxTokenLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    while (this.pos < end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (!(\r\n            ++this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          )) break;\r\n          // otherwise fall-through\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (chr == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (isDecimalDigit(chr)) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < end &&\r\n              chr == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (chr == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (chr == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < end) {\r\n                chr = text.charCodeAt(this.pos);\r\n                if (chr == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (chr == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFromKeyword(keywordText);\r\n              if (\r\n                keywordToken !== Token.INVALID &&\r\n                identifierHandling !== IdentifierHandling.ALWAYS &&\r\n                !(\r\n                  identifierHandling === IdentifierHandling.PREFER &&\r\n                  tokenIsAlsoIdentifier(keywordToken)\r\n                )\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\r\n          if (isLineBreak(text.charCodeAt(pos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\r\n    return this.skip(Token.IDENTIFIER, identifierHandling);\r\n  }\r\n\r\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    while (\r\n      ++this.pos < end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    var end = this.end;\r\n    if (++this.pos >= end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (!escaped && c == CharCode.SLASH) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var flags = 0;\r\n    while (this.pos < end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    if (this.pos + 1 < end && text.charCodeAt(this.pos) == CharCode._0) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.x:\r\n        case CharCode.X:\r\n        case CharCode.b:\r\n        case CharCode.B:\r\n        case CharCode.o:\r\n        case CharCode.O: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) return false;\r\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\r\n      // does not validate separator placement (this is done in readXYInteger)\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.x:\r\n        case CharCode.X: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.b:\r\n        case CharCode.B: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.o:\r\n        case CharCode.O: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_4 = i64_new(4);\r\n    var sepEnd = start;\r\n    var end = this.end;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = (value << 4) + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = (value << 4) + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(10 + c - CharCode.A)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = (value << 4) + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(10 + c - CharCode.a)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var value = i64_new(0);\r\n    var i64_10 = i64_new(10);\r\n    var sepEnd = start;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_3 = i64_new(3);\r\n    var sepEnd = start;\r\n    var end = this.end;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = (value << 3) + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_shl(value, i64_3),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_1 = i64_new(1);\r\n    var sepEnd = start;\r\n    var end = this.end;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode._0) {\r\n        // value = (value << 1);\r\n        value = i64_shl(value, i64_1);\r\n      } else if (c == CharCode._1) {\r\n        // value = (value << 1) + 1;\r\n        value = i64_add(\r\n          i64_shl(value, i64_1),\r\n          i64_1\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    // TODO: numeric separators (parseFloat can't handle these)\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.e || c == CharCode.E) {\r\n        if (\r\n          ++this.pos < end &&\r\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    while (this.pos < end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = (value << 4) + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = (value << 4) + c + (10 - CharCode.A);\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = (value << 4) + c + (10 - CharCode.a);\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    if (this.pos >= end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        ((value32 - 65536) >>> 10) + 0xD800,\r\n        ((value32 - 65536) & 1023) + 0xDC00\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\r\n * Resolve infrastructure to obtain types and elements.\r\n * @module resolver\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticEmitter,\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Program,\r\n  ElementKind,\r\n  OperatorKind,\r\n  Element,\r\n  Class,\r\n  ClassPrototype,\r\n  Function,\r\n  FunctionPrototype,\r\n  VariableLikeElement,\r\n  Property,\r\n  PropertyPrototype,\r\n  Field,\r\n  FieldPrototype,\r\n  Global,\r\n  TypeDefinition\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  Flow\r\n} from \"./flow\";\r\n\r\nimport {\r\n  FunctionTypeNode,\r\n  ParameterKind,\r\n  TypeNode,\r\n  NodeKind,\r\n  NamedTypeNode,\r\n  TypeName,\r\n  TypeParameterNode,\r\n  Node,\r\n  Range,\r\n  IdentifierExpression,\r\n  CallExpression,\r\n  ElementAccessExpression,\r\n  PropertyAccessExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  AssertionExpression,\r\n  Expression,\r\n  IntegerLiteralExpression,\r\n  UnaryPrefixExpression,\r\n  UnaryPostfixExpression,\r\n  AssertionKind,\r\n  BinaryExpression,\r\n  ThisExpression,\r\n  SuperExpression,\r\n  isTypeOmitted\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  Signature,\r\n  typesToString,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  CommonSymbols\r\n} from \"./common\";\r\n\r\nimport {\r\n  makeMap,\r\n  isPowerOf2\r\n} from \"./util\";\r\n\r\nimport {\r\n  Token\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  BuiltinSymbols\r\n} from \"./builtins\";\r\n\r\n/** Indicates whether errors are reported or not. */\r\nexport enum ReportMode {\r\n  /** Report errors. */\r\n  REPORT,\r\n  /** Swallow errors. */\r\n  SWALLOW\r\n}\r\n\r\n/** Provides tools to resolve types and expressions. */\r\nexport class Resolver extends DiagnosticEmitter {\r\n\r\n  /** The program this resolver belongs to. */\r\n  program: Program;\r\n\r\n  /** Target expression of the previously resolved property or element access. */\r\n  currentThisExpression: Expression | null = null;\r\n  /** Element expression of the previously resolved element access. */\r\n  currentElementExpression : Expression | null = null;\r\n\r\n  /** Constructs the resolver for the specified program. */\r\n  constructor(\r\n    /** The program to construct a resolver for. */\r\n    program: Program\r\n  ) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n  }\r\n\r\n  // ====================================================== Types ======================================================\r\n\r\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    /** The type to resolve. */\r\n    node: TypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    switch (node.kind) {\r\n      case NodeKind.NAMEDTYPE: {\r\n        return this.resolveNamedType(\r\n          <NamedTypeNode>node,\r\n          ctxElement,\r\n          ctxTypes,\r\n          reportMode\r\n        );\r\n      }\r\n      case NodeKind.FUNCTIONTYPE: {\r\n        return this.resolveFunctionType(\r\n          <FunctionTypeNode>node,\r\n          ctxElement,\r\n          ctxTypes,\r\n          reportMode\r\n        );\r\n      }\r\n      default: assert(false);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\r\n  private resolveNamedType(\r\n    /** The type to resolve. */\r\n    node: NamedTypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var nameNode = node.name;\r\n    var typeArgumentNodes = node.typeArguments;\r\n    var isSimpleType = !nameNode.next;\r\n\r\n    // Look up in contextual types if a simple type\r\n    if (isSimpleType) {\r\n      let simpleName = nameNode.identifier.text;\r\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\r\n        let type = ctxTypes.get(simpleName)!;\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, type.toString()\r\n            );\r\n          }\r\n        }\r\n        if (node.isNullable) {\r\n          if (!type.is(TypeFlags.REFERENCE)) {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n                node.range, type.toString()\r\n              );\r\n            }\r\n          }\r\n          return type.asNullable();\r\n        }\r\n        return type;\r\n      }\r\n    }\r\n\r\n    // Look up in context\r\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\r\n    if (!element) return null;\r\n\r\n    // Use shadow type if present (i.e. namespace sharing a type)\r\n    if (element.shadowType) {\r\n      element = element.shadowType;\r\n\r\n    } else {\r\n\r\n      // Handle enums (become i32)\r\n      if (element.kind == ElementKind.ENUM) {\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, element.internalName\r\n            );\r\n          }\r\n        }\r\n        if (node.isNullable) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n              node.range, element.name + \"/i32\"\r\n            );\r\n          }\r\n        }\r\n        return Type.i32;\r\n      }\r\n\r\n      // Handle classes\r\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let instance = this.resolveClassInclTypeArguments(\r\n          <ClassPrototype>element,\r\n          typeArgumentNodes,\r\n          ctxElement,\r\n          makeMap<string,Type>(ctxTypes), // don't inherit\r\n          node,\r\n          reportMode\r\n        );\r\n        if (!instance) return null;\r\n        return node.isNullable ? instance.type.asNullable() : instance.type;\r\n      }\r\n    }\r\n\r\n    // Handle type definitions\r\n    if (element.kind == ElementKind.TYPEDEFINITION) {\r\n\r\n      // Shortcut already resolved (mostly builtins)\r\n      if (element.is(CommonFlags.RESOLVED)) {\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, element.internalName\r\n            );\r\n          }\r\n        }\r\n        let type = (<TypeDefinition>element).type;\r\n        if (node.isNullable) {\r\n          if (!type.is(TypeFlags.REFERENCE)) {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n                nameNode.range, nameNode.identifier.text\r\n              );\r\n            }\r\n          } else {\r\n            return type.asNullable();\r\n          }\r\n        }\r\n        return type;\r\n      }\r\n\r\n      // Handle special built-in types\r\n      if (isSimpleType) {\r\n        switch (nameNode.identifier.symbol) {\r\n          case CommonSymbols.native: return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\r\n          case CommonSymbols.indexof: return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\r\n          case CommonSymbols.valueof: return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\r\n        }\r\n      }\r\n\r\n      // Resolve normally\r\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\r\n      let typeArguments: Type[] | null = null;\r\n      if (typeParameterNodes) {\r\n        typeArguments = this.resolveTypeArguments(\r\n          typeParameterNodes,\r\n          typeArgumentNodes,\r\n          ctxElement,\r\n          ctxTypes = makeMap(ctxTypes), // inherit\r\n          node,\r\n          reportMode\r\n        );\r\n        if (!typeArguments) return null;\r\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          node.range, nameNode.identifier.text\r\n        );\r\n      }\r\n      let type = this.resolveType(\r\n        (<TypeDefinition>element).typeNode,\r\n        element,\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!type) return null;\r\n      if (node.isNullable) {\r\n        if (!type.is(TypeFlags.REFERENCE)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n              nameNode.range, nameNode.identifier.text\r\n            );\r\n          }\r\n        } else {\r\n          return type.asNullable();\r\n        }\r\n      }\r\n      return type;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        nameNode.range, nameNode.identifier.text\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\r\n  private resolveFunctionType(\r\n    /** The type to resolve. */\r\n    node: FunctionTypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var explicitThisType = node.explicitThisType;\r\n    var thisType: Type | null = null;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        ctxElement,\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!thisType) return null;\r\n    }\r\n    var parameterNodes = node.parameters;\r\n    var numParameters = parameterNodes.length;\r\n    var parameterTypes = new Array<Type>(numParameters);\r\n    var parameterNames = new Array<string>(numParameters);\r\n    var requiredParameters = 0;\r\n    var hasRest = false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let parameterNode = parameterNodes[i];\r\n      switch (parameterNode.parameterKind) {\r\n        case ParameterKind.DEFAULT: {\r\n          requiredParameters = i + 1;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          assert(i == numParameters);\r\n          hasRest = true;\r\n          break;\r\n        }\r\n      }\r\n      let parameterTypeNode = parameterNode.type;\r\n      if (isTypeOmitted(parameterTypeNode)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            parameterTypeNode.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let parameterType = this.resolveType(\r\n        parameterTypeNode,\r\n        ctxElement,\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterNode.name.text;\r\n    }\r\n    var returnTypeNode = node.returnType;\r\n    var returnType: Type | null;\r\n    if (isTypeOmitted(returnTypeNode)) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnTypeNode.range\r\n        );\r\n      }\r\n      returnType = Type.void;\r\n    } else {\r\n      returnType = this.resolveType(\r\n        returnTypeNode,\r\n        ctxElement,\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!returnType) return null;\r\n    }\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n    signature.hasRest = hasRest;\r\n    return node.isNullable ? signature.type.asNullable() : signature.type;\r\n  }\r\n\r\n  private resolveBuiltinNativeType(\r\n    /** The type to resolve. */\r\n    node: NamedTypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var typeArgumentNodes = node.typeArguments;\r\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\r\n    if (!typeArgument) return null;\r\n    switch (typeArgument.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.I32: return Type.i32;\r\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\r\n      case TypeKind.I64: return Type.i64;\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.U32:\r\n      case TypeKind.BOOL: return Type.u32;\r\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\r\n      case TypeKind.U64: return Type.u64;\r\n      case TypeKind.F32: return Type.f32;\r\n      case TypeKind.F64: return Type.f64;\r\n      case TypeKind.V128: return Type.v128;\r\n      case TypeKind.VOID: return Type.void;\r\n      default: assert(false);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private resolveBuiltinIndexofType(\r\n    /** The type to resolve. */\r\n    node: NamedTypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var typeArgumentNodes = node.typeArguments;\r\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\r\n    if (!typeArgument) return null;\r\n    var classReference = typeArgument.classReference;\r\n    if (!classReference) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n          typeArgumentNodes[0].range, typeArgument.toString()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\r\n    if (overload) {\r\n      if (overload.is(CommonFlags.STATIC)) {\r\n        assert(overload.signature.parameterTypes.length == 2);\r\n        return overload.signature.parameterTypes[1];\r\n      } else {\r\n        assert(overload.signature.parameterTypes.length == 1);\r\n        return overload.signature.parameterTypes[0];\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n        typeArgumentNodes[0].range, typeArgument.toString()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private resolveBuiltinValueofType(\r\n    /** The type to resolve. */\r\n    node: NamedTypeNode,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n    var typeArgumentNodes = node.typeArguments;\r\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\r\n    if (!typeArgument) return null;\r\n    var classReference = typeArgument.classReference;\r\n    if (!classReference) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n          typeArgumentNodes[0].range, typeArgument.toString()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n\r\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\r\n    if (overload) return overload.signature.returnType;\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n        typeArgumentNodes[0].range, typeArgument.toString()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a type name to the program element it refers to. */\r\n  resolveTypeName(\r\n    /** The type name to resolve. */\r\n    node: TypeName,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var element = ctxElement.lookup(node.identifier.text);\r\n    if (!element) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Cannot_find_name_0,\r\n          node.range, node.identifier.text\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var prev = node;\r\n    var next = node.next;\r\n    while (next) {\r\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            next.range, next.identifier.text, prev.identifier.text\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      prev = next;\r\n      next = next.next;\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    /** Type parameter nodes present. */\r\n    typeParameters: TypeParameterNode[],\r\n    /** Type argument nodes provided. */\r\n    typeArgumentNodes: TypeNode[] | null,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\r\n    /** Alternative report node in case of empty type arguments. */\r\n    alternativeReportNode: Node | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type[] | null {\r\n    var minParameterCount = 0;\r\n    var maxParameterCount = 0;\r\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\r\n      if (!typeParameters[i].defaultType) ++minParameterCount;\r\n      ++maxParameterCount;\r\n    }\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        argumentCount\r\n          ? Range.join(\r\n              (<NamedTypeNode[]>typeArgumentNodes)[0].range,\r\n              (<NamedTypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n            )\r\n          : assert(alternativeReportNode).range,\r\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\r\n        argumentCount.toString(10)\r\n      );\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(maxParameterCount);\r\n    for (let i = 0; i < maxParameterCount; ++i) {\r\n      let type = i < argumentCount\r\n        ? this.resolveType( // reports\r\n            (<NamedTypeNode[]>typeArgumentNodes)[i],\r\n            ctxElement,\r\n            ctxTypes,\r\n            reportMode\r\n          )\r\n        : this.resolveType( // reports\r\n            assert(typeParameters[i].defaultType),\r\n            ctxElement,\r\n            ctxTypes,\r\n            reportMode\r\n          );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      ctxTypes.set(typeParameters[i].name.text, type);\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  // =================================================== Expressions ===================================================\r\n\r\n  /** Resolves an expression to the program element it refers to. */\r\n  resolveExpression(\r\n    /** The expression to resolve. */\r\n    node: Expression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    while (node.kind == NodeKind.PARENTHESIZED) { // simply skip\r\n      node = (<ParenthesizedExpression>node).expression;\r\n    }\r\n    switch (node.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        return this.resolveAssertionExpression(\r\n          <AssertionExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        return this.resolveUnaryPrefixExpression(\r\n          <UnaryPrefixExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        return this.resolveUnaryPostfixExpression(\r\n          <UnaryPostfixExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.BINARY: {\r\n        return this.resolveBinaryExpression(\r\n          <BinaryExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.THIS: {\r\n        return this.resolveThisExpression(\r\n          <ThisExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.SUPER: {\r\n        return this.resolveSuperExpression(\r\n          <SuperExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(\r\n          <IdentifierExpression>node,\r\n          ctxFlow, ctxFlow.actualFunction, reportMode\r\n        );\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        return this.resolveLiteralExpression(\r\n          <LiteralExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccessExpression(\r\n          <PropertyAccessExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccessExpression(\r\n          <ElementAccessExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        return this.resolveCallExpression(\r\n          <CallExpression>node,\r\n          ctxFlow, ctxType, reportMode\r\n        );\r\n      }\r\n      // TODO: everything else\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an identifier to the program element it refers to. */\r\n  resolveIdentifier(\r\n    /** The expression to resolve. */\r\n    node: IdentifierExpression,\r\n    /** Flow to search for scoped locals. */\r\n    ctxFlow: Flow,\r\n    /** Element to search. */\r\n    ctxElement: Element = ctxFlow.actualFunction,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var name = node.text;\r\n    var element: Element | null;\r\n    if (element = ctxFlow.lookup(name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element;\r\n    }\r\n    if (element = ctxElement.lookup(name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element;\r\n    }\r\n    if (element = this.program.lookupGlobal(name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        node.range, name\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\r\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\r\n    if (global.is(CommonFlags.RESOLVED)) return true;\r\n    var typeNode = global.typeNode;\r\n    if (!typeNode) return false;\r\n    var type = this.resolveType( // reports\r\n      typeNode,\r\n      global.parent,\r\n      null,\r\n      reportMode\r\n    );\r\n    if (!type) return false;\r\n    global.setType(type); // also sets resolved\r\n    return true;\r\n  }\r\n\r\n  /** Resolves a property access expression to the program element it refers to. */\r\n  resolvePropertyAccessExpression(\r\n    /** The expression to resolve. */\r\n    node: PropertyAccessExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetNode = node.expression;\r\n    var target = this.resolveExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\r\n    if (!target) return null;\r\n    var propertyName = node.property.text;\r\n\r\n    // Resolve variable-likes to their class type first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\r\n        let classReference = type.classReference;\r\n        if (!classReference) {\r\n          let typeClasses = this.program.typeClasses;\r\n          if (!type.is(TypeFlags.REFERENCE) && typeClasses.has(type.kind)) {\r\n            classReference = typeClasses.get(type.kind)!;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              node.property.range, propertyName, (<VariableLikeElement>target).type.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static\r\n        let getterInstance = this.resolveFunction( // reports\r\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n        if (!getterInstance) return null;\r\n        let classReference = getterInstance.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            node.property.range, propertyName, getterInstance.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance\r\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\r\n        let classReference = getterInstance.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            node.property.range, propertyName, getterInstance.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: { // property access on element access?\r\n        let elementExpression = this.currentElementExpression;\r\n        if (elementExpression) {\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementExpression.range, (<Class>target).internalName\r\n            );\r\n            return null;\r\n          }\r\n          let arrayType = indexedGet.signature.returnType;\r\n          let classReference = arrayType.classReference;\r\n          if (!classReference) {\r\n            let typeClasses = this.program.typeClasses;\r\n            if (!arrayType.is(TypeFlags.REFERENCE) && typeClasses.has(arrayType.kind)) {\r\n              classReference = typeClasses.get(arrayType.kind)!;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n                node.property.range, propertyName, arrayType.toString()\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n          target = classReference;\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\r\n        let shadowType = target.shadowType;\r\n        if (shadowType) {\r\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\r\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\r\n            if (resolvedType) shadowType.setType(resolvedType);\r\n          }\r\n          let classReference = shadowType.type.classReference;\r\n          if (classReference) target = classReference.prototype;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          let members = target.members;\r\n          if (members && members.has(propertyName)) {\r\n            this.currentThisExpression = targetNode;\r\n            this.currentElementExpression = null;\r\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\r\n          }\r\n          // traverse inherited static members on the base prototype if target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // traverse inherited instance members on the base class if target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        let members = target.members;\r\n        if (members && members.has(propertyName)) {\r\n          this.currentThisExpression = targetNode;\r\n          this.currentElementExpression = null;\r\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      node.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an element access expression to the program element it refers to. */\r\n  resolveElementAccessExpression(\r\n    /** The expression to resolve. */\r\n    node: ElementAccessExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = node.expression;\r\n    var target = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode); // reports\r\n    if (!target) return null;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (target = type.classReference) {\r\n          this.currentThisExpression = targetExpression;\r\n          this.currentElementExpression = node.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n        if (!indexedGet) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              node.range, (<Class>target).internalName\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        let arrayType = indexedGet.signature.returnType;\r\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\r\n          if (target = arrayType.classReference) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = node.elementExpression;\r\n            return target;\r\n          }\r\n          return null;\r\n        }\r\n        this.currentThisExpression = targetExpression;\r\n        this.currentElementExpression = node.elementExpression;\r\n        return target;\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        targetExpression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Determines the final type of an integer literal given the specified contextual type. */\r\n  determineIntegerLiteralType(\r\n    /** Integer literal value. */\r\n    intValue: I64,\r\n    /** Contextual type. */\r\n    ctxType: Type\r\n  ): Type {\r\n    if (!ctxType.is(TypeFlags.REFERENCE)) {\r\n      // compile to contextual type if matching\r\n      switch (ctxType.kind) {\r\n        case TypeKind.I8: {\r\n          if (i64_is_i8(intValue)) return Type.i8;\r\n          break;\r\n        }\r\n        case TypeKind.U8: {\r\n          if (i64_is_u8(intValue)) return Type.u8;\r\n          break;\r\n        }\r\n        case TypeKind.I16: {\r\n          if (i64_is_i16(intValue)) return Type.i16;\r\n          break;\r\n        }\r\n        case TypeKind.U16: {\r\n          if (i64_is_u16(intValue)) return Type.u16;\r\n          break;\r\n        }\r\n        case TypeKind.I32: {\r\n          if (i64_is_i32(intValue)) return Type.i32;\r\n          break;\r\n        }\r\n        case TypeKind.U32: {\r\n          if (i64_is_u32(intValue)) return Type.u32;\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: {\r\n          if (i64_is_bool(intValue)) return Type.bool;\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_i32(intValue)) return Type.isize32;\r\n            break;\r\n          }\r\n          return Type.isize64;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_u32(intValue)) return Type.usize32;\r\n            break;\r\n          }\r\n          return Type.usize64;\r\n        }\r\n        case TypeKind.I64: return Type.i64;\r\n        case TypeKind.U64: return Type.u64;\r\n        case TypeKind.F32: return Type.f32;\r\n        case TypeKind.F64: return Type.f64;\r\n        case TypeKind.VOID: break; // best fitting below\r\n        default: assert(false);\r\n      }\r\n    }\r\n    // otherwise compile to best fitting native type\r\n    if (i64_is_i32(intValue)) return Type.i32;\r\n    if (i64_is_u32(intValue)) return Type.u32;\r\n    return Type.i64; // TODO: u64 if positive and larger than i64?\r\n  }\r\n\r\n  /** Resolves an assertion expression to the program element it refers to. */\r\n  resolveAssertionExpression(\r\n    /** The expression to resolve. */\r\n    node: AssertionExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (node.assertionKind == AssertionKind.NONNULL) {\r\n      return this.resolveExpression(\r\n        node.expression,\r\n        ctxFlow,\r\n        ctxType,\r\n        reportMode\r\n      );\r\n    }\r\n    var type = this.resolveType(\r\n      assert(node.toType), // must be set if not NONNULL\r\n      ctxFlow.actualFunction,\r\n      ctxFlow.contextualTypeArguments,\r\n      reportMode\r\n    );\r\n    if (!type) return null;\r\n    var element: Element | null = type.classReference;\r\n    if (!element) {\r\n      let signature = type.signatureReference;\r\n      if (!signature) return null;\r\n      element = signature.asFunctionTarget(this.program);\r\n    }\r\n    this.currentThisExpression = null;\r\n    this.currentElementExpression = null;\r\n    return element;\r\n  }\r\n\r\n  /** Resolves an unary prefix expression to the program element it refers to. */\r\n  resolveUnaryPrefixExpression(\r\n    /** The expression to resolve. */\r\n    node: UnaryPrefixExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var operand = node.operand;\r\n    // TODO: operator overloads\r\n    switch (node.operator) {\r\n      case Token.MINUS: {\r\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\r\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\r\n          let type = this.determineIntegerLiteralType(\r\n            i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\r\n            ctxType\r\n          );\r\n          let typeClasses = this.program.typeClasses;\r\n          return typeClasses.has(type.kind) ? typeClasses.get(type.kind)! : null;\r\n        }\r\n        return this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\r\n      }\r\n      case Token.PLUS:\r\n      case Token.PLUS_PLUS:\r\n      case Token.MINUS_MINUS: {\r\n        return this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        let typeClasses = this.program.typeClasses;\r\n        assert(typeClasses.has(TypeKind.BOOL));\r\n        return typeClasses.get(TypeKind.BOOL);\r\n      }\r\n      case Token.TILDE: {\r\n        let resolvedOperand = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\r\n        if (!resolvedOperand) return null;\r\n        // TODO: matching integer type\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an unary postfix expression to the program element it refers to. */\r\n  resolveUnaryPostfixExpression(\r\n    /** The expression to resolve. */\r\n    node: UnaryPostfixExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    // TODO: operator overloads\r\n    switch (node.operator) {\r\n      case Token.PLUS_PLUS:\r\n      case Token.MINUS_MINUS: {\r\n        return this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\r\n      }\r\n      default: assert(false);\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a binary expression to the program element it refers to. */\r\n  resolveBinaryExpression(\r\n    /** The expression to resolve. */\r\n    name: BinaryExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    // TODO\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        name.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a this expression to the program element it refers to. */\r\n  resolveThisExpression(\r\n    /** The expression to resolve. */\r\n    node: ThisExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      let thisLocal = ctxFlow.lookupLocal(CommonSymbols.this_);\r\n      if (thisLocal) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return thisLocal;\r\n      }\r\n    }\r\n    var parent = ctxFlow.actualFunction.parent;\r\n    if (parent) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return parent;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a super expression to the program element it refers to. */\r\n  resolveSuperExpression(\r\n    /** The expression to resolve. */\r\n    node: SuperExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      let superLocal = ctxFlow.lookupLocal(CommonSymbols.super_);\r\n      if (superLocal) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return superLocal;\r\n      }\r\n    }\r\n    var parent: Element | null = ctxFlow.actualFunction.parent;\r\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return parent;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a literal expression to the program element it refers to. */\r\n  resolveLiteralExpression(\r\n    /** The expression to resolve. */\r\n    node: LiteralExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.auto,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    switch (node.literalKind) {\r\n      case LiteralKind.INTEGER: {\r\n        this.currentThisExpression = node;\r\n        this.currentElementExpression = null;\r\n        let literalType = this.determineIntegerLiteralType(\r\n          (<IntegerLiteralExpression>node).value,\r\n          ctxType\r\n        );\r\n        let typeClasses = this.program.typeClasses;\r\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        this.currentThisExpression = node;\r\n        this.currentElementExpression = null;\r\n        let literalType = ctxType == Type.f32 ? Type.f32 : Type.f64;\r\n        let typeClasses = this.program.typeClasses;\r\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\r\n      }\r\n      case LiteralKind.STRING: {\r\n        this.currentThisExpression = node;\r\n        this.currentElementExpression = null;\r\n        return this.program.stringInstance;\r\n      }\r\n      // TODO\r\n      // case LiteralKind.ARRAY:\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a call expression to the program element it refers to. */\r\n  resolveCallExpression(\r\n    /** The expression to resolve. */\r\n    node: CallExpression,\r\n    /** Contextual flow. */\r\n    ctxFlow: Flow,\r\n    /** Contextual type. */\r\n    ctxType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = node.expression;\r\n    var target = this.resolveExpression( // reports\r\n      targetExpression,\r\n      ctxFlow,\r\n      ctxType,\r\n      reportMode\r\n    );\r\n\r\n    if (!target) return null;\r\n    if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n      // `unchecked(expr: *): *` is special\r\n      if (\r\n        (<FunctionPrototype>target).internalName == BuiltinSymbols.unchecked &&\r\n        node.arguments.length > 0\r\n      ) {\r\n        return this.resolveExpression(node.arguments[0], ctxFlow, ctxType, reportMode);\r\n      }\r\n      // otherwise resolve normally\r\n      let instance = this.resolveFunctionInclTypeArguments(\r\n        <FunctionPrototype>target,\r\n        node.typeArguments,\r\n        ctxFlow.actualFunction,\r\n        makeMap(ctxFlow.contextualTypeArguments), // don't inherit\r\n        node,\r\n        reportMode\r\n      );\r\n      if (!instance) return null;\r\n      let returnType = instance.signature.returnType;\r\n      let classType = returnType.classReference;\r\n      if (classType) {\r\n        // reuse resolvedThisExpression (might be property access)\r\n        // reuse resolvedElementExpression (might be element access)\r\n        return classType;\r\n      } else {\r\n        let signature = returnType.signatureReference;\r\n        if (signature) {\r\n          let functionTarget = signature.asFunctionTarget(this.program);\r\n          // reuse resolvedThisExpression (might be property access)\r\n          // reuse resolvedElementExpression (might be element access)\r\n          return functionTarget;\r\n        } else {\r\n          let typeClasses = this.program.typeClasses;\r\n          if (!returnType.is(TypeFlags.REFERENCE) && typeClasses.has(returnType.kind)) {\r\n            return typeClasses.get(returnType.kind);\r\n          }\r\n        }\r\n      }\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n          targetExpression.range, target.internalName\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        node.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // ==================================================== Elements =====================================================\r\n\r\n  /** Resolves a function prototype using the specified concrete type arguments. */\r\n  resolveFunction(\r\n    /** The prototype of the function. */\r\n    prototype: FunctionPrototype,\r\n    /** Type arguments provided. */\r\n    typeArguments: Type[] | null,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\r\n      ? prototype.parent.parent\r\n      : prototype.parent;\r\n    var classInstance: Class | null = null; // if an instance method\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Instance method prototypes are pre-bound to their concrete class as their parent\r\n    if (prototype.is(CommonFlags.INSTANCE)) {\r\n      assert(actualParent.kind == ElementKind.CLASS);\r\n      classInstance = <Class>actualParent;\r\n\r\n      // check if this exact concrete class and function combination is known already\r\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\r\n      if (resolvedInstance) return resolvedInstance;\r\n\r\n      // inherit class specific type arguments\r\n      let classTypeArguments = classInstance.typeArguments;\r\n      if (classTypeArguments) {\r\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\r\n        let numClassTypeArguments = classTypeParameters.length;\r\n        assert(numClassTypeArguments == classTypeParameters.length);\r\n        for (let i = 0; i < numClassTypeArguments; ++i) {\r\n          let classTypeParameterName = classTypeParameters[i].name.text;\r\n          if (!ctxTypes.has(classTypeParameterName)) {\r\n            ctxTypes.set(\r\n              classTypeParameterName,\r\n              classTypeArguments[i]\r\n            );\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\r\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\r\n      if (resolvedInstance) return resolvedInstance;\r\n    }\r\n\r\n    // override whatever is contextual with actual function type arguments\r\n    var signatureNode = prototype.functionTypeNode;\r\n    var typeParameterNodes = prototype.typeParameterNodes;\r\n    var numFunctionTypeArguments: i32;\r\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\r\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        ctxTypes.set(\r\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\r\n          typeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\r\n    }\r\n\r\n    // resolve `this` type if applicable\r\n    var thisType: Type | null = null;\r\n    var explicitThisType = signatureNode.explicitThisType;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        prototype.parent, // relative to function\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!thisType) return null;\r\n      ctxTypes.set(CommonSymbols.this_, thisType);\r\n    } else if (classInstance) {\r\n      thisType = classInstance.type;\r\n      ctxTypes.set(CommonSymbols.this_, thisType);\r\n    }\r\n\r\n    // resolve parameter types\r\n    var signatureParameters = signatureNode.parameters;\r\n    var numSignatureParameters = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(numSignatureParameters);\r\n    var parameterNames = new Array<string>(numSignatureParameters);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < numSignatureParameters; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = parameterDeclaration.type;\r\n      if (isTypeOmitted(typeNode)) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          typeNode.range\r\n        );\r\n        return null;\r\n      }\r\n      let parameterType = this.resolveType(\r\n        typeNode,\r\n        prototype.parent, // relative to function\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    // resolve return type\r\n    var returnType: Type;\r\n    if (prototype.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = signatureNode.returnType;\r\n      if (isTypeOmitted(typeNode)) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          typeNode.range\r\n        );\r\n        return null;\r\n      }\r\n      let type = this.resolveType(\r\n        typeNode,\r\n        prototype.parent, // relative to function\r\n        ctxTypes,\r\n        reportMode\r\n      );\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var nameInclTypeParameters = prototype.name;\r\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\r\n    var instance = new Function(\r\n      nameInclTypeParameters,\r\n      prototype,\r\n      signature,\r\n      ctxTypes\r\n    );\r\n    prototype.setResolvedInstance(instanceKey, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\r\n  resolveFunctionInclTypeArguments(\r\n    /** The prototype of the function. */\r\n    prototype: FunctionPrototype,\r\n    /** Type arguments provided to be resolved. */\r\n    typeArgumentNodes: TypeNode[] | null,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type>,\r\n    /** The node to use when reporting intermediate errors. */\r\n    reportNode: Node,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\r\n      ? prototype.parent.parent\r\n      : prototype.parent;\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n\r\n      // If this is an instance method, first apply the class's type arguments\r\n      if (prototype.is(CommonFlags.INSTANCE)) {\r\n        assert(actualParent.kind == ElementKind.CLASS);\r\n        let classTypeArguments = (<Class>actualParent).typeArguments;\r\n        if (classTypeArguments) {\r\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\r\n          let numClassTypeArguments = classTypeArguments.length;\r\n          assert(numClassTypeArguments == typeParameterNodes.length);\r\n          for (let i = 0; i < numClassTypeArguments; ++i) {\r\n            ctxTypes.set(\r\n              typeParameterNodes[i].name.text,\r\n              classTypeArguments[i]\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.typeParameterNodes),\r\n        typeArgumentNodes,\r\n        ctxElement,\r\n        ctxTypes,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveFunction(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      ctxTypes,\r\n      reportMode\r\n    );\r\n  }\r\n\r\n  /** Resolves a class prototype using the specified concrete type arguments. */\r\n  resolveClass(\r\n    /** The prototype of the class. */\r\n    prototype: ClassPrototype,\r\n    /** Type arguments provided. */\r\n    typeArguments: Type[] | null,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Check if this exact instance has already been resolved\r\n    var instance = prototype.getResolvedInstance(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // Insert contextual type arguments for this operation. Internally, this method is always\r\n    // called with matching type parameter / argument counts.\r\n    if (typeArguments) {\r\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\r\n      let numTypeParameters = typeParameterNodes.length;\r\n      let numTypeArguments = typeArguments.length;\r\n      assert(numTypeArguments == numTypeParameters);\r\n      for (let i = 0; i < numTypeArguments; ++i) {\r\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\r\n      }\r\n    } else {\r\n      let typeParameterNodes = prototype.typeParameterNodes;\r\n      assert(!(typeParameterNodes && typeParameterNodes.length));\r\n    }\r\n\r\n    // Resolve base class if applicable\r\n    var basePrototype = prototype.basePrototype;\r\n    var baseClass: Class | null = null;\r\n    if (basePrototype) {\r\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\r\n      baseClass = this.resolveClassInclTypeArguments(\r\n        basePrototype,\r\n        extendsNode.typeArguments,\r\n        prototype.parent, // relative to derived class\r\n        makeMap(ctxTypes), // don't inherit\r\n        extendsNode,\r\n        reportMode\r\n      );\r\n      if (!baseClass) return null;\r\n    }\r\n\r\n    // Construct the instance and remember that it has been resolved already\r\n    var nameInclTypeParamters = prototype.name;\r\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\r\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = ctxTypes;\r\n    prototype.setResolvedInstance(instanceKey, instance);\r\n\r\n    // Inherit base class members and set up the initial memory offset for own fields\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      let baseMembers = baseClass.members;\r\n      if (baseMembers) {\r\n        let instanceMembers = instance.members;\r\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\r\n        for (let [baseMemberName, baseMember] of baseMembers) {\r\n          instanceMembers.set(baseMemberName, baseMember);\r\n        }\r\n      }\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n    }\r\n\r\n    // Resolve instance members\r\n    var instanceMemberPrototypes = prototype.instanceMembers;\r\n    if (instanceMemberPrototypes) {\r\n      for (let member of instanceMemberPrototypes.values()) {\r\n        switch (member.kind) {\r\n\r\n          // Lay out fields in advance\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            let instanceMembers = instance.members;\r\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\r\n            else if (instanceMembers.has(member.name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                (<FieldPrototype>member).identifierNode.range,\r\n                member.name\r\n              );\r\n              break;\r\n            }\r\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\r\n            let fieldType: Type | null = null;\r\n            // TODO: handle duplicate non-private fields specifically?\r\n            if (!fieldTypeNode) {\r\n              if (baseClass) {\r\n                let baseMembers = baseClass.members;\r\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\r\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\r\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\r\n                    assert(baseField.kind == ElementKind.FIELD);\r\n                    fieldType = (<Field>baseField).type;\r\n                  }\r\n                }\r\n              }\r\n              if (!fieldType) {\r\n                if (reportMode == ReportMode.REPORT) {\r\n                  this.error(\r\n                    DiagnosticCode.Type_expected,\r\n                    (<FieldPrototype>member).identifierNode.range.atEnd\r\n                  );\r\n                }\r\n              }\r\n            } else {\r\n              fieldType = this.resolveType(\r\n                fieldTypeNode,\r\n                prototype.parent, // relative to class\r\n                instance.contextualTypeArguments,\r\n                reportMode\r\n              );\r\n            }\r\n            if (!fieldType) break; // did report above\r\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\r\n            assert(isPowerOf2(fieldType.byteSize));\r\n            let mask = fieldType.byteSize - 1;\r\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\r\n            fieldInstance.memoryOffset = memoryOffset;\r\n            memoryOffset += fieldType.byteSize;\r\n            instance.add(member.name, fieldInstance); // reports\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\r\n            instance.add(boundPrototype.name, boundPrototype); // reports\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY_PROTOTYPE: {\r\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\r\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\r\n            if (getterPrototype) {\r\n              let getterInstance = this.resolveFunction(\r\n                getterPrototype.toBound(instance),\r\n                null,\r\n                makeMap(instance.contextualTypeArguments),\r\n                reportMode\r\n              );\r\n              if (getterInstance) {\r\n                propertyInstance.getterInstance = getterInstance;\r\n                propertyInstance.setType(getterInstance.signature.returnType);\r\n              }\r\n            }\r\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\r\n            if (setterPrototype) {\r\n              let setterInstance = this.resolveFunction(\r\n                setterPrototype.toBound(instance),\r\n                null,\r\n                makeMap(instance.contextualTypeArguments),\r\n                reportMode\r\n              );\r\n              if (setterInstance) {\r\n                propertyInstance.setterInstance = setterInstance;\r\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\r\n                  assert(setterInstance.signature.parameterTypes.length == 1);\r\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\r\n                }\r\n              }\r\n            }\r\n            instance.add(propertyInstance.name, propertyInstance); // reports\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Finalize memory offset\r\n    instance.currentMemoryOffset = memoryOffset;\r\n\r\n    // Link _own_ constructor if present\r\n    {\r\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\r\n      if (ctorPrototype && ctorPrototype.parent === instance) {\r\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n        let ctorInstance = this.resolveFunction(\r\n          <FunctionPrototype>ctorPrototype,\r\n          null,\r\n          instance.contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\r\n      }\r\n    }\r\n\r\n    // Fully resolve operator overloads (don't have type parameters on their own)\r\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\r\n      assert(kind != OperatorKind.INVALID);\r\n      let operatorInstance: Function | null;\r\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\r\n        let boundPrototype = overloadPrototype.toBound(instance);\r\n        operatorInstance = this.resolveFunction(\r\n          boundPrototype,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      } else {\r\n        operatorInstance = this.resolveFunction(\r\n          overloadPrototype,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      }\r\n      if (!operatorInstance) continue;\r\n      let overloads = instance.overloads;\r\n      if (!overloads) instance.overloads = overloads = new Map();\r\n      overloads.set(kind, operatorInstance);\r\n    }\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a class prototype by first resolving the specified type arguments. */\r\n  resolveClassInclTypeArguments(\r\n    /** The prototype of the class. */\r\n    prototype: ClassPrototype,\r\n    /** Type arguments provided to be resolved. */\r\n    typeArgumentNodes: TypeNode[] | null,\r\n    /** Contextual element. */\r\n    ctxElement: Element,\r\n    /** Contextual types, i.e. `T`. */\r\n    ctxTypes: Map<string,Type>,\r\n    /** The node to use when reporting intermediate errors. */\r\n    reportNode: Node,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.typeParameterNodes), // must be present if generic\r\n        typeArgumentNodes,\r\n        ctxElement,\r\n        ctxTypes,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveClass(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      ctxTypes,\r\n      reportMode\r\n    );\r\n  }\r\n}\r\n","/**\r\n * A control flow analyzer.\r\n * @module flow\r\n *//***/\r\n\r\nimport {\r\n  Type,\r\n  TypeFlags,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  Local,\r\n  Function,\r\n  Element,\r\n  ElementKind,\r\n  Global\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionId,\r\n  ExpressionRef,\r\n\r\n  getExpressionId,\r\n  getLocalGetIndex,\r\n  isLocalTee,\r\n  getLocalSetValue,\r\n  getGlobalGetName,\r\n  getBinaryOp,\r\n  BinaryOp,\r\n  getBinaryLeft,\r\n  getConstValueI32,\r\n  getBinaryRight,\r\n  getUnaryOp,\r\n  UnaryOp,\r\n  getExpressionType,\r\n  getConstValueI64Low,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getLoadBytes,\r\n  isLoadSigned,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getCallTarget,\r\n  getLocalSetIndex,\r\n  getIfCondition,\r\n  getConstValueI64High,\r\n  getUnaryValue,\r\n  getCallOperand,\r\n  traverse\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node\r\n} from \"./ast\";\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  // categorical\r\n\r\n  /** This flow returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This flow returns a wrapped value. */\r\n  RETURNS_WRAPPED = 1 << 1,\r\n  /** This flow returns a non-null value. */\r\n  RETURNS_NONNULL = 1 << 2,\r\n  /** This flow throws. */\r\n  THROWS = 1 << 3,\r\n  /** This flow breaks. */\r\n  BREAKS = 1 << 4,\r\n  /** This flow continues. */\r\n  CONTINUES = 1 << 5,\r\n  /** This flow allocates. Constructors only. */\r\n  ALLOCATES = 1 << 6,\r\n  /** This flow calls super. Constructors only. */\r\n  CALLS_SUPER = 1 << 7,\r\n  /** This flow terminates (returns, throws or continues). */\r\n  TERMINATES = 1 << 8,\r\n\r\n  // conditional\r\n\r\n  /** This flow conditionally returns in a child flow. */\r\n  CONDITIONALLY_RETURNS = 1 << 9,\r\n  /** This flow conditionally throws in a child flow. */\r\n  CONDITIONALLY_THROWS = 1 << 10,\r\n  /** This flow conditionally terminates in a child flow. */\r\n  CONDITIONALLY_TERMINATES = 1 << 11,\r\n  /** This flow conditionally breaks in a child flow. */\r\n  CONDITIONALLY_BREAKS = 1 << 12,\r\n  /** This flow conditionally continues in a child flow. */\r\n  CONDITIONALLY_CONTINUES = 1 << 13,\r\n  /** This flow conditionally allocates in a child flow. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 14,\r\n\r\n  // special\r\n\r\n  /** This is an inlining flow. */\r\n  INLINE_CONTEXT = 1 << 15,\r\n  /** This is a flow with explicitly disabled bounds checking. */\r\n  UNCHECKED_CONTEXT = 1 << 16,\r\n\r\n  // masks\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = FlowFlags.RETURNS\r\n                  | FlowFlags.RETURNS_WRAPPED\r\n                  | FlowFlags.RETURNS_NONNULL\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES\r\n                  | FlowFlags.ALLOCATES\r\n                  | FlowFlags.CALLS_SUPER\r\n                  | FlowFlags.TERMINATES,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\r\n                  | FlowFlags.CONDITIONALLY_THROWS\r\n                  | FlowFlags.CONDITIONALLY_BREAKS\r\n                  | FlowFlags.CONDITIONALLY_CONTINUES\r\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\r\n}\r\n\r\n/** Flags indicating the current state of a local. */\r\nexport enum LocalFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  /** Local is constant. */\r\n  CONSTANT = 1 << 0,\r\n  /** Local is properly wrapped. Relevant for small integers. */\r\n  WRAPPED = 1 << 1,\r\n  /** Local is non-null. */\r\n  NONNULL = 1 << 2,\r\n  /** Local is read from. */\r\n  READFROM = 1 << 3,\r\n  /** Local is written to. */\r\n  WRITTENTO = 1 << 4,\r\n  /** Local is retained. */\r\n  RETAINED = 1 << 5,\r\n\r\n  /** Local is conditionally read from. */\r\n  CONDITIONALLY_READFROM = 1 << 6,\r\n  /** Local is conditionally written to. */\r\n  CONDITIONALLY_WRITTENTO = 1 << 7,\r\n  /** Local must be conditionally retained. */\r\n  CONDITIONALLY_RETAINED = 1 << 8,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = CONSTANT\r\n                  | WRAPPED\r\n                  | NONNULL\r\n                  | READFROM\r\n                  | WRITTENTO\r\n                  | RETAINED,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = RETAINED\r\n                  | CONDITIONALLY_READFROM\r\n                  | CONDITIONALLY_WRITTENTO\r\n                  | CONDITIONALLY_RETAINED,\r\n\r\n  /** Any retained flag. */\r\n  ANY_RETAINED = RETAINED\r\n               | CONDITIONALLY_RETAINED\r\n}\r\nexport namespace LocalFlags {\r\n  export function join(left: LocalFlags, right: LocalFlags): LocalFlags {\r\n    return ((left & LocalFlags.ANY_CATEGORICAL) & (right & LocalFlags.ANY_CATEGORICAL))\r\n         |  (left & LocalFlags.ANY_CONDITIONAL) | (right & LocalFlags.ANY_CONDITIONAL);\r\n  }\r\n}\r\n\r\n/** Flags indicating the current state of a field. */\r\nexport enum FieldFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  /** Field is initialized. Relevant in constructors. */\r\n  INITIALIZED = 1 << 0,\r\n  /** Field is conditionally initialized. Relevant in constructors. */\r\n  CONDITIONALLY_INITIALIZED = 1 << 1,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = INITIALIZED,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = CONDITIONALLY_INITIALIZED\r\n}\r\nexport namespace FieldFlags {\r\n  export function join(left: FieldFlags, right: FieldFlags): FieldFlags {\r\n    return ((left & FieldFlags.ANY_CATEGORICAL) & (right & FieldFlags.ANY_CATEGORICAL))\r\n         |  (left & FieldFlags.ANY_CONDITIONAL) | (right & FieldFlags.ANY_CONDITIONAL);\r\n  }\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  parentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** The current return type. */\r\n  returnType: Type;\r\n  /** The current contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n  /** Local flags. */\r\n  localFlags: LocalFlags[];\r\n  /** Field flags. Relevant in constructors. */\r\n  fieldFlags: Map<string,FieldFlags> | null = null;\r\n  /** Function being inlined, when inlining. */\r\n  inlineFunction: Function | null;\r\n  /** The label we break to when encountering a return statement, when inlining. */\r\n  inlineReturnLabel: string | null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(parentFunction: Function): Flow {\r\n    var flow = new Flow();\r\n    flow.parent = null;\r\n    flow.flags = FlowFlags.NONE;\r\n    flow.parentFunction = parentFunction;\r\n    flow.continueLabel = null;\r\n    flow.breakLabel = null;\r\n    flow.returnType = parentFunction.signature.returnType;\r\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\r\n    flow.localFlags = [];\r\n    flow.inlineFunction = null;\r\n    flow.inlineReturnLabel = null;\r\n    return flow;\r\n  }\r\n\r\n  /** Creates an inline flow within `parentFunction`. */\r\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\r\n    var flow = Flow.create(parentFunction);\r\n    flow.set(FlowFlags.INLINE_CONTEXT);\r\n    flow.inlineFunction = inlineFunction;\r\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\r\n    flow.returnType = inlineFunction.signature.returnType;\r\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\r\n    return flow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\r\n  get actualFunction(): Function {\r\n    return this.inlineFunction || this.parentFunction;\r\n  }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this flow has one of the specified flags. */\r\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Forks this flow to a child flow. */\r\n  fork(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.parentFunction = this.parentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    branch.returnType = this.returnType;\r\n    branch.contextualTypeArguments = this.contextualTypeArguments;\r\n    branch.localFlags = this.localFlags.slice();\r\n    branch.inlineFunction = this.inlineFunction;\r\n    branch.inlineReturnLabel = this.inlineReturnLabel;\r\n    return branch;\r\n  }\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\r\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\r\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\r\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\r\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (except) {\r\n      if (temps && temps.length) {\r\n        for (let i = 0, k = temps.length; i < k; ++i) {\r\n          if (!except.has(temps[i].index)) {\r\n            local = temps[i];\r\n            let k = temps.length - 1;\r\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\r\n            temps.length = k;\r\n            local.type = type;\r\n            local.flags = CommonFlags.NONE;\r\n            this.unsetLocalFlag(local.index, ~0);\r\n            return local;\r\n          }\r\n        }\r\n      }\r\n      local = parentFunction.addLocal(type);\r\n    } else {\r\n      if (temps && temps.length) {\r\n        local = temps.pop();\r\n        local.type = type;\r\n        local.flags = CommonFlags.NONE;\r\n      } else {\r\n        local = parentFunction.addLocal(type);\r\n      }\r\n    }\r\n    this.unsetLocalFlag(local.index, ~0);\r\n    return local;\r\n  }\r\n\r\n  /** Gets a local that sticks around until this flow is exited, and then released. */\r\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\r\n    var local = this.getTempLocal(type, except);\r\n    local.set(CommonFlags.SCOPED);\r\n    var scopedLocals = this.scopedLocals;\r\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\r\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\r\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\r\n    return local;\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    if (local.is(CommonFlags.INLINED)) return;\r\n    assert(local.index >= 0);\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\r\n        break;\r\n      }\r\n      case NativeType.V128: {\r\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    assert(local.index >= 0);\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type, except: Set<i32> | null = null): Local {\r\n    var local = this.getTempLocal(type, except);\r\n    this.freeTempLocal(local);\r\n    return local;\r\n  }\r\n\r\n  /** Gets the scoped local of the specified name. */\r\n  getScopedLocal(name: string): Local | null {\r\n    var scopedLocals = this.scopedLocals;\r\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name);\r\n    return null;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\r\n    var scopedLocal = this.getTempLocal(type, except);\r\n    var scopedLocals = this.scopedLocals;\r\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\r\n    else assert(!scopedLocals.has(name));\r\n    scopedLocal.set(CommonFlags.SCOPED);\r\n    scopedLocals.set(name, scopedLocal);\r\n    return scopedLocal;\r\n  }\r\n\r\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\r\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (reportNode) {\r\n          this.parentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            reportNode.range\r\n          );\r\n        }\r\n        return existingLocal;\r\n      }\r\n    }\r\n    assert(index < this.parentFunction.localsByIndex.length);\r\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\r\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\r\n    this.scopedLocals.set(name, scopedAlias);\r\n    return scopedAlias;\r\n  }\r\n\r\n  /** Frees this flow's scoped variables and returns its parent flow. */\r\n  freeScopedLocals(): void {\r\n    if (this.scopedLocals) {\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          this.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n  }\r\n\r\n  /** Looks up the local of the specified name in the current scope. */\r\n  lookupLocal(name: string): Local | null {\r\n    var current: Flow | null = this;\r\n    var scope: Map<String,Local> | null;\r\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\r\n    while (current = current.parent);\r\n    return this.parentFunction.localsByName.get(name);\r\n  }\r\n\r\n  /** Looks up the element with the specified name relative to the scope of this flow. */\r\n  lookup(name: string): Element | null {\r\n    var element = this.lookupLocal(name);\r\n    if (element) return element;\r\n    return this.actualFunction.lookup(name);\r\n  }\r\n\r\n  /** Tests if the local at the specified index has the specified flag or flags. */\r\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\r\n    if (index < 0) return defaultIfInlined;\r\n    var localFlags = this.localFlags;\r\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) == flag;\r\n  }\r\n\r\n  /** Tests if the local at the specified index has any of the specified flags. */\r\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\r\n    if (index < 0) return defaultIfInlined;\r\n    var localFlags = this.localFlags;\r\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) != 0;\r\n  }\r\n\r\n  /** Sets the specified flag or flags on the local at the specified index. */\r\n  setLocalFlag(index: i32, flag: LocalFlags): void {\r\n    if (index < 0) return;\r\n    var localFlags = this.localFlags;\r\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\r\n    this.localFlags[index] = flags | flag;\r\n  }\r\n\r\n  /** Unsets the specified flag or flags on the local at the specified index. */\r\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\r\n    if (index < 0) return;\r\n    var localFlags = this.localFlags;\r\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\r\n    this.localFlags[index] = flags & ~flag;\r\n  }\r\n\r\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\r\n  pushBreakLabel(): string {\r\n    var parentFunction = this.parentFunction;\r\n    var id = parentFunction.nextBreakId++;\r\n    var stack = parentFunction.breakStack;\r\n    if (!stack) parentFunction.breakStack = [ id ];\r\n    else stack.push(id);\r\n    return parentFunction.breakLabel = id.toString(10);\r\n  }\r\n\r\n  /** Pops the most recent break label from the stack. */\r\n  popBreakLabel(): void {\r\n    var parentFunction = this.parentFunction;\r\n    var stack = assert(parentFunction.breakStack);\r\n    var length = assert(stack.length);\r\n    stack.pop();\r\n    if (length > 1) {\r\n      parentFunction.breakLabel = stack[length - 2].toString(10);\r\n    } else {\r\n      parentFunction.breakLabel = null;\r\n      parentFunction.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\r\n  inherit(other: Flow): void {\r\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\r\n    this.localFlags = other.localFlags; // no need to slice because other flow is finished\r\n  }\r\n\r\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\r\n  inheritConditional(other: Flow): void {\r\n    if (other.is(FlowFlags.RETURNS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n    }\r\n    if (other.is(FlowFlags.THROWS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\r\n    }\r\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n    }\r\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n    }\r\n    if (other.is(FlowFlags.ALLOCATES)) {\r\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n    }\r\n    var localFlags = other.localFlags;\r\n    for (let i = 0, k = localFlags.length; i < k; ++i) {\r\n      let flags = localFlags[i];\r\n      if (flags & LocalFlags.RETAINED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETAINED);\r\n      if (flags & LocalFlags.READFROM) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_READFROM);\r\n      if (flags & LocalFlags.WRITTENTO) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_WRITTENTO);\r\n    }\r\n  }\r\n\r\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\r\n  inheritMutual(left: Flow, right: Flow): void {\r\n    // categorical flags set in both arms\r\n    this.set(left.flags & right.flags & FlowFlags.ANY_CATEGORICAL);\r\n\r\n    // conditional flags set in any arm\r\n    this.set(left.flags & FlowFlags.ANY_CONDITIONAL);\r\n    this.set(right.flags & FlowFlags.ANY_CONDITIONAL);\r\n\r\n    // categorical flags in either arm as conditional\r\n    this.inheritConditional(left);\r\n    this.inheritConditional(right);\r\n\r\n    // categorical local flags set in both arms / conditional local flags set in at least one arm\r\n    var leftLocalFlags = left.localFlags;\r\n    var numLeftLocalFlags = leftLocalFlags.length;\r\n    var rightLocalFlags = right.localFlags;\r\n    var numRightLocalFlags = rightLocalFlags.length;\r\n    var combinedFlags = new Array<LocalFlags>(max<i32>(numLeftLocalFlags, numRightLocalFlags));\r\n    for (let i = 0; i < numLeftLocalFlags; ++i) {\r\n      combinedFlags[i] = LocalFlags.join(\r\n        unchecked(leftLocalFlags[i]),\r\n        i < numRightLocalFlags\r\n          ? unchecked(rightLocalFlags[i])\r\n          : 0\r\n      );\r\n    }\r\n    for (let i = numLeftLocalFlags; i < numRightLocalFlags; ++i) {\r\n      combinedFlags[i] = LocalFlags.join(\r\n        0,\r\n        unchecked(rightLocalFlags[i])\r\n      );\r\n    }\r\n    this.localFlags = combinedFlags;\r\n  }\r\n\r\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\r\n  isNonnull(expr: ExpressionRef, type: Type): bool {\r\n    if (!type.is(TypeFlags.NULLABLE)) return true;\r\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\r\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\r\n    // has already been handled by the nullable type check above.\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.LocalSet: {\r\n        if (!isLocalTee(expr)) break;\r\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\r\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\r\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\r\n  inheritNonnullIfTrue(expr: ExpressionRef): void {\r\n    // A: `expr` is true-ish -> Q: how did that happen?\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.LocalSet: {\r\n        if (!isLocalTee(expr)) break;\r\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\r\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\r\n        this.inheritNonnullIfTrue(getLocalSetValue(expr)); // must have been true-ish as well\r\n        break;\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\r\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\r\n        break;\r\n      }\r\n      case ExpressionId.If: {\r\n        let ifFalse = getIfFalse(expr);\r\n        if (!ifFalse) break;\r\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\r\n          // Logical AND: (if (condition ifTrue 0))\r\n          // the only way this had become true is if condition and ifTrue are true\r\n          if (\r\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\r\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\r\n          ) {\r\n            this.inheritNonnullIfTrue(getIfCondition(expr));\r\n            this.inheritNonnullIfTrue(getIfTrue(expr));\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.inheritNonnullIfFalse(getUnaryValue(expr)); // !value -> value must have been false\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.EqI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\r\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\r\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.EqI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\r\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\r\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Call: {\r\n        let name = getCallTarget(expr);\r\n        let program = this.parentFunction.program;\r\n        switch (name) {\r\n          case program.retainInstance.internalName: {\r\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\r\n  inheritNonnullIfFalse(expr: ExpressionRef): void {\r\n    // A: `expr` is false-ish -> Q: how did that happen?\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.inheritNonnullIfTrue(getUnaryValue(expr)); // !value -> value must have been true\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.If: {\r\n        let ifTrue = getIfTrue(expr);\r\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\r\n          let ifFalse = getIfFalse(expr);\r\n          if (!ifFalse) break;\r\n          // Logical OR: (if (condition 1 ifFalse))\r\n          // the only way this had become false is if condition and ifFalse are false\r\n          if (\r\n            (getExpressionType(ifTrue) == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\r\n            (getExpressionType(ifTrue) == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\r\n          ) {\r\n            this.inheritNonnullIfFalse(getIfCondition(expr));\r\n            this.inheritNonnullIfFalse(getIfFalse(expr));\r\n          }\r\n\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n          // remember: we want to know how the _entire_ expression became FALSE (!)\r\n          case BinaryOp.EqI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.EqI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\r\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\r\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\r\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true for this to become false\r\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\r\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true for this to become false\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\r\n   * expression might already have overflown and returns `false` only if the operation neglects\r\n   * any possible combination of garbage bits being present.\r\n   */\r\n  canOverflow(expr: ExpressionRef, type: Type): bool {\r\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\r\n    // opportunities here, obviously.\r\n    assert(type != Type.void);\r\n\r\n    // types other than i8, u8, i16, u16 and bool do not overflow\r\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\r\n\r\n    var operand: ExpressionRef;\r\n    switch (getExpressionId(expr)) {\r\n\r\n      // overflows if the local isn't wrapped or the conversion does\r\n      case ExpressionId.LocalGet: {\r\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\r\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\r\n            || canConversionOverflow(local.type, type);\r\n      }\r\n\r\n      // overflows if the value does\r\n      case ExpressionId.LocalSet: { // tee\r\n        assert(isLocalTee(expr));\r\n        return this.canOverflow(getLocalSetValue(expr), type);\r\n      }\r\n\r\n      // overflows if the conversion does (globals are wrapped on set)\r\n      case ExpressionId.GlobalGet: {\r\n        // TODO: this is inefficient because it has to read a string\r\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\r\n        assert(global.kind == ElementKind.GLOBAL);\r\n        return canConversionOverflow(assert((<Global>global).type), type);\r\n      }\r\n\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64:\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64:\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtU32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtU64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64:\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeU32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeU64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64:\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtU32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtU64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64:\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeU32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeU64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: return false;\r\n\r\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\r\n          case BinaryOp.MulI32: {\r\n            return !(\r\n              (\r\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryRight(expr), type)\r\n                  )\r\n                )\r\n              ) || (\r\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryLeft(expr), type)\r\n                  )\r\n                )\r\n              )\r\n            );\r\n          }\r\n\r\n          // result won't overflow if one side is a constant less than this type's mask or one side\r\n          // is wrapped\r\n          case BinaryOp.AndI32: {\r\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\r\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\r\n            return !(\r\n              (\r\n                (\r\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              ) || (\r\n                (\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              )\r\n            );\r\n          }\r\n\r\n          // overflows if the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShlI32: {\r\n            let shift = 32 - type.size;\r\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\r\n                || getConstValueI32(operand) < shift;\r\n          }\r\n\r\n          // overflows if the value does and the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShrI32: {\r\n            let shift = 32 - type.size;\r\n            return this.canOverflow(getBinaryLeft(expr), type) && (\r\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\r\n              getConstValueI32(operand) < shift\r\n            );\r\n          }\r\n\r\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\r\n          // wrapped, it can't overflow.\r\n          case BinaryOp.ShrU32: {\r\n            let shift = 32 - type.size;\r\n            return type.is(TypeFlags.SIGNED)\r\n              ? !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) > shift // must clear MSB\r\n                )\r\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) >= shift // can leave MSB\r\n                );\r\n          }\r\n\r\n          // overflows if any side does\r\n          case BinaryOp.DivU32:\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemU32: {\r\n            return this.canOverflow(getBinaryLeft(expr), type)\r\n                || this.canOverflow(getBinaryRight(expr), type);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: return false;\r\n\r\n          // overflow if the maximum result (32) cannot be represented in the target type\r\n          case UnaryOp.ClzI32:\r\n          case UnaryOp.CtzI32:\r\n          case UnaryOp.PopcntI32: return type.size < 7;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the value cannot be represented in the target type\r\n      case ExpressionId.Const: {\r\n        let value: i32 = 0;\r\n        switch (getExpressionType(expr)) {\r\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\r\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\r\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\r\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\r\n          default: assert(false);\r\n        }\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\r\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\r\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\r\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\r\n          case TypeKind.BOOL: return (value & ~1) != 0;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the conversion does\r\n      case ExpressionId.Load: {\r\n        let fromType: Type;\r\n        let signed = isLoadSigned(expr);\r\n        switch (getLoadBytes(expr)) {\r\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\r\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\r\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\r\n        }\r\n        return canConversionOverflow(fromType, type);\r\n      }\r\n\r\n      // overflows if the result does, which is either\r\n      // - the last expression of the block, by contract, if the block doesn't have a label\r\n      // - the last expression or the value of an inner br if the block has a label (TODO)\r\n      case ExpressionId.Block: {\r\n        if (!getBlockName(expr)) {\r\n          let size = assert(getBlockChildCount(expr));\r\n          let last = getBlockChild(expr, size - 1);\r\n          return this.canOverflow(last, type);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.If: {\r\n        return this.canOverflow(getIfTrue(expr), type)\r\n            || this.canOverflow(assert(getIfFalse(expr)), type);\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.Select: {\r\n        return this.canOverflow(getSelectThen(expr), type)\r\n            || this.canOverflow(getSelectElse(expr), type);\r\n      }\r\n\r\n      // overflows if the call does not return a wrapped value or the conversion does\r\n      case ExpressionId.Call: {\r\n        let program = this.parentFunction.program;\r\n        let instancesByName = program.instancesByName;\r\n        let instanceName = assert(getCallTarget(expr));\r\n        if (instancesByName.has(instanceName)) {\r\n          let instance = instancesByName.get(instanceName)!;\r\n          assert(instance.kind == ElementKind.FUNCTION);\r\n          let returnType = (<Function>instance).signature.returnType;\r\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\r\n              || canConversionOverflow(returnType, type);\r\n        }\r\n        return false; // assume no overflow for builtins\r\n      }\r\n\r\n      // doesn't technically overflow\r\n      case ExpressionId.Unreachable: return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  toString(): string {\r\n    var levels = 0;\r\n    var parent = this.parent;\r\n    while (parent) {\r\n      parent = parent.parent;\r\n      ++levels;\r\n    }\r\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"]\";\r\n  }\r\n}\r\n\r\n/** Tests if a conversion from one type to another can technically overflow. */\r\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\r\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\r\n      || fromType.size > toType.size\r\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\r\n}\r\n\r\n/** Finds all indexes of locals used in the specified expression. */\r\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\r\n  traverse(expr, used, findUsedLocalsVisit);\r\n  return used;\r\n}\r\n\r\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\r\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\r\n  switch (getExpressionId(expr)) {\r\n    case ExpressionId.LocalGet: {\r\n      used.add(getLocalGetIndex(expr));\r\n      break;\r\n    }\r\n    case ExpressionId.LocalSet: {\r\n      used.add(getLocalSetIndex(expr));\r\n      // fall-through for value\r\n    }\r\n    default: traverse(expr, used, findUsedLocalsVisit);\r\n  }\r\n}\r\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  BuiltinSymbols,\r\n  compileCall as compileBuiltinCall,\r\n  compileAbort,\r\n  compileVisitGlobals,\r\n  compileVisitMembers,\r\n  compileRTTI,\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName,\r\n  getLocalGetIndex,\r\n  isLocalTee,\r\n  getLocalSetIndex,\r\n  FeatureFlags,\r\n  needsExplicitUnreachable\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  INSTANCE_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  CommonSymbols,\r\n  INDEX_SUFFIX,\r\n  Feature,\r\n  Target\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  ConstantValueKind,\r\n  OperatorKind,\r\n  DecoratorFlags,\r\n  PropertyPrototype,\r\n  File,\r\n  mangleInternalName\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  Flow,\r\n  LocalFlags,\r\n  findUsedLocals\r\n} from \"./flow\";\r\n\r\nimport {\r\n  Resolver, ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  NamedTypeNode,\r\n  Range,\r\n  DecoratorKind,\r\n  AssertionKind,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FieldDeclaration,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InstanceOfExpression,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ObjectLiteralExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n\r\n  nodeIsConstantValue,\r\n  findDecorator,\r\n  isTypeOmitted,\r\n  ExportDefaultStatement\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64,\r\n  makeMap\r\n} from \"./util\";\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\r\n  sharedMemory: i32 = 0;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** If true, generates an explicit start function. */\r\n  explicitStart: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: i32 = 0;\r\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\r\n  globalAliases: Map<string,string> | null = null;\r\n  /** Additional features to activate. */\r\n  features: Feature = Feature.NONE;\r\n\r\n  /** Hinted optimize level. Not applied by the compiler itself. */\r\n  optimizeLevelHint: i32 = 0;\r\n  /** Hinted shrink level. Not applied by the compiler itself. */\r\n  shrinkLevelHint: i32 = 0;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n\r\n  /** Tests if a specific feature is activated. */\r\n  hasFeature(feature: Feature): bool {\r\n    return (this.features & feature) != 0;\r\n  }\r\n}\r\n\r\n/** Various constraints in expression compilation. */\r\nexport const enum Constraints {\r\n  NONE = 0,\r\n\r\n  /** Must implicitly convert to the target type. */\r\n  CONV_IMPLICIT = 1 << 0,\r\n  /** Must explicitly convert to the target type. */\r\n  CONV_EXPLICIT = 1 << 1,\r\n  /** Must wrap small integer values to match the target type. */\r\n  MUST_WRAP = 1 << 2,\r\n\r\n  /** Indicates that the value will be dropped immediately. */\r\n  WILL_DROP = 1 << 3,\r\n  /** Indicates that the value will be retained immediately. */\r\n  WILL_RETAIN = 1 << 4,\r\n  /** Indicates that static data is preferred. */\r\n  PREFER_STATIC = 1 << 5\r\n}\r\n\r\n/** Runtime features to be activated by the compiler. */\r\nexport const enum RuntimeFeatures {\r\n  NONE = 0,\r\n  /** Requires heap setup. */\r\n  HEAP = 1 << 0,\r\n  /** Requires runtime type information setup. */\r\n  RTTI = 1 << 1,\r\n  /** Requires the built-in globals visitor. */\r\n  visitGlobals = 1 << 2,\r\n  /** Requires the built-in members visitor. */\r\n  visitMembers = 1 << 3\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Resolver reference. */\r\n  get resolver(): Resolver { return this.program.resolver; }\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current control flow. */\r\n  currentFlow: Flow;\r\n  /** Current inline functions stack. */\r\n  currentInlineFunctions: Function[] = [];\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function statements. */\r\n  currentBody: ExpressionRef[];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = [];\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: string[] = [ \"null\" ];\r\n  /** Argument count helper global. */\r\n  argcVar: GlobalRef = 0;\r\n  /** Argument count helper setter. */\r\n  argcSet: FunctionRef = 0;\r\n  /** Requires runtime features. */\r\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\r\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\r\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\r\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\r\n      max(options.memoryBase, 8)\r\n    );\r\n    this.module = Module.create();\r\n    var featureFlags: BinaryenFeatureFlags = 0;\r\n    if (this.options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\r\n    if (this.options.hasFeature(Feature.MUTABLE_GLOBAL)) featureFlags |= FeatureFlags.MutableGloabls;\r\n    // if (this.options.hasFeature(Feature.TRUNC_SAT)) featureFlags |= FeatureFlags.NontrappingFPToInt;\r\n    if (this.options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\r\n    if (this.options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\r\n    if (this.options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\r\n    // if (this.options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\r\n    this.module.setFeatures(featureFlags);\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the main start function\r\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature([], Type.void));\r\n    startFunctionInstance.internalName = \"start\";\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.currentFlow = startFunctionInstance.flow;\r\n    this.currentBody = startFunctionBody;\r\n\r\n    // add a mutable heap and rtti base dummies\r\n    if (options.isWasm64) {\r\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I64, true, module.i64(0));\r\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, true, module.i64(0));\r\n    } else {\r\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I32, true, module.i32(0));\r\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, true, module.i32(0));\r\n    }\r\n\r\n    // compile entry file(s) while traversing reachable elements\r\n    var files = program.filesByName;\r\n    for (let file of files.values()) {\r\n      if (file.source.isEntry) {\r\n        this.compileFile(file);\r\n        this.compileExports(file);\r\n      }\r\n    }\r\n\r\n    // compile the start function if not empty or explicitly requested\r\n    var startIsEmpty = !startFunctionBody.length;\r\n    var explicitStart = options.explicitStart;\r\n    if (!startIsEmpty || explicitStart) {\r\n      let signature = startFunctionInstance.signature;\r\n      if (!startIsEmpty && explicitStart) {\r\n        module.addGlobal(BuiltinSymbols.started, NativeType.I32, true, module.i32(0));\r\n        startFunctionBody.unshift(\r\n          module.if(\r\n            module.global_get(BuiltinSymbols.started, NativeType.I32),\r\n            module.return(),\r\n            module.global_set(BuiltinSymbols.started, module.i32(1))\r\n          )\r\n        );\r\n      }\r\n      let funcRef = module.addFunction(\r\n        startFunctionInstance.internalName,\r\n        this.ensureFunctionType(\r\n          signature.parameterTypes,\r\n          signature.returnType,\r\n          signature.thisType\r\n        ),\r\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n        module.block(null, startFunctionBody)\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n      if (!explicitStart) module.setStart(funcRef);\r\n      else module.addFunctionExport(startFunctionInstance.internalName, \"__start\");\r\n    }\r\n\r\n    // compile runtime features\r\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\r\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\r\n    module.removeGlobal(BuiltinSymbols.rtti_base);\r\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\r\n\r\n    // update the heap base pointer\r\n    var memoryOffset = this.memoryOffset;\r\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n    this.memoryOffset = memoryOffset;\r\n    module.removeGlobal(BuiltinSymbols.heap_base);\r\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\r\n      if (options.isWasm64) {\r\n        module.addGlobal(\r\n          BuiltinSymbols.heap_base,\r\n          NativeType.I64,\r\n          false,\r\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n        );\r\n      } else {\r\n        module.addGlobal(\r\n          BuiltinSymbols.heap_base,\r\n          NativeType.I32,\r\n          false,\r\n          module.i32(i64_low(memoryOffset))\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up memory\r\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\r\n    module.setMemory(\r\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\r\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\r\n        : 0,\r\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\r\n      this.memorySegments,\r\n      options.target,\r\n      \"memory\",\r\n      isSharedMemory\r\n    );\r\n\r\n    // import memory if requested (default memory is named '0' by Binaryen)\r\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\r\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.block(null, []));\r\n\r\n    // import table if requested (default table is named '0' by Binaryen)\r\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\r\n\r\n    // set up module exports\r\n    for (let file of this.program.filesByName.values()) {\r\n      if (file.source.isEntry) this.ensureModuleExports(file);\r\n    }\r\n    return module;\r\n  }\r\n\r\n  // === Exports ==================================================================================\r\n\r\n  /** Applies the respective module exports for the specified file. */\r\n  private ensureModuleExports(file: File): void {\r\n    var members = file.exports;\r\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar)  {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\r\n    }\r\n  }\r\n\r\n  /** Applies the respective module export(s) for the specified element. */\r\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\r\n    switch (element.kind) {\r\n\r\n      // traverse instances\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instances = (<FunctionPrototype>element).instances;\r\n        if (instances) {\r\n          for (let instance of instances.values()) {\r\n            let instanceName = name;\r\n            if (instance.is(CommonFlags.GENERIC)) {\r\n              let fullName = instance.internalName;\r\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n            }\r\n            this.ensureModuleExport(instanceName, instance, prefix);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        let instances = (<ClassPrototype>element).instances;\r\n        if (instances) {\r\n          for (let instance of instances.values()) {\r\n            let instanceName = name;\r\n            if (instance.is(CommonFlags.GENERIC)) {\r\n              let fullName = instance.internalName;\r\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n            }\r\n            this.ensureModuleExport(instanceName, instance, prefix);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getter = (<PropertyPrototype>element).getterPrototype;\r\n        let setter = (<PropertyPrototype>element).setterPrototype;\r\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n\r\n      // export concrete elements\r\n      case ElementKind.GLOBAL: {\r\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_export_a_mutable_global,\r\n            (<Global>element).identifierNode.range\r\n          );\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.ENUMVALUE: {\r\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_export_a_mutable_global,\r\n            (<EnumValue>element).identifierNode.range\r\n          );\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION: {\r\n        let instance = <Function>element;\r\n        let signature = instance.signature;\r\n        if (signature.requiredParameters < signature.parameterTypes.length) {\r\n          // utilize trampoline to fill in omitted arguments\r\n          instance = this.ensureTrampoline(instance);\r\n          this.ensureArgcSet();\r\n        }\r\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = (<Property>element).getterInstance;\r\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        let setter = (<Property>element).setterInstance;\r\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        this.ensureModuleFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\r\n        if (!element.is(CommonFlags.READONLY)) {\r\n          this.ensureModuleFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        // make the class name itself represent its runtime id\r\n        if (!(<Class>element).type.isUnmanaged) {\r\n          let module = this.module;\r\n          let internalName = (<Class>element).internalName;\r\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\r\n          module.addGlobalExport(internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // just traverse members below\r\n      case ElementKind.ENUM:\r\n      case ElementKind.NAMESPACE:\r\n      case ElementKind.FILE:\r\n      case ElementKind.TYPEDEFINITION: break;\r\n\r\n      default: assert(false); // unexpected module export\r\n    }\r\n\r\n    // traverse members\r\n    var members = element.members;\r\n    if (members) {\r\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\r\n        ? INSTANCE_DELIMITER\r\n        : STATIC_DELIMITER\r\n      );\r\n      if (\r\n        element.kind == ElementKind.NAMESPACE ||\r\n        element.kind == ElementKind.FILE\r\n      ) {\r\n        for (let member of members.values()) {\r\n          if (!member.is(CommonFlags.EXPORT)) continue;\r\n          this.ensureModuleExport(member.name, member, subPrefix);\r\n        }\r\n      } else {\r\n        for (let member of members.values()) {\r\n          if (member.is(CommonFlags.PRIVATE)) continue;\r\n          this.ensureModuleExport(member.name, member, subPrefix);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes a function to get the value of a field of an exported class. */\r\n  private ensureModuleFieldGetter(name: string, field: Field): void {\r\n    var module = this.module;\r\n    var type = field.type;\r\n    var usizeType = this.options.usizeType;\r\n    var loadExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\r\n      module.local_get(0, usizeType.toNativeType()),\r\n      type.toNativeType(), field.memoryOffset\r\n    );\r\n    // a user-defined getter would return a retained value, so:\r\n    if (type.isManaged) loadExpr = this.makeRetain(loadExpr);\r\n    module.addFunction(\r\n      name,\r\n      this.ensureFunctionType(null, type, usizeType),\r\n      null,\r\n      loadExpr\r\n    );\r\n    module.addFunctionExport(name, name);\r\n  }\r\n\r\n  /** Makes a function to set the value of a field of an exported class. */\r\n  private ensureModuleFieldSetter(name: string, field: Field): void {\r\n    var module = this.module;\r\n    var type = field.type;\r\n    var nativeType = type.toNativeType();\r\n    var usizeType = this.options.usizeType;\r\n    var nativeSizeType = usizeType.toNativeType();\r\n    var valueExpr = module.local_get(1, nativeType);\r\n    if (type.isManaged) {\r\n      valueExpr = this.makeRetainRelease(\r\n        module.load(type.byteSize, false, // oldRef\r\n          module.local_get(0, nativeSizeType),\r\n          nativeType, field.memoryOffset\r\n        ),\r\n        valueExpr // newRef\r\n      );\r\n    }\r\n    module.addFunction(\r\n      name,\r\n      this.ensureFunctionType([ type ], Type.void, usizeType),\r\n      null,\r\n      module.store(\r\n        type.byteSize,\r\n        module.local_get(0, nativeSizeType),\r\n        valueExpr,\r\n        nativeType,\r\n        field.memoryOffset\r\n      )\r\n    );\r\n    module.addFunctionExport(name, name);\r\n  }\r\n\r\n  // === Elements =================================================================================\r\n\r\n  /** Compiles any element. */\r\n  compileElement(element: Element, compileMembers: bool = true): void {\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        this.compileGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        this.compileEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        if (!element.is(CommonFlags.GENERIC)) {\r\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        if (!element.is(CommonFlags.GENERIC)) {\r\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\r\n        if (getterPrototype) {\r\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\r\n        }\r\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\r\n        if (setterPrototype) {\r\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE:\r\n      case ElementKind.TYPEDEFINITION:\r\n      case ElementKind.ENUMVALUE: break;\r\n      default: assert(false, ElementKind[element.kind]);\r\n    }\r\n    if (compileMembers) this.compileMembers(element);\r\n  }\r\n\r\n  /** Compiles an element's members. */\r\n  compileMembers(element: Element): void {\r\n    var members = element.members;\r\n    if (members) for (let element of members.values()) this.compileElement(element);\r\n  }\r\n\r\n  /** Compiles a file's exports. */\r\n  compileExports(file: File): void {\r\n    var exports = file.exports;\r\n    if (exports) for (let element of exports.values()) this.compileElement(element);\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar) {\r\n      for (let exportStar of exportsStar) {\r\n        this.compileFile(exportStar);\r\n        this.compileExports(exportStar);\r\n      }\r\n    }\r\n  }\r\n\r\n  // files\r\n\r\n  /** Compiles the file matching the specified path. */\r\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var file: File;\r\n    var filesByName = this.program.filesByName;\r\n    var pathWithIndex: string;\r\n    if (filesByName.has(normalizedPathWithoutExtension)) {\r\n      file = filesByName.get(normalizedPathWithoutExtension)!;\r\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\r\n      file = filesByName.get(pathWithIndex)!;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.File_0_not_found,\r\n        reportNode.range, normalizedPathWithoutExtension\r\n      );\r\n      return;\r\n    }\r\n    this.compileFile(file);\r\n  }\r\n\r\n  /** Compiles the specified file. */\r\n  compileFile(file: File): void {\r\n    if (file.is(CommonFlags.COMPILED)) return;\r\n    file.set(CommonFlags.COMPILED);\r\n\r\n    // compile top-level statements within the file's start function\r\n    var startFunction = file.startFunction;\r\n    var previousBody = this.currentBody;\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.currentBody = startFunctionBody;\r\n\r\n    // compile top-level statements\r\n    var previousFlow = this.currentFlow;\r\n    var flow = startFunction.flow;\r\n    this.currentFlow = flow;\r\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\r\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\r\n    }\r\n    this.finishAutoreleases(flow, startFunctionBody);\r\n    this.currentFlow = previousFlow;\r\n    this.currentBody = previousBody;\r\n\r\n    // if top-level statements are present, make the per-file start function and call it in start\r\n    if (startFunctionBody.length) {\r\n      let module = this.module;\r\n      let locals = startFunction.localsByIndex;\r\n      let numLocals = locals.length;\r\n      let varTypes = new Array<NativeType>(numLocals);\r\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\r\n      module.addFunction(\r\n        startFunction.internalName,\r\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\r\n        varTypes,\r\n        startFunctionBody.length > 1\r\n          ? module.block(null, startFunctionBody)\r\n          : startFunctionBody[0]\r\n      );\r\n      previousBody.push(\r\n        module.call(startFunction.internalName, null, NativeType.None)\r\n      );\r\n    }\r\n  }\r\n\r\n  // === Globals ==================================================================================\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED)) return true;\r\n    global.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var initExpr: ExpressionRef = 0;\r\n    var initAutoreleaseSkipped: bool = false;\r\n    var typeNode = global.typeNode;\r\n    var initializerNode = global.initializerNode;\r\n\r\n    if (!global.is(CommonFlags.RESOLVED)) {\r\n\r\n      // Resolve type if annotated\r\n      if (typeNode) {\r\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\r\n        if (!resolvedType) return false;\r\n        if (resolvedType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            typeNode.range\r\n          );\r\n          return false;\r\n        }\r\n        global.setType(resolvedType);\r\n\r\n      // Otherwise infer type from initializer\r\n      } else if (initializerNode) {\r\n        let previousFlow = this.currentFlow;\r\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = global.file.startFunction.flow;\r\n        }\r\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\r\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN\r\n        );\r\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\r\n        this.currentFlow = previousFlow;\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          return false;\r\n        }\r\n        global.setType(this.currentType);\r\n\r\n      // Error if there's neither a type nor an initializer\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          global.identifierNode.range.atEnd\r\n        );\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\r\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n      if (global.internalName == BuiltinSymbols.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\r\n      else if (global.internalName == BuiltinSymbols.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\r\n      return true;\r\n    }\r\n\r\n    var type = global.type;\r\n    var nativeType = type.toNativeType();\r\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\r\n\r\n    // Handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // Constant global or mutable globals enabled\r\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        mangleImportName(global, global.declaration);\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          mangleImportName_moduleName,\r\n          mangleImportName_elementName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // Importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          global.declaration.range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // The MVP does not yet support initializer expressions other than constant values (and constant\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // Evaluate initializer if present\r\n    if (initializerNode) {\r\n      if (!initExpr) {\r\n        let previousFlow = this.currentFlow;\r\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = global.file.startFunction.flow;\r\n        }\r\n        initExpr = this.compileExpression(initializerNode, type,\r\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\r\n        );\r\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\r\n        this.currentFlow = previousFlow;\r\n      }\r\n\r\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n        if (isDeclaredConstant) {\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\r\n        } else {\r\n          initializeInStart = true;\r\n        }\r\n      }\r\n\r\n      // Explicitly inline if annotated\r\n      if (isDeclaredInline) {\r\n        if (initializeInStart) {\r\n          this.warning(\r\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\r\n            initializerNode.range\r\n          );\r\n        } else {\r\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\r\n          let exprType = getExpressionType(initExpr);\r\n          switch (exprType) {\r\n            case NativeType.I32: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\r\n              break;\r\n            }\r\n            case NativeType.I64: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(\r\n                getConstValueI64Low(initExpr),\r\n                getConstValueI64High(initExpr)\r\n              );\r\n              break;\r\n            }\r\n            case NativeType.F32: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF32(initExpr);\r\n              break;\r\n            }\r\n            case NativeType.F64: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF64(initExpr);\r\n              break;\r\n            }\r\n            default: {\r\n              assert(false);\r\n              return false;\r\n            }\r\n          }\r\n          global.set(CommonFlags.INLINED); // inline the value from now on\r\n        }\r\n      }\r\n\r\n    // Initialize to zero if there's no initializer\r\n    } else {\r\n      initExpr = type.toNativeZero(module);\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      if (isDeclaredInline) {\r\n        this.error(\r\n          DiagnosticCode.Decorator_0_is_not_valid_here,\r\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\r\n        );\r\n      }\r\n      module.addGlobal(internalName, nativeType, true, type.toNativeZero(module));\r\n      if (type.isManaged && !initAutoreleaseSkipped) initExpr = this.makeRetain(initExpr);\r\n      this.currentBody.push(\r\n        module.global_set(internalName, initExpr)\r\n      );\r\n    } else if (!isDeclaredInline) { // compile normally\r\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // === Enums ====================================================================================\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n    var previousValueIsMut = false;\r\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueNode = val.valueNode;\r\n        val.set(CommonFlags.COMPILED);\r\n        let previousFlow = this.currentFlow;\r\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = element.file.startFunction.flow;\r\n        }\r\n        let initExpr: ExpressionRef;\r\n        if (valueNode) {\r\n          initExpr = this.compileExpression(valueNode, Type.i32,\r\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\r\n          );\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            initExpr = module.precomputeExpression(initExpr);\r\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n              if (element.is(CommonFlags.CONST)) {\r\n                this.error(\r\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                  valueNode.range\r\n                );\r\n              }\r\n              initInStart = true;\r\n            }\r\n          }\r\n        } else if (previousValue == null) {\r\n          initExpr = module.i32(0);\r\n        } else {\r\n          if (previousValueIsMut) {\r\n            this.error(\r\n              DiagnosticCode.Enum_member_must_have_initializer,\r\n              (<EnumValue>member).identifierNode.range.atEnd\r\n            );\r\n          }\r\n          initExpr = module.binary(BinaryOp.AddI32,\r\n            module.global_get(previousValue.internalName, NativeType.I32),\r\n            module.i32(1)\r\n          );\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.error(\r\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                member.declaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n        }\r\n        this.currentFlow = previousFlow;\r\n        if (initInStart) {\r\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\r\n          this.currentBody.push(\r\n            this.makeGlobalAssignment(val, initExpr, false)\r\n          );\r\n          previousValueIsMut = true;\r\n        } else {\r\n          if (isInline) {\r\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\r\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\r\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n            }\r\n          } else {\r\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n          }\r\n          val.isImmutable = true;\r\n          previousValueIsMut = false;\r\n        }\r\n        previousValue = <EnumValue>val;\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // === Functions ================================================================================\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: NamedTypeNode[],\r\n    contextualTypeArguments: Map<string,Type> = makeMap(),\r\n    alternativeReportNode: Node | null = null\r\n  ): Function | null {\r\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\r\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      prototype.parent, // relative to itself\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return null;\r\n    if (!this.compileFunction(instance)) return null; // reports\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  ensureFunctionType(\r\n    parameterTypes: Type[] | null,\r\n    returnType: Type,\r\n    thisType: Type | null = null\r\n  ): FunctionTypeRef {\r\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    if (parameterTypes) {\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        paramTypes[index] = parameterTypes[i].toNativeType();\r\n      }\r\n    }\r\n    var resultType = returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\r\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles the body of a function within the specified flow. */\r\n  compileFunctionBody(\r\n    /** Function to compile. */\r\n    instance: Function,\r\n    /** Target array of statements. */\r\n    stmts: ExpressionRef[] | null = null\r\n  ): ExpressionRef[] {\r\n    var module = this.module;\r\n    var bodyNode = assert(instance.prototype.bodyNode);\r\n    var returnType = instance.signature.returnType;\r\n    var flow = this.currentFlow;\r\n\r\n    // compile statements\r\n    if (bodyNode.kind == NodeKind.BLOCK) {\r\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\r\n    } else {\r\n      // must be an expression statement if not a block\r\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\r\n\r\n      // must be an arrow function\r\n      assert(instance.prototype.arrowKind);\r\n\r\n      // none of the following can be an arrow function\r\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\r\n\r\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      if (!stmts) stmts = [ expr ];\r\n      else stmts.push(expr);\r\n      if (!flow.is(FlowFlags.TERMINATES)) { // TODO: detect if returning an autorelease local?\r\n        let indexBefore = stmts.length;\r\n        this.performAutoreleases(flow, stmts);\r\n        this.finishAutoreleases(flow, stmts);\r\n        let canOverflow = flow.canOverflow(expr, returnType);\r\n        let nonNull = flow.isNonnull(expr, returnType);\r\n        if (stmts.length > indexBefore) {\r\n          let temp = flow.getAndFreeTempLocal(returnType);\r\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\r\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\r\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\r\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\r\n        }\r\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\r\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\r\n      }\r\n    }\r\n\r\n    // make constructors return their instance pointer\r\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\r\n      let nativeSizeType = this.options.nativeSizeType;\r\n      assert(instance.is(CommonFlags.INSTANCE));\r\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n\r\n      if (!flow.is(FlowFlags.TERMINATES)) {\r\n        let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n\r\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\r\n        if (!flow.is(FlowFlags.ALLOCATES)) {\r\n          // {\r\n          //   if (!this) this = <ALLOC>\r\n          //   this.a = X\r\n          //   this.b = Y\r\n          // }\r\n          stmts.push(\r\n            module.if(\r\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n                module.local_get(thisLocal.index, nativeSizeType)\r\n              ),\r\n              module.local_set(thisLocal.index,\r\n                this.makeRetain(\r\n                  this.makeAllocation(<Class>classInstance)\r\n                ),\r\n              )\r\n            )\r\n          );\r\n          this.makeFieldInitialization(<Class>classInstance, stmts);\r\n        }\r\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\r\n        this.finishAutoreleases(flow, stmts);\r\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\r\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\r\n      }\r\n\r\n      // check that super has been called if this is a derived class\r\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\r\n        this.error(\r\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\r\n          instance.prototype.declaration.range\r\n        );\r\n      }\r\n\r\n    // if this is a normal function, make sure that all branches terminate\r\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\r\n      this.error(\r\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n        instance.prototype.functionTypeNode.returnType.range\r\n      );\r\n    }\r\n\r\n    return stmts;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\r\n\r\n    var previousType = this.currentType; // remember to retain it if compiling a function lazily\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var signature = instance.signature;\r\n    var bodyNode = instance.prototype.bodyNode;\r\n\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var funcRef: FunctionRef;\r\n\r\n    // concrete function\r\n    if (bodyNode) {\r\n\r\n      // must not be ambient\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          instance.identifierNode.range\r\n        );\r\n      }\r\n\r\n      // cannot have an annotated external name\r\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\r\n        let decoratorNodes = instance.decoratorNodes;\r\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          decorator.range\r\n        );\r\n      }\r\n\r\n      // compile body in this function's context\r\n      let previousFlow = this.currentFlow;\r\n      let flow = instance.flow;\r\n      this.currentFlow = flow;\r\n      let stmts = new Array<ExpressionRef>();\r\n\r\n      // retain each argument for as long as the function lives\r\n      let index = 0;\r\n      let thisType = signature.thisType;\r\n      if (thisType) {\r\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\r\n        ++index;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\r\n        let type = parameterTypes[i];\r\n        if (type.isManaged) {\r\n          stmts.push(\r\n            module.drop(\r\n              this.makeRetain(\r\n                module.local_get(index, type.toNativeType())\r\n              )\r\n            )\r\n          );\r\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\r\n        }\r\n      }\r\n\r\n      this.compileFunctionBody(instance, stmts);\r\n      if (!flow.is(FlowFlags.TERMINATES)) {\r\n        this.performAutoreleases(flow, stmts);\r\n        this.finishAutoreleases(flow, stmts);\r\n      }\r\n      this.currentFlow = previousFlow;\r\n\r\n      // create the function\r\n      funcRef = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        flatten(module, stmts, instance.signature.returnType.toNativeType())\r\n      );\r\n\r\n    // imported function\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          instance.identifierNode.range\r\n        );\r\n      }\r\n\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\r\n\r\n      // create the import\r\n      funcRef = module.addFunctionImport(\r\n        instance.internalName,\r\n        mangleImportName_moduleName,\r\n        mangleImportName_elementName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    instance.finalize(module, funcRef);\r\n    this.currentType = previousType;\r\n    return true;\r\n  }\r\n\r\n  // === Classes ==================================================================================\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: NamedTypeNode[],\r\n    contextualTypeArguments: Map<string,Type> = makeMap(),\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = this.resolver.resolveClassInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      prototype.parent, // relative to itself\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n    var prototype = instance.prototype;\r\n    var staticMembers = (<ClassPrototype>prototype).members;\r\n    if (staticMembers) {\r\n      for (let element of staticMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.GLOBAL: {\r\n            this.compileGlobal(<Global>element);\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                (<FunctionPrototype>element).identifierNode\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY_PROTOTYPE: {\r\n            let getter = (<PropertyPrototype>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                getter.identifierNode\r\n              );\r\n            }\r\n            let setter = (<PropertyPrototype>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                setter.identifierNode\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n          }\r\n        }\r\n      }\r\n    }\r\n    var ctorInstance = instance.constructorInstance;\r\n    if (ctorInstance) this.compileFunction(ctorInstance);\r\n    var instanceMembers = instance.members;\r\n    if (instanceMembers) {\r\n      for (let element of instanceMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(instance.contextualTypeArguments),\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            element.set(CommonFlags.COMPILED);\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterInstance;\r\n            if (getter) this.compileFunction(getter);\r\n            let setter = (<Property>element).setterInstance;\r\n            if (setter) this.compileFunction(setter);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: NamedTypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // === Memory ===================================================================================\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\r\n  ensureStaticString(stringValue: string): ExpressionRef {\r\n    var program = this.program;\r\n    var rtHeaderSize = program.runtimeHeaderSize;\r\n    var stringInstance = assert(program.stringInstance);\r\n    var stringSegment: MemorySegment;\r\n    var segments = this.stringSegments;\r\n    if (segments.has(stringValue)) {\r\n      stringSegment = segments.get(stringValue)!; // reuse\r\n    } else {\r\n      let length = stringValue.length;\r\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\r\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\r\n      for (let i = 0; i < length; ++i) {\r\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\r\n      }\r\n      stringSegment = this.addMemorySegment(buffer);\r\n      segments.set(stringValue, stringSegment);\r\n    }\r\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\r\n    this.currentType = stringInstance.type;\r\n    if (this.options.isWasm64) {\r\n      return this.module.i64(i64_low(ref), i64_high(ref));\r\n    } else {\r\n      assert(i64_is_u32(ref));\r\n      return this.module.i32(i64_low(ref));\r\n    }\r\n  }\r\n\r\n  ensureStaticArrayBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\r\n    var program = this.program;\r\n    var length = values.length;\r\n    var byteSize = elementType.byteSize;\r\n    var byteLength = length * byteSize;\r\n    var bufferInstance = assert(program.arrayBufferInstance);\r\n    var runtimeHeaderSize = program.runtimeHeaderSize;\r\n\r\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\r\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\r\n    var pos = runtimeHeaderSize;\r\n    var nativeType = elementType.toNativeType();\r\n    switch (nativeType) {\r\n      case NativeType.I32: {\r\n        switch (byteSize) {\r\n          case 1: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI8(getConstValueI32(value), buf, pos);\r\n              pos += 1;\r\n            }\r\n            break;\r\n          }\r\n          case 2: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI16(getConstValueI32(value), buf, pos);\r\n              pos += 2;\r\n            }\r\n            break;\r\n          }\r\n          case 4: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI32(getConstValueI32(value), buf, pos);\r\n              pos += 4;\r\n            }\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF32(getConstValueF32(value), buf, pos);\r\n          pos += 4;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF64(getConstValueF64(value), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    assert(pos == buf.length);\r\n\r\n    return this.addMemorySegment(buf);\r\n  }\r\n\r\n  ensureStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\r\n    var program = this.program;\r\n    var runtimeHeaderSize = program.runtimeHeaderSize;\r\n    var arrayPrototype = assert(program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\r\n    var arrayInstanceSize = arrayInstance.currentMemoryOffset;\r\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\r\n    var arrayLength = i32(bufferLength / elementType.byteSize);\r\n\r\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\r\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\r\n\r\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\r\n    assert(!program.options.isWasm64); // TODO\r\n    assert(arrayInstance.writeField(\"data\", bufferAddress32, buf, runtimeHeaderSize));\r\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\r\n    assert(arrayInstance.writeField(\"dataLength\", bufferLength, buf, runtimeHeaderSize));\r\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\r\n\r\n    return this.addMemorySegment(buf);\r\n  }\r\n\r\n  // === Table ====================================================================================\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func.internalName);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // === Statements ===============================================================================\r\n\r\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\r\n    if (statement.kind == NodeKind.EXPORTDEFAULT) {\r\n      statement = (<ExportDefaultStatement>statement).declaration;\r\n    }\r\n    switch (statement.kind) {\r\n      case NodeKind.CLASSDECLARATION: {\r\n        let memberStatements = (<ClassDeclaration>statement).members;\r\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\r\n          this.compileTopLevelStatement(memberStatements[i], body);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.ENUMDECLARATION: {\r\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\r\n        assert(element.kind == ElementKind.ENUM);\r\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case NodeKind.NAMESPACEDECLARATION: {\r\n        let memberStatements = (<NamespaceDeclaration>statement).members;\r\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\r\n          this.compileTopLevelStatement(memberStatements[i], body);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        let declarations = (<VariableStatement>statement).declarations;\r\n        for (let i = 0, k = declarations.length; i < k; ++i) {\r\n          let element = this.program.getElementByDeclaration(declarations[i]);\r\n          assert(element.kind == ElementKind.GLOBAL);\r\n          if (\r\n            !element.is(CommonFlags.AMBIENT) && // delay imports\r\n            !element.hasDecorator(DecoratorFlags.LAZY)\r\n          ) this.compileGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.FIELDDECLARATION: {\r\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\r\n        if (element.kind == ElementKind.GLOBAL) { // static\r\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.EXPORT: {\r\n        if ((<ExportStatement>statement).normalizedPath != null) {\r\n          this.compileFileByPath(\r\n            <string>(<ExportStatement>statement).normalizedPath,\r\n            <StringLiteralExpression>(<ExportStatement>statement).path\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.IMPORT: {\r\n        this.compileFileByPath(\r\n          (<ImportStatement>statement).normalizedPath,\r\n          (<ImportStatement>statement).path\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTIONDECLARATION:\r\n      case NodeKind.METHODDECLARATION:\r\n      case NodeKind.INTERFACEDECLARATION:\r\n      case NodeKind.INDEXSIGNATUREDECLARATION:\r\n      case NodeKind.TYPEDECLARATION: break;\r\n      default: { // otherwise a top-level statement that is part of the start function's body\r\n        let stmt = this.compileStatement(statement);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  compileStatement(\r\n    statement: Statement,\r\n    isLastInBody: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var stmt: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        stmt = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        stmt = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        stmt = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        stmt = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!stmt) stmt = module.nop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // TODO: integrate inner type declaration into flow\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          statement.range\r\n        );\r\n        stmt = module.unreachable();\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        stmt = module.unreachable();\r\n      }\r\n    }\r\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\r\n    return stmt;\r\n  }\r\n\r\n  compileStatements(\r\n    statements: Statement[],\r\n    isBody: bool = false,\r\n    stmts: ExpressionRef[] | null = null\r\n  ): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    if (!stmts) {\r\n      stmts = new Array<ExpressionRef>(numStatements);\r\n      stmts.length = 0;\r\n    }\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\r\n      switch (getExpressionId(stmt)) {\r\n        case ExpressionId.Block: {\r\n          if (!getBlockName(stmt)) {\r\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: stmts.push(stmt);\r\n        case ExpressionId.Nop:\r\n      }\r\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\r\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\r\n        break;\r\n      }\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  compileBlockStatement(\r\n    statement: BlockStatement\r\n  ): ExpressionRef {\r\n    var statements = statement.statements;\r\n    var outerFlow = this.currentFlow;\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n\r\n    var stmts = this.compileStatements(statements);\r\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.inherit(innerFlow); // TODO: only if not terminated?\r\n    this.currentFlow = outerFlow;\r\n    return flatten(this.module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileBreakStatement(\r\n    statement: BreakStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    var flow = this.currentFlow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.performAutoreleases(flow, stmts);\r\n    var parent = flow.parent;\r\n    while (parent !== null && parent.breakLabel == breakLabel) {\r\n      this.performAutoreleases(parent, stmts, /* clearFlags */ false);\r\n      parent = parent.parent;\r\n    }\r\n    flow.freeScopedLocals();\r\n    stmts.push(module.br(breakLabel));\r\n    flow.set(FlowFlags.BREAKS);\r\n    return flatten(module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileContinueStatement(\r\n    statement: ContinueStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFlow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.performAutoreleases(flow, stmts);\r\n    var current: Flow | null = flow.parent;\r\n    while (current && current.continueLabel === continueLabel) {\r\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\r\n      current = current.parent;\r\n    }\r\n    flow.freeScopedLocals();\r\n    stmts.push(module.br(continueLabel));\r\n    return flatten(module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileDoStatement(\r\n    statement: DoStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var outerFlow = this.currentFlow;\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    if (statement.statement.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\r\n    } else {\r\n      stmts.push(\r\n        this.compileStatement(statement.statement)\r\n      );\r\n    }\r\n    var condExpr = module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpression(statement.condition, Type.i32),\r\n        this.currentType\r\n      )\r\n    );\r\n    var alwaysFalse = false;\r\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\r\n      assert(getExpressionType(condExpr) == NativeType.I32);\r\n      if (!getConstValueI32(condExpr)) alwaysFalse = true;\r\n    }\r\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\r\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\r\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\r\n\r\n    // (block $break            ;; (1) skip if no breaks\r\n    //  (loop $continue         ;; (2) skip if skipping (4) + no continues\r\n    //   (...)                  ;; (3)\r\n    //   (br_if cond $continue) ;; (4) skip if (3) does not fall through or always false\r\n    //  )\r\n    // )\r\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\r\n\r\n    if (fallsThrough && !alwaysFalse) { // (4)\r\n      stmts.push(module.br(continueLabel, condExpr));\r\n    }\r\n    var expr = flatten(module, stmts, NativeType.None);\r\n    if (fallsThrough && !alwaysFalse || continues) { // (2)\r\n      expr = module.loop(continueLabel, expr);\r\n    }\r\n    if (breaks) { // (1)\r\n      expr = module.block(breakLabel, [ expr ]);\r\n    }\r\n\r\n    // Switch back to the parent flow\r\n    if (!terminates) this.performAutoreleases(innerFlow, stmts);\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    outerFlow.inherit(innerFlow);\r\n    this.currentFlow = outerFlow;\r\n    return expr;\r\n  }\r\n\r\n  compileEmptyStatement(\r\n    statement: EmptyStatement\r\n  ): ExpressionRef {\r\n    return this.module.nop();\r\n  }\r\n\r\n  compileExpressionStatement(\r\n    statement: ExpressionStatement\r\n  ): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\r\n  }\r\n\r\n  compileForStatement(\r\n    statement: ForStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // Set up and use the inner flow\r\n    var outerFlow = this.currentFlow;\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n\r\n    // Compile the initializer\r\n    var initializer = statement.initializer;\r\n    var initExpr: ExpressionRef = 0;\r\n    if (initializer) initExpr = this.compileStatement(initializer);\r\n\r\n    // Compile the condition\r\n    var condExpr: ExpressionRef = 0;\r\n    var alwaysTrue = false;\r\n    if (statement.condition) {\r\n      condExpr = module.precomputeExpression(\r\n        this.makeIsTrueish(\r\n          this.compileExpression(<Expression>statement.condition, Type.bool),\r\n          this.currentType\r\n        )\r\n      );\r\n      // Simplify if the condition is constant\r\n      if (getExpressionId(condExpr) == ExpressionId.Const) {\r\n        assert(getExpressionType(condExpr) == NativeType.I32);\r\n        if (getConstValueI32(condExpr) == /* false */ 0) {\r\n          let stmts = new Array<ExpressionRef>();\r\n          if (initExpr) stmts.push(initExpr);\r\n          this.performAutoreleases(innerFlow, stmts);\r\n          innerFlow.freeScopedLocals();\r\n          outerFlow.popBreakLabel();\r\n          this.currentFlow = outerFlow;\r\n          return flatten(module, stmts, NativeType.None);\r\n        }\r\n        alwaysTrue = true;\r\n      }\r\n    } else { // Omitted condition is always true\r\n      condExpr = module.i32(1);\r\n      alwaysTrue = true;\r\n    }\r\n    innerFlow.inheritNonnullIfTrue(condExpr);\r\n\r\n    // Compile incrementor\r\n    var incrementor = statement.incrementor;\r\n    var incrExpr: ExpressionRef = 0;\r\n    if (incrementor) incrExpr = this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP);\r\n\r\n    // Compile body (break: drop out, continue: fall through to incrementor, + loop)\r\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label; innerFlow.breakLabel = breakLabel;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n    var loopLabel = \"loop|\" + label;\r\n    var bodyStatement = statement.statement;\r\n    var stmts = new Array<ExpressionRef>();\r\n    if (bodyStatement.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>bodyStatement).statements, false, stmts);\r\n    } else {\r\n      stmts.push(this.compileStatement(bodyStatement));\r\n    }\r\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\r\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\r\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\r\n\r\n    // (block $break          ;; (1) skip label (needed anyway) if skipping (4) + no breaks\r\n    //  (initializer)         ;; (2) [may be empty]\r\n    //  (loop $loop           ;; (3) skip if (6) does not fall through + no continues\r\n    //   (br_if !cond $break) ;; (4) skip if always true\r\n    //   (block $continue     ;; (5) skip if no continues or nothing else than continue\r\n    //    (...)               ;; (6)\r\n    //   )\r\n    //   (incrementor)        ;; (7) skip if skipping (3) [may be empty]\r\n    //   (br $loop)           ;; (8) skip if skipping (3)\r\n    //  )\r\n    // )\r\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\r\n    var needsLabel = !alwaysTrue || breaks;\r\n\r\n    var loop = new Array<ExpressionRef>();\r\n    if (!alwaysTrue) { // (4)\r\n      loop.push(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\r\n    }\r\n    if (continues) { // (5)\r\n      if (stmts.length > 1 || getExpressionId(stmts[0]) != ExpressionId.Break) { // otherwise lonely continue\r\n        loop.push(module.block(continueLabel, stmts));\r\n      }\r\n    } else {\r\n      for (let i = 0, k = stmts.length; i < k; ++i) loop.push(stmts[i]);\r\n    }\r\n    var expr: ExpressionRef;\r\n    if (fallsThrough || continues) { // (3)\r\n      if (incrExpr) loop.push(incrExpr); // (7)\r\n      this.performAutoreleases(innerFlow, loop);\r\n      loop.push(module.br(loopLabel)); // (8)\r\n      if (initExpr) { // (2)\r\n        expr = module.block(needsLabel ? breakLabel : null, [\r\n          initExpr,\r\n          module.loop(loopLabel, module.block(null, loop))\r\n        ]);\r\n      } else {\r\n        expr = module.block(needsLabel ? breakLabel : null, [\r\n          module.loop(loopLabel, flatten(module, loop, NativeType.None))\r\n        ]);\r\n      }\r\n    } else {\r\n      if (initExpr) loop.unshift(initExpr); // (2)\r\n      this.performAutoreleases(innerFlow, loop);\r\n      expr = module.block(needsLabel ? breakLabel : null, loop);\r\n    }\r\n\r\n    // Switch back to the parent flow\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\r\n    else outerFlow.inheritConditional(innerFlow);\r\n    this.currentFlow = outerFlow;\r\n    return expr;\r\n  }\r\n\r\n  compileIfStatement(\r\n    statement: IfStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpression(statement.condition, Type.bool),\r\n        this.currentType\r\n      )\r\n    );\r\n\r\n    // Try to eliminate unnecesssary branches if the condition is constant\r\n    if (\r\n      getExpressionId(condExpr) == ExpressionId.Const &&\r\n      getExpressionType(condExpr) == NativeType.I32\r\n    ) {\r\n      return getConstValueI32(condExpr)\r\n        ? this.compileStatement(ifTrue)\r\n        : ifFalse\r\n          ? this.compileStatement(ifFalse)\r\n          : module.nop();\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var ifTrueStmts = new Array<ExpressionRef>();\r\n    var ifTrueFlow = outerFlow.fork();\r\n    this.currentFlow = ifTrueFlow;\r\n    ifTrueFlow.inheritNonnullIfTrue(condExpr);\r\n    if (ifTrue.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, ifTrueStmts);\r\n    } else {\r\n      ifTrueStmts.push(this.compileStatement(ifTrue));\r\n    }\r\n    if (!ifTrueFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifTrueFlow, ifTrueStmts);\r\n    ifTrueFlow.freeScopedLocals();\r\n    this.currentFlow = outerFlow;\r\n\r\n    if (ifFalse) {\r\n      let ifFalseFlow = outerFlow.fork();\r\n      this.currentFlow = ifFalseFlow;\r\n      ifFalseFlow.inheritNonnullIfFalse(condExpr);\r\n      let ifFalseStmts = new Array<ExpressionRef>();\r\n      if (ifFalse.kind == NodeKind.BLOCK) {\r\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, ifFalseStmts);\r\n      } else {\r\n        ifFalseStmts.push(this.compileStatement(ifFalse));\r\n      }\r\n      if (!ifFalseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifFalseFlow, ifFalseStmts);\r\n      ifFalseFlow.freeScopedLocals();\r\n      this.currentFlow = outerFlow;\r\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\r\n      return module.if(condExpr,\r\n        flatten(module, ifTrueStmts, NativeType.None),\r\n        flatten(module, ifFalseStmts, NativeType.None)\r\n      );\r\n    } else {\r\n      outerFlow.inheritConditional(ifTrueFlow);\r\n      if (ifTrueFlow.is(FlowFlags.TERMINATES)) outerFlow.inheritNonnullIfFalse(condExpr);\r\n      return module.if(condExpr,\r\n        flatten(module, ifTrueStmts, NativeType.None)\r\n      );\r\n    }\r\n    // TODO: Detect neglected condition\r\n    // if (!foo) {\r\n    //   foo = [notNull]\r\n    // }\r\n    // foo // is possibly null\r\n  }\r\n\r\n  compileReturnStatement(\r\n    statement: ReturnStatement,\r\n    isLastInBody: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var expr: ExpressionRef = 0;\r\n    var flow = this.currentFlow;\r\n    var returnType = flow.returnType;\r\n\r\n    // Remember that this flow returns\r\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\r\n\r\n    var valueExpression = statement.value;\r\n    if (valueExpression) {\r\n      if (returnType == Type.void) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n          valueExpression.range, this.currentType.toString(), returnType.toString()\r\n        );\r\n        this.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let constraints = Constraints.CONV_IMPLICIT;\r\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\r\n      expr = this.compileExpression(valueExpression, returnType, constraints | Constraints.WILL_RETAIN);\r\n\r\n      // when returning a local, and it is already retained, skip the final set\r\n      // of retaining it as the return value and releasing it as a variable\r\n      if (!this.skippedAutoreleases.has(expr)) {\r\n        if (returnType.isManaged) {\r\n          if (getExpressionId(expr) == ExpressionId.LocalGet) {\r\n            if (flow.isAnyLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED)) {\r\n              flow.unsetLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED);\r\n              this.skippedAutoreleases.add(expr);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // remember return states\r\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\r\n\r\n    } else if (returnType != Type.void) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        statement.range, \"void\", returnType.toString()\r\n      );\r\n      expr = module.unreachable();\r\n    }\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.performAutoreleases(flow, stmts);\r\n    this.finishAutoreleases(flow, stmts);\r\n\r\n    // Make sure that the return value is retained for the caller\r\n    if (returnType.isManaged && !this.skippedAutoreleases.has(expr)) expr = this.makeRetain(expr);\r\n\r\n    if (returnType != Type.void && stmts.length) {\r\n      let temp = flow.getAndFreeTempLocal(returnType);\r\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\r\n      stmts.unshift(\r\n        module.local_set(temp.index, expr)\r\n      );\r\n      expr = module.local_get(temp.index, returnType.toNativeType());\r\n    }\r\n    flow.freeScopedLocals();\r\n\r\n    // If the last statement anyway, make it the block's return value\r\n    if (isLastInBody && expr && returnType != Type.void) {\r\n      if (!stmts.length) return expr;\r\n      stmts.push(expr);\r\n      return module.block(null, stmts, returnType.toNativeType());\r\n    }\r\n\r\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\r\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\r\n      // stmts.push(module.createUnreachable());\r\n      return module.block(null, stmts);\r\n    }\r\n\r\n    // Otherwise emit a normal return\r\n    if (!stmts.length) return module.return(expr);\r\n    stmts.push(module.return(expr));\r\n    return module.block(null, stmts);\r\n  }\r\n\r\n  compileSwitchStatement(\r\n    statement: SwitchStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n    if (!numCases) {\r\n      return this.compileExpression(statement.condition, Type.void,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n    }\r\n\r\n    // Everything within a switch uses the same break context\r\n    var outerFlow = this.currentFlow;\r\n    var context = outerFlow.pushBreakLabel();\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\r\n    var tempLocalIndex = tempLocal.index;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.local_set( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32,\r\n        Constraints.CONV_IMPLICIT\r\n      )\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.binary(BinaryOp.EqI32,\r\n            module.local_get(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.u32,\r\n              Constraints.CONV_IMPLICIT\r\n            )\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    outerFlow.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.br((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\r\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\r\n    var commonConditional = 0;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n\r\n      // Each switch case initiates a new branch\r\n      let innerFlow = outerFlow.fork();\r\n      this.currentFlow = innerFlow;\r\n      let breakLabel = \"break|\" + context;\r\n      innerFlow.breakLabel = breakLabel;\r\n\r\n      let isLast = i == numCases - 1;\r\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\r\n      stmts[0] = currentBlock;\r\n      let count = 1;\r\n      let terminates = false;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        let stmt = this.compileStatement(statements[j]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          stmts[count++] = stmt;\r\n        }\r\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\r\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\r\n          break;\r\n        }\r\n      }\r\n      stmts.length = count;\r\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\r\n        commonCategorical &= innerFlow.flags;\r\n      }\r\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\r\n\r\n      // Switch back to the parent flow\r\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\r\n      innerFlow.unset(\r\n        FlowFlags.BREAKS |\r\n        FlowFlags.CONDITIONALLY_BREAKS\r\n      );\r\n      innerFlow.freeScopedLocals();\r\n      this.currentFlow = outerFlow;\r\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\r\n    }\r\n    outerFlow.popBreakLabel();\r\n\r\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\r\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\r\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\r\n    // TODO: what about local states?\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(\r\n    statement: ThrowStatement\r\n  ): ExpressionRef {\r\n    var flow = this.currentFlow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.finishAutoreleases(flow, stmts);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    var value = statement.value;\r\n    var message: Expression | null = null;\r\n    if (value.kind == NodeKind.NEW) {\r\n      let newArgs = (<NewExpression>value).arguments;\r\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\r\n    }\r\n    stmts.push(compileAbort(this, message, statement));\r\n\r\n    return flatten(this.module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileTryStatement(\r\n    statement: TryStatement\r\n  ): ExpressionRef {\r\n    // TODO: can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.unreachable();\r\n  }\r\n\r\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\r\n  compileVariableStatement(\r\n    statement: VariableStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n    var flow = this.currentFlow;\r\n    var initializers = new Array<ExpressionRef>();\r\n    var resolver = this.resolver;\r\n\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let initExpr: ExpressionRef = 0;\r\n      let initAutoreleaseSkipped = false;\r\n\r\n      // Resolve type if annotated\r\n      if (declaration.type) {\r\n        type = resolver.resolveType( // reports\r\n          declaration.type,\r\n          flow.actualFunction,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\r\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\r\n          );\r\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\r\n        }\r\n\r\n      // Otherwise infer type from initializer\r\n      } else if (declaration.initializer) {\r\n        initExpr = this.compileExpression(declaration.initializer, Type.auto,\r\n          Constraints.WILL_RETAIN\r\n        ); // reports\r\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n\r\n      // Error if there's neither a type nor an initializer\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n\r\n      // Handle constants, and try to inline if value is static\r\n      let isConst = declaration.is(CommonFlags.CONST);\r\n      let isStatic = false;\r\n      if (isConst) {\r\n        if (initExpr) {\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\r\n            let local = new Local(name, -1, type, flow.parentFunction);\r\n            switch (getExpressionType(initExpr)) {\r\n              case NativeType.I32: {\r\n                local.setConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI32(initExpr),\r\n                    0\r\n                  ),\r\n                  type\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local.setConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI64Low(initExpr),\r\n                    getConstValueI64High(initExpr)\r\n                  ),\r\n                  type\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                return module.unreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = flow.scopedLocals;\r\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return this.module.unreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isStatic = true;\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n\r\n      // Otherwise compile as mutable\r\n      if (!isStatic) {\r\n        let local: Local;\r\n        if (\r\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\r\n          flow.is(FlowFlags.INLINE_CONTEXT)\r\n        ) { // here: not top-level\r\n          let existingLocal = flow.getScopedLocal(name);\r\n          if (existingLocal) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, declaration.name.text\r\n            );\r\n            local = existingLocal;\r\n          } else {\r\n            local = flow.addScopedLocal(name, type);\r\n          }\r\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\r\n        } else {\r\n          if (flow.lookupLocal(name)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, name\r\n            );\r\n            continue;\r\n          }\r\n          local = flow.parentFunction.addLocal(type, name, declaration);\r\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\r\n        }\r\n        let isManaged = type.isManaged;\r\n        if (initExpr) {\r\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\r\n          if (isManaged) {\r\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\r\n            initializers.push(\r\n              module.local_set(local.index,\r\n                initAutoreleaseSkipped\r\n                  ? initExpr\r\n                  : this.makeRetain(initExpr)\r\n              )\r\n            );\r\n          } else {\r\n            initializers.push(\r\n              module.local_set(local.index, initExpr)\r\n            );\r\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\r\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\r\n            }\r\n          }\r\n        } else {\r\n          if (isManaged) {\r\n            // This is necessary because the first use (and assign) of the local could be taking place\r\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\r\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\r\n            // initialized but becomes released later on, whatever was stored before would be released.\r\n            // TODO: Detect this condition inside of a loop instead?\r\n            initializers.push(\r\n              module.local_set(local.index,\r\n                type.toNativeZero(module)\r\n              )\r\n            );\r\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\r\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return initializers.length == 0\r\n      ? 0\r\n      : flatten(module, initializers, NativeType.None);\r\n  }\r\n\r\n  compileVoidStatement(\r\n    statement: VoidStatement\r\n  ): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void,\r\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\r\n    );\r\n  }\r\n\r\n  compileWhileStatement(\r\n    statement: WhileStatement\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    // Compile condition\r\n    var condExpr = module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpression(statement.condition, Type.bool),\r\n        this.currentType\r\n      )\r\n    );\r\n\r\n    // Simplify if the condition is constant\r\n    var alwaysTrue = false;\r\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\r\n      assert(getExpressionType(condExpr) == NativeType.I32);\r\n      if (!getConstValueI32(condExpr)) return module.nop(); // simplify\r\n      alwaysTrue = true;\r\n    }\r\n\r\n    // Compile body\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n    innerFlow.inheritNonnullIfTrue(condExpr);\r\n    var stmts = new Array<ExpressionRef>();\r\n    if (statement.statement.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\r\n    } else {\r\n      stmts.push(this.compileStatement(statement.statement));\r\n    }\r\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\r\n\r\n    // (block $break          ;; (1) skip if skipping (3) + no breaks\r\n    //  (loop $continue       ;; (2) skip if skipping (5) + no continues\r\n    //   (br_if !cond $break) ;; (3) skip if always true\r\n    //   (...)                ;; (4)\r\n    //   (br $continue)       ;; (5) skip if (4) does not fall through\r\n    //  )\r\n    // )\r\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\r\n\r\n    if (fallsThrough) { // (5)\r\n      this.performAutoreleases(innerFlow, stmts);\r\n      stmts.push(module.br(continueLabel));\r\n    }\r\n    if (!alwaysTrue) { // (3)\r\n      stmts.unshift(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\r\n    }\r\n    var expr = flatten(module, stmts, NativeType.None);\r\n    if (fallsThrough || innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) { // (2)\r\n      expr = module.loop(continueLabel, expr);\r\n    }\r\n    if (!alwaysTrue || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) { // (1)\r\n      expr = module.block(breakLabel, [ expr ]);\r\n    }\r\n\r\n    // Switch back to the parent flow\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\r\n    else outerFlow.inheritConditional(innerFlow);\r\n    this.currentFlow = outerFlow;\r\n    return expr;\r\n  }\r\n\r\n  // === Expressions ==============================================================================\r\n\r\n  /** Compiles the value of an inlined constant element. */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.i32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.i32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.i32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.i32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.i64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.i64(0);\r\n      }\r\n      case TypeKind.F64: {\r\n        // monkey-patch for converting built-in floats to f32 implicitly\r\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\r\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\r\n        }\r\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\r\n        this.currentType = Type.f32;\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return this.module.unreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    constraints: Constraints = Constraints.NONE\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n    var expr: ExpressionRef;\r\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.SUPER:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.INSTANCEOF: {\r\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileExpression((<ParenthesizedExpression>expression).expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.unreachable();\r\n      }\r\n    }\r\n    // ensure conversion and wrapping in case the respective function doesn't on its own\r\n    var currentType = this.currentType;\r\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\r\n    if (currentType != contextualType) {\r\n      if (constraints & Constraints.CONV_EXPLICIT) {\r\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\r\n        wrap = false;\r\n        this.currentType = contextualType;\r\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\r\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\r\n        wrap = false;\r\n        this.currentType = contextualType;\r\n      }\r\n    }\r\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\r\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\r\n    // must go through this function, with the respective per-kind functions not being used directly.\r\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n    return expr;\r\n  }\r\n\r\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    constraints: Constraints = Constraints.NONE\r\n  ): ExpressionRef {\r\n    return this.module.precomputeExpression(\r\n      this.compileExpression(expression, contextualType, constraints)\r\n    );\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    /** Original type. */\r\n    fromType: Type,\r\n    /** New type. */\r\n    toType: Type,\r\n    /** Whether the conversion is explicit.*/\r\n    explicit: bool,\r\n    /** Whether the result should be wrapped, if a small integer. */\r\n    wrap: bool,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\r\n\r\n    if (this.currentFlow.isNonnull(expr, fromType)) fromType = fromType.nonNullableType;\r\n\r\n    if (!fromType.isAssignableTo(toType)) {\r\n      if (!explicit) {\r\n        if (fromType.nonNullableType == toType) {\r\n          this.error(\r\n            DiagnosticCode.Object_is_possibly_null,\r\n            reportNode.range\r\n          ); // recoverable\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n            reportNode.range, fromType.toString(), toType.toString()\r\n          ); // recoverable\r\n        }\r\n      }\r\n    }\r\n\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.unary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.unary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType == Type.bool) {\r\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\r\n            wrap = false;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType == Type.bool) {\r\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\r\n            wrap = false;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.drop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      // i64 to ...\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32 or smaller\r\n        if (toType == Type.bool) {\r\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\r\n          wrap = false;\r\n        } else if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\r\n        }\r\n\r\n      // i32 or smaller to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.unary(\r\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\r\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\r\n        );\r\n        wrap = false;\r\n\r\n      // i32 to i32\r\n      } else {\r\n        // small i32 to ...\r\n        if (fromType.is(TypeFlags.SHORT)) {\r\n          // small i32 to larger i32\r\n          if (fromType.size < toType.size) {\r\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\r\n            wrap = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return wrap\r\n      ? this.ensureSmallIntegerWrap(expr, toType)\r\n      : expr;\r\n  }\r\n\r\n  compileAssertionExpression(\r\n    expression: AssertionExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\r\n    switch (expression.assertionKind) {\r\n      case AssertionKind.PREFIX:\r\n      case AssertionKind.AS: {\r\n        let flow = this.currentFlow;\r\n        let toType = this.resolver.resolveType( // reports\r\n          assert(expression.toType),\r\n          flow.actualFunction,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!toType) return this.module.unreachable();\r\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\r\n      }\r\n      case AssertionKind.NONNULL: {\r\n        assert(!expression.toType);\r\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\r\n        let type = this.currentType;\r\n        if (this.currentFlow.isNonnull(expr, type)) {\r\n          this.info(\r\n            DiagnosticCode.Expression_is_never_null,\r\n            expression.expression.range\r\n          );\r\n        } else if (!this.options.noAssert) {\r\n          let module = this.module;\r\n          let flow = this.currentFlow;\r\n          let tempIndex = flow.getAndFreeTempLocal(type).index;\r\n          if (!flow.canOverflow(expr, type)) flow.setLocalFlag(tempIndex, LocalFlags.WRAPPED);\r\n          flow.setLocalFlag(tempIndex, LocalFlags.NONNULL);\r\n          expr = module.if(\r\n            module.local_tee(tempIndex, expr),\r\n            module.local_get(tempIndex, type.toNativeType()),\r\n            module.unreachable()\r\n          );\r\n        }\r\n        this.currentType = this.currentType.nonNullableType;\r\n        return expr;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    return this.module.unreachable();\r\n  }\r\n\r\n  private f32ModInstance: Function | null = null;\r\n  private f64ModInstance: Function | null = null;\r\n  private f32PowInstance: Function | null = null;\r\n  private f64PowInstance: Function | null = null;\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n\r\n    var operator = expression.operator;\r\n    switch (operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '==' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.V128: {\r\n            expr = module.unary(UnaryOp.AllTrueVecI8x16,\r\n              module.binary(BinaryOp.EqVecI8x16, leftExpr, rightExpr)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '!=' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.V128: {\r\n            expr = module.unary(UnaryOp.AnyTrueVecI8x16,\r\n              module.binary(BinaryOp.NeVecI8x16, leftExpr, rightExpr)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // addition might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // subtraction might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK_ASTERISK: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.POW);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        let instance: Function | null;\r\n\r\n        // Mathf.pow if lhs is f32 (result is f32)\r\n        if (this.currentType.kind == TypeKind.F32) {\r\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f32PowInstance)) {\r\n            let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf.pow\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n\r\n        // Math.pow otherwise (result is f64)\r\n        // TODO: should the result be converted back?\r\n        } else {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            this.currentType, Type.f64,\r\n            false, false,\r\n            left\r\n          );\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f64PowInstance)) {\r\n            let namespace = this.program.lookupGlobal(CommonSymbols.Math);\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math.pow\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n        }\r\n        if (!(instance && this.compileFunction(instance))) {\r\n          expr = module.unreachable();\r\n        } else {\r\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, true, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, true, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\r\n          case TypeKind.I16: // ^\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpression(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.REM);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, true, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, true, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let instance = this.f32ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf.mod\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.unreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let instance = this.f64ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.lookupGlobal(CommonSymbols.Math);\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math.mod\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.unreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n          }\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overloadd\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpression(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpression(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\r\n        let flow = this.currentFlow;\r\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\r\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\r\n        leftType = this.currentType;\r\n\r\n        let rightFlow = flow.fork();\r\n        this.currentFlow = rightFlow;\r\n        rightFlow.inheritNonnullIfTrue(leftExpr);\r\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\r\n        rightType = leftType;\r\n\r\n        // simplify if only interested in true or false\r\n        if (contextualType == Type.bool || contextualType == Type.void) {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n          this.currentType = Type.bool;\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            this.makeIsTrueish(rightExpr, rightType),\r\n            module.i32(0)\r\n          );\r\n\r\n        // references must properly retain and release, with the same outcome independent of the branch taken\r\n        } else if (leftType.isManaged) {\r\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\r\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\r\n          let temp = flow.getTempLocal(leftType);\r\n          leftExpr = module.local_tee(temp.index, leftExpr);\r\n\r\n          // instead of retaining left and releasing it again in right when right\r\n          // is taken, we can also just retain left if right is not taken\r\n          let retainLeftInElse = false;\r\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\r\n            if (!leftAutoreleaseSkipped) {\r\n              retainLeftInElse = true;\r\n            } else {\r\n              rightExpr = this.makeRetain(rightExpr);\r\n              rightAutoreleaseSkipped = true;\r\n            }\r\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\r\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\r\n          }\r\n\r\n          let rightStmts = new Array<ExpressionRef>();\r\n          if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\r\n            rightStmts.unshift(\r\n              this.makeRelease(\r\n                module.local_get(temp.index, leftType.toNativeType())\r\n              )\r\n            );\r\n          }\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            rightExpr,\r\n            retainLeftInElse\r\n              ? this.makeRetain(\r\n                  module.local_get(temp.index, leftType.toNativeType())\r\n                )\r\n              : module.local_get(temp.index, leftType.toNativeType())\r\n          );\r\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\r\n          if (temp) flow.freeTempLocal(temp);\r\n\r\n        // basic values can use more aggressive optimizations\r\n        } else {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          // simplify if cloning left without side effects is possible\r\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n            expr = module.if(\r\n              this.makeIsTrueish(leftExpr, this.currentType),\r\n              rightExpr,\r\n              expr\r\n            );\r\n\r\n          // if not possible, tee left to a temp\r\n          } else {\r\n            let tempLocal = flow.getTempLocal(leftType);\r\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\r\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\r\n            expr = module.if(\r\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\r\n              rightExpr,\r\n              module.local_get(tempLocal.index, leftType.toNativeType())\r\n            );\r\n          }\r\n        }\r\n        this.currentType = leftType;\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\r\n        let flow = this.currentFlow;\r\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\r\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\r\n        leftType = this.currentType;\r\n\r\n        let rightFlow = flow.fork();\r\n        this.currentFlow = rightFlow;\r\n        rightFlow.inheritNonnullIfFalse(leftExpr);\r\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\r\n        rightType = leftType;\r\n\r\n        // simplify if only interested in true or false\r\n        if (contextualType == Type.bool || contextualType == Type.void) {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n          this.currentType = Type.bool;\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            module.i32(1),\r\n            this.makeIsTrueish(rightExpr, rightType)\r\n          );\r\n\r\n        // references must properly retain and release, with the same outcome independent of the branch taken\r\n        } else if (leftType.isManaged) {\r\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\r\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\r\n          let temp = flow.getTempLocal(leftType);\r\n          leftExpr = module.local_tee(temp.index, leftExpr);\r\n\r\n          // instead of retaining left and releasing it again in right when right\r\n          // is taken, we can also just retain left if right is not taken\r\n          let retainLeftInThen = false;\r\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\r\n            if (!leftAutoreleaseSkipped) {\r\n              retainLeftInThen = true;\r\n            } else {\r\n              rightExpr = this.makeRetain(rightExpr);\r\n              rightAutoreleaseSkipped = true;\r\n            }\r\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\r\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\r\n          }\r\n\r\n          let rightStmts = new Array<ExpressionRef>();\r\n          if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\r\n            // TODO: usually, false'ish means left is null, but this might not hold\r\n            // once implicit conversion with strings is performed and left is \"\", so:\r\n            rightStmts.unshift(\r\n              this.makeRelease(\r\n                module.local_get(temp.index, leftType.toNativeType())\r\n              )\r\n            );\r\n          }\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            retainLeftInThen\r\n              ? this.makeRetain(\r\n                  module.local_get(temp.index, leftType.toNativeType())\r\n                )\r\n              : module.local_get(temp.index, leftType.toNativeType()),\r\n            rightExpr\r\n          );\r\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\r\n          if (temp) flow.freeTempLocal(temp);\r\n\r\n        // basic values can use more aggressive optimizations\r\n        } else {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          // simplify if cloning left without side effects is possible\r\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n            expr = module.if(\r\n              this.makeIsTrueish(leftExpr, leftType),\r\n              expr,\r\n              rightExpr\r\n            );\r\n\r\n          // if not possible, tee left to a temp. local\r\n          } else {\r\n            let tempLocal = flow.getAndFreeTempLocal(leftType);\r\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\r\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\r\n            expr = module.if(\r\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\r\n              module.local_get(tempLocal.index, leftType.toNativeType()),\r\n              rightExpr\r\n            );\r\n          }\r\n        }\r\n        this.currentType = leftType;\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        expr = this.module.unreachable();\r\n      }\r\n    }\r\n    if (!compound) return expr;\r\n    var resolver = this.resolver;\r\n    var target = resolver.resolveExpression(left, this.currentFlow);\r\n    if (!target) return module.unreachable();\r\n    return this.makeAssignment(\r\n      target,\r\n      expr, // TODO: delay release above if possible?\r\n      left,\r\n      resolver.currentThisExpression,\r\n      resolver.currentElementExpression,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileUnaryOverload(\r\n    operatorInstance: Function,\r\n    value: Expression,\r\n    valueExpr: ExpressionRef,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\r\n    // is a bad idea currently. so this assumes that the type matches.\r\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\r\n  }\r\n\r\n  compileBinaryOverload(\r\n    operatorInstance: Function,\r\n    left: Expression,\r\n    leftExpr: ExpressionRef,\r\n    right: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var rightType: Type;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      rightType = operatorInstance.signature.parameterTypes[0];\r\n    } else {\r\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\r\n      // local states, like having retained locals that actually do not even exist, possibly\r\n      // releasing something random in that local before and evil things like that. Hence this\r\n      // assumes that LHS type matches, which in turn means that static overloads must be\r\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\r\n      // things like multiple static overloads for different combinations of LHS/RHS types.\r\n      // We might want that at some point of course, but requires to complete the resolver so\r\n      // it can actually resolve every kind of expression without ever having to recompile.\r\n      rightType = operatorInstance.signature.parameterTypes[1];\r\n    }\r\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\r\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var program = this.program;\r\n    var resolver = program.resolver;\r\n    var flow = this.currentFlow;\r\n    var target = resolver.resolveExpression(expression, flow); // reports\r\n    if (!target) return this.module.unreachable();\r\n    var thisExpression = resolver.currentThisExpression;\r\n    var elementExpression = resolver.currentElementExpression;\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var targetType: Type;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        // not yet compiled if a static field compiled as a global\r\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\r\n        // fall-through\r\n      }\r\n      case ElementKind.FIELD: {\r\n        targetType = (<VariableLikeElement>target).type;\r\n        break;\r\n      }\r\n      case ElementKind.LOCAL: {\r\n        targetType = (<VariableLikeElement>target).type;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\r\n        if (!setterPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>target).internalName\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!setterInstance) return this.module.unreachable();\r\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n        targetType = setterInstance.signature.parameterTypes[0];\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let setterInstance = (<Property>target).setterInstance;\r\n        if (!setterInstance) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>target).internalName\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n        targetType = setterInstance.signature.parameterTypes[0];\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (elementExpression) { // indexed access\r\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          // if (isUnchecked) {\r\n          //   let arrayType = this.program.determineBuiltinArrayType(<Class>target);\r\n          //   if (arrayType) {\r\n          //     return compileBuiltinArraySet(\r\n          //       this,\r\n          //       <Class>target,\r\n          //       assert(this.resolver.currentThisExpression),\r\n          //       elementExpression,\r\n          //       valueExpression,\r\n          //       contextualType\r\n          //     );\r\n          //   }\r\n          // }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n            if (!indexedGet) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            }\r\n            return this.module.unreachable();\r\n          }\r\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\r\n          targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.unreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    assert(targetType != Type.void);\r\n    return this.makeAssignment(\r\n      target,\r\n      this.compileExpression(valueExpression, targetType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN),\r\n      expression,\r\n      thisExpression,\r\n      elementExpression,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  /** Makes an assignment expression or block, assigning a value to a target. */\r\n  makeAssignment(\r\n    /** Target element, e.g. a Local. */\r\n    target: Element,\r\n    /** Value expression that has been compiled in a previous step already. */\r\n    valueExpr: ExpressionRef,\r\n    /** Expression reference. Has already been compiled to `valueExpr`. */\r\n    valueExpression: Expression,\r\n    /** `this` expression reference if a field or property set. */\r\n    thisExpression: Expression | null,\r\n    /** Index expression reference if an indexed set. */\r\n    indexExpression: Expression | null,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\r\n    // everything else must insert the skipped autorelease now. See (*)\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, target.internalName\r\n          );\r\n          this.currentType = tee ? (<Local>target).type : Type.void;\r\n          return module.unreachable();\r\n        }\r\n        return this.makeLocalAssignment(<Local>target, valueExpr, tee);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\r\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range,\r\n            target.internalName\r\n          );\r\n          this.currentType = tee ? (<Global>target).type : Type.void;\r\n          return module.unreachable();\r\n        }\r\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let initializerNode = (<Field>target).initializerNode;\r\n        if (\r\n          (<Field>target).is(CommonFlags.READONLY) &&\r\n          !(\r\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\r\n            initializerNode\r\n          )\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, (<Field>target).internalName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        return this.makeFieldAssignment(<Field>target,\r\n          valueExpr,\r\n          // FIXME: explicit type (currently fails due to missing null checking)\r\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\r\n          tee\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\r\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\r\n        if (!setterPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, target.internalName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!setterInstance) return module.unreachable();\r\n        // call just the setter if the return value isn't of interest\r\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\r\n        // otherwise call the setter first, then the getter\r\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\r\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!getterInstance) return module.unreachable();\r\n        let returnType = getterInstance.signature.returnType;\r\n        let nativeReturnType = returnType.toNativeType();\r\n        return module.block(null, [\r\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\r\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\r\n        ], nativeReturnType);\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\r\n        let setterInstance = (<Property>target).setterInstance;\r\n        if (!setterInstance) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, target.internalName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        // call just the setter if the return value isn't of interest\r\n        if (!tee) {\r\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\r\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\r\n        }\r\n        // otherwise call the setter first, then the getter\r\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\r\n        let returnType = getterInstance.signature.returnType;\r\n        let nativeReturnType = returnType.toNativeType();\r\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\r\n        let tempLocal = flow.getAndFreeTempLocal(returnType);\r\n        let tempLocalIndex = tempLocal.index;\r\n        return module.block(null, [\r\n          this.makeCallDirect(setterInstance, [ // set and remember the target\r\n            module.local_tee(tempLocalIndex, thisExpr),\r\n            valueExpr\r\n          ], valueExpression),\r\n          this.makeCallDirect(getterInstance, [ // get from remembered target\r\n            module.local_get(tempLocalIndex, nativeReturnType)\r\n          ], valueExpression)\r\n        ], nativeReturnType);\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\r\n        if (indexExpression) {\r\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              valueExpression.range, target.internalName\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              valueExpression.range, target.internalName\r\n            );\r\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\r\n            return module.unreachable();\r\n          }\r\n          let targetType = (<Class>target).type;\r\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\r\n          let elementExpr = this.compileExpression(indexExpression, Type.i32, Constraints.CONV_IMPLICIT);\r\n          if (tee) {\r\n            let tempLocalTarget = flow.getTempLocal(targetType);\r\n            let tempLocalElement = flow.getAndFreeTempLocal(this.currentType);\r\n            let returnType = indexedGet.signature.returnType;\r\n            flow.freeTempLocal(tempLocalTarget);\r\n            return module.block(null, [\r\n              this.makeCallDirect(indexedSet, [\r\n                module.local_tee(tempLocalTarget.index, thisExpr),\r\n                module.local_tee(tempLocalElement.index, elementExpr),\r\n                valueExpr\r\n              ], valueExpression),\r\n              this.makeCallDirect(indexedGet, [\r\n                module.local_get(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                module.local_get(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n              ], valueExpression)\r\n            ], returnType.toNativeType());\r\n          } else {\r\n            return this.makeCallDirect(indexedSet, [\r\n              thisExpr,\r\n              elementExpr,\r\n              valueExpr\r\n            ], valueExpression);\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      valueExpression.range\r\n    );\r\n    return module.unreachable();\r\n  }\r\n\r\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\r\n  private makeLocalAssignment(\r\n    /** The local to assign to. */\r\n    local: Local,\r\n    /** The value to assign. */\r\n    valueExpr: ExpressionRef,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var type = local.type;\r\n    assert(type != Type.void);\r\n    var flow = this.currentFlow;\r\n    var localIndex = local.index;\r\n\r\n    if (type.is(TypeFlags.NULLABLE)) {\r\n      if (flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\r\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\r\n    }\r\n    flow.setLocalFlag(localIndex, LocalFlags.WRITTENTO);\r\n\r\n    if (type.isManaged) {\r\n      let module = this.module;\r\n      let nativeType = type.toNativeType();\r\n\r\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\r\n        if (this.skippedAutoreleases.has(valueExpr)) {\r\n          valueExpr = this.makeSkippedRelease(\r\n            module.local_get(localIndex, nativeType), // oldRef\r\n            valueExpr // newRef\r\n          );\r\n          if (tee) { // TEE(local = __skippedRelease(local, value))\r\n            this.currentType = type;\r\n            return module.local_tee(localIndex, valueExpr);\r\n          } else { // local = __skippedRelease(local, value)\r\n            this.currentType = Type.void;\r\n            return module.local_set(localIndex, valueExpr);\r\n          }\r\n        } else {\r\n          valueExpr = this.makeRetainRelease(\r\n            module.local_get(localIndex, nativeType), // oldRef\r\n            valueExpr // newRef\r\n          );\r\n          if (tee) { // TEE(local = __retainRelease(local, value))\r\n            this.currentType = type;\r\n            return module.local_tee(localIndex, valueExpr);\r\n          } else { // local = __retainRelease(local, value)\r\n            this.currentType = Type.void;\r\n            return module.local_set(localIndex, valueExpr);\r\n          }\r\n        }\r\n      } else {\r\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\r\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\r\n        if (!this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeRetain(valueExpr);\r\n        if (tee) { // TEE(local = __retain(value, local))\r\n          this.currentType = type;\r\n          return module.local_tee(localIndex, valueExpr);\r\n        } else { // local = __retain(value, local)\r\n          this.currentType = Type.void;\r\n          return module.local_set(localIndex, valueExpr);\r\n        }\r\n      }\r\n    } else {\r\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\r\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\r\n      }\r\n      if (tee) { // TEE(local = value)\r\n        this.currentType = type;\r\n        return this.module.local_tee(localIndex, valueExpr);\r\n      } else { // local = value\r\n        this.currentType = Type.void;\r\n        return this.module.local_set(localIndex, valueExpr);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\r\n  private makeGlobalAssignment(\r\n    /** The global to assign to. */\r\n    global: Global,\r\n    /** The value to assign. */\r\n    valueExpr: ExpressionRef,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var type = global.type;\r\n    assert(type != Type.void);\r\n    var nativeType = type.toNativeType();\r\n\r\n    if (type.isManaged) {\r\n      if (this.skippedAutoreleases.has(valueExpr)) {\r\n        if (tee) { // (global = __skippedRelease(global, value)), global\r\n          this.currentType = type;\r\n          return module.block(null, [\r\n            module.global_set(global.internalName,\r\n              this.makeSkippedRelease(\r\n                module.global_get(global.internalName, nativeType), // oldRef\r\n                valueExpr // newRef\r\n              )\r\n            ),\r\n            module.global_get(global.internalName, nativeType)\r\n          ], nativeType);\r\n        } else { // global = __skippedRelease(global, value)\r\n          this.currentType = Type.void;\r\n          return module.global_set(global.internalName,\r\n            this.makeSkippedRelease(\r\n              module.global_get(global.internalName, nativeType), // oldRef\r\n              valueExpr // newRef\r\n            )\r\n          );\r\n        }\r\n      } else {\r\n        if (tee) { // (global = __retainRelease(global, value)), global\r\n          this.currentType = type;\r\n          return module.block(null, [\r\n            module.global_set(global.internalName,\r\n              this.makeRetainRelease(\r\n                module.global_get(global.internalName, nativeType), // oldRef\r\n                valueExpr // newRef\r\n              )\r\n            ),\r\n            module.global_get(global.internalName, nativeType)\r\n          ], nativeType);\r\n        } else { // global = __retainRelease(global, value)\r\n          this.currentType = Type.void;\r\n          return module.global_set(global.internalName,\r\n            this.makeRetainRelease(\r\n              module.global_get(global.internalName, nativeType), // oldRef\r\n              valueExpr // newRef\r\n            )\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\r\n      if (tee) { // (global = value), global\r\n        this.currentType = type;\r\n        return module.block(null, [\r\n          module.global_set(global.internalName, valueExpr),\r\n          module.global_get(global.internalName, nativeType)\r\n        ], nativeType);\r\n      } else { // global = value\r\n        this.currentType = Type.void;\r\n        return module.global_set(global.internalName,\r\n          valueExpr\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\r\n  makeFieldAssignment(\r\n    /** The field to assign to. */\r\n    field: Field,\r\n    /** The value to assign. */\r\n    valueExpr: ExpressionRef,\r\n    /** The value of `this`. */\r\n    thisExpr: ExpressionRef,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var fieldType = field.type;\r\n    var nativeFieldType = fieldType.toNativeType();\r\n    assert(field.parent.kind == ElementKind.CLASS);\r\n    var thisType = (<Class>field.parent).type;\r\n    var nativeThisType = thisType.toNativeType();\r\n\r\n    if (fieldType.isManaged && thisType.isManaged) {\r\n      let tempThis = flow.getTempLocal(thisType);\r\n      if (this.skippedAutoreleases.has(valueExpr)) {\r\n        if (tee) { // ((t1 = this).field = __skippedRelease(t1.field, t2 = value)), t2\r\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\r\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\r\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = fieldType;\r\n          return module.block(null, [\r\n            module.store(fieldType.byteSize,\r\n              module.local_tee(tempThis.index, thisExpr),\r\n              this.makeSkippedRelease(\r\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                  module.local_get(tempThis.index, nativeThisType),\r\n                  nativeFieldType, field.memoryOffset\r\n                ),\r\n                module.local_tee(tempValue.index, valueExpr), // newRef\r\n              ),\r\n              nativeFieldType, field.memoryOffset\r\n            ),\r\n            module.local_get(tempValue.index, nativeFieldType)\r\n          ], nativeFieldType);\r\n        } else { // (t1 = this).field = __skippedRelease(t1.field, value)\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = Type.void;\r\n          return module.store(fieldType.byteSize,\r\n            module.local_tee(tempThis.index, thisExpr),\r\n            this.makeSkippedRelease(\r\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                module.local_get(tempThis.index, nativeThisType),\r\n                nativeFieldType, field.memoryOffset\r\n              ),\r\n              valueExpr, // newRef\r\n            ),\r\n            nativeFieldType, field.memoryOffset\r\n          );\r\n        }\r\n      } else {\r\n        if (tee) { // ((t1 = this).field = __retainRelease(t1.field, t2 = value)), t2\r\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\r\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\r\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = fieldType;\r\n          return module.block(null, [\r\n            module.store(fieldType.byteSize,\r\n              module.local_tee(tempThis.index, thisExpr),\r\n              this.makeRetainRelease(\r\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                  module.local_get(tempThis.index, nativeThisType),\r\n                  nativeFieldType, field.memoryOffset\r\n                ),\r\n                module.local_tee(tempValue.index, valueExpr) // newRef\r\n              ),\r\n              nativeFieldType, field.memoryOffset\r\n            ),\r\n            module.local_get(tempValue.index, nativeFieldType)\r\n          ], nativeFieldType);\r\n        } else { // (t1 = this).field = __retainRelease(t1.field, value)\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = Type.void;\r\n          return module.store(fieldType.byteSize,\r\n            module.local_tee(tempThis.index, thisExpr),\r\n            this.makeRetainRelease(\r\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                module.local_get(tempThis.index, nativeThisType),\r\n                nativeFieldType, field.memoryOffset\r\n              ),\r\n              valueExpr // newRef\r\n            ),\r\n            nativeFieldType, field.memoryOffset\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      if (tee) { // (this.field = (t1 = value)), t1\r\n        let tempValue = flow.getAndFreeTempLocal(fieldType);\r\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\r\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\r\n        this.currentType = fieldType;\r\n        return module.block(null, [\r\n          module.store(fieldType.byteSize,\r\n            thisExpr,\r\n            module.local_tee(tempValue.index, valueExpr),\r\n            nativeFieldType, field.memoryOffset\r\n          ),\r\n          module.local_get(tempValue.index, nativeFieldType)\r\n        ], nativeFieldType);\r\n      } else { // this.field = value\r\n        this.currentType = Type.void;\r\n        return module.store(fieldType.byteSize,\r\n          thisExpr,\r\n          valueExpr,\r\n          nativeFieldType, field.memoryOffset\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Compiles a call expression according to the specified context. */\r\n  compileCallExpression(\r\n    /** Call expression to compile. */\r\n    expression: CallExpression,\r\n    /** Contextual type indicating the return type the caller expects, if any. */\r\n    contextualType: Type,\r\n    /** Constraints indicating contextual conditions. */\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // handle call to super\r\n    if (expression.expression.kind == NodeKind.SUPER) {\r\n      let flow = this.currentFlow;\r\n      let actualFunction = flow.actualFunction;\r\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n        this.error(\r\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n\r\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      let baseClassInstance = assert((<Class>classInstance).base);\r\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n      let nativeSizeType = this.options.nativeSizeType;\r\n\r\n      // {\r\n      //   this = super(this || <ALLOC>, ...args)\r\n      //   this.a = X\r\n      //   this.b = Y\r\n      // }\r\n      let theCall = this.compileCallDirect(\r\n        this.ensureConstructor(baseClassInstance, expression),\r\n        expression.arguments,\r\n        expression,\r\n        module.if(\r\n          module.local_get(thisLocal.index, nativeSizeType),\r\n          module.local_get(thisLocal.index, nativeSizeType),\r\n          this.makeRetain(\r\n            this.makeAllocation(<Class>classInstance)\r\n          )\r\n        ),\r\n        Constraints.WILL_RETAIN\r\n      );\r\n      assert(this.skippedAutoreleases.has(theCall)); // guaranteed\r\n      let stmts: ExpressionRef[] = [\r\n        module.local_set(thisLocal.index, theCall)\r\n      ];\r\n      this.makeFieldInitialization(<Class>classInstance, stmts);\r\n\r\n      // check that super had been called before accessing `this`\r\n      if (flow.isAny(\r\n        FlowFlags.ALLOCATES |\r\n        FlowFlags.CONDITIONALLY_ALLOCATES\r\n      )) {\r\n        this.error(\r\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\r\n      this.currentType = Type.void;\r\n      return module.block(null, stmts);\r\n    }\r\n\r\n    // otherwise resolve normally\r\n    var target = this.resolver.resolveExpression(expression.expression, flow); // reports\r\n    if (!target) return module.unreachable();\r\n\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (target.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n        let typeArguments = expression.typeArguments;\r\n\r\n        // builtins handle present respectively omitted type arguments on their own\r\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\r\n        }\r\n\r\n        let instance: Function | null = null;\r\n\r\n        // resolve generic call if type arguments have been provided\r\n        if (typeArguments) {\r\n          if (!prototype.is(CommonFlags.GENERIC)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              expression.expression.range, prototype.internalName\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          instance = this.resolver.resolveFunctionInclTypeArguments(\r\n            prototype,\r\n            typeArguments,\r\n            flow.actualFunction.parent, // relative to caller\r\n            makeMap<string,Type>(flow.contextualTypeArguments),\r\n            expression\r\n          );\r\n\r\n        // infer generic call if type arguments have been omitted\r\n        } else if (prototype.is(CommonFlags.GENERIC)) {\r\n          let inferredTypes = new Map<string,Type | null>();\r\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\r\n          let numTypeParameters = typeParameterNodes.length;\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            inferredTypes.set(typeParameterNodes[i].name.text, null);\r\n          }\r\n          // let numInferred = 0;\r\n          let parameterNodes = prototype.functionTypeNode.parameters;\r\n          let numParameters = parameterNodes.length;\r\n          let argumentNodes = expression.arguments;\r\n          let numArguments = argumentNodes.length;\r\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\r\n          for (let i = 0; i < numParameters; ++i) {\r\n            let typeNode = parameterNodes[i].type;\r\n            let templateName = typeNode.kind == NodeKind.NAMEDTYPE && !(<NamedTypeNode>typeNode).name.next\r\n              ? (<NamedTypeNode>typeNode).name.identifier.text\r\n              : null;\r\n            let argumentExpression = i < numArguments\r\n              ? argumentNodes[i]\r\n              : parameterNodes[i].initializer;\r\n            if (!argumentExpression) { // missing initializer -> too few arguments\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                expression.range, numParameters.toString(10), numArguments.toString(10)\r\n              );\r\n              return module.unreachable();\r\n            }\r\n            if (templateName !== null && inferredTypes.has(templateName)) {\r\n              let inferredType = inferredTypes.get(templateName);\r\n              if (inferredType) {\r\n                argumentExprs[i] = this.compileExpression(argumentExpression, inferredType);\r\n                let commonType: Type | null;\r\n                if (!(commonType = Type.commonDenominator(inferredType, this.currentType, true))) {\r\n                  if (!(commonType = Type.commonDenominator(inferredType, this.currentType, false))) {\r\n                    this.error(\r\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n                      parameterNodes[i].type.range, this.currentType.toString(), inferredType.toString()\r\n                    );\r\n                    return module.unreachable();\r\n                  }\r\n                }\r\n                inferredType = commonType;\r\n              } else {\r\n                argumentExprs[i] = this.compileExpression(argumentExpression, Type.auto);\r\n                inferredType = this.currentType;\r\n                // ++numInferred;\r\n              }\r\n              inferredTypes.set(templateName, inferredType);\r\n            } else {\r\n              let concreteType = this.resolver.resolveType(\r\n                parameterNodes[i].type,\r\n                flow.actualFunction,\r\n                flow.contextualTypeArguments\r\n              );\r\n              if (!concreteType) return module.unreachable();\r\n              argumentExprs[i] = this.compileExpression(argumentExpression, concreteType, Constraints.CONV_IMPLICIT);\r\n            }\r\n          }\r\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            let inferredType = assert(inferredTypes.get(typeParameterNodes[i].name.text)); // TODO\r\n            resolvedTypeArguments[i] = inferredType;\r\n          }\r\n          instance = this.resolver.resolveFunction(\r\n            prototype,\r\n            resolvedTypeArguments,\r\n            makeMap<string,Type>(flow.contextualTypeArguments)\r\n          );\r\n          if (!instance) return this.module.unreachable();\r\n          return this.makeCallDirect(instance, argumentExprs, expression, contextualType == Type.void);\r\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\r\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\r\n          // so inlining can be performed in `makeCallDirect` instead?\r\n\r\n        // otherwise resolve the non-generic call as usual\r\n        } else {\r\n          instance = this.resolver.resolveFunction(prototype, null);\r\n        }\r\n        if (!instance) return this.module.unreachable();\r\n\r\n        // compile 'this' expression if an instance method\r\n        let thisExpr: ExpressionRef = 0;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\r\n        }\r\n\r\n        return this.compileCallDirect(\r\n          instance,\r\n          expression.arguments,\r\n          expression,\r\n          thisExpr,\r\n          constraints\r\n        );\r\n      }\r\n\r\n      // indirect call: index argument with signature (non-generic, can't be inlined)\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>target).type.signatureReference) {\r\n          if ((<Local>target).is(CommonFlags.INLINED)) {\r\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\r\n          } else {\r\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\r\n          }\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>target).type.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>target).type.signatureReference) {\r\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>target).type.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>target).type;\r\n        if (signature = type.signatureReference) {\r\n          let thisExpression = assert(this.resolver.currentThisExpression);\r\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\r\n          indexArg = module.load(\r\n            4,\r\n            false,\r\n            thisExpr,\r\n            NativeType.I32,\r\n            (<Field>target).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, type.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>target).signature;\r\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, Constraints.CONV_IMPLICIT);\r\n        break;\r\n      }\r\n\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\r\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\r\n        if (!getterInstance) return module.unreachable();\r\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\r\n        signature = this.currentType.signatureReference;\r\n        if (!signature) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, this.currentType.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let getterInstance = assert((<Property>target).getterInstance);\r\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\r\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\r\n        );\r\n        signature = this.currentType.signatureReference;\r\n        if (!signature) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, this.currentType.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        break;\r\n      }\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression,\r\n      0,\r\n      contextualType == Type.void\r\n    );\r\n  }\r\n\r\n  private compileCallExpressionBuiltin(\r\n    prototype: FunctionPrototype,\r\n    expression: CallExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var typeArguments: Type[] | null = null;\r\n\r\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\r\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\r\n    var typeParameterNodes = prototype.typeParameterNodes;\r\n    var typeArgumentNodes = expression.typeArguments;\r\n    if (expression.typeArguments) {\r\n      if (!prototype.is(CommonFlags.GENERIC)) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          expression.range, prototype.internalName\r\n        );\r\n      }\r\n      typeArguments = this.resolver.resolveTypeArguments(\r\n        assert(typeParameterNodes),\r\n        typeArgumentNodes,\r\n        this.currentFlow.actualFunction.parent,\r\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n\r\n    // now compile the builtin, which usually returns a block of code that replaces the call.\r\n    var expr = compileBuiltinCall(\r\n      this,\r\n      prototype,\r\n      typeArguments,\r\n      expression.arguments,\r\n      contextualType,\r\n      expression\r\n    );\r\n    if (!expr) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      return this.module.unreachable();\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    constraints: Constraints = Constraints.NONE\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      this.currentType = signature.returnType;\r\n      return this.module.unreachable();\r\n    }\r\n\r\n    // Inline if explicitly requested\r\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      if (this.currentInlineFunctions.includes(instance)) {\r\n        this.warning(\r\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\r\n          reportNode.range, instance.internalName\r\n        );\r\n      } else {\r\n        this.currentInlineFunctions.push(instance);\r\n        let parameterTypes = signature.parameterTypes;\r\n        assert(numArguments <= parameterTypes.length);\r\n        // compile argument expressions\r\n        let args = new Array<ExpressionRef>(numArguments);\r\n        for (let i = 0; i < numArguments; ++i) {\r\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\r\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\r\n          );\r\n        }\r\n        // make the inlined call (is aware of autoreleases)\r\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\r\n        if (this.currentType.isManaged) {\r\n          if (!(constraints & Constraints.WILL_RETAIN)) {\r\n            expr = this.makeAutorelease(expr, this.currentFlow);\r\n          } else {\r\n            this.skippedAutoreleases.add(expr);\r\n          }\r\n        }\r\n        this.currentInlineFunctions.pop();\r\n        return expr;\r\n      }\r\n    }\r\n\r\n    // Otherwise compile to just a call\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    if (signature.returnType.isManaged) {\r\n      if (constraints & Constraints.WILL_DROP) {\r\n        // Skip autorelease and simply release\r\n        return this.makeCallDirect(instance, operands, reportNode, true);\r\n      } else if (constraints & Constraints.WILL_RETAIN) {\r\n        // Skip autorelease and remember\r\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\r\n        this.skippedAutoreleases.add(expr);\r\n        return expr;\r\n      } else {\r\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\r\n      }\r\n    }\r\n    return this.makeCallDirect(instance, operands, reportNode,\r\n      (constraints & Constraints.WILL_DROP) != 0\r\n    );\r\n  }\r\n\r\n  makeCallInline(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null,\r\n    thisArg: ExpressionRef = 0,\r\n    immediatelyDropped: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var numArguments = operands ? operands.length : 0;\r\n    var signature = instance.signature;\r\n    var parameterTypes = signature.parameterTypes;\r\n    var numParameters = parameterTypes.length;\r\n\r\n    // Create a new inline flow and use it to compile the function as a block\r\n    var previousFlow = this.currentFlow;\r\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\r\n    var body = [];\r\n    var usedLocals = new Set<i32>();\r\n\r\n    // Prepare compiled arguments right to left, keeping track of used locals.\r\n    for (let i = numArguments - 1; i >= 0; --i) {\r\n      // This is necessary because a later expression must not set an earlier argument local, which\r\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\r\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\r\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\r\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\r\n      let paramExpr = operands![i];\r\n      let paramType = parameterTypes[i];\r\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\r\n      findUsedLocals(paramExpr, usedLocals);\r\n      // inlining is aware of wrap/nonnull states:\r\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\r\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\r\n      // inlining is aware of skipped autoreleases:\r\n      if (paramType.isManaged) {\r\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\r\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\r\n      }\r\n      body.unshift(\r\n        module.local_set(argumentLocal.index, paramExpr)\r\n      );\r\n    }\r\n    if (thisArg) {\r\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      let thisType = assert(instance.signature.thisType);\r\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, usedLocals);\r\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\r\n      body.unshift(\r\n        module.local_set(thisLocal.index, thisArg)\r\n      );\r\n      let baseInstance = (<Class>classInstance).base;\r\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\r\n    } else {\r\n      assert(!instance.signature.thisType);\r\n    }\r\n\r\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\r\n    // side-effects within earlier expressions because these already happened on set.\r\n    this.currentFlow = flow;\r\n    for (let i = numArguments; i < numParameters; ++i) {\r\n      let initType = parameterTypes[i];\r\n      let initExpr = this.compileExpression(\r\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\r\n        initType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\r\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\r\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\r\n      if (initType.isManaged) {\r\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\r\n        body.push(\r\n          module.local_set(argumentLocal.index,\r\n            this.makeRetain(initExpr)\r\n          )\r\n        );\r\n      } else {\r\n        body.push(\r\n          module.local_set(argumentLocal.index, initExpr)\r\n        );\r\n      }\r\n    }\r\n\r\n    // Compile the called function's body in the scope of the inlined flow\r\n    this.compileFunctionBody(instance, body);\r\n\r\n    // Free any new scoped locals and reset to the original flow\r\n    if (!flow.is(FlowFlags.TERMINATES)) {\r\n      this.performAutoreleases(flow, body);\r\n      this.finishAutoreleases(flow, body);\r\n    }\r\n    flow.freeScopedLocals();\r\n    var returnType = flow.returnType;\r\n    this.currentFlow = previousFlow;\r\n\r\n    // Create an outer block that we can break to when returning a value out of order\r\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\r\n    this.currentType = returnType;\r\n    if (returnType.isManaged) {\r\n      if (immediatelyDropped) {\r\n        expr = this.makeRelease(expr);\r\n        this.currentType = Type.void;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\r\n    var returnType = originalSignature.returnType;\r\n    var thisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(originalParameterTypes, returnType, thisType);\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\r\n    trampoline = new Function(\r\n      original.name + \"|trampoline\",\r\n      original.prototype,\r\n      trampolineSignature,\r\n      original.contextualTypeArguments\r\n    );\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFlow = this.currentFlow;\r\n    var flow = trampoline.flow;\r\n    this.currentFlow = flow;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.block(names[0], [\r\n      module.block(\"outOfRange\", [\r\n        module.switch(names, \"outOfRange\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.binary(\r\n                BinaryOp.SubI32,\r\n                module.global_get(BuiltinSymbols.argc, NativeType.I32),\r\n                module.i32(minArguments)\r\n              )\r\n            : module.global_get(BuiltinSymbols.argc, NativeType.I32)\r\n        )\r\n      ]),\r\n      module.unreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      let declaration = originalParameterDeclarations[minArguments + i];\r\n      let initializer = declaration.initializer;\r\n      let initExpr: ExpressionRef;\r\n      if (initializer) {\r\n        initExpr = module.local_set(operandIndex,\r\n          this.compileExpression(\r\n            initializer,\r\n            type,\r\n            Constraints.CONV_IMPLICIT\r\n          )\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\r\n          declaration.range\r\n        );\r\n        initExpr = module.unreachable();\r\n      }\r\n      body = module.block(names[i + 1], [\r\n        body,\r\n        initExpr,\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\r\n    }\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var stmts: ExpressionRef[] = [ body ];\r\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\r\n    if (returnType != Type.void) {\r\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\r\n    } else {\r\n      stmts.push(theCall);\r\n      this.performAutoreleases(flow, stmts);\r\n    }\r\n    flow.freeScopedLocals();\r\n    this.currentFlow = previousFlow;\r\n\r\n    var funcRef = module.addFunction(\r\n      trampoline.internalName,\r\n      this.ensureFunctionType(\r\n        trampolineSignature.parameterTypes,\r\n        returnType,\r\n        thisType\r\n      ),\r\n      typesToNativeTypes(trampoline.additionalLocals),\r\n      module.block(null, stmts, returnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper global is present and returns its name. */\r\n  private ensureArgcVar(): string {\r\n    if (!this.argcVar) {\r\n      let module = this.module;\r\n      this.argcVar = module.addGlobal(\r\n        BuiltinSymbols.argc,\r\n        NativeType.I32,\r\n        true,\r\n        module.i32(0)\r\n      );\r\n    }\r\n    return BuiltinSymbols.argc;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper setter is present and returns its name. */\r\n  private ensureArgcSet(): string {\r\n    if (!this.argcSet) {\r\n      let module = this.module;\r\n      this.argcSet = module.addFunction(BuiltinSymbols.setargc,\r\n        this.ensureFunctionType([ Type.u32 ], Type.void),\r\n        null,\r\n        module.global_set(this.ensureArgcVar(),\r\n          module.local_get(0, NativeType.I32)\r\n        )\r\n      );\r\n      module.addFunctionExport(BuiltinSymbols.setargc, \"__setargc\");\r\n    }\r\n    return BuiltinSymbols.setargc;\r\n  }\r\n\r\n  // <reference-counting>\r\n\r\n  /** Makes retain call, retaining the expression's value. */\r\n  makeRetain(expr: ExpressionRef): ExpressionRef {\r\n    var retainInstance = this.program.retainInstance;\r\n    this.compileFunction(retainInstance);\r\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\r\n  }\r\n\r\n  /** Makes a retainRelease call, retaining the new expression's value and releasing the old expression's value, in this order. */\r\n  makeRetainRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\r\n    // if ((t1=newExpr) != (t2=oldExpr)) {\r\n    //   __retain(t1);\r\n    //   __release(t2);\r\n    // }, t1\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var usizeType = this.options.usizeType;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    var temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\r\n    var temp2 = flow.getAndFreeTempLocal(usizeType);\r\n    flow.freeTempLocal(temp1);\r\n    return module.block(null, [\r\n      module.if(\r\n        module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\r\n          module.local_tee(temp1.index, newExpr),\r\n          module.local_tee(temp2.index, oldExpr)\r\n        ),\r\n        module.block(null, [\r\n          module.drop(\r\n            this.makeRetain(module.local_get(temp1.index, nativeSizeType))\r\n          ),\r\n          this.makeRelease(module.local_get(temp2.index, nativeSizeType))\r\n        ])\r\n      ),\r\n      module.local_get(temp1.index, nativeSizeType)\r\n    ], nativeSizeType);\r\n  }\r\n\r\n  /** Makes a skippedRelease call, ignoring the new expression's value and releasing the old expression's value, in this order. */\r\n  makeSkippedRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\r\n    // TODO: this helper can be eliminated altogether if the current logic holds\r\n    // (t1=newExpr), __release(oldExpr), t1\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var usizeType = this.options.usizeType;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    var temp = flow.getAndFreeTempLocal(usizeType, findUsedLocals(oldExpr));\r\n    return module.block(null, [\r\n      module.local_set(temp.index, newExpr),\r\n      this.makeRelease(oldExpr),\r\n      module.local_get(temp.index, nativeSizeType)\r\n    ], nativeSizeType);\r\n  }\r\n\r\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\r\n  makeRelease(expr: ExpressionRef): ExpressionRef {\r\n    var releaseInstance = this.program.releaseInstance;\r\n    this.compileFunction(releaseInstance);\r\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\r\n  }\r\n\r\n  /** Makes an automatic release call at the end of the current flow. */\r\n  makeAutorelease(expr: ExpressionRef, flow: Flow = this.currentFlow): ExpressionRef {\r\n    // FIXME: loses track of nonNull state?\r\n    return this.module.local_tee(flow.getAutoreleaseLocal(this.options.usizeType).index, expr);\r\n  }\r\n\r\n  /** Attempts to undo a final autorelease, returning the index of the previously retaining variable or -1 if not possible. */\r\n  undoAutorelease(expr: ExpressionRef, flow: Flow): i32 {\r\n    // NOTE: Can't remove the local.tee completely because it's already compiled\r\n    // and a child of something else. Preventing the final release however should\r\n    // make it optimize away.\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.LocalSet: { // local.tee(__retain(expr))\r\n        if (isLocalTee(expr)) {\r\n          let index = getLocalSetIndex(expr);\r\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\r\n            // Assumes that the expression actually belongs to the flow and that\r\n            // top-level autoreleases are never undone. While that's true, it's\r\n            // not necessary to check presence in scopedLocals.\r\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\r\n            return index;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Block: { // { ..., local.tee(__retain(expr)) }\r\n        if (getBlockName(expr) === null) { // must not be a break target\r\n          let count = getBlockChildCount(expr);\r\n          if (count) {\r\n            return this.undoAutorelease(getBlockChild(expr, count - 1), flow);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Attemps to move a final autorelease from one flow to a parent.\r\n   * It is crucial that from flow hasn't processed autoreleases yet because otherwise the final\r\n   * retain would have been written already.\r\n   */\r\n  moveAutorelease(expr: ExpressionRef, fromInnerFlow: Flow, toOuterFlow: Flow): ExpressionRef {\r\n    // NOTE: While this avoids an unnecessary set of retain and release, it cannot\r\n    // eliminate the now unnecessary temporary local.tee because it is already part of\r\n    // another expression in the tree. But optimizing should collapse locals again.\r\n    var index = this.undoAutorelease(expr, fromInnerFlow);\r\n    return ~index\r\n      ? this.makeAutorelease(expr, toOuterFlow) // undone, can skip the retain\r\n      : this.makeAutorelease(this.makeRetain(expr), toOuterFlow);\r\n  }\r\n\r\n  /** Performs any queued autoreleases in the specified flow. */\r\n  performAutoreleases(flow: Flow, stmts: ExpressionRef[], clearFlags: bool = true): void {\r\n    var scopedLocals = flow.scopedLocals;\r\n    if (scopedLocals) {\r\n      let module = this.module;\r\n      for (let local of scopedLocals.values()) {\r\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          let localIndex = local.index;\r\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\r\n            if (clearFlags) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\r\n            stmts.push(\r\n              this.makeRelease(\r\n                module.local_get(localIndex, local.type.toNativeType())\r\n              )\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Performs any queued autoreleases in the specified flow and returns the value. */\r\n  performAutoreleasesWithValue(\r\n    flow: Flow,\r\n    valueExpr: ExpressionRef,\r\n    valueType: Type,\r\n    stmts: ExpressionRef[] | null = null,\r\n    clearFlags: bool = true\r\n  ): ExpressionRef {\r\n    if (!stmts) stmts = new Array<ExpressionRef>();\r\n    stmts.push(\r\n      this.module.nop()\r\n    );\r\n    var lengthBefore = stmts.length;\r\n    this.performAutoreleases(flow, stmts, clearFlags);\r\n    if (stmts.length > lengthBefore) {\r\n      let nativeType = valueType.toNativeType();\r\n      let temp = flow.getAndFreeTempLocal(valueType);\r\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\r\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\r\n      let module = this.module;\r\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\r\n      stmts.push(\r\n        module.local_get(temp.index, nativeType) // append get\r\n      );\r\n      return module.block(null, stmts, nativeType);\r\n    } else if (stmts.length > 1) {\r\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\r\n      return this.module.block(null, stmts, valueType.toNativeType());\r\n    }\r\n    return valueExpr;\r\n  }\r\n\r\n  /** Finishes any queued top-level autoreleases in the actual function of the specified flow. */\r\n  finishAutoreleases(flow: Flow, stmts: ExpressionRef[]): void {\r\n    var module = this.module;\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      // traverse to the top-most flow containing the inlined function's\r\n      // locals as scoped locals and release these instead.\r\n      let parent: Flow | null;\r\n      while (parent = flow.parent) flow = parent;\r\n      this.performAutoreleases(flow, stmts, false);\r\n    } else {\r\n      for (let local of flow.parentFunction.localsByIndex) {\r\n        let localIndex = local.index;\r\n        if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\r\n          flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\r\n          stmts.push(\r\n            this.makeRelease(\r\n              module.local_get(localIndex, local.type.toNativeType())\r\n            )\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // </reference-counting>\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null,\r\n    reportNode: Node,\r\n    immediatelyDropped: bool = false,\r\n    /** Skip the usual autorelease and manage this at the callsite instead. */\r\n    skipAutorelease: bool = false\r\n  ): ExpressionRef {\r\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      if (this.currentInlineFunctions.includes(instance)) {\r\n        this.warning(\r\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\r\n          reportNode.range, instance.internalName\r\n        );\r\n      } else {\r\n        this.currentInlineFunctions.push(instance);\r\n        let expr: ExpressionRef;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          let theOperands = assert(operands);\r\n          assert(theOperands.length);\r\n          expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\r\n        } else {\r\n          expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\r\n        }\r\n        if (this.currentType.isManaged) {\r\n          if (!skipAutorelease) {\r\n            expr = this.makeAutorelease(expr, this.currentFlow);\r\n          } else {\r\n            this.skippedAutoreleases.add(expr);\r\n          }\r\n        }\r\n        this.currentInlineFunctions.pop();\r\n        return expr;\r\n      }\r\n    }\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.unreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\r\n      assert(parameterNodes.length == parameterTypes.length);\r\n      let allOptionalsAreConstant = true;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        let initializer = parameterNodes[i].initializer;\r\n        if (initializer) {\r\n          if (nodeIsConstantValue(initializer.kind)) {\r\n            operands.push(this.compileExpression(\r\n              <Expression>parameterNodes[i].initializer,\r\n              parameterTypes[i],\r\n              Constraints.CONV_IMPLICIT\r\n            ));\r\n            continue;\r\n          }\r\n          let resolved = this.resolver.resolveExpression(initializer, instance.flow, parameterTypes[i]);\r\n          if (resolved) {\r\n            if (resolved.kind == ElementKind.GLOBAL) {\r\n              let global = <Global>resolved;\r\n              if (this.compileGlobal(global)) {\r\n                if (global.is(CommonFlags.INLINED)) {\r\n                  operands.push(\r\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\r\n                  );\r\n                } else {\r\n                  operands.push(\r\n                    this.convertExpression(\r\n                      module.global_get(global.internalName, global.type.toNativeType()),\r\n                      global.type, parameterTypes[i], false, false, initializer\r\n                    )\r\n                  );\r\n                }\r\n                continue;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n        allOptionalsAreConstant = false;\r\n      }\r\n      if (!allOptionalsAreConstant) {\r\n        if (!isCallImport) {\r\n          let original = instance;\r\n          instance = this.ensureTrampoline(instance);\r\n          if (!this.compileFunction(instance)) return module.unreachable();\r\n          instance.flow.flags = original.flow.flags;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\r\n          this.currentType = returnType;\r\n          if (returnType.isManaged) {\r\n            if (immediatelyDropped) {\r\n              expr = this.makeRelease(expr);\r\n              this.currentType = Type.void;\r\n            } else if (!skipAutorelease) {\r\n              expr = this.makeAutorelease(expr);\r\n            } else {\r\n              this.skippedAutoreleases.add(expr);\r\n            }\r\n          }\r\n          return module.block(null, [\r\n            module.global_set(this.ensureArgcVar(), module.i32(numArguments)),\r\n            expr\r\n          ], this.currentType.toNativeType());\r\n        }\r\n      }\r\n    }\r\n\r\n    // If the return value is of a reference type it has not yet been released but is in flight\r\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\r\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\r\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\r\n    this.currentType = returnType;\r\n    if (returnType.isManaged) {\r\n      if (immediatelyDropped) {\r\n        expr = this.makeRelease(expr);\r\n        this.currentType = Type.void;\r\n      } else if (!skipAutorelease) {\r\n        expr = this.makeAutorelease(expr);\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    immediatelyDropped: bool = false\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.unreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null,\r\n    immediatelyDropped: bool = false\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    var expr = module.call_indirect(indexArg, operands, signature.toSignatureString());\r\n    this.currentType = returnType;\r\n    if (returnType.isManaged) {\r\n      if (immediatelyDropped) {\r\n        expr = this.makeRelease(expr);\r\n        this.currentType = Type.void;\r\n      } else {\r\n        expr = this.makeAutorelease(expr);\r\n      }\r\n    }\r\n    return module.block(null, [\r\n      module.global_set(this.ensureArgcVar(), // might be calling a trampoline\r\n        module.i32(numArguments)\r\n      ),\r\n      expr\r\n    ], this.currentType.toNativeType()); // not necessarily wrapped\r\n  }\r\n\r\n  compileCommaExpression(\r\n    expression: CommaExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\r\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\r\n      );\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\r\n    return this.module.block(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(\r\n    expression: ElementAccessExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var target = this.resolver.resolveElementAccessExpression(\r\n      expression,\r\n      this.currentFlow,\r\n      contextualType\r\n    ); // reports\r\n    if (!target) return this.module.unreachable();\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS: {\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            expression.expression.range, (<Class>target).internalName\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n        let thisArg = this.compileExpression(expression.expression, (<Class>target).type,\r\n          Constraints.CONV_IMPLICIT\r\n        );\r\n        return this.compileCallDirect(indexedGet, [\r\n          expression.elementExpression\r\n        ], expression, thisArg, constraints);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.unreachable();\r\n  }\r\n\r\n  compileFunctionExpression(\r\n    expression: FunctionExpression,\r\n    contextualSignature: Signature | null,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\r\n    assert(!declaration.typeParameters); // function expression cannot be generic\r\n    var flow = this.currentFlow;\r\n    var actualFunction = flow.actualFunction;\r\n    var prototype = new FunctionPrototype(\r\n      declaration.name.text.length\r\n        ? declaration.name.text\r\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\r\n      actualFunction,\r\n      declaration,\r\n      DecoratorFlags.NONE\r\n    );\r\n    var instance: Function | null;\r\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\r\n\r\n    // compile according to context. this differs from a normal function in that omitted parameter\r\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\r\n    if (contextualSignature) {\r\n      let signatureNode = prototype.functionTypeNode;\r\n      let parameterNodes = signatureNode.parameters;\r\n      let numPresentParameters = parameterNodes.length;\r\n\r\n      // must not require more than the maximum number of parameters\r\n      let parameterTypes = contextualSignature.parameterTypes;\r\n      let numParameters = parameterTypes.length;\r\n      if (numPresentParameters > numParameters) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          expression.range, numParameters.toString(), numPresentParameters.toString()\r\n        );\r\n        return this.module.unreachable();\r\n      }\r\n\r\n      // check non-omitted parameter types\r\n      let parameterNames = new Array<string>(numPresentParameters);\r\n      for (let i = 0; i < numPresentParameters; ++i) {\r\n        let parameterNode = parameterNodes[i];\r\n        parameterNames[i] = parameterNode.name.text; // use actual name\r\n        if (!isTypeOmitted(parameterNode.type)) {\r\n          let resolvedType = this.resolver.resolveType(\r\n            parameterNode.type,\r\n            actualFunction.parent,\r\n            contextualTypeArguments\r\n          );\r\n          if (!resolvedType) return this.module.unreachable();\r\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\r\n            );\r\n            return this.module.unreachable();\r\n          }\r\n        }\r\n        // any unused parameters are inherited but ignored\r\n      }\r\n\r\n      // check non-omitted return type\r\n      let returnType = contextualSignature.returnType;\r\n      if (!isTypeOmitted(signatureNode.returnType)) {\r\n        let resolvedType = this.resolver.resolveType(\r\n          signatureNode.returnType,\r\n          actualFunction.parent,\r\n          contextualTypeArguments\r\n        );\r\n        if (!resolvedType) return this.module.unreachable();\r\n        if (\r\n          returnType == Type.void\r\n            ? resolvedType != Type.void\r\n            : !resolvedType.isStrictlyAssignableTo(returnType)\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n      }\r\n\r\n      // check explicit this type\r\n      let thisType = contextualSignature.thisType;\r\n      let thisTypeNode = signatureNode.explicitThisType;\r\n      if (thisTypeNode) {\r\n        if (!thisType) {\r\n          this.error(\r\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n            thisTypeNode.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n        let resolvedType = this.resolver.resolveType(\r\n          thisTypeNode,\r\n          actualFunction.parent,\r\n          contextualTypeArguments\r\n        );\r\n        if (!resolvedType) return this.module.unreachable();\r\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n      }\r\n\r\n      let signature = new Signature(parameterTypes, returnType, thisType);\r\n      signature.requiredParameters = numParameters; // !\r\n      signature.parameterNames = parameterNames;\r\n      instance = new Function(\r\n        prototype.name,\r\n        prototype,\r\n        signature,\r\n        contextualTypeArguments\r\n      );\r\n      if (!this.compileFunction(instance)) return this.module.unreachable();\r\n      this.currentType = contextualSignature.type;\r\n\r\n    // otherwise compile like a normal function\r\n    } else {\r\n      instance = this.compileFunctionUsingTypeArguments(\r\n        prototype,\r\n        [],\r\n        contextualTypeArguments\r\n      );\r\n      if (!instance) return this.module.unreachable();\r\n      this.currentType = instance.signature.type;\r\n    }\r\n\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.unreachable()\r\n      : this.module.i32(index);\r\n  }\r\n\r\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\r\n  private maybeCompileEnclosingSource(expression: Expression): void {\r\n    var internalPath = expression.range.source.internalPath;\r\n    var filesByName = this.program.filesByName;\r\n    assert(filesByName.has(internalPath));\r\n    var enclosingFile = filesByName.get(internalPath)!;\r\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\r\n      this.compileFileByPath(internalPath, expression);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var actualFunction = flow.actualFunction;\r\n\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (!contextualType.classReference) {\r\n          this.currentType = options.usizeType;\r\n        }\r\n        return options.isWasm64\r\n          ? module.i64(0)\r\n          : module.i32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.i32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.i32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\r\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // {\r\n              //   if (!this) this = <ALLOC>\r\n              //   this.a = X\r\n              //   this.b = Y\r\n              //   return this\r\n              // }\r\n              let stmts: ExpressionRef[] = [\r\n                module.if(\r\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n                    module.local_get(thisLocal.index, nativeSizeType)\r\n                  ),\r\n                  module.local_set(thisLocal.index,\r\n                    this.makeRetain(\r\n                      this.makeAllocation(<Class>classInstance)\r\n                    )\r\n                  )\r\n                )\r\n              ];\r\n              this.makeFieldInitialization(<Class>classInstance, stmts);\r\n              stmts.push(\r\n                module.local_get(thisLocal.index, nativeSizeType)\r\n              );\r\n              this.currentType = thisLocal.type;\r\n              return module.block(null, stmts, nativeSizeType);\r\n            }\r\n          }\r\n          // if not a constructor, `this` type can differ\r\n          let thisType = assert(actualFunction.signature.thisType);\r\n          this.currentType = thisType;\r\n          return module.local_get(thisLocal.index, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.unreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let flow = this.currentFlow;\r\n        let actualFunction = flow.actualFunction;\r\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\r\n            // TS1034 in the parser effectively limits this to property accesses\r\n            this.error(\r\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\r\n              expression.range\r\n            );\r\n          }\r\n        }\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\r\n          if (scopedThis) {\r\n            let scopedThisClass = assert(scopedThis.type.classReference);\r\n            let base = scopedThisClass.base;\r\n            if (base) {\r\n              this.currentType = base.type;\r\n              return module.local_get(scopedThis.index, base.type.toNativeType());\r\n            }\r\n          }\r\n        }\r\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\r\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n          let baseClassInstance = (<Class>classInstance).base;\r\n          if (baseClassInstance) {\r\n            let superType = baseClassInstance.type;\r\n            this.currentType = superType;\r\n            return module.local_get(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.unreachable();\r\n      }\r\n    }\r\n\r\n    this.maybeCompileEnclosingSource(expression);\r\n\r\n    // otherwise resolve\r\n    var target = this.resolver.resolveIdentifier( // reports\r\n      expression,\r\n      flow,\r\n      this.currentEnum || actualFunction\r\n    );\r\n    if (!target) return module.unreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let type = (<Local>target).type;\r\n        assert(type != Type.void);\r\n        if ((<Local>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>target, contextualType, constraints);\r\n        }\r\n        let localIndex = (<Local>target).index;\r\n        assert(localIndex >= 0);\r\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\r\n          type = type.nonNullableType;\r\n        }\r\n        this.currentType = type;\r\n        return this.module.local_get(localIndex, type.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return this.module.unreachable();\r\n        }\r\n        let type = (<Global>target).type;\r\n        assert(type != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\r\n        }\r\n        this.currentType = type;\r\n        return this.module.global_get((<Global>target).internalName, type.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!target.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.unreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\r\n          return this.module.i32(i64_low((<EnumValue>target).constantIntegerValue));\r\n        }\r\n        return this.module.global_get((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = this.resolver.resolveFunction(\r\n          <FunctionPrototype>target,\r\n          null,\r\n          makeMap<string,Type>(flow.contextualTypeArguments)\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.i32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.unreachable();\r\n  }\r\n\r\n  compileInstanceOfExpression(\r\n    expression: InstanceOfExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\r\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\r\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\r\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\r\n    var expr = this.compileExpression(expression.expression, this.options.usizeType);\r\n    var actualType = this.currentType;\r\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\r\n    this.currentType = Type.bool;\r\n    if (!expectedType) return module.unreachable();\r\n\r\n    // instanceof <basic> - must be exact\r\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\r\n      return module.block(null, [\r\n        module.drop(expr),\r\n        module.i32(actualType == expectedType ? 1 : 0)\r\n      ], NativeType.I32);\r\n    }\r\n\r\n    // <basic> instanceof <reference> - always false\r\n    if (!actualType.is(TypeFlags.REFERENCE)) {\r\n      return module.block(null, [\r\n        module.drop(expr),\r\n        module.i32(0)\r\n      ], NativeType.I32);\r\n    }\r\n\r\n    // both LHS and RHS are references now\r\n    var nativeSizeType = actualType.toNativeType();\r\n\r\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\r\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\r\n\r\n      // downcast - check statically\r\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\r\n        return module.binary(\r\n          nativeSizeType == NativeType.I64\r\n            ? BinaryOp.NeI64\r\n            : BinaryOp.NeI32,\r\n          expr,\r\n          actualType.toNativeZero(module)\r\n        );\r\n      }\r\n\r\n      // upcast - check dynamically\r\n      if (expectedType.isAssignableTo(actualType)) {\r\n        let program = this.program;\r\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\r\n          let flow = this.currentFlow;\r\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\r\n          let instanceofInstance = assert(program.instanceofInstance);\r\n          this.compileFunction(instanceofInstance);\r\n          return module.if(\r\n            module.unary(\r\n              nativeSizeType == NativeType.I64\r\n                ? UnaryOp.EqzI64\r\n                : UnaryOp.EqzI32,\r\n              module.local_tee(tempLocal.index, expr),\r\n            ),\r\n            module.i32(0),\r\n            this.makeCallDirect(instanceofInstance, [\r\n              module.local_get(tempLocal.index, nativeSizeType),\r\n              module.i32(expectedType.classReference!.id)\r\n            ], expression)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n        }\r\n      }\r\n\r\n    // either none or both nullable\r\n    } else {\r\n\r\n      // downcast - check statically\r\n      if (actualType.isAssignableTo(expectedType)) {\r\n        return module.block(null, [\r\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\r\n          module.i32(1)\r\n        ], NativeType.I32);\r\n\r\n      // upcast - check dynamically\r\n      } else if (expectedType.isAssignableTo(actualType)) {\r\n        let program = this.program;\r\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\r\n          // FIXME: the temp local and the if can be removed here once flows\r\n          // perform null checking, which would error earlier when checking\r\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\r\n          let flow = this.currentFlow;\r\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\r\n          let instanceofInstance = assert(program.instanceofInstance);\r\n          this.compileFunction(instanceofInstance);\r\n          return module.if(\r\n            module.unary(\r\n              nativeSizeType == NativeType.I64\r\n                ? UnaryOp.EqzI64\r\n                : UnaryOp.EqzI32,\r\n              module.local_tee(tempLocal.index, expr),\r\n            ),\r\n            module.i32(0),\r\n            this.makeCallDirect(instanceofInstance, [\r\n              module.local_get(tempLocal.index, nativeSizeType),\r\n              module.i32(expectedType.classReference!.id)\r\n            ], expression)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    // false\r\n    return module.block(null, [\r\n      module.drop(expr),\r\n      module.i32(0)\r\n    ], NativeType.I32);\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints,\r\n    implicitlyNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitlyNegate);\r\n        let classType = contextualType.classReference;\r\n        if (classType) {\r\n          if (classType.prototype == this.program.arrayPrototype) {\r\n            return this.compileArrayLiteral(\r\n              assert(classType.typeArguments)[0],\r\n              (<ArrayLiteralExpression>expression).elementExpressions,\r\n              constraints,\r\n              expression\r\n            );\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitlyNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.f32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.f64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitlyNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\r\n        this.currentType = type;\r\n        switch (type.kind) {\r\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\r\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\r\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\r\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\r\n          default: return module.i32(i64_low(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitlyNegate);\r\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\r\n      }\r\n      case LiteralKind.OBJECT: {\r\n        assert(!implicitlyNegate);\r\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\r\n      }\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.unreachable();\r\n  }\r\n\r\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\r\n    return this.ensureStaticString(expression.value);\r\n  }\r\n\r\n  compileArrayLiteral(\r\n    elementType: Type,\r\n    expressions: (Expression | null)[],\r\n    constraints: Constraints,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var program = this.program;\r\n    var arrayPrototype = assert(program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\r\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\r\n    var arrayType = arrayInstance.type;\r\n    var flow = this.currentFlow;\r\n\r\n    // block those here so compiling expressions doesn't conflict\r\n    var tempThis = flow.getTempLocal(arrayType);\r\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\r\n\r\n    // compile value expressions and find out whether all are constant\r\n    var length = expressions.length;\r\n    var values = new Array<ExpressionRef>(length);\r\n    var isStatic = true;\r\n    var nativeElementType = elementType.toNativeType();\r\n    for (let i = 0; i < length; ++i) {\r\n      let expression = expressions[i];\r\n      let expr = expression\r\n        ? module.precomputeExpression(\r\n            this.compileExpression(<Expression>expression, elementType,\r\n              Constraints.CONV_IMPLICIT\r\n            )\r\n          )\r\n        : elementType.toNativeZero(module);\r\n      if (getExpressionId(expr) == ExpressionId.Const) {\r\n        assert(getExpressionType(expr) == nativeElementType);\r\n      } else {\r\n        isStatic = false;\r\n      }\r\n      values[i] = expr;\r\n    }\r\n\r\n    // if the array is static, make a static arraybuffer segment\r\n    if (isStatic) {\r\n      flow.freeTempLocal(tempThis);\r\n      flow.freeTempLocal(tempDataStart);\r\n\r\n      let runtimeHeaderSize = program.runtimeHeaderSize;\r\n      let bufferSegment = this.ensureStaticArrayBuffer(elementType, values);\r\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\r\n\r\n      // make both the buffer and array header static if assigned to a global. this can't be done\r\n      // if inside of a function because each invocation must create a new array reference then.\r\n      if (constraints & Constraints.PREFER_STATIC) {\r\n        let arraySegment = this.ensureStaticArrayHeader(elementType, bufferSegment);\r\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\r\n        this.currentType = arrayType;\r\n        return program.options.isWasm64\r\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\r\n          : this.module.i32(i64_low(arrayAddress));\r\n\r\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\r\n      } else {\r\n        // makeArray(length, alignLog2, classId, staticBuffer)\r\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\r\n          module.i32(length),\r\n          program.options.isWasm64\r\n            ? module.i64(elementType.alignLog2)\r\n            : module.i32(elementType.alignLog2),\r\n          module.i32(arrayInstance.id),\r\n          program.options.isWasm64\r\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\r\n            : module.i32(i64_low(bufferAddress))\r\n        ], reportNode);\r\n        this.currentType = arrayType;\r\n        return this.makeAutorelease(this.makeRetain(expr));\r\n      }\r\n    }\r\n\r\n    // otherwise compile an explicit instantiation with indexed sets\r\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\r\n    if (!setter) {\r\n      flow.freeTempLocal(tempThis);\r\n      flow.freeTempLocal(tempDataStart);\r\n      this.error(\r\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n        reportNode.range, arrayInstance.internalName\r\n      );\r\n      this.currentType = arrayType;\r\n      return module.unreachable();\r\n    }\r\n    var nativeArrayType = arrayType.toNativeType();\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\r\n    stmts.push(\r\n      module.local_set(tempThis.index,\r\n        this.makeCallDirect(program.allocArrayInstance, [\r\n          module.i32(length),\r\n          program.options.isWasm64\r\n            ? module.i64(elementType.alignLog2)\r\n            : module.i32(elementType.alignLog2),\r\n          module.i32(arrayInstance.id),\r\n          program.options.isWasm64\r\n            ? module.i64(0)\r\n            : module.i32(0)\r\n        ], reportNode),\r\n      )\r\n    );\r\n    // tempData = tempThis.dataStart\r\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\r\n    assert(dataStart.kind == ElementKind.FIELD);\r\n    stmts.push(\r\n      module.local_set(tempDataStart.index,\r\n        module.load(arrayType.byteSize, false,\r\n          module.local_get(tempThis.index, nativeArrayType),\r\n          nativeArrayType,\r\n          (<Field>dataStart).memoryOffset\r\n        )\r\n      )\r\n    );\r\n    var isManaged = elementType.isManaged;\r\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\r\n      let valueExpr = values[i];\r\n      if (isManaged) {\r\n        // value = __retain(value)\r\n        valueExpr = this.makeRetain(valueExpr);\r\n      }\r\n      // store<T>(tempData, value, immOffset)\r\n      stmts.push(\r\n        module.store(elementType.byteSize,\r\n          module.local_get(tempDataStart.index, nativeArrayType),\r\n          valueExpr,\r\n          nativeElementType,\r\n          i << alignLog2\r\n        )\r\n      );\r\n    }\r\n    // -> tempThis\r\n    stmts.push(\r\n      module.local_get(tempThis.index, nativeArrayType)\r\n    );\r\n    flow.freeTempLocal(tempThis);\r\n    flow.freeTempLocal(tempDataStart);\r\n    this.currentType = arrayType;\r\n    return module.block(null, stmts, nativeArrayType);\r\n  }\r\n\r\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // contextual type must be a class\r\n    var classReference = contextualType.classReference;\r\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, \"<object>\", contextualType.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n\r\n    // if present, check that the constructor is compatible with object literals\r\n    var ctor = classReference.constructorInstance;\r\n    if (ctor) {\r\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\r\n      // object literal and use them to call the ctor while not generating a store.\r\n      if (ctor.signature.requiredParameters) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PRIVATE)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PROTECTED)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n    }\r\n\r\n    // check and compile field values\r\n    var names = expression.names;\r\n    var numNames = names.length;\r\n    var values = expression.values;\r\n    var members = classReference.members;\r\n    var hasErrors = false;\r\n    var exprs = new Array<ExpressionRef>(numNames + 2);\r\n    var flow = this.currentFlow;\r\n    var tempLocal = flow.getAutoreleaseLocal(this.options.usizeType);\r\n    assert(numNames == values.length);\r\n    for (let i = 0, k = numNames; i < k; ++i) {\r\n      let member = members ? members.get(names[i].text) : null;\r\n      if (!member || member.kind != ElementKind.FIELD) {\r\n        this.error(\r\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n          names[i].range, names[i].text, classReference.toString()\r\n        );\r\n        hasErrors = true;\r\n        continue;\r\n      }\r\n      let type = (<Field>member).type;\r\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\r\n        type.byteSize,\r\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\r\n        this.compileExpression(values[i], (<Field>member).type, Constraints.CONV_IMPLICIT),\r\n        type.toNativeType(),\r\n        (<Field>member).memoryOffset\r\n      );\r\n    }\r\n    this.currentType = classReference.type.nonNullableType;\r\n    if (hasErrors) return module.unreachable();\r\n\r\n    // allocate a new instance first and assign 'this' to the temp. local\r\n    exprs[0] = module.local_set(\r\n      tempLocal.index,\r\n      this.makeRetain(\r\n        this.makeAllocation(classReference)\r\n      )\r\n    );\r\n\r\n    // once all field values have been set, return 'this'\r\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\r\n\r\n    this.currentType = classReference.type;\r\n    return module.block(null, exprs, this.options.nativeSizeType);\r\n  }\r\n\r\n  compileNewExpression(\r\n    expression: NewExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // obtain the class being instantiated\r\n    var target = this.resolver.resolveExpression( // reports\r\n      expression.expression,\r\n      flow\r\n    );\r\n    if (!target) return module.unreachable();\r\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        expression.expression.range\r\n      );\r\n      return this.module.unreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>target;\r\n    var classInstance: Class | null = null;\r\n    var typeArguments = expression.typeArguments;\r\n    var classReference: Class | null;\r\n    if (\r\n      !typeArguments &&\r\n      (classReference = contextualType.classReference) !== null &&\r\n      classReference.is(CommonFlags.GENERIC)\r\n    ) {\r\n      classInstance = this.resolver.resolveClass(\r\n        classPrototype,\r\n        classReference.typeArguments,\r\n        makeMap<string,Type>(flow.contextualTypeArguments)\r\n      );\r\n    } else {\r\n      classInstance = this.resolver.resolveClassInclTypeArguments(\r\n        classPrototype,\r\n        typeArguments,\r\n        flow.actualFunction.parent, // relative to caller\r\n        makeMap<string,Type>(flow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n    if (!classInstance) return module.unreachable();\r\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\r\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\r\n  }\r\n\r\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\r\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\r\n    var instance = classInstance.constructorInstance;\r\n    if (instance) {\r\n      // do not attempt to compile it if inlined anyway\r\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\r\n      return instance;\r\n    }\r\n\r\n    // clone base constructor if a derived class\r\n    var baseClass = classInstance.base;\r\n    if (baseClass) {\r\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\r\n      instance = new Function(\r\n        CommonSymbols.constructor,\r\n        new FunctionPrototype(\r\n          CommonSymbols.constructor,\r\n          classInstance,\r\n          // declaration is important, i.e. to access optional parameter initializers\r\n          (<FunctionDeclaration>baseCtor.declaration).clone()\r\n        ),\r\n        baseCtor.signature,\r\n        null\r\n      );\r\n\r\n    // otherwise make a default constructor\r\n    } else {\r\n      instance = new Function(\r\n        CommonSymbols.constructor,\r\n        new FunctionPrototype(\r\n          CommonSymbols.constructor,\r\n          classInstance,\r\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\r\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\r\n          )\r\n        ),\r\n        new Signature(null, classInstance.type, classInstance.type),\r\n        null\r\n      );\r\n    }\r\n\r\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\r\n    instance.set(CommonFlags.COMPILED);\r\n    instance.prototype.setResolvedInstance(\"\", instance);\r\n    classInstance.constructorInstance = instance;\r\n    var previousFlow = this.currentFlow;\r\n    var flow = instance.flow;\r\n    this.currentFlow = flow;\r\n\r\n    // generate body\r\n    var signature = instance.signature;\r\n    var module = this.module;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    var stmts = new Array<ExpressionRef>();\r\n\r\n    // {\r\n    //   if (!this) this = <ALLOC>\r\n    //   IF_DERIVED: this = super(this, ...args)\r\n    //   this.a = X\r\n    //   this.b = Y\r\n    //   return this\r\n    // }\r\n    stmts.push(\r\n      module.if(\r\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n          module.local_get(0, nativeSizeType)\r\n        ),\r\n        module.local_set(0,\r\n          this.makeRetain(\r\n            this.makeAllocation(classInstance)\r\n          )\r\n        )\r\n      )\r\n    );\r\n    if (baseClass) {\r\n      let parameterTypes = signature.parameterTypes;\r\n      let numParameters = parameterTypes.length;\r\n      let operands = new Array<ExpressionRef>(1 + numParameters);\r\n      operands[0] = module.local_get(0, nativeSizeType);\r\n      for (let i = 0; i < numParameters; ++i) {\r\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\r\n      }\r\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\r\n      stmts.push(\r\n        module.local_set(0,\r\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\r\n        )\r\n      );\r\n    }\r\n    this.makeFieldInitialization(classInstance, stmts);\r\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\r\n    flow.freeScopedLocals();\r\n    this.currentFlow = previousFlow;\r\n\r\n    // make the function\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var locals = instance.localsByIndex;\r\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\r\n    var numOperands = 1 + signature.parameterTypes.length;\r\n    var numLocals = locals.length;\r\n    if (numLocals > numOperands) {\r\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\r\n    }\r\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes, body);\r\n    instance.finalize(module, funcRef);\r\n    return instance;\r\n  }\r\n\r\n  compileInstantiate(\r\n    /** Class to instantiate. */\r\n    classInstance: Class,\r\n    /** Constructor arguments. */\r\n    argumentExpressions: Expression[],\r\n    /** Contextual flags. */\r\n    constraints: Constraints,\r\n    /** Node to report on. */\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var ctor = this.ensureConstructor(classInstance, reportNode);\r\n    var expr = this.compileCallDirect( // no need for another autoreleased local\r\n      ctor,\r\n      argumentExpressions,\r\n      reportNode,\r\n      this.options.usizeType.toNativeZero(this.module),\r\n      constraints\r\n    );\r\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\r\n      this.currentType = classInstance.type; // important because a super ctor could be called\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    this.maybeCompileEnclosingSource(propertyAccess);\r\n\r\n    var target = this.resolver.resolvePropertyAccessExpression(propertyAccess, flow, contextualType); // reports\r\n    if (!target) return module.unreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: { // static field\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return module.unreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\r\n        if (!this.compileEnum(<Enum>theEnum)) {\r\n          this.currentType = Type.i32;\r\n          return this.module.unreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\r\n          return module.i32(i64_low((<EnumValue>target).constantIntegerValue));\r\n        }\r\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        assert((<Field>target).memoryOffset >= 0);\r\n        let thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\r\n        this.currentType = (<Field>target).type;\r\n        return module.load(\r\n          (<Field>target).type.byteSize,\r\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          thisExpr,\r\n          (<Field>target).type.toNativeType(),\r\n          (<Field>target).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\r\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\r\n        if (getterPrototype) {\r\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\r\n          if (getter) return this.compileCallDirect(getter, [], propertyAccess, 0);\r\n        }\r\n        return module.unreachable();\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let getterInstance = assert((<Property>target).getterInstance);\r\n        return this.compileCallDirect(getterInstance, [], propertyAccess,\r\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\r\n        );\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.error(\r\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\r\n          propertyAccess.range, (<FunctionPrototype>target).name\r\n        );\r\n        return module.unreachable();\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.unreachable();\r\n  }\r\n\r\n  compileTernaryExpression(\r\n    expression: TernaryExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    var condExpr = this.module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpression(expression.condition, Type.bool),\r\n        this.currentType\r\n      )\r\n    );\r\n\r\n    // Try to eliminate unnecesssary branches if the condition is constant\r\n    if (\r\n      getExpressionId(condExpr) == ExpressionId.Const &&\r\n      getExpressionType(condExpr) == NativeType.I32\r\n    ) {\r\n      return getConstValueI32(condExpr)\r\n        ? this.compileExpression(ifThen, contextualType)\r\n        : this.compileExpression(ifElse, contextualType);\r\n    }\r\n\r\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\r\n\r\n    var ifThenFlow = outerFlow.fork();\r\n    this.currentFlow = ifThenFlow;\r\n    var ifThenExpr = this.compileExpression(ifThen, contextualType, inheritedConstraints);\r\n    var ifThenType = this.currentType;\r\n    var IfThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\r\n\r\n    var ifElseFlow = outerFlow.fork();\r\n    this.currentFlow = ifElseFlow;\r\n    var ifElseExpr = this.compileExpression(ifElse, contextualType, inheritedConstraints);\r\n    var ifElseType = this.currentType;\r\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\r\n\r\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\r\n    if (!commonType) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\r\n      );\r\n      this.currentType = contextualType;\r\n      return this.module.unreachable();\r\n    }\r\n    ifThenExpr = this.convertExpression(\r\n      ifThenExpr,\r\n      ifThenType, commonType,\r\n      false, false,\r\n      ifThen\r\n    );\r\n    ifElseExpr = this.convertExpression(\r\n      ifElseExpr,\r\n      ifElseType, commonType,\r\n      false, false,\r\n      ifElse\r\n    );\r\n    this.currentType = commonType;\r\n\r\n    if (IfThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\r\n      if (!IfThenAutoreleaseSkipped) {\r\n        ifThenExpr = this.makeRetain(ifThenExpr);\r\n        IfThenAutoreleaseSkipped = true;\r\n      } else {\r\n        ifElseExpr = this.makeRetain(ifElseExpr);\r\n        ifElseAutoreleaseSkipped = true;\r\n      }\r\n    } else if (!IfThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\r\n      // if (!(constraints & Constraints.WILL_RETAIN)) {\r\n        ifThenExpr = this.moveAutorelease(ifThenExpr, ifThenFlow, outerFlow);\r\n        ifElseExpr = this.moveAutorelease(ifElseExpr, ifElseFlow, outerFlow);\r\n      // }\r\n    }\r\n\r\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\r\n    ifThenFlow.freeScopedLocals();\r\n\r\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\r\n    ifElseFlow.freeScopedLocals();\r\n\r\n    this.currentFlow = outerFlow;\r\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\r\n\r\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\r\n    assert(IfThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\r\n    if (IfThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\r\n    return expr;\r\n  }\r\n\r\n  compileUnaryPostfixExpression(\r\n    expression: UnaryPostfixExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression( // reports\r\n      expression.operand,\r\n      contextualType.exceptVoid,\r\n      Constraints.NONE\r\n    );\r\n\r\n    // shortcut if compiling the getter already failed\r\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\r\n\r\n    // if the value isn't dropped, a temp. local is required to remember the original value\r\n    var tempLocal: Local | null = null;\r\n    if (contextualType != Type.void) {\r\n      tempLocal = flow.getTempLocal(this.currentType);\r\n      getValue = module.local_tee(\r\n        tempLocal.index,\r\n        getValue\r\n      );\r\n    }\r\n\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(\r\n              BinaryOp.AddI32,\r\n              getValue,\r\n              module.i32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classReference = this.currentType.classReference;\r\n              if (classReference) {\r\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\r\n                if (overload) {\r\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n                  break;\r\n                }\r\n              }\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.unreachable();\r\n            }\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            expr = module.binary(\r\n              options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              getValue,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(\r\n              BinaryOp.AddI64,\r\n              getValue,\r\n              module.i64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(\r\n              BinaryOp.AddF32,\r\n              getValue,\r\n              module.f32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(\r\n              BinaryOp.AddF64,\r\n              getValue,\r\n              module.f64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(\r\n              BinaryOp.SubI32,\r\n              getValue,\r\n              module.i32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classReference = this.currentType.classReference;\r\n              if (classReference) {\r\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\r\n                if (overload) {\r\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n                  break;\r\n                }\r\n              }\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.unreachable();\r\n            }\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            expr = module.binary(\r\n              options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              getValue,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(\r\n              BinaryOp.SubI64,\r\n              getValue,\r\n              module.i64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(\r\n              BinaryOp.SubF32,\r\n              getValue,\r\n              module.f32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(\r\n              BinaryOp.SubF64,\r\n              getValue,\r\n              module.f64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.unreachable();\r\n      }\r\n    }\r\n\r\n    var resolver = this.resolver;\r\n    var target = resolver.resolveExpression(expression.operand, flow); // reports\r\n\r\n    // simplify if dropped anyway\r\n    if (!tempLocal) {\r\n      this.currentType = Type.void;\r\n      if (!target) return module.unreachable();\r\n      return this.makeAssignment(\r\n        target,\r\n        expr,\r\n        expression.operand,\r\n        resolver.currentThisExpression,\r\n        resolver.currentElementExpression,\r\n        false\r\n      );\r\n    } else if (!target) {\r\n      return module.unreachable();\r\n    }\r\n\r\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\r\n    var setValue = this.makeAssignment(\r\n      target,\r\n      expr, // includes a tee of getValue to tempLocal\r\n      expression.operand,\r\n      resolver.currentThisExpression,\r\n      resolver.currentElementExpression,\r\n      false\r\n    );\r\n\r\n    this.currentType = tempLocal.type;\r\n    flow.freeTempLocal(tempLocal);\r\n    var nativeType = tempLocal.type.toNativeType();\r\n\r\n    return module.block(null, [\r\n      setValue,\r\n      module.local_get(tempLocal.index, nativeType)\r\n    ], nativeType); // result of 'x++' / 'x--' might overflow\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type,\r\n    constraints: Constraints\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType.exceptVoid,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        // nop\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, Constraints.NONE, true);\r\n          // compileExpression normally does this:\r\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n          break;\r\n        }\r\n\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType.exceptVoid,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              this.currentType.toNativeZero(module),\r\n              expr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.unary(UnaryOp.NegF32, expr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.unary(UnaryOp.NegF64, expr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType.exceptVoid,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType.exceptVoid,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType.exceptVoid,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          // allow '!' for references even without an overload\r\n        }\r\n\r\n        expr = this.makeIsFalseish(expr, this.currentType);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          Constraints.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.unreachable();\r\n        } else {\r\n          expr = this.convertExpression(expr,\r\n            this.currentType, this.currentType.intType,\r\n            false, false,\r\n            expression.operand\r\n          );\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              this.currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.unreachable();\r\n      }\r\n    }\r\n    if (!compound) return expr;\r\n    var resolver = this.resolver;\r\n    var target = resolver.resolveExpression(expression.operand, this.currentFlow);\r\n    if (!target) return module.unreachable();\r\n    return this.makeAssignment(\r\n      target,\r\n      expr,\r\n      expression.operand,\r\n      resolver.currentThisExpression,\r\n      resolver.currentElementExpression,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\r\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    switch (type.kind) {\r\n      case TypeKind.I8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\r\n            : module.binary(BinaryOp.ShrI32,\r\n                module.binary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.i32(24)\r\n                ),\r\n                module.i32(24)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.I16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\r\n            : module.binary(BinaryOp.ShrI32,\r\n                module.binary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.i32(16)\r\n                ),\r\n                module.i32(16)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.binary(BinaryOp.AndI32,\r\n            expr,\r\n            module.i32(0xff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.binary(BinaryOp.AndI32,\r\n            expr,\r\n            module.i32(0xffff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.BOOL: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          // bool is special in that it compares to 0 instead of masking with 0x1\r\n          expr = module.binary(BinaryOp.NeI32,\r\n            expr,\r\n            module.i32(0)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\r\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\r\n    var parentFunction = this.currentFlow.parentFunction;\r\n    var source = range.source;\r\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\r\n    range.debugInfoRef = expr;\r\n    parentFunction.debugLocations.push(range);\r\n  }\r\n\r\n  // === Specialized code generation ==============================================================\r\n\r\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\r\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return module.unary(UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.unary(UnaryOp.EqzI64, expr);\r\n      }\r\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\r\n      case TypeKind.ISIZE: {\r\n        return module.unary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.binary(BinaryOp.EqF32, expr, module.f32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.binary(BinaryOp.EqF64, expr, module.f64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.i32(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\r\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.BOOL: // not a mask, just != 0\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return expr;\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\r\n      }\r\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\r\n      case TypeKind.ISIZE: {\r\n        return type.size == 64\r\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\r\n          : expr;\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.binary(BinaryOp.NeF32, expr, module.f32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.binary(BinaryOp.NeF64, expr, module.f64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.i32(0);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\r\n  makeAllocation(\r\n    classInstance: Class\r\n  ): ExpressionRef {\r\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\r\n    var program = this.program;\r\n    assert(classInstance.program == program);\r\n    var module = this.module;\r\n    var options = this.options;\r\n    this.currentType = classInstance.type;\r\n    var allocInstance = program.allocInstance;\r\n    this.compileFunction(allocInstance);\r\n    return module.call(allocInstance.internalName, [\r\n      options.isWasm64\r\n        ? module.i64(classInstance.currentMemoryOffset)\r\n        : module.i32(classInstance.currentMemoryOffset),\r\n      module.i32(\r\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\r\n          ? 0\r\n          : classInstance.id\r\n      )\r\n    ], options.nativeSizeType);\r\n  }\r\n\r\n  /** Makes the initializers for a class's fields. */\r\n  makeFieldInitialization(\r\n    classInstance: Class,\r\n    stmts: ExpressionRef[] = []\r\n  ): ExpressionRef[] {\r\n    var members = classInstance.members;\r\n    if (!members) return [];\r\n\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\r\n    var thisLocalIndex = isInline\r\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\r\n      : 0;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n\r\n    for (let member of members.values()) {\r\n      if (\r\n        member.kind != ElementKind.FIELD || // not a field\r\n        member.parent != classInstance      // inherited field\r\n      ) continue;\r\n\r\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\r\n      let fieldType = field.type;\r\n      let nativeFieldType = fieldType.toNativeType();\r\n      let initializerNode = field.prototype.initializerNode;\r\n      if (initializerNode) { // use initializer\r\n        let initExpr = this.compileExpression(initializerNode, fieldType, // reports\r\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\r\n        );\r\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\r\n          initExpr = this.makeRetain(initExpr);\r\n        }\r\n        stmts.push(\r\n          module.store(fieldType.byteSize,\r\n            module.local_get(thisLocalIndex, nativeSizeType),\r\n            initExpr,\r\n            nativeFieldType,\r\n            field.memoryOffset\r\n          )\r\n        );\r\n      } else {\r\n        let parameterIndex = field.prototype.parameterIndex;\r\n        stmts.push(\r\n          module.store(fieldType.byteSize,\r\n            module.local_get(thisLocalIndex, nativeSizeType),\r\n            parameterIndex >= 0 // initialized via parameter (here: a local)\r\n              ? module.local_get(\r\n                  isInline\r\n                    ? assert(flow.lookupLocal(field.name)).index\r\n                    : 1 + parameterIndex, // this is local 0\r\n                  nativeFieldType\r\n                )\r\n              : fieldType.toNativeZero(module),\r\n            nativeFieldType,\r\n            field.memoryOffset\r\n          )\r\n        );\r\n      }\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  makeInstanceOfClass(\r\n    expr: ExpressionRef,\r\n    classInstance: Class\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var idTemp = flow.getTempLocal(Type.i32);\r\n    var idExpr = module.load(4, false,\r\n      module.binary(BinaryOp.SubI32,\r\n        expr,\r\n        module.i32(this.program.runtimeHeaderSize)\r\n      ),\r\n      NativeType.I32\r\n    );\r\n    var label = \"instanceof_\" + classInstance.name + \"|\" + flow.pushBreakLabel();\r\n    var conditions: ExpressionRef[] = [];\r\n    conditions.push(\r\n      module.drop( // br_if returns the value too\r\n        module.br(label,\r\n          module.binary(BinaryOp.EqI32, // classId == class.id\r\n            module.local_tee(idTemp.index, idExpr),\r\n            module.i32(classInstance.id)\r\n          ),\r\n          module.i32(1) // ? true\r\n        )\r\n      )\r\n    );\r\n    // TODO: insert conditions for all possible subclasses (i.e. cat is also animal)\r\n    // TODO: simplify if there are none\r\n    conditions.push(\r\n      module.i32(0) // : false\r\n    );\r\n    flow.freeTempLocal(idTemp);\r\n    flow.popBreakLabel();\r\n    return module.block(label, conditions, NativeType.I32);\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\nfunction mangleImportName(\r\n  element: Element,\r\n  declaration: DeclarationStatement\r\n): void {\r\n  // by default, use the file name as the module name\r\n  mangleImportName_moduleName = declaration.range.source.simplePath;\r\n  // and the internal name of the element within that file as the element name\r\n  mangleImportName_elementName = mangleInternalName(\r\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\r\n  );\r\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\r\n\r\n  var program = element.program;\r\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\r\n  var args = decorator.arguments;\r\n  if (args && args.length) {\r\n    let arg = args[0];\r\n    // if one argument is given, override just the element name\r\n    // if two arguments are given, override both module and element name\r\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n      if (args.length >= 2) {\r\n        arg = args[1];\r\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n          mangleImportName_moduleName = mangleImportName_elementName;\r\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n          if (args.length > 2) {\r\n            program.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              decorator.range, \"2\", args.length.toString()\r\n            );\r\n          }\r\n        } else {\r\n          program.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            arg.range\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      program.error(\r\n        DiagnosticCode.String_literal_expected,\r\n        arg.range\r\n      );\r\n    }\r\n  } else {\r\n    program.error(\r\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n      decorator.range, \"1\", \"0\"\r\n    );\r\n  }\r\n}\r\n\r\nvar mangleImportName_moduleName: string;\r\nvar mangleImportName_elementName: string;\r\n\r\n/** Flattens a series of expressions to a nop, a single statement or a block depending on statement count. */\r\nexport function flatten(module: Module, stmts: ExpressionRef[], type: NativeType): ExpressionRef {\r\n  var length = stmts.length;\r\n  if (length == 0) return module.nop(); // usually filtered out again\r\n  if (length == 1) {\r\n    let single = stmts[0];\r\n    if (getExpressionType(single) == type) return single;\r\n    if (getExpressionId(single) == ExpressionId.Block) {\r\n      let count = getBlockChildCount(single);\r\n      let children = new Array<ExpressionRef>(count);\r\n      for (let i = 0; i < count; ++i) children[i] = getBlockChild(single, i);\r\n      return module.block(getBlockName(single), children, type);\r\n    }\r\n  }\r\n  return module.block(null, stmts,\r\n    type == NativeType.Auto\r\n      ? getExpressionType(stmts[length - 1])\r\n      : type\r\n  );\r\n}\r\n","/**\r\n * Generated from diagnosticsMessages.json. Do not edit.\r\n * @module diagnostics\r\n *//***/\r\n\r\n/* tslint:disable:max-line-length */\r\n\r\n/** Enum of available diagnostic codes. */\r\nexport enum DiagnosticCode {\r\n  Operation_not_supported = 100,\r\n  Operation_is_unsafe = 101,\r\n  User_defined_0 = 102,\r\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\r\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\r\n  Type_0_cannot_be_changed_to_type_1 = 202,\r\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\r\n  Basic_type_0_cannot_be_nullable = 204,\r\n  Cannot_export_a_mutable_global = 205,\r\n  Mutable_value_cannot_be_inlined = 206,\r\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\r\n  Unmanaged_classes_cannot_implement_interfaces = 208,\r\n  Invalid_regular_expression_flags = 209,\r\n  Implementation_0_must_match_the_signature_1 = 210,\r\n  Class_0_is_sealed_and_cannot_be_extended = 211,\r\n  Decorator_0_is_not_valid_here = 212,\r\n  Duplicate_decorator = 213,\r\n  An_allocator_must_be_present_to_use_0 = 214,\r\n  Optional_parameter_must_have_an_initializer = 215,\r\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\r\n  Function_0_cannot_be_inlined_into_itself = 217,\r\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\r\n  Optional_properties_are_not_supported = 219,\r\n  Expression_must_be_a_compile_time_constant = 220,\r\n  Module_cannot_have_multiple_start_functions = 221,\r\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\r\n  _0_must_be_a_power_of_two = 223,\r\n  TODO_Cannot_inline_inferred_calls_and_specific_internals_yet = 224,\r\n  Expression_is_never_null = 225,\r\n  Unterminated_string_literal = 1002,\r\n  Identifier_expected = 1003,\r\n  _0_expected = 1005,\r\n  A_file_cannot_have_a_reference_to_itself = 1006,\r\n  Trailing_comma_not_allowed = 1009,\r\n  Unexpected_token = 1012,\r\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\r\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\r\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\r\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\r\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\r\n  _0_modifier_cannot_be_used_here = 1042,\r\n  A_rest_parameter_cannot_be_optional = 1047,\r\n  A_rest_parameter_cannot_have_an_initializer = 1048,\r\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\r\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\r\n  A_get_accessor_cannot_have_parameters = 1054,\r\n  Enum_member_must_have_initializer = 1061,\r\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\r\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\r\n  An_accessor_cannot_have_type_parameters = 1094,\r\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\r\n  Type_parameter_list_cannot_be_empty = 1098,\r\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\r\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\r\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\r\n  Expression_expected = 1109,\r\n  Type_expected = 1110,\r\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\r\n  Duplicate_label_0 = 1114,\r\n  An_export_assignment_cannot_have_modifiers = 1120,\r\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\r\n  Digit_expected = 1124,\r\n  Hexadecimal_digit_expected = 1125,\r\n  Unexpected_end_of_text = 1126,\r\n  Invalid_character = 1127,\r\n  _case_or_default_expected = 1130,\r\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\r\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\r\n  Type_argument_expected = 1140,\r\n  String_literal_expected = 1141,\r\n  Line_break_not_permitted_here = 1142,\r\n  Declaration_expected = 1146,\r\n  _const_declarations_must_be_initialized = 1155,\r\n  Unterminated_regular_expression_literal = 1161,\r\n  Interface_declaration_cannot_have_implements_clause = 1176,\r\n  Binary_digit_expected = 1177,\r\n  Octal_digit_expected = 1178,\r\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\r\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\r\n  Unterminated_Unicode_escape_sequence = 1199,\r\n  Decorators_are_not_valid_here = 1206,\r\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\r\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\r\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\r\n  A_class_may_only_extend_another_class = 1311,\r\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\r\n  Duplicate_identifier_0 = 2300,\r\n  Cannot_find_name_0 = 2304,\r\n  Module_0_has_no_exported_member_1 = 2305,\r\n  Generic_type_0_requires_1_type_argument_s = 2314,\r\n  Type_0_is_not_generic = 2315,\r\n  Type_0_is_not_assignable_to_type_1 = 2322,\r\n  Index_signature_is_missing_in_type_0 = 2329,\r\n  _this_cannot_be_referenced_in_current_location = 2332,\r\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\r\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\r\n  Property_0_does_not_exist_on_type_1 = 2339,\r\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\r\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\r\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\r\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\r\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\r\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\r\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\r\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\r\n  _get_and_set_accessor_must_have_the_same_type = 2380,\r\n  Constructor_implementation_is_missing = 2390,\r\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\r\n  Multiple_constructor_implementations_are_not_allowed = 2392,\r\n  Duplicate_function_implementation = 2393,\r\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\r\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\r\n  Type_0_has_no_property_1 = 2460,\r\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\r\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\r\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\r\n  Object_is_possibly_null = 2531,\r\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\r\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\r\n  Index_signature_in_type_0_only_permits_reading = 2542,\r\n  Expected_0_arguments_but_got_1 = 2554,\r\n  Expected_at_least_0_arguments_but_got_1 = 2555,\r\n  Expected_0_type_arguments_but_got_1 = 2558,\r\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\r\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\r\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\r\n  Namespace_0_has_no_exported_member_1 = 2694,\r\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\r\n  Duplicate_property_0 = 2718,\r\n  File_0_not_found = 6054,\r\n  Numeric_separators_are_not_allowed_here = 6188,\r\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\r\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\r\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\r\n}\r\n\r\n/** Translates a diagnostic code to its respective string. */\r\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\r\n  switch (code) {\r\n    case 100: return \"Operation not supported.\";\r\n    case 101: return \"Operation is unsafe.\";\r\n    case 102: return \"User-defined: {0}\";\r\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\r\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\r\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\r\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\r\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\r\n    case 205: return \"Cannot export a mutable global.\";\r\n    case 206: return \"Mutable value cannot be inlined.\";\r\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\r\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\r\n    case 209: return \"Invalid regular expression flags.\";\r\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\r\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\r\n    case 212: return \"Decorator '{0}' is not valid here.\";\r\n    case 213: return \"Duplicate decorator.\";\r\n    case 214: return \"An allocator must be present to use '{0}'.\";\r\n    case 215: return \"Optional parameter must have an initializer.\";\r\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\r\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\r\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\r\n    case 219: return \"Optional properties are not supported.\";\r\n    case 220: return \"Expression must be a compile-time constant.\";\r\n    case 221: return \"Module cannot have multiple start functions.\";\r\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\r\n    case 223: return \"'{0}' must be a power of two.\";\r\n    case 224: return \"TODO: Cannot inline inferred calls and specific internals yet.\";\r\n    case 225: return \"Expression is never 'null'.\";\r\n    case 1002: return \"Unterminated string literal.\";\r\n    case 1003: return \"Identifier expected.\";\r\n    case 1005: return \"'{0}' expected.\";\r\n    case 1006: return \"A file cannot have a reference to itself.\";\r\n    case 1009: return \"Trailing comma not allowed.\";\r\n    case 1012: return \"Unexpected token.\";\r\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\r\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\r\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\r\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\r\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\r\n    case 1042: return \"'{0}' modifier cannot be used here.\";\r\n    case 1047: return \"A rest parameter cannot be optional.\";\r\n    case 1048: return \"A rest parameter cannot have an initializer.\";\r\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\r\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\r\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\r\n    case 1061: return \"Enum member must have initializer.\";\r\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\r\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\r\n    case 1094: return \"An accessor cannot have type parameters.\";\r\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\r\n    case 1098: return \"Type parameter list cannot be empty.\";\r\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\r\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\r\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\r\n    case 1109: return \"Expression expected.\";\r\n    case 1110: return \"Type expected.\";\r\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\r\n    case 1114: return \"Duplicate label '{0}'.\";\r\n    case 1120: return \"An export assignment cannot have modifiers.\";\r\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\r\n    case 1124: return \"Digit expected.\";\r\n    case 1125: return \"Hexadecimal digit expected.\";\r\n    case 1126: return \"Unexpected end of text.\";\r\n    case 1127: return \"Invalid character.\";\r\n    case 1130: return \"'case' or 'default' expected.\";\r\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\r\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\r\n    case 1140: return \"Type argument expected.\";\r\n    case 1141: return \"String literal expected.\";\r\n    case 1142: return \"Line break not permitted here.\";\r\n    case 1146: return \"Declaration expected.\";\r\n    case 1155: return \"'const' declarations must be initialized.\";\r\n    case 1161: return \"Unterminated regular expression literal.\";\r\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\r\n    case 1177: return \"Binary digit expected.\";\r\n    case 1178: return \"Octal digit expected.\";\r\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\r\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\r\n    case 1199: return \"Unterminated Unicode escape sequence.\";\r\n    case 1206: return \"Decorators are not valid here.\";\r\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\r\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\r\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\r\n    case 1311: return \"A class may only extend another class.\";\r\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\r\n    case 2300: return \"Duplicate identifier '{0}'.\";\r\n    case 2304: return \"Cannot find name '{0}'.\";\r\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\r\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\r\n    case 2315: return \"Type '{0}' is not generic.\";\r\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\r\n    case 2329: return \"Index signature is missing in type '{0}'.\";\r\n    case 2332: return \"'this' cannot be referenced in current location.\";\r\n    case 2335: return \"'super' can only be referenced in a derived class.\";\r\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\r\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\r\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\r\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\r\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\r\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\r\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\r\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\r\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\r\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\r\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\r\n    case 2390: return \"Constructor implementation is missing.\";\r\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\r\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\r\n    case 2393: return \"Duplicate function implementation.\";\r\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\r\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\r\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\r\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\r\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\r\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\r\n    case 2531: return \"Object is possibly 'null'.\";\r\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\r\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\r\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\r\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\r\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\r\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\r\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\r\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\r\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\r\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\r\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\r\n    case 2718: return \"Duplicate property '{0}'.\";\r\n    case 6054: return \"File '{0}' not found.\";\r\n    case 6188: return \"Numeric separators are not allowed here.\";\r\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\r\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\r\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\r\n    default: return \"\";\r\n  }\r\n}\r\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\n import {\r\n  Compiler,\r\n  Constraints,\r\n  RuntimeFeatures,\r\n  flatten\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression,\r\n  CallExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  AtomicRMWOp,\r\n  SIMDExtractOp,\r\n  SIMDReplaceOp,\r\n  SIMDShiftOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI64High,\r\n  getConstValueI64Low,\r\n  getConstValueI32,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  Relooper,\r\n  RelooperBlockRef\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  FunctionPrototype,\r\n  Field,\r\n  Global,\r\n  DecoratorFlags,\r\n  Element\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  LocalFlags\r\n} from \"./flow\";\r\n\r\nimport {\r\n  ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  Feature,\r\n  TypeinfoFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeF32,\r\n  writeF64,\r\n  isPowerOf2\r\n} from \"./util\";\r\n\r\n/** Symbols of various compiler built-ins. */\r\nexport namespace BuiltinSymbols {\r\n  // std/builtins.ts\r\n  export const isInteger = \"~lib/builtins/isInteger\";\r\n  export const isFloat = \"~lib/builtins/isFloat\";\r\n  export const isBoolean = \"~lib/builtins/isBoolean\";\r\n  export const isSigned = \"~lib/builtins/isSigned\";\r\n  export const isReference = \"~lib/builtins/isReference\";\r\n  export const isString = \"~lib/builtins/isString\";\r\n  export const isArray = \"~lib/builtins/isArray\";\r\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\r\n  export const isFunction = \"~lib/builtins/isFunction\";\r\n  export const isNullable = \"~lib/builtins/isNullable\";\r\n  export const isDefined = \"~lib/builtins/isDefined\";\r\n  export const isConstant = \"~lib/builtins/isConstant\";\r\n  export const isManaged = \"~lib/builtins/isManaged\";\r\n\r\n  export const clz = \"~lib/builtins/clz\";\r\n  export const ctz = \"~lib/builtins/ctz\";\r\n  export const popcnt = \"~lib/builtins/popcnt\";\r\n  export const rotl = \"~lib/builtins/rotl\";\r\n  export const rotr = \"~lib/builtins/rotr\";\r\n  export const abs = \"~lib/builtins/abs\";\r\n  export const max = \"~lib/builtins/max\";\r\n  export const min = \"~lib/builtins/min\";\r\n  export const ceil = \"~lib/builtins/ceil\";\r\n  export const floor = \"~lib/builtins/floor\";\r\n  export const copysign = \"~lib/builtins/copysign\";\r\n  export const nearest = \"~lib/builtins/nearest\";\r\n  export const reinterpret = \"~lib/builtins/reinterpret\";\r\n  export const sqrt = \"~lib/builtins/sqrt\";\r\n  export const trunc = \"~lib/builtins/trunc\";\r\n  export const load = \"~lib/builtins/load\";\r\n  export const store = \"~lib/builtins/store\";\r\n  export const atomic_load = \"~lib/builtins/atomic.load\";\r\n  export const atomic_store = \"~lib/builtins/atomic.store\";\r\n  export const atomic_add = \"~lib/builtins/atomic.add\";\r\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\r\n  export const atomic_and = \"~lib/builtins/atomic.and\";\r\n  export const atomic_or = \"~lib/builtins/atomic.or\";\r\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\r\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\r\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\r\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\r\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\r\n\r\n  export const sizeof = \"~lib/builtins/sizeof\";\r\n  export const alignof = \"~lib/builtins/alignof\";\r\n  export const offsetof = \"~lib/builtins/offsetof\";\r\n  export const select = \"~lib/builtins/select\";\r\n  export const unreachable = \"~lib/builtins/unreachable\";\r\n  export const changetype = \"~lib/builtins/changetype\";\r\n  export const assert = \"~lib/builtins/assert\";\r\n  export const unchecked = \"~lib/builtins/unchecked\";\r\n  export const call_direct = \"~lib/builtins/call_direct\";\r\n  export const call_indirect = \"~lib/builtins/call_indirect\";\r\n  export const instantiate = \"~lib/builtins/instantiate\";\r\n  export const idof = \"~lib/builtins/idof\";\r\n\r\n  export const i8 = \"~lib/builtins/i8\";\r\n  export const i16 = \"~lib/builtins/i16\";\r\n  export const i32 = \"~lib/builtins/i32\";\r\n  export const i64 = \"~lib/builtins/i64\";\r\n  export const isize = \"~lib/builtins/isize\";\r\n  export const u8 = \"~lib/builtins/u8\";\r\n  export const u16 = \"~lib/builtins/u16\";\r\n  export const u32 = \"~lib/builtins/u32\";\r\n  export const u64 = \"~lib/builtins/u64\";\r\n  export const usize = \"~lib/builtins/usize\";\r\n  export const bool = \"~lib/builtins/bool\";\r\n  export const f32 = \"~lib/builtins/f32\";\r\n  export const f64 = \"~lib/builtins/f64\";\r\n  export const v128 = \"~lib/builtins/v128\";\r\n  export const void_ = \"~lib/builtins/void\";\r\n\r\n  export const i32_clz = \"~lib/builtins/i32.clz\";\r\n  export const i64_clz = \"~lib/builtins/i64.clz\";\r\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\r\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\r\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\r\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\r\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\r\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\r\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\r\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\r\n\r\n  export const f32_abs = \"~lib/builtins/f32.abs\";\r\n  export const f64_abs = \"~lib/builtins/f64.abs\";\r\n  export const f32_max = \"~lib/builtins/f32.max\";\r\n  export const f64_max = \"~lib/builtins/f64.max\";\r\n  export const f32_min = \"~lib/builtins/f32.min\";\r\n  export const f64_min = \"~lib/builtins/f64.min\";\r\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\r\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\r\n  export const f32_floor = \"~lib/builtins/f32.floor\";\r\n  export const f64_floor = \"~lib/builtins/f64.floor\";\r\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\r\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\r\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\r\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\r\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\r\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\r\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\r\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\r\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\r\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\r\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\r\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\r\n\r\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\r\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\r\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\r\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\r\n  export const i32_load = \"~lib/builtins/i32.load\";\r\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\r\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\r\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\r\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\r\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\r\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\r\n  export const i64_load = \"~lib/builtins/i64.load\";\r\n  export const f32_load = \"~lib/builtins/f32.load\";\r\n  export const f64_load = \"~lib/builtins/f64.load\";\r\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\r\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\r\n  export const i32_store = \"~lib/builtins/i32.store\";\r\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\r\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\r\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\r\n  export const i64_store = \"~lib/builtins/i64.store\";\r\n  export const f32_store = \"~lib/builtins/f32.store\";\r\n  export const f64_store = \"~lib/builtins/f64.store\";\r\n\r\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\r\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\r\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\r\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\r\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\r\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\r\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\r\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\r\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\r\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\r\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\r\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\r\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\r\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\r\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\r\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\r\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\r\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\r\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\r\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\r\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\r\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\r\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\r\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\r\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\r\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\r\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\r\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\r\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\r\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\r\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\r\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\r\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\r\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\r\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\r\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\r\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\r\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\r\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\r\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\r\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\r\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\r\n  export const i32_atomic_rmw8_u_xor = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\r\n  export const i32_atomic_rmw16_u_xor = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\r\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\r\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\r\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\r\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\r\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\r\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\r\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\r\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\r\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\r\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\r\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\r\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\r\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\r\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\r\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\r\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\r\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\r\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\r\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\r\n  export const i32_wait = \"~lib/builtins/i32.wait\";\r\n  export const i64_wait = \"~lib/builtins/i64.wait\";\r\n\r\n  export const v128_splat = \"~lib/builtins/v128.splat\";\r\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\r\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\r\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\r\n  export const v128_load = \"~lib/builtins/v128.load\";\r\n  export const v128_store = \"~lib/builtins/v128.store\";\r\n  export const v128_add = \"~lib/builtins/v128.add\";\r\n  export const v128_sub = \"~lib/builtins/v128.sub\";\r\n  export const v128_mul = \"~lib/builtins/v128.mul\";\r\n  export const v128_div = \"~lib/builtins/v128.div\";\r\n  export const v128_neg = \"~lib/builtins/v128.neg\";\r\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\r\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\r\n  export const v128_shl = \"~lib/builtins/v128.shl\";\r\n  export const v128_shr = \"~lib/builtins/v128.shr\";\r\n  export const v128_and = \"~lib/builtins/v128.and\";\r\n  export const v128_or = \"~lib/builtins/v128.or\";\r\n  export const v128_xor = \"~lib/builtins/v128.xor\";\r\n  export const v128_not = \"~lib/builtins/v128.not\";\r\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\r\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\r\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\r\n  export const v128_min = \"~lib/builtins/v128.min\";\r\n  export const v128_max = \"~lib/builtins/v128.max\";\r\n  export const v128_abs = \"~lib/builtins/v128.abs\";\r\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\r\n  export const v128_eq = \"~lib/builtins/v128.eq\";\r\n  export const v128_ne = \"~lib/builtins/v128.ne\";\r\n  export const v128_lt = \"~lib/builtins/v128.lt\";\r\n  export const v128_le = \"~lib/builtins/v128.le\";\r\n  export const v128_gt = \"~lib/builtins/v128.gt\";\r\n  export const v128_ge = \"~lib/builtins/v128.ge\";\r\n  export const v128_convert = \"~lib/builtins/v128.convert\";\r\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\r\n\r\n  export const i8x16 = \"~lib/builtins/i8x16\";\r\n  export const i16x8 = \"~lib/builtins/i16x8\";\r\n  export const i32x4 = \"~lib/builtins/i32x4\";\r\n  export const i64x2 = \"~lib/builtins/i64x2\";\r\n  export const f32x4 = \"~lib/builtins/f32x4\";\r\n  export const f64x2 = \"~lib/builtins/f64x2\";\r\n\r\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\r\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\r\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\r\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\r\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\r\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\r\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\r\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\r\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\r\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\r\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\r\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\r\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\r\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\r\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\r\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\r\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\r\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\r\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\r\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\r\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\r\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\r\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\r\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\r\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\r\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\r\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\r\n\r\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\r\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\r\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\r\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\r\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\r\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\r\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\r\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\r\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\r\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\r\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\r\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\r\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\r\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\r\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\r\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\r\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\r\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\r\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\r\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\r\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\r\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\r\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\r\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\r\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\r\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\r\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\r\n\r\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\r\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\r\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\r\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\r\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\r\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\r\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\r\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\r\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\r\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\r\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\r\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\r\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\r\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\r\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\r\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\r\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\r\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\r\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\r\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\r\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\r\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\r\n  export const i32x4_trunc_s_f32x4_sat = \"~lib/builtins/i32x4.trunc_s_f32x4_sat\";\r\n  export const i32x4_trunc_u_f32x4_sat = \"~lib/builtins/i32x4.trunc_u_f32x4_sat\";\r\n\r\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\r\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\r\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\r\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\r\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\r\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\r\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\r\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\r\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\r\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\r\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\r\n  export const i64x2_trunc_s_f64x2_sat = \"~lib/builtins/i64x2.trunc_s_f64x2_sat\";\r\n  export const i64x2_trunc_u_f64x2_sat = \"~lib/builtins/i64x2.trunc_u_f64x2_sat\";\r\n\r\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\r\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\r\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\r\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\r\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\r\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\r\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\r\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\r\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\r\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\r\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\r\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\r\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\r\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\r\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\r\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\r\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\r\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\r\n  export const f32x4_convert_s_i32x4 = \"~lib/builtins/f32x4.convert_s_i32x4\";\r\n  export const f32x4_convert_u_i32x4 = \"~lib/builtins/f32x4.convert_u_i32x4\";\r\n\r\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\r\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\r\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\r\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\r\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\r\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\r\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\r\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\r\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\r\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\r\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\r\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\r\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\r\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\r\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\r\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\r\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\r\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\r\n  export const f64x2_convert_s_i64x2 = \"~lib/builtins/f64x2.convert_s_i64x2\";\r\n  export const f64x2_convert_u_i64x2 = \"~lib/builtins/f64x2.convert_u_i64x2\";\r\n\r\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\r\n\r\n  // internals\r\n  export const heap_base = \"~lib/heap/__heap_base\";\r\n  export const rtti_base = \"~lib/rt/__rtti_base\";\r\n  export const visit_globals = \"~lib/rt/__visit_globals\";\r\n  export const visit_members = \"~lib/rt/__visit_members\";\r\n\r\n  // std/diagnostics.ts\r\n  export const ERROR = \"~lib/diagnostics/ERROR\";\r\n  export const WARNING = \"~lib/diagnostics/WARNING\";\r\n  export const INFO = \"~lib/diagnostics/INFO\";\r\n\r\n  // std/memory.ts\r\n  export const memory_size = \"~lib/memory/memory.size\";\r\n  export const memory_grow = \"~lib/memory/memory.grow\";\r\n  export const memory_copy = \"~lib/memory/memory.copy\";\r\n  export const memory_fill = \"~lib/memory/memory.fill\";\r\n  export const memory_allocate = \"~lib/memory/memory.allocate\";\r\n  export const memory_free = \"~lib/memory/memory.free\";\r\n  export const memory_reset = \"~lib/memory/memory.reset\";\r\n\r\n  // std/runtime.ts\r\n  export const runtime_instanceof = \"~lib/runtime/runtime.instanceof\";\r\n  export const runtime_flags = \"~lib/runtime/runtime.flags\";\r\n  export const runtime_allocate = \"~lib/util/runtime/allocate\";\r\n  export const runtime_reallocate = \"~lib/util/runtime/reallocate\";\r\n  export const runtime_register = \"~lib/util/runtime/register\";\r\n  export const runtime_discard = \"~lib/util/runtime/discard\";\r\n  export const runtime_makeArray = \"~lib/util/runtime/makeArray\";\r\n\r\n  // std/typedarray.ts\r\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\r\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\r\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\r\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\r\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\r\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\r\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\r\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\r\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\r\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\r\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\r\n\r\n  // compiler generated\r\n  export const started = \"~lib/started\";\r\n  export const argc = \"~lib/argc\";\r\n  export const setargc = \"~lib/setargc\";\r\n  export const capabilities = \"~lib/capabilities\";\r\n}\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  /* Compiler reference. */\r\n  compiler: Compiler,\r\n  /** Respective function prototype. */\r\n  prototype: FunctionPrototype,\r\n  /** Pre-resolved type arguments. */\r\n  typeArguments: Type[] | null,\r\n  /** Operand expressions. */\r\n  operands: Expression[],\r\n  /** Contextual type. */\r\n  contextualType: Type,\r\n  /** Respective call expression. */\r\n  reportNode: CallExpression,\r\n  /** Indicates that contextual type is ASM type. */\r\n  isAsm: bool = false\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  // NOTE that consolidation of individual instructions into a single case isn't exactly scientific\r\n  // below, but rather done to make this file easier to work with. If there was a general rule it'd\r\n  // most likely be \"three or more instructions that only differ in their actual opcode\".\r\n\r\n  var directize = false;\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // === Static type evaluation =================================================================\r\n\r\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type == Type.bool\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.SIGNED)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      let classType = type.classReference;\r\n      if (classType) {\r\n        let stringInstance = compiler.program.stringInstance;\r\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.i32(1);\r\n      }\r\n      return module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      let classReference = type.classReference;\r\n      if (!classReference) return module.i32(0);\r\n      let classPrototype = classReference.prototype;\r\n      return module.i32(classPrototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      let classReference = type.classReference;\r\n      if (!classReference) return module.i32(0);\r\n      return module.i32(classReference.isArrayLike ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return module.i32(type.signatureReference ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let element = compiler.resolver.resolveExpression(\r\n        operands[0],\r\n        compiler.currentFlow,\r\n        Type.auto,\r\n        ReportMode.SWALLOW\r\n      );\r\n      return module.i32(element ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let expr = compiler.compileExpression(operands[0], Type.auto);\r\n      compiler.currentType = Type.bool;\r\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isManaged: { // isManaged<T>() -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return module.i32(type.isManaged ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      let expr: ExpressionRef;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          expr = module.i32(byteSize);\r\n        } else {\r\n          expr = module.i64(byteSize, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          expr = module.i64(byteSize, 0);\r\n        } else {\r\n          expr = module.i32(byteSize);\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      assert(isPowerOf2(byteSize));\r\n      let alignLog2 = ctz<i32>(byteSize);\r\n      let expr: ExpressionRef;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          expr = module.i32(alignLog2);\r\n        } else {\r\n          expr = module.i64(alignLog2, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          expr = module.i64(alignLog2, 0);\r\n        } else {\r\n          expr = module.i32(alignLog2);\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let classType = typeArguments![0].classReference;\r\n      if (!classType) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.i32(offset);\r\n        } else {\r\n          return module.i64(offset);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.i64(offset);\r\n        } else {\r\n          return module.i32(offset);\r\n        }\r\n      }\r\n    }\r\n\r\n    // === Math ===================================================================================\r\n\r\n    case BuiltinSymbols.clz: // any_bitcount<T?>(value: T) -> T\r\n    case BuiltinSymbols.ctz:\r\n    case BuiltinSymbols.popcnt: {\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.clz: {\r\n          switch (type.kind) {\r\n            case TypeKind.BOOL:\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.ClzI32; break; }\r\n            case TypeKind.USIZE:\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.ClzI64\r\n                : UnaryOp.ClzI32;\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.ClzI64; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.ctz: {\r\n          switch (type.kind) {\r\n            case TypeKind.BOOL:\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.CtzI32; break; }\r\n            case TypeKind.USIZE:\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.CtzI64\r\n                : UnaryOp.CtzI32;\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.CtzI64; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.popcnt: {\r\n          switch (compiler.currentType.kind) {\r\n            case TypeKind.BOOL:\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.PopcntI32; break; }\r\n            case TypeKind.USIZE:\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.PopcntI64\r\n                : UnaryOp.PopcntI32;\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.PopcntI64; break; }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      return module.unary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          expr = compiler.ensureSmallIntegerWrap(\r\n            module.binary(BinaryOp.RotlI32, arg0, arg1),\r\n            type\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          expr = module.binary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE:\r\n        case TypeKind.ISIZE: {\r\n          expr = module.binary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0, arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          expr = module.binary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr; // possibly overflows\r\n    }\r\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          expr = compiler.ensureSmallIntegerWrap(\r\n            module.binary(BinaryOp.RotrI32, arg0, arg1),\r\n            type\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          expr = module.binary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE:\r\n        case TypeKind.ISIZE: {\r\n          expr = module.binary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0, arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          expr = module.binary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr; // possibly overflowws\r\n    }\r\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFlow;\r\n\r\n          // possibly overflows, e.g. abs<i8>(-128) == 128\r\n          let tempLocal1 = flow.getTempLocal(Type.i32);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          // (x + (x >> 31)) ^ (x >> 31)\r\n          expr = module.binary(BinaryOp.XorI32,\r\n            module.binary(BinaryOp.AddI32,\r\n              module.local_tee(\r\n                tempLocalIndex2,\r\n                module.binary(BinaryOp.ShrI32,\r\n                  module.local_tee(tempLocalIndex1, arg0),\r\n                  module.i32(31)\r\n                )\r\n              ),\r\n              module.local_get(tempLocalIndex1, NativeType.I32)\r\n            ),\r\n            module.local_get(tempLocalIndex2, NativeType.I32)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let options = compiler.options;\r\n          let flow = compiler.currentFlow;\r\n          let wasm64 = options.isWasm64;\r\n\r\n          let tempLocal1 = flow.getTempLocal(options.usizeType);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          expr = module.binary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\r\n            module.binary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\r\n              module.local_tee(\r\n                tempLocalIndex2,\r\n                module.binary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\r\n                  module.local_tee(tempLocalIndex1, arg0),\r\n                  wasm64 ? module.i64(63) : module.i32(31)\r\n                )\r\n              ),\r\n              module.local_get(tempLocalIndex1, options.nativeSizeType)\r\n            ),\r\n            module.local_get(tempLocalIndex2, options.nativeSizeType)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let flow = compiler.currentFlow;\r\n\r\n          let tempLocal1 = flow.getTempLocal(Type.i64);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          // (x + (x >> 63)) ^ (x >> 63)\r\n          expr = module.binary(BinaryOp.XorI64,\r\n            module.binary(BinaryOp.AddI64,\r\n              module.local_tee(\r\n                tempLocalIndex2,\r\n                module.binary(BinaryOp.ShrI64,\r\n                  module.local_tee(tempLocalIndex1, arg0),\r\n                  module.i64(63)\r\n                )\r\n              ),\r\n              module.local_get(tempLocalIndex1, NativeType.I64)\r\n            ),\r\n            module.local_get(tempLocalIndex2, NativeType.I64)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          expr = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          expr = module.unary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.unary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: { op = BinaryOp.GtI32; break; }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\r\n        case TypeKind.I64: { op = BinaryOp.GtI64; break; }\r\n        case TypeKind.U64: { op = BinaryOp.GtU64; break; }\r\n        case TypeKind.ISIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.GtI64\r\n            : BinaryOp.GtI32;\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.GtU64\r\n            : BinaryOp.GtU32;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          return module.binary(BinaryOp.MaxF32, arg0, arg1);\r\n        }\r\n        case TypeKind.F64: {\r\n          return module.binary(BinaryOp.MaxF64, arg0, arg1);\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let flow = compiler.currentFlow;\r\n      let nativeType = type.toNativeType();\r\n      let tempLocal0 = flow.getTempLocal(type);\r\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\r\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\r\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\r\n      flow.freeTempLocal(tempLocal0);\r\n      return module.select(\r\n        module.local_tee(tempLocal0.index, arg0),\r\n        module.local_tee(tempLocal1.index, arg1),\r\n        module.binary(op,\r\n          module.local_get(tempLocal0.index, nativeType),\r\n          module.local_get(tempLocal1.index, nativeType)\r\n        )\r\n      );\r\n    }\r\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: { op = BinaryOp.LtI32; break; }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\r\n        case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\r\n        case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\r\n        case TypeKind.ISIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.LtI64\r\n            : BinaryOp.LtI32;\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.LtU64\r\n            : BinaryOp.LtU32;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          return module.binary(BinaryOp.MinF32, arg0, arg1);\r\n        }\r\n        case TypeKind.F64: {\r\n          return module.binary(BinaryOp.MinF64, arg0, arg1);\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let flow = compiler.currentFlow;\r\n      let nativeType = type.toNativeType();\r\n      let tempLocal0 = flow.getTempLocal(type);\r\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\r\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\r\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\r\n      flow.freeTempLocal(tempLocal0);\r\n      return module.select(\r\n        module.local_tee(tempLocal0.index, arg0),\r\n        module.local_tee(tempLocal1.index, arg1),\r\n        module.binary(op,\r\n          module.local_get(tempLocal0.index, nativeType),\r\n          module.local_get(tempLocal1.index, nativeType)\r\n        )\r\n      );\r\n    }\r\n    case BuiltinSymbols.ceil: // any_rounding<T?>(value: T) -> T\r\n    case BuiltinSymbols.floor: {\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.BOOL: return arg0; // considered rounded\r\n        case TypeKind.F32: {\r\n          op = prototype.internalName == BuiltinSymbols.ceil\r\n            ? UnaryOp.CeilF32\r\n            : UnaryOp.FloorF32;\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          op = prototype.internalName == BuiltinSymbols.ceil\r\n            ? UnaryOp.CeilF64\r\n            : UnaryOp.FloorF64;\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      return module.unary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        // TODO: does an integer version make sense?\r\n        case TypeKind.F32: { op = BinaryOp.CopysignF32; break; }\r\n        case TypeKind.F64: { op = BinaryOp.CopysignF64; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      return module.binary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.BOOL: {\r\n          expr = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          expr = module.unary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.unary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.currentType = type;\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\r\n          expr = module.unary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\r\n          expr = module.unary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          let arg0 = compiler.compileExpression(operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32,\r\n            Constraints.CONV_IMPLICIT\r\n          );\r\n          expr = module.unary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\r\n          expr = module.unary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\r\n          expr = module.unary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = type;\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.currentType = type;\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          expr = module.unary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.unary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.BOOL: {\r\n          expr = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          expr = module.unary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.unary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n\r\n    // === Memory access ==========================================================================\r\n\r\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      let outType = (\r\n        contextualType != Type.auto &&\r\n        type.is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > type.size\r\n      ) ? contextualType : type;\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let numOperands = operands.length;\r\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = outType;\r\n        return module.unreachable();\r\n      }\r\n      let immAlign: i32;\r\n      let naturalAlign = type.byteSize;\r\n      if (numOperands == 3) {\r\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\r\n        if (immAlign < 0) {\r\n          compiler.currentType = outType;\r\n          return module.unreachable();\r\n        }\r\n        if (immAlign > naturalAlign) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\r\n          );\r\n          compiler.currentType = outType;\r\n          return module.unreachable();\r\n        }\r\n        if (!isPowerOf2(immAlign)) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_power_of_two,\r\n            operands[2].range, \"Alignment\"\r\n          );\r\n          compiler.currentType = outType;\r\n          return module.unreachable();\r\n        }\r\n      } else {\r\n        immAlign = naturalAlign;\r\n      }\r\n      compiler.currentType = outType;\r\n      return module.load(\r\n        type.byteSize,\r\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        outType.toNativeType(),\r\n        immOffset,\r\n        immAlign\r\n      );\r\n    }\r\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(operands[1],\r\n            contextualType,\r\n            Constraints.CONV_IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\r\n              : Constraints.CONV_IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size          // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let immAlign: i32;\r\n      let naturalAlign = type.byteSize;\r\n      if (operands.length == 4) {\r\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\r\n        if (immAlign < 0) {\r\n          compiler.currentType = Type.void;\r\n          return module.unreachable();\r\n        }\r\n        if (immAlign > naturalAlign) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\r\n          );\r\n          compiler.currentType = Type.void;\r\n          return module.unreachable();\r\n        }\r\n        if (!isPowerOf2(immAlign)) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_power_of_two,\r\n            operands[3].range, \"Alignment\"\r\n          );\r\n          compiler.currentType = Type.void;\r\n          return module.unreachable();\r\n        }\r\n      } else {\r\n        immAlign = naturalAlign;\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\r\n    }\r\n\r\n    // === Atomics ================================================================================\r\n\r\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      let outType = (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > type.size\r\n      ) ? contextualType : type;\r\n      if (!type.is(TypeFlags.INTEGER)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = outType;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = outType;\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = outType;\r\n      return module.atomic_load(\r\n        type.byteSize,\r\n        arg0,\r\n        outType.toNativeType(),\r\n        immOffset\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(\r\n            operands[1],\r\n            contextualType,\r\n            Constraints.CONV_IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\r\n              : Constraints.CONV_IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size          // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\r\n    }\r\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\r\n    case BuiltinSymbols.atomic_sub:\r\n    case BuiltinSymbols.atomic_and:\r\n    case BuiltinSymbols.atomic_or:\r\n    case BuiltinSymbols.atomic_xor:\r\n    case BuiltinSymbols.atomic_xchg: {\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(operands[1],\r\n            contextualType,\r\n            Constraints.CONV_IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\r\n              : Constraints.CONV_IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size       // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = inType;\r\n        return module.unreachable();\r\n      }\r\n      let op: AtomicRMWOp;\r\n      switch (prototype.internalName) {\r\n        default: assert(false);\r\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\r\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\r\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\r\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\r\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\r\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\r\n      }\r\n      compiler.currentType = inType;\r\n      return module.atomic_rmw(\r\n        op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType()\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize): T\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(operands[1],\r\n            contextualType,\r\n            Constraints.CONV_IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\r\n              : Constraints.CONV_IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      let arg2 = compiler.compileExpression(operands[2],\r\n        inType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size       // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        arg2 = compiler.convertExpression(arg2,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[2]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = inType;\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = inType;\r\n      return module.atomic_cmpxchg(\r\n        type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType()\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64): i32;\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = compiler.compileExpression(operands[1], type,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg2 = compiler.compileExpression(operands[2],\r\n        Type.i64,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      compiler.currentType = Type.i32;\r\n      return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\r\n    }\r\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32): i32;\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      let arg1 = compiler.compileExpression(operands[1],\r\n        Type.i32,\r\n        Constraints.CONV_IMPLICIT\r\n      );\r\n      compiler.currentType = Type.i32;\r\n      return module.atomic_notify(arg0, arg1);\r\n    }\r\n\r\n    // === Control flow ===========================================================================\r\n\r\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.auto);\r\n      let type = compiler.currentType;\r\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\r\n      let arg2 = compiler.makeIsTrueish(\r\n        compiler.compileExpression(operands[2], Type.bool),\r\n        compiler.currentType // ^\r\n      );\r\n      compiler.currentType = type;\r\n      return module.select(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.typeArgumentsRange, prototype.internalName\r\n        );\r\n      }\r\n      checkArgsRequired(operands, 0, reportNode, compiler);\r\n      return module.unreachable();\r\n    }\r\n\r\n    // === Memory =================================================================================\r\n\r\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      return module.host(HostOp.MemorySize);\r\n    }\r\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      return module.host(HostOp.MemoryGrow, null, [\r\n        compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\r\n      ]);\r\n    }\r\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\r\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\r\n        compiler.currentType = Type.void;\r\n        if (!instance) return module.unreachable();\r\n        return compiler.compileCallDirect(instance, operands, reportNode);\r\n      }\r\n      let usizeType = compiler.options.usizeType;\r\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.void;\r\n      return module.memory_copy(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\r\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\r\n        compiler.currentType = Type.void;\r\n        if (!instance) return module.unreachable();\r\n        return compiler.compileCallDirect(instance, operands, reportNode);\r\n      }\r\n      let usizeType = compiler.options.usizeType;\r\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.void;\r\n      return module.memory_fill(arg0, arg1, arg2);\r\n    }\r\n\r\n    // === Helpers ================================================================================\r\n\r\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let toType = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0], toType);\r\n      let fromType = compiler.currentType;\r\n      compiler.currentType = toType;\r\n      if (fromType.size != toType.size) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      return arg0;\r\n    }\r\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\r\n      ) {\r\n        if (typeArguments) {\r\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\r\n          compiler.currentType = typeArguments[0].nonNullableType;\r\n        }\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\r\n        : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // if the assertion can be proven statically, omit it\r\n      if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\r\n        switch (getExpressionType(arg0)) {\r\n          case NativeType.I32: {\r\n            if (getConstValueI32(arg0) != 0) {\r\n              if (contextualType == Type.void) {\r\n                compiler.currentType = Type.void;\r\n                return module.nop();\r\n              }\r\n              return arg0;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.I64: {\r\n            if (getConstValueI64Low(arg0) != 0 || getConstValueI64High(arg0) != 0) {\r\n              if (contextualType == Type.void) {\r\n                compiler.currentType = Type.void;\r\n                return module.nop();\r\n              }\r\n              return arg0;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.F32: {\r\n            if (getConstValueF32(arg0) != 0) {\r\n              if (contextualType == Type.void) {\r\n                compiler.currentType = Type.void;\r\n                return module.nop();\r\n              }\r\n              return arg0;\r\n            }\r\n            break;\r\n          }\r\n          case NativeType.F64: {\r\n            if (getConstValueF64(arg0) != 0) {\r\n              if (contextualType == Type.void) {\r\n                compiler.currentType = Type.void;\r\n                return module.nop();\r\n              }\r\n              return arg0;\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // return ifTrueish if assertions are disabled\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) { // simplify if dropped anyway\r\n          compiler.currentType = Type.void;\r\n          return module.nop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      // otherwise call abort if the assertion is false-ish\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n      compiler.currentType = type.nonNullableType;\r\n      let expr: ExpressionRef;\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        compiler.currentType = Type.void;\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.if(\r\n              module.unary(UnaryOp.EqzI32, arg0),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.if(\r\n              module.unary(UnaryOp.EqzI64, arg0),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            expr = module.if(\r\n              module.unary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            expr = module.if(\r\n              module.binary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.f32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.if(\r\n              module.binary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.f64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.typeArgumentsRange\r\n            );\r\n            expr = abort;\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        compiler.currentType = type.nonNullableType;\r\n        switch (compiler.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            let flow = compiler.currentFlow;\r\n            let tempLocal = flow.getAndFreeTempLocal(type);\r\n            flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED); // arg0 is wrapped\r\n            expr = module.if(\r\n              module.local_tee(tempLocal.index, arg0),\r\n              module.local_get(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64);\r\n            expr = module.if(\r\n              module.unary(UnaryOp.EqzI64,\r\n                module.local_tee(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.local_get(tempLocal.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType);\r\n            expr = module.if(\r\n              module.unary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.local_tee(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.local_get(tempLocal.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32);\r\n            expr = module.if(\r\n              module.binary(BinaryOp.EqF32,\r\n                module.local_tee(tempLocal.index, arg0),\r\n                module.f32(0)\r\n              ),\r\n              abort,\r\n              module.local_get(tempLocal.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64);\r\n            expr = module.if(\r\n              module.binary(BinaryOp.EqF64,\r\n                module.local_tee(tempLocal.index, arg0),\r\n                module.f64(0)\r\n              ),\r\n              abort,\r\n              module.local_get(tempLocal.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.typeArgumentsRange\r\n            );\r\n            expr = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let flow = compiler.currentFlow;\r\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\r\n      // eliminate unnecessary tees by preferring contextualType(=void):\r\n      let expr = compiler.compileExpression(operands[0], contextualType);\r\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.call_direct: directize = true;\r\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\r\n      let arg0 = compiler.compileExpression(operands[0], Type.u32);\r\n      let arg0Type = compiler.currentType;\r\n      if (!(\r\n        arg0Type == Type.u32 ||                                      // either plain index\r\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\r\n      )) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          operands[0].range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let numOperands = operands.length - 1;\r\n      let operandExprs = new Array<ExpressionRef>(numOperands);\r\n      let nativeReturnType = returnType.toNativeType();\r\n      let parameterTypes = new Array<Type>(numOperands);\r\n      let nativeParamTypes = new Array<NativeType>(numOperands);\r\n      for (let i = 0; i < numOperands; ++i) {\r\n        operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.i32);\r\n        let operandType = compiler.currentType;\r\n        parameterTypes[i] = operandType;\r\n        nativeParamTypes[i] = operandType.toNativeType();\r\n      }\r\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\r\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\r\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\r\n      compiler.currentType = returnType;\r\n      if (directize) {\r\n        // if the index expression is precomputable to a constant value, emit a direct call\r\n        if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\r\n          assert(getExpressionType(arg0) == NativeType.I32);\r\n          let index = getConstValueI32(arg0);\r\n          let functionTable = compiler.functionTable;\r\n          if (index >= 0 && index < functionTable.length) {\r\n            return module.call(functionTable[index], operandExprs, nativeReturnType);\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          operands[0].range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\r\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\r\n      return module.call_indirect(arg0, operandExprs, typeName);\r\n    }\r\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\r\n      ) return module.unreachable();\r\n      let classInstance = typeArguments![0].classReference;\r\n      if (!classInstance) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = classInstance.type;\r\n      return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, reportNode);\r\n    }\r\n\r\n    // === User-defined diagnostics ===============================================================\r\n\r\n    case BuiltinSymbols.ERROR: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.error(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.WARNING: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.warning(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.nop();\r\n    }\r\n    case BuiltinSymbols.INFO: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.info(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.nop();\r\n    }\r\n\r\n    // === Portable type conversions ==============================================================\r\n\r\n    case BuiltinSymbols.i8: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i8;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i8, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.i16: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i16;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i16, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.i32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i32;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.i64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i64;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.isize: {\r\n      let isizeType = compiler.options.isizeType;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = isizeType;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], isizeType, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u8: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u8;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u8, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u16: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u16;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u16, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u32;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u64;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u64, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.usize: {\r\n      let usizeType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = usizeType;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], usizeType, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.bool: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.bool;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.bool, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.f32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.f32;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.f64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.f64;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_EXPLICIT);\r\n    }\r\n\r\n    // === SIMD ===================================================================================\r\n\r\n    case BuiltinSymbols.v128: // alias for now\r\n    case BuiltinSymbols.i8x16: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 16, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 16; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI8(getConstValueI32(expr), bytes, i);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.i16x8: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 8, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 8; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI16(getConstValueI32(expr), bytes, i << 1);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.i32x4: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 4, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 4; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI32(getConstValueI32(expr), bytes, i << 2);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.i64x2: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 2; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I64);\r\n          let off = i << 3;\r\n          writeI32(getConstValueI64Low(expr), bytes, off);\r\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.f32x4: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 4, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 4; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.F32);\r\n          writeF32(getConstValueF32(expr), bytes, i << 2);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.f64x2: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 2; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.F64);\r\n          writeF64(getConstValueF64(expr), bytes, i << 3);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:  { op = UnaryOp.SplatVecI8x16; break; }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: { op = UnaryOp.SplatVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = UnaryOp.SplatVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = UnaryOp.SplatVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? UnaryOp.SplatVecI64x2\r\n            : UnaryOp.SplatVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = UnaryOp.SplatVecF32x4; break; }\r\n        case TypeKind.F64: { op = UnaryOp.SplatVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.unary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = type;\r\n        return module.unreachable();\r\n      }\r\n      let op: SIMDExtractOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:  { op = SIMDExtractOp.ExtractLaneSVecI8x16; break; }\r\n        case TypeKind.U8:  { op = SIMDExtractOp.ExtractLaneUVecI8x16; break; }\r\n        case TypeKind.I16: { op = SIMDExtractOp.ExtractLaneSVecI16x8; break; }\r\n        case TypeKind.U16: { op = SIMDExtractOp.ExtractLaneUVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = SIMDExtractOp.ExtractLaneVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = SIMDExtractOp.ExtractLaneVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? SIMDExtractOp.ExtractLaneVecI64x2\r\n            : SIMDExtractOp.ExtractLaneVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = SIMDExtractOp.ExtractLaneVecF32x4; break; }\r\n        case TypeKind.F64: { op = SIMDExtractOp.ExtractLaneVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = type;\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = type;\r\n      if (getExpressionId(arg1) != ExpressionId.Const) {\r\n        compiler.error(\r\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n          operands[1].range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      assert(getExpressionType(arg1) == NativeType.I32);\r\n      let maxIdx = (16 / type.byteSize) - 1;\r\n      let idx = getConstValueI32(arg1);\r\n      if (idx < 0 || idx > maxIdx) {\r\n        compiler.error(\r\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      return module.simd_extract(op, arg0, idx);\r\n    }\r\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: SIMDReplaceOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:  { op = SIMDReplaceOp.ReplaceLaneVecI8x16; break; }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: { op = SIMDReplaceOp.ReplaceLaneVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = SIMDReplaceOp.ReplaceLaneVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = SIMDReplaceOp.ReplaceLaneVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? SIMDReplaceOp.ReplaceLaneVecI64x2\r\n            : SIMDReplaceOp.ReplaceLaneVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = SIMDReplaceOp.ReplaceLaneVecF32x4; break; }\r\n        case TypeKind.F64: { op = SIMDReplaceOp.ReplaceLaneVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\r\n      if (getExpressionId(arg1) != ExpressionId.Const) {\r\n        compiler.error(\r\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n          operands[1].range\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      assert(getExpressionType(arg1) == NativeType.I32);\r\n      let maxIdx = (16 / type.byteSize) - 1;\r\n      let idx = getConstValueI32(arg1);\r\n      if (idx < 0 || idx > maxIdx) {\r\n        compiler.error(\r\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.simd_replace(op, arg0, idx, arg2);\r\n    }\r\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let laneWidth = type.byteSize;\r\n      let laneCount = 16 / laneWidth;\r\n      assert(isInteger(laneCount) && isPowerOf2(laneCount));\r\n      if (\r\n        checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.F32:\r\n        case TypeKind.F64: break;\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let mask = new Uint8Array(16);\r\n      let maxIdx = (laneCount << 1) - 1;\r\n      for (let i = 0; i < laneCount; ++i) {\r\n        let operand = operands[2 + i];\r\n        let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\r\n        if (getExpressionId(argN) != ExpressionId.Const) {\r\n          compiler.error(\r\n            DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n            operand.range\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n        assert(getExpressionType(argN) == NativeType.I32);\r\n        let idx = getConstValueI32(argN);\r\n        if (idx < 0 || idx > maxIdx) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operand.range, \"Lane index\", \"0\", maxIdx.toString()\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n        switch (laneWidth) {\r\n          case 1: {\r\n            writeI8(idx, mask, i);\r\n            break;\r\n          }\r\n          case 2: {\r\n            let off8 = i << 1;\r\n            let idx8 = idx << 1;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            break;\r\n          }\r\n          case 4: {\r\n            let off8 = i << 2;\r\n            let idx8 = idx << 2;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            writeI8(idx8 + 2, mask, off8 + 2);\r\n            writeI8(idx8 + 3, mask, off8 + 3);\r\n            break;\r\n          }\r\n          case 8: {\r\n            let off8 = i << 3;\r\n            let idx8 = idx << 3;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            writeI8(idx8 + 2, mask, off8 + 2);\r\n            writeI8(idx8 + 3, mask, off8 + 3);\r\n            writeI8(idx8 + 4, mask, off8 + 4);\r\n            writeI8(idx8 + 5, mask, off8 + 5);\r\n            writeI8(idx8 + 6, mask, off8 + 6);\r\n            writeI8(idx8 + 7, mask, off8 + 7);\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.simd_shuffle(arg0, arg1, mask);\r\n    }\r\n    case BuiltinSymbols.v128_add: // any_binary<T!>(a: v128, b: v128) -> v128\r\n    case BuiltinSymbols.v128_sub:\r\n    case BuiltinSymbols.v128_mul:\r\n    case BuiltinSymbols.v128_div:\r\n    case BuiltinSymbols.v128_add_saturate:\r\n    case BuiltinSymbols.v128_sub_saturate:\r\n    case BuiltinSymbols.v128_min:\r\n    case BuiltinSymbols.v128_max:\r\n    case BuiltinSymbols.v128_eq:\r\n    case BuiltinSymbols.v128_ne:\r\n    case BuiltinSymbols.v128_lt:\r\n    case BuiltinSymbols.v128_le:\r\n    case BuiltinSymbols.v128_gt:\r\n    case BuiltinSymbols.v128_ge: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: BinaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.v128_add: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.AddVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.AddVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.AddVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = BinaryOp.AddVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? BinaryOp.AddVecI64x2\r\n                : BinaryOp.AddVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.F32: { op = BinaryOp.AddVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.AddVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_sub: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.SubVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.SubVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.SubVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = BinaryOp.SubVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? BinaryOp.SubVecI64x2\r\n                : BinaryOp.SubVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.F32: { op = BinaryOp.SubVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.SubVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_mul: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.MulVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.MulVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.MulVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.MulVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.MulVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) op = BinaryOp.MulVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_div: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = BinaryOp.DivVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.DivVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_add_saturate: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.AddSatSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.AddSatUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.AddSatSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.AddSatUVecI16x8; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_sub_saturate: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.SubSatSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.SubSatUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.SubSatSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.SubSatUVecI16x8; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_min: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = BinaryOp.MinVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.MinVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_max: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = BinaryOp.MaxVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.MaxVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_eq: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.EqVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.EqVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.EqVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.EqVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.EqVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) op = BinaryOp.EqVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_ne: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.NeVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.NeVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.NeVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.NeVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.NeVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) op = BinaryOp.NeVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_lt: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.LtSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.LtUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.LtSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.LtUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.LtSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.LtUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.LtVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.LtVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.LtSVecI32x4\r\n                  : BinaryOp.LtUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_le: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.LeSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.LeUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.LeSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.LeUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.LeSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.LeUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.LeVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.LeVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.LeSVecI32x4\r\n                  : BinaryOp.LeUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_gt: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.GtSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.GtUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.GtSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.GtUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.GtSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.GtUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.GtVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.GtVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.GtSVecI32x4\r\n                  : BinaryOp.GtUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_ge: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.GeSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.GeUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.GeSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.GeUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.GeSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.GeUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.GeVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.GeVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.GeSVecI32x4\r\n                  : BinaryOp.GeUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.binary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_neg: // any_unary<T!>(a: v128) -> v128\r\n    case BuiltinSymbols.v128_abs:\r\n    case BuiltinSymbols.v128_sqrt:\r\n    case BuiltinSymbols.v128_convert:\r\n    case BuiltinSymbols.v128_trunc: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.v128_neg: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = UnaryOp.NegVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = UnaryOp.NegVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.NegVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.NegVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.NegVecI64x2\r\n                : UnaryOp.NegVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.F32: { op = UnaryOp.NegVecF32x4; break; }\r\n            case TypeKind.F64: { op = UnaryOp.NegVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_abs: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = UnaryOp.AbsVecF32x4; break; }\r\n            case TypeKind.F64: { op = UnaryOp.AbsVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_sqrt: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = UnaryOp.SqrtVecF32x4; break; }\r\n            case TypeKind.F64: { op = UnaryOp.SqrtVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_convert: {\r\n          switch (type.kind) {\r\n            case TypeKind.I32: { op = UnaryOp.ConvertSVecI32x4ToVecF32x4; break; }\r\n            case TypeKind.U32: { op = UnaryOp.ConvertUVecI32x4ToVecF32x4; break; }\r\n            case TypeKind.I64: { op = UnaryOp.ConvertSVecI64x2ToVecF64x2; break; }\r\n            case TypeKind.U64: { op = UnaryOp.ConvertUVecI64x2ToVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_trunc: {\r\n          switch (type.kind) {\r\n            case TypeKind.I32: { op = UnaryOp.TruncSatSVecF32x4ToVecI32x4; break; }\r\n            case TypeKind.U32: { op = UnaryOp.TruncSatUVecF32x4ToVecI32x4; break; }\r\n            case TypeKind.I64: { op = UnaryOp.TruncSatSVecF64x2ToVecI64x2; break; }\r\n            case TypeKind.U64: { op = UnaryOp.TruncSatUVecF64x2ToVecI64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.unary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_shl: // any_shift<T!>(a: v128, b: i32) -> v128\r\n    case BuiltinSymbols.v128_shr: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: SIMDShiftOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.v128_shl: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = SIMDShiftOp.ShlVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = SIMDShiftOp.ShlVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = SIMDShiftOp.ShlVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = SIMDShiftOp.ShlVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShlVecI64x2\r\n                : SIMDShiftOp.ShlVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_shr: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = SIMDShiftOp.ShrSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = SIMDShiftOp.ShrUVecI8x16; break; }\r\n            case TypeKind.I16: { op = SIMDShiftOp.ShrSVecI16x8; break; }\r\n            case TypeKind.U16: { op = SIMDShiftOp.ShrUVecI16x8; break; }\r\n            case TypeKind.I32: { op = SIMDShiftOp.ShrSVecI32x4; break; }\r\n            case TypeKind.U32: { op = SIMDShiftOp.ShrUVecI32x4; break; }\r\n            case TypeKind.I64: { op = SIMDShiftOp.ShrSVecI64x2; break; }\r\n            case TypeKind.U64: { op = SIMDShiftOp.ShrUVecI64x2; break; }\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShrSVecI64x2\r\n                : SIMDShiftOp.ShrSVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShrUVecI64x2\r\n                : SIMDShiftOp.ShrUVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.simd_shift(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_and: // any_bitwise_binary(a: v128, b: v128) -> v128\r\n    case BuiltinSymbols.v128_or:\r\n    case BuiltinSymbols.v128_xor: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: BinaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        default: assert(false);\r\n        case BuiltinSymbols.v128_and: { op = BinaryOp.AndVec128; break; }\r\n        case BuiltinSymbols.v128_or:  { op = BinaryOp.OrVec128; break; }\r\n        case BuiltinSymbols.v128_xor: { op = BinaryOp.XorVec128; break; }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      return module.binary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_not: { // any_bitwise_unary(a: v128) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      return module.unary(UnaryOp.NotVec128, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\r\n      return module.simd_bitselect(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.v128_any_true: // any_test<T!>(a: v128) -> bool\r\n    case BuiltinSymbols.v128_all_true: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.bool;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        default: assert(false);\r\n        case BuiltinSymbols.v128_any_true: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = UnaryOp.AnyTrueVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = UnaryOp.AnyTrueVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.AnyTrueVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.AnyTrueVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.AnyTrueVecI64x2\r\n                : UnaryOp.AnyTrueVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_all_true: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = UnaryOp.AllTrueVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = UnaryOp.AllTrueVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.AllTrueVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.AllTrueVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.AllTrueVecI64x2\r\n                : UnaryOp.AllTrueVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\r\n      compiler.currentType = Type.bool;\r\n      return module.unary(op, arg0);\r\n    }\r\n\r\n    // === Internal runtime =======================================================================\r\n\r\n    case BuiltinSymbols.idof: {\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.u32;\r\n      if (!type) return module.unreachable();\r\n      let classReference = type.classReference;\r\n      if (!classReference || classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      return module.i32(classReference.id);\r\n    }\r\n    case BuiltinSymbols.visit_globals: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\r\n      ) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\r\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\r\n      compiler.currentType = Type.void;\r\n      return module.call(BuiltinSymbols.visit_globals, [ arg0 ], NativeType.None);\r\n    }\r\n    case BuiltinSymbols.visit_members: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\r\n      ) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\r\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\r\n      compiler.currentType = Type.void;\r\n      return module.call(BuiltinSymbols.visit_members, [ arg0, arg1 ], NativeType.None);\r\n    }\r\n  }\r\n\r\n  // try to defer inline asm to a concrete built-in\r\n  {\r\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\r\n    if (expr) {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.typeArgumentsRange, prototype.internalName\r\n        );\r\n      }\r\n      return expr;\r\n    }\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Cannot_find_name_0,\r\n    reportNode.expression.range, prototype.internalName\r\n  );\r\n  return module.unreachable();\r\n}\r\n\r\n/** Tries to defer an inline-assembler-like call to a built-in function. */\r\nfunction tryDeferASM(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  operands: Expression[],\r\n  reportNode: CallExpression\r\n): ExpressionRef {\r\n  /* tslint:disable:max-line-length */\r\n  switch (prototype.internalName) {\r\n\r\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\r\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\r\n    //   and, or, xor, shl, shr_u, shr_s\r\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\r\n\r\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\r\n  }\r\n  if (compiler.options.hasFeature(Feature.THREADS)) {\r\n    switch (prototype.internalName) {\r\n\r\n      case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\r\n    }\r\n  }\r\n  if (compiler.options.hasFeature(Feature.SIMD)) {\r\n    switch (prototype.internalName) {\r\n\r\n      case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.void, reportNode);\r\n\r\n      case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\r\n      case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\r\n      case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\r\n      case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\r\n      case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_trunc_s_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_trunc_u_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u32, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64x2_trunc_s_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_trunc_u_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u64, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\r\n      case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_convert_s_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_convert_u_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\r\n      case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_convert_s_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_convert_u_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\r\n    }\r\n  }\r\n  /* tslint:enable:max-line-length */\r\n  return 0;\r\n}\r\n\r\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\r\nfunction deferASM(\r\n  name: string,\r\n  compiler: Compiler,\r\n  typeArgument: Type,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: CallExpression\r\n): ExpressionRef {\r\n  assert(compiler.program.elementsByName.has(name));\r\n  var prototype = compiler.program.elementsByName.get(name)!;\r\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n  return compileCall(\r\n    compiler,\r\n    <FunctionPrototype>prototype,\r\n    [ typeArgument ],\r\n    operands,\r\n    contextualType,\r\n    reportNode,\r\n    /* isAsm */ true\r\n  );\r\n}\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringInstance = compiler.program.stringInstance;\r\n  if (!stringInstance) return module.unreachable();\r\n\r\n  var abortInstance = program.abortInstance;\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.unreachable();\r\n\r\n  var messageArg: ExpressionRef;\r\n  if (message !== null) {\r\n    // The message argument works much like an arm of an IF that does not become executed if the\r\n    // assertion succeeds respectively is only being computed if the program actually crashes.\r\n    // Hence, let's make it so that the autorelease is skipped at the end of the current block,\r\n    // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\r\n    messageArg = compiler.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\r\n  } else {\r\n    messageArg = stringInstance.type.toNativeZero(module);\r\n  }\r\n\r\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.block(null, [\r\n    module.call(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.i32(reportNode.range.line),\r\n        module.i32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.unreachable()\r\n  ]);\r\n}\r\n\r\n/** Compiles the `visit_globals` function. */\r\nexport function compileVisitGlobals(compiler: Compiler): void {\r\n  var module = compiler.module;\r\n  var exprs = new Array<ExpressionRef>();\r\n  var typeRef = compiler.ensureFunctionType([ Type.u32 ], Type.void); // cookie\r\n  var nativeSizeType = compiler.options.nativeSizeType;\r\n  var visitInstance = assert(compiler.program.visitInstance);\r\n\r\n  compiler.compileFunction(visitInstance);\r\n\r\n  for (let element of compiler.program.elementsByName.values()) {\r\n    if (element.kind != ElementKind.GLOBAL) continue;\r\n    let global = <Global>element;\r\n    let classReference = global.type.classReference;\r\n    if (\r\n      global.is(CommonFlags.COMPILED) &&\r\n      classReference !== null &&\r\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\r\n    ) {\r\n      if (global.is(CommonFlags.INLINED)) {\r\n        let value = global.constantIntegerValue;\r\n        if (i64_low(value) || i64_high(value)) {\r\n          exprs.push(\r\n            module.call(visitInstance.internalName, [\r\n              compiler.options.isWasm64\r\n                ? module.i64(i64_low(value), i64_high(value))\r\n                : module.i32(i64_low(value))\r\n            ], NativeType.None)\r\n          );\r\n        }\r\n      } else {\r\n        exprs.push(\r\n          module.if(\r\n            module.local_tee(1,\r\n              module.global_get(global.internalName, nativeSizeType)\r\n            ),\r\n            module.call(visitInstance.internalName, [\r\n              module.local_get(1, nativeSizeType), // tempRef != null\r\n              module.local_get(0, NativeType.I32) // cookie\r\n            ], NativeType.None)\r\n          )\r\n        );\r\n      }\r\n    }\r\n  }\r\n  module.addFunction(BuiltinSymbols.visit_globals, typeRef, [ nativeSizeType ],\r\n    exprs.length\r\n      ? module.block(null, exprs)\r\n      : module.nop()\r\n  );\r\n}\r\n\r\n/** Compiles the `visit_members` function. */\r\nexport function compileVisitMembers(compiler: Compiler): void {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n  var usizeType = program.options.usizeType;\r\n  var nativeSizeType = usizeType.toNativeType();\r\n  var nativeSizeSize = usizeType.byteSize;\r\n  var ftype = compiler.ensureFunctionType([ usizeType, Type.i32 ], Type.void); // ref, cookie\r\n  var managedClasses = program.managedClasses;\r\n  var visitInstance = assert(program.visitInstance);\r\n  var blocks = new Array<RelooperBlockRef>();\r\n  var relooper = Relooper.create(module);\r\n\r\n  var outer = relooper.addBlockWithSwitch(\r\n    module.nop(),\r\n    module.load(nativeSizeSize, false,\r\n      nativeSizeType == NativeType.I64\r\n        ? module.binary(BinaryOp.SubI64,\r\n            module.local_get(0, nativeSizeType),\r\n            module.i64(8)\r\n          )\r\n        : module.binary(BinaryOp.SubI32,\r\n            module.local_get(0, nativeSizeType),\r\n            module.i32(8) // rtId is at -8\r\n          ),\r\n      NativeType.I32,\r\n      0\r\n    )\r\n  );\r\n\r\n  var lastId = 0;\r\n  for (let [id, instance] of managedClasses) {\r\n    assert(instance.type.isManaged);\r\n    assert(id == lastId++);\r\n\r\n    let visitImpl: Element | null;\r\n    let code = new Array<ExpressionRef>();\r\n\r\n    // if a library element, check if it implements a custom traversal function\r\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\r\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\r\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\r\n        code.push(\r\n          module.unreachable()\r\n        );\r\n      } else {\r\n        let visitSig = visitFunc.signature;\r\n        assert(\r\n          visitSig.parameterTypes.length == 1 &&\r\n          visitSig.parameterTypes[0] == Type.u32 &&\r\n          visitSig.returnType == Type.void &&\r\n          visitSig.thisType == instance.type\r\n        );\r\n        code.push(\r\n          module.call(visitFunc.internalName, [\r\n            module.local_get(0, nativeSizeType), // ref\r\n            module.local_get(1, NativeType.I32)  // cookie\r\n          ], NativeType.None)\r\n        );\r\n      }\r\n\r\n    // otherwise generate traversal logic for own fields\r\n    } else {\r\n      let members = instance.members;\r\n      if (members) {\r\n        for (let member of members.values()) {\r\n          if (member.kind == ElementKind.FIELD) {\r\n            if ((<Field>member).parent === instance) {\r\n              let fieldType = (<Field>member).type;\r\n              if (fieldType.isManaged) {\r\n                let fieldOffset = (<Field>member).memoryOffset;\r\n                assert(fieldOffset >= 0);\r\n                code.push(\r\n                  // if ($2 = value) FIELDCLASS~traverse($2)\r\n                  module.if(\r\n                    module.local_tee(2,\r\n                      module.load(nativeSizeSize, false,\r\n                        module.local_get(0, nativeSizeType),\r\n                        nativeSizeType, fieldOffset\r\n                      )\r\n                    ),\r\n                    module.call(visitInstance.internalName, [\r\n                      module.local_get(2, nativeSizeType), // ref\r\n                      module.local_get(1, NativeType.I32)  // cookie\r\n                    ], NativeType.None)\r\n                  )\r\n                );\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (!instance.base) code.push(module.return());\r\n    let block = relooper.addBlock(\r\n      flatten(module, code, NativeType.None)\r\n    );\r\n    relooper.addBranchForSwitch(outer, block, [ id ]);\r\n    blocks.push(block);\r\n  }\r\n  for (let [id, instance] of managedClasses) {\r\n    let base = instance.base;\r\n    if (base) {\r\n      relooper.addBranch(blocks[id], blocks[base.id]);\r\n    }\r\n  }\r\n  blocks.push(\r\n    relooper.addBlock(\r\n      module.unreachable()\r\n    )\r\n  );\r\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\r\n  compiler.compileFunction(visitInstance);\r\n  module.addFunction(BuiltinSymbols.visit_members, ftype, [ nativeSizeType ], relooper.renderAndDispose(outer, 2));\r\n}\r\n\r\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\r\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\r\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\r\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\r\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\r\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\r\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\r\n}\r\n\r\n/** Compiles runtime type information for use by stdlib. */\r\nexport function compileRTTI(compiler: Compiler): void {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n  var managedClasses = program.managedClasses;\r\n  var count = managedClasses.size;\r\n  var size = 4 + 8 * count;\r\n  var data = new Uint8Array(size);\r\n  writeI32(count, data, 0);\r\n  var off = 4;\r\n  var abvInstance = program.arrayBufferViewInstance;\r\n  var abvPrototype = abvInstance.prototype;\r\n  var arrayPrototype = program.arrayPrototype;\r\n  var setPrototype = program.setPrototype;\r\n  var mapPrototype = program.mapPrototype;\r\n  var lastId = 0;\r\n  for (let [id, instance] of managedClasses) {\r\n    assert(id == lastId++);\r\n    let flags: TypeinfoFlags = 0;\r\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\r\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\r\n      let valueType = instance.getArrayValueType();\r\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\r\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\r\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\r\n    } else if (instance.extends(setPrototype)) {\r\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\r\n      assert(typeArguments.length == 1);\r\n      flags |= TypeinfoFlags.SET;\r\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\r\n    } else if (instance.extends(mapPrototype)) {\r\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\r\n      assert(typeArguments.length == 2);\r\n      flags |= TypeinfoFlags.MAP;\r\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\r\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\r\n    }\r\n    writeI32(flags, data, off); off += 4;\r\n    instance.rttiFlags = flags;\r\n    let base = instance.base;\r\n    writeI32(base ? base.id : 0, data, off); off += 4;\r\n  }\r\n  assert(off == size);\r\n  var usizeType = program.options.usizeType;\r\n  var segment = compiler.addMemorySegment(data);\r\n  if (usizeType.size == 8) {\r\n    let offset = segment.offset;\r\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\r\n  } else {\r\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\r\n  }\r\n}\r\n\r\n// Helpers\r\n\r\n/** Evaluates the constant type of a type argument *or* expression. */\r\nfunction evaluateConstantType(\r\n  compiler: Compiler,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  reportNode: CallExpression\r\n): Type | null {\r\n  if (operands.length == 0) { // requires type argument\r\n    if (!typeArguments || typeArguments.length != 1) {\r\n      compiler.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n      );\r\n      return null;\r\n    }\r\n    return typeArguments[0];\r\n  }\r\n  if (operands.length == 1) { // optional type argument\r\n    if (typeArguments !== null && typeArguments.length) {\r\n      if (typeArguments.length > 1) {\r\n        compiler.error(\r\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n          reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\r\n        );\r\n        return null;\r\n      }\r\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\r\n    } else {\r\n      compiler.compileExpression(operands[0], Type.auto);\r\n    }\r\n    return compiler.currentType;\r\n  }\r\n  if (typeArguments && typeArguments.length > 1) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\r\n    );\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Expected_0_arguments_but_got_1,\r\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\r\n  );\r\n  return null;\r\n}\r\n\r\n/** Evaluates a compile-time constant immediate offset argument.*/\r\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I64 ||\r\n      getConstValueI64High(expr) != 0 ||\r\n      (value = getConstValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I32 ||\r\n      (value = getConstValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\n/** Checks a call with a single required type argument. Returns `1` on error. */\r\nfunction checkTypeRequired(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler,\r\n  setCurrentTypeOnError: bool = false\r\n): i32 {\r\n  if (typeArguments) {\r\n    let numTypeArguments = typeArguments.length;\r\n    if (numTypeArguments == 1) return 0;\r\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\r\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\r\n    );\r\n  } else {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.range, \"1\", \"0\"\r\n    );\r\n  }\r\n  return 1;\r\n}\r\n\r\n/** Checks a call with a single optional type argument. Returns `1` on error. */\r\nfunction checkTypeOptional(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler,\r\n  setCurrentTypeOnError: bool = false\r\n): i32 {\r\n  if (typeArguments) {\r\n    let numTypeArguments = typeArguments.length;\r\n    if (numTypeArguments == 1) return 0;\r\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\r\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that is not generic. Returns `1` on error. */\r\nfunction checkTypeAbsent(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  prototype: FunctionPrototype\r\n): i32 {\r\n  if (typeArguments) {\r\n    prototype.program.error(\r\n      DiagnosticCode.Type_0_is_not_generic,\r\n      reportNode.typeArgumentsRange, prototype.internalName\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\r\nfunction checkArgsRequired(\r\n  operands: Expression[],\r\n  expected: i32,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler\r\n): i32 {\r\n  if (operands.length != expected) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_arguments_but_got_1,\r\n      reportNode.range, expected.toString(), operands.length.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\r\nfunction checkArgsOptional(\r\n  operands: Expression[],\r\n  expectedMinimum: i32,\r\n  expectedMaximum: i32,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler\r\n): i32 {\r\n  var numOperands = operands.length;\r\n  if (numOperands < expectedMinimum) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\r\n    );\r\n    return 1;\r\n  } else if (numOperands > expectedMaximum) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_arguments_but_got_1,\r\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  getFunctionName,\r\n  getFunctionBody,\r\n  getFunctionParamCount,\r\n  getFunctionParamType,\r\n  getFunctionResultType,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfCondition,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getLoopName,\r\n  getLoopBody,\r\n  getBreakName,\r\n  getBreakCondition,\r\n  getLocalGetIndex,\r\n  getLocalSetIndex,\r\n  getLocalSetValue,\r\n  getLoadOffset,\r\n  getLoadPtr,\r\n  getStoreOffset,\r\n  getStorePtr,\r\n  getStoreValue,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getUnaryOp,\r\n  getUnaryValue,\r\n  getBinaryOp,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getSelectCondition,\r\n  getDropValue,\r\n  getReturnValue,\r\n  getHostOp,\r\n  getHostOperand\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\r\n    var body = getFunctionBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(getFunctionResultType(func)));\r\n    this.push(\" \");\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = getExpressionId(expr);\r\n    var type = getExpressionType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = getBlockName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = getBlockChildCount(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(getBlockChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          if (nested = getIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(getIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = getLoopName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(getLoopBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = getBreakCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = getBreakName(expr)) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        this.push(\"$\");\r\n        this.push(getLocalGetIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.LocalSet: {\r\n        this.push(\"$\");\r\n        this.push(getLocalSetIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(getLocalSetValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GlobalGet:\r\n      case ExpressionId.GlobalSet: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getLoadOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getLoadPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getStoreOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getStorePtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getStoreValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(getConstValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(getConstValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(getConstValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(getSelectThen(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectElse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(getDropValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = getReturnValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (getHostOp(expr)) {\r\n          case HostOp.MemorySize: {\r\n            this.push(\"memory.size()\");\r\n            return;\r\n          }\r\n          case HostOp.MemoryGrow: {\r\n            this.push(\"memory.grow(\");\r\n            this.decompileExpression(getHostOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicNotify:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.V128: return \"v128\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\n import {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Field,\r\n  Function,\r\n  FunctionPrototype,\r\n  Class,\r\n  ClassPrototype,\r\n  Namespace,\r\n  ConstantValueKind,\r\n  Interface,\r\n  Property,\r\n  PropertyPrototype,\r\n  File\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Whether to include private members */\r\n  includePrivate: bool;\r\n  /** Already seen elements. */\r\n  seen: Map<Element,string> = new Map();\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    this.program = program;\r\n    this.includePrivate;\r\n  }\r\n\r\n  /** Walks all elements and calls the respective handlers. */\r\n  walk(): void {\r\n    for (let file of this.program.filesByName.values()) {\r\n      if (file.source.isEntry) this.visitFile(file);\r\n    }\r\n  }\r\n\r\n  /** Visits all exported elements of a file. */\r\n  visitFile(file: File): void {\r\n    var members = file.exports;\r\n    if (members) {\r\n      for (let [name, member] of members) this.visitElement(name, member);\r\n    }\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar) {\r\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\r\n    }\r\n  }\r\n\r\n  /** Visits an element.*/\r\n  visitElement(name: string, element: Element): void {\r\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\r\n    var seen = this.seen;\r\n    if (seen.has(element)) {\r\n      this.visitAlias(name, element, <string>seen.get(element));\r\n      return;\r\n    }\r\n    seen.set(element, name);\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        this.visitClassInstances(name, <ClassPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prop = <Property>element;\r\n        let getter = prop.getterInstance;\r\n        if (getter) this.visitFunction(name, getter);\r\n        let setter = prop.setterInstance;\r\n        if (setter) this.visitFunction(name, setter);\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\r\n        break;\r\n      }\r\n      case ElementKind.TYPEDEFINITION: break;\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\r\n    var instances = element.instances;\r\n    if (instances) {\r\n      for (let instance of instances.values()) {\r\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  private visitClassInstances(name: string, element: ClassPrototype): void {\r\n    var instances = element.instances;\r\n    if (instances) {\r\n      for (let instance of instances.values()) {\r\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\r\n    // var instances = element.instances;\r\n    // if (instances) {\r\n    //   for (let instance of instances.values()) {\r\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\r\n    //   }\r\n    // }\r\n    assert(false);\r\n  }\r\n\r\n  abstract visitGlobal(name: string, element: Global): void;\r\n  abstract visitEnum(name: string, element: Enum): void;\r\n  abstract visitFunction(name: string, element: Function): void;\r\n  abstract visitClass(name: string, element: Class): void;\r\n  abstract visitInterface(name: string, element: Interface): void;\r\n  abstract visitField(name: string, element: Field): void;\r\n  abstract visitNamespace(name: string, element: Element): void;\r\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(name: string, element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) sb.push(\"const \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(name);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(name: string, element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) sb.push(\"const \");\r\n          else sb.push(\"readonly \");\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\r\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(name: string, element: Function): void {\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(name);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.name);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member.name, member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(name: string, element: Class): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(name);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(name: string, element: Interface): void {\r\n    this.visitClass(name, element);\r\n  }\r\n\r\n  visitField(name: string, element: Field): void {\r\n    // TODO\r\n  }\r\n\r\n  visitNamespace(name: string, element: Namespace): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member.name, member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitAlias(name: string, element: Element, originalName: string): void {\r\n    // TODO\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n  private unknown: Set<string> = new Set();\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(name: string, element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.STATIC)) {\r\n      if (isConst) sb.push(\"static readonly \");\r\n      else sb.push(\"static \");\r\n    } else {\r\n      if (isConst) sb.push(\"export const \");\r\n      else sb.push(\"export var \");\r\n    }\r\n    sb.push(name);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(name, element);\r\n  }\r\n\r\n  visitEnum(name: string, element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"export enum \");\r\n    sb.push(name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\r\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) this.visitNamespace(name, element);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(name: string, element: Function): void {\r\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.GET)) {\r\n      sb.push(\"get \");\r\n      sb.push(name); // 'get:funcName' internally\r\n      sb.push(\"(): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n      sb.push(\";\\n\");\r\n      return;\r\n    } else {\r\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\r\n      sb.push(name);\r\n    }\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\r\n      sb.push(\")\");\r\n    } else {\r\n      sb.push(\"): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n    }\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(name, element);\r\n  }\r\n\r\n  visitClass(name: string, element: Class): void {\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"export interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\r\n      sb.push(\"export class \");\r\n    }\r\n    sb.push(name);\r\n    // var base = element.base;\r\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\r\n    //   sb.push(\" extends \");\r\n    //   sb.push(base.name); // TODO: fqn\r\n    // }\r\n    sb.push(\" {\\n\");\r\n    var staticMembers = element.prototype.members;\r\n    if (staticMembers) {\r\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\r\n    }\r\n    var instanceMembers = element.members;\r\n    if (instanceMembers) {\r\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(name: string, element: Interface): void {\r\n    this.visitClass(name, element);\r\n  }\r\n\r\n  visitField(name: string, element: Field): void {\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n    sb.push(name);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitNamespace(name: string, element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"export namespace \");\r\n      sb.push(name);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member.name, member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitAlias(name: string, element: Element, originalName: string): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(\"export const \");\r\n    sb.push(name);\r\n    sb.push(\" = typeof \");\r\n    sb.push(originalName);\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.V128: return \"v128\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"any\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    sb.push(\"export default ASModule;\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Tests if a namespace-like element has at least one compiled member. */\r\nfunction hasCompiledMember(element: Element): bool {\r\n  var members = element.members;\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      switch (member.kind) {\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          let instances = (<FunctionPrototype>member).instances;\r\n          if (instances) {\r\n            for (let instance of instances.values()) {\r\n              if (instance.is(CommonFlags.COMPILED)) return true;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          let instances = (<ClassPrototype>member).instances;\r\n          if (instances) {\r\n            for (let instance of instances.values()) {\r\n              if (instance.is(CommonFlags.COMPILED)) return true;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler,\r\n  IdentifierHandling,\r\n  isIllegalVariableIdentifier\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  TypeNode,\r\n  NamedTypeNode,\r\n  FunctionTypeNode,\r\n  ArrowKind,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  ClassExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  IndexSignatureDeclaration,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath,\r\n  nodeIsCallable,\r\n  nodeIsGenericCallable\r\n} from \"./ast\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Source file names to be requested next. */\r\n  backlog: string[] = new Array();\r\n  /** Source file names already seen, that is processed or backlogged. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Source file names already completely processed. */\r\n  donelog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n  /** Current file being parsed. */\r\n  currentSource: Source;\r\n  /** Dependency map **/\r\n  dependees: Map<string, Source> = new Map();\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n    // check if already processed\r\n    if (this.donelog.has(internalPath)) return;\r\n    this.donelog.add(internalPath); // do not parse again\r\n    this.seenlog.add(internalPath); // do not request again\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n          ? SourceKind.LIBRARY\r\n          : SourceKind.DEFAULT\r\n    );\r\n    var program = this.program;\r\n    program.sources.push(source);\r\n    this.currentSource = source;\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn, null);\r\n      if (statement) statements.push(statement);\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: NamespaceDeclaration | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) {\r\n        this.skipStatement(tn);\r\n        continue;\r\n      }\r\n      if (!decorators) decorators = [decorator];\r\n      else decorators.push(decorator);\r\n    }\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    var defaultStart: i32 = 0;\r\n    var defaultEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n      if (tn.skip(Token.DEFAULT)) {\r\n        defaultStart = tn.tokenPos;\r\n        defaultEnd = tn.pos;\r\n      }\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      } else {\r\n        if (startPos < 0) startPos = tn.tokenPos;\r\n        declareStart = startPos;\r\n        declareEnd = tn.pos;\r\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n      }\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        }\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (!tn.skip(Token.CLASS)) {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n          break;\r\n        } else {\r\n          tn.discard(state);\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        // fall through\r\n      }\r\n      case Token.CLASS:\r\n      case Token.INTERFACE: {\r\n        tn.next();\r\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\r\n            if (declareEnd) {\r\n              this.error(\r\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\r\n                tn.range(declareStart, declareEnd)\r\n              );\r\n            }\r\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\r\n            defaultStart = defaultEnd = 0; // consume\r\n          } else {\r\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\r\n          }\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n\r\n    // check if this an `export default` declaration\r\n    if (defaultEnd && statement !== null) {\r\n      switch (statement.kind) {\r\n        case NodeKind.ENUMDECLARATION:\r\n        case NodeKind.FUNCTIONDECLARATION:\r\n        case NodeKind.CLASSDECLARATION:\r\n        case NodeKind.INTERFACEDECLARATION:\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\r\n        }\r\n        default: {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(defaultStart, defaultEnd), \"default\"\r\n          );\r\n        }\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Obtains the dependee for a given import */\r\n  getDependee(dependent: string): string | null {\r\n    var source = this.dependees.get(dependent);\r\n    if (source) {\r\n      return source.internalPath;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    this.donelog.clear();\r\n    this.dependees.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): TypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    var type: TypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseFunctionType(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'void'\r\n    } else if (token == Token.VOID) {\r\n      type = Node.createNamedType(\r\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createNamedType(\r\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createNamedType(\r\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createNamedType(\r\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\r\n      let current = first;\r\n      let parameters: NamedTypeNode[] | null = null;\r\n      let nullable = false;\r\n\r\n      // Identifier ('.' Identifier)+\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\r\n          current.next = next;\r\n          current = next;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range(tn.pos)\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          if (!parameters) parameters = [<NamedTypeNode>parameter];\r\n          else parameters.push(<NamedTypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      while (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createNamedType(first, parameters || [], nullable, tn.range(startPos, tn.pos));\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createNamedType(\r\n        Node.createSimpleTypeName(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function type, as used in type declarations. */\r\n  tryParseFunctionType(\r\n    tn: Tokenizer\r\n  ): FunctionTypeNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: NamedTypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.NAMEDTYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <NamedTypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skipIdentifier()) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        if (isSignature) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: TypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createFunctionType(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skipIdentifier()) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (isIllegalVariableIdentifier(identifier.text)) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        identifier.range\r\n      );\r\n    }\r\n    var flags = parentFlags;\r\n    if (tn.skip(Token.EXCLAMATION)) {\r\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n    }\r\n\r\n    var type: TypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    var range = Range.join(identifier.range, tn.range());\r\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\r\n      this.error(\r\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n        range);\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      range\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n      if (!member) return null;\r\n      members.push(<EnumValueDeclaration>member);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEBRACE)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    var seenOptional = false;\r\n    while (!tn.skip(Token.GREATERTHAN)) {\r\n      let typeParameter = this.parseTypeParameter(tn);\r\n      if (!typeParameter) return null;\r\n      if (typeParameter.defaultType !== null) {\r\n        seenOptional = true;\r\n      } else if (seenOptional) {\r\n        this.error(\r\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\r\n          typeParameter.range\r\n        );\r\n        typeParameter.defaultType = null;\r\n      }\r\n      if (!typeParameters) typeParameters = [ typeParameter ];\r\n      else typeParameters.push(typeParameter);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.GREATERTHAN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    if (!(typeParameters && typeParameters.length)) {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)? ('=' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: NamedTypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.NAMEDTYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <NamedTypeNode>t;\r\n      }\r\n      let defaultType: NamedTypeNode | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.NAMEDTYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        defaultType = <NamedTypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        defaultType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private parseParametersThis: NamedTypeNode | null = null;\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n    var thisType: TypeNode | null = null;\r\n\r\n    // check if there is a leading `this` parameter\r\n    this.parseParametersThis = null;\r\n    if (tn.skip(Token.THIS)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        thisType = this.parseType(tn); // reports\r\n        if (!thisType) return null;\r\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\r\n          this.parseParametersThis = <NamedTypeNode>thisType;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            thisType.range\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n        return null;\r\n      }\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          return parameters;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let param = this.parseParameter(tn, isConstructor); // reports\r\n      if (!param) return null;\r\n      if (seenRest && !reportedRest) {\r\n        this.error(\r\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n          seenRest.name.range\r\n        );\r\n        reportedRest = true;\r\n      }\r\n      switch (param.parameterKind) {\r\n        default: {\r\n          if (seenOptional) {\r\n            this.error(\r\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n              param.name.range\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ParameterKind.OPTIONAL: {\r\n          seenOptional = true;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          seenRest = param;\r\n          break;\r\n        }\r\n      }\r\n      parameters.push(param);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (isConstructor) {\r\n      if (tn.skip(Token.PUBLIC)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PUBLIC;\r\n      } else if (tn.skip(Token.PROTECTED)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PROTECTED;\r\n      } else if (tn.skip(Token.PRIVATE)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PRIVATE;\r\n      }\r\n      if (tn.peek() == Token.READONLY) {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek() != Token.COLON) { // modifier\r\n          tn.discard(state);\r\n          if (!startRange) startRange = tn.range();\r\n          accessFlags |= CommonFlags.READONLY;\r\n        } else { // identifier\r\n          tn.reset(state);\r\n        }\r\n      }\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skipIdentifier()) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: TypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n    var thisType = this.parseParametersThis;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: TypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createFunctionType(\r\n      parameters,\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      ArrowKind.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var arrowKind = ArrowKind.NONE;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skipIdentifier()) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    arrowKind: ArrowKind,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: TypeNode | null = null;\r\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n    }\r\n\r\n    if (arrowKind) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createFunctionType(\r\n      parameters,\r\n      returnType,\r\n      null, // TODO?\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (arrowKind) {\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        body = this.parseBlockStatement(tn, false);\r\n      } else {\r\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\r\n      }\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      CommonFlags.NONE,\r\n      arrowKind,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClassOrInterface(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at ('class' | 'interface'):\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    var isInterface = tn.token == Token.INTERFACE;\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    var extendsType: NamedTypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.NAMEDTYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <NamedTypeNode>t;\r\n    }\r\n\r\n    var implementsTypes: NamedTypeNode[] | null = null;\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        if (!isInterface) {\r\n          if (!implementsTypes) implementsTypes = [<NamedTypeNode>type];\r\n          else implementsTypes.push(<NamedTypeNode>type);\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration: ClassDeclaration;\r\n    if (isInterface) {\r\n      assert(!implementsTypes);\r\n      declaration = Node.createInterfaceDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    } else {\r\n      declaration = Node.createClassDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        implementsTypes,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (member) members.push(<DeclarationStatement>member);\r\n        else {\r\n          this.skipStatement(tn);\r\n          if (tn.skip(Token.ENDOFFILE)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    declaration.range.end = tn.pos;\r\n    return declaration;\r\n  }\r\n\r\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\r\n\r\n    // at 'class': Identifier? '{' ... '}'\r\n\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n\r\n    if (tn.skipIdentifier()) {\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    } else {\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration = Node.createClassDeclaration(\r\n      name,\r\n      [],\r\n      null,\r\n      null,\r\n      members,\r\n      null,\r\n      CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (member) members.push(<DeclarationStatement>member);\r\n        else {\r\n          this.skipStatement(tn);\r\n          if (tn.skip(Token.ENDOFFILE)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    declaration.range.end = tn.pos;\r\n    return Node.createClassExpression(declaration);\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\r\n\r\n    var decorators: DecoratorNode[] | null = null;\r\n    if (tn.skip(Token.AT)) {\r\n      do {\r\n        let decorator = this.parseDecorator(tn);\r\n        if (!decorator) break;\r\n        if (!decorators) decorators = [<DecoratorNode>decorator];\r\n        else decorators.push(<DecoratorNode>decorator);\r\n      } while (tn.skip(Token.AT));\r\n      if (decorators && isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n        );\r\n      }\r\n    }\r\n\r\n    // inherit ambient status\r\n    var flags = parent.flags & CommonFlags.AMBIENT;\r\n\r\n    // implemented methods are virtual\r\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\r\n\r\n    var accessStart = 0;\r\n    var accessEnd = 0;\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"public\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PUBLIC;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"private\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PRIVATE;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"protected\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PROTECTED;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    }\r\n\r\n    var staticStart = 0;\r\n    var staticEnd = 0;\r\n    var abstractStart = 0;\r\n    var abstractEnd = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"static\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      flags |= CommonFlags.INSTANCE;\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        if (isInterface) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(), \"abstract\"\r\n          );\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.peek() == Token.READONLY) {\r\n      let state = tn.mark();\r\n      tn.next();\r\n      if (tn.peek() != Token.COLON) { // modifier\r\n        tn.discard(state);\r\n        flags |= CommonFlags.READONLY;\r\n        readonlyStart = tn.tokenPos;\r\n        readonlyEnd = tn.pos;\r\n      } else { // identifier\r\n        tn.reset(state);\r\n      }\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (!isInterface) {\r\n      if (tn.skip(Token.GET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.GET;\r\n          isGetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.SET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.SET;\r\n          isSetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n        flags |= CommonFlags.CONSTRUCTOR;\r\n        isConstructor = true;\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      }\r\n    }\r\n\r\n    var name: IdentifierExpression;\r\n    if (isConstructor) {\r\n      name = Node.createConstructorExpression(tn.range());\r\n    } else {\r\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\r\n        // TODO: also handle symbols, which might have some of these modifiers\r\n        if (flags & CommonFlags.PUBLIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"public\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PROTECTED) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PRIVATE) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\r\n        if (!retIndex) return null;\r\n        tn.skip(Token.SEMICOLON);\r\n        return retIndex;\r\n      }\r\n      if (!tn.skipIdentifier()) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      let thisType = this.parseParametersThis;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: TypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createFunctionType(\r\n        parameters,\r\n        returnType,\r\n        thisType,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\r\n            tn.range(), name.text\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: TypeNode | null = null;\r\n      if (tn.skip(Token.QUESTION)) {\r\n        this.error(\r\n          DiagnosticCode.Optional_properties_are_not_supported,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      if (tn.skip(Token.EXCLAMATION)) {\r\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let range = tn.range(startPos, tn.pos);\r\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\r\n        this.error(\r\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n          range\r\n        );\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        range\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\r\n\r\n    // at: '[': 'key' ':' Type ']' ':' Type\r\n\r\n    if (decorators && decorators.length) {\r\n      this.error(\r\n        DiagnosticCode.Decorators_are_not_valid_here,\r\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n      ); // recoverable\r\n    }\r\n\r\n    var start = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let id = tn.readIdentifier();\r\n      if (id == \"key\") {\r\n        if (tn.skip(Token.COLON)) {\r\n          let keyType = this.parseType(tn);\r\n          if (!keyType) return null;\r\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              tn.range()\r\n            );\r\n            return null;\r\n          }\r\n          if (tn.skip(Token.CLOSEBRACKET)) {\r\n            if (tn.skip(Token.COLON)) {\r\n              let valueType = this.parseType(tn);\r\n              if (!valueType) return null;\r\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, tn.range(start, tn.pos));\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \":\"\r\n              );\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \":\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"key\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let declaration = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, declaration);\r\n          if (member) members.push(member);\r\n          else {\r\n            this.skipStatement(tn);\r\n            if (tn.skip(Token.ENDOFFILE)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"}\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        declaration.range.end = tn.pos;\r\n        tn.skip(Token.SEMICOLON);\r\n        return declaration;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    isDeclare: bool\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    var path: StringLiteralExpression | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseExportMember(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\r\n        this.dependees.set(internalPath, this.currentSource);\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\r\n          let internalPath = assert(ret.internalPath);\r\n          let source = tn.source;\r\n          if (!source.exportPaths) source.exportPaths = new Set();\r\n          source.exportPaths.add(internalPath);\r\n          if (!this.seenlog.has(internalPath)) {\r\n            this.dependees.set(internalPath, this.currentSource);\r\n            this.backlog.push(internalPath);\r\n          }\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"from\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportDefaultAlias(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    defaultStart: i32,\r\n    defaultEnd: i32\r\n  ): ExportStatement {\r\n\r\n    // at 'export' 'default': [Known-To-Be-]Identifier\r\n\r\n    var name = tn.readIdentifier();\r\n    var range = tn.range();\r\n    var ret = Node.createExportStatement([\r\n      Node.createExportMember(\r\n        Node.createIdentifierExpression(name, range),\r\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\r\n        range\r\n      )\r\n    ], null, false, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\r\n      members = new Array();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseImportDeclaration(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\r\n      let name = tn.readIdentifier();\r\n      let range = tn.range();\r\n      members = [\r\n        Node.createImportDeclaration(\r\n          Node.createIdentifierExpression(\"default\", range),\r\n          Node.createIdentifierExpression(name, range),\r\n          range\r\n        )\r\n      ];\r\n      if (tn.skip(Token.COMMA)) {\r\n        // TODO: default + star, default + members\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n    } else { // import \"file\"\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.dependees.set(internalPath, this.currentSource);\r\n          this.backlog.push(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skipIdentifier()) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        if (tn.token == Token.ENDOFFILE) return null;\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skipIdentifier()) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(IdentifierHandling.PREFER);\r\n    var startPos = tn.tokenPos;\r\n    var precedence = determinePrecedenceStart(token);\r\n    if (precedence != Precedence.NONE) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, precedence);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var expr: Expression | null = null;\r\n    switch (token) {\r\n\r\n      case Token.NULL: return Node.createNullExpression(tn.range());\r\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\r\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            ArrowKind.ARROW_PARENTHESIZED\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(IdentifierHandling.PREFER)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (\r\n                    !tn.skip(Token.COLON) &&\r\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\r\n                  ) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // optional parameter or parenthesized\r\n                case Token.QUESTION: {\r\n                  if (\r\n                    tn.skip(Token.COLON) ||   // optional parameter with type\r\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\r\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\r\n                  ) {\r\n                    tn.reset(state);\r\n                    return this.parseFunctionExpression(tn);\r\n                  }\r\n                  again = false; // parenthesized\r\n                  break;\r\n                  }\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        while (!tn.skip(Token.CLOSEBRACKET)) {\r\n          if (tn.peek() == Token.COMMA) {\r\n            expr = null; // omitted\r\n          } else {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n          }\r\n          elementExpressions.push(expr);\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACKET)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"]\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // ObjectLiteralExpression\r\n      case Token.OPENBRACE: {\r\n        let startPos = tn.tokenPos;\r\n        let names = new Array<IdentifierExpression>();\r\n        let values = new Array<Expression>();\r\n        let name: IdentifierExpression;\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          if (!tn.skipIdentifier()) {\r\n            if (!tn.skip(Token.STRINGLITERAL)) {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                tn.range(),\r\n              );\r\n              return null;\r\n            }\r\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\r\n            name.isQuoted = true;\r\n          } else {\r\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          }\r\n          names.push(name);\r\n          if (tn.skip(Token.COLON)) {\r\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!value) return null;\r\n            values.push(value);\r\n          } else if (!name.isQuoted) {\r\n            values.push(name);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACE)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"}\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        let identifierText = tn.readIdentifier();\r\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\r\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\r\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [\r\n              Node.createParameter(\r\n                identifier,\r\n                Node.createOmittedType(identifier.range.atEnd),\r\n                null,\r\n                ParameterKind.DEFAULT,\r\n                identifier.range\r\n              )\r\n            ],\r\n            ArrowKind.ARROW_SINGLE,\r\n            startPos\r\n          );\r\n        }\r\n        return identifier;\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\r\n          this.error(\r\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\r\n            tn.range()\r\n          );\r\n        }\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      case Token.CLASS: {\r\n        return this.parseClassExpression(tn);\r\n      }\r\n      default: {\r\n        if (token == Token.ENDOFFILE) {\r\n          this.error(\r\n            DiagnosticCode.Unexpected_end_of_text,\r\n            tn.range(startPos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Expression_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): TypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments: TypeNode[] | null = null;\r\n    do {\r\n      if (tn.peek() === Token.GREATERTHAN) {\r\n        break;\r\n      }\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      if (!typeArguments) typeArguments = [ type ];\r\n      else typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!expr) return null;\r\n      args.push(expr);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = Precedence.COMMA\r\n  ): Expression | null {\r\n    assert(precedence != Precedence.NONE);\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\r\n\r\n    var startPos = expr.range.start;\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn); // reports\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        case Token.EXCLAMATION: {\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.NONNULL,\r\n            expr,\r\n            null,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // InstanceOfExpression\r\n        case Token.INSTANCEOF: {\r\n          let isType = this.parseType(tn); // reports\r\n          if (!isType) return null;\r\n          expr = Node.createInstanceOfExpression(\r\n            expr,\r\n            isType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn); // reports\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\r\n            ? Precedence.COMMA + 1\r\n            : Precedence.COMMA\r\n          );\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (tn.skipIdentifier()) {\r\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n            } else {\r\n              next = this.parseExpression(tn,\r\n                isRightAssociative(token)\r\n                  ? nextPrecedence\r\n                  : nextPrecedence + 1\r\n              );\r\n              if (!next) return null;\r\n            }\r\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\r\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\r\n              if (!expr) return null;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            next = this.parseExpression(tn,\r\n              isRightAssociative(token)\r\n                ? nextPrecedence\r\n                : nextPrecedence + 1\r\n            );\r\n            if (!next) return null;\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  private joinPropertyCall(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    expr: Expression,\r\n    call: CallExpression\r\n  ): Expression | null {\r\n    var callee = call.expression;\r\n    switch (callee.kind) {\r\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\r\n        call.expression = Node.createPropertyAccessExpression(\r\n          expr,\r\n          <IdentifierExpression>callee,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.CALL: { // join call target und wrap the original call around it\r\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\r\n        if (!inner) return null;\r\n        call.expression = inner;\r\n        call.range = tn.range(startPos, tn.pos);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          call.range\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    return call;\r\n  }\r\n\r\n  private maybeParseCallExpression(\r\n    tn: Tokenizer,\r\n    expr: Expression\r\n  ): Expression {\r\n    if (nodeIsCallable(expr.kind)) {\r\n      let typeArguments: TypeNode[] | null = null;\r\n      while (\r\n        tn.skip(Token.OPENPAREN)\r\n        ||\r\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\r\n      ) {\r\n        let args = this.parseArguments(tn);\r\n        if (!args) break;\r\n        expr = Node.createCallExpression( // is again callable\r\n          expr,\r\n          typeArguments,\r\n          args,\r\n          tn.range(expr.range.start, tn.pos)\r\n        );\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.SEMICOLON      // end of the statement for sure\r\n      ) {\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n        case Token.OPENBRACE: {\r\n          this.skipBlock(tn);\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipBlock(tn: Tokenizer): void {\r\n    // at '{': ... '}'\r\n    var depth = 1;\r\n    var again = true;\r\n    do {\r\n      switch (tn.next()) {\r\n        case Token.ENDOFFILE: {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          again = false;\r\n          break;\r\n        }\r\n        case Token.OPENBRACE: {\r\n          ++depth;\r\n          break;\r\n        }\r\n        case Token.CLOSEBRACE: {\r\n          --depth;\r\n          if (!depth) again = false;\r\n          break;\r\n        }\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (again);\r\n  }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  NONE,\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET:\r\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\n/// <reference path=\"./node.d.ts\" />\r\n\r\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\r\nimport \"../../../std/portable/index\";\r\nimport \"./float\";\r\nimport \"./i64\";\r\n\r\nimport { Module } from \"../../module\";\r\n\r\nModule.prototype.toText = function(this: Module) {\r\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\r\n  // of unreachable statements not actually emitted by the compiler. Optimizing\r\n  // StackIR removes these again, but may also suppress useless code emitted by\r\n  // the compiler that's then no longer visible in tests. Both not ideal.\r\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\r\n};\r\n\r\nModule.prototype.toAsmjs = function(this: Module) {\r\n  return binaryen.wrapModule(this.ref).emitAsmjs();\r\n};\r\n","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\nglobal.binaryen = binaryen;\r\n\r\nfor (var key in binaryen) {\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\r\n}\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.__memory_allocate = binaryen._malloc;\r\nglobal.__memory_free = binaryen._free;\r\nglobal.__memory_copy = binaryen._memmove;\r\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\r\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nglobalScope.ASC_TARGET = 2; // Target.JS\r\nglobalScope.ASC_NO_ASSERT = false;\r\nglobalScope.ASC_MEMORY_BASE = 0;\r\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\r\nglobalScope.ASC_SHRINK_LEVEL = 0;\r\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\r\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\r\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\r\nglobalScope.ASC_FEATURE_SIMD = false;\r\nglobalScope.ASC_FEATURE_THREADS = false;\r\n\r\nvar F64 = new Float64Array(1);\r\nvar U64 = new Uint32Array(F64.buffer);\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value:  127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value:  32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value:   0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value:     0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value:          0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: false, writable: false },\r\n  \"MAX_VALUE\": { value: true,  writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\r\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\r\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"ctz\"] = function ctz(value) {\r\n  var c = Math.clz32(value & -value);\r\n  return value ? 31 - c : c;\r\n};\r\n\r\nglobalScope[\"popcnt\"] = function popcnt(value) {\r\n  value -= value >>> 1 & 0x55555555;\r\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\r\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\r\n};\r\n\r\nglobalScope[\"rotl\"] = function rotl(value, shift) {\r\n  shift &= 31;\r\n  return (value << shift) | (value >>> (32 - shift));\r\n};\r\n\r\nglobalScope[\"rotr\"] = function rotr(value, shift) {\r\n  shift &= 31;\r\n  return (value >>> shift) | (value << (32 - shift));\r\n};\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\n// Adopt code from https://github.com/rfk/wasm-polyfill\r\nglobalScope[\"nearest\"] = function nearest(value) {\r\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\r\n    return 2.0 * Math.round(value * 0.5);\r\n  }\r\n  return Math.round(value);\r\n};\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"copysign\"] = function copysign(x, y) {\r\n  return Math.abs(x) * Math.sign(y);\r\n};\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nif (!String.prototype.replaceAll) {\r\n  Object.defineProperty(String.prototype, \"replaceAll\", {\r\n    value: function replaceAll(search, replacment) {\r\n      var res = this.split(search).join(replacment);\r\n      if (!search.length) res = replacment + res + replacment;\r\n      return res;\r\n    }\r\n  });\r\n}\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isNullable\"] = function isNullable(arg) {\r\n  return true;\r\n}\r\n\r\nglobalScope[\"isReference\"] = function isReference(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isFunction\"] = function isFunction(arg) {\r\n  return typeof arg === \"function\";\r\n}\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\r\n  return expr\r\n    && typeof expr === 'object'\r\n    && typeof expr.length === 'number'\r\n    && expr.length >= 0\r\n    && Math.trunc(expr.length) === expr.length;\r\n};\r\n\r\nArray.create = function(capacity) {\r\n  var arr = new Array(capacity);\r\n  arr.length = 0;\r\n  return arr;\r\n};\r\n\r\nglobalScope[\"isDefined\"] = function isDefined(expr) {\r\n  return typeof expr !== \"undefined\";\r\n}\r\n\r\nglobalScope[\"isConstant\"] = function isConstant(expr) {\r\n  return false;\r\n};\r\n\r\nglobalScope[\"unchecked\"] = function unchecked(expr) {\r\n  return expr;\r\n};\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nglobalScope[\"JSMath\"] = Math;\r\n\r\nObject.defineProperties(globalScope[\"JSMath\"], {\r\n  sincos_sin: { value: 0.0, writable: true },\r\n  sincos_cos: { value: 0.0, writable: true },\r\n  signbit: {\r\n    value: function signbit(x) {\r\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\r\n    }\r\n  },\r\n  sincos: {\r\n    value: function sincos(x) {\r\n      this.sincos_sin = Math.sin(x);\r\n      this.sincos_cos = Math.cos(x);\r\n    }\r\n  }\r\n});\r\n\r\nglobalScope[\"memory\"] = (() => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n  return {\r\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\r\n      if (!(size >>>= 0)) return 0;\r\n      if (HEAP_OFFSET + size > HEAP.length) {\r\n        var oldHeap = HEAP;\r\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n        HEAP.set(oldHeap);\r\n      }\r\n      var ptr = HEAP_OFFSET;\r\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n      return ptr;\r\n    },\r\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\r\n      HEAP.fill(value, dest, dest + size);\r\n    },\r\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\r\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\r\n      HEAP.copyWithin(dest, src, src + size);\r\n    },\r\n    reset: globalScope[\"__memory_reset\"] || function reset() {\r\n      HEAP = new Uint8Array(0);\r\n      HEAP_OFFSET = 0;\r\n    }\r\n  };\r\n})();\r\n\r\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\r\n  HEAP[(ptr | 0) + (offset | 0)] = value;\r\n};\r\n\r\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\r\n  return HEAP[(ptr | 0) + (offset | 0)];\r\n};\r\n\r\nglobalScope[\"unmanaged\"] = function() {};\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_zero = Long.ZERO;\r\n\r\nglobal.i64_one = Long.ONE;\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_eq = function(left, right) {\r\n  return left.eq(right);\r\n};\r\n\r\nglobal.i64_ne = function(left, right) {\r\n  return left.ne(right);\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// This file is shared with the compiler and must remain portable\r\n\r\n/** Indicates specific features to activate. */\r\nexport const enum Feature {\r\n  /** No additional features. */\r\n  NONE = 0,\r\n  /** Sign extension operations. */\r\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\r\n  /** Mutable global imports and exports. */\r\n  MUTABLE_GLOBAL = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\r\n  /** Bulk memory operations. */\r\n  BULK_MEMORY = 1 << 2, // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  /** SIMD types and operations. */\r\n  SIMD = 1 << 3, // see: https://github.com/WebAssembly/simd\r\n  /** Threading and atomic operations. */\r\n  THREADS = 1 << 4 // see: https://github.com/WebAssembly/threads\r\n}\r\n","// This file is shared with the compiler and must remain portable\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64,\r\n  /** Portable. */\r\n  JS\r\n}\r\n","// This file is shared with the compiler and must remain portable\r\n\r\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\r\n//    3                   2                   1\r\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\r\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\r\n// │                             count                             │\r\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\r\n// │                      Typeinfo#flags [id=0]                    │ id < count\r\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\r\n// │                      Typeinfo#base  [id=0]                    │\r\n// ├───────────────────────────────────────────────────────────────┤\r\n// │                              ...                              │\r\n\r\n/** Runtime type information data structure. */\r\n@unmanaged\r\nexport class Typeinfo {\r\n  /** Flags describing the shape of this class type. */\r\n  flags: TypeinfoFlags;\r\n  /** Base class id or `0` if none. */\r\n  base: u32;\r\n}\r\n\r\n/** Runtime type information flags. */\r\nexport const enum TypeinfoFlags {\r\n  /** No specific flags. */\r\n  NONE = 0,\r\n  /** Type is an `ArrayBufferView`. */\r\n  ARRAYBUFFERVIEW = 1 << 0,\r\n  /** Type is an `Array`. */\r\n  ARRAY = 1 << 1,\r\n  /** Type is a `Set`. */\r\n  SET = 1 << 2,\r\n  /** Type is a `Map`. */\r\n  MAP = 1 << 3,\r\n  /** Type is inherently acyclic. */\r\n  ACYCLIC = 1 << 4,\r\n  /** Value alignment of 1 byte. */\r\n  VALUE_ALIGN_0 = 1 << 5,\r\n  /** Value alignment of 2 bytes. */\r\n  VALUE_ALIGN_1 = 1 << 6,\r\n  /** Value alignment of 4 bytes. */\r\n  VALUE_ALIGN_2 = 1 << 7,\r\n  /** Value alignment of 8 bytes. */\r\n  VALUE_ALIGN_3 = 1 << 8,\r\n  /** Value alignment of 16 bytes. */\r\n  VALUE_ALIGN_4 = 1 << 9,\r\n  /** Value is a signed type. */\r\n  VALUE_SIGNED = 1 << 10,\r\n  /** Value is a float type. */\r\n  VALUE_FLOAT = 1 << 11,\r\n  /** Value type is nullable. */\r\n  VALUE_NULLABLE = 1 << 12,\r\n  /** Value type is managed. */\r\n  VALUE_MANAGED = 1 << 13,\r\n  /** Key alignment of 1 byte. */\r\n  KEY_ALIGN_0 = 1 << 14,\r\n  /** Key alignment of 2 bytes. */\r\n  KEY_ALIGN_1 = 1 << 15,\r\n  /** Key alignment of 4 bytes. */\r\n  KEY_ALIGN_2 = 1 << 16,\r\n  /** Key alignment of 8 bytes. */\r\n  KEY_ALIGN_3 = 1 << 17,\r\n  /** Key alignment of 16 bytes. */\r\n  KEY_ALIGN_4 = 1 << 18,\r\n  /** Key is a signed type. */\r\n  KEY_SIGNED = 1 << 19,\r\n  /** Key is a float type. */\r\n  KEY_FLOAT = 1 << 20,\r\n  /** Key type is nullable. */\r\n  KEY_NULLABLE = 1 << 21,\r\n  /** Key type is managed. */\r\n  KEY_MANAGED = 1 << 22\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport { Target, Feature } from \"./common\";\r\nimport { Compiler, Options } from \"./compiler\";\r\nimport { Decompiler } from \"./decompiler\";\r\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\r\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\r\nimport { Module } from \"./module\";\r\nimport { Parser } from \"./parser\";\r\nimport { Program } from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) parser = new Parser();\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the path of the dependee of a given imported file. */\r\nexport function getDependee(parser: Parser, file: string): string | null {\r\n  return parser.getDependee(file);\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `sharedMemory` option. */\r\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\r\n  options.sharedMemory = sharedMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(alias, name);\r\n}\r\n\r\n/** Sets the `explicitStart` option. */\r\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\r\n  options.explicitStart = explicitStart;\r\n}\r\n\r\n/** Sign extension operations. */\r\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\r\n/** Mutable global imports and exports. */\r\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\r\n/** Bulk memory operations. */\r\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\r\n/** SIMD types and operations. */\r\nexport const FEATURE_SIMD = Feature.SIMD;\r\n/** Threading and atomic operations. */\r\nexport const FEATURE_THREADS = Feature.THREADS;\r\n\r\n/** Enables a specific feature. */\r\nexport function enableFeature(options: Options, feature: Feature): void {\r\n  options.features |= feature;\r\n}\r\n\r\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\r\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\r\n  options.optimizeLevelHint = optimizeLevel;\r\n  options.shrinkLevelHint = shrinkLevel;\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Builds a JSON file of a program's runtime type information. */\r\nexport function buildRTTI(program: Program): string {\r\n  var sb = new Array<string>();\r\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\r\n  for (let cls of program.managedClasses.values()) {\r\n    sb.push(\"    \\\"\");\r\n    sb.push(cls.internalName);\r\n    sb.push(\"\\\",\\n\");\r\n  }\r\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\r\n  for (let cls of program.managedClasses.values()) {\r\n    let base = cls.base;\r\n    sb.push(\"    \");\r\n    sb.push(base ? base.id.toString() : \"0\");\r\n    sb.push(\",\\n\");\r\n  }\r\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\r\n  for (let cls of program.managedClasses.values()) {\r\n    sb.push(\"    \");\r\n    sb.push(cls.rttiFlags.toString());\r\n    sb.push(\",\\n\");\r\n  }\r\n  sb.push(\"  ]\\n}\\n\");\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX } from \"./common\";\r\n\r\n// Full API\r\nexport * from \"./ast\";\r\n// export * from \"./binary\";\r\nexport * from \"./common\";\r\nexport * from \"./compiler\";\r\nexport * from \"./decompiler\";\r\nexport * from \"./definitions\";\r\nexport * from \"./diagnosticMessages.generated\";\r\nexport * from \"./diagnostics\";\r\nexport * from \"./flow\";\r\nexport * from \"./module\";\r\nexport * from \"./parser\";\r\nexport * from \"./program\";\r\nexport * from \"./resolver\";\r\nexport * from \"./tokenizer\";\r\nexport * from \"./types\";\r\nexport * from \"./util\";\r\n","/** @module util *//***/\r\n\r\n/** Tests if the bit at the specified index is set within a 64-bit map. */\r\nexport function bitsetIs(map: I64, index: i32): bool {\r\n  assert(index >= 0 && index < 64);\r\n  return i64_ne(\r\n    i64_and(\r\n      map,\r\n      i64_shl(\r\n        i64_one,\r\n        i64_new(index)\r\n      )\r\n    ),\r\n    i64_zero\r\n  );\r\n}\r\n\r\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\r\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\r\n  assert(index >= 0 && index < 64);\r\n  return isSet\r\n    ? i64_or(\r\n        map,\r\n        i64_shl(\r\n          i64_one,\r\n          i64_new(index)\r\n        )\r\n      )\r\n    : i64_and(\r\n        map,\r\n        i64_not(\r\n          i64_shl(\r\n            i64_one,\r\n            i64_new(index)\r\n          )\r\n        )\r\n      );\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode.A && c <= CharCode.Z\r\n      || c == CharCode._\r\n      || c == CharCode.DOLLAR\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode._\r\n      || c == CharCode.DOLLAR\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n  var midVal: u16;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + ((hi - lo) >> 1);\r\n    mid -= (mid & 1);\r\n    midVal = map[mid];\r\n    if (midVal <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < midVal) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\r\n  if (original) {\r\n    let cloned = new Array<V>(original.length);\r\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\r\n    return cloned;\r\n  }\r\n  return new Array<V>();\r\n}\r\n\r\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\r\n  if (original) {\r\n    let cloned = new Set<V>();\r\n    for (let v of original) cloned.add(v);\r\n    return cloned;\r\n  }\r\n  return new Set<V>();\r\n}\r\n\r\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\r\n  var cloned = new Map<K,V>();\r\n  if (original) {\r\n    for (let [k, v] of original) cloned.set(k, v);\r\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\r\n  } else if (overrides) {\r\n    for (let [k, v] of overrides) cloned.set(k, v);\r\n  }\r\n  return cloned;\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nimport {\r\n  PATH_DELIMITER\r\n} from \"../common\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + PATH_DELIMITER + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  if (pos <= 1) {\r\n    if (pos == 0) return \".\";\r\n    if (normalizedPath.charCodeAt(0) == separator) {\r\n      return normalizedPath;\r\n    }\r\n  }\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\n/** Reads an 8-bit integer from the specified buffer. */\r\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset];\r\n}\r\n\r\n/** Writes an 8-bit integer to the specified buffer. */\r\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset] = value;\r\n}\r\n\r\n/** Reads a 16-bit integer from the specified buffer. */\r\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8;\r\n}\r\n\r\n/** Writes a 16-bit integer to the specified buffer. */\r\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n}\r\n\r\n/** Reads a 32-bit integer from the specified buffer. */\r\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8\r\n       | buffer[offset + 2] << 16\r\n       | buffer[offset + 3] << 24;\r\n}\r\n\r\n/** Writes a 32-bit integer to the specified buffer. */\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\n/** Reads a 64-bit integer from the specified buffer. */\r\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\r\n  var lo = readI32(buffer, offset);\r\n  var hi = readI32(buffer, offset + 4);\r\n  return i64_new(lo, hi);\r\n}\r\n\r\n/** Writes a 64-bit integer to the specified buffer. */\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\n/** Reads a 32-bit float from the specified buffer. */\r\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\r\n  return i32_as_f32(readI32(buffer, offset));\r\n}\r\n\r\n/** Writes a 32-bit float to the specified buffer. */\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\n/** Reads a 64-bit float from the specified buffer. */\r\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\r\n  return i64_as_f64(readI64(buffer, offset));\r\n}\r\n\r\n/** Writes a 64-bit float to the specified buffer. */\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n"],"sourceRoot":""}